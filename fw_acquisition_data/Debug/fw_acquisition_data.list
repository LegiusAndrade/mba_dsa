
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017524  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  080176c8  080176c8  000186c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184c0  080184c0  0001a284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080184c0  080184c0  000194c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184c8  080184c8  0001a284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184c8  080184c8  000194c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080184cc  080184cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  080184d0  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c50  20000284  08018754  0001a284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ed4  08018754  0001aed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e0a9  00000000  00000000  0001a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065cf  00000000  00000000  0005835d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003788  00000000  00000000  0005e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b27  00000000  00000000  000620b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f393  00000000  00000000  00064bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000384c9  00000000  00000000  00083f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af5b8  00000000  00000000  000bc43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b9f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fdcc  00000000  00000000  0016ba38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0017b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080176ac 	.word	0x080176ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	080176ac 	.word	0x080176ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fa4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00b      	beq.n	8000fc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	e000      	b.n	8000fb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write (int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  for(int i =0; i < len;i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
    {
      ITM_SendChar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ffc9 	bl	8000f84 <ITM_SendChar>
  for(int i =0; i < len;i++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
    }
  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b0bd      	sub	sp, #244	@ 0xf4
 8001010:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f00b f92f 	bl	800c274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f8b3 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 f9cb 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800101e:	f000 f9a1 	bl	8001364 <MX_DMA_Init>
  MX_SPI2_Init();
 8001022:	f000 f919 	bl	8001258 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001026:	f000 f94d 	bl	80012c4 <MX_TIM1_Init>
  MX_MEMS_Init();
 800102a:	f010 f979 	bl	8011320 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim1);
 800102e:	484e      	ldr	r0, [pc, #312]	@ (8001168 <main+0x15c>)
 8001030:	f00f fabc 	bl	80105ac <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001034:	f010 f97a 	bl	801132c <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */
      if (data_ready)
 8001038:	4b4c      	ldr	r3, [pc, #304]	@ (800116c <main+0x160>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f9      	beq.n	8001034 <main+0x28>
	{
	  const char name_file[] =
 8001040:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <main+0x164>)
 8001042:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8001046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    { "sensor_data.csv" };
	  const char header_csv[] =
 800104c:	4b49      	ldr	r3, [pc, #292]	@ (8001174 <main+0x168>)
 800104e:	f107 040c 	add.w	r4, r7, #12
 8001052:	461d      	mov	r5, r3
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001064:	e884 0003 	stmia.w	r4, {r0, r1}
	      "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z\n";
	  // Save data to SD card
	  sd_mount ();
 8001068:	f000 fb50 	bl	800170c <sd_mount>
	  sd_write_file (name_file, header_csv); // Write header
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fbde 	bl	8001838 <sd_write_file>

	  for (size_t i = 0; i < TIME_READ; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001082:	e069      	b.n	8001158 <main+0x14c>
	    {
	      char line[128] =
 8001084:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f014 fceb 	bl	8015a68 <memset>
		{ 0 };
	      snprintf (line, sizeof(line), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n",
			(unsigned long) sensor_data[i].timestamp,
 8001092:	4939      	ldr	r1, [pc, #228]	@ (8001178 <main+0x16c>)
 8001094:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	607b      	str	r3, [r7, #4]
			(long) sensor_data[i].acceleration.x,
 80010a6:	4934      	ldr	r1, [pc, #208]	@ (8001178 <main+0x16c>)
 80010a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	6819      	ldr	r1, [r3, #0]
			(long) sensor_data[i].acceleration.y,
 80010ba:	482f      	ldr	r0, [pc, #188]	@ (8001178 <main+0x16c>)
 80010bc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4403      	add	r3, r0
 80010ca:	3308      	adds	r3, #8
 80010cc:	6818      	ldr	r0, [r3, #0]
			(long) sensor_data[i].acceleration.z,
 80010ce:	4c2a      	ldr	r4, [pc, #168]	@ (8001178 <main+0x16c>)
 80010d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4423      	add	r3, r4
 80010de:	330c      	adds	r3, #12
 80010e0:	681c      	ldr	r4, [r3, #0]
			(long) sensor_data[i].angular_velocity.x,
 80010e2:	4d25      	ldr	r5, [pc, #148]	@ (8001178 <main+0x16c>)
 80010e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	442b      	add	r3, r5
 80010f2:	3310      	adds	r3, #16
 80010f4:	681d      	ldr	r5, [r3, #0]
			(long) sensor_data[i].angular_velocity.y,
 80010f6:	4e20      	ldr	r6, [pc, #128]	@ (8001178 <main+0x16c>)
 80010f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4433      	add	r3, r6
 8001106:	3314      	adds	r3, #20
 8001108:	681e      	ldr	r6, [r3, #0]
			(long) sensor_data[i].angular_velocity.z);
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <main+0x16c>)
 800110c:	603a      	str	r2, [r7, #0]
 800110e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	3318      	adds	r3, #24
 8001120:	681b      	ldr	r3, [r3, #0]
	      snprintf (line, sizeof(line), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n",
 8001122:	f107 0c44 	add.w	ip, r7, #68	@ 0x44
 8001126:	9305      	str	r3, [sp, #20]
 8001128:	9604      	str	r6, [sp, #16]
 800112a:	9503      	str	r5, [sp, #12]
 800112c:	9402      	str	r4, [sp, #8]
 800112e:	9001      	str	r0, [sp, #4]
 8001130:	9100      	str	r1, [sp, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <main+0x170>)
 8001136:	2180      	movs	r1, #128	@ 0x80
 8001138:	4660      	mov	r0, ip
 800113a:	f014 fb87 	bl	801584c <sniprintf>
	      sd_append_file (name_file, line);
 800113e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001142:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fbdd 	bl	8001908 <sd_append_file>
	  for (size_t i = 0; i < TIME_READ; i++)
 800114e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001152:	3301      	adds	r3, #1
 8001154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800115c:	2b02      	cmp	r3, #2
 800115e:	d991      	bls.n	8001084 <main+0x78>
	    }
	  sd_unmount ();
 8001160:	f000 fb48 	bl	80017f4 <sd_unmount>
  MX_MEMS_Process();
 8001164:	e766      	b.n	8001034 <main+0x28>
 8001166:	bf00      	nop
 8001168:	200003b8 	.word	0x200003b8
 800116c:	20000454 	.word	0x20000454
 8001170:	080176e8 	.word	0x080176e8
 8001174:	080176f8 	.word	0x080176f8
 8001178:	20000400 	.word	0x20000400
 800117c:	080176c8 	.word	0x080176c8

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	@ 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	@ 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f014 fc6a 	bl	8015a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <SystemClock_Config+0xd0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a28      	ldr	r2, [pc, #160]	@ (8001250 <SystemClock_Config+0xd0>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <SystemClock_Config+0xd0>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <SystemClock_Config+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <SystemClock_Config+0xd4>)
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <SystemClock_Config+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e8:	2310      	movs	r3, #16
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ec:	2302      	movs	r3, #2
 80011ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011f4:	2310      	movs	r3, #16
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011fe:	2304      	movs	r3, #4
 8001200:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001202:	2307      	movs	r3, #7
 8001204:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4618      	mov	r0, r3
 800120c:	f00d fd14 	bl	800ec38 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001216:	f000 f991 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	2302      	movs	r3, #2
 8001220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f00d ff76 	bl	800f128 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001242:	f000 f97b 	bl	800153c <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_SPI2_Init+0x64>)
 800125e:	4a18      	ldr	r2, [pc, #96]	@ (80012c0 <MX_SPI2_Init+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_SPI2_Init+0x64>)
 8001264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_SPI2_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_SPI2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_SPI2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_SPI2_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_SPI2_Init+0x64>)
 8001284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001288:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_SPI2_Init+0x64>)
 800128c:	2220      	movs	r2, #32
 800128e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_SPI2_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_SPI2_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_SPI2_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_SPI2_Init+0x64>)
 80012a4:	220a      	movs	r2, #10
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_SPI2_Init+0x64>)
 80012aa:	f00e f95d 	bl	800f568 <HAL_SPI_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012b4:	f000 f942 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002a0 	.word	0x200002a0
 80012c0:	40003800 	.word	0x40003800

080012c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_TIM1_Init+0x98>)
 80012e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <MX_TIM1_Init+0x9c>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM1_Init+0x98>)
 80012e8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80012ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_TIM1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_TIM1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_TIM1_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_TIM1_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_TIM1_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130c:	4813      	ldr	r0, [pc, #76]	@ (800135c <MX_TIM1_Init+0x98>)
 800130e:	f00f f8fd 	bl	801050c <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001318:	f000 f910 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <MX_TIM1_Init+0x98>)
 800132a:	f00f fa91 	bl	8010850 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001334:	f000 f902 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_TIM1_Init+0x98>)
 8001346:	f00f fc93 	bl	8010c70 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001350:	f000 f8f4 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200003b8 	.word	0x200003b8
 8001360:	40010000 	.word	0x40010000

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <MX_DMA_Init+0x4c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <MX_DMA_Init+0x4c>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <MX_DMA_Init+0x4c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	200e      	movs	r0, #14
 800138c:	f00b f8e3 	bl	800c556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001390:	200e      	movs	r0, #14
 8001392:	f00b f8fc 	bl	800c58e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	200f      	movs	r0, #15
 800139c:	f00b f8db 	bl	800c556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013a0:	200f      	movs	r0, #15
 80013a2:	f00b f8f4 	bl	800c58e <HAL_NVIC_EnableIRQ>

}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <MX_GPIO_Init+0xb4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <MX_GPIO_Init+0xb4>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <MX_GPIO_Init+0xb4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_GPIO_Init+0xb4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001468 <MX_GPIO_Init+0xb4>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_GPIO_Init+0xb4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_GPIO_Init+0xb4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <MX_GPIO_Init+0xb4>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_GPIO_Init+0xb4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <MX_GPIO_Init+0xb4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <MX_GPIO_Init+0xb4>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_GPIO_Init+0xb4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2180      	movs	r1, #128	@ 0x80
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <MX_GPIO_Init+0xb8>)
 8001440:	f00b fede 	bl	800d200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_GPIO_Init+0xb8>)
 800145c:	f00b fc50 	bl	800cd00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	@ 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800

08001470 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void
HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  static uint32_t prev = 0;
  if (htim->Instance == TIM1)  // Check if the interrupt comes from TIM1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2a      	ldr	r2, [pc, #168]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d14d      	bne.n	800151e <HAL_TIM_PeriodElapsedCallback+0xae>
    {
      __HAL_TIM_SET_AUTORELOAD(htim, 999); // Set the time to 100ms interrupt
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001492:	60da      	str	r2, [r3, #12]
      // Your code to be executed every second
      if (count_data < TIME_READ)
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d840      	bhi.n	800151e <HAL_TIM_PeriodElapsedCallback+0xae>
	{
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
	      IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, &sensor_data[count_data].acceleration) != 0)
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800149e:	681a      	ldr	r2, [r3, #0]
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80014aa:	4413      	add	r3, r2
 80014ac:	3304      	adds	r3, #4
 80014ae:	461a      	mov	r2, r3
 80014b0:	2102      	movs	r1, #2
 80014b2:	2001      	movs	r0, #1
 80014b4:	f00a f95e 	bl	800b774 <IKS4A1_MOTION_SENSOR_GetAxes>
	    {
	      // Handle error
	    }
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
	      IKS4A1_LSM6DSV16X_0, MOTION_GYRO, &sensor_data[count_data].angular_velocity) != 0)
 80014b8:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80014ba:	681a      	ldr	r2, [r3, #0]
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	3310      	adds	r3, #16
 80014c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80014c8:	4413      	add	r3, r2
 80014ca:	461a      	mov	r2, r3
 80014cc:	2101      	movs	r1, #1
 80014ce:	2001      	movs	r0, #1
 80014d0:	f00a f950 	bl	800b774 <IKS4A1_MOTION_SENSOR_GetAxes>
	    {
	      // Handle error
	    }
	  uint32_t now = HAL_GetTick ();
 80014d4:	f00a ff34 	bl	800c340 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]
	  sensor_data[count_data].timestamp = (prev == 0) ? 0 : (now - prev);
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_TIM_PeriodElapsedCallback+0x7c>
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	1ad2      	subs	r2, r2, r3
 80014ea:	e000      	b.n	80014ee <HAL_TIM_PeriodElapsedCallback+0x7e>
 80014ec:	2200      	movs	r2, #0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	480f      	ldr	r0, [pc, #60]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80014f4:	460b      	mov	r3, r1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	1a5b      	subs	r3, r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4403      	add	r3, r0
 80014fe:	601a      	str	r2, [r3, #0]
	  prev = now;
 8001500:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6013      	str	r3, [r2, #0]
	  count_data++;
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a07      	ldr	r2, [pc, #28]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800150e:	6013      	str	r3, [r2, #0]
	  if (count_data >= TIME_READ)
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d902      	bls.n	800151e <HAL_TIM_PeriodElapsedCallback+0xae>
	    {
	      data_ready = 1;           // avisa a thread principal
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]
      else
	{

	}
    }
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010000 	.word	0x40010000
 800152c:	20000458 	.word	0x20000458
 8001530:	20000400 	.word	0x20000400
 8001534:	2000045c 	.word	0x2000045c
 8001538:	20000454 	.word	0x20000454

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <Error_Handler+0x8>

08001548 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SD_disk_status+0x14>
        return STA_NOINIT;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <SD_disk_status+0x16>
    return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SD_disk_initialize+0x14>
        return STA_NOINIT;
 800157a:	2301      	movs	r3, #1
 800157c:	e007      	b.n	800158e <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 800157e:	f000 fb51 	bl	8001c24 <SD_SPI_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <SD_disk_read+0x1c>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <SD_disk_read+0x20>
        return RES_PARERR;
 80015b4:	2304      	movs	r3, #4
 80015b6:	e010      	b.n	80015da <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <SD_disk_read+0x4c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <SD_disk_read+0x2c>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e00a      	b.n	80015da <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f000 fc1d 	bl	8001e08 <SD_ReadBlocks>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200006a1 	.word	0x200006a1

080015e8 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <SD_disk_write+0x1c>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <SD_disk_write+0x20>
 8001604:	2304      	movs	r3, #4
 8001606:	e010      	b.n	800162a <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <SD_disk_write+0x4c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <SD_disk_write+0x2c>
 8001610:	2303      	movs	r3, #3
 8001612:	e00a      	b.n	800162a <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f000 fcc9 	bl	8001fb0 <SD_WriteBlocks>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200006a1 	.word	0x200006a1

08001638 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	603a      	str	r2, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	460b      	mov	r3, r1
 8001646:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 800164e:	2304      	movs	r3, #4
 8001650:	e022      	b.n	8001698 <SD_disk_ioctl+0x60>

    switch (cmd) {
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d81e      	bhi.n	8001696 <SD_disk_ioctl+0x5e>
 8001658:	a201      	add	r2, pc, #4	@ (adr r2, 8001660 <SD_disk_ioctl+0x28>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	08001681 	.word	0x08001681
 8001668:	08001675 	.word	0x08001675
 800166c:	0800168d 	.word	0x0800168d
    case CTRL_SYNC:
        return RES_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e011      	b.n	8001698 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167a:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e00b      	b.n	8001698 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001686:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e005      	b.n	8001698 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8001696:	2304      	movs	r3, #4
    }
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <sd_get_space_kb>:
//		printf("Format failed: f_mkfs returned %d\r\n", res);
//	}
//		return res;
//}

int sd_get_space_kb(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4814      	ldr	r0, [pc, #80]	@ (8001704 <sd_get_space_kb+0x60>)
 80016b4:	f013 fcea 	bl	801508c <f_getfree>
 80016b8:	4603      	mov	r3, r0
 80016ba:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <sd_get_space_kb+0x22>
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	e01a      	b.n	80016fc <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	3b02      	subs	r3, #2
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	8952      	ldrh	r2, [r2, #10]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	895b      	ldrh	r3, [r3, #10]
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	6939      	ldr	r1, [r7, #16]
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <sd_get_space_kb+0x64>)
 80016f6:	f014 f839 	bl	801576c <iprintf>
	return FR_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000460 	.word	0x20000460
 8001708:	08017730 	.word	0x08017730

0800170c <sd_mount>:

int sd_mount(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 8001712:	4829      	ldr	r0, [pc, #164]	@ (80017b8 <sd_mount+0xac>)
 8001714:	f014 f892 	bl	801583c <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 8001718:	4928      	ldr	r1, [pc, #160]	@ (80017bc <sd_mount+0xb0>)
 800171a:	4829      	ldr	r0, [pc, #164]	@ (80017c0 <sd_mount+0xb4>)
 800171c:	f013 fdb8 	bl	8015290 <FATFS_LinkDriver>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 8001726:	4827      	ldr	r0, [pc, #156]	@ (80017c4 <sd_mount+0xb8>)
 8001728:	f014 f888 	bl	801583c <puts>
		return FR_DISK_ERR;
 800172c:	2301      	movs	r3, #1
 800172e:	e03f      	b.n	80017b0 <sd_mount+0xa4>
	}

	printf("Initializing disk...\r\n");
 8001730:	4825      	ldr	r0, [pc, #148]	@ (80017c8 <sd_mount+0xbc>)
 8001732:	f014 f883 	bl	801583c <puts>
	DSTATUS stat = disk_initialize(0);
 8001736:	2000      	movs	r0, #0
 8001738:	f010 fd70 	bl	801221c <disk_initialize>
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <sd_mount+0x54>
		printf("disk_initialize failed: 0x%02X\n", stat);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	4619      	mov	r1, r3
 800174a:	4820      	ldr	r0, [pc, #128]	@ (80017cc <sd_mount+0xc0>)
 800174c:	f014 f80e 	bl	801576c <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8001750:	481f      	ldr	r0, [pc, #124]	@ (80017d0 <sd_mount+0xc4>)
 8001752:	f014 f873 	bl	801583c <puts>
		printf("Make sure \"MX_FATFS_Init\" is not being called in the main function\n"\
 8001756:	481f      	ldr	r0, [pc, #124]	@ (80017d4 <sd_mount+0xc8>)
 8001758:	f014 f870 	bl	801583c <puts>
				"You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n");
		return FR_NOT_READY;
 800175c:	2303      	movs	r3, #3
 800175e:	e027      	b.n	80017b0 <sd_mount+0xa4>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 8001760:	4916      	ldr	r1, [pc, #88]	@ (80017bc <sd_mount+0xb0>)
 8001762:	481d      	ldr	r0, [pc, #116]	@ (80017d8 <sd_mount+0xcc>)
 8001764:	f014 f802 	bl	801576c <iprintf>
	res = f_mount(&fs, sd_path, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	4914      	ldr	r1, [pc, #80]	@ (80017bc <sd_mount+0xb0>)
 800176c:	481b      	ldr	r0, [pc, #108]	@ (80017dc <sd_mount+0xd0>)
 800176e:	f012 fe57 	bl	8014420 <f_mount>
 8001772:	4603      	mov	r3, r0
 8001774:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d113      	bne.n	80017a4 <sd_mount+0x98>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 800177c:	490f      	ldr	r1, [pc, #60]	@ (80017bc <sd_mount+0xb0>)
 800177e:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <sd_mount+0xd4>)
 8001780:	f013 fff4 	bl	801576c <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8001784:	f000 fa42 	bl	8001c0c <sd_is_sdhc>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <sd_mount+0x86>
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <sd_mount+0xd8>)
 8001790:	e000      	b.n	8001794 <sd_mount+0x88>
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <sd_mount+0xdc>)
 8001794:	4619      	mov	r1, r3
 8001796:	4815      	ldr	r0, [pc, #84]	@ (80017ec <sd_mount+0xe0>)
 8001798:	f013 ffe8 	bl	801576c <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 800179c:	f7ff ff82 	bl	80016a4 <sd_get_space_kb>
		return FR_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e005      	b.n	80017b0 <sd_mount+0xa4>
//		}
//		return res;
//	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4811      	ldr	r0, [pc, #68]	@ (80017f0 <sd_mount+0xe4>)
 80017aa:	f013 ffdf 	bl	801576c <iprintf>
	return res;
 80017ae:	79bb      	ldrb	r3, [r7, #6]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	08017754 	.word	0x08017754
 80017bc:	20000460 	.word	0x20000460
 80017c0:	08017fc4 	.word	0x08017fc4
 80017c4:	0801776c 	.word	0x0801776c
 80017c8:	08017784 	.word	0x08017784
 80017cc:	0801779c 	.word	0x0801779c
 80017d0:	080177bc 	.word	0x080177bc
 80017d4:	080177f4 	.word	0x080177f4
 80017d8:	080178ac 	.word	0x080178ac
 80017dc:	20000464 	.word	0x20000464
 80017e0:	080178c8 	.word	0x080178c8
 80017e4:	080178f0 	.word	0x080178f0
 80017e8:	080178fc 	.word	0x080178fc
 80017ec:	08017904 	.word	0x08017904
 80017f0:	08017914 	.word	0x08017914

080017f4 <sd_unmount>:


int sd_unmount(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 80017fa:	2201      	movs	r2, #1
 80017fc:	490a      	ldr	r1, [pc, #40]	@ (8001828 <sd_unmount+0x34>)
 80017fe:	2000      	movs	r0, #0
 8001800:	f012 fe0e 	bl	8014420 <f_mount>
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <sd_unmount+0x1e>
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <sd_unmount+0x38>)
 8001810:	e000      	b.n	8001814 <sd_unmount+0x20>
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <sd_unmount+0x3c>)
 8001814:	4619      	mov	r1, r3
 8001816:	4807      	ldr	r0, [pc, #28]	@ (8001834 <sd_unmount+0x40>)
 8001818:	f013 ffa8 	bl	801576c <iprintf>
	return res;
 800181c:	79fb      	ldrb	r3, [r7, #7]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000460 	.word	0x20000460
 800182c:	08017934 	.word	0x08017934
 8001830:	08017938 	.word	0x08017938
 8001834:	08017940 	.word	0x08017940

08001838 <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800183e:	af00      	add	r7, sp, #0
 8001840:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001844:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001848:	6018      	str	r0, [r3, #0]
 800184a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800184e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001852:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001854:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001858:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800185c:	f107 000c 	add.w	r0, r7, #12
 8001860:	220a      	movs	r2, #10
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	f012 fe22 	bl	80144ac <f_open>
 8001868:	4603      	mov	r3, r0
 800186a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 800186e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <sd_write_file+0x44>
 8001876:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800187a:	e03e      	b.n	80018fa <sd_write_file+0xc2>

	res = f_write(&file, text, strlen(text), &bw);
 800187c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001880:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f7fe fcab 	bl	80001e0 <strlen>
 800188a:	4604      	mov	r4, r0
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001894:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001898:	f107 000c 	add.w	r0, r7, #12
 800189c:	4622      	mov	r2, r4
 800189e:	6809      	ldr	r1, [r1, #0]
 80018a0:	f012 ffce 	bl	8014840 <f_write>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4618      	mov	r0, r3
 80018b0:	f013 f9b9 	bl	8014c26 <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 80018b4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018b8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80018bc:	6819      	ldr	r1, [r3, #0]
 80018be:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018c2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	480e      	ldr	r0, [pc, #56]	@ (8001904 <sd_write_file+0xcc>)
 80018ca:	f013 ff4f 	bl	801576c <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 80018ce:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <sd_write_file+0xbc>
 80018d6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018da:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f7fe fc7e 	bl	80001e0 <strlen>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018ea:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <sd_write_file+0xc0>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <sd_write_file+0xc2>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	08017958 	.word	0x08017958

08001908 <sd_append_file>:

int sd_append_file(const char *filename, const char *text) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800190e:	af00      	add	r7, sp, #0
 8001910:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001914:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001918:	6018      	str	r0, [r3, #0]
 800191a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800191e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001922:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001924:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001928:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800192c:	f107 000c 	add.w	r0, r7, #12
 8001930:	2212      	movs	r2, #18
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	f012 fdba 	bl	80144ac <f_open>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 800193e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <sd_append_file+0x44>
 8001946:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800194a:	e058      	b.n	80019fe <sd_append_file+0xf6>

	res = f_lseek(&file, f_size(&file));
 800194c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001950:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f013 f98c 	bl	8014c7a <f_lseek>
 8001962:	4603      	mov	r3, r0
 8001964:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) {
 8001968:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <sd_append_file+0x78>
		f_close(&file);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4618      	mov	r0, r3
 8001976:	f013 f956 	bl	8014c26 <f_close>
		return res;
 800197a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800197e:	e03e      	b.n	80019fe <sd_append_file+0xf6>
	}

	res = f_write(&file, text, strlen(text), &bw);
 8001980:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001984:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f7fe fc29 	bl	80001e0 <strlen>
 800198e:	4604      	mov	r4, r0
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001998:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 800199c:	f107 000c 	add.w	r0, r7, #12
 80019a0:	4622      	mov	r2, r4
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	f012 ff4c 	bl	8014840 <f_write>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4618      	mov	r0, r3
 80019b4:	f013 f937 	bl	8014c26 <f_close>
	printf("Appended %u bytes to %s\r\n", bw, filename);
 80019b8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019bc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019c6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <sd_append_file+0x100>)
 80019ce:	f013 fecd 	bl	801576c <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 80019d2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10e      	bne.n	80019f8 <sd_append_file+0xf0>
 80019da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019de:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f7fe fbfc 	bl	80001e0 <strlen>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019ee:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <sd_append_file+0xf4>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <sd_append_file+0xf6>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	08017970 	.word	0x08017970

08001a0c <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <HAL_SPI_TxCpltCallback+0x24>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d102      	bne.n	8001a22 <HAL_SPI_TxCpltCallback+0x16>
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_SPI_TxCpltCallback+0x28>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002a0 	.word	0x200002a0
 8001a34:	20000698 	.word	0x20000698

08001a38 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2) dma_rx_done = 1;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a06      	ldr	r2, [pc, #24]	@ (8001a5c <HAL_SPI_TxRxCpltCallback+0x24>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d102      	bne.n	8001a4e <HAL_SPI_TxRxCpltCallback+0x16>
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_SPI_TxRxCpltCallback+0x28>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200002a0 	.word	0x200002a0
 8001a60:	2000069c 	.word	0x2000069c

08001a64 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001a6e:	1df9      	adds	r1, r7, #7
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	2201      	movs	r2, #1
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <SD_TransmitByte+0x20>)
 8001a78:	f00d fdff 	bl	800f67a <HAL_SPI_Transmit>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200002a0 	.word	0x200002a0

08001a88 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001a8e:	23ff      	movs	r3, #255	@ 0xff
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	2300      	movs	r3, #0
 8001a94:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8001a96:	1dba      	adds	r2, r7, #6
 8001a98:	1df9      	adds	r1, r7, #7
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <SD_ReceiveByte+0x2c>)
 8001aa4:	f00d ff2d 	bl	800f902 <HAL_SPI_TransmitReceive>
    return data;
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200002a0 	.word	0x200002a0

08001ab8 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <SD_TransmitBuffer+0x34>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	461a      	mov	r2, r3
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <SD_TransmitBuffer+0x38>)
 8001ad2:	f00e f8bf 	bl	800fc54 <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 8001ad6:	bf00      	nop
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <SD_TransmitBuffer+0x34>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0fb      	beq.n	8001ad8 <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000698 	.word	0x20000698
 8001af0:	200002a0 	.word	0x200002a0

08001af4 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e007      	b.n	8001b16 <SD_ReceiveBuffer+0x22>
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <SD_ReceiveBuffer+0x50>)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	22ff      	movs	r2, #255	@ 0xff
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dbf3      	blt.n	8001b06 <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <SD_ReceiveBuffer+0x54>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, tx_dummy, buffer, len);
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4906      	ldr	r1, [pc, #24]	@ (8001b44 <SD_ReceiveBuffer+0x50>)
 8001b2a:	4808      	ldr	r0, [pc, #32]	@ (8001b4c <SD_ReceiveBuffer+0x58>)
 8001b2c:	f00e f944 	bl	800fdb8 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8001b30:	bf00      	nop
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SD_ReceiveBuffer+0x54>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0fb      	beq.n	8001b32 <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200006a4 	.word	0x200006a4
 8001b48:	2000069c 	.word	0x2000069c
 8001b4c:	200002a0 	.word	0x200002a0

08001b50 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8001b56:	f00a fbf3 	bl	800c340 <HAL_GetTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001b60:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8001b62:	f7ff ff91 	bl	8001a88 <SD_ReceiveByte>
 8001b66:	4603      	mov	r3, r0
 8001b68:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2bff      	cmp	r3, #255	@ 0xff
 8001b6e:	d101      	bne.n	8001b74 <SD_WaitReady+0x24>
 8001b70:	2300      	movs	r3, #0
 8001b72:	e006      	b.n	8001b82 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001b74:	f00a fbe4 	bl	800c340 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d8f0      	bhi.n	8001b62 <SD_WaitReady+0x12>
    return SD_ERROR;
 8001b80:	2301      	movs	r3, #1
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	6039      	str	r1, [r7, #0]
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	4613      	mov	r3, r2
 8001b98:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8001b9a:	23ff      	movs	r3, #255	@ 0xff
 8001b9c:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8001b9e:	f7ff ffd7 	bl	8001b50 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff5a 	bl	8001a64 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	0e1b      	lsrs	r3, r3, #24
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff54 	bl	8001a64 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff4e 	bl	8001a64 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff48 	bl	8001a64 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff43 	bl	8001a64 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff3f 	bl	8001a64 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001be6:	f7ff ff4f 	bl	8001a88 <SD_ReceiveByte>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da05      	bge.n	8001c02 <SD_SendCommand+0x78>
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f1      	bne.n	8001be6 <SD_SendCommand+0x5c>

    return response;
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    return sdhc;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <sd_is_sdhc+0x14>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200006a0 	.word	0x200006a0

08001c24 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	4873      	ldr	r0, [pc, #460]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001c30:	f00b fae6 	bl	800d200 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e005      	b.n	8001c46 <SD_SPI_Init+0x22>
 8001c3a:	20ff      	movs	r0, #255	@ 0xff
 8001c3c:	f7ff ff12 	bl	8001a64 <SD_TransmitByte>
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	3301      	adds	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d9f6      	bls.n	8001c3a <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2180      	movs	r1, #128	@ 0x80
 8001c50:	486a      	ldr	r0, [pc, #424]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001c52:	f00b fad5 	bl	800d200 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8001c56:	2295      	movs	r2, #149	@ 0x95
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff ff95 	bl	8001b8a <SD_SendCommand>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8001c64:	2201      	movs	r2, #1
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	4864      	ldr	r0, [pc, #400]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001c6a:	f00b fac9 	bl	800d200 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001c6e:	20ff      	movs	r0, #255	@ 0xff
 8001c70:	f7ff fef8 	bl	8001a64 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <SD_SPI_Init+0x5a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0ba      	b.n	8001df4 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2180      	movs	r1, #128	@ 0x80
 8001c82:	485e      	ldr	r0, [pc, #376]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001c84:	f00b fabc 	bl	800d200 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8001c88:	2287      	movs	r2, #135	@ 0x87
 8001c8a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001c8e:	2008      	movs	r0, #8
 8001c90:	f7ff ff7b 	bl	8001b8a <SD_SendCommand>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e00c      	b.n	8001cb8 <SD_SPI_Init+0x94>
 8001c9e:	7bfc      	ldrb	r4, [r7, #15]
 8001ca0:	f7ff fef2 	bl	8001a88 <SD_ReceiveByte>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f104 0310 	add.w	r3, r4, #16
 8001cac:	443b      	add	r3, r7
 8001cae:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d9ef      	bls.n	8001c9e <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	484e      	ldr	r0, [pc, #312]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001cc4:	f00b fa9c 	bl	800d200 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001cc8:	20ff      	movs	r0, #255	@ 0xff
 8001cca:	f7ff fecb 	bl	8001a64 <SD_TransmitByte>

    sdhc = 0;
 8001cce:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <SD_SPI_Init+0x1dc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001cd4:	f00a fb34 	bl	800c340 <HAL_GetTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cde:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d15a      	bne.n	8001d9c <SD_SPI_Init+0x178>
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d157      	bne.n	8001d9c <SD_SPI_Init+0x178>
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2baa      	cmp	r3, #170	@ 0xaa
 8001cf0:	d154      	bne.n	8001d9c <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	4841      	ldr	r0, [pc, #260]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001cf8:	f00b fa82 	bl	800d200 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001cfc:	22ff      	movs	r2, #255	@ 0xff
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2037      	movs	r0, #55	@ 0x37
 8001d02:	f7ff ff42 	bl	8001b8a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001d06:	22ff      	movs	r2, #255	@ 0xff
 8001d08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d0c:	2029      	movs	r0, #41	@ 0x29
 8001d0e:	f7ff ff3c 	bl	8001b8a <SD_SendCommand>
 8001d12:	4603      	mov	r3, r0
 8001d14:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001d16:	2201      	movs	r2, #1
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	4838      	ldr	r0, [pc, #224]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001d1c:	f00b fa70 	bl	800d200 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001d20:	20ff      	movs	r0, #255	@ 0xff
 8001d22:	f7ff fe9f 	bl	8001a64 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <SD_SPI_Init+0x114>
 8001d2c:	f00a fb08 	bl	800c340 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d8dc      	bhi.n	8001cf2 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SD_SPI_Init+0x11e>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e058      	b.n	8001df4 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8001d42:	2200      	movs	r2, #0
 8001d44:	2180      	movs	r1, #128	@ 0x80
 8001d46:	482d      	ldr	r0, [pc, #180]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001d48:	f00b fa5a 	bl	800d200 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8001d4c:	22ff      	movs	r2, #255	@ 0xff
 8001d4e:	2100      	movs	r1, #0
 8001d50:	203a      	movs	r0, #58	@ 0x3a
 8001d52:	f7ff ff1a 	bl	8001b8a <SD_SendCommand>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e00c      	b.n	8001d7a <SD_SPI_Init+0x156>
 8001d60:	7bfc      	ldrb	r4, [r7, #15]
 8001d62:	f7ff fe91 	bl	8001a88 <SD_ReceiveByte>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f104 0310 	add.w	r3, r4, #16
 8001d6e:	443b      	add	r3, r7
 8001d70:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d9ef      	bls.n	8001d60 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8001d80:	2201      	movs	r2, #1
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	481d      	ldr	r0, [pc, #116]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001d86:	f00b fa3b 	bl	800d200 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001d8a:	783b      	ldrb	r3, [r7, #0]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d02a      	beq.n	8001dea <SD_SPI_Init+0x1c6>
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <SD_SPI_Init+0x1dc>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001d9a:	e026      	b.n	8001dea <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2180      	movs	r1, #128	@ 0x80
 8001da0:	4816      	ldr	r0, [pc, #88]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001da2:	f00b fa2d 	bl	800d200 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001da6:	22ff      	movs	r2, #255	@ 0xff
 8001da8:	2100      	movs	r1, #0
 8001daa:	2037      	movs	r0, #55	@ 0x37
 8001dac:	f7ff feed 	bl	8001b8a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8001db0:	22ff      	movs	r2, #255	@ 0xff
 8001db2:	2100      	movs	r1, #0
 8001db4:	2029      	movs	r0, #41	@ 0x29
 8001db6:	f7ff fee8 	bl	8001b8a <SD_SendCommand>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2180      	movs	r1, #128	@ 0x80
 8001dc2:	480e      	ldr	r0, [pc, #56]	@ (8001dfc <SD_SPI_Init+0x1d8>)
 8001dc4:	f00b fa1c 	bl	800d200 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001dc8:	20ff      	movs	r0, #255	@ 0xff
 8001dca:	f7ff fe4b 	bl	8001a64 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <SD_SPI_Init+0x1bc>
 8001dd4:	f00a fab4 	bl	800c340 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d8dd      	bhi.n	8001d9c <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <SD_SPI_Init+0x1c8>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e004      	b.n	8001df4 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001dea:	bf00      	nop
    }

    card_initialized = 1;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SD_SPI_Init+0x1e0>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	200006a0 	.word	0x200006a0
 8001e04:	200006a1 	.word	0x200006a1

08001e08 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <SD_ReadBlocks+0x16>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e054      	b.n	8001ec8 <SD_ReadBlocks+0xc0>

    if (count == 1) {
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d14b      	bne.n	8001ebc <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8001e24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <SD_ReadBlocks+0xc8>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <SD_ReadBlocks+0x2a>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	4827      	ldr	r0, [pc, #156]	@ (8001ed4 <SD_ReadBlocks+0xcc>)
 8001e38:	f00b f9e2 	bl	800d200 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001e3c:	22ff      	movs	r2, #255	@ 0xff
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	2011      	movs	r0, #17
 8001e42:	f7ff fea2 	bl	8001b8a <SD_SendCommand>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2180      	movs	r1, #128	@ 0x80
 8001e50:	4820      	ldr	r0, [pc, #128]	@ (8001ed4 <SD_ReadBlocks+0xcc>)
 8001e52:	f00b f9d5 	bl	800d200 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e036      	b.n	8001ec8 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001e5a:	f00a fa71 	bl	800c340 <HAL_GetTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	33c8      	adds	r3, #200	@ 0xc8
 8001e62:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001e64:	f7ff fe10 	bl	8001a88 <SD_ReceiveByte>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e70:	d006      	beq.n	8001e80 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001e72:	f00a fa65 	bl	800c340 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d8f2      	bhi.n	8001e64 <SD_ReadBlocks+0x5c>
 8001e7e:	e000      	b.n	8001e82 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8001e80:	bf00      	nop
        if (token != 0xFE) {
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e86:	d006      	beq.n	8001e96 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	4811      	ldr	r0, [pc, #68]	@ (8001ed4 <SD_ReadBlocks+0xcc>)
 8001e8e:	f00b f9b7 	bl	800d200 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e018      	b.n	8001ec8 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8001e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fe2a 	bl	8001af4 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8001ea0:	f7ff fdf2 	bl	8001a88 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001ea4:	f7ff fdf0 	bl	8001a88 <SD_ReceiveByte>
        SD_CS_HIGH();
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	4809      	ldr	r0, [pc, #36]	@ (8001ed4 <SD_ReadBlocks+0xcc>)
 8001eae:	f00b f9a7 	bl	800d200 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001eb2:	20ff      	movs	r0, #255	@ 0xff
 8001eb4:	f7ff fdd6 	bl	8001a64 <SD_TransmitByte>
        return SD_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e005      	b.n	8001ec8 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f809 	bl	8001ed8 <SD_ReadMultiBlocks>
 8001ec6:	4603      	mov	r3, r0
    }
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200006a0 	.word	0x200006a0
 8001ed4:	40020800 	.word	0x40020800

08001ed8 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <SD_ReadMultiBlocks+0x16>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e058      	b.n	8001fa0 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8001eee:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <SD_ReadMultiBlocks+0xd0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <SD_ReadMultiBlocks+0x24>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	482a      	ldr	r0, [pc, #168]	@ (8001fac <SD_ReadMultiBlocks+0xd4>)
 8001f02:	f00b f97d 	bl	800d200 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001f06:	22ff      	movs	r2, #255	@ 0xff
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	2012      	movs	r0, #18
 8001f0c:	f7ff fe3d 	bl	8001b8a <SD_SendCommand>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d031      	beq.n	8001f7a <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8001f16:	2201      	movs	r2, #1
 8001f18:	2180      	movs	r1, #128	@ 0x80
 8001f1a:	4824      	ldr	r0, [pc, #144]	@ (8001fac <SD_ReadMultiBlocks+0xd4>)
 8001f1c:	f00b f970 	bl	800d200 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e03d      	b.n	8001fa0 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001f24:	f00a fa0c 	bl	800c340 <HAL_GetTick>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	33c8      	adds	r3, #200	@ 0xc8
 8001f2c:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001f2e:	f7ff fdab 	bl	8001a88 <SD_ReceiveByte>
 8001f32:	4603      	mov	r3, r0
 8001f34:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f3a:	d006      	beq.n	8001f4a <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001f3c:	f00a fa00 	bl	800c340 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d8f2      	bhi.n	8001f2e <SD_ReadMultiBlocks+0x56>
 8001f48:	e000      	b.n	8001f4c <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 8001f4a:	bf00      	nop

        if (token != 0xFE) {
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f50:	d006      	beq.n	8001f60 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8001f52:	2201      	movs	r2, #1
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	4815      	ldr	r0, [pc, #84]	@ (8001fac <SD_ReadMultiBlocks+0xd4>)
 8001f58:	f00b f952 	bl	800d200 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e01f      	b.n	8001fa0 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8001f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fdc5 	bl	8001af4 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8001f6a:	f7ff fd8d 	bl	8001a88 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001f6e:	f7ff fd8b 	bl	8001a88 <SD_ReceiveByte>

        buff += 512;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001f78:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1cf      	bne.n	8001f24 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8001f84:	22ff      	movs	r2, #255	@ 0xff
 8001f86:	2100      	movs	r1, #0
 8001f88:	200c      	movs	r0, #12
 8001f8a:	f7ff fdfe 	bl	8001b8a <SD_SendCommand>
    SD_CS_HIGH();
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2180      	movs	r1, #128	@ 0x80
 8001f92:	4806      	ldr	r0, [pc, #24]	@ (8001fac <SD_ReadMultiBlocks+0xd4>)
 8001f94:	f00b f934 	bl	800d200 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8001f98:	20ff      	movs	r0, #255	@ 0xff
 8001f9a:	f7ff fd63 	bl	8001a64 <SD_TransmitByte>

    return SD_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200006a0 	.word	0x200006a0
 8001fac:	40020800 	.word	0x40020800

08001fb0 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <SD_WriteBlocks+0x16>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e051      	b.n	800206a <SD_WriteBlocks+0xba>

    if (count == 1) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d148      	bne.n	800205e <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 8001fcc:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <SD_WriteBlocks+0xc4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <SD_WriteBlocks+0x2a>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	025b      	lsls	r3, r3, #9
 8001fd8:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	4826      	ldr	r0, [pc, #152]	@ (8002078 <SD_WriteBlocks+0xc8>)
 8001fe0:	f00b f90e 	bl	800d200 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001fe4:	22ff      	movs	r2, #255	@ 0xff
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	2018      	movs	r0, #24
 8001fea:	f7ff fdce 	bl	8001b8a <SD_SendCommand>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2180      	movs	r1, #128	@ 0x80
 8001ff8:	481f      	ldr	r0, [pc, #124]	@ (8002078 <SD_WriteBlocks+0xc8>)
 8001ffa:	f00b f901 	bl	800d200 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e033      	b.n	800206a <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8002002:	20fe      	movs	r0, #254	@ 0xfe
 8002004:	f7ff fd2e 	bl	8001a64 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8002008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff fd53 	bl	8001ab8 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8002012:	20ff      	movs	r0, #255	@ 0xff
 8002014:	f7ff fd26 	bl	8001a64 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8002018:	20ff      	movs	r0, #255	@ 0xff
 800201a:	f7ff fd23 	bl	8001a64 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 800201e:	f7ff fd33 	bl	8001a88 <SD_ReceiveByte>
 8002022:	4603      	mov	r3, r0
 8002024:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2b05      	cmp	r3, #5
 800202e:	d006      	beq.n	800203e <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8002030:	2201      	movs	r2, #1
 8002032:	2180      	movs	r1, #128	@ 0x80
 8002034:	4810      	ldr	r0, [pc, #64]	@ (8002078 <SD_WriteBlocks+0xc8>)
 8002036:	f00b f8e3 	bl	800d200 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e015      	b.n	800206a <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 800203e:	bf00      	nop
 8002040:	f7ff fd22 	bl	8001a88 <SD_ReceiveByte>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0fa      	beq.n	8002040 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 800204a:	2201      	movs	r2, #1
 800204c:	2180      	movs	r1, #128	@ 0x80
 800204e:	480a      	ldr	r0, [pc, #40]	@ (8002078 <SD_WriteBlocks+0xc8>)
 8002050:	f00b f8d6 	bl	800d200 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002054:	20ff      	movs	r0, #255	@ 0xff
 8002056:	f7ff fd05 	bl	8001a64 <SD_TransmitByte>

        return SD_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e005      	b.n	800206a <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f80a 	bl	800207c <SD_WriteMultiBlocks>
 8002068:	4603      	mov	r3, r0
    }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200006a0 	.word	0x200006a0
 8002078:	40020800 	.word	0x40020800

0800207c <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <SD_WriteMultiBlocks+0x16>
 800208e:	2301      	movs	r3, #1
 8002090:	e059      	b.n	8002146 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <SD_WriteMultiBlocks+0xd4>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <SD_WriteMultiBlocks+0x24>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80020a0:	2200      	movs	r2, #0
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	482b      	ldr	r0, [pc, #172]	@ (8002154 <SD_WriteMultiBlocks+0xd8>)
 80020a6:	f00b f8ab 	bl	800d200 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 80020aa:	22ff      	movs	r2, #255	@ 0xff
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	2019      	movs	r0, #25
 80020b0:	f7ff fd6b 	bl	8001b8a <SD_SendCommand>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02e      	beq.n	8002118 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 80020ba:	2201      	movs	r2, #1
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	4825      	ldr	r0, [pc, #148]	@ (8002154 <SD_WriteMultiBlocks+0xd8>)
 80020c0:	f00b f89e 	bl	800d200 <HAL_GPIO_WritePin>
        return SD_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e03e      	b.n	8002146 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 80020c8:	20fc      	movs	r0, #252	@ 0xfc
 80020ca:	f7ff fccb 	bl	8001a64 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 80020ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff fcf0 	bl	8001ab8 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 80020d8:	20ff      	movs	r0, #255	@ 0xff
 80020da:	f7ff fcc3 	bl	8001a64 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80020de:	20ff      	movs	r0, #255	@ 0xff
 80020e0:	f7ff fcc0 	bl	8001a64 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80020e4:	f7ff fcd0 	bl	8001a88 <SD_ReceiveByte>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d006      	beq.n	8002104 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 80020f6:	2201      	movs	r2, #1
 80020f8:	2180      	movs	r1, #128	@ 0x80
 80020fa:	4816      	ldr	r0, [pc, #88]	@ (8002154 <SD_WriteMultiBlocks+0xd8>)
 80020fc:	f00b f880 	bl	800d200 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e020      	b.n	8002146 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8002104:	bf00      	nop
 8002106:	f7ff fcbf 	bl	8001a88 <SD_ReceiveByte>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0fa      	beq.n	8002106 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002116:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1d2      	bne.n	80020c8 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8002122:	20fd      	movs	r0, #253	@ 0xfd
 8002124:	f7ff fc9e 	bl	8001a64 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8002128:	bf00      	nop
 800212a:	f7ff fcad 	bl	8001a88 <SD_ReceiveByte>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0fa      	beq.n	800212a <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8002134:	2201      	movs	r2, #1
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	4806      	ldr	r0, [pc, #24]	@ (8002154 <SD_WriteMultiBlocks+0xd8>)
 800213a:	f00b f861 	bl	800d200 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800213e:	20ff      	movs	r0, #255	@ 0xff
 8002140:	f7ff fc90 	bl	8001a64 <SD_TransmitByte>

    return SD_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200006a0 	.word	0x200006a0
 8002154:	40020800 	.word	0x40020800

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800216c:	6453      	str	r3, [r2, #68]	@ 0x44
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_SPI_MspInit+0x13c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	f040 8087 	bne.w	80022da <HAL_SPI_MspInit+0x132>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	4b45      	ldr	r3, [pc, #276]	@ (80022e8 <HAL_SPI_MspInit+0x140>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	4a44      	ldr	r2, [pc, #272]	@ (80022e8 <HAL_SPI_MspInit+0x140>)
 80021d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021da:	6413      	str	r3, [r2, #64]	@ 0x40
 80021dc:	4b42      	ldr	r3, [pc, #264]	@ (80022e8 <HAL_SPI_MspInit+0x140>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	4b3e      	ldr	r3, [pc, #248]	@ (80022e8 <HAL_SPI_MspInit+0x140>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_SPI_MspInit+0x140>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <HAL_SPI_MspInit+0x140>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002204:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002216:	2305      	movs	r3, #5
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4832      	ldr	r0, [pc, #200]	@ (80022ec <HAL_SPI_MspInit+0x144>)
 8002222:	f00a fd6d 	bl	800cd00 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002226:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002228:	4a32      	ldr	r2, [pc, #200]	@ (80022f4 <HAL_SPI_MspInit+0x14c>)
 800222a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800222c:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 800222e:	2200      	movs	r2, #0
 8002230:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800223e:	4b2c      	ldr	r3, [pc, #176]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002244:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002246:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002248:	2200      	movs	r2, #0
 800224a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800224c:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002264:	4822      	ldr	r0, [pc, #136]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002266:	f00a f9ad 	bl	800c5c4 <HAL_DMA_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002270:	f7ff f964 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 8002278:	64da      	str	r2, [r3, #76]	@ 0x4c
 800227a:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <HAL_SPI_MspInit+0x148>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002280:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <HAL_SPI_MspInit+0x154>)
 8002284:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002286:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228c:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002292:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 800229a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800229e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a6:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80022be:	480e      	ldr	r0, [pc, #56]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022c0:	f00a f980 	bl	800c5c4 <HAL_DMA_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80022ca:	f7ff f937 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022d2:	649a      	str	r2, [r3, #72]	@ 0x48
 80022d4:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <HAL_SPI_MspInit+0x150>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40003800 	.word	0x40003800
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020400 	.word	0x40020400
 80022f0:	200002f8 	.word	0x200002f8
 80022f4:	40026058 	.word	0x40026058
 80022f8:	20000358 	.word	0x20000358
 80022fc:	40026070 	.word	0x40026070

08002300 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <HAL_TIM_Base_MspInit+0x58>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11d      	bne.n	800234e <HAL_TIM_Base_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <HAL_TIM_Base_MspInit+0x5c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	4a10      	ldr	r2, [pc, #64]	@ (800235c <HAL_TIM_Base_MspInit+0x5c>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6453      	str	r3, [r2, #68]	@ 0x44
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_TIM_Base_MspInit+0x5c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2018      	movs	r0, #24
 8002334:	f00a f90f 	bl	800c556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002338:	2018      	movs	r0, #24
 800233a:	f00a f928 	bl	800c58e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2019      	movs	r0, #25
 8002344:	f00a f907 	bl	800c556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002348:	2019      	movs	r0, #25
 800234a:	f00a f920 	bl	800c58e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40023800 	.word	0x40023800

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <NMI_Handler+0x4>

08002368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <MemManage_Handler+0x4>

08002378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <UsageFault_Handler+0x4>

08002388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b6:	f009 ffaf 	bl	800c318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <DMA1_Stream3_IRQHandler+0x10>)
 80023c6:	f00a fa03 	bl	800c7d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200002f8 	.word	0x200002f8

080023d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <DMA1_Stream4_IRQHandler+0x10>)
 80023da:	f00a f9f9 	bl	800c7d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000358 	.word	0x20000358

080023e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023ec:	4802      	ldr	r0, [pc, #8]	@ (80023f8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023ee:	f00e f93f 	bl	8010670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003b8 	.word	0x200003b8

080023fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002400:	4802      	ldr	r0, [pc, #8]	@ (800240c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002402:	f00e f935 	bl	8010670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200003b8 	.word	0x200003b8

08002410 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <BSP_I2C1_Init+0x58>)
 800241c:	4a13      	ldr	r2, [pc, #76]	@ (800246c <BSP_I2C1_Init+0x5c>)
 800241e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <BSP_I2C1_Init+0x60>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	4912      	ldr	r1, [pc, #72]	@ (8002470 <BSP_I2C1_Init+0x60>)
 8002428:	600a      	str	r2, [r1, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d117      	bne.n	800245e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800242e:	480e      	ldr	r0, [pc, #56]	@ (8002468 <BSP_I2C1_Init+0x58>)
 8002430:	f00b fee4 	bl	800e1fc <HAL_I2C_GetState>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d111      	bne.n	800245e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800243a:	480b      	ldr	r0, [pc, #44]	@ (8002468 <BSP_I2C1_Init+0x58>)
 800243c:	f000 f936 	bl	80026ac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002446:	4808      	ldr	r0, [pc, #32]	@ (8002468 <BSP_I2C1_Init+0x58>)
 8002448:	f000 f8fc 	bl	8002644 <MX_I2C1_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002452:	f06f 0307 	mvn.w	r3, #7
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e001      	b.n	800245e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200008a4 	.word	0x200008a4
 800246c:	40005400 	.word	0x40005400
 8002470:	200008f8 	.word	0x200008f8

08002474 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <BSP_I2C1_DeInit+0x48>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <BSP_I2C1_DeInit+0x48>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3b01      	subs	r3, #1
 800248c:	4a0b      	ldr	r2, [pc, #44]	@ (80024bc <BSP_I2C1_DeInit+0x48>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <BSP_I2C1_DeInit+0x48>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <BSP_I2C1_DeInit+0x4c>)
 800249a:	f000 f94f 	bl	800273c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800249e:	4808      	ldr	r0, [pc, #32]	@ (80024c0 <BSP_I2C1_DeInit+0x4c>)
 80024a0:	f00b f80c 	bl	800d4bc <HAL_I2C_DeInit>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80024aa:	f06f 0307 	mvn.w	r3, #7
 80024ae:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200008f8 	.word	0x200008f8
 80024c0:	200008a4 	.word	0x200008a4

080024c4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60ba      	str	r2, [r7, #8]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	81fb      	strh	r3, [r7, #14]
 80024d2:	460b      	mov	r3, r1
 80024d4:	81bb      	strh	r3, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80024de:	89ba      	ldrh	r2, [r7, #12]
 80024e0:	89f9      	ldrh	r1, [r7, #14]
 80024e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2301      	movs	r3, #1
 80024f2:	480c      	ldr	r0, [pc, #48]	@ (8002524 <BSP_I2C1_WriteReg+0x60>)
 80024f4:	f00b fb56 	bl	800dba4 <HAL_I2C_Mem_Write>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80024fe:	4809      	ldr	r0, [pc, #36]	@ (8002524 <BSP_I2C1_WriteReg+0x60>)
 8002500:	f00b fe8a 	bl	800e218 <HAL_I2C_GetError>
 8002504:	4603      	mov	r3, r0
 8002506:	2b04      	cmp	r3, #4
 8002508:	d103      	bne.n	8002512 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800250a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e002      	b.n	8002518 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002512:	f06f 0303 	mvn.w	r3, #3
 8002516:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002518:	697b      	ldr	r3, [r7, #20]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200008a4 	.word	0x200008a4

08002528 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af04      	add	r7, sp, #16
 800252e:	60ba      	str	r2, [r7, #8]
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	81fb      	strh	r3, [r7, #14]
 8002536:	460b      	mov	r3, r1
 8002538:	81bb      	strh	r3, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002542:	89ba      	ldrh	r2, [r7, #12]
 8002544:	89f9      	ldrh	r1, [r7, #14]
 8002546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	480c      	ldr	r0, [pc, #48]	@ (8002588 <BSP_I2C1_ReadReg+0x60>)
 8002558:	f00b fc1e 	bl	800dd98 <HAL_I2C_Mem_Read>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002562:	4809      	ldr	r0, [pc, #36]	@ (8002588 <BSP_I2C1_ReadReg+0x60>)
 8002564:	f00b fe58 	bl	800e218 <HAL_I2C_GetError>
 8002568:	4603      	mov	r3, r0
 800256a:	2b04      	cmp	r3, #4
 800256c:	d103      	bne.n	8002576 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800256e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e002      	b.n	800257c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002576:	f06f 0303 	mvn.w	r3, #3
 800257a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800257c:	697b      	ldr	r3, [r7, #20]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200008a4 	.word	0x200008a4

0800258c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	80fb      	strh	r3, [r7, #6]
 8002598:	4613      	mov	r3, r2
 800259a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	88f9      	ldrh	r1, [r7, #6]
 80025a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025a8:	9200      	str	r2, [sp, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	480b      	ldr	r0, [pc, #44]	@ (80025dc <BSP_I2C1_Send+0x50>)
 80025ae:	f00a ffc9 	bl	800d544 <HAL_I2C_Master_Transmit>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00c      	beq.n	80025d2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80025b8:	4808      	ldr	r0, [pc, #32]	@ (80025dc <BSP_I2C1_Send+0x50>)
 80025ba:	f00b fe2d 	bl	800e218 <HAL_I2C_GetError>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d003      	beq.n	80025cc <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80025c4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e002      	b.n	80025d2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80025cc:	f06f 0303 	mvn.w	r3, #3
 80025d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200008a4 	.word	0x200008a4

080025e0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	80fb      	strh	r3, [r7, #6]
 80025ec:	4613      	mov	r3, r2
 80025ee:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80025f4:	88bb      	ldrh	r3, [r7, #4]
 80025f6:	88f9      	ldrh	r1, [r7, #6]
 80025f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025fc:	9200      	str	r2, [sp, #0]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	480b      	ldr	r0, [pc, #44]	@ (8002630 <BSP_I2C1_Recv+0x50>)
 8002602:	f00b f89d 	bl	800d740 <HAL_I2C_Master_Receive>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800260c:	4808      	ldr	r0, [pc, #32]	@ (8002630 <BSP_I2C1_Recv+0x50>)
 800260e:	f00b fe03 	bl	800e218 <HAL_I2C_GetError>
 8002612:	4603      	mov	r3, r0
 8002614:	2b04      	cmp	r3, #4
 8002616:	d003      	beq.n	8002620 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002618:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e002      	b.n	8002626 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002620:	f06f 0303 	mvn.w	r3, #3
 8002624:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200008a4 	.word	0x200008a4

08002634 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002638:	f009 fe82 	bl	800c340 <HAL_GetTick>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <MX_I2C1_Init+0x60>)
 8002654:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a13      	ldr	r2, [pc, #76]	@ (80026a8 <MX_I2C1_Init+0x64>)
 800265a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800266e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f00a fdd3 	bl	800d234 <HAL_I2C_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40005400 	.word	0x40005400
 80026a8:	000186a0 	.word	0x000186a0

080026ac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <I2C1_MspInit+0x88>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <I2C1_MspInit+0x88>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <I2C1_MspInit+0x88>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80026d0:	2340      	movs	r3, #64	@ 0x40
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d4:	2312      	movs	r3, #18
 80026d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80026e0:	2304      	movs	r3, #4
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	4813      	ldr	r0, [pc, #76]	@ (8002738 <I2C1_MspInit+0x8c>)
 80026ec:	f00a fb08 	bl	800cd00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f4:	2312      	movs	r3, #18
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002700:	2304      	movs	r3, #4
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	480b      	ldr	r0, [pc, #44]	@ (8002738 <I2C1_MspInit+0x8c>)
 800270c:	f00a faf8 	bl	800cd00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <I2C1_MspInit+0x88>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	4a06      	ldr	r2, [pc, #24]	@ (8002734 <I2C1_MspInit+0x88>)
 800271a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800271e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <I2C1_MspInit+0x88>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800272c:	bf00      	nop
 800272e:	3728      	adds	r7, #40	@ 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	40020400 	.word	0x40020400

0800273c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <I2C1_MspDeInit+0x2c>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <I2C1_MspDeInit+0x2c>)
 800274a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800274e:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002750:	2140      	movs	r1, #64	@ 0x40
 8002752:	4806      	ldr	r0, [pc, #24]	@ (800276c <I2C1_MspDeInit+0x30>)
 8002754:	f00a fc58 	bl	800d008 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002758:	2180      	movs	r1, #128	@ 0x80
 800275a:	4804      	ldr	r0, [pc, #16]	@ (800276c <I2C1_MspDeInit+0x30>)
 800275c:	f00a fc54 	bl	800d008 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40020400 	.word	0x40020400

08002770 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e00a      	b.n	8002798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002782:	f3af 8000 	nop.w
 8002786:	4601      	mov	r1, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	60ba      	str	r2, [r7, #8]
 800278e:	b2ca      	uxtb	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	dbf0      	blt.n	8002782 <_read+0x12>
  }

  return len;
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d2:	605a      	str	r2, [r3, #4]
  return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_isatty>:

int _isatty(int file)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281c:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002844:	f013 f96e 	bl	8015b24 <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20018000 	.word	0x20018000
 8002874:	00000400 	.word	0x00000400
 8002878:	200008fc 	.word	0x200008fc
 800287c:	20000ed8 	.word	0x20000ed8

08002880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <SystemInit+0x20>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <SystemInit+0x20>)
 800288c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028a8:	f7ff ffea 	bl	8002880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ae:	490d      	ldr	r1, [pc, #52]	@ (80028e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028c4:	4c0a      	ldr	r4, [pc, #40]	@ (80028f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028d2:	f013 f92d 	bl	8015b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d6:	f7fe fb99 	bl	800100c <main>
  bx  lr    
 80028da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80028e8:	080184d0 	.word	0x080184d0
  ldr r2, =_sbss
 80028ec:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 80028f0:	20000ed4 	.word	0x20000ed4

080028f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC_IRQHandler>
	...

080028f8 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e088      	b.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	7b1a      	ldrb	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a36      	ldr	r2, [pc, #216]	@ (8002a30 <LIS2DUXS12_RegisterBusIO+0x138>)
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a35      	ldr	r2, [pc, #212]	@ (8002a34 <LIS2DUXS12_RegisterBusIO+0x13c>)
 800295e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e053      	b.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4798      	blx	r3
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e049      	b.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d11c      	bne.n	80029d4 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d140      	bne.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f8f4 	bl	8002b92 <LIS2DUXS12_ExitDeepPowerDownSPI>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 80029b6:	2350      	movs	r3, #80	@ 0x50
 80029b8:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	461a      	mov	r2, r3
 80029be:	2110      	movs	r1, #16
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fbf6 	bl	80031b2 <LIS2DUXS12_Write_Reg>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02c      	beq.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e028      	b.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10e      	bne.n	80029fa <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11f      	bne.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8d3 	bl	8002b92 <LIS2DUXS12_ExitDeepPowerDownSPI>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d019      	beq.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e015      	b.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8ab 	bl	8002b68 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e002      	b.n	8002a26 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
 8002a24:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	0800366d 	.word	0x0800366d
 8002a34:	080036a3 	.word	0x080036a3

08002a38 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d01f      	beq.n	8002a88 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3320      	adds	r3, #32
 8002a4c:	f107 0214 	add.w	r2, r7, #20
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fb0a 	bl	800406c <lis2duxs12_i3c_configure_get>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e05c      	b.n	8002b1e <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8002a64:	7d7b      	ldrb	r3, [r7, #21]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3320      	adds	r3, #32
 8002a70:	f107 0214 	add.w	r2, r7, #20
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fac0 	bl	8003ffc <lis2duxs12_i3c_configure_set>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e04a      	b.n	8002b1e <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002a88:	2100      	movs	r1, #0
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fbac 	bl	80031e8 <LIS2DUXS12_Set_Mem_Bank>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e040      	b.n	8002b1e <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3320      	adds	r3, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fec4 	bl	8003830 <lis2duxs12_init_set>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	e034      	b.n	8002b1e <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f103 0020 	add.w	r0, r3, #32
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002acc:	f001 fb33 	bl	8004136 <lis2duxs12_fifo_mode_set>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	e020      	b.n	8002b1e <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <LIS2DUXS12_Init+0xf0>)
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2100      	movs	r1, #0
 8002af0:	460a      	mov	r2, r1
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	460a      	mov	r2, r1
 8002af6:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3320      	adds	r3, #32
 8002afc:	f107 0208 	add.w	r2, r7, #8
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 ffe2 	bl	8003acc <lis2duxs12_mode_set>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e004      	b.n	8002b1e <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	42c80000 	.word	0x42c80000

08002b2c <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8ad 	bl	8002c94 <LIS2DUXS12_ACC_Disable>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	e00c      	b.n	8002b60 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3320      	adds	r3, #32
 8002b74:	f107 020f 	add.w	r2, r7, #15
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe46 	bl	800380c <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	2019      	movs	r0, #25
 8002b86:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f960 	bl	8003e64 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	2019      	movs	r0, #25
 8002baa:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3320      	adds	r3, #32
 8002bc4:	f107 020f 	add.w	r2, r7, #15
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fe1e 	bl	800380c <lis2duxs12_device_id_get>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	e003      	b.n	8002be4 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2210      	movs	r2, #16
 8002c18:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <LIS2DUXS12_GetCapabilities+0x58>)
 8002c2c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	44480000 	.word	0x44480000

08002c48 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e016      	b.n	8002c8c <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fadb 	bl	800322c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c80:	e004      	b.n	8002c8c <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e046      	b.n	8002d38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f893 	bl	8002ddc <LIS2DUXS12_ACC_GetOutputDataRate>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e03a      	b.n	8002d38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8002cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cc6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002d40 <LIS2DUXS12_ACC_Disable+0xac>
 8002cca:	eef4 7a47 	vcmp.f32	s15, s14
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	d10e      	bne.n	8002cf2 <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8002cd4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002d44 <LIS2DUXS12_ACC_Disable+0xb0>
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f94b 	bl	8002f74 <LIS2DUXS12_ACC_SetOutputDataRate>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	e026      	b.n	8002d38 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	2003      	movs	r0, #3
 8002cf0:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3320      	adds	r3, #32
 8002cf6:	f107 0208 	add.w	r2, r7, #8
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 ffa1 	bl	8003c44 <lis2duxs12_mode_get>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	e014      	b.n	8002d38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3320      	adds	r3, #32
 8002d16:	f107 0208 	add.w	r2, r7, #8
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fed5 	bl	8003acc <lis2duxs12_mode_set>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e004      	b.n	8002d38 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	44480000 	.word	0x44480000
 8002d44:	43c80000 	.word	0x43c80000

08002d48 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3320      	adds	r3, #32
 8002d5a:	f107 0208 	add.w	r2, r7, #8
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 ff6f 	bl	8003c44 <lis2duxs12_mode_get>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	e026      	b.n	8002dc0 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8002d72:	7a7b      	ldrb	r3, [r7, #9]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d81b      	bhi.n	8002db0 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8002d78:	a201      	add	r2, pc, #4	@ (adr r2, 8002d80 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002da1 	.word	0x08002da1
 8002d8c:	08002da9 	.word	0x08002da9
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8002d94:	601a      	str	r2, [r3, #0]
      break;
 8002d96:	e012      	b.n	8002dbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dcc <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8002d9c:	601a      	str	r2, [r3, #0]
      break;
 8002d9e:	e00e      	b.n	8002dbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd0 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8002da4:	601a      	str	r2, [r3, #0]
      break;
 8002da6:	e00a      	b.n	8002dbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8002dac:	601a      	str	r2, [r3, #0]
      break;
 8002dae:	e006      	b.n	8002dbe <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 8002db4:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	60fb      	str	r3, [r7, #12]
      break;
 8002dbc:	bf00      	nop
  }

  return ret;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	3d79db23 	.word	0x3d79db23
 8002dcc:	3df9db23 	.word	0x3df9db23
 8002dd0:	3e79db23 	.word	0x3e79db23
 8002dd4:	3ef9db23 	.word	0x3ef9db23
 8002dd8:	bf800000 	.word	0xbf800000

08002ddc <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3320      	adds	r3, #32
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ff25 	bl	8003c44 <lis2duxs12_mode_get>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	e09b      	b.n	8002f3e <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8002e06:	7a3b      	ldrb	r3, [r7, #8]
 8002e08:	2b2f      	cmp	r3, #47	@ 0x2f
 8002e0a:	f200 8090 	bhi.w	8002f2e <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002ed5 	.word	0x08002ed5
 8002e18:	08002edf 	.word	0x08002edf
 8002e1c:	08002ee7 	.word	0x08002ee7
 8002e20:	08002eff 	.word	0x08002eff
 8002e24:	08002eef 	.word	0x08002eef
 8002e28:	08002ef7 	.word	0x08002ef7
 8002e2c:	08002eff 	.word	0x08002eff
 8002e30:	08002f07 	.word	0x08002f07
 8002e34:	08002f0f 	.word	0x08002f0f
 8002e38:	08002f17 	.word	0x08002f17
 8002e3c:	08002f1f 	.word	0x08002f1f
 8002e40:	08002f27 	.word	0x08002f27
 8002e44:	08002f2f 	.word	0x08002f2f
 8002e48:	08002f2f 	.word	0x08002f2f
 8002e4c:	08002f2f 	.word	0x08002f2f
 8002e50:	08002f2f 	.word	0x08002f2f
 8002e54:	08002f2f 	.word	0x08002f2f
 8002e58:	08002f2f 	.word	0x08002f2f
 8002e5c:	08002f2f 	.word	0x08002f2f
 8002e60:	08002f2f 	.word	0x08002f2f
 8002e64:	08002eef 	.word	0x08002eef
 8002e68:	08002ef7 	.word	0x08002ef7
 8002e6c:	08002eff 	.word	0x08002eff
 8002e70:	08002f07 	.word	0x08002f07
 8002e74:	08002f0f 	.word	0x08002f0f
 8002e78:	08002f17 	.word	0x08002f17
 8002e7c:	08002f1f 	.word	0x08002f1f
 8002e80:	08002f27 	.word	0x08002f27
 8002e84:	08002f2f 	.word	0x08002f2f
 8002e88:	08002f2f 	.word	0x08002f2f
 8002e8c:	08002f2f 	.word	0x08002f2f
 8002e90:	08002f2f 	.word	0x08002f2f
 8002e94:	08002f2f 	.word	0x08002f2f
 8002e98:	08002f2f 	.word	0x08002f2f
 8002e9c:	08002f2f 	.word	0x08002f2f
 8002ea0:	08002f2f 	.word	0x08002f2f
 8002ea4:	08002f2f 	.word	0x08002f2f
 8002ea8:	08002f2f 	.word	0x08002f2f
 8002eac:	08002f2f 	.word	0x08002f2f
 8002eb0:	08002f2f 	.word	0x08002f2f
 8002eb4:	08002f2f 	.word	0x08002f2f
 8002eb8:	08002f2f 	.word	0x08002f2f
 8002ebc:	08002f2f 	.word	0x08002f2f
 8002ec0:	08002f2f 	.word	0x08002f2f
 8002ec4:	08002f2f 	.word	0x08002f2f
 8002ec8:	08002f2f 	.word	0x08002f2f
 8002ecc:	08002ed5 	.word	0x08002ed5
 8002ed0:	08002ed5 	.word	0x08002ed5
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
      break;
 8002edc:	e02e      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8002ee2:	601a      	str	r2, [r3, #0]
      break;
 8002ee4:	e02a      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8002eea:	601a      	str	r2, [r3, #0]
      break;
 8002eec:	e026      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8002ef2:	601a      	str	r2, [r3, #0]
      break;
 8002ef4:	e022      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	4a16      	ldr	r2, [pc, #88]	@ (8002f54 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8002efa:	601a      	str	r2, [r3, #0]
      break;
 8002efc:	e01e      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8002f02:	601a      	str	r2, [r3, #0]
      break;
 8002f04:	e01a      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002f0a:	601a      	str	r2, [r3, #0]
      break;
 8002f0c:	e016      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8002f12:	601a      	str	r2, [r3, #0]
      break;
 8002f14:	e012      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002f1a:	601a      	str	r2, [r3, #0]
      break;
 8002f1c:	e00e      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8002f22:	601a      	str	r2, [r3, #0]
      break;
 8002f24:	e00a      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	4a10      	ldr	r2, [pc, #64]	@ (8002f6c <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002f2a:	601a      	str	r2, [r3, #0]
      break;
 8002f2c:	e006      	b.n	8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4a0f      	ldr	r2, [pc, #60]	@ (8002f70 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8002f32:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	60fb      	str	r3, [r7, #12]
      break;
 8002f3a:	bf00      	nop
  }

  return ret;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	3fcccccd 	.word	0x3fcccccd
 8002f4c:	40400000 	.word	0x40400000
 8002f50:	40c00000 	.word	0x40c00000
 8002f54:	41480000 	.word	0x41480000
 8002f58:	41c80000 	.word	0x41c80000
 8002f5c:	42480000 	.word	0x42480000
 8002f60:	42c80000 	.word	0x42c80000
 8002f64:	43480000 	.word	0x43480000
 8002f68:	43c80000 	.word	0x43c80000
 8002f6c:	44480000 	.word	0x44480000
 8002f70:	bf800000 	.word	0xbf800000

08002f74 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8002f80:	2102      	movs	r1, #2
 8002f82:	ed97 0a00 	vldr	s0, [r7]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f805 	bl	8002f96 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d108      	bne.n	8002fc2 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f937 	bl	800322c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	e007      	b.n	8002fd2 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 faac 	bl	8003528 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8002fd0:	4603      	mov	r3, r0
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3320      	adds	r3, #32
 8002fee:	f107 0208 	add.w	r2, r7, #8
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fe25 	bl	8003c44 <lis2duxs12_mode_get>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	e027      	b.n	8003056 <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8003006:	7a7b      	ldrb	r3, [r7, #9]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d81b      	bhi.n	8003044 <LIS2DUXS12_ACC_GetFullScale+0x68>
 800300c:	a201      	add	r2, pc, #4	@ (adr r2, 8003014 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	0800302d 	.word	0x0800302d
 800301c:	08003035 	.word	0x08003035
 8003020:	0800303d 	.word	0x0800303d
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2202      	movs	r2, #2
 8003028:	601a      	str	r2, [r3, #0]
      break;
 800302a:	e013      	b.n	8003054 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2204      	movs	r2, #4
 8003030:	601a      	str	r2, [r3, #0]
      break;
 8003032:	e00f      	b.n	8003054 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2208      	movs	r2, #8
 8003038:	601a      	str	r2, [r3, #0]
      break;
 800303a:	e00b      	b.n	8003054 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2210      	movs	r2, #16
 8003040:	601a      	str	r2, [r3, #0]
      break;
 8003042:	e007      	b.n	8003054 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f04f 32ff 	mov.w	r2, #4294967295
 800304a:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	60fb      	str	r3, [r7, #12]
      break;
 8003052:	bf00      	nop
  }

  return ret;
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop

08003060 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3320      	adds	r3, #32
 800306e:	f107 020c 	add.w	r2, r7, #12
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fde5 	bl	8003c44 <lis2duxs12_mode_get>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e01f      	b.n	80030c6 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b02      	cmp	r3, #2
 800308a:	dd0b      	ble.n	80030a4 <LIS2DUXS12_ACC_SetFullScale+0x44>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b04      	cmp	r3, #4
 8003090:	dd06      	ble.n	80030a0 <LIS2DUXS12_ACC_SetFullScale+0x40>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	dc01      	bgt.n	800309c <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8003098:	2302      	movs	r3, #2
 800309a:	e004      	b.n	80030a6 <LIS2DUXS12_ACC_SetFullScale+0x46>
 800309c:	2303      	movs	r3, #3
 800309e:	e002      	b.n	80030a6 <LIS2DUXS12_ACC_SetFullScale+0x46>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <LIS2DUXS12_ACC_SetFullScale+0x46>
 80030a4:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 80030a6:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3320      	adds	r3, #32
 80030ac:	f107 020c 	add.w	r2, r7, #12
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fd0a 	bl	8003acc <lis2duxs12_mode_set>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	e000      	b.n	80030c6 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b088      	sub	sp, #32
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3320      	adds	r3, #32
 80030dc:	f107 021c 	add.w	r2, r7, #28
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fdae 	bl	8003c44 <lis2duxs12_mode_get>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e01b      	b.n	800312c <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3320      	adds	r3, #32
 80030f8:	f107 0208 	add.w	r2, r7, #8
 80030fc:	f107 011c 	add.w	r1, r7, #28
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fecf 	bl	8003ea4 <lis2duxs12_xl_data_get>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e00c      	b.n	800312c <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 8003112:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 800311a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 8003122:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3320      	adds	r3, #32
 8003142:	f107 021c 	add.w	r2, r7, #28
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fd7b 	bl	8003c44 <lis2duxs12_mode_get>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	e027      	b.n	80031aa <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3320      	adds	r3, #32
 800315e:	f107 0208 	add.w	r2, r7, #8
 8003162:	f107 011c 	add.w	r1, r7, #28
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fe9c 	bl	8003ea4 <lis2duxs12_xl_data_get>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	e018      	b.n	80031aa <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8003178:	edd7 7a02 	vldr	s15, [r7, #8]
 800317c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003180:	ee17 2a90 	vmov	r2, s15
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8003188:	edd7 7a03 	vldr	s15, [r7, #12]
 800318c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003190:	ee17 2a90 	vmov	r2, s15
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8003198:	edd7 7a04 	vldr	s15, [r7, #16]
 800319c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a0:	ee17 2a90 	vmov	r2, s15
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
 80031be:	4613      	mov	r3, r2
 80031c0:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f103 0020 	add.w	r0, r3, #32
 80031c8:	1cba      	adds	r2, r7, #2
 80031ca:	78f9      	ldrb	r1, [r7, #3]
 80031cc:	2301      	movs	r3, #1
 80031ce:	f000 faa0 	bl	8003712 <lis2duxs12_write_reg>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	e000      	b.n	80031e0 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 8003204:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3320      	adds	r3, #32
 800320a:	7afa      	ldrb	r2, [r7, #11]
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff6b 	bl	80040ea <lis2duxs12_mem_bank_set>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003220:	68fb      	ldr	r3, [r7, #12]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	ed87 0a02 	vstr	s0, [r7, #8]
 8003238:	460b      	mov	r3, r1
 800323a:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3320      	adds	r3, #32
 8003240:	f107 0214 	add.w	r2, r7, #20
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcfc 	bl	8003c44 <lis2duxs12_mode_get>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	e142      	b.n	80034de <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 800325e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003262:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80034e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 8003266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d801      	bhi.n	8003274 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8003270:	2301      	movs	r3, #1
 8003272:	e00b      	b.n	800328c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003274:	edd7 7a02 	vldr	s15, [r7, #8]
 8003278:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800327c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	d801      	bhi.n	800328a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8003286:	2302      	movs	r3, #2
 8003288:	e000      	b.n	800328c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800328a:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 800328c:	753b      	strb	r3, [r7, #20]
 800328e:	e0a4      	b.n	80033da <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d14f      	bne.n	8003336 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 8003296:	edd7 7a02 	vldr	s15, [r7, #8]
 800329a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800329e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d801      	bhi.n	80032ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80032a8:	2304      	movs	r3, #4
 80032aa:	e042      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80032b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	d801      	bhi.n	80032c2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 80032be:	2305      	movs	r3, #5
 80032c0:	e037      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032c6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	d801      	bhi.n	80032d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 80032d4:	2306      	movs	r3, #6
 80032d6:	e02c      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032dc:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d801      	bhi.n	80032ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e021      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f2:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80034f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d801      	bhi.n	8003304 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8003300:	2308      	movs	r3, #8
 8003302:	e016      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003304:	edd7 7a02 	vldr	s15, [r7, #8]
 8003308:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80034f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 800330c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d801      	bhi.n	800331a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 8003316:	2309      	movs	r3, #9
 8003318:	e00b      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800331a:	edd7 7a02 	vldr	s15, [r7, #8]
 800331e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80034f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8003322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	d801      	bhi.n	8003330 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 800332c:	230a      	movs	r3, #10
 800332e:	e000      	b.n	8003332 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003330:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 8003332:	753b      	strb	r3, [r7, #20]
 8003334:	e051      	b.n	80033da <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d14e      	bne.n	80033da <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 800333c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003340:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	d801      	bhi.n	8003352 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800334e:	2314      	movs	r3, #20
 8003350:	e042      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003352:	edd7 7a02 	vldr	s15, [r7, #8]
 8003356:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800335a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	d801      	bhi.n	8003368 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003364:	2315      	movs	r3, #21
 8003366:	e037      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003368:	edd7 7a02 	vldr	s15, [r7, #8]
 800336c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	d801      	bhi.n	800337e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800337a:	2316      	movs	r3, #22
 800337c:	e02c      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800337e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003382:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8003386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d801      	bhi.n	8003394 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003390:	2317      	movs	r3, #23
 8003392:	e021      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003394:	edd7 7a02 	vldr	s15, [r7, #8]
 8003398:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80034f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 800339c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	d801      	bhi.n	80033aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80033a6:	2318      	movs	r3, #24
 80033a8:	e016      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80033aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ae:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80034f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80033b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d801      	bhi.n	80033c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80033bc:	2319      	movs	r3, #25
 80033be:	e00b      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80033c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033c4:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80034f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80033c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	d801      	bhi.n	80033d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80033d2:	231a      	movs	r3, #26
 80033d4:	e000      	b.n	80033d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80033d6:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 80033d8:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3320      	adds	r3, #32
 80033de:	f107 0214 	add.w	r2, r7, #20
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fb71 	bl	8003acc <lis2duxs12_mode_set>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295
 80033f4:	e073      	b.n	80034de <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80033f6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d05b      	beq.n	80034b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 80033fc:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d056      	beq.n	80034b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 8003402:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8003404:	2b04      	cmp	r3, #4
 8003406:	d051      	beq.n	80034ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8003408:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 800340a:	2b14      	cmp	r3, #20
 800340c:	d04c      	beq.n	80034a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 800340e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003410:	2b05      	cmp	r3, #5
 8003412:	d047      	beq.n	80034a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 8003414:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8003416:	2b15      	cmp	r3, #21
 8003418:	d042      	beq.n	80034a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 800341a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 800341c:	2b03      	cmp	r3, #3
 800341e:	d03d      	beq.n	800349c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8003420:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003422:	2b06      	cmp	r3, #6
 8003424:	d038      	beq.n	8003498 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 8003426:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003428:	2b16      	cmp	r3, #22
 800342a:	d033      	beq.n	8003494 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 800342c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 800342e:	2b07      	cmp	r3, #7
 8003430:	d02e      	beq.n	8003490 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 8003432:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8003434:	2b17      	cmp	r3, #23
 8003436:	d029      	beq.n	800348c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8003438:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 800343a:	2b08      	cmp	r3, #8
 800343c:	d024      	beq.n	8003488 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 800343e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003440:	2b18      	cmp	r3, #24
 8003442:	d01f      	beq.n	8003484 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8003444:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8003446:	2b09      	cmp	r3, #9
 8003448:	d01a      	beq.n	8003480 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 800344a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 800344c:	2b19      	cmp	r3, #25
 800344e:	d015      	beq.n	800347c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003450:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003452:	2b0a      	cmp	r3, #10
 8003454:	d010      	beq.n	8003478 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 8003456:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003458:	2b1a      	cmp	r3, #26
 800345a:	d00b      	beq.n	8003474 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 800345c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 800345e:	2b0b      	cmp	r3, #11
 8003460:	d006      	beq.n	8003470 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 8003462:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 8003464:	2b1b      	cmp	r3, #27
 8003466:	d101      	bne.n	800346c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 8003468:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 800346a:	e024      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 800346c:	4b24      	ldr	r3, [pc, #144]	@ (8003500 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 800346e:	e022      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003470:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8003472:	e020      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003474:	4b23      	ldr	r3, [pc, #140]	@ (8003504 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8003476:	e01e      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003478:	4b22      	ldr	r3, [pc, #136]	@ (8003504 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 800347a:	e01c      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 800347c:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800347e:	e01a      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8003480:	4b21      	ldr	r3, [pc, #132]	@ (8003508 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8003482:	e018      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003484:	4b21      	ldr	r3, [pc, #132]	@ (800350c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8003486:	e016      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8003488:	4b20      	ldr	r3, [pc, #128]	@ (800350c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 800348a:	e014      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 800348c:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800348e:	e012      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003490:	4b1f      	ldr	r3, [pc, #124]	@ (8003510 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8003492:	e010      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003494:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003496:	e00e      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003498:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800349a:	e00c      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800349e:	e00a      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80034a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80034a2:	e008      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80034a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003518 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80034a6:	e006      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80034a8:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80034aa:	e004      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80034ae:	e002      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80034b2:	e000      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80034c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80034c4:	eef4 7a47 	vcmp.f32	s15, s14
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	d102      	bne.n	80034d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e004      	b.n	80034de <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	79fa      	ldrb	r2, [r7, #7]
 80034d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	3fcccccd 	.word	0x3fcccccd
 80034ec:	42480000 	.word	0x42480000
 80034f0:	42c80000 	.word	0x42c80000
 80034f4:	43480000 	.word	0x43480000
 80034f8:	43c80000 	.word	0x43c80000
 80034fc:	44480000 	.word	0x44480000
 8003500:	bf800000 	.word	0xbf800000
 8003504:	43c80000 	.word	0x43c80000
 8003508:	43480000 	.word	0x43480000
 800350c:	42c80000 	.word	0x42c80000
 8003510:	42480000 	.word	0x42480000
 8003514:	41c80000 	.word	0x41c80000
 8003518:	41480000 	.word	0x41480000
 800351c:	40c00000 	.word	0x40c00000
 8003520:	40400000 	.word	0x40400000
 8003524:	3fcccccd 	.word	0x3fcccccd

08003528 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	ed87 0a02 	vstr	s0, [r7, #8]
 8003534:	460b      	mov	r3, r1
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11a      	bne.n	8003574 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 800353e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003542:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	d802      	bhi.n	8003556 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003550:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003554:	e00b      	b.n	800356e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 8003556:	edd7 7a02 	vldr	s15, [r7, #8]
 800355a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800355e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	d801      	bhi.n	800356c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8003568:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 800356a:	e000      	b.n	800356e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 800356c:	4b33      	ldr	r3, [pc, #204]	@ (800363c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	6353      	str	r3, [r2, #52]	@ 0x34
 8003572:	e055      	b.n	8003620 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d002      	beq.n	8003580 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d14f      	bne.n	8003620 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8003580:	edd7 7a02 	vldr	s15, [r7, #8]
 8003584:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	d801      	bhi.n	8003596 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8003592:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8003594:	e042      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 8003596:	edd7 7a02 	vldr	s15, [r7, #8]
 800359a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800359e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a6:	d801      	bhi.n	80035ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 80035a8:	4b26      	ldr	r3, [pc, #152]	@ (8003644 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80035aa:	e037      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80035ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80035b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035bc:	d801      	bhi.n	80035c2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 80035be:	4b1f      	ldr	r3, [pc, #124]	@ (800363c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80035c0:	e02c      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 80035c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003648 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 80035ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d801      	bhi.n	80035d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 80035d6:	e021      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 80035d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035dc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003650 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 80035e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	d801      	bhi.n	80035ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 80035ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 80035ec:	e016      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 80035ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80035f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003658 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 80035f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fe:	d801      	bhi.n	8003604 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8003600:	4b16      	ldr	r3, [pc, #88]	@ (800365c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8003602:	e00b      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8003604:	edd7 7a02 	vldr	s15, [r7, #8]
 8003608:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003660 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 800360c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003614:	d801      	bhi.n	800361a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 8003616:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 8003618:	e000      	b.n	800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800361a:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40400000 	.word	0x40400000
 800363c:	41c80000 	.word	0x41c80000
 8003640:	40c00000 	.word	0x40c00000
 8003644:	41480000 	.word	0x41480000
 8003648:	42480000 	.word	0x42480000
 800364c:	42480000 	.word	0x42480000
 8003650:	42c80000 	.word	0x42c80000
 8003654:	42c80000 	.word	0x42c80000
 8003658:	43480000 	.word	0x43480000
 800365c:	43480000 	.word	0x43480000
 8003660:	43c80000 	.word	0x43c80000
 8003664:	43c80000 	.word	0x43c80000
 8003668:	44480000 	.word	0x44480000

0800366c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	460b      	mov	r3, r1
 800367a:	72fb      	strb	r3, [r7, #11]
 800367c:	4613      	mov	r3, r2
 800367e:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	695c      	ldr	r4, [r3, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	7b1b      	ldrb	r3, [r3, #12]
 800368c:	4618      	mov	r0, r3
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	b299      	uxth	r1, r3
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	47a0      	blx	r4
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd90      	pop	{r4, r7, pc}

080036a2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036a2:	b590      	push	{r4, r7, lr}
 80036a4:	b087      	sub	sp, #28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	461a      	mov	r2, r3
 80036ae:	460b      	mov	r3, r1
 80036b0:	72fb      	strb	r3, [r7, #11]
 80036b2:	4613      	mov	r3, r2
 80036b4:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	691c      	ldr	r4, [r3, #16]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	7b1b      	ldrb	r3, [r3, #12]
 80036c2:	4618      	mov	r0, r3
 80036c4:	7afb      	ldrb	r3, [r7, #11]
 80036c6:	b299      	uxth	r1, r3
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	47a0      	blx	r4
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd90      	pop	{r4, r7, pc}

080036d8 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	461a      	mov	r2, r3
 80036e4:	460b      	mov	r3, r1
 80036e6:	72fb      	strb	r3, [r7, #11]
 80036e8:	4613      	mov	r3, r2
 80036ea:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e008      	b.n	800370a <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685c      	ldr	r4, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68d8      	ldr	r0, [r3, #12]
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	7af9      	ldrb	r1, [r7, #11]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	47a0      	blx	r4
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}

08003712 <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 8003712:	b590      	push	{r4, r7, lr}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	461a      	mov	r2, r3
 800371e:	460b      	mov	r3, r1
 8003720:	72fb      	strb	r3, [r7, #11]
 8003722:	4613      	mov	r3, r2
 8003724:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <lis2duxs12_write_reg+0x20>
  {
    return -1;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
 8003730:	e008      	b.n	8003744 <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681c      	ldr	r4, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68d8      	ldr	r0, [r3, #12]
 800373a:	893b      	ldrh	r3, [r7, #8]
 800373c:	7af9      	ldrb	r1, [r7, #11]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	47a0      	blx	r4
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}

0800374c <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8003756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003762:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003778 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8003766:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800376a:	eeb0 0a67 	vmov.f32	s0, s15
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	3d79db23 	.word	0x3d79db23

0800377c <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8003786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003792:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037a8 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8003796:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800379a:	eeb0 0a67 	vmov.f32	s0, s15
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	3df9db23 	.word	0x3df9db23

080037ac <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 80037b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037d8 <lis2duxs12_from_fs8g_to_mg+0x2c>
 80037c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	3e79db23 	.word	0x3e79db23

080037dc <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 80037e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003808 <lis2duxs12_from_fs16g_to_mg+0x2c>
 80037f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	3ef9db23 	.word	0x3ef9db23

0800380c <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8003816:	2301      	movs	r3, #1
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	210f      	movs	r1, #15
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff5b 	bl	80036d8 <lis2duxs12_read_reg>
 8003822:	60f8      	str	r0, [r7, #12]

  return ret;
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003844:	f107 0214 	add.w	r2, r7, #20
 8003848:	2301      	movs	r3, #1
 800384a:	2110      	movs	r1, #16
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff43 	bl	80036d8 <lis2duxs12_read_reg>
 8003852:	4602      	mov	r2, r0
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800385a:	f107 0210 	add.w	r2, r7, #16
 800385e:	2301      	movs	r3, #1
 8003860:	2113      	movs	r1, #19
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff38 	bl	80036d8 <lis2duxs12_read_reg>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4413      	add	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
  switch (val)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b03      	cmp	r3, #3
 8003874:	f200 80ca 	bhi.w	8003a0c <lis2duxs12_init_set+0x1dc>
 8003878:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <lis2duxs12_init_set+0x50>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003981 	.word	0x08003981
 8003884:	08003891 	.word	0x08003891
 8003888:	0800390b 	.word	0x0800390b
 800388c:	080039c7 	.word	0x080039c7
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8003890:	7c3b      	ldrb	r3, [r7, #16]
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003898:	f107 0210 	add.w	r2, r7, #16
 800389c:	2301      	movs	r3, #1
 800389e:	2113      	movs	r1, #19
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff36 	bl	8003712 <lis2duxs12_write_reg>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 80bb 	bne.w	8003a2c <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80038b6:	f107 0210 	add.w	r2, r7, #16
 80038ba:	2301      	movs	r3, #1
 80038bc:	2113      	movs	r1, #19
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff0a 	bl	80036d8 <lis2duxs12_read_reg>
 80038c4:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d113      	bne.n	80038f4 <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 80038cc:	7c3b      	ldrb	r3, [r7, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2019      	movs	r0, #25
 80038e6:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 80038e8:	7ffb      	ldrb	r3, [r7, #31]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	77fa      	strb	r2, [r7, #31]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d9e1      	bls.n	80038b6 <lis2duxs12_init_set+0x86>
 80038f2:	e002      	b.n	80038fa <lis2duxs12_init_set+0xca>
          break;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <lis2duxs12_init_set+0xca>
          break;
 80038f8:	bf00      	nop

      if (cnt >= 5U)
 80038fa:	7ffb      	ldrb	r3, [r7, #31]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	f240 8097 	bls.w	8003a30 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003908:	e092      	b.n	8003a30 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 800390a:	7d3b      	ldrb	r3, [r7, #20]
 800390c:	f043 0320 	orr.w	r3, r3, #32
 8003910:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003912:	f107 0214 	add.w	r2, r7, #20
 8003916:	2301      	movs	r3, #1
 8003918:	2110      	movs	r1, #16
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fef9 	bl	8003712 <lis2duxs12_write_reg>
 8003920:	4602      	mov	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4413      	add	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8082 	bne.w	8003a34 <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f884 	bl	8003a44 <lis2duxs12_status_get>
 800393c:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d113      	bne.n	800396c <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 8003944:	7b3b      	ldrb	r3, [r7, #12]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00f      	beq.n	8003970 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2001      	movs	r0, #1
 800395e:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003960:	7ffb      	ldrb	r3, [r7, #31]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	77fa      	strb	r2, [r7, #31]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d9e2      	bls.n	8003930 <lis2duxs12_init_set+0x100>
 800396a:	e002      	b.n	8003972 <lis2duxs12_init_set+0x142>
          break;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <lis2duxs12_init_set+0x142>
          break;
 8003970:	bf00      	nop

      if (cnt >= 5U)
 8003972:	7ffb      	ldrb	r3, [r7, #31]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d95f      	bls.n	8003a38 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800397e:	e05b      	b.n	8003a38 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003980:	7c3b      	ldrb	r3, [r7, #16]
 8003982:	f023 0310 	bic.w	r3, r3, #16
 8003986:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003988:	7c3b      	ldrb	r3, [r7, #16]
 800398a:	f043 0320 	orr.w	r3, r3, #32
 800398e:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003990:	7d3b      	ldrb	r3, [r7, #20]
 8003992:	f043 0310 	orr.w	r3, r3, #16
 8003996:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003998:	f107 0210 	add.w	r2, r7, #16
 800399c:	2301      	movs	r3, #1
 800399e:	2113      	movs	r1, #19
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff feb6 	bl	8003712 <lis2duxs12_write_reg>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80039ae:	f107 0214 	add.w	r2, r7, #20
 80039b2:	2301      	movs	r3, #1
 80039b4:	2110      	movs	r1, #16
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff feab 	bl	8003712 <lis2duxs12_write_reg>
 80039bc:	4602      	mov	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      break;
 80039c4:	e039      	b.n	8003a3a <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 80039c6:	7c3b      	ldrb	r3, [r7, #16]
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 80039ce:	7c3b      	ldrb	r3, [r7, #16]
 80039d0:	f043 0320 	orr.w	r3, r3, #32
 80039d4:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 80039d6:	7d3b      	ldrb	r3, [r7, #20]
 80039d8:	f043 0310 	orr.w	r3, r3, #16
 80039dc:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80039de:	f107 0210 	add.w	r2, r7, #16
 80039e2:	2301      	movs	r3, #1
 80039e4:	2113      	movs	r1, #19
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe93 	bl	8003712 <lis2duxs12_write_reg>
 80039ec:	4602      	mov	r2, r0
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	4413      	add	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80039f4:	f107 0214 	add.w	r2, r7, #20
 80039f8:	2301      	movs	r3, #1
 80039fa:	2110      	movs	r1, #16
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fe88 	bl	8003712 <lis2duxs12_write_reg>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      break;
 8003a0a:	e016      	b.n	8003a3a <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003a0c:	7d3b      	ldrb	r3, [r7, #20]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a14:	f107 0214 	add.w	r2, r7, #20
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2110      	movs	r1, #16
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe78 	bl	8003712 <lis2duxs12_write_reg>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      break;
 8003a2a:	e006      	b.n	8003a3a <lis2duxs12_init_set+0x20a>
        break;
 8003a2c:	bf00      	nop
 8003a2e:	e004      	b.n	8003a3a <lis2duxs12_init_set+0x20a>
      break;
 8003a30:	bf00      	nop
 8003a32:	e002      	b.n	8003a3a <lis2duxs12_init_set+0x20a>
        break;
 8003a34:	bf00      	nop
 8003a36:	e000      	b.n	8003a3a <lis2duxs12_init_set+0x20a>
      break;
 8003a38:	bf00      	nop
  }
  return ret;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003a4e:	f107 0210 	add.w	r2, r7, #16
 8003a52:	2301      	movs	r3, #1
 8003a54:	2125      	movs	r1, #37	@ 0x25
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fe3e 	bl	80036d8 <lis2duxs12_read_reg>
 8003a5c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a5e:	f107 020c 	add.w	r2, r7, #12
 8003a62:	2301      	movs	r3, #1
 8003a64:	2110      	movs	r1, #16
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe36 	bl	80036d8 <lis2duxs12_read_reg>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4413      	add	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003a74:	f107 0208 	add.w	r2, r7, #8
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2113      	movs	r1, #19
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fe2b 	bl	80036d8 <lis2duxs12_read_reg>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003a8a:	7b3b      	ldrb	r3, [r7, #12]
 8003a8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a90:	b2d9      	uxtb	r1, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	7813      	ldrb	r3, [r2, #0]
 8003a96:	f361 0300 	bfi	r3, r1, #0, #1
 8003a9a:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003a9c:	7a3b      	ldrb	r3, [r7, #8]
 8003a9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003aa2:	b2d9      	uxtb	r1, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	7813      	ldrb	r3, [r2, #0]
 8003aa8:	f361 0341 	bfi	r3, r1, #1, #1
 8003aac:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8003aae:	7c3b      	ldrb	r3, [r7, #16]
 8003ab0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ab4:	b2d9      	uxtb	r1, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	7813      	ldrb	r3, [r2, #0]
 8003aba:	f361 0382 	bfi	r3, r1, #2, #1
 8003abe:	7013      	strb	r3, [r2, #0]

  return ret;
 8003ac0:	697b      	ldr	r3, [r7, #20]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003ad6:	f107 020c 	add.w	r2, r7, #12
 8003ada:	2301      	movs	r3, #1
 8003adc:	2114      	movs	r1, #20
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fdfa 	bl	80036d8 <lis2duxs12_read_reg>
 8003ae4:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	7b3b      	ldrb	r3, [r7, #12]
 8003af2:	f362 1307 	bfi	r3, r2, #4, #4
 8003af6:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	7b3b      	ldrb	r3, [r7, #12]
 8003b04:	f362 0301 	bfi	r3, r2, #0, #2
 8003b08:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d859      	bhi.n	8003bc6 <lis2duxs12_mode_set+0xfa>
 8003b12:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <lis2duxs12_mode_set+0x4c>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b35 	.word	0x08003b35
 8003b1c:	08003b35 	.word	0x08003b35
 8003b20:	08003b35 	.word	0x08003b35
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b3f 	.word	0x08003b3f
 8003b2c:	08003b5b 	.word	0x08003b5b
 8003b30:	08003b87 	.word	0x08003b87
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003b34:	7b3b      	ldrb	r3, [r7, #12]
 8003b36:	f023 030c 	bic.w	r3, r3, #12
 8003b3a:	733b      	strb	r3, [r7, #12]
      break;
 8003b3c:	e04d      	b.n	8003bda <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	789b      	ldrb	r3, [r3, #2]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d003      	beq.n	8003b4e <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	617b      	str	r3, [r7, #20]
          break;
 8003b4c:	e004      	b.n	8003b58 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b4e:	7b3b      	ldrb	r3, [r7, #12]
 8003b50:	f043 030c 	orr.w	r3, r3, #12
 8003b54:	733b      	strb	r3, [r7, #12]
          break;
 8003b56:	bf00      	nop
      }
      break;
 8003b58:	e03f      	b.n	8003bda <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	789b      	ldrb	r3, [r3, #2]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d005      	beq.n	8003b6e <lis2duxs12_mode_set+0xa2>
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d009      	beq.n	8003b7a <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6a:	617b      	str	r3, [r7, #20]
          break;
 8003b6c:	e00a      	b.n	8003b84 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003b6e:	7b3b      	ldrb	r3, [r7, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f362 0383 	bfi	r3, r2, #2, #2
 8003b76:	733b      	strb	r3, [r7, #12]
          break;
 8003b78:	e004      	b.n	8003b84 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b7a:	7b3b      	ldrb	r3, [r7, #12]
 8003b7c:	f043 030c 	orr.w	r3, r3, #12
 8003b80:	733b      	strb	r3, [r7, #12]
          break;
 8003b82:	bf00      	nop
      }
      break;
 8003b84:	e029      	b.n	8003bda <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	789b      	ldrb	r3, [r3, #2]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d015      	beq.n	8003bba <lis2duxs12_mode_set+0xee>
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	dc03      	bgt.n	8003b9a <lis2duxs12_mode_set+0xce>
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d005      	beq.n	8003ba2 <lis2duxs12_mode_set+0xd6>
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d009      	beq.n	8003bae <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	617b      	str	r3, [r7, #20]
          break;
 8003ba0:	e010      	b.n	8003bc4 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8003ba2:	7b3b      	ldrb	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f362 0383 	bfi	r3, r2, #2, #2
 8003baa:	733b      	strb	r3, [r7, #12]
          break;
 8003bac:	e00a      	b.n	8003bc4 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003bae:	7b3b      	ldrb	r3, [r7, #12]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f362 0383 	bfi	r3, r2, #2, #2
 8003bb6:	733b      	strb	r3, [r7, #12]
          break;
 8003bb8:	e004      	b.n	8003bc4 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003bba:	7b3b      	ldrb	r3, [r7, #12]
 8003bbc:	f043 030c 	orr.w	r3, r3, #12
 8003bc0:	733b      	strb	r3, [r7, #12]
          break;
 8003bc2:	bf00      	nop
      }
      break;
 8003bc4:	e009      	b.n	8003bda <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	7b3b      	ldrb	r3, [r7, #12]
 8003bd2:	f362 0383 	bfi	r3, r2, #2, #2
 8003bd6:	733b      	strb	r3, [r7, #12]
      break;
 8003bd8:	bf00      	nop
  }

  if (ret != 0)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	e02b      	b.n	8003c3c <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003be4:	f107 0210 	add.w	r2, r7, #16
 8003be8:	2301      	movs	r3, #1
 8003bea:	2112      	movs	r1, #18
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fd73 	bl	80036d8 <lis2duxs12_read_reg>
 8003bf2:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d101      	bne.n	8003c04 <lis2duxs12_mode_set+0x138>
 8003c00:	2201      	movs	r2, #1
 8003c02:	e000      	b.n	8003c06 <lis2duxs12_mode_set+0x13a>
 8003c04:	2200      	movs	r2, #0
 8003c06:	7c3b      	ldrb	r3, [r7, #16]
 8003c08:	f362 0382 	bfi	r3, r2, #2, #1
 8003c0c:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d112      	bne.n	8003c3a <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003c14:	f107 020c 	add.w	r2, r7, #12
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2114      	movs	r1, #20
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fd78 	bl	8003712 <lis2duxs12_write_reg>
 8003c22:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003c24:	f107 0210 	add.w	r2, r7, #16
 8003c28:	2301      	movs	r3, #1
 8003c2a:	2112      	movs	r1, #18
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fd70 	bl	8003712 <lis2duxs12_write_reg>
 8003c32:	4602      	mov	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4413      	add	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003c3a:	697b      	ldr	r3, [r7, #20]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003c4e:	f107 020c 	add.w	r2, r7, #12
 8003c52:	2301      	movs	r3, #1
 8003c54:	2114      	movs	r1, #20
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fd3e 	bl	80036d8 <lis2duxs12_read_reg>
 8003c5c:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003c5e:	f107 0210 	add.w	r2, r7, #16
 8003c62:	2301      	movs	r3, #1
 8003c64:	2112      	movs	r1, #18
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd36 	bl	80036d8 <lis2duxs12_read_reg>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4413      	add	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 8003c74:	7b3b      	ldrb	r3, [r7, #12]
 8003c76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	f200 809b 	bhi.w	8003db8 <lis2duxs12_mode_get+0x174>
 8003c82:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <lis2duxs12_mode_get+0x44>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cc9 	.word	0x08003cc9
 8003c8c:	08003cd1 	.word	0x08003cd1
 8003c90:	08003cd9 	.word	0x08003cd9
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003d01 	.word	0x08003d01
 8003ca0:	08003d19 	.word	0x08003d19
 8003ca4:	08003d31 	.word	0x08003d31
 8003ca8:	08003d49 	.word	0x08003d49
 8003cac:	08003d61 	.word	0x08003d61
 8003cb0:	08003d79 	.word	0x08003d79
 8003cb4:	08003d91 	.word	0x08003d91
 8003cb8:	08003db9 	.word	0x08003db9
 8003cbc:	08003db9 	.word	0x08003db9
 8003cc0:	08003da9 	.word	0x08003da9
 8003cc4:	08003db1 	.word	0x08003db1
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
      break;
 8003cce:	e077      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e073      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e06f      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	701a      	strb	r2, [r3, #0]
      break;
 8003ce6:	e06b      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8003ce8:	7c3b      	ldrb	r3, [r7, #16]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <lis2duxs12_mode_get+0xb4>
 8003cf4:	2214      	movs	r2, #20
 8003cf6:	e000      	b.n	8003cfa <lis2duxs12_mode_get+0xb6>
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	701a      	strb	r2, [r3, #0]
      break;
 8003cfe:	e05f      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003d00:	7c3b      	ldrb	r3, [r7, #16]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <lis2duxs12_mode_get+0xcc>
 8003d0c:	2215      	movs	r2, #21
 8003d0e:	e000      	b.n	8003d12 <lis2duxs12_mode_get+0xce>
 8003d10:	2205      	movs	r2, #5
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	701a      	strb	r2, [r3, #0]
      break;
 8003d16:	e053      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8003d18:	7c3b      	ldrb	r3, [r7, #16]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <lis2duxs12_mode_get+0xe4>
 8003d24:	2216      	movs	r2, #22
 8003d26:	e000      	b.n	8003d2a <lis2duxs12_mode_get+0xe6>
 8003d28:	2206      	movs	r2, #6
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	701a      	strb	r2, [r3, #0]
      break;
 8003d2e:	e047      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003d30:	7c3b      	ldrb	r3, [r7, #16]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <lis2duxs12_mode_get+0xfc>
 8003d3c:	2217      	movs	r2, #23
 8003d3e:	e000      	b.n	8003d42 <lis2duxs12_mode_get+0xfe>
 8003d40:	2207      	movs	r2, #7
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	701a      	strb	r2, [r3, #0]
      break;
 8003d46:	e03b      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8003d48:	7c3b      	ldrb	r3, [r7, #16]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <lis2duxs12_mode_get+0x114>
 8003d54:	2218      	movs	r2, #24
 8003d56:	e000      	b.n	8003d5a <lis2duxs12_mode_get+0x116>
 8003d58:	2208      	movs	r2, #8
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
      break;
 8003d5e:	e02f      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8003d60:	7c3b      	ldrb	r3, [r7, #16]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <lis2duxs12_mode_get+0x12c>
 8003d6c:	2219      	movs	r2, #25
 8003d6e:	e000      	b.n	8003d72 <lis2duxs12_mode_get+0x12e>
 8003d70:	2209      	movs	r2, #9
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	701a      	strb	r2, [r3, #0]
      break;
 8003d76:	e023      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8003d78:	7c3b      	ldrb	r3, [r7, #16]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <lis2duxs12_mode_get+0x144>
 8003d84:	221a      	movs	r2, #26
 8003d86:	e000      	b.n	8003d8a <lis2duxs12_mode_get+0x146>
 8003d88:	220a      	movs	r2, #10
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	701a      	strb	r2, [r3, #0]
      break;
 8003d8e:	e017      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8003d90:	7c3b      	ldrb	r3, [r7, #16]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <lis2duxs12_mode_get+0x15c>
 8003d9c:	221b      	movs	r2, #27
 8003d9e:	e000      	b.n	8003da2 <lis2duxs12_mode_get+0x15e>
 8003da0:	220b      	movs	r2, #11
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	701a      	strb	r2, [r3, #0]
      break;
 8003da6:	e00b      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	222e      	movs	r2, #46	@ 0x2e
 8003dac:	701a      	strb	r2, [r3, #0]
      break;
 8003dae:	e007      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	222f      	movs	r2, #47	@ 0x2f
 8003db4:	701a      	strb	r2, [r3, #0]
      break;
 8003db6:	e003      	b.n	8003dc0 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	bf00      	nop
  }

  switch (ctrl5.fs)
 8003dc0:	7b3b      	ldrb	r3, [r7, #12]
 8003dc2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d81b      	bhi.n	8003e04 <lis2duxs12_mode_get+0x1c0>
 8003dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <lis2duxs12_mode_get+0x190>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003ded 	.word	0x08003ded
 8003ddc:	08003df5 	.word	0x08003df5
 8003de0:	08003dfd 	.word	0x08003dfd
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	705a      	strb	r2, [r3, #1]
      break;
 8003dea:	e00f      	b.n	8003e0c <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	705a      	strb	r2, [r3, #1]
      break;
 8003df2:	e00b      	b.n	8003e0c <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2202      	movs	r2, #2
 8003df8:	705a      	strb	r2, [r3, #1]
      break;
 8003dfa:	e007      	b.n	8003e0c <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	705a      	strb	r2, [r3, #1]
      break;
 8003e02:	e003      	b.n	8003e0c <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	705a      	strb	r2, [r3, #1]
      break;
 8003e0a:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003e0c:	7b3b      	ldrb	r3, [r7, #12]
 8003e0e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d81b      	bhi.n	8003e50 <lis2duxs12_mode_get+0x20c>
 8003e18:	a201      	add	r2, pc, #4	@ (adr r2, 8003e20 <lis2duxs12_mode_get+0x1dc>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e41 	.word	0x08003e41
 8003e2c:	08003e49 	.word	0x08003e49
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	709a      	strb	r2, [r3, #2]
      break;
 8003e36:	e00f      	b.n	8003e58 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	709a      	strb	r2, [r3, #2]
      break;
 8003e3e:	e00b      	b.n	8003e58 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2202      	movs	r2, #2
 8003e44:	709a      	strb	r2, [r3, #2]
      break;
 8003e46:	e007      	b.n	8003e58 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	709a      	strb	r2, [r3, #2]
      break;
 8003e4e:	e003      	b.n	8003e58 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	709a      	strb	r2, [r3, #2]
      break;
 8003e56:	bf00      	nop
  }

  return ret;
 8003e58:	697b      	ldr	r3, [r7, #20]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop

08003e64 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8003e70:	7a3b      	ldrb	r3, [r7, #8]
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8003e78:	f107 0208 	add.w	r2, r7, #8
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	213e      	movs	r1, #62	@ 0x3e
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fc46 	bl	8003712 <lis2duxs12_write_reg>
 8003e86:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2019      	movs	r0, #25
 8003e96:	4798      	blx	r3
  }

  return ret;
 8003e98:	68fb      	ldr	r3, [r7, #12]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b089      	sub	sp, #36	@ 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8003eb0:	f107 0210 	add.w	r2, r7, #16
 8003eb4:	2306      	movs	r3, #6
 8003eb6:	2128      	movs	r1, #40	@ 0x28
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fc0d 	bl	80036d8 <lis2duxs12_read_reg>
 8003ebe:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e08f      	b.n	8003fea <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8003eca:	7fbb      	ldrb	r3, [r7, #30]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	3320      	adds	r3, #32
 8003ed0:	443b      	add	r3, r7
 8003ed2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003ed6:	7ffb      	ldrb	r3, [r7, #31]
 8003ed8:	b211      	sxth	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	7fba      	ldrb	r2, [r7, #30]
 8003efc:	3220      	adds	r2, #32
 8003efe:	443a      	add	r2, r7
 8003f00:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003f04:	4413      	add	r3, r2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	b211      	sxth	r1, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	460a      	mov	r2, r1
 8003f16:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003f18:	7fbb      	ldrb	r3, [r7, #30]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d856      	bhi.n	8003fd4 <lis2duxs12_xl_data_get+0x130>
 8003f26:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <lis2duxs12_xl_data_get+0x88>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f63 	.word	0x08003f63
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003faf 	.word	0x08003faf
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003f3c:	7ffb      	ldrb	r3, [r7, #31]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f4a:	7ffc      	ldrb	r4, [r7, #31]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fbfd 	bl	800374c <lis2duxs12_from_fs2g_to_mg>
 8003f52:	eef0 7a40 	vmov.f32	s15, s0
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	00a3      	lsls	r3, r4, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f60:	e040      	b.n	8003fe4 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f70:	7ffc      	ldrb	r4, [r7, #31]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fc02 	bl	800377c <lis2duxs12_from_fs4g_to_mg>
 8003f78:	eef0 7a40 	vmov.f32	s15, s0
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	00a3      	lsls	r3, r4, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f86:	e02d      	b.n	8003fe4 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f96:	7ffc      	ldrb	r4, [r7, #31]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fc07 	bl	80037ac <lis2duxs12_from_fs8g_to_mg>
 8003f9e:	eef0 7a40 	vmov.f32	s15, s0
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	00a3      	lsls	r3, r4, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003fac:	e01a      	b.n	8003fe4 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 8003fae:	7ffb      	ldrb	r3, [r7, #31]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003fbc:	7ffc      	ldrb	r4, [r7, #31]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fc0c 	bl	80037dc <lis2duxs12_from_fs16g_to_mg>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	00a3      	lsls	r3, r4, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003fd2:	e007      	b.n	8003fe4 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
        break;
 8003fe2:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	f67f af6c 	bls.w	8003eca <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3724      	adds	r7, #36	@ 0x24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}

08003ffc <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004006:	f107 0208 	add.w	r2, r7, #8
 800400a:	2301      	movs	r3, #1
 800400c:	2133      	movs	r1, #51	@ 0x33
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fb62 	bl	80036d8 <lis2duxs12_read_reg>
 8004014:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d122      	bne.n	8004062 <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	b2da      	uxtb	r2, r3
 8004026:	7a3b      	ldrb	r3, [r7, #8]
 8004028:	f362 0301 	bfi	r3, r2, #0, #2
 800402c:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	7a3b      	ldrb	r3, [r7, #8]
 800403a:	f362 1386 	bfi	r3, r2, #6, #1
 800403e:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004048:	b2da      	uxtb	r2, r3
 800404a:	7a3b      	ldrb	r3, [r7, #8]
 800404c:	f362 1345 	bfi	r3, r2, #5, #1
 8004050:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004052:	f107 0208 	add.w	r2, r7, #8
 8004056:	2301      	movs	r3, #1
 8004058:	2133      	movs	r1, #51	@ 0x33
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fb59 	bl	8003712 <lis2duxs12_write_reg>
 8004060:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004076:	f107 0208 	add.w	r2, r7, #8
 800407a:	2301      	movs	r3, #1
 800407c:	2133      	movs	r1, #51	@ 0x33
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fb2a 	bl	80036d8 <lis2duxs12_read_reg>
 8004084:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 8004086:	7a3b      	ldrb	r3, [r7, #8]
 8004088:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	7853      	ldrb	r3, [r2, #1]
 8004092:	f361 0341 	bfi	r3, r1, #1, #1
 8004096:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8004098:	7a3b      	ldrb	r3, [r7, #8]
 800409a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800409e:	b2d9      	uxtb	r1, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	7853      	ldrb	r3, [r2, #1]
 80040a4:	f361 0300 	bfi	r3, r1, #0, #1
 80040a8:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d00e      	beq.n	80040d0 <lis2duxs12_i3c_configure_get+0x64>
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	dc10      	bgt.n	80040d8 <lis2duxs12_i3c_configure_get+0x6c>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <lis2duxs12_i3c_configure_get+0x54>
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d004      	beq.n	80040c8 <lis2duxs12_i3c_configure_get+0x5c>
 80040be:	e00b      	b.n	80040d8 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
      break;
 80040c6:	e00b      	b.n	80040e0 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
      break;
 80040ce:	e007      	b.n	80040e0 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2202      	movs	r2, #2
 80040d4:	701a      	strb	r2, [r3, #0]
      break;
 80040d6:	e003      	b.n	80040e0 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2203      	movs	r2, #3
 80040dc:	701a      	strb	r2, [r3, #0]
      break;
 80040de:	bf00      	nop
  }

  return ret;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80040f6:	f107 0208 	add.w	r2, r7, #8
 80040fa:	2301      	movs	r3, #1
 80040fc:	213f      	movs	r1, #63	@ 0x3f
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff faea 	bl	80036d8 <lis2duxs12_read_reg>
 8004104:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10f      	bne.n	800412c <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	7a3b      	ldrb	r3, [r7, #8]
 8004116:	f362 13c7 	bfi	r3, r2, #7, #1
 800411a:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800411c:	f107 0208 	add.w	r2, r7, #8
 8004120:	2301      	movs	r3, #1
 8004122:	213f      	movs	r1, #63	@ 0x3f
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff faf4 	bl	8003712 <lis2duxs12_write_reg>
 800412a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800412c:	68fb      	ldr	r3, [r7, #12]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08a      	sub	sp, #40	@ 0x28
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8004144:	f107 0220 	add.w	r2, r7, #32
 8004148:	2301      	movs	r3, #1
 800414a:	2113      	movs	r1, #19
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff fac3 	bl	80036d8 <lis2duxs12_read_reg>
 8004152:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004154:	f107 021c 	add.w	r2, r7, #28
 8004158:	2301      	movs	r3, #1
 800415a:	2115      	movs	r1, #21
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff fabb 	bl	80036d8 <lis2duxs12_read_reg>
 8004162:	4602      	mov	r2, r0
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	4413      	add	r3, r2
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800416a:	f107 0214 	add.w	r2, r7, #20
 800416e:	2301      	movs	r3, #1
 8004170:	2147      	movs	r1, #71	@ 0x47
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fab0 	bl	80036d8 <lis2duxs12_read_reg>
 8004178:	4602      	mov	r2, r0
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	4413      	add	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004180:	f107 0218 	add.w	r2, r7, #24
 8004184:	2301      	movs	r3, #1
 8004186:	2116      	movs	r1, #22
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff faa5 	bl	80036d8 <lis2duxs12_read_reg>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	4413      	add	r3, r2
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 808a 	bne.w	80042b2 <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 800419e:	793b      	ldrb	r3, [r7, #4]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d00e      	beq.n	80041c2 <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 80041a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041a8:	f043 0308 	orr.w	r3, r3, #8
 80041ac:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80041b0:	793b      	ldrb	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	7f3b      	ldrb	r3, [r7, #28]
 80041ba:	f362 0302 	bfi	r3, r2, #0, #3
 80041be:	773b      	strb	r3, [r7, #28]
 80041c0:	e005      	b.n	80041ce <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 80041c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041c6:	f023 0308 	bic.w	r3, r3, #8
 80041ca:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 80041ce:	797b      	ldrb	r3, [r7, #5]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	7f3b      	ldrb	r3, [r7, #28]
 80041d8:	f362 1386 	bfi	r3, r2, #6, #1
 80041dc:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 80041de:	79bb      	ldrb	r3, [r7, #6]
 80041e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	7e3b      	ldrb	r3, [r7, #24]
 80041e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80041ec:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 80041ee:	7a3b      	ldrb	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 80041f4:	7a3b      	ldrb	r3, [r7, #8]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	7d3b      	ldrb	r3, [r7, #20]
 80041fe:	f362 03c4 	bfi	r3, r2, #3, #2
 8004202:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 8004204:	7a7b      	ldrb	r3, [r7, #9]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	b2da      	uxtb	r2, r3
 800420c:	7d3b      	ldrb	r3, [r7, #20]
 800420e:	f362 0302 	bfi	r3, r2, #0, #3
 8004212:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800421a:	b2da      	uxtb	r2, r3
 800421c:	7f3b      	ldrb	r3, [r7, #28]
 800421e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004222:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 8004224:	79bb      	ldrb	r3, [r7, #6]
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d014      	beq.n	800425a <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2da      	uxtb	r2, r3
 8004242:	7f3b      	ldrb	r3, [r7, #28]
 8004244:	f362 03c3 	bfi	r3, r2, #3, #1
 8004248:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 800424a:	79bb      	ldrb	r3, [r7, #6]
 800424c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004250:	b2da      	uxtb	r2, r3
 8004252:	7e3b      	ldrb	r3, [r7, #24]
 8004254:	f362 0306 	bfi	r3, r2, #0, #7
 8004258:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800425a:	f107 0214 	add.w	r2, r7, #20
 800425e:	2301      	movs	r3, #1
 8004260:	2147      	movs	r1, #71	@ 0x47
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff fa55 	bl	8003712 <lis2duxs12_write_reg>
 8004268:	4602      	mov	r2, r0
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	4413      	add	r3, r2
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004270:	f107 0218 	add.w	r2, r7, #24
 8004274:	2301      	movs	r3, #1
 8004276:	2116      	movs	r1, #22
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fa4a 	bl	8003712 <lis2duxs12_write_reg>
 800427e:	4602      	mov	r2, r0
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	4413      	add	r3, r2
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004286:	f107 021c 	add.w	r2, r7, #28
 800428a:	2301      	movs	r3, #1
 800428c:	2115      	movs	r1, #21
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fa3f 	bl	8003712 <lis2duxs12_write_reg>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	4413      	add	r3, r2
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800429c:	f107 0220 	add.w	r2, r7, #32
 80042a0:	2301      	movs	r3, #1
 80042a2:	2113      	movs	r1, #19
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff fa34 	bl	8003712 <lis2duxs12_write_reg>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	4413      	add	r3, r2
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	@ 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80042d0:	f04f 33ff 	mov.w	r3, #4294967295
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e067      	b.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	7b1a      	ldrb	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a28      	ldr	r2, [pc, #160]	@ (80043b4 <LIS2MDL_RegisterBusIO+0xf8>)
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a27      	ldr	r2, [pc, #156]	@ (80043b8 <LIS2MDL_RegisterBusIO+0xfc>)
 800431a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e036      	b.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4798      	blx	r3
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e02c      	b.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d028      	beq.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800435c:	2b00      	cmp	r3, #0
 800435e:	d123      	bne.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10d      	bne.n	8004384 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004368:	2334      	movs	r3, #52	@ 0x34
 800436a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	461a      	mov	r2, r3
 8004370:	2162      	movs	r1, #98	@ 0x62
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fb1b 	bl	80049ae <LIS2MDL_Write_Reg>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d014      	beq.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e012      	b.n	80043aa <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d101      	bne.n	8004390 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	e00c      	b.n	80043aa <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3320      	adds	r3, #32
 8004394:	2101      	movs	r1, #1
 8004396:	4618      	mov	r0, r3
 8004398:	f000 ff79 	bl	800528e <lis2mdl_i2c_interface_set>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	e000      	b.n	80043aa <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80043a8:	68fb      	ldr	r3, [r7, #12]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	08004a05 	.word	0x08004a05
 80043b8:	08004a87 	.word	0x08004a87

080043bc <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d144      	bne.n	8004456 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80043cc:	f107 0208 	add.w	r2, r7, #8
 80043d0:	2301      	movs	r3, #1
 80043d2:	2162      	movs	r1, #98	@ 0x62
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb97 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295
 80043e4:	e06c      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80043e6:	f107 020c 	add.w	r2, r7, #12
 80043ea:	2301      	movs	r3, #1
 80043ec:	2160      	movs	r1, #96	@ 0x60
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fb8a 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	e05f      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004400:	7a3b      	ldrb	r3, [r7, #8]
 8004402:	f043 0310 	orr.w	r3, r3, #16
 8004406:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004408:	7a3b      	ldrb	r3, [r7, #8]
 800440a:	f023 0302 	bic.w	r3, r3, #2
 800440e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004410:	7b3b      	ldrb	r3, [r7, #12]
 8004412:	2202      	movs	r2, #2
 8004414:	f362 0301 	bfi	r3, r2, #0, #2
 8004418:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800441a:	7b3b      	ldrb	r3, [r7, #12]
 800441c:	f043 030c 	orr.w	r3, r3, #12
 8004420:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004422:	f107 0208 	add.w	r2, r7, #8
 8004426:	2301      	movs	r3, #1
 8004428:	2162      	movs	r1, #98	@ 0x62
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fcab 	bl	8004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	e041      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800443c:	f107 020c 	add.w	r2, r7, #12
 8004440:	2301      	movs	r3, #1
 8004442:	2160      	movs	r1, #96	@ 0x60
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fc9e 	bl	8004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d032      	beq.n	80044b6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e034      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3320      	adds	r3, #32
 800445a:	2101      	movs	r1, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fe71 	bl	8005144 <lis2mdl_block_data_update_set>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004468:	f04f 33ff 	mov.w	r3, #4294967295
 800446c:	e028      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3320      	adds	r3, #32
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fde0 	bl	800503a <lis2mdl_operating_mode_set>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
 8004484:	e01c      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3320      	adds	r3, #32
 800448a:	2103      	movs	r1, #3
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fdfa 	bl	8005086 <lis2mdl_data_rate_set>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	e010      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3320      	adds	r3, #32
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fecc 	bl	8005242 <lis2mdl_self_test_set>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	e004      	b.n	80044c0 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8a5 	bl	8004620 <LIS2MDL_MAG_Disable>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
 80044e0:	e004      	b.n	80044ec <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d10b      	bne.n	800451e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004506:	2301      	movs	r3, #1
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	214f      	movs	r1, #79	@ 0x4f
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fafb 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	e00c      	b.n	8004538 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3320      	adds	r3, #32
 8004522:	6839      	ldr	r1, [r7, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fe7b 	bl	8005220 <lis2mdl_device_id_get>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004530:	f04f 33ff 	mov.w	r3, #4294967295
 8004534:	e000      	b.n	8004538 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2232      	movs	r2, #50	@ 0x32
 8004572:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4a04      	ldr	r2, [pc, #16]	@ (8004598 <LIS2MDL_GetCapabilities+0x58>)
 8004588:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	42c80000 	.word	0x42c80000

0800459c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e032      	b.n	8004618 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d11d      	bne.n	80045f6 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045ba:	f107 020c 	add.w	r2, r7, #12
 80045be:	2301      	movs	r3, #1
 80045c0:	2160      	movs	r1, #96	@ 0x60
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 faa0 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e021      	b.n	8004618 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80045d4:	7b3b      	ldrb	r3, [r7, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045dc:	f107 020c 	add.w	r2, r7, #12
 80045e0:	2301      	movs	r3, #1
 80045e2:	2160      	movs	r1, #96	@ 0x60
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fbce 	bl	8004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	e010      	b.n	8004618 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3320      	adds	r3, #32
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fd1c 	bl	800503a <lis2mdl_operating_mode_set>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
 800460c:	e004      	b.n	8004618 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e033      	b.n	800469e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d11e      	bne.n	800467c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800463e:	f107 020c 	add.w	r2, r7, #12
 8004642:	2301      	movs	r3, #1
 8004644:	2160      	movs	r1, #96	@ 0x60
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa5e 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	e022      	b.n	800469e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004658:	7b3b      	ldrb	r3, [r7, #12]
 800465a:	2202      	movs	r2, #2
 800465c:	f362 0301 	bfi	r3, r2, #0, #2
 8004660:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004662:	f107 020c 	add.w	r2, r7, #12
 8004666:	2301      	movs	r3, #1
 8004668:	2160      	movs	r1, #96	@ 0x60
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb8b 	bl	8004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	e010      	b.n	800469e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3320      	adds	r3, #32
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fcd9 	bl	800503a <lis2mdl_operating_mode_set>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e004      	b.n	800469e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80046b6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3320      	adds	r3, #32
 80046da:	f107 020b 	add.w	r2, r7, #11
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fcf7 	bl	80050d4 <lis2mdl_data_rate_get>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80046ec:	f04f 33ff 	mov.w	r3, #4294967295
 80046f0:	e023      	b.n	800473a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80046f2:	7afb      	ldrb	r3, [r7, #11]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d81b      	bhi.n	8004730 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004711 	.word	0x08004711
 8004704:	08004719 	.word	0x08004719
 8004708:	08004721 	.word	0x08004721
 800470c:	08004729 	.word	0x08004729
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004714:	601a      	str	r2, [r3, #0]
      break;
 8004716:	e00f      	b.n	8004738 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4a0b      	ldr	r2, [pc, #44]	@ (8004748 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800471c:	601a      	str	r2, [r3, #0]
      break;
 800471e:	e00b      	b.n	8004738 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004724:	601a      	str	r2, [r3, #0]
      break;
 8004726:	e007      	b.n	8004738 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4a09      	ldr	r2, [pc, #36]	@ (8004750 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800472c:	601a      	str	r2, [r3, #0]
      break;
 800472e:	e003      	b.n	8004738 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	60fb      	str	r3, [r7, #12]
      break;
 8004736:	bf00      	nop
  }

  return ret;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	41200000 	.word	0x41200000
 8004748:	41a00000 	.word	0x41a00000
 800474c:	42480000 	.word	0x42480000
 8004750:	42c80000 	.word	0x42c80000

08004754 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004760:	edd7 7a00 	vldr	s15, [r7]
 8004764:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d801      	bhi.n	8004776 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004772:	2300      	movs	r3, #0
 8004774:	e016      	b.n	80047a4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004776:	edd7 7a00 	vldr	s15, [r7]
 800477a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800477e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004786:	d801      	bhi.n	800478c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004788:	2301      	movs	r3, #1
 800478a:	e00b      	b.n	80047a4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800478c:	edd7 7a00 	vldr	s15, [r7]
 8004790:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004818 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479c:	d801      	bhi.n	80047a2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e000      	b.n	80047a4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80047a2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80047a4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d121      	bne.n	80047f2 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80047ae:	f107 020c 	add.w	r2, r7, #12
 80047b2:	2301      	movs	r3, #1
 80047b4:	2160      	movs	r1, #96	@ 0x60
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9a6 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e022      	b.n	800480e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	7b3b      	ldrb	r3, [r7, #12]
 80047d2:	f362 0383 	bfi	r3, r2, #2, #2
 80047d6:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80047d8:	f107 020c 	add.w	r2, r7, #12
 80047dc:	2301      	movs	r3, #1
 80047de:	2160      	movs	r1, #96	@ 0x60
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fad0 	bl	8004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00f      	beq.n	800480c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
 80047f0:	e00d      	b.n	800480e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3320      	adds	r3, #32
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fc43 	bl	8005086 <lis2mdl_data_rate_set>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	e000      	b.n	800480e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	42480000 	.word	0x42480000

0800481c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2232      	movs	r2, #50	@ 0x32
 800482a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3320      	adds	r3, #32
 8004860:	f107 0208 	add.w	r2, r7, #8
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fc92 	bl	8005190 <lis2mdl_magnetic_raw_get>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	e00c      	b.n	8004892 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004878:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004880:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004888:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b088      	sub	sp, #32
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d134      	bne.n	800491c <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80048b2:	f107 0218 	add.w	r2, r7, #24
 80048b6:	2306      	movs	r3, #6
 80048b8:	2168      	movs	r1, #104	@ 0x68
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f924 	bl	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	e06c      	b.n	80049a6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80048cc:	7e7b      	ldrb	r3, [r7, #25]
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80048d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b29b      	uxth	r3, r3
 80048dc:	7e3a      	ldrb	r2, [r7, #24]
 80048de:	4413      	add	r3, r2
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b21b      	sxth	r3, r3
 80048e4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80048e6:	7efb      	ldrb	r3, [r7, #27]
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80048ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	7eba      	ldrb	r2, [r7, #26]
 80048f8:	4413      	add	r3, r2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004900:	7f7b      	ldrb	r3, [r7, #29]
 8004902:	b21b      	sxth	r3, r3
 8004904:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004906:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800490a:	b29b      	uxth	r3, r3
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	b29b      	uxth	r3, r3
 8004910:	7f3a      	ldrb	r2, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	b21b      	sxth	r3, r3
 8004918:	82bb      	strh	r3, [r7, #20]
 800491a:	e00d      	b.n	8004938 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3320      	adds	r3, #32
 8004920:	f107 0210 	add.w	r2, r7, #16
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fc32 	bl	8005190 <lis2mdl_magnetic_raw_get>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e036      	b.n	80049a6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff feb1 	bl	80046a6 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004944:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004950:	edd7 7a03 	vldr	s15, [r7, #12]
 8004954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800495c:	ee17 2a90 	vmov	r2, s15
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004964:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004970:	edd7 7a03 	vldr	s15, [r7, #12]
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800497c:	ee17 2a90 	vmov	r2, s15
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004984:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004990:	edd7 7a03 	vldr	s15, [r7, #12]
 8004994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800499c:	ee17 2a90 	vmov	r2, s15
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]
 80049ba:	4613      	mov	r3, r2
 80049bc:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d10b      	bne.n	80049de <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80049c6:	1cba      	adds	r2, r7, #2
 80049c8:	78f9      	ldrb	r1, [r7, #3]
 80049ca:	2301      	movs	r3, #1
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9da 	bl	8004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e00e      	b.n	80049fc <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0020 	add.w	r0, r3, #32
 80049e4:	1cba      	adds	r2, r7, #2
 80049e6:	78f9      	ldrb	r1, [r7, #3]
 80049e8:	2301      	movs	r3, #1
 80049ea:	f000 fb08 	bl	8004ffe <lis2mdl_write_reg>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295
 80049f8:	e000      	b.n	80049fc <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	460b      	mov	r3, r1
 8004a12:	72fb      	strb	r3, [r7, #11]
 8004a14:	4613      	mov	r3, r2
 8004a16:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10e      	bne.n	8004a42 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	695c      	ldr	r4, [r3, #20]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	7b1b      	ldrb	r3, [r3, #12]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	7afb      	ldrb	r3, [r7, #11]
 8004a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	4619      	mov	r1, r3
 8004a38:	893b      	ldrh	r3, [r7, #8]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	47a0      	blx	r4
 8004a3e:	4603      	mov	r3, r0
 8004a40:	e01d      	b.n	8004a7e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d10b      	bne.n	8004a62 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	695c      	ldr	r4, [r3, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	7b1b      	ldrb	r3, [r3, #12]
 8004a52:	4618      	mov	r0, r3
 8004a54:	7afb      	ldrb	r3, [r7, #11]
 8004a56:	b299      	uxth	r1, r3
 8004a58:	893b      	ldrh	r3, [r7, #8]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	47a0      	blx	r4
 8004a5e:	4603      	mov	r3, r0
 8004a60:	e00d      	b.n	8004a7e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	695c      	ldr	r4, [r3, #20]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	7b1b      	ldrb	r3, [r3, #12]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	7afb      	ldrb	r3, [r7, #11]
 8004a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4619      	mov	r1, r3
 8004a76:	893b      	ldrh	r3, [r7, #8]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	47a0      	blx	r4
 8004a7c:	4603      	mov	r3, r0
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}

08004a86 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	461a      	mov	r2, r3
 8004a92:	460b      	mov	r3, r1
 8004a94:	72fb      	strb	r3, [r7, #11]
 8004a96:	4613      	mov	r3, r2
 8004a98:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10e      	bne.n	8004ac4 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	691c      	ldr	r4, [r3, #16]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	7b1b      	ldrb	r3, [r3, #12]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	893b      	ldrh	r3, [r7, #8]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	47a0      	blx	r4
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	e01d      	b.n	8004b00 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d10b      	bne.n	8004ae4 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	691c      	ldr	r4, [r3, #16]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	7b1b      	ldrb	r3, [r3, #12]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
 8004ad8:	b299      	uxth	r1, r3
 8004ada:	893b      	ldrh	r3, [r7, #8]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	47a0      	blx	r4
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	e00d      	b.n	8004b00 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	691c      	ldr	r4, [r3, #16]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	7b1b      	ldrb	r3, [r3, #12]
 8004aec:	4618      	mov	r0, r3
 8004aee:	7afb      	ldrb	r3, [r7, #11]
 8004af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	4619      	mov	r1, r3
 8004af8:	893b      	ldrh	r3, [r7, #8]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	47a0      	blx	r4
 8004afe:	4603      	mov	r3, r0
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	@ 0x30
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	461a      	mov	r2, r3
 8004b14:	460b      	mov	r3, r1
 8004b16:	72fb      	strb	r3, [r7, #11]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004b22:	2340      	movs	r3, #64	@ 0x40
 8004b24:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004b2e:	233d      	movs	r3, #61	@ 0x3d
 8004b30:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004b32:	2315      	movs	r3, #21
 8004b34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004b38:	2316      	movs	r3, #22
 8004b3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004b3e:	2317      	movs	r3, #23
 8004b40:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004b44:	2314      	movs	r3, #20
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004b4a:	2344      	movs	r3, #68	@ 0x44
 8004b4c:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004b54:	2339      	movs	r3, #57	@ 0x39
 8004b56:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004b60:	2329      	movs	r3, #41	@ 0x29
 8004b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004b66:	231e      	movs	r3, #30
 8004b68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8004b72:	893b      	ldrh	r3, [r7, #8]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004b84:	2340      	movs	r3, #64	@ 0x40
 8004b86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f103 0020 	add.w	r0, r3, #32
 8004b90:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004b94:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f000 fa30 	bl	8004ffe <lis2mdl_write_reg>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba8:	e0e9      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f103 0020 	add.w	r0, r3, #32
 8004bb0:	f107 021f 	add.w	r2, r7, #31
 8004bb4:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f000 fa20 	bl	8004ffe <lis2mdl_write_reg>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc8:	e0d9      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f103 0020 	add.w	r0, r3, #32
 8004bd0:	f107 020b 	add.w	r2, r7, #11
 8004bd4:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f000 fa10 	bl	8004ffe <lis2mdl_write_reg>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	e0c9      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f103 0020 	add.w	r0, r3, #32
 8004bf0:	f107 021d 	add.w	r2, r7, #29
 8004bf4:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f000 fa00 	bl	8004ffe <lis2mdl_write_reg>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	e0b9      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f103 0020 	add.w	r0, r3, #32
 8004c10:	f107 021e 	add.w	r2, r7, #30
 8004c14:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f000 f9f0 	bl	8004ffe <lis2mdl_write_reg>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e0a9      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f103 0020 	add.w	r0, r3, #32
 8004c30:	f107 0220 	add.w	r2, r7, #32
 8004c34:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f000 f9e0 	bl	8004ffe <lis2mdl_write_reg>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	e099      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f103 0020 	add.w	r0, r3, #32
 8004c50:	f107 021c 	add.w	r2, r7, #28
 8004c54:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f000 f9b2 	bl	8004fc2 <lis2mdl_read_reg>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	e089      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004c6a:	7f3b      	ldrb	r3, [r7, #28]
 8004c6c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d102      	bne.n	8004c7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004c74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004c78:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f103 0020 	add.w	r0, r3, #32
 8004c80:	f107 021c 	add.w	r2, r7, #28
 8004c84:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f000 f9b8 	bl	8004ffe <lis2mdl_write_reg>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004c94:	f04f 33ff 	mov.w	r3, #4294967295
 8004c98:	e071      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f103 0020 	add.w	r0, r3, #32
 8004ca0:	f107 0214 	add.w	r2, r7, #20
 8004ca4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004ca8:	2306      	movs	r3, #6
 8004caa:	f000 f98a 	bl	8004fc2 <lis2mdl_read_reg>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb8:	e061      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f103 0020 	add.w	r0, r3, #32
 8004cc0:	f107 021b 	add.w	r2, r7, #27
 8004cc4:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f000 f97a 	bl	8004fc2 <lis2mdl_read_reg>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd8:	e051      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004cda:	7efa      	ldrb	r2, [r7, #27]
 8004cdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1e6      	bne.n	8004cba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f103 0020 	add.w	r0, r3, #32
 8004cf2:	f107 021b 	add.w	r2, r7, #27
 8004cf6:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f000 f961 	bl	8004fc2 <lis2mdl_read_reg>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e038      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004d0c:	7efa      	ldrb	r2, [r7, #27]
 8004d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d12:	4013      	ands	r3, r2
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d1e6      	bne.n	8004cec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f103 0020 	add.w	r0, r3, #32
 8004d24:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004d28:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f000 f966 	bl	8004ffe <lis2mdl_write_reg>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	e01f      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f103 0020 	add.w	r0, r3, #32
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	f000 f939 	bl	8004fc2 <lis2mdl_read_reg>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	e010      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f103 0020 	add.w	r0, r3, #32
 8004d62:	f107 0220 	add.w	r2, r7, #32
 8004d66:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f000 f947 	bl	8004ffe <lis2mdl_write_reg>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7a:	e000      	b.n	8004d7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3730      	adds	r7, #48	@ 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b08c      	sub	sp, #48	@ 0x30
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	461a      	mov	r2, r3
 8004d92:	460b      	mov	r3, r1
 8004d94:	72fb      	strb	r3, [r7, #11]
 8004d96:	4613      	mov	r3, r2
 8004d98:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004da0:	2340      	movs	r3, #64	@ 0x40
 8004da2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004dac:	233c      	movs	r3, #60	@ 0x3c
 8004dae:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004db0:	2315      	movs	r3, #21
 8004db2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004db6:	2316      	movs	r3, #22
 8004db8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004dbc:	2317      	movs	r3, #23
 8004dbe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004dc6:	2314      	movs	r3, #20
 8004dc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004dcc:	2344      	movs	r3, #68	@ 0x44
 8004dce:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004dd0:	2339      	movs	r3, #57	@ 0x39
 8004dd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004ddc:	2329      	movs	r3, #41	@ 0x29
 8004dde:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004de2:	231e      	movs	r3, #30
 8004de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004dee:	2310      	movs	r3, #16
 8004df0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004dfa:	2340      	movs	r3, #64	@ 0x40
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004e00:	230e      	movs	r3, #14
 8004e02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f103 0020 	add.w	r0, r3, #32
 8004e0c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004e10:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004e14:	2301      	movs	r3, #1
 8004e16:	f000 f8f2 	bl	8004ffe <lis2mdl_write_reg>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
 8004e24:	e0c9      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f103 0020 	add.w	r0, r3, #32
 8004e2c:	f107 021f 	add.w	r2, r7, #31
 8004e30:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004e34:	2301      	movs	r3, #1
 8004e36:	f000 f8e2 	bl	8004ffe <lis2mdl_write_reg>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	e0b9      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f103 0020 	add.w	r0, r3, #32
 8004e4c:	f107 020b 	add.w	r2, r7, #11
 8004e50:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004e54:	2301      	movs	r3, #1
 8004e56:	f000 f8d2 	bl	8004ffe <lis2mdl_write_reg>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
 8004e64:	e0a9      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f103 0020 	add.w	r0, r3, #32
 8004e6c:	f107 021e 	add.w	r2, r7, #30
 8004e70:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004e74:	2301      	movs	r3, #1
 8004e76:	f000 f8c2 	bl	8004ffe <lis2mdl_write_reg>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
 8004e84:	e099      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f103 0020 	add.w	r0, r3, #32
 8004e8c:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004e90:	2301      	movs	r3, #1
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	f000 f8b3 	bl	8004ffe <lis2mdl_write_reg>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	e08a      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f103 0020 	add.w	r0, r3, #32
 8004eaa:	f107 021d 	add.w	r2, r7, #29
 8004eae:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f000 f8a3 	bl	8004ffe <lis2mdl_write_reg>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec2:	e07a      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f103 0020 	add.w	r0, r3, #32
 8004eca:	f107 0220 	add.w	r2, r7, #32
 8004ece:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f000 f893 	bl	8004ffe <lis2mdl_write_reg>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e06a      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f103 0020 	add.w	r0, r3, #32
 8004eea:	f107 021c 	add.w	r2, r7, #28
 8004eee:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f000 f865 	bl	8004fc2 <lis2mdl_read_reg>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e05a      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004f04:	7f3b      	ldrb	r3, [r7, #28]
 8004f06:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d102      	bne.n	8004f14 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f12:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f103 0020 	add.w	r0, r3, #32
 8004f1a:	f107 021c 	add.w	r2, r7, #28
 8004f1e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 f86b 	bl	8004ffe <lis2mdl_write_reg>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f32:	e042      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f103 0020 	add.w	r0, r3, #32
 8004f3a:	f107 0214 	add.w	r2, r7, #20
 8004f3e:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004f42:	2306      	movs	r3, #6
 8004f44:	f000 f83d 	bl	8004fc2 <lis2mdl_read_reg>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	e032      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f103 0020 	add.w	r0, r3, #32
 8004f5a:	f107 021b 	add.w	r2, r7, #27
 8004f5e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004f62:	2301      	movs	r3, #1
 8004f64:	f000 f82d 	bl	8004fc2 <lis2mdl_read_reg>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f72:	e022      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004f74:	7efa      	ldrb	r2, [r7, #27]
 8004f76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d1e6      	bne.n	8004f54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f103 0020 	add.w	r0, r3, #32
 8004f8c:	f107 021b 	add.w	r2, r7, #27
 8004f90:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004f94:	2301      	movs	r3, #1
 8004f96:	f000 f814 	bl	8004fc2 <lis2mdl_read_reg>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	e009      	b.n	8004fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004fa6:	7efa      	ldrb	r2, [r7, #27]
 8004fa8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004fac:	4013      	ands	r3, r2
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1e6      	bne.n	8004f86 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3730      	adds	r7, #48	@ 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004fc2:	b590      	push	{r4, r7, lr}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	72fb      	strb	r3, [r7, #11]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe0:	e009      	b.n	8004ff6 <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685c      	ldr	r4, [r3, #4]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68d8      	ldr	r0, [r3, #12]
 8004fea:	893b      	ldrh	r3, [r7, #8]
 8004fec:	7af9      	ldrb	r1, [r7, #11]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	47a0      	blx	r4
 8004ff2:	6178      	str	r0, [r7, #20]

  return ret;
 8004ff4:	697b      	ldr	r3, [r7, #20]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}

08004ffe <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004ffe:	b590      	push	{r4, r7, lr}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	461a      	mov	r2, r3
 800500a:	460b      	mov	r3, r1
 800500c:	72fb      	strb	r3, [r7, #11]
 800500e:	4613      	mov	r3, r2
 8005010:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <lis2mdl_write_reg+0x20>
  {
    return -1;
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	e009      	b.n	8005032 <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681c      	ldr	r4, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68d8      	ldr	r0, [r3, #12]
 8005026:	893b      	ldrh	r3, [r7, #8]
 8005028:	7af9      	ldrb	r1, [r7, #11]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	47a0      	blx	r4
 800502e:	6178      	str	r0, [r7, #20]

  return ret;
 8005030:	697b      	ldr	r3, [r7, #20]
}
 8005032:	4618      	mov	r0, r3
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd90      	pop	{r4, r7, pc}

0800503a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005046:	f107 0208 	add.w	r2, r7, #8
 800504a:	2301      	movs	r3, #1
 800504c:	2160      	movs	r1, #96	@ 0x60
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ffb7 	bl	8004fc2 <lis2mdl_read_reg>
 8005054:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	b2da      	uxtb	r2, r3
 8005064:	7a3b      	ldrb	r3, [r7, #8]
 8005066:	f362 0301 	bfi	r3, r2, #0, #2
 800506a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800506c:	f107 0208 	add.w	r2, r7, #8
 8005070:	2301      	movs	r3, #1
 8005072:	2160      	movs	r1, #96	@ 0x60
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ffc2 	bl	8004ffe <lis2mdl_write_reg>
 800507a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005092:	f107 0208 	add.w	r2, r7, #8
 8005096:	2301      	movs	r3, #1
 8005098:	2160      	movs	r1, #96	@ 0x60
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff ff91 	bl	8004fc2 <lis2mdl_read_reg>
 80050a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10f      	bne.n	80050c8 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	7a3b      	ldrb	r3, [r7, #8]
 80050b2:	f362 0383 	bfi	r3, r2, #2, #2
 80050b6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80050b8:	f107 0208 	add.w	r2, r7, #8
 80050bc:	2301      	movs	r3, #1
 80050be:	2160      	movs	r1, #96	@ 0x60
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff9c 	bl	8004ffe <lis2mdl_write_reg>
 80050c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050c8:	68fb      	ldr	r3, [r7, #12]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80050de:	f107 0208 	add.w	r2, r7, #8
 80050e2:	2301      	movs	r3, #1
 80050e4:	2160      	movs	r1, #96	@ 0x60
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ff6b 	bl	8004fc2 <lis2mdl_read_reg>
 80050ec:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80050ee:	7a3b      	ldrb	r3, [r7, #8]
 80050f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d81a      	bhi.n	8005130 <lis2mdl_data_rate_get+0x5c>
 80050fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <lis2mdl_data_rate_get+0x2c>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005111 	.word	0x08005111
 8005104:	08005119 	.word	0x08005119
 8005108:	08005121 	.word	0x08005121
 800510c:	08005129 	.word	0x08005129
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
      break;
 8005116:	e00f      	b.n	8005138 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
      break;
 800511e:	e00b      	b.n	8005138 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]
      break;
 8005126:	e007      	b.n	8005138 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2203      	movs	r2, #3
 800512c:	701a      	strb	r2, [r3, #0]
      break;
 800512e:	e003      	b.n	8005138 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
      break;
 8005136:	bf00      	nop
  }

  return ret;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop

08005144 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005150:	f107 0208 	add.w	r2, r7, #8
 8005154:	2301      	movs	r3, #1
 8005156:	2162      	movs	r1, #98	@ 0x62
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff ff32 	bl	8004fc2 <lis2mdl_read_reg>
 800515e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	7a3b      	ldrb	r3, [r7, #8]
 8005170:	f362 1304 	bfi	r3, r2, #4, #1
 8005174:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005176:	f107 0208 	add.w	r2, r7, #8
 800517a:	2301      	movs	r3, #1
 800517c:	2162      	movs	r1, #98	@ 0x62
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ff3d 	bl	8004ffe <lis2mdl_write_reg>
 8005184:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800519a:	f107 020c 	add.w	r2, r7, #12
 800519e:	2306      	movs	r3, #6
 80051a0:	2168      	movs	r1, #104	@ 0x68
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff0d 	bl	8004fc2 <lis2mdl_read_reg>
 80051a8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80051aa:	7b7b      	ldrb	r3, [r7, #13]
 80051ac:	b21a      	sxth	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	b29b      	uxth	r3, r3
 80051be:	7b3a      	ldrb	r2, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	b21a      	sxth	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051ca:	7bfa      	ldrb	r2, [r7, #15]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	3302      	adds	r3, #2
 80051d0:	b212      	sxth	r2, r2
 80051d2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	3302      	adds	r3, #2
 80051d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	7bba      	ldrb	r2, [r7, #14]
 80051e4:	4413      	add	r3, r2
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	3302      	adds	r3, #2
 80051ec:	b212      	sxth	r2, r2
 80051ee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80051f0:	7c7a      	ldrb	r2, [r7, #17]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	3304      	adds	r3, #4
 80051f6:	b212      	sxth	r2, r2
 80051f8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3304      	adds	r3, #4
 80051fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005202:	b29b      	uxth	r3, r3
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	b29b      	uxth	r3, r3
 8005208:	7c3a      	ldrb	r2, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	b29a      	uxth	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	3304      	adds	r3, #4
 8005212:	b212      	sxth	r2, r2
 8005214:	801a      	strh	r2, [r3, #0]

  return ret;
 8005216:	697b      	ldr	r3, [r7, #20]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800522a:	2301      	movs	r3, #1
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	214f      	movs	r1, #79	@ 0x4f
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fec6 	bl	8004fc2 <lis2mdl_read_reg>
 8005236:	60f8      	str	r0, [r7, #12]

  return ret;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800524e:	f107 0208 	add.w	r2, r7, #8
 8005252:	2301      	movs	r3, #1
 8005254:	2162      	movs	r1, #98	@ 0x62
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff feb3 	bl	8004fc2 <lis2mdl_read_reg>
 800525c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10f      	bne.n	8005284 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	7a3b      	ldrb	r3, [r7, #8]
 800526e:	f362 0341 	bfi	r3, r2, #1, #1
 8005272:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005274:	f107 0208 	add.w	r2, r7, #8
 8005278:	2301      	movs	r3, #1
 800527a:	2162      	movs	r1, #98	@ 0x62
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff febe 	bl	8004ffe <lis2mdl_write_reg>
 8005282:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005284:	68fb      	ldr	r3, [r7, #12]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	2301      	movs	r3, #1
 80052a0:	2162      	movs	r1, #98	@ 0x62
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fe8d 	bl	8004fc2 <lis2mdl_read_reg>
 80052a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10f      	bne.n	80052d0 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	7a3b      	ldrb	r3, [r7, #8]
 80052ba:	f362 1345 	bfi	r3, r2, #5, #1
 80052be:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80052c0:	f107 0208 	add.w	r2, r7, #8
 80052c4:	2301      	movs	r3, #1
 80052c6:	2162      	movs	r1, #98	@ 0x62
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fe98 	bl	8004ffe <lis2mdl_write_reg>
 80052ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052d0:	68fb      	ldr	r3, [r7, #12]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e051      	b.n	800539c <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	7b1a      	ldrb	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a1d      	ldr	r2, [pc, #116]	@ (80053a8 <LPS22DF_RegisterBusIO+0xcc>)
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1c      	ldr	r2, [pc, #112]	@ (80053ac <LPS22DF_RegisterBusIO+0xd0>)
 800533a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e020      	b.n	800539c <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4798      	blx	r3
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e016      	b.n	800539c <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d112      	bne.n	800539c <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10d      	bne.n	800539c <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8005380:	2320      	movs	r3, #32
 8005382:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8005384:	7afb      	ldrb	r3, [r7, #11]
 8005386:	461a      	mov	r2, r3
 8005388:	210e      	movs	r1, #14
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9f3 	bl	8005776 <LPS22DF_Write_Reg>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	08005b19 	.word	0x08005b19
 80053ac:	08005b4f 	.word	0x08005b4f

080053b0 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fb4c 	bl	8005a60 <LPS22DF_Initialize>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	e004      	b.n	80053de <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d111      	bne.n	800541c <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f882 	bl	8005502 <LPS22DF_PRESS_Disable>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
 8005408:	e00d      	b.n	8005426 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f927 	bl	800565e <LPS22DF_TEMP_Disable>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295
 800541a:	e004      	b.n	8005426 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3320      	adds	r3, #32
 800543c:	f107 020c 	add.w	r2, r7, #12
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fc22 	bl	8005c8c <lps22df_id_get>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e003      	b.n	800545c <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 8005454:	7b3a      	ldrb	r2, [r7, #12]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2201      	movs	r2, #1
 8005478:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2200      	movs	r2, #0
 800548a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4a08      	ldr	r2, [pc, #32]	@ (80054b8 <LPS22DF_GetCapabilities+0x54>)
 8005498:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	4a06      	ldr	r2, [pc, #24]	@ (80054b8 <LPS22DF_GetCapabilities+0x54>)
 800549e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	43480000 	.word	0x43480000

080054bc <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e013      	b.n	80054fa <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f103 0220 	add.w	r2, r3, #32
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3333      	adds	r3, #51	@ 0x33
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fdb2 	bl	8006048 <lps22df_mode_set>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
 80054ee:	e004      	b.n	80054fa <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e030      	b.n	800557a <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d126      	bne.n	8005570 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3320      	adds	r3, #32
 8005526:	f107 020c 	add.w	r2, r7, #12
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fde9 	bl	8006104 <lps22df_mode_get>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	e01d      	b.n	800557a <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3333      	adds	r3, #51	@ 0x33
 8005542:	461a      	mov	r2, r3
 8005544:	f107 030c 	add.w	r3, r7, #12
 8005548:	8819      	ldrh	r1, [r3, #0]
 800554a:	789b      	ldrb	r3, [r3, #2]
 800554c:	8011      	strh	r1, [r2, #0]
 800554e:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005550:	2300      	movs	r3, #0
 8005552:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3320      	adds	r3, #32
 8005558:	f107 020c 	add.w	r2, r7, #12
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fd72 	bl	8006048 <lps22df_mode_set>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	e004      	b.n	800557a <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f90c 	bl	80057ac <LPS22DF_GetOutputDataRate>
 8005594:	4603      	mov	r3, r0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d106      	bne.n	80055c2 <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80055b4:	ed97 0a00 	vldr	s0, [r7]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f961 	bl	8005880 <LPS22DF_SetOutputDataRate_When_Enabled>
 80055be:	4603      	mov	r3, r0
 80055c0:	e005      	b.n	80055ce <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80055c2:	ed97 0a00 	vldr	s0, [r7]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9e6 	bl	8005998 <LPS22DF_SetOutputDataRate_When_Disabled>
 80055cc:	4603      	mov	r3, r0
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3320      	adds	r3, #32
 80055e4:	f107 020c 	add.w	r2, r7, #12
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fe56 	bl	800629c <lps22df_pressure_raw_get>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e009      	b.n	8005610 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fb12 	bl	8005c28 <lps22df_from_lsb_to_hPa>
 8005604:	eef0 7a40 	vmov.f32	s15, s0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e013      	b.n	8005656 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f103 0220 	add.w	r2, r3, #32
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3333      	adds	r3, #51	@ 0x33
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f000 fd04 	bl	8006048 <lps22df_mode_set>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	e004      	b.n	8005656 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e030      	b.n	80056d6 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800567a:	2b00      	cmp	r3, #0
 800567c:	d126      	bne.n	80056cc <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3320      	adds	r3, #32
 8005682:	f107 020c 	add.w	r2, r7, #12
 8005686:	4611      	mov	r1, r2
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fd3b 	bl	8006104 <lps22df_mode_get>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005694:	f04f 33ff 	mov.w	r3, #4294967295
 8005698:	e01d      	b.n	80056d6 <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3333      	adds	r3, #51	@ 0x33
 800569e:	461a      	mov	r2, r3
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	8819      	ldrh	r1, [r3, #0]
 80056a6:	789b      	ldrb	r3, [r3, #2]
 80056a8:	8011      	strh	r1, [r2, #0]
 80056aa:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80056ac:	2300      	movs	r3, #0
 80056ae:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3320      	adds	r3, #32
 80056b4:	f107 020c 	add.w	r2, r7, #12
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fcc4 	bl	8006048 <lps22df_mode_set>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	e004      	b.n	80056d6 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f85e 	bl	80057ac <LPS22DF_GetOutputDataRate>
 80056f0:	4603      	mov	r3, r0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800570c:	2b01      	cmp	r3, #1
 800570e:	d106      	bne.n	800571e <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005710:	ed97 0a00 	vldr	s0, [r7]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f8b3 	bl	8005880 <LPS22DF_SetOutputDataRate_When_Enabled>
 800571a:	4603      	mov	r3, r0
 800571c:	e005      	b.n	800572a <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800571e:	ed97 0a00 	vldr	s0, [r7]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f938 	bl	8005998 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005728:	4603      	mov	r3, r0
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3320      	adds	r3, #32
 8005740:	f107 020e 	add.w	r2, r7, #14
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fdd1 	bl	80062ee <lps22df_temperature_raw_get>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	e00a      	b.n	800576e <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 8005758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fa7b 	bl	8005c58 <lps22df_from_lsb_to_celsius>
 8005762:	eef0 7a40 	vmov.f32	s15, s0
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
 8005782:	4613      	mov	r3, r2
 8005784:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f103 0020 	add.w	r0, r3, #32
 800578c:	1cba      	adds	r2, r7, #2
 800578e:	78f9      	ldrb	r1, [r7, #3]
 8005790:	2301      	movs	r3, #1
 8005792:	f000 fa15 	bl	8005bc0 <lps22df_write_reg>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295
 80057a0:	e000      	b.n	80057a4 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3320      	adds	r3, #32
 80057be:	f107 0208 	add.w	r2, r7, #8
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fc9d 	bl	8006104 <lps22df_mode_get>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 80057d0:	f04f 33ff 	mov.w	r3, #4294967295
 80057d4:	e044      	b.n	8005860 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 80057d6:	7a3b      	ldrb	r3, [r7, #8]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d83c      	bhi.n	8005856 <LPS22DF_GetOutputDataRate+0xaa>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <LPS22DF_GetOutputDataRate+0x38>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005813 	.word	0x08005813
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	08005827 	.word	0x08005827
 80057f4:	0800582f 	.word	0x0800582f
 80057f8:	08005837 	.word	0x08005837
 80057fc:	0800583f 	.word	0x0800583f
 8005800:	08005847 	.word	0x08005847
 8005804:	0800584f 	.word	0x0800584f
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
      break;
 8005810:	e025      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005818:	601a      	str	r2, [r3, #0]
      break;
 800581a:	e020      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005822:	601a      	str	r2, [r3, #0]
      break;
 8005824:	e01b      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	4a0f      	ldr	r2, [pc, #60]	@ (8005868 <LPS22DF_GetOutputDataRate+0xbc>)
 800582a:	601a      	str	r2, [r3, #0]
      break;
 800582c:	e017      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	4a0e      	ldr	r2, [pc, #56]	@ (800586c <LPS22DF_GetOutputDataRate+0xc0>)
 8005832:	601a      	str	r2, [r3, #0]
      break;
 8005834:	e013      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	4a0d      	ldr	r2, [pc, #52]	@ (8005870 <LPS22DF_GetOutputDataRate+0xc4>)
 800583a:	601a      	str	r2, [r3, #0]
      break;
 800583c:	e00f      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	4a0c      	ldr	r2, [pc, #48]	@ (8005874 <LPS22DF_GetOutputDataRate+0xc8>)
 8005842:	601a      	str	r2, [r3, #0]
      break;
 8005844:	e00b      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <LPS22DF_GetOutputDataRate+0xcc>)
 800584a:	601a      	str	r2, [r3, #0]
      break;
 800584c:	e007      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <LPS22DF_GetOutputDataRate+0xd0>)
 8005852:	601a      	str	r2, [r3, #0]
      break;
 8005854:	e003      	b.n	800585e <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	60fb      	str	r3, [r7, #12]
      break;
 800585c:	bf00      	nop
  }

  return ret;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	41200000 	.word	0x41200000
 800586c:	41c80000 	.word	0x41c80000
 8005870:	42480000 	.word	0x42480000
 8005874:	42960000 	.word	0x42960000
 8005878:	42c80000 	.word	0x42c80000
 800587c:	43480000 	.word	0x43480000

08005880 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3320      	adds	r3, #32
 8005890:	f107 020c 	add.w	r2, r7, #12
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fc34 	bl	8006104 <lps22df_mode_get>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295
 80058a6:	e06c      	b.n	8005982 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 80058a8:	edd7 7a00 	vldr	s15, [r7]
 80058ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b8:	d801      	bhi.n	80058be <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e042      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058be:	edd7 7a00 	vldr	s15, [r7]
 80058c2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80058c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	d801      	bhi.n	80058d4 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e037      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058d4:	edd7 7a00 	vldr	s15, [r7]
 80058d8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80058dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	d801      	bhi.n	80058ea <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 80058e6:	2303      	movs	r3, #3
 80058e8:	e02c      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058ea:	edd7 7a00 	vldr	s15, [r7]
 80058ee:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80058f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fa:	d801      	bhi.n	8005900 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 80058fc:	2304      	movs	r3, #4
 80058fe:	e021      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005900:	edd7 7a00 	vldr	s15, [r7]
 8005904:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800598c <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8005908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005910:	d801      	bhi.n	8005916 <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8005912:	2305      	movs	r3, #5
 8005914:	e016      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005916:	edd7 7a00 	vldr	s15, [r7]
 800591a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005990 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 800591e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	d801      	bhi.n	800592c <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8005928:	2306      	movs	r3, #6
 800592a:	e00b      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800592c:	edd7 7a00 	vldr	s15, [r7]
 8005930:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005994 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8005934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	d801      	bhi.n	8005942 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 800593e:	2307      	movs	r3, #7
 8005940:	e000      	b.n	8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005942:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005944:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3320      	adds	r3, #32
 800594a:	f107 020c 	add.w	r2, r7, #12
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fb79 	bl	8006048 <lps22df_mode_set>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 800595c:	f04f 33ff 	mov.w	r3, #4294967295
 8005960:	e00f      	b.n	8005982 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f103 0220 	add.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3333      	adds	r3, #51	@ 0x33
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 fbc8 	bl	8006104 <lps22df_mode_get>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	e000      	b.n	8005982 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	42480000 	.word	0x42480000
 8005990:	42960000 	.word	0x42960000
 8005994:	42c80000 	.word	0x42c80000

08005998 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 80059a4:	edd7 7a00 	vldr	s15, [r7]
 80059a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b4:	d801      	bhi.n	80059ba <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e042      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059ba:	edd7 7a00 	vldr	s15, [r7]
 80059be:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80059c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ca:	d801      	bhi.n	80059d0 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e037      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059d0:	edd7 7a00 	vldr	s15, [r7]
 80059d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80059d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e0:	d801      	bhi.n	80059e6 <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 80059e2:	2303      	movs	r3, #3
 80059e4:	e02c      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059e6:	edd7 7a00 	vldr	s15, [r7]
 80059ea:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80059ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f6:	d801      	bhi.n	80059fc <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 80059f8:	2304      	movs	r3, #4
 80059fa:	e021      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059fc:	edd7 7a00 	vldr	s15, [r7]
 8005a00:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005a54 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8005a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	d801      	bhi.n	8005a12 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8005a0e:	2305      	movs	r3, #5
 8005a10:	e016      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a12:	edd7 7a00 	vldr	s15, [r7]
 8005a16:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005a58 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8005a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a22:	d801      	bhi.n	8005a28 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8005a24:	2306      	movs	r3, #6
 8005a26:	e00b      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a28:	edd7 7a00 	vldr	s15, [r7]
 8005a2c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005a5c <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a38:	d801      	bhi.n	8005a3e <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8005a3a:	2307      	movs	r3, #7
 8005a3c:	e000      	b.n	8005a40 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a3e:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	42480000 	.word	0x42480000
 8005a58:	42960000 	.word	0x42960000
 8005a5c:	42c80000 	.word	0x42c80000

08005a60 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3320      	adds	r3, #32
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f983 	bl	8005d7a <lps22df_init_set>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	e047      	b.n	8005b10 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d102      	bne.n	8005a8e <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	723b      	strb	r3, [r7, #8]
 8005a8c:	e008      	b.n	8005aa0 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d102      	bne.n	8005a9c <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8005a96:	2302      	movs	r3, #2
 8005a98:	723b      	strb	r3, [r7, #8]
 8005a9a:	e001      	b.n	8005aa0 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3320      	adds	r3, #32
 8005aa8:	f107 0208 	add.w	r2, r7, #8
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f901 	bl	8005cb6 <lps22df_bus_mode_set>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295
 8005abe:	e027      	b.n	8005b10 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3320      	adds	r3, #32
 8005ad0:	f107 020c 	add.w	r2, r7, #12
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fab6 	bl	8006048 <lps22df_mode_set>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	e013      	b.n	8005b10 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f103 0220 	add.w	r2, r3, #32
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3333      	adds	r3, #51	@ 0x33
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f000 fb05 	bl	8006104 <lps22df_mode_get>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	e004      	b.n	8005b10 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	461a      	mov	r2, r3
 8005b24:	460b      	mov	r3, r1
 8005b26:	72fb      	strb	r3, [r7, #11]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	695c      	ldr	r4, [r3, #20]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	7b1b      	ldrb	r3, [r3, #12]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	b299      	uxth	r1, r3
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	47a0      	blx	r4
 8005b44:	4603      	mov	r3, r0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}

08005b4e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005b4e:	b590      	push	{r4, r7, lr}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	72fb      	strb	r3, [r7, #11]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	691c      	ldr	r4, [r3, #16]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	7b1b      	ldrb	r3, [r3, #12]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	b299      	uxth	r1, r3
 8005b74:	893b      	ldrh	r3, [r7, #8]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	47a0      	blx	r4
 8005b7a:	4603      	mov	r3, r0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd90      	pop	{r4, r7, pc}

08005b84 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	460b      	mov	r3, r1
 8005b92:	72fb      	strb	r3, [r7, #11]
 8005b94:	4613      	mov	r3, r2
 8005b96:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <lps22df_read_reg+0x20>
  {
    return -1;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	e009      	b.n	8005bb8 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685c      	ldr	r4, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68d8      	ldr	r0, [r3, #12]
 8005bac:	893b      	ldrh	r3, [r7, #8]
 8005bae:	7af9      	ldrb	r1, [r7, #11]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	47a0      	blx	r4
 8005bb4:	6178      	str	r0, [r7, #20]

  return ret;
 8005bb6:	697b      	ldr	r3, [r7, #20]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd90      	pop	{r4, r7, pc}

08005bc0 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	460b      	mov	r3, r1
 8005bce:	72fb      	strb	r3, [r7, #11]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <lps22df_write_reg+0x20>
  {
    return -1;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	e009      	b.n	8005bf4 <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681c      	ldr	r4, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68d8      	ldr	r0, [r3, #12]
 8005be8:	893b      	ldrh	r3, [r7, #8]
 8005bea:	7af9      	ldrb	r1, [r7, #11]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	47a0      	blx	r4
 8005bf0:	6178      	str	r0, [r7, #20]

  return ret;
 8005bf2:	697b      	ldr	r3, [r7, #20]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd90      	pop	{r4, r7, pc}

08005bfc <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d006      	beq.n	8005c1a <bytecpy+0x1e>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <bytecpy+0x1e>
  {
    *target = *source;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	701a      	strb	r2, [r3, #0]
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c3a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c54 <lps22df_from_lsb_to_hPa+0x2c>
 8005c3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c42:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c46:	eeb0 0a67 	vmov.f32	s0, s15
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	49800000 	.word	0x49800000

08005c58 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8005c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c88 <lps22df_from_lsb_to_celsius+0x30>
 8005c72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c76:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	42c80000 	.word	0x42c80000

08005c8c <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8005c96:	f107 020b 	add.w	r2, r7, #11
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	210f      	movs	r1, #15
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff70 	bl	8005b84 <lps22df_read_reg>
 8005ca4:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8005ca6:	7afa      	ldrb	r2, [r7, #11]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	701a      	strb	r2, [r3, #0]

  return ret;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005cc0:	f107 020c 	add.w	r2, r7, #12
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	210e      	movs	r1, #14
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff5b 	bl	8005b84 <lps22df_read_reg>
 8005cce:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d124      	bne.n	8005d20 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	7b3b      	ldrb	r3, [r7, #12]
 8005ce4:	f362 1386 	bfi	r3, r2, #6, #1
 8005ce8:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	7b3b      	ldrb	r3, [r7, #12]
 8005cf8:	f362 13c7 	bfi	r3, r2, #7, #1
 8005cfc:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	7b3b      	ldrb	r3, [r7, #12]
 8005d0a:	f362 1345 	bfi	r3, r2, #5, #1
 8005d0e:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005d10:	f107 020c 	add.w	r2, r7, #12
 8005d14:	2301      	movs	r3, #1
 8005d16:	210e      	movs	r1, #14
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff51 	bl	8005bc0 <lps22df_write_reg>
 8005d1e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005d26:	f107 0210 	add.w	r2, r7, #16
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	2119      	movs	r1, #25
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff28 	bl	8005b84 <lps22df_read_reg>
 8005d34:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d119      	bne.n	8005d70 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	7c3b      	ldrb	r3, [r7, #16]
 8005d48:	f362 1345 	bfi	r3, r2, #5, #1
 8005d4c:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	789b      	ldrb	r3, [r3, #2]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	7c3b      	ldrb	r3, [r7, #16]
 8005d5a:	f362 0301 	bfi	r3, r2, #0, #2
 8005d5e:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005d60:	f107 0210 	add.w	r2, r7, #16
 8005d64:	2301      	movs	r3, #1
 8005d66:	2119      	movs	r1, #25
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ff29 	bl	8005bc0 <lps22df_write_reg>
 8005d6e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 8005d70:	697b      	ldr	r3, [r7, #20]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b08a      	sub	sp, #40	@ 0x28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005d8c:	f107 020c 	add.w	r2, r7, #12
 8005d90:	2302      	movs	r3, #2
 8005d92:	2111      	movs	r1, #17
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fef5 	bl	8005b84 <lps22df_read_reg>
 8005d9a:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f040 80c8 	bne.w	8005f34 <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8005da4:	f107 020c 	add.w	r2, r7, #12
 8005da8:	f107 031c 	add.w	r3, r7, #28
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff ff24 	bl	8005bfc <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	f107 0318 	add.w	r3, r7, #24
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff ff1b 	bl	8005bfc <bytecpy>

    switch (val)
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d043      	beq.n	8005e54 <lps22df_init_set+0xda>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	f300 809d 	bgt.w	8005f0c <lps22df_init_set+0x192>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d078      	beq.n	8005ec8 <lps22df_init_set+0x14e>
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	f040 8098 	bne.w	8005f0c <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8005ddc:	7f3b      	ldrb	r3, [r7, #28]
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005de4:	f107 021c 	add.w	r2, r7, #28
 8005de8:	2301      	movs	r3, #1
 8005dea:	2111      	movs	r1, #17
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff fee7 	bl	8005bc0 <lps22df_write_reg>
 8005df2:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8095 	bne.w	8005f26 <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8005dfc:	f107 0214 	add.w	r2, r7, #20
 8005e00:	2301      	movs	r3, #1
 8005e02:	2124      	movs	r1, #36	@ 0x24
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff febd 	bl	8005b84 <lps22df_read_reg>
 8005e0a:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d115      	bne.n	8005e3e <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8005e12:	7d3b      	ldrb	r3, [r7, #20]
 8005e14:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d011      	beq.n	8005e42 <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	200a      	movs	r0, #10
 8005e2c:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d9df      	bls.n	8005dfc <lps22df_init_set+0x82>
 8005e3c:	e002      	b.n	8005e44 <lps22df_init_set+0xca>
            break;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <lps22df_init_set+0xca>
            break;
 8005e42:	bf00      	nop

        if (cnt >= 5U)
 8005e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d96e      	bls.n	8005f2a <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	623b      	str	r3, [r7, #32]
        }

        break;
 8005e52:	e06a      	b.n	8005f2a <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005e54:	7f3b      	ldrb	r3, [r7, #28]
 8005e56:	f043 0304 	orr.w	r3, r3, #4
 8005e5a:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005e5c:	f107 021c 	add.w	r2, r7, #28
 8005e60:	2301      	movs	r3, #1
 8005e62:	2111      	movs	r1, #17
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff feab 	bl	8005bc0 <lps22df_write_reg>
 8005e6a:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d15d      	bne.n	8005f2e <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8005e72:	f107 0310 	add.w	r3, r7, #16
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f860 	bl	8005f3e <lps22df_status_get>
 8005e7e:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d115      	bne.n	8005eb2 <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 8005e86:	7c3b      	ldrb	r3, [r7, #16]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d011      	beq.n	8005eb6 <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d9e0      	bls.n	8005e72 <lps22df_init_set+0xf8>
 8005eb0:	e002      	b.n	8005eb8 <lps22df_init_set+0x13e>
            break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <lps22df_init_set+0x13e>
            break;
 8005eb6:	bf00      	nop

        if (cnt >= 5U)
 8005eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d938      	bls.n	8005f32 <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	623b      	str	r3, [r7, #32]
        }

        break;
 8005ec6:	e034      	b.n	8005f32 <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8005ec8:	7f3b      	ldrb	r3, [r7, #28]
 8005eca:	f043 0308 	orr.w	r3, r3, #8
 8005ece:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8005ed0:	7e3b      	ldrb	r3, [r7, #24]
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8005ed8:	f107 021c 	add.w	r2, r7, #28
 8005edc:	f107 030c 	add.w	r3, r7, #12
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fe8a 	bl	8005bfc <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8005ee8:	f107 0218 	add.w	r2, r7, #24
 8005eec:	f107 030c 	add.w	r3, r7, #12
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fe81 	bl	8005bfc <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005efa:	f107 020c 	add.w	r2, r7, #12
 8005efe:	2302      	movs	r3, #2
 8005f00:	2111      	movs	r1, #17
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fe5c 	bl	8005bc0 <lps22df_write_reg>
 8005f08:	6238      	str	r0, [r7, #32]
        break;
 8005f0a:	e013      	b.n	8005f34 <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005f0c:	7f3b      	ldrb	r3, [r7, #28]
 8005f0e:	f043 0304 	orr.w	r3, r3, #4
 8005f12:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005f14:	f107 021c 	add.w	r2, r7, #28
 8005f18:	2301      	movs	r3, #1
 8005f1a:	2111      	movs	r1, #17
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fe4f 	bl	8005bc0 <lps22df_write_reg>
 8005f22:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8005f24:	e006      	b.n	8005f34 <lps22df_init_set+0x1ba>
          break;
 8005f26:	bf00      	nop
 8005f28:	e004      	b.n	8005f34 <lps22df_init_set+0x1ba>
        break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <lps22df_init_set+0x1ba>
          break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <lps22df_init_set+0x1ba>
        break;
 8005f32:	bf00      	nop
    }
  }

  return ret;
 8005f34:	6a3b      	ldr	r3, [r7, #32]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	@ 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b088      	sub	sp, #32
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8005f48:	f107 0210 	add.w	r2, r7, #16
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	2111      	movs	r1, #17
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fe17 	bl	8005b84 <lps22df_read_reg>
 8005f56:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8005f5e:	f107 0214 	add.w	r2, r7, #20
 8005f62:	2301      	movs	r3, #1
 8005f64:	2124      	movs	r1, #36	@ 0x24
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fe0c 	bl	8005b84 <lps22df_read_reg>
 8005f6c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8005f74:	f107 020c 	add.w	r2, r7, #12
 8005f78:	2301      	movs	r3, #1
 8005f7a:	2127      	movs	r1, #39	@ 0x27
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fe01 	bl	8005b84 <lps22df_read_reg>
 8005f82:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 8005f8a:	f107 0218 	add.w	r2, r7, #24
 8005f8e:	2301      	movs	r3, #1
 8005f90:	210b      	movs	r1, #11
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fdf6 	bl	8005b84 <lps22df_read_reg>
 8005f98:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 8005f9a:	7c3b      	ldrb	r3, [r7, #16]
 8005f9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fa0:	b2d9      	uxtb	r1, r3
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	7813      	ldrb	r3, [r2, #0]
 8005fa6:	f361 0300 	bfi	r3, r1, #0, #1
 8005faa:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 8005fac:	7d3b      	ldrb	r3, [r7, #20]
 8005fae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fb2:	b2d9      	uxtb	r1, r3
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	7813      	ldrb	r3, [r2, #0]
 8005fb8:	f361 0341 	bfi	r3, r1, #1, #1
 8005fbc:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 8005fbe:	7b3b      	ldrb	r3, [r7, #12]
 8005fc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fc4:	b2d9      	uxtb	r1, r3
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	7813      	ldrb	r3, [r2, #0]
 8005fca:	f361 0382 	bfi	r3, r1, #2, #1
 8005fce:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 8005fd0:	7b3b      	ldrb	r3, [r7, #12]
 8005fd2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fd6:	b2d9      	uxtb	r1, r3
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	7813      	ldrb	r3, [r2, #0]
 8005fdc:	f361 03c3 	bfi	r3, r1, #3, #1
 8005fe0:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 8005fe2:	7b3b      	ldrb	r3, [r7, #12]
 8005fe4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fe8:	b2d9      	uxtb	r1, r3
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	7813      	ldrb	r3, [r2, #0]
 8005fee:	f361 1304 	bfi	r3, r1, #4, #1
 8005ff2:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 8005ff4:	7b3b      	ldrb	r3, [r7, #12]
 8005ff6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ffa:	b2d9      	uxtb	r1, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	7813      	ldrb	r3, [r2, #0]
 8006000:	f361 1345 	bfi	r3, r1, #5, #1
 8006004:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 8006006:	7c3b      	ldrb	r3, [r7, #16]
 8006008:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800600c:	b2db      	uxtb	r3, r3
 800600e:	43db      	mvns	r3, r3
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	b2d9      	uxtb	r1, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	7813      	ldrb	r3, [r2, #0]
 800601c:	f361 1386 	bfi	r3, r1, #6, #1
 8006020:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 8006022:	7e3b      	ldrb	r3, [r7, #24]
 8006024:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	43db      	mvns	r3, r3
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	b2d9      	uxtb	r1, r3
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	7813      	ldrb	r3, [r2, #0]
 8006038:	f361 13c7 	bfi	r3, r1, #7, #1
 800603c:	7013      	strb	r3, [r2, #0]

  return ret;
 800603e:	69fb      	ldr	r3, [r7, #28]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006052:	f107 0208 	add.w	r2, r7, #8
 8006056:	2302      	movs	r3, #2
 8006058:	2110      	movs	r1, #16
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fd92 	bl	8005b84 <lps22df_read_reg>
 8006060:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d148      	bne.n	80060fa <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8006068:	f107 0208 	add.w	r2, r7, #8
 800606c:	f107 0310 	add.w	r3, r7, #16
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fdc2 	bl	8005bfc <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fdb9 	bl	8005bfc <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	b2da      	uxtb	r2, r3
 8006094:	7c3b      	ldrb	r3, [r7, #16]
 8006096:	f362 03c6 	bfi	r3, r2, #3, #4
 800609a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	7c3b      	ldrb	r3, [r7, #16]
 80060a8:	f362 0302 	bfi	r3, r2, #0, #3
 80060ac:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	789b      	ldrb	r3, [r3, #2]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	7b3b      	ldrb	r3, [r7, #12]
 80060ba:	f362 1304 	bfi	r3, r2, #4, #1
 80060be:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 80060c0:	7b3b      	ldrb	r3, [r7, #12]
 80060c2:	f023 0320 	bic.w	r3, r3, #32
 80060c6:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 80060c8:	f107 0210 	add.w	r2, r7, #16
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	4611      	mov	r1, r2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fd92 	bl	8005bfc <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 80060d8:	f107 020c 	add.w	r2, r7, #12
 80060dc:	f107 0308 	add.w	r3, r7, #8
 80060e0:	3301      	adds	r3, #1
 80060e2:	4611      	mov	r1, r2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fd89 	bl	8005bfc <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 80060ea:	f107 0208 	add.w	r2, r7, #8
 80060ee:	2302      	movs	r3, #2
 80060f0:	2110      	movs	r1, #16
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fd64 	bl	8005bc0 <lps22df_write_reg>
 80060f8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80060fa:	697b      	ldr	r3, [r7, #20]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800610e:	f107 0208 	add.w	r2, r7, #8
 8006112:	2302      	movs	r3, #2
 8006114:	2110      	movs	r1, #16
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fd34 	bl	8005b84 <lps22df_read_reg>
 800611c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f040 80b6 	bne.w	8006292 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8006126:	f107 0208 	add.w	r2, r7, #8
 800612a:	f107 0310 	add.w	r3, r7, #16
 800612e:	4611      	mov	r1, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fd63 	bl	8005bfc <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	f107 030c 	add.w	r3, r7, #12
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fd5a 	bl	8005bfc <bytecpy>

    switch (ctrl_reg1.odr)
 8006148:	7c3b      	ldrb	r3, [r7, #16]
 800614a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b08      	cmp	r3, #8
 8006152:	d839      	bhi.n	80061c8 <lps22df_mode_get+0xc4>
 8006154:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <lps22df_mode_get+0x58>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	08006199 	.word	0x08006199
 800616c:	080061a1 	.word	0x080061a1
 8006170:	080061a9 	.word	0x080061a9
 8006174:	080061b1 	.word	0x080061b1
 8006178:	080061b9 	.word	0x080061b9
 800617c:	080061c1 	.word	0x080061c1
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
        break;
 8006186:	e023      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]
        break;
 800618e:	e01f      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2202      	movs	r2, #2
 8006194:	701a      	strb	r2, [r3, #0]
        break;
 8006196:	e01b      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2203      	movs	r2, #3
 800619c:	701a      	strb	r2, [r3, #0]
        break;
 800619e:	e017      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2204      	movs	r2, #4
 80061a4:	701a      	strb	r2, [r3, #0]
        break;
 80061a6:	e013      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2205      	movs	r2, #5
 80061ac:	701a      	strb	r2, [r3, #0]
        break;
 80061ae:	e00f      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2206      	movs	r2, #6
 80061b4:	701a      	strb	r2, [r3, #0]
        break;
 80061b6:	e00b      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2207      	movs	r2, #7
 80061bc:	701a      	strb	r2, [r3, #0]
        break;
 80061be:	e007      	b.n	80061d0 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2208      	movs	r2, #8
 80061c4:	701a      	strb	r2, [r3, #0]
        break;
 80061c6:	e003      	b.n	80061d0 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
        break;
 80061ce:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 80061d0:	7c3b      	ldrb	r3, [r7, #16]
 80061d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b07      	cmp	r3, #7
 80061da:	d833      	bhi.n	8006244 <lps22df_mode_get+0x140>
 80061dc:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <lps22df_mode_get+0xe0>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	08006205 	.word	0x08006205
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	08006225 	.word	0x08006225
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	08006235 	.word	0x08006235
 8006200:	0800623d 	.word	0x0800623d
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	705a      	strb	r2, [r3, #1]
        break;
 800620a:	e01f      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	705a      	strb	r2, [r3, #1]
        break;
 8006212:	e01b      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2202      	movs	r2, #2
 8006218:	705a      	strb	r2, [r3, #1]
        break;
 800621a:	e017      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2203      	movs	r2, #3
 8006220:	705a      	strb	r2, [r3, #1]
        break;
 8006222:	e013      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2204      	movs	r2, #4
 8006228:	705a      	strb	r2, [r3, #1]
        break;
 800622a:	e00f      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2205      	movs	r2, #5
 8006230:	705a      	strb	r2, [r3, #1]
        break;
 8006232:	e00b      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2206      	movs	r2, #6
 8006238:	705a      	strb	r2, [r3, #1]
        break;
 800623a:	e007      	b.n	800624c <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2207      	movs	r2, #7
 8006240:	705a      	strb	r2, [r3, #1]
        break;
 8006242:	e003      	b.n	800624c <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	705a      	strb	r2, [r3, #1]
        break;
 800624a:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 800624c:	7b3b      	ldrb	r3, [r7, #12]
 800624e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	7b3a      	ldrb	r2, [r7, #12]
 8006258:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	4313      	orrs	r3, r2
 8006260:	2b03      	cmp	r3, #3
 8006262:	d00e      	beq.n	8006282 <lps22df_mode_get+0x17e>
 8006264:	2b03      	cmp	r3, #3
 8006266:	dc10      	bgt.n	800628a <lps22df_mode_get+0x186>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <lps22df_mode_get+0x16e>
 800626c:	2b01      	cmp	r3, #1
 800626e:	d004      	beq.n	800627a <lps22df_mode_get+0x176>
 8006270:	e00b      	b.n	800628a <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	709a      	strb	r2, [r3, #2]
        break;
 8006278:	e00b      	b.n	8006292 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2201      	movs	r2, #1
 800627e:	709a      	strb	r2, [r3, #2]
        break;
 8006280:	e007      	b.n	8006292 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2203      	movs	r2, #3
 8006286:	709a      	strb	r2, [r3, #2]
        break;
 8006288:	e003      	b.n	8006292 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	709a      	strb	r2, [r3, #2]
        break;
 8006290:	bf00      	nop
    }
  }
  return ret;
 8006292:	697b      	ldr	r3, [r7, #20]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 80062a6:	f107 0208 	add.w	r2, r7, #8
 80062aa:	2303      	movs	r3, #3
 80062ac:	2128      	movs	r1, #40	@ 0x28
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fc68 	bl	8005b84 <lps22df_read_reg>
 80062b4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80062b6:	7abb      	ldrb	r3, [r7, #10]
 80062b8:	461a      	mov	r2, r3
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	7a7a      	ldrb	r2, [r7, #9]
 80062c6:	441a      	add	r2, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	7a3a      	ldrb	r2, [r7, #8]
 80062d4:	441a      	add	r2, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	021a      	lsls	r2, r3, #8
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	601a      	str	r2, [r3, #0]

  return ret;
 80062e4:	68fb      	ldr	r3, [r7, #12]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 80062f8:	f107 0208 	add.w	r2, r7, #8
 80062fc:	2302      	movs	r3, #2
 80062fe:	212b      	movs	r1, #43	@ 0x2b
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff fc3f 	bl	8005b84 <lps22df_read_reg>
 8006306:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8006308:	7a7b      	ldrb	r3, [r7, #9]
 800630a:	b21a      	sxth	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006316:	b29b      	uxth	r3, r3
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	b29b      	uxth	r3, r3
 800631c:	7a3a      	ldrb	r2, [r7, #8]
 800631e:	4413      	add	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	b21a      	sxth	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	801a      	strh	r2, [r3, #0]

  return ret;
 8006328:	68fb      	ldr	r3, [r7, #12]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e04d      	b.n	80063ec <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	7b1a      	ldrb	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1b      	ldr	r2, [pc, #108]	@ (80063f8 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 800638c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8006392:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	e020      	b.n	80063ec <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4798      	blx	r3
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e016      	b.n	80063ec <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d112      	bne.n	80063ec <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10d      	bne.n	80063ec <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80063d0:	230c      	movs	r3, #12
 80063d2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	461a      	mov	r2, r3
 80063d8:	2112      	movs	r1, #18
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fdbe 	bl	8006f5c <LSM6DSO16IS_Write_Reg>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80063ec:	68fb      	ldr	r3, [r7, #12]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	08007425 	.word	0x08007425
 80063fc:	0800745b 	.word	0x0800745b

08006400 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800640c:	2100      	movs	r1, #0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fdc1 	bl	8006f96 <LSM6DSO16IS_Set_Mem_Bank>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3320      	adds	r3, #32
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fbdc 	bl	8007be4 <lsm6dso16is_auto_increment_set>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3320      	adds	r3, #32
 800643c:	2101      	movs	r1, #1
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fbf6 	bl	8007c30 <lsm6dso16is_block_data_update_set>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2204      	movs	r2, #4
 8006454:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3320      	adds	r3, #32
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f001 f910 	bl	8007684 <lsm6dso16is_xl_data_rate_set>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3320      	adds	r3, #32
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f8a6 	bl	80075c8 <lsm6dso16is_xl_full_scale_set>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2204      	movs	r2, #4
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3320      	adds	r3, #32
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f001 faa8 	bl	80079ec <lsm6dso16is_gy_data_rate_set>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
 80064a6:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3320      	adds	r3, #32
 80064ac:	2103      	movs	r1, #3
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fa10 	bl	80078d4 <lsm6dso16is_gy_full_scale_set>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80064ce:	68fb      	ldr	r3, [r7, #12]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f890 	bl	800660a <LSM6DSO16IS_ACC_Disable>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fad0 	bl	8006a9c <LSM6DSO16IS_GYRO_Disable>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006502:	f04f 33ff 	mov.w	r3, #4294967295
 8006506:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3320      	adds	r3, #32
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f808 	bl	800755a <lsm6dso16is_device_id_get>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8006550:	f04f 33ff 	mov.w	r3, #4294967295
 8006554:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2201      	movs	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2201      	movs	r2, #1
 8006574:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2200      	movs	r2, #0
 800657a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2200      	movs	r2, #0
 8006580:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006588:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2210      	movs	r2, #16
 800658e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	4a07      	ldr	r2, [pc, #28]	@ (80065b8 <LSM6DSO16IS_GetCapabilities+0x58>)
 800659a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4a06      	ldr	r2, [pc, #24]	@ (80065b8 <LSM6DSO16IS_GetCapabilities+0x58>)
 80065a0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	45505000 	.word	0x45505000

080065bc <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d102      	bne.n	80065d8 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e013      	b.n	8006600 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f103 0220 	add.w	r2, r3, #32
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f001 f84c 	bl	8007684 <lsm6dso16is_xl_data_rate_set>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e01e      	b.n	8006664 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f103 0220 	add.w	r2, r3, #32
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3333      	adds	r3, #51	@ 0x33
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f001 f866 	bl	8007704 <lsm6dso16is_xl_data_rate_get>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 800663e:	f04f 33ff 	mov.w	r3, #4294967295
 8006642:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3320      	adds	r3, #32
 8006648:	2100      	movs	r1, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f81a 	bl	8007684 <lsm6dso16is_xl_data_rate_set>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006664:	68fb      	ldr	r3, [r7, #12]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3320      	adds	r3, #32
 8006682:	f107 020b 	add.w	r2, r7, #11
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f000 ffc3 	bl	8007614 <lsm6dso16is_xl_full_scale_get>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d81b      	bhi.n	80066d8 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 80066a0:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066c9 	.word	0x080066c9
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	4a0c      	ldr	r2, [pc, #48]	@ (80066ec <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 80066bc:	601a      	str	r2, [r3, #0]
      break;
 80066be:	e00f      	b.n	80066e0 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	4a0b      	ldr	r2, [pc, #44]	@ (80066f0 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 80066c4:	601a      	str	r2, [r3, #0]
      break;
 80066c6:	e00b      	b.n	80066e0 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	4a0a      	ldr	r2, [pc, #40]	@ (80066f4 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 80066cc:	601a      	str	r2, [r3, #0]
      break;
 80066ce:	e007      	b.n	80066e0 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	4a09      	ldr	r2, [pc, #36]	@ (80066f8 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 80066d4:	601a      	str	r2, [r3, #0]
      break;
 80066d6:	e003      	b.n	80066e0 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
 80066dc:	60fb      	str	r3, [r7, #12]
      break;
 80066de:	bf00      	nop
  }

  return ret;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	3d79db23 	.word	0x3d79db23
 80066f0:	3df9db23 	.word	0x3df9db23
 80066f4:	3e79db23 	.word	0x3e79db23
 80066f8:	3ef9db23 	.word	0x3ef9db23

080066fc <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3320      	adds	r3, #32
 800670e:	f107 020b 	add.w	r2, r7, #11
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fff5 	bl	8007704 <lsm6dso16is_xl_data_rate_get>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006720:	f04f 33ff 	mov.w	r3, #4294967295
 8006724:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b1b      	cmp	r3, #27
 800672a:	d86c      	bhi.n	8006806 <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	080067a5 	.word	0x080067a5
 8006738:	080067b7 	.word	0x080067b7
 800673c:	080067bf 	.word	0x080067bf
 8006740:	080067c7 	.word	0x080067c7
 8006744:	080067cf 	.word	0x080067cf
 8006748:	080067d7 	.word	0x080067d7
 800674c:	080067df 	.word	0x080067df
 8006750:	080067e7 	.word	0x080067e7
 8006754:	080067ef 	.word	0x080067ef
 8006758:	080067f7 	.word	0x080067f7
 800675c:	080067ff 	.word	0x080067ff
 8006760:	08006807 	.word	0x08006807
 8006764:	08006807 	.word	0x08006807
 8006768:	08006807 	.word	0x08006807
 800676c:	08006807 	.word	0x08006807
 8006770:	08006807 	.word	0x08006807
 8006774:	08006807 	.word	0x08006807
 8006778:	080067b7 	.word	0x080067b7
 800677c:	080067bf 	.word	0x080067bf
 8006780:	080067c7 	.word	0x080067c7
 8006784:	080067cf 	.word	0x080067cf
 8006788:	080067d7 	.word	0x080067d7
 800678c:	080067df 	.word	0x080067df
 8006790:	080067e7 	.word	0x080067e7
 8006794:	080067ef 	.word	0x080067ef
 8006798:	080067f7 	.word	0x080067f7
 800679c:	080067ff 	.word	0x080067ff
 80067a0:	080067af 	.word	0x080067af
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
      break;
 80067ac:	e02f      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 80067b2:	601a      	str	r2, [r3, #0]
      break;
 80067b4:	e02b      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	4a18      	ldr	r2, [pc, #96]	@ (800681c <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 80067ba:	601a      	str	r2, [r3, #0]
      break;
 80067bc:	e027      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	4a17      	ldr	r2, [pc, #92]	@ (8006820 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 80067c2:	601a      	str	r2, [r3, #0]
      break;
 80067c4:	e023      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	4a16      	ldr	r2, [pc, #88]	@ (8006824 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 80067ca:	601a      	str	r2, [r3, #0]
      break;
 80067cc:	e01f      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 80067d2:	601a      	str	r2, [r3, #0]
      break;
 80067d4:	e01b      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	4a14      	ldr	r2, [pc, #80]	@ (800682c <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 80067da:	601a      	str	r2, [r3, #0]
      break;
 80067dc:	e017      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	4a13      	ldr	r2, [pc, #76]	@ (8006830 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 80067e2:	601a      	str	r2, [r3, #0]
      break;
 80067e4:	e013      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	4a12      	ldr	r2, [pc, #72]	@ (8006834 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 80067ea:	601a      	str	r2, [r3, #0]
      break;
 80067ec:	e00f      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	4a11      	ldr	r2, [pc, #68]	@ (8006838 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 80067f2:	601a      	str	r2, [r3, #0]
      break;
 80067f4:	e00b      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	4a10      	ldr	r2, [pc, #64]	@ (800683c <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 80067fa:	601a      	str	r2, [r3, #0]
      break;
 80067fc:	e007      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	4a0f      	ldr	r2, [pc, #60]	@ (8006840 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8006802:	601a      	str	r2, [r3, #0]
      break;
 8006804:	e003      	b.n	800680e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	60fb      	str	r3, [r7, #12]
      break;
 800680c:	bf00      	nop
  }

  return ret;
 800680e:	68fb      	ldr	r3, [r7, #12]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	3fcccccd 	.word	0x3fcccccd
 800681c:	41480000 	.word	0x41480000
 8006820:	41d00000 	.word	0x41d00000
 8006824:	42500000 	.word	0x42500000
 8006828:	42d00000 	.word	0x42d00000
 800682c:	43500000 	.word	0x43500000
 8006830:	43d00000 	.word	0x43d00000
 8006834:	44504000 	.word	0x44504000
 8006838:	44d06000 	.word	0x44d06000
 800683c:	45505000 	.word	0x45505000
 8006840:	45d05800 	.word	0x45d05800

08006844 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006856:	2b01      	cmp	r3, #1
 8006858:	d106      	bne.n	8006868 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800685a:	ed97 0a00 	vldr	s0, [r7]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fbc0 	bl	8006fe4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	e005      	b.n	8006874 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006868:	ed97 0a00 	vldr	s0, [r7]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc47 	bl	8007100 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8006872:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006874:	68fb      	ldr	r3, [r7, #12]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3320      	adds	r3, #32
 8006892:	f107 020b 	add.w	r2, r7, #11
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f000 febb 	bl	8007614 <lsm6dso16is_xl_full_scale_get>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295
 80068a8:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d81b      	bhi.n	80068e8 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 80068b0:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068d1 	.word	0x080068d1
 80068c4:	080068d9 	.word	0x080068d9
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2202      	movs	r2, #2
 80068cc:	601a      	str	r2, [r3, #0]
      break;
 80068ce:	e00f      	b.n	80068f0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2204      	movs	r2, #4
 80068d4:	601a      	str	r2, [r3, #0]
      break;
 80068d6:	e00b      	b.n	80068f0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	601a      	str	r2, [r3, #0]
      break;
 80068de:	e007      	b.n	80068f0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2210      	movs	r2, #16
 80068e4:	601a      	str	r2, [r3, #0]
      break;
 80068e6:	e003      	b.n	80068f0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ec:	60fb      	str	r3, [r7, #12]
      break;
 80068ee:	bf00      	nop
  }

  return ret;
 80068f0:	68fb      	ldr	r3, [r7, #12]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop

080068fc <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b02      	cmp	r3, #2
 800690e:	dd0b      	ble.n	8006928 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	dd06      	ble.n	8006924 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b08      	cmp	r3, #8
 800691a:	dc01      	bgt.n	8006920 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 800691c:	2303      	movs	r3, #3
 800691e:	e004      	b.n	800692a <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006920:	2301      	movs	r3, #1
 8006922:	e002      	b.n	800692a <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006924:	2302      	movs	r3, #2
 8006926:	e000      	b.n	800692a <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006928:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 800692a:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3320      	adds	r3, #32
 8006930:	7afa      	ldrb	r2, [r7, #11]
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fe47 	bl	80075c8 <lsm6dso16is_xl_full_scale_set>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006940:	f04f 33ff 	mov.w	r3, #4294967295
 8006944:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3320      	adds	r3, #32
 8006962:	f107 020c 	add.w	r2, r7, #12
 8006966:	4611      	mov	r1, r2
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f9cf 	bl	8007d0c <lsm6dso16is_acceleration_raw_get>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006974:	f04f 33ff 	mov.w	r3, #4294967295
 8006978:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 800697a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006982:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 800698a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	809a      	strh	r2, [r3, #4]

  return ret;
 8006992:	697b      	ldr	r3, [r7, #20]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3320      	adds	r3, #32
 80069b4:	f107 020c 	add.w	r2, r7, #12
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f9a6 	bl	8007d0c <lsm6dso16is_acceleration_raw_get>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80069c6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ca:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fe4c 	bl	8006670 <LSM6DSO16IS_ACC_GetSensitivity>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 80069e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80069f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069fc:	ee17 2a90 	vmov	r2, s15
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a08:	ee07 3a90 	vmov	s15, r3
 8006a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a10:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a1c:	ee17 2a90 	vmov	r2, s15
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006a24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a3c:	ee17 2a90 	vmov	r2, s15
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	609a      	str	r2, [r3, #8]

  return ret;
 8006a44:	697b      	ldr	r3, [r7, #20]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d102      	bne.n	8006a6a <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e013      	b.n	8006a92 <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 0220 	add.w	r2, r3, #32
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f000 ffb7 	bl	80079ec <lsm6dso16is_gy_data_rate_set>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	e01e      	b.n	8006af6 <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f103 0220 	add.w	r2, r3, #32
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3334      	adds	r3, #52	@ 0x34
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f000 ffd1 	bl	8007a6c <lsm6dso16is_gy_data_rate_get>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad4:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3320      	adds	r3, #32
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ff85 	bl	80079ec <lsm6dso16is_gy_data_rate_set>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aec:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3320      	adds	r3, #32
 8006b12:	f107 020b 	add.w	r2, r7, #11
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 ff0b 	bl	8007934 <lsm6dso16is_gy_full_scale_get>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d839      	bhi.n	8006ba4 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006b30:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b85 	.word	0x08006b85
 8006b3c:	08006b8d 	.word	0x08006b8d
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006ba5 	.word	0x08006ba5
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006ba5 	.word	0x08006ba5
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006ba5 	.word	0x08006ba5
 8006b6c:	08006ba5 	.word	0x08006ba5
 8006b70:	08006ba5 	.word	0x08006ba5
 8006b74:	08006ba5 	.word	0x08006ba5
 8006b78:	08006b7d 	.word	0x08006b7d
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb8 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8006b80:	601a      	str	r2, [r3, #0]
      break;
 8006b82:	e013      	b.n	8006bac <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	4a0d      	ldr	r2, [pc, #52]	@ (8006bbc <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8006b88:	601a      	str	r2, [r3, #0]
      break;
 8006b8a:	e00f      	b.n	8006bac <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006bc0 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8006b90:	601a      	str	r2, [r3, #0]
      break;
 8006b92:	e00b      	b.n	8006bac <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	4a0b      	ldr	r2, [pc, #44]	@ (8006bc4 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8006b98:	601a      	str	r2, [r3, #0]
      break;
 8006b9a:	e007      	b.n	8006bac <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc8 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8006ba0:	601a      	str	r2, [r3, #0]
      break;
 8006ba2:	e003      	b.n	8006bac <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba8:	60fb      	str	r3, [r7, #12]
      break;
 8006baa:	bf00      	nop
  }

  return ret;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	408c0000 	.word	0x408c0000
 8006bbc:	410c0000 	.word	0x410c0000
 8006bc0:	418c0000 	.word	0x418c0000
 8006bc4:	420c0000 	.word	0x420c0000
 8006bc8:	428c0000 	.word	0x428c0000

08006bcc <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3320      	adds	r3, #32
 8006bde:	f107 020b 	add.w	r2, r7, #11
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 ff41 	bl	8007a6c <lsm6dso16is_gy_data_rate_get>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf4:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	2b1a      	cmp	r3, #26
 8006bfa:	d866      	bhi.n	8006cca <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006c04 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006c7b 	.word	0x08006c7b
 8006c0c:	08006c83 	.word	0x08006c83
 8006c10:	08006c8b 	.word	0x08006c8b
 8006c14:	08006c93 	.word	0x08006c93
 8006c18:	08006c9b 	.word	0x08006c9b
 8006c1c:	08006ca3 	.word	0x08006ca3
 8006c20:	08006cab 	.word	0x08006cab
 8006c24:	08006cb3 	.word	0x08006cb3
 8006c28:	08006cbb 	.word	0x08006cbb
 8006c2c:	08006cc3 	.word	0x08006cc3
 8006c30:	08006ccb 	.word	0x08006ccb
 8006c34:	08006ccb 	.word	0x08006ccb
 8006c38:	08006ccb 	.word	0x08006ccb
 8006c3c:	08006ccb 	.word	0x08006ccb
 8006c40:	08006ccb 	.word	0x08006ccb
 8006c44:	08006ccb 	.word	0x08006ccb
 8006c48:	08006c7b 	.word	0x08006c7b
 8006c4c:	08006c83 	.word	0x08006c83
 8006c50:	08006c8b 	.word	0x08006c8b
 8006c54:	08006c93 	.word	0x08006c93
 8006c58:	08006c9b 	.word	0x08006c9b
 8006c5c:	08006ca3 	.word	0x08006ca3
 8006c60:	08006cab 	.word	0x08006cab
 8006c64:	08006cb3 	.word	0x08006cb3
 8006c68:	08006cbb 	.word	0x08006cbb
 8006c6c:	08006cc3 	.word	0x08006cc3
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
      break;
 8006c78:	e02b      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	4a17      	ldr	r2, [pc, #92]	@ (8006cdc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8006c7e:	601a      	str	r2, [r3, #0]
      break;
 8006c80:	e027      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	4a16      	ldr	r2, [pc, #88]	@ (8006ce0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8006c86:	601a      	str	r2, [r3, #0]
      break;
 8006c88:	e023      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	4a15      	ldr	r2, [pc, #84]	@ (8006ce4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8006c8e:	601a      	str	r2, [r3, #0]
      break;
 8006c90:	e01f      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	4a14      	ldr	r2, [pc, #80]	@ (8006ce8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8006c96:	601a      	str	r2, [r3, #0]
      break;
 8006c98:	e01b      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4a13      	ldr	r2, [pc, #76]	@ (8006cec <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8006c9e:	601a      	str	r2, [r3, #0]
      break;
 8006ca0:	e017      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	4a12      	ldr	r2, [pc, #72]	@ (8006cf0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8006ca6:	601a      	str	r2, [r3, #0]
      break;
 8006ca8:	e013      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	4a11      	ldr	r2, [pc, #68]	@ (8006cf4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8006cae:	601a      	str	r2, [r3, #0]
      break;
 8006cb0:	e00f      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	4a10      	ldr	r2, [pc, #64]	@ (8006cf8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8006cb6:	601a      	str	r2, [r3, #0]
      break;
 8006cb8:	e00b      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8006cfc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006cbe:	601a      	str	r2, [r3, #0]
      break;
 8006cc0:	e007      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8006d00 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8006cc6:	601a      	str	r2, [r3, #0]
      break;
 8006cc8:	e003      	b.n	8006cd2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	60fb      	str	r3, [r7, #12]
      break;
 8006cd0:	bf00      	nop
  }

  return ret;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	41480000 	.word	0x41480000
 8006ce0:	41d00000 	.word	0x41d00000
 8006ce4:	42500000 	.word	0x42500000
 8006ce8:	42d00000 	.word	0x42d00000
 8006cec:	43500000 	.word	0x43500000
 8006cf0:	43d00000 	.word	0x43d00000
 8006cf4:	44504000 	.word	0x44504000
 8006cf8:	44d06000 	.word	0x44d06000
 8006cfc:	45505000 	.word	0x45505000
 8006d00:	45d05800 	.word	0x45d05800

08006d04 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d106      	bne.n	8006d28 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006d1a:	ed97 0a00 	vldr	s0, [r7]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa70 	bl	8007204 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	e005      	b.n	8006d34 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006d28:	ed97 0a00 	vldr	s0, [r7]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 faf7 	bl	8007320 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8006d32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d34:	68fb      	ldr	r3, [r7, #12]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3320      	adds	r3, #32
 8006d52:	f107 020b 	add.w	r2, r7, #11
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fdeb 	bl	8007934 <lsm6dso16is_gy_full_scale_get>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d83c      	bhi.n	8006dea <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8006d70:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006dd7 	.word	0x08006dd7
 8006d84:	08006de1 	.word	0x08006de1
 8006d88:	08006deb 	.word	0x08006deb
 8006d8c:	08006deb 	.word	0x08006deb
 8006d90:	08006deb 	.word	0x08006deb
 8006d94:	08006deb 	.word	0x08006deb
 8006d98:	08006deb 	.word	0x08006deb
 8006d9c:	08006deb 	.word	0x08006deb
 8006da0:	08006deb 	.word	0x08006deb
 8006da4:	08006deb 	.word	0x08006deb
 8006da8:	08006deb 	.word	0x08006deb
 8006dac:	08006deb 	.word	0x08006deb
 8006db0:	08006deb 	.word	0x08006deb
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006dbd 	.word	0x08006dbd
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	227d      	movs	r2, #125	@ 0x7d
 8006dc0:	601a      	str	r2, [r3, #0]
      break;
 8006dc2:	e016      	b.n	8006df2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	22fa      	movs	r2, #250	@ 0xfa
 8006dc8:	601a      	str	r2, [r3, #0]
      break;
 8006dca:	e012      	b.n	8006df2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006dd2:	601a      	str	r2, [r3, #0]
      break;
 8006dd4:	e00d      	b.n	8006df2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ddc:	601a      	str	r2, [r3, #0]
      break;
 8006dde:	e008      	b.n	8006df2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006de6:	601a      	str	r2, [r3, #0]
      break;
 8006de8:	e003      	b.n	8006df2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006dea:	f04f 33ff 	mov.w	r3, #4294967295
 8006dee:	60fb      	str	r3, [r7, #12]
      break;
 8006df0:	bf00      	nop
  }

  return ret;
 8006df2:	68fb      	ldr	r3, [r7, #12]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b7d      	cmp	r3, #125	@ 0x7d
 8006e0e:	dd12      	ble.n	8006e36 <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2bfa      	cmp	r3, #250	@ 0xfa
 8006e14:	dd0d      	ble.n	8006e32 <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006e1c:	dd07      	ble.n	8006e2e <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e24:	dc01      	bgt.n	8006e2a <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e006      	b.n	8006e38 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e004      	b.n	8006e38 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e002      	b.n	8006e38 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e36:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8006e38:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3320      	adds	r3, #32
 8006e3e:	7afa      	ldrb	r2, [r7, #11]
 8006e40:	4611      	mov	r1, r2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fd46 	bl	80078d4 <lsm6dso16is_gy_full_scale_set>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e52:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006e54:	68fb      	ldr	r3, [r7, #12]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3320      	adds	r3, #32
 8006e70:	f107 020c 	add.w	r2, r7, #12
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 ff00 	bl	8007c7c <lsm6dso16is_angular_rate_raw_get>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006e88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006e90:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006e98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	809a      	strh	r2, [r3, #4]

  return ret;
 8006ea0:	697b      	ldr	r3, [r7, #20]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3320      	adds	r3, #32
 8006ec2:	f107 020c 	add.w	r2, r7, #12
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fed7 	bl	8007c7c <lsm6dso16is_angular_rate_raw_get>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed8:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fe0d 	bl	8006b00 <LSM6DSO16IS_GYRO_GetSensitivity>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006efe:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f0a:	ee17 2a90 	vmov	r2, s15
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006f32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f4a:	ee17 2a90 	vmov	r2, s15
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	609a      	str	r2, [r3, #8]

  return ret;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f103 0020 	add.w	r0, r3, #32
 8006f76:	1cba      	adds	r2, r7, #2
 8006f78:	78f9      	ldrb	r1, [r7, #3]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f000 faa6 	bl	80074cc <lsm6dso16is_write_reg>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d006      	beq.n	8006fba <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d101      	bne.n	8006fb6 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e002      	b.n	8006fbc <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006fba:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8006fbc:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3320      	adds	r3, #32
 8006fc2:	7afa      	ldrb	r2, [r7, #11]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fa9e 	bl	8007508 <lsm6dso16is_mem_bank_set>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8006fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006ff4:	edd7 7a00 	vldr	s15, [r7]
 8006ff8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	d801      	bhi.n	800700a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8007006:	2301      	movs	r3, #1
 8007008:	e058      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800700a:	edd7 7a00 	vldr	s15, [r7]
 800700e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	d801      	bhi.n	8007020 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 800701c:	2302      	movs	r3, #2
 800701e:	e04d      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007020:	edd7 7a00 	vldr	s15, [r7]
 8007024:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80070e4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800702c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007030:	d801      	bhi.n	8007036 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007032:	2303      	movs	r3, #3
 8007034:	e042      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007036:	edd7 7a00 	vldr	s15, [r7]
 800703a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80070e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 800703e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007046:	d801      	bhi.n	800704c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8007048:	2304      	movs	r3, #4
 800704a:	e037      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800704c:	edd7 7a00 	vldr	s15, [r7]
 8007050:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80070ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705c:	d801      	bhi.n	8007062 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 800705e:	2305      	movs	r3, #5
 8007060:	e02c      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007062:	edd7 7a00 	vldr	s15, [r7]
 8007066:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80070f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800706a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007072:	d801      	bhi.n	8007078 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8007074:	2306      	movs	r3, #6
 8007076:	e021      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007078:	edd7 7a00 	vldr	s15, [r7]
 800707c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80070f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	d801      	bhi.n	800708e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 800708a:	2307      	movs	r3, #7
 800708c:	e016      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800708e:	edd7 7a00 	vldr	s15, [r7]
 8007092:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80070f8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709e:	d801      	bhi.n	80070a4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80070a0:	2308      	movs	r3, #8
 80070a2:	e00b      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80070a4:	edd7 7a00 	vldr	s15, [r7]
 80070a8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80070fc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 80070ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	d801      	bhi.n	80070ba <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 80070b6:	2309      	movs	r3, #9
 80070b8:	e000      	b.n	80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80070ba:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 80070bc:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3320      	adds	r3, #32
 80070c2:	7afa      	ldrb	r2, [r7, #11]
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fadc 	bl	8007684 <lsm6dso16is_xl_data_rate_set>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	42500000 	.word	0x42500000
 80070e8:	42d00000 	.word	0x42d00000
 80070ec:	43500000 	.word	0x43500000
 80070f0:	43d00000 	.word	0x43d00000
 80070f4:	44504000 	.word	0x44504000
 80070f8:	44d06000 	.word	0x44d06000
 80070fc:	45505000 	.word	0x45505000

08007100 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 800710c:	edd7 7a00 	vldr	s15, [r7]
 8007110:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	d801      	bhi.n	8007122 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 800711e:	2301      	movs	r3, #1
 8007120:	e058      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007122:	edd7 7a00 	vldr	s15, [r7]
 8007126:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800712a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	d801      	bhi.n	8007138 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007134:	2302      	movs	r3, #2
 8007136:	e04d      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007138:	edd7 7a00 	vldr	s15, [r7]
 800713c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80071e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007148:	d801      	bhi.n	800714e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800714a:	2303      	movs	r3, #3
 800714c:	e042      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800714e:	edd7 7a00 	vldr	s15, [r7]
 8007152:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80071ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 8007156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800715a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800715e:	d801      	bhi.n	8007164 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007160:	2304      	movs	r3, #4
 8007162:	e037      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007164:	edd7 7a00 	vldr	s15, [r7]
 8007168:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80071f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800716c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	d801      	bhi.n	800717a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007176:	2305      	movs	r3, #5
 8007178:	e02c      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800717a:	edd7 7a00 	vldr	s15, [r7]
 800717e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80071f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8007182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718a:	d801      	bhi.n	8007190 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 800718c:	2306      	movs	r3, #6
 800718e:	e021      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007190:	edd7 7a00 	vldr	s15, [r7]
 8007194:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80071f8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	d801      	bhi.n	80071a6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80071a2:	2307      	movs	r3, #7
 80071a4:	e016      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071a6:	edd7 7a00 	vldr	s15, [r7]
 80071aa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80071fc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80071ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b6:	d801      	bhi.n	80071bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80071b8:	2308      	movs	r3, #8
 80071ba:	e00b      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071bc:	edd7 7a00 	vldr	s15, [r7]
 80071c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007200 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 80071c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071cc:	d801      	bhi.n	80071d2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80071ce:	2309      	movs	r3, #9
 80071d0:	e000      	b.n	80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071d2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	42500000 	.word	0x42500000
 80071ec:	42d00000 	.word	0x42d00000
 80071f0:	43500000 	.word	0x43500000
 80071f4:	43d00000 	.word	0x43d00000
 80071f8:	44504000 	.word	0x44504000
 80071fc:	44d06000 	.word	0x44d06000
 8007200:	45505000 	.word	0x45505000

08007204 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8007214:	edd7 7a00 	vldr	s15, [r7]
 8007218:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800721c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007224:	d801      	bhi.n	800722a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 8007226:	2301      	movs	r3, #1
 8007228:	e058      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800722a:	edd7 7a00 	vldr	s15, [r7]
 800722e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	d801      	bhi.n	8007240 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 800723c:	2302      	movs	r3, #2
 800723e:	e04d      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007240:	edd7 7a00 	vldr	s15, [r7]
 8007244:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007304 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800724c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007250:	d801      	bhi.n	8007256 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007252:	2303      	movs	r3, #3
 8007254:	e042      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007256:	edd7 7a00 	vldr	s15, [r7]
 800725a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007308 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800725e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	d801      	bhi.n	800726c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8007268:	2304      	movs	r3, #4
 800726a:	e037      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800726c:	edd7 7a00 	vldr	s15, [r7]
 8007270:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800730c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	d801      	bhi.n	8007282 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 800727e:	2305      	movs	r3, #5
 8007280:	e02c      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007282:	edd7 7a00 	vldr	s15, [r7]
 8007286:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007310 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800728a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	d801      	bhi.n	8007298 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8007294:	2306      	movs	r3, #6
 8007296:	e021      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007298:	edd7 7a00 	vldr	s15, [r7]
 800729c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007314 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80072a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a8:	d801      	bhi.n	80072ae <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 80072aa:	2307      	movs	r3, #7
 80072ac:	e016      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072ae:	edd7 7a00 	vldr	s15, [r7]
 80072b2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007318 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80072b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072be:	d801      	bhi.n	80072c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 80072c0:	2308      	movs	r3, #8
 80072c2:	e00b      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072c4:	edd7 7a00 	vldr	s15, [r7]
 80072c8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800731c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80072cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d4:	d801      	bhi.n	80072da <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 80072d6:	2309      	movs	r3, #9
 80072d8:	e000      	b.n	80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072da:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80072dc:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3320      	adds	r3, #32
 80072e2:	7afa      	ldrb	r2, [r7, #11]
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fb80 	bl	80079ec <lsm6dso16is_gy_data_rate_set>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	42500000 	.word	0x42500000
 8007308:	42d00000 	.word	0x42d00000
 800730c:	43500000 	.word	0x43500000
 8007310:	43d00000 	.word	0x43d00000
 8007314:	44504000 	.word	0x44504000
 8007318:	44d06000 	.word	0x44d06000
 800731c:	45505000 	.word	0x45505000

08007320 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 800732c:	edd7 7a00 	vldr	s15, [r7]
 8007330:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	d801      	bhi.n	8007342 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800733e:	2301      	movs	r3, #1
 8007340:	e058      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007342:	edd7 7a00 	vldr	s15, [r7]
 8007346:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800734a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	d801      	bhi.n	8007358 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007354:	2302      	movs	r3, #2
 8007356:	e04d      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007358:	edd7 7a00 	vldr	s15, [r7]
 800735c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007408 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007368:	d801      	bhi.n	800736e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800736a:	2303      	movs	r3, #3
 800736c:	e042      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800736e:	edd7 7a00 	vldr	s15, [r7]
 8007372:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800740c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	d801      	bhi.n	8007384 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007380:	2304      	movs	r3, #4
 8007382:	e037      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007384:	edd7 7a00 	vldr	s15, [r7]
 8007388:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007410 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800738c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007394:	d801      	bhi.n	800739a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007396:	2305      	movs	r3, #5
 8007398:	e02c      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800739a:	edd7 7a00 	vldr	s15, [r7]
 800739e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007414 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80073a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073aa:	d801      	bhi.n	80073b0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80073ac:	2306      	movs	r3, #6
 80073ae:	e021      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073b0:	edd7 7a00 	vldr	s15, [r7]
 80073b4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007418 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80073b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c0:	d801      	bhi.n	80073c6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80073c2:	2307      	movs	r3, #7
 80073c4:	e016      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073c6:	edd7 7a00 	vldr	s15, [r7]
 80073ca:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800741c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80073ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	d801      	bhi.n	80073dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80073d8:	2308      	movs	r3, #8
 80073da:	e00b      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073dc:	edd7 7a00 	vldr	s15, [r7]
 80073e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007420 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80073e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	d801      	bhi.n	80073f2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80073ee:	2309      	movs	r3, #9
 80073f0:	e000      	b.n	80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073f2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	42500000 	.word	0x42500000
 800740c:	42d00000 	.word	0x42d00000
 8007410:	43500000 	.word	0x43500000
 8007414:	43d00000 	.word	0x43d00000
 8007418:	44504000 	.word	0x44504000
 800741c:	44d06000 	.word	0x44d06000
 8007420:	45505000 	.word	0x45505000

08007424 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	461a      	mov	r2, r3
 8007430:	460b      	mov	r3, r1
 8007432:	72fb      	strb	r3, [r7, #11]
 8007434:	4613      	mov	r3, r2
 8007436:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	695c      	ldr	r4, [r3, #20]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	7b1b      	ldrb	r3, [r3, #12]
 8007444:	4618      	mov	r0, r3
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	b299      	uxth	r1, r3
 800744a:	893b      	ldrh	r3, [r7, #8]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	47a0      	blx	r4
 8007450:	4603      	mov	r3, r0
}
 8007452:	4618      	mov	r0, r3
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	bd90      	pop	{r4, r7, pc}

0800745a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800745a:	b590      	push	{r4, r7, lr}
 800745c:	b087      	sub	sp, #28
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	461a      	mov	r2, r3
 8007466:	460b      	mov	r3, r1
 8007468:	72fb      	strb	r3, [r7, #11]
 800746a:	4613      	mov	r3, r2
 800746c:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	691c      	ldr	r4, [r3, #16]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	7b1b      	ldrb	r3, [r3, #12]
 800747a:	4618      	mov	r0, r3
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	b299      	uxth	r1, r3
 8007480:	893b      	ldrh	r3, [r7, #8]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	47a0      	blx	r4
 8007486:	4603      	mov	r3, r0
}
 8007488:	4618      	mov	r0, r3
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	72fb      	strb	r3, [r7, #11]
 80074a0:	4613      	mov	r3, r2
 80074a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	e009      	b.n	80074c4 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685c      	ldr	r4, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68d8      	ldr	r0, [r3, #12]
 80074b8:	893b      	ldrh	r3, [r7, #8]
 80074ba:	7af9      	ldrb	r1, [r7, #11]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	47a0      	blx	r4
 80074c0:	6178      	str	r0, [r7, #20]

  return ret;
 80074c2:	697b      	ldr	r3, [r7, #20]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd90      	pop	{r4, r7, pc}

080074cc <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	461a      	mov	r2, r3
 80074d8:	460b      	mov	r3, r1
 80074da:	72fb      	strb	r3, [r7, #11]
 80074dc:	4613      	mov	r3, r2
 80074de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	e009      	b.n	8007500 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681c      	ldr	r4, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68d8      	ldr	r0, [r3, #12]
 80074f4:	893b      	ldrh	r3, [r7, #8]
 80074f6:	7af9      	ldrb	r1, [r7, #11]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	47a0      	blx	r4
 80074fc:	6178      	str	r0, [r7, #20]

  return ret;
 80074fe:	697b      	ldr	r3, [r7, #20]
}
 8007500:	4618      	mov	r0, r3
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	bd90      	pop	{r4, r7, pc}

08007508 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 8007514:	2300      	movs	r3, #0
 8007516:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d101      	bne.n	8007522 <lsm6dso16is_mem_bank_set+0x1a>
 800751e:	2201      	movs	r2, #1
 8007520:	e000      	b.n	8007524 <lsm6dso16is_mem_bank_set+0x1c>
 8007522:	2200      	movs	r2, #0
 8007524:	7a3b      	ldrb	r3, [r7, #8]
 8007526:	f362 1386 	bfi	r3, r2, #6, #1
 800752a:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	2b03      	cmp	r3, #3
 8007530:	d101      	bne.n	8007536 <lsm6dso16is_mem_bank_set+0x2e>
 8007532:	2201      	movs	r2, #1
 8007534:	e000      	b.n	8007538 <lsm6dso16is_mem_bank_set+0x30>
 8007536:	2200      	movs	r2, #0
 8007538:	7a3b      	ldrb	r3, [r7, #8]
 800753a:	f362 13c7 	bfi	r3, r2, #7, #1
 800753e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	2301      	movs	r3, #1
 8007546:	2101      	movs	r1, #1
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff ffbf 	bl	80074cc <lsm6dso16is_write_reg>
 800754e:	60f8      	str	r0, [r7, #12]

  return ret;
 8007550:	68fb      	ldr	r3, [r7, #12]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 8007564:	2301      	movs	r3, #1
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	210f      	movs	r1, #15
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff ff90 	bl	8007490 <lsm6dso16is_read_reg>
 8007570:	60f8      	str	r0, [r7, #12]

  return ret;
 8007572:	68fb      	ldr	r3, [r7, #12]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007588:	f107 0208 	add.w	r2, r7, #8
 800758c:	2301      	movs	r3, #1
 800758e:	2115      	movs	r1, #21
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff ff7d 	bl	8007490 <lsm6dso16is_read_reg>
 8007596:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10f      	bne.n	80075be <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	7a3b      	ldrb	r3, [r7, #8]
 80075a8:	f362 1304 	bfi	r3, r2, #4, #1
 80075ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80075ae:	f107 0208 	add.w	r2, r7, #8
 80075b2:	2301      	movs	r3, #1
 80075b4:	2115      	movs	r1, #21
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff ff88 	bl	80074cc <lsm6dso16is_write_reg>
 80075bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075d4:	f107 0208 	add.w	r2, r7, #8
 80075d8:	2301      	movs	r3, #1
 80075da:	2110      	movs	r1, #16
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff57 	bl	8007490 <lsm6dso16is_read_reg>
 80075e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10f      	bne.n	800760a <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	7a3b      	ldrb	r3, [r7, #8]
 80075f4:	f362 0383 	bfi	r3, r2, #2, #2
 80075f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075fa:	f107 0208 	add.w	r2, r7, #8
 80075fe:	2301      	movs	r3, #1
 8007600:	2110      	movs	r1, #16
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff ff62 	bl	80074cc <lsm6dso16is_write_reg>
 8007608:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800761e:	f107 0208 	add.w	r2, r7, #8
 8007622:	2301      	movs	r3, #1
 8007624:	2110      	movs	r1, #16
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff ff32 	bl	8007490 <lsm6dso16is_read_reg>
 800762c:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 800762e:	7a3b      	ldrb	r3, [r7, #8]
 8007630:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b03      	cmp	r3, #3
 8007638:	d81a      	bhi.n	8007670 <lsm6dso16is_xl_full_scale_get+0x5c>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <lsm6dso16is_xl_full_scale_get+0x2c>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007651 	.word	0x08007651
 8007644:	08007669 	.word	0x08007669
 8007648:	08007659 	.word	0x08007659
 800764c:	08007661 	.word	0x08007661
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
      break;
 8007656:	e00f      	b.n	8007678 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2202      	movs	r2, #2
 800765c:	701a      	strb	r2, [r3, #0]
      break;
 800765e:	e00b      	b.n	8007678 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2203      	movs	r2, #3
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e007      	b.n	8007678 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2201      	movs	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
      break;
 800766e:	e003      	b.n	8007678 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
      break;
 8007676:	bf00      	nop
  }
  return ret;
 8007678:	68fb      	ldr	r3, [r7, #12]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop

08007684 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007690:	f107 0208 	add.w	r2, r7, #8
 8007694:	2301      	movs	r3, #1
 8007696:	2110      	movs	r1, #16
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff fef9 	bl	8007490 <lsm6dso16is_read_reg>
 800769e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d128      	bne.n	80076f8 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80076b0:	2101      	movs	r1, #1
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff ff62 	bl	800757c <lsm6dso16is_xl_hm_mode_set>
 80076b8:	4602      	mov	r2, r0
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e007      	b.n	80076d2 <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff59 	bl	800757c <lsm6dso16is_xl_hm_mode_set>
 80076ca:	4602      	mov	r2, r0
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	7a3b      	ldrb	r3, [r7, #8]
 80076dc:	f362 1307 	bfi	r3, r2, #4, #4
 80076e0:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80076e2:	f107 0208 	add.w	r2, r7, #8
 80076e6:	2301      	movs	r3, #1
 80076e8:	2110      	movs	r1, #16
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff feee 	bl	80074cc <lsm6dso16is_write_reg>
 80076f0:	4602      	mov	r2, r0
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076f8:	68fb      	ldr	r3, [r7, #12]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800770e:	f107 0210 	add.w	r2, r7, #16
 8007712:	2301      	movs	r3, #1
 8007714:	2110      	movs	r1, #16
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff feba 	bl	8007490 <lsm6dso16is_read_reg>
 800771c:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800771e:	f107 020c 	add.w	r2, r7, #12
 8007722:	2301      	movs	r3, #1
 8007724:	2115      	movs	r1, #21
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff feb2 	bl	8007490 <lsm6dso16is_read_reg>
 800772c:	4602      	mov	r2, r0
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	4413      	add	r3, r2
 8007732:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8007734:	7b3b      	ldrb	r3, [r7, #12]
 8007736:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800773a:	b2db      	uxtb	r3, r3
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	7c3a      	ldrb	r2, [r7, #16]
 8007740:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	4313      	orrs	r3, r2
 8007748:	2b1b      	cmp	r3, #27
 800774a:	f200 8093 	bhi.w	8007874 <lsm6dso16is_xl_data_rate_get+0x170>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <lsm6dso16is_xl_data_rate_get+0x50>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	080077c5 	.word	0x080077c5
 8007758:	080077cd 	.word	0x080077cd
 800775c:	080077d5 	.word	0x080077d5
 8007760:	080077dd 	.word	0x080077dd
 8007764:	080077e5 	.word	0x080077e5
 8007768:	080077ed 	.word	0x080077ed
 800776c:	080077f5 	.word	0x080077f5
 8007770:	080077fd 	.word	0x080077fd
 8007774:	08007805 	.word	0x08007805
 8007778:	0800780d 	.word	0x0800780d
 800777c:	08007815 	.word	0x08007815
 8007780:	08007875 	.word	0x08007875
 8007784:	08007875 	.word	0x08007875
 8007788:	08007875 	.word	0x08007875
 800778c:	08007875 	.word	0x08007875
 8007790:	08007875 	.word	0x08007875
 8007794:	08007875 	.word	0x08007875
 8007798:	0800781d 	.word	0x0800781d
 800779c:	08007825 	.word	0x08007825
 80077a0:	0800782d 	.word	0x0800782d
 80077a4:	08007835 	.word	0x08007835
 80077a8:	0800783d 	.word	0x0800783d
 80077ac:	08007845 	.word	0x08007845
 80077b0:	0800784d 	.word	0x0800784d
 80077b4:	08007855 	.word	0x08007855
 80077b8:	0800785d 	.word	0x0800785d
 80077bc:	08007865 	.word	0x08007865
 80077c0:	0800786d 	.word	0x0800786d
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	e057      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e053      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2202      	movs	r2, #2
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e04f      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2203      	movs	r2, #3
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e04b      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2204      	movs	r2, #4
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e047      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2205      	movs	r2, #5
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e043      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2206      	movs	r2, #6
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e03f      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2207      	movs	r2, #7
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e03b      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2208      	movs	r2, #8
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e037      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2209      	movs	r2, #9
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e033      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	220a      	movs	r2, #10
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	e02f      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2211      	movs	r2, #17
 8007820:	701a      	strb	r2, [r3, #0]
      break;
 8007822:	e02b      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2212      	movs	r2, #18
 8007828:	701a      	strb	r2, [r3, #0]
      break;
 800782a:	e027      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2213      	movs	r2, #19
 8007830:	701a      	strb	r2, [r3, #0]
      break;
 8007832:	e023      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2214      	movs	r2, #20
 8007838:	701a      	strb	r2, [r3, #0]
      break;
 800783a:	e01f      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2215      	movs	r2, #21
 8007840:	701a      	strb	r2, [r3, #0]
      break;
 8007842:	e01b      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2216      	movs	r2, #22
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e017      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2217      	movs	r2, #23
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e013      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2218      	movs	r2, #24
 8007858:	701a      	strb	r2, [r3, #0]
      break;
 800785a:	e00f      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2219      	movs	r2, #25
 8007860:	701a      	strb	r2, [r3, #0]
      break;
 8007862:	e00b      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	221a      	movs	r2, #26
 8007868:	701a      	strb	r2, [r3, #0]
      break;
 800786a:	e007      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	221b      	movs	r2, #27
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e003      	b.n	800787c <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	697b      	ldr	r3, [r7, #20]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	2301      	movs	r3, #1
 800789a:	2116      	movs	r1, #22
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fdf7 	bl	8007490 <lsm6dso16is_read_reg>
 80078a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10f      	bne.n	80078ca <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	7a3b      	ldrb	r3, [r7, #8]
 80078b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80078b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80078ba:	f107 0208 	add.w	r2, r7, #8
 80078be:	2301      	movs	r3, #1
 80078c0:	2116      	movs	r1, #22
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fe02 	bl	80074cc <lsm6dso16is_write_reg>
 80078c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078ca:	68fb      	ldr	r3, [r7, #12]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80078e0:	f107 0208 	add.w	r2, r7, #8
 80078e4:	2301      	movs	r3, #1
 80078e6:	2111      	movs	r1, #17
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fdd1 	bl	8007490 <lsm6dso16is_read_reg>
 80078ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	7a3b      	ldrb	r3, [r7, #8]
 8007900:	f362 0383 	bfi	r3, r2, #2, #2
 8007904:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	091b      	lsrs	r3, r3, #4
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	7a3b      	ldrb	r3, [r7, #8]
 8007914:	f362 0341 	bfi	r3, r2, #1, #1
 8007918:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800791a:	f107 0208 	add.w	r2, r7, #8
 800791e:	2301      	movs	r3, #1
 8007920:	2111      	movs	r1, #17
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fdd2 	bl	80074cc <lsm6dso16is_write_reg>
 8007928:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800793e:	f107 0208 	add.w	r2, r7, #8
 8007942:	2301      	movs	r3, #1
 8007944:	2111      	movs	r1, #17
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fda2 	bl	8007490 <lsm6dso16is_read_reg>
 800794c:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 800794e:	7a3b      	ldrb	r3, [r7, #8]
 8007950:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007954:	b2db      	uxtb	r3, r3
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	7a3a      	ldrb	r2, [r7, #8]
 800795a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	4313      	orrs	r3, r2
 8007962:	2b10      	cmp	r3, #16
 8007964:	d838      	bhi.n	80079d8 <lsm6dso16is_gy_full_scale_get+0xa4>
 8007966:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <lsm6dso16is_gy_full_scale_get+0x38>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	080079b9 	.word	0x080079b9
 8007970:	080079c1 	.word	0x080079c1
 8007974:	080079c9 	.word	0x080079c9
 8007978:	080079d1 	.word	0x080079d1
 800797c:	080079d9 	.word	0x080079d9
 8007980:	080079d9 	.word	0x080079d9
 8007984:	080079d9 	.word	0x080079d9
 8007988:	080079d9 	.word	0x080079d9
 800798c:	080079d9 	.word	0x080079d9
 8007990:	080079d9 	.word	0x080079d9
 8007994:	080079d9 	.word	0x080079d9
 8007998:	080079d9 	.word	0x080079d9
 800799c:	080079d9 	.word	0x080079d9
 80079a0:	080079d9 	.word	0x080079d9
 80079a4:	080079d9 	.word	0x080079d9
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	080079b1 	.word	0x080079b1
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2210      	movs	r2, #16
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e013      	b.n	80079e0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
      break;
 80079be:	e00f      	b.n	80079e0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e00b      	b.n	80079e0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2202      	movs	r2, #2
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e007      	b.n	80079e0 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2203      	movs	r2, #3
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e003      	b.n	80079e0 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2210      	movs	r2, #16
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	bf00      	nop
  }
  return ret;
 80079e0:	68fb      	ldr	r3, [r7, #12]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop

080079ec <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079f8:	f107 0208 	add.w	r2, r7, #8
 80079fc:	2301      	movs	r3, #1
 80079fe:	2111      	movs	r1, #17
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff fd45 	bl	8007490 <lsm6dso16is_read_reg>
 8007a06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d128      	bne.n	8007a60 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff ff34 	bl	8007888 <lsm6dso16is_gy_hm_mode_set>
 8007a20:	4602      	mov	r2, r0
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e007      	b.n	8007a3a <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ff2b 	bl	8007888 <lsm6dso16is_gy_hm_mode_set>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	7a3b      	ldrb	r3, [r7, #8]
 8007a44:	f362 1307 	bfi	r3, r2, #4, #4
 8007a48:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a4a:	f107 0208 	add.w	r2, r7, #8
 8007a4e:	2301      	movs	r3, #1
 8007a50:	2111      	movs	r1, #17
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fd3a 	bl	80074cc <lsm6dso16is_write_reg>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007a60:	68fb      	ldr	r3, [r7, #12]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a76:	f107 0210 	add.w	r2, r7, #16
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	2111      	movs	r1, #17
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fd06 	bl	8007490 <lsm6dso16is_read_reg>
 8007a84:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007a86:	f107 020c 	add.w	r2, r7, #12
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	2116      	movs	r1, #22
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fcfe 	bl	8007490 <lsm6dso16is_read_reg>
 8007a94:	4602      	mov	r2, r0
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007a9c:	7b3b      	ldrb	r3, [r7, #12]
 8007a9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	7c3a      	ldrb	r2, [r7, #16]
 8007aa8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	2b1a      	cmp	r3, #26
 8007ab2:	f200 808d 	bhi.w	8007bd0 <lsm6dso16is_gy_data_rate_get+0x164>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <lsm6dso16is_gy_data_rate_get+0x50>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007b29 	.word	0x08007b29
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b39 	.word	0x08007b39
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b49 	.word	0x08007b49
 8007ad0:	08007b51 	.word	0x08007b51
 8007ad4:	08007b59 	.word	0x08007b59
 8007ad8:	08007b61 	.word	0x08007b61
 8007adc:	08007b69 	.word	0x08007b69
 8007ae0:	08007b71 	.word	0x08007b71
 8007ae4:	08007b79 	.word	0x08007b79
 8007ae8:	08007bd1 	.word	0x08007bd1
 8007aec:	08007bd1 	.word	0x08007bd1
 8007af0:	08007bd1 	.word	0x08007bd1
 8007af4:	08007bd1 	.word	0x08007bd1
 8007af8:	08007bd1 	.word	0x08007bd1
 8007afc:	08007bd1 	.word	0x08007bd1
 8007b00:	08007b81 	.word	0x08007b81
 8007b04:	08007b89 	.word	0x08007b89
 8007b08:	08007b91 	.word	0x08007b91
 8007b0c:	08007b99 	.word	0x08007b99
 8007b10:	08007ba1 	.word	0x08007ba1
 8007b14:	08007ba9 	.word	0x08007ba9
 8007b18:	08007bb1 	.word	0x08007bb1
 8007b1c:	08007bb9 	.word	0x08007bb9
 8007b20:	08007bc1 	.word	0x08007bc1
 8007b24:	08007bc9 	.word	0x08007bc9
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
      break;
 8007b2e:	e053      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2201      	movs	r2, #1
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e04f      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
      break;
 8007b3e:	e04b      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2203      	movs	r2, #3
 8007b44:	701a      	strb	r2, [r3, #0]
      break;
 8007b46:	e047      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	701a      	strb	r2, [r3, #0]
      break;
 8007b4e:	e043      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2205      	movs	r2, #5
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	e03f      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2206      	movs	r2, #6
 8007b5c:	701a      	strb	r2, [r3, #0]
      break;
 8007b5e:	e03b      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2207      	movs	r2, #7
 8007b64:	701a      	strb	r2, [r3, #0]
      break;
 8007b66:	e037      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	701a      	strb	r2, [r3, #0]
      break;
 8007b6e:	e033      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2209      	movs	r2, #9
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e02f      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e02b      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2211      	movs	r2, #17
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e027      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2212      	movs	r2, #18
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e023      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2213      	movs	r2, #19
 8007b94:	701a      	strb	r2, [r3, #0]
      break;
 8007b96:	e01f      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2214      	movs	r2, #20
 8007b9c:	701a      	strb	r2, [r3, #0]
      break;
 8007b9e:	e01b      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2215      	movs	r2, #21
 8007ba4:	701a      	strb	r2, [r3, #0]
      break;
 8007ba6:	e017      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2216      	movs	r2, #22
 8007bac:	701a      	strb	r2, [r3, #0]
      break;
 8007bae:	e013      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2217      	movs	r2, #23
 8007bb4:	701a      	strb	r2, [r3, #0]
      break;
 8007bb6:	e00f      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2218      	movs	r2, #24
 8007bbc:	701a      	strb	r2, [r3, #0]
      break;
 8007bbe:	e00b      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2219      	movs	r2, #25
 8007bc4:	701a      	strb	r2, [r3, #0]
      break;
 8007bc6:	e007      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	221a      	movs	r2, #26
 8007bcc:	701a      	strb	r2, [r3, #0]
      break;
 8007bce:	e003      	b.n	8007bd8 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
      break;
 8007bd6:	bf00      	nop
  }

  return ret;
 8007bd8:	697b      	ldr	r3, [r7, #20]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bf0:	f107 0208 	add.w	r2, r7, #8
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	2112      	movs	r1, #18
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fc49 	bl	8007490 <lsm6dso16is_read_reg>
 8007bfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10f      	bne.n	8007c26 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	7a3b      	ldrb	r3, [r7, #8]
 8007c10:	f362 0382 	bfi	r3, r2, #2, #1
 8007c14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c16:	f107 0208 	add.w	r2, r7, #8
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	2112      	movs	r1, #18
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fc54 	bl	80074cc <lsm6dso16is_write_reg>
 8007c24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c3c:	f107 0208 	add.w	r2, r7, #8
 8007c40:	2301      	movs	r3, #1
 8007c42:	2112      	movs	r1, #18
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fc23 	bl	8007490 <lsm6dso16is_read_reg>
 8007c4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10f      	bne.n	8007c72 <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	7a3b      	ldrb	r3, [r7, #8]
 8007c5c:	f362 1386 	bfi	r3, r2, #6, #1
 8007c60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c62:	f107 0208 	add.w	r2, r7, #8
 8007c66:	2301      	movs	r3, #1
 8007c68:	2112      	movs	r1, #18
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fc2e 	bl	80074cc <lsm6dso16is_write_reg>
 8007c70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8007c86:	f107 020c 	add.w	r2, r7, #12
 8007c8a:	2306      	movs	r3, #6
 8007c8c:	2122      	movs	r1, #34	@ 0x22
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fbfe 	bl	8007490 <lsm6dso16is_read_reg>
 8007c94:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007c96:	7b7b      	ldrb	r3, [r7, #13]
 8007c98:	b21a      	sxth	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	7b3a      	ldrb	r2, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	b21a      	sxth	r2, r3
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007cb6:	7bfa      	ldrb	r2, [r7, #15]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	3302      	adds	r3, #2
 8007cbc:	b212      	sxth	r2, r2
 8007cbe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	7bba      	ldrb	r2, [r7, #14]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	b212      	sxth	r2, r2
 8007cda:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007cdc:	7c7a      	ldrb	r2, [r7, #17]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	b212      	sxth	r2, r2
 8007ce4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	7c3a      	ldrb	r2, [r7, #16]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	b212      	sxth	r2, r2
 8007d00:	801a      	strh	r2, [r3, #0]

  return ret;
 8007d02:	697b      	ldr	r3, [r7, #20]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 8007d16:	f107 020c 	add.w	r2, r7, #12
 8007d1a:	2306      	movs	r3, #6
 8007d1c:	2128      	movs	r1, #40	@ 0x28
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fbb6 	bl	8007490 <lsm6dso16is_read_reg>
 8007d24:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007d26:	7b7b      	ldrb	r3, [r7, #13]
 8007d28:	b21a      	sxth	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	7b3a      	ldrb	r2, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	b21a      	sxth	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007d46:	7bfa      	ldrb	r2, [r7, #15]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	b212      	sxth	r2, r2
 8007d4e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	3302      	adds	r3, #2
 8007d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	7bba      	ldrb	r2, [r7, #14]
 8007d60:	4413      	add	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	3302      	adds	r3, #2
 8007d68:	b212      	sxth	r2, r2
 8007d6a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007d6c:	7c7a      	ldrb	r2, [r7, #17]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	b212      	sxth	r2, r2
 8007d74:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	7c3a      	ldrb	r2, [r7, #16]
 8007d86:	4413      	add	r3, r2
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	b212      	sxth	r2, r2
 8007d90:	801a      	strh	r2, [r3, #0]

  return ret;
 8007d92:	697b      	ldr	r3, [r7, #20]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d103      	bne.n	8007db8 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	e05d      	b.n	8007e74 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	7b1a      	ldrb	r2, [r3, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	695a      	ldr	r2, [r3, #20]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a23      	ldr	r2, [pc, #140]	@ (8007e80 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8007df4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a22      	ldr	r2, [pc, #136]	@ (8007e84 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007dfa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e02c      	b.n	8007e74 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4798      	blx	r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e022      	b.n	8007e74 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d11e      	bne.n	8007e74 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d119      	bne.n	8007e74 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007e40:	2304      	movs	r3, #4
 8007e42:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	461a      	mov	r2, r3
 8007e48:	2112      	movs	r1, #18
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 ff18 	bl	8008c80 <LSM6DSV16X_Write_Reg>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2103      	movs	r1, #3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 ff0c 	bl	8008c80 <LSM6DSV16X_Write_Reg>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	080091c1 	.word	0x080091c1
 8007e84:	080091f7 	.word	0x080091f7

08007e88 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 ff0f 	bl	8008cb6 <LSM6DSV16X_Set_Mem_Bank>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea2:	e070      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3320      	adds	r3, #32
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 fcfe 	bl	80098ac <lsm6dsv16x_auto_increment_set>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eba:	e064      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3320      	adds	r3, #32
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fd18 	bl	80098f8 <lsm6dsv16x_block_data_update_set>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	e058      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3320      	adds	r3, #32
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 feae 	bl	8009c3c <lsm6dsv16x_fifo_mode_set>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	e04c      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2206      	movs	r2, #6
 8007ef0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3320      	adds	r3, #32
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 fa14 	bl	8009328 <lsm6dsv16x_xl_data_rate_set>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8007f06:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0a:	e03c      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3320      	adds	r3, #32
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fd94 	bl	8009a40 <lsm6dsv16x_xl_full_scale_set>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f22:	e030      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2206      	movs	r2, #6
 8007f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3320      	adds	r3, #32
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fb5a 	bl	80095ec <lsm6dsv16x_gy_data_rate_set>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	e020      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3320      	adds	r3, #32
 8007f48:	2104      	movs	r1, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fcfa 	bl	8009944 <lsm6dsv16x_gy_full_scale_set>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	e014      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8007f5c:	7b3b      	ldrb	r3, [r7, #12]
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3320      	adds	r3, #32
 8007f68:	7b39      	ldrb	r1, [r7, #12]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 fe8c 	bl	8009c88 <lsm6dsv16x_ah_qvar_mode_set>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	e004      	b.n	8007f86 <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f898 	bl	80080cc <LSM6DSV16X_ACC_Disable>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa6:	e025      	b.n	8007ff4 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fb6a 	bl	8008682 <LSM6DSV16X_GYRO_Disable>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	e01c      	b.n	8007ff4 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8007fca:	7b3b      	ldrb	r3, [r7, #12]
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3320      	adds	r3, #32
 8007fd6:	7b39      	ldrb	r1, [r7, #12]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fe55 	bl	8009c88 <lsm6dsv16x_ah_qvar_mode_set>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8007fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe8:	e004      	b.n	8007ff4 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3320      	adds	r3, #32
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f001 f97a 	bl	8009306 <lsm6dsv16x_device_id_get>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	e000      	b.n	8008020 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2201      	movs	r2, #1
 8008036:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2201      	movs	r2, #1
 800803c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2201      	movs	r2, #1
 8008048:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008050:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2210      	movs	r2, #16
 8008056:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	4a07      	ldr	r2, [pc, #28]	@ (8008080 <LSM6DSV16X_GetCapabilities+0x58>)
 8008062:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	4a06      	ldr	r2, [pc, #24]	@ (8008080 <LSM6DSV16X_GetCapabilities+0x58>)
 8008068:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	45f00000 	.word	0x45f00000

08008084 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008092:	2b01      	cmp	r3, #1
 8008094:	d101      	bne.n	800809a <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e014      	b.n	80080c4 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f103 0220 	add.w	r2, r3, #32
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f001 f93d 	bl	8009328 <lsm6dsv16x_xl_data_rate_set>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	e004      	b.n	80080c4 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e01f      	b.n	8008122 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f103 0220 	add.w	r2, r3, #32
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3333      	adds	r3, #51	@ 0x33
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f001 f96c 	bl	80093cc <lsm6dsv16x_xl_data_rate_get>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295
 80080fe:	e010      	b.n	8008122 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3320      	adds	r3, #32
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f001 f90e 	bl	8009328 <lsm6dsv16x_xl_data_rate_set>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	e004      	b.n	8008122 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3320      	adds	r3, #32
 800813e:	f107 020b 	add.w	r2, r7, #11
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fca1 	bl	8009a8c <lsm6dsv16x_xl_full_scale_get>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008150:	f04f 33ff 	mov.w	r3, #4294967295
 8008154:	e023      	b.n	800819e <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d81b      	bhi.n	8008194 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 800815c:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	08008175 	.word	0x08008175
 8008168:	0800817d 	.word	0x0800817d
 800816c:	08008185 	.word	0x08008185
 8008170:	0800818d 	.word	0x0800818d
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	4a0c      	ldr	r2, [pc, #48]	@ (80081a8 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8008178:	601a      	str	r2, [r3, #0]
      break;
 800817a:	e00f      	b.n	800819c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	4a0b      	ldr	r2, [pc, #44]	@ (80081ac <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8008180:	601a      	str	r2, [r3, #0]
      break;
 8008182:	e00b      	b.n	800819c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	4a0a      	ldr	r2, [pc, #40]	@ (80081b0 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8008188:	601a      	str	r2, [r3, #0]
      break;
 800818a:	e007      	b.n	800819c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	4a09      	ldr	r2, [pc, #36]	@ (80081b4 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8008190:	601a      	str	r2, [r3, #0]
      break;
 8008192:	e003      	b.n	800819c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008194:	f04f 33ff 	mov.w	r3, #4294967295
 8008198:	60fb      	str	r3, [r7, #12]
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	68fb      	ldr	r3, [r7, #12]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	3d79db23 	.word	0x3d79db23
 80081ac:	3df9db23 	.word	0x3df9db23
 80081b0:	3e79db23 	.word	0x3e79db23
 80081b4:	3ef9db23 	.word	0x3ef9db23

080081b8 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3320      	adds	r3, #32
 80081ca:	f107 020b 	add.w	r2, r7, #11
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f8fb 	bl	80093cc <lsm6dsv16x_xl_data_rate_get>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80081dc:	f04f 33ff 	mov.w	r3, #4294967295
 80081e0:	e0ea      	b.n	80083b8 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 80081e2:	7afb      	ldrb	r3, [r7, #11]
 80081e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80081e6:	f200 80e2 	bhi.w	80083ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 80081ea:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	080082a5 	.word	0x080082a5
 80081f4:	080082af 	.word	0x080082af
 80081f8:	080082b7 	.word	0x080082b7
 80081fc:	080082c7 	.word	0x080082c7
 8008200:	080082df 	.word	0x080082df
 8008204:	080082f7 	.word	0x080082f7
 8008208:	0800830f 	.word	0x0800830f
 800820c:	08008327 	.word	0x08008327
 8008210:	0800833f 	.word	0x0800833f
 8008214:	08008357 	.word	0x08008357
 8008218:	0800836f 	.word	0x0800836f
 800821c:	08008387 	.word	0x08008387
 8008220:	0800839f 	.word	0x0800839f
 8008224:	080083af 	.word	0x080083af
 8008228:	080083af 	.word	0x080083af
 800822c:	080083af 	.word	0x080083af
 8008230:	080083af 	.word	0x080083af
 8008234:	080083af 	.word	0x080083af
 8008238:	080083af 	.word	0x080083af
 800823c:	080082cf 	.word	0x080082cf
 8008240:	080082e7 	.word	0x080082e7
 8008244:	080082ff 	.word	0x080082ff
 8008248:	08008317 	.word	0x08008317
 800824c:	0800832f 	.word	0x0800832f
 8008250:	08008347 	.word	0x08008347
 8008254:	0800835f 	.word	0x0800835f
 8008258:	08008377 	.word	0x08008377
 800825c:	0800838f 	.word	0x0800838f
 8008260:	080083a7 	.word	0x080083a7
 8008264:	080083af 	.word	0x080083af
 8008268:	080083af 	.word	0x080083af
 800826c:	080083af 	.word	0x080083af
 8008270:	080083af 	.word	0x080083af
 8008274:	080083af 	.word	0x080083af
 8008278:	080083af 	.word	0x080083af
 800827c:	080082bf 	.word	0x080082bf
 8008280:	080082d7 	.word	0x080082d7
 8008284:	080082ef 	.word	0x080082ef
 8008288:	08008307 	.word	0x08008307
 800828c:	0800831f 	.word	0x0800831f
 8008290:	08008337 	.word	0x08008337
 8008294:	0800834f 	.word	0x0800834f
 8008298:	08008367 	.word	0x08008367
 800829c:	0800837f 	.word	0x0800837f
 80082a0:	08008397 	.word	0x08008397
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f04f 0200 	mov.w	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
      break;
 80082ac:	e083      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	4a43      	ldr	r2, [pc, #268]	@ (80083c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80082b2:	601a      	str	r2, [r3, #0]
      break;
 80082b4:	e07f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	4a42      	ldr	r2, [pc, #264]	@ (80083c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 80082ba:	601a      	str	r2, [r3, #0]
      break;
 80082bc:	e07b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	4a41      	ldr	r2, [pc, #260]	@ (80083c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 80082c2:	601a      	str	r2, [r3, #0]
      break;
 80082c4:	e077      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	4a40      	ldr	r2, [pc, #256]	@ (80083cc <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 80082ca:	601a      	str	r2, [r3, #0]
      break;
 80082cc:	e073      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	4a3f      	ldr	r2, [pc, #252]	@ (80083d0 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 80082d2:	601a      	str	r2, [r3, #0]
      break;
 80082d4:	e06f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	4a3e      	ldr	r2, [pc, #248]	@ (80083d4 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 80082da:	601a      	str	r2, [r3, #0]
      break;
 80082dc:	e06b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	4a3d      	ldr	r2, [pc, #244]	@ (80083d8 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 80082e2:	601a      	str	r2, [r3, #0]
      break;
 80082e4:	e067      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	4a3c      	ldr	r2, [pc, #240]	@ (80083dc <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 80082ea:	601a      	str	r2, [r3, #0]
      break;
 80082ec:	e063      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	4a3b      	ldr	r2, [pc, #236]	@ (80083e0 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 80082f2:	601a      	str	r2, [r3, #0]
      break;
 80082f4:	e05f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	4a3a      	ldr	r2, [pc, #232]	@ (80083e4 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 80082fa:	601a      	str	r2, [r3, #0]
      break;
 80082fc:	e05b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	4a39      	ldr	r2, [pc, #228]	@ (80083e8 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 8008302:	601a      	str	r2, [r3, #0]
      break;
 8008304:	e057      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	4a38      	ldr	r2, [pc, #224]	@ (80083ec <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 800830a:	601a      	str	r2, [r3, #0]
      break;
 800830c:	e053      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	4a37      	ldr	r2, [pc, #220]	@ (80083f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 8008312:	601a      	str	r2, [r3, #0]
      break;
 8008314:	e04f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	4a36      	ldr	r2, [pc, #216]	@ (80083f4 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 800831a:	601a      	str	r2, [r3, #0]
      break;
 800831c:	e04b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	4a35      	ldr	r2, [pc, #212]	@ (80083f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 8008322:	601a      	str	r2, [r3, #0]
      break;
 8008324:	e047      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	4a34      	ldr	r2, [pc, #208]	@ (80083fc <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 800832a:	601a      	str	r2, [r3, #0]
      break;
 800832c:	e043      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	4a33      	ldr	r2, [pc, #204]	@ (8008400 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 8008332:	601a      	str	r2, [r3, #0]
      break;
 8008334:	e03f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	4a32      	ldr	r2, [pc, #200]	@ (8008404 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 800833a:	601a      	str	r2, [r3, #0]
      break;
 800833c:	e03b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	4a31      	ldr	r2, [pc, #196]	@ (8008408 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 8008342:	601a      	str	r2, [r3, #0]
      break;
 8008344:	e037      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	4a30      	ldr	r2, [pc, #192]	@ (800840c <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 800834a:	601a      	str	r2, [r3, #0]
      break;
 800834c:	e033      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	4a2f      	ldr	r2, [pc, #188]	@ (8008410 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 8008352:	601a      	str	r2, [r3, #0]
      break;
 8008354:	e02f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	4a2e      	ldr	r2, [pc, #184]	@ (8008414 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 800835a:	601a      	str	r2, [r3, #0]
      break;
 800835c:	e02b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	4a2d      	ldr	r2, [pc, #180]	@ (8008418 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 8008362:	601a      	str	r2, [r3, #0]
      break;
 8008364:	e027      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	4a2c      	ldr	r2, [pc, #176]	@ (800841c <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 800836a:	601a      	str	r2, [r3, #0]
      break;
 800836c:	e023      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	4a2b      	ldr	r2, [pc, #172]	@ (8008420 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 8008372:	601a      	str	r2, [r3, #0]
      break;
 8008374:	e01f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	4a2a      	ldr	r2, [pc, #168]	@ (8008424 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 800837a:	601a      	str	r2, [r3, #0]
      break;
 800837c:	e01b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	4a29      	ldr	r2, [pc, #164]	@ (8008428 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 8008382:	601a      	str	r2, [r3, #0]
      break;
 8008384:	e017      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	4a28      	ldr	r2, [pc, #160]	@ (800842c <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 800838a:	601a      	str	r2, [r3, #0]
      break;
 800838c:	e013      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	4a27      	ldr	r2, [pc, #156]	@ (8008430 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 8008392:	601a      	str	r2, [r3, #0]
      break;
 8008394:	e00f      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	4a26      	ldr	r2, [pc, #152]	@ (8008434 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 800839a:	601a      	str	r2, [r3, #0]
      break;
 800839c:	e00b      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	4a25      	ldr	r2, [pc, #148]	@ (8008438 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 80083a2:	601a      	str	r2, [r3, #0]
      break;
 80083a4:	e007      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	4a24      	ldr	r2, [pc, #144]	@ (800843c <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 80083aa:	601a      	str	r2, [r3, #0]
      break;
 80083ac:	e003      	b.n	80083b6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295
 80083b2:	60fb      	str	r3, [r7, #12]
      break;
 80083b4:	bf00      	nop
  }

  return ret;
 80083b6:	68fb      	ldr	r3, [r7, #12]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	3ff00000 	.word	0x3ff00000
 80083c4:	40f00000 	.word	0x40f00000
 80083c8:	41480000 	.word	0x41480000
 80083cc:	41700000 	.word	0x41700000
 80083d0:	417a0000 	.word	0x417a0000
 80083d4:	41c80000 	.word	0x41c80000
 80083d8:	41f00000 	.word	0x41f00000
 80083dc:	41fa0000 	.word	0x41fa0000
 80083e0:	42480000 	.word	0x42480000
 80083e4:	42700000 	.word	0x42700000
 80083e8:	427a0000 	.word	0x427a0000
 80083ec:	42c80000 	.word	0x42c80000
 80083f0:	42f00000 	.word	0x42f00000
 80083f4:	42fa0000 	.word	0x42fa0000
 80083f8:	43480000 	.word	0x43480000
 80083fc:	43700000 	.word	0x43700000
 8008400:	437a0000 	.word	0x437a0000
 8008404:	43c80000 	.word	0x43c80000
 8008408:	43f00000 	.word	0x43f00000
 800840c:	43fa0000 	.word	0x43fa0000
 8008410:	44480000 	.word	0x44480000
 8008414:	44700000 	.word	0x44700000
 8008418:	447a0000 	.word	0x447a0000
 800841c:	44c80000 	.word	0x44c80000
 8008420:	44f00000 	.word	0x44f00000
 8008424:	44fa0000 	.word	0x44fa0000
 8008428:	45480000 	.word	0x45480000
 800842c:	45700000 	.word	0x45700000
 8008430:	457a0000 	.word	0x457a0000
 8008434:	45c80000 	.word	0x45c80000
 8008438:	45f00000 	.word	0x45f00000
 800843c:	45fa0000 	.word	0x45fa0000

08008440 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008452:	2b01      	cmp	r3, #1
 8008454:	d106      	bne.n	8008464 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008456:	ed97 0a00 	vldr	s0, [r7]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fc52 	bl	8008d04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008460:	4603      	mov	r3, r0
 8008462:	e005      	b.n	8008470 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008464:	ed97 0a00 	vldr	s0, [r7]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fced 	bl	8008e48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 800846e:	4603      	mov	r3, r0
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3320      	adds	r3, #32
 800848a:	f107 020b 	add.w	r2, r7, #11
 800848e:	4611      	mov	r1, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f001 fafb 	bl	8009a8c <lsm6dsv16x_xl_full_scale_get>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800849c:	f04f 33ff 	mov.w	r3, #4294967295
 80084a0:	e023      	b.n	80084ea <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d81b      	bhi.n	80084e0 <LSM6DSV16X_ACC_GetFullScale+0x68>
 80084a8:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084d1 	.word	0x080084d1
 80084bc:	080084d9 	.word	0x080084d9
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2202      	movs	r2, #2
 80084c4:	601a      	str	r2, [r3, #0]
      break;
 80084c6:	e00f      	b.n	80084e8 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2204      	movs	r2, #4
 80084cc:	601a      	str	r2, [r3, #0]
      break;
 80084ce:	e00b      	b.n	80084e8 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2208      	movs	r2, #8
 80084d4:	601a      	str	r2, [r3, #0]
      break;
 80084d6:	e007      	b.n	80084e8 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2210      	movs	r2, #16
 80084dc:	601a      	str	r2, [r3, #0]
      break;
 80084de:	e003      	b.n	80084e8 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80084e0:	f04f 33ff 	mov.w	r3, #4294967295
 80084e4:	60fb      	str	r3, [r7, #12]
      break;
 80084e6:	bf00      	nop
  }

  return ret;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop

080084f4 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b02      	cmp	r3, #2
 8008502:	dd0b      	ble.n	800851c <LSM6DSV16X_ACC_SetFullScale+0x28>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b04      	cmp	r3, #4
 8008508:	dd06      	ble.n	8008518 <LSM6DSV16X_ACC_SetFullScale+0x24>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b08      	cmp	r3, #8
 800850e:	dc01      	bgt.n	8008514 <LSM6DSV16X_ACC_SetFullScale+0x20>
 8008510:	2302      	movs	r3, #2
 8008512:	e004      	b.n	800851e <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008514:	2303      	movs	r3, #3
 8008516:	e002      	b.n	800851e <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800851c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 800851e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3320      	adds	r3, #32
 8008524:	7bfa      	ldrb	r2, [r7, #15]
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f001 fa89 	bl	8009a40 <lsm6dsv16x_xl_full_scale_set>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 8008534:	f04f 33ff 	mov.w	r3, #4294967295
 8008538:	e000      	b.n	800853c <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3320      	adds	r3, #32
 8008552:	f107 0208 	add.w	r2, r7, #8
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fb22 	bl	8009ba2 <lsm6dsv16x_acceleration_raw_get>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008564:	f04f 33ff 	mov.w	r3, #4294967295
 8008568:	e00c      	b.n	8008584 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800856a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008572:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800857a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008596:	f04f 0300 	mov.w	r3, #0
 800859a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3320      	adds	r3, #32
 80085a0:	f107 0210 	add.w	r2, r7, #16
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fafb 	bl	8009ba2 <lsm6dsv16x_acceleration_raw_get>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80085b2:	f04f 33ff 	mov.w	r3, #4294967295
 80085b6:	e03c      	b.n	8008632 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 80085b8:	f107 030c 	add.w	r3, r7, #12
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff fdb4 	bl	800812c <LSM6DSV16X_ACC_GetSensitivity>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 80085ca:	f04f 33ff 	mov.w	r3, #4294967295
 80085ce:	e030      	b.n	8008632 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80085d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80085e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085e8:	ee17 2a90 	vmov	r2, s15
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80085f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8008600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008608:	ee17 2a90 	vmov	r2, s15
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800861c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008628:	ee17 2a90 	vmov	r2, s15
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e014      	b.n	800867a <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0220 	add.w	r2, r3, #32
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f000 ffc4 	bl	80095ec <lsm6dsv16x_gy_data_rate_set>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800866a:	f04f 33ff 	mov.w	r3, #4294967295
 800866e:	e004      	b.n	800867a <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e01f      	b.n	80086d8 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f103 0220 	add.w	r2, r3, #32
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3334      	adds	r3, #52	@ 0x34
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f000 fff1 	bl	800968c <lsm6dsv16x_gy_data_rate_get>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	e010      	b.n	80086d8 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3320      	adds	r3, #32
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 ff95 	bl	80095ec <lsm6dsv16x_gy_data_rate_set>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80086c8:	f04f 33ff 	mov.w	r3, #4294967295
 80086cc:	e004      	b.n	80086d8 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3320      	adds	r3, #32
 80086f2:	f107 020b 	add.w	r2, r7, #11
 80086f6:	4611      	mov	r1, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f949 	bl	8009990 <lsm6dsv16x_gy_full_scale_get>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008704:	f04f 33ff 	mov.w	r3, #4294967295
 8008708:	e03d      	b.n	8008786 <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	2b0c      	cmp	r3, #12
 800870e:	d835      	bhi.n	800877c <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8008710:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8008712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008716:	bf00      	nop
 8008718:	0800874d 	.word	0x0800874d
 800871c:	08008755 	.word	0x08008755
 8008720:	0800875d 	.word	0x0800875d
 8008724:	08008765 	.word	0x08008765
 8008728:	0800876d 	.word	0x0800876d
 800872c:	0800877d 	.word	0x0800877d
 8008730:	0800877d 	.word	0x0800877d
 8008734:	0800877d 	.word	0x0800877d
 8008738:	0800877d 	.word	0x0800877d
 800873c:	0800877d 	.word	0x0800877d
 8008740:	0800877d 	.word	0x0800877d
 8008744:	0800877d 	.word	0x0800877d
 8008748:	08008775 	.word	0x08008775
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	4a10      	ldr	r2, [pc, #64]	@ (8008790 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008750:	601a      	str	r2, [r3, #0]
      break;
 8008752:	e017      	b.n	8008784 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	4a0f      	ldr	r2, [pc, #60]	@ (8008794 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8008758:	601a      	str	r2, [r3, #0]
      break;
 800875a:	e013      	b.n	8008784 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	4a0e      	ldr	r2, [pc, #56]	@ (8008798 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8008760:	601a      	str	r2, [r3, #0]
      break;
 8008762:	e00f      	b.n	8008784 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	4a0d      	ldr	r2, [pc, #52]	@ (800879c <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8008768:	601a      	str	r2, [r3, #0]
      break;
 800876a:	e00b      	b.n	8008784 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	4a0c      	ldr	r2, [pc, #48]	@ (80087a0 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8008770:	601a      	str	r2, [r3, #0]
      break;
 8008772:	e007      	b.n	8008784 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	4a0b      	ldr	r2, [pc, #44]	@ (80087a4 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008778:	601a      	str	r2, [r3, #0]
      break;
 800877a:	e003      	b.n	8008784 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	60fb      	str	r3, [r7, #12]
      break;
 8008782:	bf00      	nop
  }

  return ret;
 8008784:	68fb      	ldr	r3, [r7, #12]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	408c0000 	.word	0x408c0000
 8008794:	410c0000 	.word	0x410c0000
 8008798:	418c0000 	.word	0x418c0000
 800879c:	420c0000 	.word	0x420c0000
 80087a0:	428c0000 	.word	0x428c0000
 80087a4:	430c0000 	.word	0x430c0000

080087a8 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3320      	adds	r3, #32
 80087ba:	f107 020b 	add.w	r2, r7, #11
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 ff63 	bl	800968c <lsm6dsv16x_gy_data_rate_get>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80087cc:	f04f 33ff 	mov.w	r3, #4294967295
 80087d0:	e0ea      	b.n	80089a8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	2b2c      	cmp	r3, #44	@ 0x2c
 80087d6:	f200 80e2 	bhi.w	800899e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 80087da:	a201      	add	r2, pc, #4	@ (adr r2, 80087e0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008895 	.word	0x08008895
 80087e4:	0800889f 	.word	0x0800889f
 80087e8:	080088a7 	.word	0x080088a7
 80087ec:	080088b7 	.word	0x080088b7
 80087f0:	080088cf 	.word	0x080088cf
 80087f4:	080088e7 	.word	0x080088e7
 80087f8:	080088ff 	.word	0x080088ff
 80087fc:	08008917 	.word	0x08008917
 8008800:	0800892f 	.word	0x0800892f
 8008804:	08008947 	.word	0x08008947
 8008808:	0800895f 	.word	0x0800895f
 800880c:	08008977 	.word	0x08008977
 8008810:	0800898f 	.word	0x0800898f
 8008814:	0800899f 	.word	0x0800899f
 8008818:	0800899f 	.word	0x0800899f
 800881c:	0800899f 	.word	0x0800899f
 8008820:	0800899f 	.word	0x0800899f
 8008824:	0800899f 	.word	0x0800899f
 8008828:	0800899f 	.word	0x0800899f
 800882c:	080088bf 	.word	0x080088bf
 8008830:	080088d7 	.word	0x080088d7
 8008834:	080088ef 	.word	0x080088ef
 8008838:	08008907 	.word	0x08008907
 800883c:	0800891f 	.word	0x0800891f
 8008840:	08008937 	.word	0x08008937
 8008844:	0800894f 	.word	0x0800894f
 8008848:	08008967 	.word	0x08008967
 800884c:	0800897f 	.word	0x0800897f
 8008850:	08008997 	.word	0x08008997
 8008854:	0800899f 	.word	0x0800899f
 8008858:	0800899f 	.word	0x0800899f
 800885c:	0800899f 	.word	0x0800899f
 8008860:	0800899f 	.word	0x0800899f
 8008864:	0800899f 	.word	0x0800899f
 8008868:	0800899f 	.word	0x0800899f
 800886c:	080088af 	.word	0x080088af
 8008870:	080088c7 	.word	0x080088c7
 8008874:	080088df 	.word	0x080088df
 8008878:	080088f7 	.word	0x080088f7
 800887c:	0800890f 	.word	0x0800890f
 8008880:	08008927 	.word	0x08008927
 8008884:	0800893f 	.word	0x0800893f
 8008888:	08008957 	.word	0x08008957
 800888c:	0800896f 	.word	0x0800896f
 8008890:	08008987 	.word	0x08008987
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
      break;
 800889c:	e083      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	4a43      	ldr	r2, [pc, #268]	@ (80089b0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 80088a2:	601a      	str	r2, [r3, #0]
      break;
 80088a4:	e07f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	4a42      	ldr	r2, [pc, #264]	@ (80089b4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 80088aa:	601a      	str	r2, [r3, #0]
      break;
 80088ac:	e07b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	4a41      	ldr	r2, [pc, #260]	@ (80089b8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 80088b2:	601a      	str	r2, [r3, #0]
      break;
 80088b4:	e077      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	4a40      	ldr	r2, [pc, #256]	@ (80089bc <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 80088ba:	601a      	str	r2, [r3, #0]
      break;
 80088bc:	e073      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	4a3f      	ldr	r2, [pc, #252]	@ (80089c0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 80088c2:	601a      	str	r2, [r3, #0]
      break;
 80088c4:	e06f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	4a3e      	ldr	r2, [pc, #248]	@ (80089c4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 80088ca:	601a      	str	r2, [r3, #0]
      break;
 80088cc:	e06b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	4a3d      	ldr	r2, [pc, #244]	@ (80089c8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 80088d2:	601a      	str	r2, [r3, #0]
      break;
 80088d4:	e067      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	4a3c      	ldr	r2, [pc, #240]	@ (80089cc <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 80088da:	601a      	str	r2, [r3, #0]
      break;
 80088dc:	e063      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4a3b      	ldr	r2, [pc, #236]	@ (80089d0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 80088e2:	601a      	str	r2, [r3, #0]
      break;
 80088e4:	e05f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	4a3a      	ldr	r2, [pc, #232]	@ (80089d4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 80088ea:	601a      	str	r2, [r3, #0]
      break;
 80088ec:	e05b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	4a39      	ldr	r2, [pc, #228]	@ (80089d8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 80088f2:	601a      	str	r2, [r3, #0]
      break;
 80088f4:	e057      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	4a38      	ldr	r2, [pc, #224]	@ (80089dc <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 80088fa:	601a      	str	r2, [r3, #0]
      break;
 80088fc:	e053      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	4a37      	ldr	r2, [pc, #220]	@ (80089e0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8008902:	601a      	str	r2, [r3, #0]
      break;
 8008904:	e04f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	4a36      	ldr	r2, [pc, #216]	@ (80089e4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 800890a:	601a      	str	r2, [r3, #0]
      break;
 800890c:	e04b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	4a35      	ldr	r2, [pc, #212]	@ (80089e8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8008912:	601a      	str	r2, [r3, #0]
      break;
 8008914:	e047      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	4a34      	ldr	r2, [pc, #208]	@ (80089ec <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 800891a:	601a      	str	r2, [r3, #0]
      break;
 800891c:	e043      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	4a33      	ldr	r2, [pc, #204]	@ (80089f0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8008922:	601a      	str	r2, [r3, #0]
      break;
 8008924:	e03f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	4a32      	ldr	r2, [pc, #200]	@ (80089f4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 800892a:	601a      	str	r2, [r3, #0]
      break;
 800892c:	e03b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	4a31      	ldr	r2, [pc, #196]	@ (80089f8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8008932:	601a      	str	r2, [r3, #0]
      break;
 8008934:	e037      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	4a30      	ldr	r2, [pc, #192]	@ (80089fc <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 800893a:	601a      	str	r2, [r3, #0]
      break;
 800893c:	e033      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	4a2f      	ldr	r2, [pc, #188]	@ (8008a00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8008942:	601a      	str	r2, [r3, #0]
      break;
 8008944:	e02f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	4a2e      	ldr	r2, [pc, #184]	@ (8008a04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 800894a:	601a      	str	r2, [r3, #0]
      break;
 800894c:	e02b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	4a2d      	ldr	r2, [pc, #180]	@ (8008a08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8008952:	601a      	str	r2, [r3, #0]
      break;
 8008954:	e027      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	4a2c      	ldr	r2, [pc, #176]	@ (8008a0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 800895a:	601a      	str	r2, [r3, #0]
      break;
 800895c:	e023      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	4a2b      	ldr	r2, [pc, #172]	@ (8008a10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8008962:	601a      	str	r2, [r3, #0]
      break;
 8008964:	e01f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	4a2a      	ldr	r2, [pc, #168]	@ (8008a14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 800896a:	601a      	str	r2, [r3, #0]
      break;
 800896c:	e01b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	4a29      	ldr	r2, [pc, #164]	@ (8008a18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8008972:	601a      	str	r2, [r3, #0]
      break;
 8008974:	e017      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	4a28      	ldr	r2, [pc, #160]	@ (8008a1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 800897a:	601a      	str	r2, [r3, #0]
      break;
 800897c:	e013      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	4a27      	ldr	r2, [pc, #156]	@ (8008a20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8008982:	601a      	str	r2, [r3, #0]
      break;
 8008984:	e00f      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	4a26      	ldr	r2, [pc, #152]	@ (8008a24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 800898a:	601a      	str	r2, [r3, #0]
      break;
 800898c:	e00b      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	4a25      	ldr	r2, [pc, #148]	@ (8008a28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8008992:	601a      	str	r2, [r3, #0]
      break;
 8008994:	e007      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	4a24      	ldr	r2, [pc, #144]	@ (8008a2c <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 800899a:	601a      	str	r2, [r3, #0]
      break;
 800899c:	e003      	b.n	80089a6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	60fb      	str	r3, [r7, #12]
      break;
 80089a4:	bf00      	nop
  }

  return ret;
 80089a6:	68fb      	ldr	r3, [r7, #12]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	3ff00000 	.word	0x3ff00000
 80089b4:	40f00000 	.word	0x40f00000
 80089b8:	41480000 	.word	0x41480000
 80089bc:	41700000 	.word	0x41700000
 80089c0:	417a0000 	.word	0x417a0000
 80089c4:	41c80000 	.word	0x41c80000
 80089c8:	41f00000 	.word	0x41f00000
 80089cc:	41fa0000 	.word	0x41fa0000
 80089d0:	42480000 	.word	0x42480000
 80089d4:	42700000 	.word	0x42700000
 80089d8:	427a0000 	.word	0x427a0000
 80089dc:	42c80000 	.word	0x42c80000
 80089e0:	42f00000 	.word	0x42f00000
 80089e4:	42fa0000 	.word	0x42fa0000
 80089e8:	43480000 	.word	0x43480000
 80089ec:	43700000 	.word	0x43700000
 80089f0:	437a0000 	.word	0x437a0000
 80089f4:	43c80000 	.word	0x43c80000
 80089f8:	43f00000 	.word	0x43f00000
 80089fc:	43fa0000 	.word	0x43fa0000
 8008a00:	44480000 	.word	0x44480000
 8008a04:	44700000 	.word	0x44700000
 8008a08:	447a0000 	.word	0x447a0000
 8008a0c:	44c80000 	.word	0x44c80000
 8008a10:	44f00000 	.word	0x44f00000
 8008a14:	44fa0000 	.word	0x44fa0000
 8008a18:	45480000 	.word	0x45480000
 8008a1c:	45700000 	.word	0x45700000
 8008a20:	457a0000 	.word	0x457a0000
 8008a24:	45c80000 	.word	0x45c80000
 8008a28:	45f00000 	.word	0x45f00000
 8008a2c:	45fa0000 	.word	0x45fa0000

08008a30 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d106      	bne.n	8008a54 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008a46:	ed97 0a00 	vldr	s0, [r7]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa94 	bl	8008f78 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008a50:	4603      	mov	r3, r0
 8008a52:	e005      	b.n	8008a60 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008a54:	ed97 0a00 	vldr	s0, [r7]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb23 	bl	80090a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008a5e:	4603      	mov	r3, r0
  }
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3320      	adds	r3, #32
 8008a7a:	f107 020b 	add.w	r2, r7, #11
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 ff85 	bl	8009990 <lsm6dsv16x_gy_full_scale_get>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a90:	e041      	b.n	8008b16 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	2b0c      	cmp	r3, #12
 8008a96:	d839      	bhi.n	8008b0c <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008a98:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ad5 	.word	0x08008ad5
 8008aa4:	08008add 	.word	0x08008add
 8008aa8:	08008ae5 	.word	0x08008ae5
 8008aac:	08008aef 	.word	0x08008aef
 8008ab0:	08008af9 	.word	0x08008af9
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008b0d 	.word	0x08008b0d
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b0d 	.word	0x08008b0d
 8008acc:	08008b0d 	.word	0x08008b0d
 8008ad0:	08008b03 	.word	0x08008b03
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	227d      	movs	r2, #125	@ 0x7d
 8008ad8:	601a      	str	r2, [r3, #0]
      break;
 8008ada:	e01b      	b.n	8008b14 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	22fa      	movs	r2, #250	@ 0xfa
 8008ae0:	601a      	str	r2, [r3, #0]
      break;
 8008ae2:	e017      	b.n	8008b14 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008aea:	601a      	str	r2, [r3, #0]
      break;
 8008aec:	e012      	b.n	8008b14 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008af4:	601a      	str	r2, [r3, #0]
      break;
 8008af6:	e00d      	b.n	8008b14 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008afe:	601a      	str	r2, [r3, #0]
      break;
 8008b00:	e008      	b.n	8008b14 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008b08:	601a      	str	r2, [r3, #0]
      break;
 8008b0a:	e003      	b.n	8008b14 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b10:	60fb      	str	r3, [r7, #12]
      break;
 8008b12:	bf00      	nop
  }

  return ret;
 8008b14:	68fb      	ldr	r3, [r7, #12]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop

08008b20 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b7d      	cmp	r3, #125	@ 0x7d
 8008b2e:	dd18      	ble.n	8008b62 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2bfa      	cmp	r3, #250	@ 0xfa
 8008b34:	dd13      	ble.n	8008b5e <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008b3c:	dd0d      	ble.n	8008b5a <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b44:	dd07      	ble.n	8008b56 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008b4c:	dc01      	bgt.n	8008b52 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008b4e:	2304      	movs	r3, #4
 8008b50:	e008      	b.n	8008b64 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b52:	230c      	movs	r3, #12
 8008b54:	e006      	b.n	8008b64 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b56:	2303      	movs	r3, #3
 8008b58:	e004      	b.n	8008b64 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e002      	b.n	8008b64 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e000      	b.n	8008b64 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b62:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008b64:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3320      	adds	r3, #32
 8008b6a:	7bfa      	ldrb	r2, [r7, #15]
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fee8 	bl	8009944 <lsm6dsv16x_gy_full_scale_set>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7e:	e000      	b.n	8008b82 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3320      	adds	r3, #32
 8008b98:	f107 0208 	add.w	r2, r7, #8
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 ffb2 	bl	8009b08 <lsm6dsv16x_angular_rate_raw_get>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008baa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bae:	e00c      	b.n	8008bca <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008bb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008bb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008bc0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3320      	adds	r3, #32
 8008be6:	f107 0210 	add.w	r2, r7, #16
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 ff8b 	bl	8009b08 <lsm6dsv16x_angular_rate_raw_get>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfc:	e03c      	b.n	8008c78 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008bfe:	f107 030c 	add.w	r3, r7, #12
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fd6b 	bl	80086e0 <LSM6DSV16X_GYRO_GetSensitivity>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008c10:	f04f 33ff 	mov.w	r3, #4294967295
 8008c14:	e030      	b.n	8008c78 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008c16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c2e:	ee17 2a90 	vmov	r2, s15
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008c36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c4e:	ee17 2a90 	vmov	r2, s15
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008c56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c6e:	ee17 2a90 	vmov	r2, s15
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f103 0020 	add.w	r0, r3, #32
 8008c96:	1cba      	adds	r2, r7, #2
 8008c98:	78f9      	ldrb	r1, [r7, #3]
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f000 fae4 	bl	8009268 <lsm6dsv16x_write_reg>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8008caa:	e000      	b.n	8008cae <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d006      	beq.n	8008cda <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d101      	bne.n	8008cd6 <LSM6DSV16X_Set_Mem_Bank+0x20>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e002      	b.n	8008cdc <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e000      	b.n	8008cdc <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008cda:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008cdc:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3320      	adds	r3, #32
 8008ce2:	7afa      	ldrb	r2, [r7, #11]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fadc 	bl	80092a4 <lsm6dsv16x_mem_bank_set>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8008cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008d10:	edd7 7a00 	vldr	s15, [r7]
 8008d14:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	d801      	bhi.n	8008d26 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e06e      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d26:	edd7 7a00 	vldr	s15, [r7]
 8008d2a:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d36:	d801      	bhi.n	8008d3c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e063      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d3c:	edd7 7a00 	vldr	s15, [r7]
 8008d40:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4c:	d801      	bhi.n	8008d52 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e058      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d52:	edd7 7a00 	vldr	s15, [r7]
 8008d56:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d62:	d801      	bhi.n	8008d68 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008d64:	2304      	movs	r3, #4
 8008d66:	e04d      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d68:	edd7 7a00 	vldr	s15, [r7]
 8008d6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008e2c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d78:	d801      	bhi.n	8008d7e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008d7a:	2305      	movs	r3, #5
 8008d7c:	e042      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d7e:	edd7 7a00 	vldr	s15, [r7]
 8008d82:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008e30 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8e:	d801      	bhi.n	8008d94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008d90:	2306      	movs	r3, #6
 8008d92:	e037      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d94:	edd7 7a00 	vldr	s15, [r7]
 8008d98:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008e34 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8008d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da4:	d801      	bhi.n	8008daa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008da6:	2307      	movs	r3, #7
 8008da8:	e02c      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008daa:	edd7 7a00 	vldr	s15, [r7]
 8008dae:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8008db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dba:	d801      	bhi.n	8008dc0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	e021      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dc0:	edd7 7a00 	vldr	s15, [r7]
 8008dc4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008e3c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd0:	d801      	bhi.n	8008dd6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008dd2:	2309      	movs	r3, #9
 8008dd4:	e016      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dd6:	edd7 7a00 	vldr	s15, [r7]
 8008dda:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008e40 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de6:	d801      	bhi.n	8008dec <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008de8:	230a      	movs	r3, #10
 8008dea:	e00b      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dec:	edd7 7a00 	vldr	s15, [r7]
 8008df0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008e44 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8008df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	d801      	bhi.n	8008e02 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008dfe:	230b      	movs	r3, #11
 8008e00:	e000      	b.n	8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e02:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008e04:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3320      	adds	r3, #32
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fa8a 	bl	8009328 <lsm6dsv16x_xl_data_rate_set>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1e:	e000      	b.n	8008e22 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	42700000 	.word	0x42700000
 8008e30:	42f00000 	.word	0x42f00000
 8008e34:	43700000 	.word	0x43700000
 8008e38:	43f00000 	.word	0x43f00000
 8008e3c:	44700000 	.word	0x44700000
 8008e40:	44f00000 	.word	0x44f00000
 8008e44:	45700000 	.word	0x45700000

08008e48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008e54:	edd7 7a00 	vldr	s15, [r7]
 8008e58:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e64:	d801      	bhi.n	8008e6a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e06e      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e6a:	edd7 7a00 	vldr	s15, [r7]
 8008e6e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7a:	d801      	bhi.n	8008e80 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e063      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e80:	edd7 7a00 	vldr	s15, [r7]
 8008e84:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e90:	d801      	bhi.n	8008e96 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008e92:	2303      	movs	r3, #3
 8008e94:	e058      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e96:	edd7 7a00 	vldr	s15, [r7]
 8008e9a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	d801      	bhi.n	8008eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	e04d      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008eac:	edd7 7a00 	vldr	s15, [r7]
 8008eb0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008f5c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ebc:	d801      	bhi.n	8008ec2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008ebe:	2305      	movs	r3, #5
 8008ec0:	e042      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ec2:	edd7 7a00 	vldr	s15, [r7]
 8008ec6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008f60 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed2:	d801      	bhi.n	8008ed8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008ed4:	2306      	movs	r3, #6
 8008ed6:	e037      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ed8:	edd7 7a00 	vldr	s15, [r7]
 8008edc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008f64 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee8:	d801      	bhi.n	8008eee <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008eea:	2307      	movs	r3, #7
 8008eec:	e02c      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008eee:	edd7 7a00 	vldr	s15, [r7]
 8008ef2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008f68 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8008ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efe:	d801      	bhi.n	8008f04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008f00:	2308      	movs	r3, #8
 8008f02:	e021      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f04:	edd7 7a00 	vldr	s15, [r7]
 8008f08:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008f6c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8008f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f14:	d801      	bhi.n	8008f1a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008f16:	2309      	movs	r3, #9
 8008f18:	e016      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f1a:	edd7 7a00 	vldr	s15, [r7]
 8008f1e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008f70 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8008f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2a:	d801      	bhi.n	8008f30 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008f2c:	230a      	movs	r3, #10
 8008f2e:	e00b      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f30:	edd7 7a00 	vldr	s15, [r7]
 8008f34:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008f74 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8008f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f40:	d801      	bhi.n	8008f46 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8008f42:	230b      	movs	r3, #11
 8008f44:	e000      	b.n	8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f46:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	42700000 	.word	0x42700000
 8008f60:	42f00000 	.word	0x42f00000
 8008f64:	43700000 	.word	0x43700000
 8008f68:	43f00000 	.word	0x43f00000
 8008f6c:	44700000 	.word	0x44700000
 8008f70:	44f00000 	.word	0x44f00000
 8008f74:	45700000 	.word	0x45700000

08008f78 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8008f84:	edd7 7a00 	vldr	s15, [r7]
 8008f88:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f94:	d801      	bhi.n	8008f9a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e063      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f9a:	edd7 7a00 	vldr	s15, [r7]
 8008f9e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008faa:	d801      	bhi.n	8008fb0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8008fac:	2303      	movs	r3, #3
 8008fae:	e058      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fb0:	edd7 7a00 	vldr	s15, [r7]
 8008fb4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	d801      	bhi.n	8008fc6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	e04d      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fc6:	edd7 7a00 	vldr	s15, [r7]
 8008fca:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009088 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd6:	d801      	bhi.n	8008fdc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008fd8:	2305      	movs	r3, #5
 8008fda:	e042      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fdc:	edd7 7a00 	vldr	s15, [r7]
 8008fe0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800908c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8008fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	d801      	bhi.n	8008ff2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008fee:	2306      	movs	r3, #6
 8008ff0:	e037      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008ff2:	edd7 7a00 	vldr	s15, [r7]
 8008ff6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009090 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8008ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	d801      	bhi.n	8009008 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8009004:	2307      	movs	r3, #7
 8009006:	e02c      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009008:	edd7 7a00 	vldr	s15, [r7]
 800900c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009094 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8009010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	d801      	bhi.n	800901e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800901a:	2308      	movs	r3, #8
 800901c:	e021      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800901e:	edd7 7a00 	vldr	s15, [r7]
 8009022:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009098 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 8009026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902e:	d801      	bhi.n	8009034 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009030:	2309      	movs	r3, #9
 8009032:	e016      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009034:	edd7 7a00 	vldr	s15, [r7]
 8009038:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800909c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 800903c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009044:	d801      	bhi.n	800904a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8009046:	230a      	movs	r3, #10
 8009048:	e00b      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800904a:	edd7 7a00 	vldr	s15, [r7]
 800904e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80090a0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 8009052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905a:	d801      	bhi.n	8009060 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 800905c:	230b      	movs	r3, #11
 800905e:	e000      	b.n	8009062 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009060:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009062:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3320      	adds	r3, #32
 8009068:	7bfa      	ldrb	r2, [r7, #15]
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fabd 	bl	80095ec <lsm6dsv16x_gy_data_rate_set>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8009078:	f04f 33ff 	mov.w	r3, #4294967295
 800907c:	e000      	b.n	8009080 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	42700000 	.word	0x42700000
 800908c:	42f00000 	.word	0x42f00000
 8009090:	43700000 	.word	0x43700000
 8009094:	43f00000 	.word	0x43f00000
 8009098:	44700000 	.word	0x44700000
 800909c:	44f00000 	.word	0x44f00000
 80090a0:	45700000 	.word	0x45700000

080090a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80090b0:	edd7 7a00 	vldr	s15, [r7]
 80090b4:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80090b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c0:	d801      	bhi.n	80090c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80090c2:	2302      	movs	r3, #2
 80090c4:	e063      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090c6:	edd7 7a00 	vldr	s15, [r7]
 80090ca:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80090ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d6:	d801      	bhi.n	80090dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80090d8:	2303      	movs	r3, #3
 80090da:	e058      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090dc:	edd7 7a00 	vldr	s15, [r7]
 80090e0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80090e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d801      	bhi.n	80090f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80090ee:	2304      	movs	r3, #4
 80090f0:	e04d      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090f2:	edd7 7a00 	vldr	s15, [r7]
 80090f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80091a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80090fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	d801      	bhi.n	8009108 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8009104:	2305      	movs	r3, #5
 8009106:	e042      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009108:	edd7 7a00 	vldr	s15, [r7]
 800910c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80091a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8009110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009118:	d801      	bhi.n	800911e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800911a:	2306      	movs	r3, #6
 800911c:	e037      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800911e:	edd7 7a00 	vldr	s15, [r7]
 8009122:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80091ac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 8009126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800912a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912e:	d801      	bhi.n	8009134 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009130:	2307      	movs	r3, #7
 8009132:	e02c      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009134:	edd7 7a00 	vldr	s15, [r7]
 8009138:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80091b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 800913c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009144:	d801      	bhi.n	800914a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8009146:	2308      	movs	r3, #8
 8009148:	e021      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800914a:	edd7 7a00 	vldr	s15, [r7]
 800914e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80091b4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 8009152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915a:	d801      	bhi.n	8009160 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800915c:	2309      	movs	r3, #9
 800915e:	e016      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009160:	edd7 7a00 	vldr	s15, [r7]
 8009164:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80091b8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8009168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009170:	d801      	bhi.n	8009176 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8009172:	230a      	movs	r3, #10
 8009174:	e00b      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009176:	edd7 7a00 	vldr	s15, [r7]
 800917a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80091bc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 800917e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009186:	d801      	bhi.n	800918c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009188:	230b      	movs	r3, #11
 800918a:	e000      	b.n	800918e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800918c:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	42700000 	.word	0x42700000
 80091a8:	42f00000 	.word	0x42f00000
 80091ac:	43700000 	.word	0x43700000
 80091b0:	43f00000 	.word	0x43f00000
 80091b4:	44700000 	.word	0x44700000
 80091b8:	44f00000 	.word	0x44f00000
 80091bc:	45700000 	.word	0x45700000

080091c0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	461a      	mov	r2, r3
 80091cc:	460b      	mov	r3, r1
 80091ce:	72fb      	strb	r3, [r7, #11]
 80091d0:	4613      	mov	r3, r2
 80091d2:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	695c      	ldr	r4, [r3, #20]
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	7b1b      	ldrb	r3, [r3, #12]
 80091e0:	4618      	mov	r0, r3
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	b299      	uxth	r1, r3
 80091e6:	893b      	ldrh	r3, [r7, #8]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	47a0      	blx	r4
 80091ec:	4603      	mov	r3, r0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	371c      	adds	r7, #28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd90      	pop	{r4, r7, pc}

080091f6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80091f6:	b590      	push	{r4, r7, lr}
 80091f8:	b087      	sub	sp, #28
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	461a      	mov	r2, r3
 8009202:	460b      	mov	r3, r1
 8009204:	72fb      	strb	r3, [r7, #11]
 8009206:	4613      	mov	r3, r2
 8009208:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	691c      	ldr	r4, [r3, #16]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	7b1b      	ldrb	r3, [r3, #12]
 8009216:	4618      	mov	r0, r3
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	b299      	uxth	r1, r3
 800921c:	893b      	ldrh	r3, [r7, #8]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	47a0      	blx	r4
 8009222:	4603      	mov	r3, r0
}
 8009224:	4618      	mov	r0, r3
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	bd90      	pop	{r4, r7, pc}

0800922c <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	607a      	str	r2, [r7, #4]
 8009236:	461a      	mov	r2, r3
 8009238:	460b      	mov	r3, r1
 800923a:	72fb      	strb	r3, [r7, #11]
 800923c:	4613      	mov	r3, r2
 800923e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 8009246:	f04f 33ff 	mov.w	r3, #4294967295
 800924a:	e009      	b.n	8009260 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685c      	ldr	r4, [r3, #4]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68d8      	ldr	r0, [r3, #12]
 8009254:	893b      	ldrh	r3, [r7, #8]
 8009256:	7af9      	ldrb	r1, [r7, #11]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	47a0      	blx	r4
 800925c:	6178      	str	r0, [r7, #20]

  return ret;
 800925e:	697b      	ldr	r3, [r7, #20]
}
 8009260:	4618      	mov	r0, r3
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd90      	pop	{r4, r7, pc}

08009268 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	607a      	str	r2, [r7, #4]
 8009272:	461a      	mov	r2, r3
 8009274:	460b      	mov	r3, r1
 8009276:	72fb      	strb	r3, [r7, #11]
 8009278:	4613      	mov	r3, r2
 800927a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 8009282:	f04f 33ff 	mov.w	r3, #4294967295
 8009286:	e009      	b.n	800929c <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681c      	ldr	r4, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	68d8      	ldr	r0, [r3, #12]
 8009290:	893b      	ldrh	r3, [r7, #8]
 8009292:	7af9      	ldrb	r1, [r7, #11]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	47a0      	blx	r4
 8009298:	6178      	str	r0, [r7, #20]

  return ret;
 800929a:	697b      	ldr	r3, [r7, #20]
}
 800929c:	4618      	mov	r0, r3
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd90      	pop	{r4, r7, pc}

080092a4 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80092b0:	f107 0208 	add.w	r2, r7, #8
 80092b4:	2301      	movs	r3, #1
 80092b6:	2101      	movs	r1, #1
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff ffb7 	bl	800922c <lsm6dsv16x_read_reg>
 80092be:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	e019      	b.n	80092fe <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	085b      	lsrs	r3, r3, #1
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	7a3b      	ldrb	r3, [r7, #8]
 80092d6:	f362 1386 	bfi	r3, r2, #6, #1
 80092da:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	7a3b      	ldrb	r3, [r7, #8]
 80092e6:	f362 13c7 	bfi	r3, r2, #7, #1
 80092ea:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	2301      	movs	r3, #1
 80092f2:	2101      	movs	r1, #1
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ffb7 	bl	8009268 <lsm6dsv16x_write_reg>
 80092fa:	60f8      	str	r0, [r7, #12]

  return ret;
 80092fc:	68fb      	ldr	r3, [r7, #12]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8009310:	2301      	movs	r3, #1
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	210f      	movs	r1, #15
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff88 	bl	800922c <lsm6dsv16x_read_reg>
 800931c:	60f8      	str	r0, [r7, #12]

  return ret;
 800931e:	68fb      	ldr	r3, [r7, #12]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009334:	f107 0210 	add.w	r2, r7, #16
 8009338:	2301      	movs	r3, #1
 800933a:	2110      	movs	r1, #16
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff ff75 	bl	800922c <lsm6dsv16x_read_reg>
 8009342:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	e039      	b.n	80093c2 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	b2da      	uxtb	r2, r3
 8009356:	7c3b      	ldrb	r3, [r7, #16]
 8009358:	f362 0303 	bfi	r3, r2, #0, #4
 800935c:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800935e:	f107 0210 	add.w	r2, r7, #16
 8009362:	2301      	movs	r3, #1
 8009364:	2110      	movs	r1, #16
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff ff7e 	bl	8009268 <lsm6dsv16x_write_reg>
 800936c:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	e024      	b.n	80093c2 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	091b      	lsrs	r3, r3, #4
 800937c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800937e:	7cfb      	ldrb	r3, [r7, #19]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01d      	beq.n	80093c0 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009384:	f107 020c 	add.w	r2, r7, #12
 8009388:	2301      	movs	r3, #1
 800938a:	2162      	movs	r1, #98	@ 0x62
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff ff4d 	bl	800922c <lsm6dsv16x_read_reg>
 8009392:	4602      	mov	r2, r0
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4413      	add	r3, r2
 8009398:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800939a:	7cfb      	ldrb	r3, [r7, #19]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	7b3b      	ldrb	r3, [r7, #12]
 80093a4:	f362 0301 	bfi	r3, r2, #0, #2
 80093a8:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80093aa:	f107 020c 	add.w	r2, r7, #12
 80093ae:	2301      	movs	r3, #1
 80093b0:	2162      	movs	r1, #98	@ 0x62
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff ff58 	bl	8009268 <lsm6dsv16x_write_reg>
 80093b8:	4602      	mov	r2, r0
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	4413      	add	r3, r2
 80093be:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80093c0:	697b      	ldr	r3, [r7, #20]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80093d6:	f107 0210 	add.w	r2, r7, #16
 80093da:	2301      	movs	r3, #1
 80093dc:	2110      	movs	r1, #16
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff ff24 	bl	800922c <lsm6dsv16x_read_reg>
 80093e4:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80093e6:	f107 020c 	add.w	r2, r7, #12
 80093ea:	2301      	movs	r3, #1
 80093ec:	2162      	movs	r1, #98	@ 0x62
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff ff1c 	bl	800922c <lsm6dsv16x_read_reg>
 80093f4:	4602      	mov	r2, r0
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	4413      	add	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	e0ed      	b.n	80095e2 <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8009406:	7b3b      	ldrb	r3, [r7, #12]
 8009408:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800940c:	b2db      	uxtb	r3, r3
 800940e:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 8009410:	7c3b      	ldrb	r3, [r7, #16]
 8009412:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b0c      	cmp	r3, #12
 800941a:	f200 80dd 	bhi.w	80095d8 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800941e:	a201      	add	r2, pc, #4	@ (adr r2, 8009424 <lsm6dsv16x_xl_data_rate_get+0x58>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	08009459 	.word	0x08009459
 8009428:	08009461 	.word	0x08009461
 800942c:	08009469 	.word	0x08009469
 8009430:	08009471 	.word	0x08009471
 8009434:	08009495 	.word	0x08009495
 8009438:	080094b9 	.word	0x080094b9
 800943c:	080094dd 	.word	0x080094dd
 8009440:	08009501 	.word	0x08009501
 8009444:	08009525 	.word	0x08009525
 8009448:	08009549 	.word	0x08009549
 800944c:	0800956d 	.word	0x0800956d
 8009450:	08009591 	.word	0x08009591
 8009454:	080095b5 	.word	0x080095b5
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
      break;
 800945e:	e0bf      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
      break;
 8009466:	e0bb      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2202      	movs	r2, #2
 800946c:	701a      	strb	r2, [r3, #0]
      break;
 800946e:	e0b7      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009470:	7cfb      	ldrb	r3, [r7, #19]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d005      	beq.n	8009482 <lsm6dsv16x_xl_data_rate_get+0xb6>
 8009476:	2b02      	cmp	r3, #2
 8009478:	d007      	beq.n	800948a <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2203      	movs	r2, #3
 800947e:	701a      	strb	r2, [r3, #0]
          break;
 8009480:	e007      	b.n	8009492 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2213      	movs	r2, #19
 8009486:	701a      	strb	r2, [r3, #0]
          break;
 8009488:	e003      	b.n	8009492 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2223      	movs	r2, #35	@ 0x23
 800948e:	701a      	strb	r2, [r3, #0]
          break;
 8009490:	bf00      	nop
      }
      break;
 8009492:	e0a5      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009494:	7cfb      	ldrb	r3, [r7, #19]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d005      	beq.n	80094a6 <lsm6dsv16x_xl_data_rate_get+0xda>
 800949a:	2b02      	cmp	r3, #2
 800949c:	d007      	beq.n	80094ae <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2204      	movs	r2, #4
 80094a2:	701a      	strb	r2, [r3, #0]
          break;
 80094a4:	e007      	b.n	80094b6 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2214      	movs	r2, #20
 80094aa:	701a      	strb	r2, [r3, #0]
          break;
 80094ac:	e003      	b.n	80094b6 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2224      	movs	r2, #36	@ 0x24
 80094b2:	701a      	strb	r2, [r3, #0]
          break;
 80094b4:	bf00      	nop
      }
      break;
 80094b6:	e093      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 80094b8:	7cfb      	ldrb	r3, [r7, #19]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d005      	beq.n	80094ca <lsm6dsv16x_xl_data_rate_get+0xfe>
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d007      	beq.n	80094d2 <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2205      	movs	r2, #5
 80094c6:	701a      	strb	r2, [r3, #0]
          break;
 80094c8:	e007      	b.n	80094da <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2215      	movs	r2, #21
 80094ce:	701a      	strb	r2, [r3, #0]
          break;
 80094d0:	e003      	b.n	80094da <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2225      	movs	r2, #37	@ 0x25
 80094d6:	701a      	strb	r2, [r3, #0]
          break;
 80094d8:	bf00      	nop
      }
      break;
 80094da:	e081      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 80094dc:	7cfb      	ldrb	r3, [r7, #19]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d005      	beq.n	80094ee <lsm6dsv16x_xl_data_rate_get+0x122>
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d007      	beq.n	80094f6 <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2206      	movs	r2, #6
 80094ea:	701a      	strb	r2, [r3, #0]
          break;
 80094ec:	e007      	b.n	80094fe <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2216      	movs	r2, #22
 80094f2:	701a      	strb	r2, [r3, #0]
          break;
 80094f4:	e003      	b.n	80094fe <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2226      	movs	r2, #38	@ 0x26
 80094fa:	701a      	strb	r2, [r3, #0]
          break;
 80094fc:	bf00      	nop
      }
      break;
 80094fe:	e06f      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009500:	7cfb      	ldrb	r3, [r7, #19]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d005      	beq.n	8009512 <lsm6dsv16x_xl_data_rate_get+0x146>
 8009506:	2b02      	cmp	r3, #2
 8009508:	d007      	beq.n	800951a <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2207      	movs	r2, #7
 800950e:	701a      	strb	r2, [r3, #0]
          break;
 8009510:	e007      	b.n	8009522 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2217      	movs	r2, #23
 8009516:	701a      	strb	r2, [r3, #0]
          break;
 8009518:	e003      	b.n	8009522 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2227      	movs	r2, #39	@ 0x27
 800951e:	701a      	strb	r2, [r3, #0]
          break;
 8009520:	bf00      	nop
      }
      break;
 8009522:	e05d      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009524:	7cfb      	ldrb	r3, [r7, #19]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d005      	beq.n	8009536 <lsm6dsv16x_xl_data_rate_get+0x16a>
 800952a:	2b02      	cmp	r3, #2
 800952c:	d007      	beq.n	800953e <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2208      	movs	r2, #8
 8009532:	701a      	strb	r2, [r3, #0]
          break;
 8009534:	e007      	b.n	8009546 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2218      	movs	r2, #24
 800953a:	701a      	strb	r2, [r3, #0]
          break;
 800953c:	e003      	b.n	8009546 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2228      	movs	r2, #40	@ 0x28
 8009542:	701a      	strb	r2, [r3, #0]
          break;
 8009544:	bf00      	nop
      }
      break;
 8009546:	e04b      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009548:	7cfb      	ldrb	r3, [r7, #19]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d005      	beq.n	800955a <lsm6dsv16x_xl_data_rate_get+0x18e>
 800954e:	2b02      	cmp	r3, #2
 8009550:	d007      	beq.n	8009562 <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2209      	movs	r2, #9
 8009556:	701a      	strb	r2, [r3, #0]
          break;
 8009558:	e007      	b.n	800956a <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2219      	movs	r2, #25
 800955e:	701a      	strb	r2, [r3, #0]
          break;
 8009560:	e003      	b.n	800956a <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2229      	movs	r2, #41	@ 0x29
 8009566:	701a      	strb	r2, [r3, #0]
          break;
 8009568:	bf00      	nop
      }
      break;
 800956a:	e039      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 800956c:	7cfb      	ldrb	r3, [r7, #19]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d005      	beq.n	800957e <lsm6dsv16x_xl_data_rate_get+0x1b2>
 8009572:	2b02      	cmp	r3, #2
 8009574:	d007      	beq.n	8009586 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	220a      	movs	r2, #10
 800957a:	701a      	strb	r2, [r3, #0]
          break;
 800957c:	e007      	b.n	800958e <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	221a      	movs	r2, #26
 8009582:	701a      	strb	r2, [r3, #0]
          break;
 8009584:	e003      	b.n	800958e <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	222a      	movs	r2, #42	@ 0x2a
 800958a:	701a      	strb	r2, [r3, #0]
          break;
 800958c:	bf00      	nop
      }
      break;
 800958e:	e027      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009590:	7cfb      	ldrb	r3, [r7, #19]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d005      	beq.n	80095a2 <lsm6dsv16x_xl_data_rate_get+0x1d6>
 8009596:	2b02      	cmp	r3, #2
 8009598:	d007      	beq.n	80095aa <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	220b      	movs	r2, #11
 800959e:	701a      	strb	r2, [r3, #0]
          break;
 80095a0:	e007      	b.n	80095b2 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	221b      	movs	r2, #27
 80095a6:	701a      	strb	r2, [r3, #0]
          break;
 80095a8:	e003      	b.n	80095b2 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	222b      	movs	r2, #43	@ 0x2b
 80095ae:	701a      	strb	r2, [r3, #0]
          break;
 80095b0:	bf00      	nop
      }
      break;
 80095b2:	e015      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80095b4:	7cfb      	ldrb	r3, [r7, #19]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d005      	beq.n	80095c6 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d007      	beq.n	80095ce <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	220c      	movs	r2, #12
 80095c2:	701a      	strb	r2, [r3, #0]
          break;
 80095c4:	e007      	b.n	80095d6 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	221c      	movs	r2, #28
 80095ca:	701a      	strb	r2, [r3, #0]
          break;
 80095cc:	e003      	b.n	80095d6 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	222c      	movs	r2, #44	@ 0x2c
 80095d2:	701a      	strb	r2, [r3, #0]
          break;
 80095d4:	bf00      	nop
      }
      break;
 80095d6:	e003      	b.n	80095e0 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
      break;
 80095de:	bf00      	nop
  }

  return ret;
 80095e0:	697b      	ldr	r3, [r7, #20]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop

080095ec <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095f8:	f107 0210 	add.w	r2, r7, #16
 80095fc:	2301      	movs	r3, #1
 80095fe:	2111      	movs	r1, #17
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff fe13 	bl	800922c <lsm6dsv16x_read_reg>
 8009606:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	b2da      	uxtb	r2, r3
 8009610:	7c3b      	ldrb	r3, [r7, #16]
 8009612:	f362 0303 	bfi	r3, r2, #0, #4
 8009616:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009618:	f107 0210 	add.w	r2, r7, #16
 800961c:	2301      	movs	r3, #1
 800961e:	2111      	movs	r1, #17
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff fe21 	bl	8009268 <lsm6dsv16x_write_reg>
 8009626:	4602      	mov	r2, r0
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	4413      	add	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	e024      	b.n	8009682 <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	091b      	lsrs	r3, r3, #4
 800963c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800963e:	7cfb      	ldrb	r3, [r7, #19]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01d      	beq.n	8009680 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009644:	f107 020c 	add.w	r2, r7, #12
 8009648:	2301      	movs	r3, #1
 800964a:	2162      	movs	r1, #98	@ 0x62
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fded 	bl	800922c <lsm6dsv16x_read_reg>
 8009652:	4602      	mov	r2, r0
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	4413      	add	r3, r2
 8009658:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800965a:	7cfb      	ldrb	r3, [r7, #19]
 800965c:	f003 0303 	and.w	r3, r3, #3
 8009660:	b2da      	uxtb	r2, r3
 8009662:	7b3b      	ldrb	r3, [r7, #12]
 8009664:	f362 0301 	bfi	r3, r2, #0, #2
 8009668:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800966a:	f107 020c 	add.w	r2, r7, #12
 800966e:	2301      	movs	r3, #1
 8009670:	2162      	movs	r1, #98	@ 0x62
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fdf8 	bl	8009268 <lsm6dsv16x_write_reg>
 8009678:	4602      	mov	r2, r0
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	4413      	add	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009680:	697b      	ldr	r3, [r7, #20]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009696:	f107 0210 	add.w	r2, r7, #16
 800969a:	2301      	movs	r3, #1
 800969c:	2111      	movs	r1, #17
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fdc4 	bl	800922c <lsm6dsv16x_read_reg>
 80096a4:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80096a6:	f107 020c 	add.w	r2, r7, #12
 80096aa:	2301      	movs	r3, #1
 80096ac:	2162      	movs	r1, #98	@ 0x62
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fdbc 	bl	800922c <lsm6dsv16x_read_reg>
 80096b4:	4602      	mov	r2, r0
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	4413      	add	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	e0ed      	b.n	80098a2 <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 80096c6:	7b3b      	ldrb	r3, [r7, #12]
 80096c8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 80096d0:	7c3b      	ldrb	r3, [r7, #16]
 80096d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b0c      	cmp	r3, #12
 80096da:	f200 80dd 	bhi.w	8009898 <lsm6dsv16x_gy_data_rate_get+0x20c>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <lsm6dsv16x_gy_data_rate_get+0x58>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	08009719 	.word	0x08009719
 80096e8:	08009721 	.word	0x08009721
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009731 	.word	0x08009731
 80096f4:	08009755 	.word	0x08009755
 80096f8:	08009779 	.word	0x08009779
 80096fc:	0800979d 	.word	0x0800979d
 8009700:	080097c1 	.word	0x080097c1
 8009704:	080097e5 	.word	0x080097e5
 8009708:	08009809 	.word	0x08009809
 800970c:	0800982d 	.word	0x0800982d
 8009710:	08009851 	.word	0x08009851
 8009714:	08009875 	.word	0x08009875
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
      break;
 800971e:	e0bf      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2201      	movs	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
      break;
 8009726:	e0bb      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2202      	movs	r2, #2
 800972c:	701a      	strb	r2, [r3, #0]
      break;
 800972e:	e0b7      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009730:	7cfb      	ldrb	r3, [r7, #19]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d005      	beq.n	8009742 <lsm6dsv16x_gy_data_rate_get+0xb6>
 8009736:	2b02      	cmp	r3, #2
 8009738:	d007      	beq.n	800974a <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2203      	movs	r2, #3
 800973e:	701a      	strb	r2, [r3, #0]
          break;
 8009740:	e007      	b.n	8009752 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2213      	movs	r2, #19
 8009746:	701a      	strb	r2, [r3, #0]
          break;
 8009748:	e003      	b.n	8009752 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2223      	movs	r2, #35	@ 0x23
 800974e:	701a      	strb	r2, [r3, #0]
          break;
 8009750:	bf00      	nop
      }
      break;
 8009752:	e0a5      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009754:	7cfb      	ldrb	r3, [r7, #19]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d005      	beq.n	8009766 <lsm6dsv16x_gy_data_rate_get+0xda>
 800975a:	2b02      	cmp	r3, #2
 800975c:	d007      	beq.n	800976e <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2204      	movs	r2, #4
 8009762:	701a      	strb	r2, [r3, #0]
          break;
 8009764:	e007      	b.n	8009776 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2214      	movs	r2, #20
 800976a:	701a      	strb	r2, [r3, #0]
          break;
 800976c:	e003      	b.n	8009776 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2224      	movs	r2, #36	@ 0x24
 8009772:	701a      	strb	r2, [r3, #0]
          break;
 8009774:	bf00      	nop
      }
      break;
 8009776:	e093      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009778:	7cfb      	ldrb	r3, [r7, #19]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d005      	beq.n	800978a <lsm6dsv16x_gy_data_rate_get+0xfe>
 800977e:	2b02      	cmp	r3, #2
 8009780:	d007      	beq.n	8009792 <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2205      	movs	r2, #5
 8009786:	701a      	strb	r2, [r3, #0]
          break;
 8009788:	e007      	b.n	800979a <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2215      	movs	r2, #21
 800978e:	701a      	strb	r2, [r3, #0]
          break;
 8009790:	e003      	b.n	800979a <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2225      	movs	r2, #37	@ 0x25
 8009796:	701a      	strb	r2, [r3, #0]
          break;
 8009798:	bf00      	nop
      }
      break;
 800979a:	e081      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 800979c:	7cfb      	ldrb	r3, [r7, #19]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d005      	beq.n	80097ae <lsm6dsv16x_gy_data_rate_get+0x122>
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d007      	beq.n	80097b6 <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2206      	movs	r2, #6
 80097aa:	701a      	strb	r2, [r3, #0]
          break;
 80097ac:	e007      	b.n	80097be <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2216      	movs	r2, #22
 80097b2:	701a      	strb	r2, [r3, #0]
          break;
 80097b4:	e003      	b.n	80097be <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2226      	movs	r2, #38	@ 0x26
 80097ba:	701a      	strb	r2, [r3, #0]
          break;
 80097bc:	bf00      	nop
      }
      break;
 80097be:	e06f      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 80097c0:	7cfb      	ldrb	r3, [r7, #19]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d005      	beq.n	80097d2 <lsm6dsv16x_gy_data_rate_get+0x146>
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d007      	beq.n	80097da <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2207      	movs	r2, #7
 80097ce:	701a      	strb	r2, [r3, #0]
          break;
 80097d0:	e007      	b.n	80097e2 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2217      	movs	r2, #23
 80097d6:	701a      	strb	r2, [r3, #0]
          break;
 80097d8:	e003      	b.n	80097e2 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2227      	movs	r2, #39	@ 0x27
 80097de:	701a      	strb	r2, [r3, #0]
          break;
 80097e0:	bf00      	nop
      }
      break;
 80097e2:	e05d      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 80097e4:	7cfb      	ldrb	r3, [r7, #19]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d005      	beq.n	80097f6 <lsm6dsv16x_gy_data_rate_get+0x16a>
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d007      	beq.n	80097fe <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2208      	movs	r2, #8
 80097f2:	701a      	strb	r2, [r3, #0]
          break;
 80097f4:	e007      	b.n	8009806 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2218      	movs	r2, #24
 80097fa:	701a      	strb	r2, [r3, #0]
          break;
 80097fc:	e003      	b.n	8009806 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2228      	movs	r2, #40	@ 0x28
 8009802:	701a      	strb	r2, [r3, #0]
          break;
 8009804:	bf00      	nop
      }
      break;
 8009806:	e04b      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009808:	7cfb      	ldrb	r3, [r7, #19]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d005      	beq.n	800981a <lsm6dsv16x_gy_data_rate_get+0x18e>
 800980e:	2b02      	cmp	r3, #2
 8009810:	d007      	beq.n	8009822 <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2209      	movs	r2, #9
 8009816:	701a      	strb	r2, [r3, #0]
          break;
 8009818:	e007      	b.n	800982a <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2219      	movs	r2, #25
 800981e:	701a      	strb	r2, [r3, #0]
          break;
 8009820:	e003      	b.n	800982a <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2229      	movs	r2, #41	@ 0x29
 8009826:	701a      	strb	r2, [r3, #0]
          break;
 8009828:	bf00      	nop
      }
      break;
 800982a:	e039      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 800982c:	7cfb      	ldrb	r3, [r7, #19]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d005      	beq.n	800983e <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8009832:	2b02      	cmp	r3, #2
 8009834:	d007      	beq.n	8009846 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	220a      	movs	r2, #10
 800983a:	701a      	strb	r2, [r3, #0]
          break;
 800983c:	e007      	b.n	800984e <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	221a      	movs	r2, #26
 8009842:	701a      	strb	r2, [r3, #0]
          break;
 8009844:	e003      	b.n	800984e <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	222a      	movs	r2, #42	@ 0x2a
 800984a:	701a      	strb	r2, [r3, #0]
          break;
 800984c:	bf00      	nop
      }
      break;
 800984e:	e027      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009850:	7cfb      	ldrb	r3, [r7, #19]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d005      	beq.n	8009862 <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8009856:	2b02      	cmp	r3, #2
 8009858:	d007      	beq.n	800986a <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	220b      	movs	r2, #11
 800985e:	701a      	strb	r2, [r3, #0]
          break;
 8009860:	e007      	b.n	8009872 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	221b      	movs	r2, #27
 8009866:	701a      	strb	r2, [r3, #0]
          break;
 8009868:	e003      	b.n	8009872 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	222b      	movs	r2, #43	@ 0x2b
 800986e:	701a      	strb	r2, [r3, #0]
          break;
 8009870:	bf00      	nop
      }
      break;
 8009872:	e015      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009874:	7cfb      	ldrb	r3, [r7, #19]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d005      	beq.n	8009886 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 800987a:	2b02      	cmp	r3, #2
 800987c:	d007      	beq.n	800988e <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	220c      	movs	r2, #12
 8009882:	701a      	strb	r2, [r3, #0]
          break;
 8009884:	e007      	b.n	8009896 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	221c      	movs	r2, #28
 800988a:	701a      	strb	r2, [r3, #0]
          break;
 800988c:	e003      	b.n	8009896 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	222c      	movs	r2, #44	@ 0x2c
 8009892:	701a      	strb	r2, [r3, #0]
          break;
 8009894:	bf00      	nop
      }
      break;
 8009896:	e003      	b.n	80098a0 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]
      break;
 800989e:	bf00      	nop
  }

  return ret;
 80098a0:	697b      	ldr	r3, [r7, #20]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop

080098ac <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80098b8:	f107 0208 	add.w	r2, r7, #8
 80098bc:	2301      	movs	r3, #1
 80098be:	2112      	movs	r1, #18
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fcb3 	bl	800922c <lsm6dsv16x_read_reg>
 80098c6:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10f      	bne.n	80098ee <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	7a3b      	ldrb	r3, [r7, #8]
 80098d8:	f362 0382 	bfi	r3, r2, #2, #1
 80098dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80098de:	f107 0208 	add.w	r2, r7, #8
 80098e2:	2301      	movs	r3, #1
 80098e4:	2112      	movs	r1, #18
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff fcbe 	bl	8009268 <lsm6dsv16x_write_reg>
 80098ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80098ee:	68fb      	ldr	r3, [r7, #12]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009904:	f107 0208 	add.w	r2, r7, #8
 8009908:	2301      	movs	r3, #1
 800990a:	2112      	movs	r1, #18
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff fc8d 	bl	800922c <lsm6dsv16x_read_reg>
 8009912:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10f      	bne.n	800993a <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	7a3b      	ldrb	r3, [r7, #8]
 8009924:	f362 1386 	bfi	r3, r2, #6, #1
 8009928:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800992a:	f107 0208 	add.w	r2, r7, #8
 800992e:	2301      	movs	r3, #1
 8009930:	2112      	movs	r1, #18
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff fc98 	bl	8009268 <lsm6dsv16x_write_reg>
 8009938:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800993a:	68fb      	ldr	r3, [r7, #12]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009950:	f107 0208 	add.w	r2, r7, #8
 8009954:	2301      	movs	r3, #1
 8009956:	2115      	movs	r1, #21
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff fc67 	bl	800922c <lsm6dsv16x_read_reg>
 800995e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10f      	bne.n	8009986 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	f003 030f 	and.w	r3, r3, #15
 800996c:	b2da      	uxtb	r2, r3
 800996e:	7a3b      	ldrb	r3, [r7, #8]
 8009970:	f362 0303 	bfi	r3, r2, #0, #4
 8009974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009976:	f107 0208 	add.w	r2, r7, #8
 800997a:	2301      	movs	r3, #1
 800997c:	2115      	movs	r1, #21
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff fc72 	bl	8009268 <lsm6dsv16x_write_reg>
 8009984:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009986:	68fb      	ldr	r3, [r7, #12]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800999a:	f107 0208 	add.w	r2, r7, #8
 800999e:	2301      	movs	r3, #1
 80099a0:	2115      	movs	r1, #21
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fc42 	bl	800922c <lsm6dsv16x_read_reg>
 80099a8:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	e040      	b.n	8009a36 <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 80099b4:	7a3b      	ldrb	r3, [r7, #8]
 80099b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b0c      	cmp	r3, #12
 80099be:	d835      	bhi.n	8009a2c <lsm6dsv16x_gy_full_scale_get+0x9c>
 80099c0:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <lsm6dsv16x_gy_full_scale_get+0x38>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	080099fd 	.word	0x080099fd
 80099cc:	08009a05 	.word	0x08009a05
 80099d0:	08009a0d 	.word	0x08009a0d
 80099d4:	08009a15 	.word	0x08009a15
 80099d8:	08009a1d 	.word	0x08009a1d
 80099dc:	08009a2d 	.word	0x08009a2d
 80099e0:	08009a2d 	.word	0x08009a2d
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a2d 	.word	0x08009a2d
 80099ec:	08009a2d 	.word	0x08009a2d
 80099f0:	08009a2d 	.word	0x08009a2d
 80099f4:	08009a2d 	.word	0x08009a2d
 80099f8:	08009a25 	.word	0x08009a25
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
      break;
 8009a02:	e017      	b.n	8009a34 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2201      	movs	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	e013      	b.n	8009a34 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	701a      	strb	r2, [r3, #0]
      break;
 8009a12:	e00f      	b.n	8009a34 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2203      	movs	r2, #3
 8009a18:	701a      	strb	r2, [r3, #0]
      break;
 8009a1a:	e00b      	b.n	8009a34 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2204      	movs	r2, #4
 8009a20:	701a      	strb	r2, [r3, #0]
      break;
 8009a22:	e007      	b.n	8009a34 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	220c      	movs	r2, #12
 8009a28:	701a      	strb	r2, [r3, #0]
      break;
 8009a2a:	e003      	b.n	8009a34 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
      break;
 8009a32:	bf00      	nop
  }

  return ret;
 8009a34:	68fb      	ldr	r3, [r7, #12]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop

08009a40 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a4c:	f107 0208 	add.w	r2, r7, #8
 8009a50:	2301      	movs	r3, #1
 8009a52:	2117      	movs	r1, #23
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff fbe9 	bl	800922c <lsm6dsv16x_read_reg>
 8009a5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10f      	bne.n	8009a82 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	7a3b      	ldrb	r3, [r7, #8]
 8009a6c:	f362 0301 	bfi	r3, r2, #0, #2
 8009a70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a72:	f107 0208 	add.w	r2, r7, #8
 8009a76:	2301      	movs	r3, #1
 8009a78:	2117      	movs	r1, #23
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fbf4 	bl	8009268 <lsm6dsv16x_write_reg>
 8009a80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a82:	68fb      	ldr	r3, [r7, #12]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a96:	f107 0208 	add.w	r2, r7, #8
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	2117      	movs	r1, #23
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff fbc4 	bl	800922c <lsm6dsv16x_read_reg>
 8009aa4:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	e026      	b.n	8009afe <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8009ab0:	7a3b      	ldrb	r3, [r7, #8]
 8009ab2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d81b      	bhi.n	8009af4 <lsm6dsv16x_xl_full_scale_get+0x68>
 8009abc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac4 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009add 	.word	0x08009add
 8009acc:	08009ae5 	.word	0x08009ae5
 8009ad0:	08009aed 	.word	0x08009aed
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
      break;
 8009ada:	e00f      	b.n	8009afc <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	701a      	strb	r2, [r3, #0]
      break;
 8009ae2:	e00b      	b.n	8009afc <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	701a      	strb	r2, [r3, #0]
      break;
 8009aea:	e007      	b.n	8009afc <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2203      	movs	r2, #3
 8009af0:	701a      	strb	r2, [r3, #0]
      break;
 8009af2:	e003      	b.n	8009afc <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
      break;
 8009afa:	bf00      	nop
  }

  return ret;
 8009afc:	68fb      	ldr	r3, [r7, #12]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop

08009b08 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009b12:	f107 020c 	add.w	r2, r7, #12
 8009b16:	2306      	movs	r3, #6
 8009b18:	2122      	movs	r1, #34	@ 0x22
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fb86 	bl	800922c <lsm6dsv16x_read_reg>
 8009b20:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	e036      	b.n	8009b9a <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009b2c:	7b7b      	ldrb	r3, [r7, #13]
 8009b2e:	b21a      	sxth	r2, r3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	7b3a      	ldrb	r2, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	b21a      	sxth	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009b4c:	7bfa      	ldrb	r2, [r7, #15]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	3302      	adds	r3, #2
 8009b52:	b212      	sxth	r2, r2
 8009b54:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	3302      	adds	r3, #2
 8009b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	7bba      	ldrb	r2, [r7, #14]
 8009b66:	4413      	add	r3, r2
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	3302      	adds	r3, #2
 8009b6e:	b212      	sxth	r2, r2
 8009b70:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009b72:	7c7a      	ldrb	r2, [r7, #17]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	3304      	adds	r3, #4
 8009b78:	b212      	sxth	r2, r2
 8009b7a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	021b      	lsls	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	7c3a      	ldrb	r2, [r7, #16]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	3304      	adds	r3, #4
 8009b94:	b212      	sxth	r2, r2
 8009b96:	801a      	strh	r2, [r3, #0]

  return ret;
 8009b98:	697b      	ldr	r3, [r7, #20]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b086      	sub	sp, #24
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8009bac:	f107 020c 	add.w	r2, r7, #12
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	2128      	movs	r1, #40	@ 0x28
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fb39 	bl	800922c <lsm6dsv16x_read_reg>
 8009bba:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	e036      	b.n	8009c34 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009bc6:	7b7b      	ldrb	r3, [r7, #13]
 8009bc8:	b21a      	sxth	r2, r3
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	7b3a      	ldrb	r2, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	b21a      	sxth	r2, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009be6:	7bfa      	ldrb	r2, [r7, #15]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	3302      	adds	r3, #2
 8009bec:	b212      	sxth	r2, r2
 8009bee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	3302      	adds	r3, #2
 8009bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	7bba      	ldrb	r2, [r7, #14]
 8009c00:	4413      	add	r3, r2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	3302      	adds	r3, #2
 8009c08:	b212      	sxth	r2, r2
 8009c0a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009c0c:	7c7a      	ldrb	r2, [r7, #17]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	3304      	adds	r3, #4
 8009c12:	b212      	sxth	r2, r2
 8009c14:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	7c3a      	ldrb	r2, [r7, #16]
 8009c26:	4413      	add	r3, r2
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	b212      	sxth	r2, r2
 8009c30:	801a      	strh	r2, [r3, #0]

  return ret;
 8009c32:	697b      	ldr	r3, [r7, #20]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009c48:	f107 0208 	add.w	r2, r7, #8
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	210a      	movs	r1, #10
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff faeb 	bl	800922c <lsm6dsv16x_read_reg>
 8009c56:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10f      	bne.n	8009c7e <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	7a3b      	ldrb	r3, [r7, #8]
 8009c68:	f362 0302 	bfi	r3, r2, #0, #3
 8009c6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009c6e:	f107 0208 	add.w	r2, r7, #8
 8009c72:	2301      	movs	r3, #1
 8009c74:	210a      	movs	r1, #10
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff faf6 	bl	8009268 <lsm6dsv16x_write_reg>
 8009c7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009c92:	f107 0208 	add.w	r2, r7, #8
 8009c96:	2301      	movs	r3, #1
 8009c98:	2116      	movs	r1, #22
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff fac6 	bl	800922c <lsm6dsv16x_read_reg>
 8009ca0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10f      	bne.n	8009cc8 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8009ca8:	783b      	ldrb	r3, [r7, #0]
 8009caa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	7a3b      	ldrb	r3, [r7, #8]
 8009cb2:	f362 13c7 	bfi	r3, r2, #7, #1
 8009cb6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009cb8:	f107 0208 	add.w	r2, r7, #8
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	2116      	movs	r1, #22
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff fad1 	bl	8009268 <lsm6dsv16x_write_reg>
 8009cc6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d103      	bne.n	8009cec <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e034      	b.n	8009d56 <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	689a      	ldr	r2, [r3, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	7b1a      	ldrb	r2, [r3, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	695a      	ldr	r2, [r3, #20]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a0e      	ldr	r2, [pc, #56]	@ (8009d60 <SHT40AD1B_RegisterBusIO+0x8c>)
 8009d28:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8009d64 <SHT40AD1B_RegisterBusIO+0x90>)
 8009d2e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	69da      	ldr	r2, [r3, #28]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	e002      	b.n	8009d56 <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8009d50:	f04f 33ff 	mov.w	r3, #4294967295
 8009d54:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009d56:	68fb      	ldr	r3, [r7, #12]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	08009fe5 	.word	0x08009fe5
 8009d64:	0800a025 	.word	0x0800a025

08009d68 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f04f 0200 	mov.w	r2, #0
 8009d7e:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3320      	adds	r3, #32
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fa23 	bl	800a210 <sht40ad1b_device_id_get>
 8009dca:	4603      	mov	r3, r0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2201      	movs	r2, #1
 8009de2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2200      	movs	r2, #0
 8009de8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2201      	movs	r2, #1
 8009dee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2200      	movs	r2, #0
 8009df4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	f04f 0200 	mov.w	r2, #0
 8009e02:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f04f 0200 	mov.w	r2, #0
 8009e12:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	f04f 0200 	mov.w	r2, #0
 8009e1a:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e004      	b.n	8009e4a <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	e004      	b.n	8009e76 <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f86f 	bl	8009faa <GetData>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	e004      	b.n	8009ee2 <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d101      	bne.n	8009f00 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	e004      	b.n	8009f0a <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	e004      	b.n	8009f36 <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f80f 	bl	8009faa <GetData>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295
 8009f96:	e004      	b.n	8009fa2 <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3320      	adds	r3, #32
 8009fb6:	f107 0208 	add.w	r2, r7, #8
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 f881 	bl	800a0c4 <sht40ad1b_data_get>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 8009fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fcc:	e006      	b.n	8009fdc <GetData+0x32>
  }

  pObj->hum_value = data[0];
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	72fb      	strb	r3, [r7, #11]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	7b12      	ldrb	r2, [r2, #12]
 800a00c:	4610      	mov	r0, r2
 800a00e:	893a      	ldrh	r2, [r7, #8]
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4798      	blx	r3
 800a014:	4603      	mov	r3, r0
 800a016:	e001      	b.n	800a01c <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a018:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	461a      	mov	r2, r3
 800a030:	460b      	mov	r3, r1
 800a032:	72fb      	strb	r3, [r7, #11]
 800a034:	4613      	mov	r3, r2
 800a036:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d109      	bne.n	800a058 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	7b12      	ldrb	r2, [r2, #12]
 800a04c:	4610      	mov	r0, r2
 800a04e:	893a      	ldrh	r2, [r7, #8]
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4798      	blx	r3
 800a054:	4603      	mov	r3, r0
 800a056:	e001      	b.n	800a05c <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a058:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	461a      	mov	r2, r3
 800a070:	460b      	mov	r3, r1
 800a072:	72fb      	strb	r3, [r7, #11]
 800a074:	4613      	mov	r3, r2
 800a076:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685c      	ldr	r4, [r3, #4]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68d8      	ldr	r0, [r3, #12]
 800a080:	893b      	ldrh	r3, [r7, #8]
 800a082:	7af9      	ldrb	r1, [r7, #11]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	47a0      	blx	r4
 800a088:	6178      	str	r0, [r7, #20]

  return ret;
 800a08a:	697b      	ldr	r3, [r7, #20]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	371c      	adds	r7, #28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd90      	pop	{r4, r7, pc}

0800a094 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	607a      	str	r2, [r7, #4]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	72fb      	strb	r3, [r7, #11]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681c      	ldr	r4, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	68d8      	ldr	r0, [r3, #12]
 800a0b0:	893b      	ldrh	r3, [r7, #8]
 800a0b2:	7af9      	ldrb	r1, [r7, #11]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	47a0      	blx	r4
 800a0b8:	6178      	str	r0, [r7, #20]

  return ret;
 800a0ba:	697b      	ldr	r3, [r7, #20]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd90      	pop	{r4, r7, pc}

0800a0c4 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800a0ce:	23fd      	movs	r3, #253	@ 0xfd
 800a0d0:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800a0dc:	f107 020f 	add.w	r2, r7, #15
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff ffd5 	bl	800a094 <sht40ad1b_write_reg>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <sht40ad1b_data_get+0x30>
  {
    return 1;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e07d      	b.n	800a1f0 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	200a      	movs	r0, #10
 800a0fa:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800a0fc:	f107 0208 	add.w	r2, r7, #8
 800a100:	2306      	movs	r3, #6
 800a102:	2100      	movs	r1, #0
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff ffad 	bl	800a064 <sht40ad1b_read_reg>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <sht40ad1b_data_get+0x50>
  {
    return 1;
 800a110:	2301      	movs	r3, #1
 800a112:	e06d      	b.n	800a1f0 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800a114:	7a3b      	ldrb	r3, [r7, #8]
 800a116:	021b      	lsls	r3, r3, #8
 800a118:	b29b      	uxth	r3, r3
 800a11a:	7a7a      	ldrb	r2, [r7, #9]
 800a11c:	4413      	add	r3, r2
 800a11e:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800a120:	7abb      	ldrb	r3, [r7, #10]
 800a122:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	b29b      	uxth	r3, r3
 800a12a:	7b3a      	ldrb	r2, [r7, #12]
 800a12c:	4413      	add	r3, r2
 800a12e:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800a130:	7b7b      	ldrb	r3, [r7, #13]
 800a132:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800a134:	7f7a      	ldrb	r2, [r7, #29]
 800a136:	f107 0308 	add.w	r3, r7, #8
 800a13a:	2102      	movs	r1, #2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 f8b3 	bl	800a2a8 <crc_check>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <sht40ad1b_data_get+0x88>
  {
    return 1;
 800a148:	2301      	movs	r3, #1
 800a14a:	e051      	b.n	800a1f0 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800a14c:	7e7a      	ldrb	r2, [r7, #25]
 800a14e:	f107 0308 	add.w	r3, r7, #8
 800a152:	3303      	adds	r3, #3
 800a154:	2102      	movs	r1, #2
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f8a6 	bl	800a2a8 <crc_check>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <sht40ad1b_data_get+0xa2>
  {
    return 1;
 800a162:	2301      	movs	r3, #1
 800a164:	e044      	b.n	800a1f0 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800a166:	8bfb      	ldrh	r3, [r7, #30]
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a170:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a1f8 <sht40ad1b_data_get+0x134>
 800a174:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a178:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a1fc <sht40ad1b_data_get+0x138>
 800a17c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a180:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a200 <sht40ad1b_data_get+0x13c>
 800a184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a188:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800a18c:	8b7b      	ldrh	r3, [r7, #26]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a204 <sht40ad1b_data_get+0x140>
 800a19a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a19e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a1fc <sht40ad1b_data_get+0x138>
 800a1a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1a6:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a1aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1ae:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800a1b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1b6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a208 <sht40ad1b_data_get+0x144>
 800a1ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c2:	dd01      	ble.n	800a1c8 <sht40ad1b_data_get+0x104>
 800a1c4:	4b11      	ldr	r3, [pc, #68]	@ (800a20c <sht40ad1b_data_get+0x148>)
 800a1c6:	e00a      	b.n	800a1de <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 800a1c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d4:	d502      	bpl.n	800a1dc <sht40ad1b_data_get+0x118>
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	e000      	b.n	800a1de <sht40ad1b_data_get+0x11a>
 800a1dc:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800a1de:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	601a      	str	r2, [r3, #0]
  return 0;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	432f0000 	.word	0x432f0000
 800a1fc:	477fff00 	.word	0x477fff00
 800a200:	42340000 	.word	0x42340000
 800a204:	42fa0000 	.word	0x42fa0000
 800a208:	42c80000 	.word	0x42c80000
 800a20c:	42c80000 	.word	0x42c80000

0800a210 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
  return 0;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	460b      	mov	r3, r1
 800a238:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800a23a:	2331      	movs	r3, #49	@ 0x31
 800a23c:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800a23e:	23ff      	movs	r3, #255	@ 0xff
 800a240:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800a242:	2300      	movs	r3, #0
 800a244:	81bb      	strh	r3, [r7, #12]
 800a246:	e024      	b.n	800a292 <crc_calculate+0x64>
  {
    crc ^= data[index];
 800a248:	89bb      	ldrh	r3, [r7, #12]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	4413      	add	r3, r2
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	4053      	eors	r3, r2
 800a254:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a256:	2308      	movs	r3, #8
 800a258:	72fb      	strb	r3, [r7, #11]
 800a25a:	e014      	b.n	800a286 <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800a25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a260:	2b00      	cmp	r3, #0
 800a262:	da09      	bge.n	800a278 <crc_calculate+0x4a>
 800a264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	b25a      	sxtb	r2, r3
 800a26c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a270:	4053      	eors	r3, r2
 800a272:	b25b      	sxtb	r3, r3
 800a274:	b2db      	uxtb	r3, r3
 800a276:	e002      	b.n	800a27e <crc_calculate+0x50>
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	3b01      	subs	r3, #1
 800a284:	72fb      	strb	r3, [r7, #11]
 800a286:	7afb      	ldrb	r3, [r7, #11]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e7      	bne.n	800a25c <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800a28c:	89bb      	ldrh	r3, [r7, #12]
 800a28e:	3301      	adds	r3, #1
 800a290:	81bb      	strh	r3, [r7, #12]
 800a292:	89ba      	ldrh	r2, [r7, #12]
 800a294:	887b      	ldrh	r3, [r7, #2]
 800a296:	429a      	cmp	r2, r3
 800a298:	d3d6      	bcc.n	800a248 <crc_calculate+0x1a>
    }
  }

  return crc;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	807b      	strh	r3, [r7, #2]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800a2b8:	887b      	ldrh	r3, [r7, #2]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff ffb6 	bl	800a22e <crc_calculate>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	787b      	ldrb	r3, [r7, #1]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	bf14      	ite	ne
 800a2cc:	2301      	movne	r3, #1
 800a2ce:	2300      	moveq	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800a2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	e034      	b.n	800a35e <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	7b1a      	ldrb	r2, [r3, #12]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	691a      	ldr	r2, [r3, #16]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	695a      	ldr	r2, [r3, #20]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	699a      	ldr	r2, [r3, #24]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a0e      	ldr	r2, [pc, #56]	@ (800a368 <STTS22H_RegisterBusIO+0x8c>)
 800a330:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a0d      	ldr	r2, [pc, #52]	@ (800a36c <STTS22H_RegisterBusIO+0x90>)
 800a336:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d004      	beq.n	800a358 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4798      	blx	r3
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	e002      	b.n	800a35e <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800a358:	f04f 33ff 	mov.w	r3, #4294967295
 800a35c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a35e:	68fb      	ldr	r3, [r7, #12]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	0800a779 	.word	0x0800a779
 800a36c:	0800a7e7 	.word	0x0800a7e7

0800a370 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d127      	bne.n	800a3d2 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a388:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3320      	adds	r3, #32
 800a38e:	2101      	movs	r1, #1
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fbad 	bl	800aaf0 <stts22h_block_data_update_set>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800a39c:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a0:	e01c      	b.n	800a3dc <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3320      	adds	r3, #32
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fbfa 	bl	800aba2 <stts22h_auto_increment_set>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800a3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b8:	e010      	b.n	800a3dc <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3320      	adds	r3, #32
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fa9d 	bl	800a900 <stts22h_temp_data_rate_set>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d0:	e004      	b.n	800a3dc <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d108      	bne.n	800a408 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f878 	bl	800a4ec <STTS22H_TEMP_Disable>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	e004      	b.n	800a412 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3320      	adds	r3, #32
 800a428:	f107 020f 	add.w	r2, r7, #15
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fba6 	bl	800ab80 <stts22h_dev_id_get>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a43a:	f04f 33ff 	mov.w	r3, #4294967295
 800a43e:	e003      	b.n	800a448 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a440:	7bfa      	ldrb	r2, [r7, #15]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2200      	movs	r2, #0
 800a45e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2200      	movs	r2, #0
 800a470:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2200      	movs	r2, #0
 800a476:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	4a08      	ldr	r2, [pc, #32]	@ (800a4a4 <STTS22H_GetCapabilities+0x54>)
 800a484:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	f04f 0200 	mov.w	r2, #0
 800a494:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	43480000 	.word	0x43480000

0800a4a8 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e012      	b.n	800a4e4 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f8e9 	bl	800a6a0 <STTS22H_TEMP_SetOutputDataRate>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d8:	e004      	b.n	800a4e4 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e01c      	b.n	800a53c <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3334      	adds	r3, #52	@ 0x34
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f81b 	bl	800a544 <STTS22H_TEMP_GetOutputDataRate>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	e010      	b.n	800a53c <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3320      	adds	r3, #32
 800a51e:	2100      	movs	r1, #0
 800a520:	4618      	mov	r0, r3
 800a522:	f000 f9ed 	bl	800a900 <stts22h_temp_data_rate_set>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
 800a530:	e004      	b.n	800a53c <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3320      	adds	r3, #32
 800a556:	f107 020b 	add.w	r2, r7, #11
 800a55a:	4611      	mov	r1, r2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fa11 	bl	800a984 <stts22h_temp_data_rate_get>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a568:	f04f 33ff 	mov.w	r3, #4294967295
 800a56c:	e08b      	b.n	800a686 <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	2b32      	cmp	r3, #50	@ 0x32
 800a572:	f200 8083 	bhi.w	800a67c <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a576:	a201      	add	r2, pc, #4	@ (adr r2, 800a57c <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a649 	.word	0x0800a649
 800a580:	0800a649 	.word	0x0800a649
 800a584:	0800a65d 	.word	0x0800a65d
 800a588:	0800a67d 	.word	0x0800a67d
 800a58c:	0800a653 	.word	0x0800a653
 800a590:	0800a67d 	.word	0x0800a67d
 800a594:	0800a67d 	.word	0x0800a67d
 800a598:	0800a67d 	.word	0x0800a67d
 800a59c:	0800a67d 	.word	0x0800a67d
 800a5a0:	0800a67d 	.word	0x0800a67d
 800a5a4:	0800a67d 	.word	0x0800a67d
 800a5a8:	0800a67d 	.word	0x0800a67d
 800a5ac:	0800a67d 	.word	0x0800a67d
 800a5b0:	0800a67d 	.word	0x0800a67d
 800a5b4:	0800a67d 	.word	0x0800a67d
 800a5b8:	0800a67d 	.word	0x0800a67d
 800a5bc:	0800a67d 	.word	0x0800a67d
 800a5c0:	0800a67d 	.word	0x0800a67d
 800a5c4:	0800a665 	.word	0x0800a665
 800a5c8:	0800a67d 	.word	0x0800a67d
 800a5cc:	0800a67d 	.word	0x0800a67d
 800a5d0:	0800a67d 	.word	0x0800a67d
 800a5d4:	0800a67d 	.word	0x0800a67d
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a67d 	.word	0x0800a67d
 800a5e0:	0800a67d 	.word	0x0800a67d
 800a5e4:	0800a67d 	.word	0x0800a67d
 800a5e8:	0800a67d 	.word	0x0800a67d
 800a5ec:	0800a67d 	.word	0x0800a67d
 800a5f0:	0800a67d 	.word	0x0800a67d
 800a5f4:	0800a67d 	.word	0x0800a67d
 800a5f8:	0800a67d 	.word	0x0800a67d
 800a5fc:	0800a67d 	.word	0x0800a67d
 800a600:	0800a67d 	.word	0x0800a67d
 800a604:	0800a66d 	.word	0x0800a66d
 800a608:	0800a67d 	.word	0x0800a67d
 800a60c:	0800a67d 	.word	0x0800a67d
 800a610:	0800a67d 	.word	0x0800a67d
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a67d 	.word	0x0800a67d
 800a620:	0800a67d 	.word	0x0800a67d
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a67d 	.word	0x0800a67d
 800a634:	0800a67d 	.word	0x0800a67d
 800a638:	0800a67d 	.word	0x0800a67d
 800a63c:	0800a67d 	.word	0x0800a67d
 800a640:	0800a67d 	.word	0x0800a67d
 800a644:	0800a675 	.word	0x0800a675
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f04f 0200 	mov.w	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]
      break;
 800a650:	e018      	b.n	800a684 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a658:	601a      	str	r2, [r3, #0]
      break;
 800a65a:	e013      	b.n	800a684 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	4a0c      	ldr	r2, [pc, #48]	@ (800a690 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800a660:	601a      	str	r2, [r3, #0]
      break;
 800a662:	e00f      	b.n	800a684 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	4a0b      	ldr	r2, [pc, #44]	@ (800a694 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800a668:	601a      	str	r2, [r3, #0]
      break;
 800a66a:	e00b      	b.n	800a684 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	4a0a      	ldr	r2, [pc, #40]	@ (800a698 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800a670:	601a      	str	r2, [r3, #0]
      break;
 800a672:	e007      	b.n	800a684 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	4a09      	ldr	r2, [pc, #36]	@ (800a69c <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800a678:	601a      	str	r2, [r3, #0]
      break;
 800a67a:	e003      	b.n	800a684 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800a67c:	f04f 33ff 	mov.w	r3, #4294967295
 800a680:	60fb      	str	r3, [r7, #12]
      break;
 800a682:	bf00      	nop
  }

  return ret;
 800a684:	68fb      	ldr	r3, [r7, #12]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	41c80000 	.word	0x41c80000
 800a694:	42480000 	.word	0x42480000
 800a698:	42c80000 	.word	0x42c80000
 800a69c:	43480000 	.word	0x43480000

0800a6a0 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800a6ac:	edd7 7a00 	vldr	s15, [r7]
 800a6b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6bc:	d801      	bhi.n	800a6c2 <STTS22H_TEMP_SetOutputDataRate+0x22>
 800a6be:	2304      	movs	r3, #4
 800a6c0:	e021      	b.n	800a706 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6c2:	edd7 7a00 	vldr	s15, [r7]
 800a6c6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800a6ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d2:	d801      	bhi.n	800a6d8 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e016      	b.n	800a706 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6d8:	edd7 7a00 	vldr	s15, [r7]
 800a6dc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a72c <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800a6e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e8:	d801      	bhi.n	800a6ee <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800a6ea:	2312      	movs	r3, #18
 800a6ec:	e00b      	b.n	800a706 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6ee:	edd7 7a00 	vldr	s15, [r7]
 800a6f2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a730 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800a6f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fe:	d801      	bhi.n	800a704 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800a700:	2322      	movs	r3, #34	@ 0x22
 800a702:	e000      	b.n	800a706 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a704:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800a706:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3320      	adds	r3, #32
 800a70c:	7bfa      	ldrb	r2, [r7, #15]
 800a70e:	4611      	mov	r1, r2
 800a710:	4618      	mov	r0, r3
 800a712:	f000 f8f5 	bl	800a900 <stts22h_temp_data_rate_set>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	e000      	b.n	800a724 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	42480000 	.word	0x42480000
 800a730:	42c80000 	.word	0x42c80000

0800a734 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3320      	adds	r3, #32
 800a742:	f107 020e 	add.w	r2, r7, #14
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f9f7 	bl	800ab3c <stts22h_temperature_raw_get>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800a754:	f04f 33ff 	mov.w	r3, #4294967295
 800a758:	e00a      	b.n	800a770 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800a75a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 f8b4 	bl	800a8cc <stts22h_from_lsb_to_celsius>
 800a764:	eef0 7a40 	vmov.f32	s15, s0
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b089      	sub	sp, #36	@ 0x24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	461a      	mov	r2, r3
 800a784:	460b      	mov	r3, r1
 800a786:	72fb      	strb	r3, [r7, #11]
 800a788:	4613      	mov	r3, r2
 800a78a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d11f      	bne.n	800a7dc <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a79c:	2300      	movs	r3, #0
 800a79e:	83fb      	strh	r3, [r7, #30]
 800a7a0:	e018      	b.n	800a7d4 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	695c      	ldr	r4, [r3, #20]
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	7b1b      	ldrb	r3, [r3, #12]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	7afb      	ldrb	r3, [r7, #11]
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	8bfb      	ldrh	r3, [r7, #30]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	b299      	uxth	r1, r3
 800a7b6:	8bfb      	ldrh	r3, [r7, #30]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	441a      	add	r2, r3
 800a7bc:	2301      	movs	r3, #1
 800a7be:	47a0      	blx	r4
 800a7c0:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7cc:	e007      	b.n	800a7de <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a7ce:	8bfb      	ldrh	r3, [r7, #30]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	83fb      	strh	r3, [r7, #30]
 800a7d4:	8bfa      	ldrh	r2, [r7, #30]
 800a7d6:	893b      	ldrh	r3, [r7, #8]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d3e2      	bcc.n	800a7a2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3724      	adds	r7, #36	@ 0x24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd90      	pop	{r4, r7, pc}

0800a7e6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a7e6:	b590      	push	{r4, r7, lr}
 800a7e8:	b089      	sub	sp, #36	@ 0x24
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	72fb      	strb	r3, [r7, #11]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d11f      	bne.n	800a84a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a80a:	2300      	movs	r3, #0
 800a80c:	83fb      	strh	r3, [r7, #30]
 800a80e:	e018      	b.n	800a842 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	691c      	ldr	r4, [r3, #16]
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	7b1b      	ldrb	r3, [r3, #12]
 800a818:	4618      	mov	r0, r3
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	8bfb      	ldrh	r3, [r7, #30]
 800a820:	4413      	add	r3, r2
 800a822:	b299      	uxth	r1, r3
 800a824:	8bfb      	ldrh	r3, [r7, #30]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	441a      	add	r2, r3
 800a82a:	2301      	movs	r3, #1
 800a82c:	47a0      	blx	r4
 800a82e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a836:	f04f 33ff 	mov.w	r3, #4294967295
 800a83a:	e007      	b.n	800a84c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a83c:	8bfb      	ldrh	r3, [r7, #30]
 800a83e:	3301      	adds	r3, #1
 800a840:	83fb      	strh	r3, [r7, #30]
 800a842:	8bfa      	ldrh	r2, [r7, #30]
 800a844:	893b      	ldrh	r3, [r7, #8]
 800a846:	429a      	cmp	r2, r3
 800a848:	d3e2      	bcc.n	800a810 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a84a:	69bb      	ldr	r3, [r7, #24]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3724      	adds	r7, #36	@ 0x24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd90      	pop	{r4, r7, pc}

0800a854 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	461a      	mov	r2, r3
 800a860:	460b      	mov	r3, r1
 800a862:	72fb      	strb	r3, [r7, #11]
 800a864:	4613      	mov	r3, r2
 800a866:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <stts22h_read_reg+0x20>
 800a86e:	f04f 33ff 	mov.w	r3, #4294967295
 800a872:	e009      	b.n	800a888 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	685c      	ldr	r4, [r3, #4]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	68d8      	ldr	r0, [r3, #12]
 800a87c:	893b      	ldrh	r3, [r7, #8]
 800a87e:	7af9      	ldrb	r1, [r7, #11]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	47a0      	blx	r4
 800a884:	6178      	str	r0, [r7, #20]

  return ret;
 800a886:	697b      	ldr	r3, [r7, #20]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	371c      	adds	r7, #28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd90      	pop	{r4, r7, pc}

0800a890 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	461a      	mov	r2, r3
 800a89c:	460b      	mov	r3, r1
 800a89e:	72fb      	strb	r3, [r7, #11]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <stts22h_write_reg+0x20>
 800a8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ae:	e009      	b.n	800a8c4 <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681c      	ldr	r4, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	68d8      	ldr	r0, [r3, #12]
 800a8b8:	893b      	ldrh	r3, [r7, #8]
 800a8ba:	7af9      	ldrb	r1, [r7, #11]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	47a0      	blx	r4
 800a8c0:	6178      	str	r0, [r7, #20]

  return ret;
 800a8c2:	697b      	ldr	r3, [r7, #20]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	371c      	adds	r7, #28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd90      	pop	{r4, r7, pc}

0800a8cc <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800a8d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8e2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a8fc <stts22h_from_lsb_to_celsius+0x30>
 800a8e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8ea:	eef0 7a66 	vmov.f32	s15, s13
}
 800a8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	42c80000 	.word	0x42c80000

0800a900 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a90c:	f107 0208 	add.w	r2, r7, #8
 800a910:	2301      	movs	r3, #1
 800a912:	2104      	movs	r1, #4
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff ff9d 	bl	800a854 <stts22h_read_reg>
 800a91a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d12a      	bne.n	800a978 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800a922:	78fb      	ldrb	r3, [r7, #3]
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	7a3b      	ldrb	r3, [r7, #8]
 800a92c:	f362 0300 	bfi	r3, r2, #0, #1
 800a930:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800a932:	78fb      	ldrb	r3, [r7, #3]
 800a934:	085b      	lsrs	r3, r3, #1
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	7a3b      	ldrb	r3, [r7, #8]
 800a93e:	f362 0382 	bfi	r3, r2, #2, #1
 800a942:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	089b      	lsrs	r3, r3, #2
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	7a3b      	ldrb	r3, [r7, #8]
 800a950:	f362 13c7 	bfi	r3, r2, #7, #1
 800a954:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800a956:	78fb      	ldrb	r3, [r7, #3]
 800a958:	091b      	lsrs	r3, r3, #4
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	7a3b      	ldrb	r3, [r7, #8]
 800a962:	f362 1305 	bfi	r3, r2, #4, #2
 800a966:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a968:	f107 0208 	add.w	r2, r7, #8
 800a96c:	2301      	movs	r3, #1
 800a96e:	2104      	movs	r1, #4
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff ff8d 	bl	800a890 <stts22h_write_reg>
 800a976:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a978:	68fb      	ldr	r3, [r7, #12]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800a98e:	f107 0208 	add.w	r2, r7, #8
 800a992:	2301      	movs	r3, #1
 800a994:	2104      	movs	r1, #4
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ff5c 	bl	800a854 <stts22h_read_reg>
 800a99c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a99e:	7a3b      	ldrb	r3, [r7, #8]
 800a9a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	7a3b      	ldrb	r3, [r7, #8]
 800a9aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	7a3b      	ldrb	r3, [r7, #8]
 800a9b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800a9c0:	7a3b      	ldrb	r3, [r7, #8]
 800a9c2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	011b      	lsls	r3, r3, #4
                                                 2) |
 800a9ca:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a9cc:	2b32      	cmp	r3, #50	@ 0x32
 800a9ce:	f200 8085 	bhi.w	800aadc <stts22h_temp_data_rate_get+0x158>
 800a9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d8 <stts22h_temp_data_rate_get+0x54>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aaa5 	.word	0x0800aaa5
 800a9dc:	0800aaad 	.word	0x0800aaad
 800a9e0:	0800aabd 	.word	0x0800aabd
 800a9e4:	0800aadd 	.word	0x0800aadd
 800a9e8:	0800aab5 	.word	0x0800aab5
 800a9ec:	0800aadd 	.word	0x0800aadd
 800a9f0:	0800aadd 	.word	0x0800aadd
 800a9f4:	0800aadd 	.word	0x0800aadd
 800a9f8:	0800aadd 	.word	0x0800aadd
 800a9fc:	0800aadd 	.word	0x0800aadd
 800aa00:	0800aadd 	.word	0x0800aadd
 800aa04:	0800aadd 	.word	0x0800aadd
 800aa08:	0800aadd 	.word	0x0800aadd
 800aa0c:	0800aadd 	.word	0x0800aadd
 800aa10:	0800aadd 	.word	0x0800aadd
 800aa14:	0800aadd 	.word	0x0800aadd
 800aa18:	0800aadd 	.word	0x0800aadd
 800aa1c:	0800aadd 	.word	0x0800aadd
 800aa20:	0800aac5 	.word	0x0800aac5
 800aa24:	0800aadd 	.word	0x0800aadd
 800aa28:	0800aadd 	.word	0x0800aadd
 800aa2c:	0800aadd 	.word	0x0800aadd
 800aa30:	0800aadd 	.word	0x0800aadd
 800aa34:	0800aadd 	.word	0x0800aadd
 800aa38:	0800aadd 	.word	0x0800aadd
 800aa3c:	0800aadd 	.word	0x0800aadd
 800aa40:	0800aadd 	.word	0x0800aadd
 800aa44:	0800aadd 	.word	0x0800aadd
 800aa48:	0800aadd 	.word	0x0800aadd
 800aa4c:	0800aadd 	.word	0x0800aadd
 800aa50:	0800aadd 	.word	0x0800aadd
 800aa54:	0800aadd 	.word	0x0800aadd
 800aa58:	0800aadd 	.word	0x0800aadd
 800aa5c:	0800aadd 	.word	0x0800aadd
 800aa60:	0800aacd 	.word	0x0800aacd
 800aa64:	0800aadd 	.word	0x0800aadd
 800aa68:	0800aadd 	.word	0x0800aadd
 800aa6c:	0800aadd 	.word	0x0800aadd
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800aadd 	.word	0x0800aadd
 800aa78:	0800aadd 	.word	0x0800aadd
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	0800aadd 	.word	0x0800aadd
 800aa84:	0800aadd 	.word	0x0800aadd
 800aa88:	0800aadd 	.word	0x0800aadd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aadd 	.word	0x0800aadd
 800aa94:	0800aadd 	.word	0x0800aadd
 800aa98:	0800aadd 	.word	0x0800aadd
 800aa9c:	0800aadd 	.word	0x0800aadd
 800aaa0:	0800aad5 	.word	0x0800aad5
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
      break;
 800aaaa:	e01b      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2201      	movs	r2, #1
 800aab0:	701a      	strb	r2, [r3, #0]
      break;
 800aab2:	e017      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2204      	movs	r2, #4
 800aab8:	701a      	strb	r2, [r3, #0]
      break;
 800aaba:	e013      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2202      	movs	r2, #2
 800aac0:	701a      	strb	r2, [r3, #0]
      break;
 800aac2:	e00f      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2212      	movs	r2, #18
 800aac8:	701a      	strb	r2, [r3, #0]
      break;
 800aaca:	e00b      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	2222      	movs	r2, #34	@ 0x22
 800aad0:	701a      	strb	r2, [r3, #0]
      break;
 800aad2:	e007      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2232      	movs	r2, #50	@ 0x32
 800aad8:	701a      	strb	r2, [r3, #0]
      break;
 800aada:	e003      	b.n	800aae4 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]
      break;
 800aae2:	bf00      	nop
  }

  return ret;
 800aae4:	68fb      	ldr	r3, [r7, #12]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop

0800aaf0 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aafc:	f107 0208 	add.w	r2, r7, #8
 800ab00:	2301      	movs	r3, #1
 800ab02:	2104      	movs	r1, #4
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fea5 	bl	800a854 <stts22h_read_reg>
 800ab0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10f      	bne.n	800ab32 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800ab12:	78fb      	ldrb	r3, [r7, #3]
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	7a3b      	ldrb	r3, [r7, #8]
 800ab1c:	f362 1386 	bfi	r3, r2, #6, #1
 800ab20:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ab22:	f107 0208 	add.w	r2, r7, #8
 800ab26:	2301      	movs	r3, #1
 800ab28:	2104      	movs	r1, #4
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff feb0 	bl	800a890 <stts22h_write_reg>
 800ab30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ab32:	68fb      	ldr	r3, [r7, #12]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800ab46:	f107 0208 	add.w	r2, r7, #8
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	2106      	movs	r1, #6
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff fe80 	bl	800a854 <stts22h_read_reg>
 800ab54:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ab56:	7a7b      	ldrb	r3, [r7, #9]
 800ab58:	b21a      	sxth	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	021b      	lsls	r3, r3, #8
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	7a3a      	ldrb	r2, [r7, #8]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	b21a      	sxth	r2, r3
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	801a      	strh	r2, [r3, #0]

  return ret;
 800ab76:	68fb      	ldr	r3, [r7, #12]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	2101      	movs	r1, #1
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff fe5f 	bl	800a854 <stts22h_read_reg>
 800ab96:	60f8      	str	r0, [r7, #12]

  return ret;
 800ab98:	68fb      	ldr	r3, [r7, #12]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800abae:	f107 0208 	add.w	r2, r7, #8
 800abb2:	2301      	movs	r3, #1
 800abb4:	2104      	movs	r1, #4
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fe4c 	bl	800a854 <stts22h_read_reg>
 800abbc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10f      	bne.n	800abe4 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	7a3b      	ldrb	r3, [r7, #8]
 800abce:	f362 03c3 	bfi	r3, r2, #3, #1
 800abd2:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800abd4:	f107 0208 	add.w	r2, r7, #8
 800abd8:	2301      	movs	r3, #1
 800abda:	2104      	movs	r1, #4
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff fe57 	bl	800a890 <stts22h_write_reg>
 800abe2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abe4:	68fb      	ldr	r3, [r7, #12]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08c      	sub	sp, #48	@ 0x30
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800abfe:	2301      	movs	r3, #1
 800ac00:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d07c      	beq.n	800ad06 <IKS4A1_ENV_SENSOR_Init+0x116>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	f200 80b2 	bhi.w	800ad78 <IKS4A1_ENV_SENSOR_Init+0x188>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <IKS4A1_ENV_SENSOR_Init+0x32>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d039      	beq.n	800ac94 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800ac20:	e0aa      	b.n	800ad78 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800ac22:	6838      	ldr	r0, [r7, #0]
 800ac24:	f000 f9ca 	bl	800afbc <STTS22H_0_Probe>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d002      	beq.n	800ac34 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800ac2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac32:	e0df      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ac34:	4a71      	ldr	r2, [pc, #452]	@ (800adfc <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	4970      	ldr	r1, [pc, #448]	@ (800ae00 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac46:	f107 0108 	add.w	r1, r7, #8
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	4798      	blx	r3
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ac54:	f06f 0306 	mvn.w	r3, #6
 800ac58:	e0cc      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ac5a:	7a3b      	ldrb	r3, [r7, #8]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d103      	bne.n	800ac68 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ac68:	7abb      	ldrb	r3, [r7, #10]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d103      	bne.n	800ac76 <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	f043 0304 	orr.w	r3, r3, #4
 800ac74:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ac76:	7a7b      	ldrb	r3, [r7, #9]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d103      	bne.n	800ac84 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	f043 0302 	orr.w	r3, r3, #2
 800ac82:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d17a      	bne.n	800ad80 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	f043 0308 	orr.w	r3, r3, #8
 800ac90:	623b      	str	r3, [r7, #32]
      }
      break;
 800ac92:	e075      	b.n	800ad80 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800ac94:	6838      	ldr	r0, [r7, #0]
 800ac96:	f000 fa47 	bl	800b128 <LPS22DF_0_Probe>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	e0a6      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aca6:	4a55      	ldr	r2, [pc, #340]	@ (800adfc <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	4953      	ldr	r1, [pc, #332]	@ (800ae00 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800acb8:	f107 0108 	add.w	r1, r7, #8
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800acc6:	f06f 0306 	mvn.w	r3, #6
 800acca:	e093      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800accc:	7a3b      	ldrb	r3, [r7, #8]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d103      	bne.n	800acda <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	f043 0301 	orr.w	r3, r3, #1
 800acd8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800acda:	7abb      	ldrb	r3, [r7, #10]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d103      	bne.n	800ace8 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	f043 0304 	orr.w	r3, r3, #4
 800ace6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ace8:	7a7b      	ldrb	r3, [r7, #9]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d103      	bne.n	800acf6 <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	f043 0302 	orr.w	r3, r3, #2
 800acf4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800acf6:	7afb      	ldrb	r3, [r7, #11]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d143      	bne.n	800ad84 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	f043 0308 	orr.w	r3, r3, #8
 800ad02:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad04:	e03e      	b.n	800ad84 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad06:	6838      	ldr	r0, [r7, #0]
 800ad08:	f000 fade 	bl	800b2c8 <SHT40AD1B_0_Probe>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800ad12:	f04f 33ff 	mov.w	r3, #4294967295
 800ad16:	e06d      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ad18:	4a38      	ldr	r2, [pc, #224]	@ (800adfc <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	4937      	ldr	r1, [pc, #220]	@ (800ae00 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad2a:	f107 0108 	add.w	r1, r7, #8
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4798      	blx	r3
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad38:	f06f 0306 	mvn.w	r3, #6
 800ad3c:	e05a      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad3e:	7a3b      	ldrb	r3, [r7, #8]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d103      	bne.n	800ad4c <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad4c:	7abb      	ldrb	r3, [r7, #10]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d103      	bne.n	800ad5a <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	f043 0304 	orr.w	r3, r3, #4
 800ad58:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad5a:	7a7b      	ldrb	r3, [r7, #9]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d103      	bne.n	800ad68 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	f043 0302 	orr.w	r3, r3, #2
 800ad66:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad68:	7afb      	ldrb	r3, [r7, #11]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d10c      	bne.n	800ad88 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	f043 0308 	orr.w	r3, r3, #8
 800ad74:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad76:	e007      	b.n	800ad88 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ad78:	f06f 0301 	mvn.w	r3, #1
 800ad7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ad7e:	e004      	b.n	800ad8a <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad80:	bf00      	nop
 800ad82:	e002      	b.n	800ad8a <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad84:	bf00      	nop
 800ad86:	e000      	b.n	800ad8a <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad88:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800ad8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800ad90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad92:	e02f      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ad94:	2300      	movs	r3, #0
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad98:	e028      	b.n	800adec <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9e:	4013      	ands	r3, r2
 800ada0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d11c      	bne.n	800ade0 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800ada6:	6a3a      	ldr	r2, [r7, #32]
 800ada8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adaa:	4013      	ands	r3, r2
 800adac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adae:	429a      	cmp	r2, r3
 800adb0:	d116      	bne.n	800ade0 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800adb2:	4a14      	ldr	r2, [pc, #80]	@ (800ae04 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adba:	4913      	ldr	r1, [pc, #76]	@ (800ae08 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	0092      	lsls	r2, r2, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	490d      	ldr	r1, [pc, #52]	@ (800ae00 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800adda:	f06f 0304 	mvn.w	r3, #4
 800adde:	e009      	b.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800ade0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	3301      	adds	r3, #1
 800adea:	627b      	str	r3, [r7, #36]	@ 0x24
 800adec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d9d3      	bls.n	800ad9a <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800adf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3730      	adds	r7, #48	@ 0x30
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	2000093c 	.word	0x2000093c
 800ae00:	20000900 	.word	0x20000900
 800ae04:	200001b0 	.word	0x200001b0
 800ae08:	2000090c 	.word	0x2000090c

0800ae0c <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d903      	bls.n	800ae24 <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae1c:	f06f 0301 	mvn.w	r3, #1
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	e014      	b.n	800ae4e <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800ae24:	4a0c      	ldr	r2, [pc, #48]	@ (800ae58 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	490b      	ldr	r1, [pc, #44]	@ (800ae5c <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae42:	f06f 0306 	mvn.w	r3, #6
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	e001      	b.n	800ae4e <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	2000093c 	.word	0x2000093c
 800ae5c:	20000900 	.word	0x20000900

0800ae60 <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d903      	bls.n	800ae78 <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae70:	f06f 0301 	mvn.w	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	e014      	b.n	800aea2 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800ae78:	4a0c      	ldr	r2, [pc, #48]	@ (800aeac <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	490b      	ldr	r1, [pc, #44]	@ (800aeb0 <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae96:	f06f 0306 	mvn.w	r3, #6
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	e001      	b.n	800aea2 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aea2:	68fb      	ldr	r3, [r7, #12]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	2000093c 	.word	0x2000093c
 800aeb0:	20000900 	.word	0x20000900

0800aeb4 <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d903      	bls.n	800aece <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aec6:	f06f 0301 	mvn.w	r3, #1
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e027      	b.n	800af1e <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aece:	4a16      	ldr	r2, [pc, #88]	@ (800af28 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	4013      	ands	r3, r2
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d11b      	bne.n	800af18 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800aee0:	4a12      	ldr	r2, [pc, #72]	@ (800af2c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee8:	4911      	ldr	r1, [pc, #68]	@ (800af30 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	0092      	lsls	r2, r2, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	490f      	ldr	r1, [pc, #60]	@ (800af34 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af0a:	f06f 0304 	mvn.w	r3, #4
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	e005      	b.n	800af1e <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	e002      	b.n	800af1e <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af18:	f06f 0301 	mvn.w	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800af1e:	697b      	ldr	r3, [r7, #20]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20000948 	.word	0x20000948
 800af2c:	200001b0 	.word	0x200001b0
 800af30:	2000090c 	.word	0x2000090c
 800af34:	20000900 	.word	0x20000900

0800af38 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d903      	bls.n	800af52 <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af4a:	f06f 0301 	mvn.w	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	e027      	b.n	800afa2 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800af52:	4a16      	ldr	r2, [pc, #88]	@ (800afac <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	4013      	ands	r3, r2
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	429a      	cmp	r2, r3
 800af62:	d11b      	bne.n	800af9c <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800af64:	4a12      	ldr	r2, [pc, #72]	@ (800afb0 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af6c:	4911      	ldr	r1, [pc, #68]	@ (800afb4 <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	0092      	lsls	r2, r2, #2
 800af72:	4413      	add	r3, r2
 800af74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	490f      	ldr	r1, [pc, #60]	@ (800afb8 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af82:	6879      	ldr	r1, [r7, #4]
 800af84:	4610      	mov	r0, r2
 800af86:	4798      	blx	r3
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af8e:	f06f 0304 	mvn.w	r3, #4
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	e005      	b.n	800afa2 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
 800af98:	617b      	str	r3, [r7, #20]
 800af9a:	e002      	b.n	800afa2 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af9c:	f06f 0301 	mvn.w	r3, #1
 800afa0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800afa2:	697b      	ldr	r3, [r7, #20]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20000948 	.word	0x20000948
 800afb0:	200001b0 	.word	0x200001b0
 800afb4:	2000090c 	.word	0x2000090c
 800afb8:	20000900 	.word	0x20000900

0800afbc <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b092      	sub	sp, #72	@ 0x48
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800afc8:	2300      	movs	r3, #0
 800afca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800afcc:	2371      	movs	r3, #113	@ 0x71
 800afce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800afd2:	4b47      	ldr	r3, [pc, #284]	@ (800b0f0 <STTS22H_0_Probe+0x134>)
 800afd4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800afd6:	4b47      	ldr	r3, [pc, #284]	@ (800b0f4 <STTS22H_0_Probe+0x138>)
 800afd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800afda:	4b47      	ldr	r3, [pc, #284]	@ (800b0f8 <STTS22H_0_Probe+0x13c>)
 800afdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800afde:	4b47      	ldr	r3, [pc, #284]	@ (800b0fc <STTS22H_0_Probe+0x140>)
 800afe0:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800afe2:	4b47      	ldr	r3, [pc, #284]	@ (800b100 <STTS22H_0_Probe+0x144>)
 800afe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800afe6:	4b47      	ldr	r3, [pc, #284]	@ (800b104 <STTS22H_0_Probe+0x148>)
 800afe8:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800afea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afee:	4619      	mov	r1, r3
 800aff0:	4845      	ldr	r0, [pc, #276]	@ (800b108 <STTS22H_0_Probe+0x14c>)
 800aff2:	f7ff f973 	bl	800a2dc <STTS22H_RegisterBusIO>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800affc:	f06f 0306 	mvn.w	r3, #6
 800b000:	647b      	str	r3, [r7, #68]	@ 0x44
 800b002:	e06f      	b.n	800b0e4 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800b004:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b008:	4619      	mov	r1, r3
 800b00a:	483f      	ldr	r0, [pc, #252]	@ (800b108 <STTS22H_0_Probe+0x14c>)
 800b00c:	f7ff fa05 	bl	800a41a <STTS22H_ReadID>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b016:	f06f 0306 	mvn.w	r3, #6
 800b01a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b01c:	e062      	b.n	800b0e4 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800b01e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b022:	2ba0      	cmp	r3, #160	@ 0xa0
 800b024:	d003      	beq.n	800b02e <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b026:	f06f 0306 	mvn.w	r3, #6
 800b02a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b02c:	e05a      	b.n	800b0e4 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800b02e:	f107 0308 	add.w	r3, r7, #8
 800b032:	4619      	mov	r1, r3
 800b034:	4834      	ldr	r0, [pc, #208]	@ (800b108 <STTS22H_0_Probe+0x14c>)
 800b036:	f7ff fa0b 	bl	800a450 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b03a:	7a3b      	ldrb	r3, [r7, #8]
 800b03c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b03e:	7a7b      	ldrb	r3, [r7, #9]
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b044:	7abb      	ldrb	r3, [r7, #10]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b04a:	7afb      	ldrb	r3, [r7, #11]
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b050:	4a2e      	ldr	r2, [pc, #184]	@ (800b10c <STTS22H_0_Probe+0x150>)
 800b052:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b054:	4b2e      	ldr	r3, [pc, #184]	@ (800b110 <STTS22H_0_Probe+0x154>)
 800b056:	4a2c      	ldr	r2, [pc, #176]	@ (800b108 <STTS22H_0_Probe+0x14c>)
 800b058:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b05a:	4b2e      	ldr	r3, [pc, #184]	@ (800b114 <STTS22H_0_Probe+0x158>)
 800b05c:	4a2e      	ldr	r2, [pc, #184]	@ (800b118 <STTS22H_0_Probe+0x15c>)
 800b05e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b062:	2b00      	cmp	r3, #0
 800b064:	d11d      	bne.n	800b0a2 <STTS22H_0_Probe+0xe6>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d018      	beq.n	800b0a2 <STTS22H_0_Probe+0xe6>
 800b070:	7a3b      	ldrb	r3, [r7, #8]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d115      	bne.n	800b0a2 <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b076:	4b29      	ldr	r3, [pc, #164]	@ (800b11c <STTS22H_0_Probe+0x160>)
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	4a29      	ldr	r2, [pc, #164]	@ (800b120 <STTS22H_0_Probe+0x164>)
 800b07c:	4929      	ldr	r1, [pc, #164]	@ (800b124 <STTS22H_0_Probe+0x168>)
 800b07e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b082:	4b24      	ldr	r3, [pc, #144]	@ (800b114 <STTS22H_0_Probe+0x158>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a21      	ldr	r2, [pc, #132]	@ (800b110 <STTS22H_0_Probe+0x154>)
 800b08a:	6812      	ldr	r2, [r2, #0]
 800b08c:	4610      	mov	r0, r2
 800b08e:	4798      	blx	r3
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b096:	f06f 0304 	mvn.w	r3, #4
 800b09a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b09c:	e001      	b.n	800b0a2 <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b0a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d107      	bne.n	800b0b8 <STTS22H_0_Probe+0xfc>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f003 0304 	and.w	r3, r3, #4
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0b2:	f06f 0304 	mvn.w	r3, #4
 800b0b6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d107      	bne.n	800b0ce <STTS22H_0_Probe+0x112>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f003 0302 	and.w	r3, r3, #2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0c8:	f06f 0304 	mvn.w	r3, #4
 800b0cc:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b0ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d107      	bne.n	800b0e4 <STTS22H_0_Probe+0x128>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f003 0308 	and.w	r3, r3, #8
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0de:	f06f 0304 	mvn.w	r3, #4
 800b0e2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3748      	adds	r7, #72	@ 0x48
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	08002411 	.word	0x08002411
 800b0f4:	08002475 	.word	0x08002475
 800b0f8:	08002529 	.word	0x08002529
 800b0fc:	080024c5 	.word	0x080024c5
 800b100:	08002635 	.word	0x08002635
 800b104:	0800c359 	.word	0x0800c359
 800b108:	20000954 	.word	0x20000954
 800b10c:	20000948 	.word	0x20000948
 800b110:	20000900 	.word	0x20000900
 800b114:	2000093c 	.word	0x2000093c
 800b118:	2000018c 	.word	0x2000018c
 800b11c:	200001b0 	.word	0x200001b0
 800b120:	2000090c 	.word	0x2000090c
 800b124:	2000019c 	.word	0x2000019c

0800b128 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b092      	sub	sp, #72	@ 0x48
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b130:	2300      	movs	r3, #0
 800b132:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b134:	2300      	movs	r3, #0
 800b136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b138:	23bb      	movs	r3, #187	@ 0xbb
 800b13a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b13e:	4b53      	ldr	r3, [pc, #332]	@ (800b28c <LPS22DF_0_Probe+0x164>)
 800b140:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b142:	4b53      	ldr	r3, [pc, #332]	@ (800b290 <LPS22DF_0_Probe+0x168>)
 800b144:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b146:	4b53      	ldr	r3, [pc, #332]	@ (800b294 <LPS22DF_0_Probe+0x16c>)
 800b148:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b14a:	4b53      	ldr	r3, [pc, #332]	@ (800b298 <LPS22DF_0_Probe+0x170>)
 800b14c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b14e:	4b53      	ldr	r3, [pc, #332]	@ (800b29c <LPS22DF_0_Probe+0x174>)
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b152:	4b53      	ldr	r3, [pc, #332]	@ (800b2a0 <LPS22DF_0_Probe+0x178>)
 800b154:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b15a:	4619      	mov	r1, r3
 800b15c:	4851      	ldr	r0, [pc, #324]	@ (800b2a4 <LPS22DF_0_Probe+0x17c>)
 800b15e:	f7fa f8bd 	bl	80052dc <LPS22DF_RegisterBusIO>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b168:	f06f 0306 	mvn.w	r3, #6
 800b16c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b16e:	e087      	b.n	800b280 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b170:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b174:	4619      	mov	r1, r3
 800b176:	484b      	ldr	r0, [pc, #300]	@ (800b2a4 <LPS22DF_0_Probe+0x17c>)
 800b178:	f7fa f959 	bl	800542e <LPS22DF_ReadID>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b182:	f06f 0306 	mvn.w	r3, #6
 800b186:	647b      	str	r3, [r7, #68]	@ 0x44
 800b188:	e07a      	b.n	800b280 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b18a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b18e:	2bb4      	cmp	r3, #180	@ 0xb4
 800b190:	d003      	beq.n	800b19a <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b192:	f06f 0306 	mvn.w	r3, #6
 800b196:	647b      	str	r3, [r7, #68]	@ 0x44
 800b198:	e072      	b.n	800b280 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b19a:	f107 0308 	add.w	r3, r7, #8
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4840      	ldr	r0, [pc, #256]	@ (800b2a4 <LPS22DF_0_Probe+0x17c>)
 800b1a2:	f7fa f95f 	bl	8005464 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b1a6:	7a3b      	ldrb	r3, [r7, #8]
 800b1a8:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b1aa:	7a7b      	ldrb	r3, [r7, #9]
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b1b0:	7abb      	ldrb	r3, [r7, #10]
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b1b6:	7afb      	ldrb	r3, [r7, #11]
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b1bc:	4a3a      	ldr	r2, [pc, #232]	@ (800b2a8 <LPS22DF_0_Probe+0x180>)
 800b1be:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b1c0:	4b3a      	ldr	r3, [pc, #232]	@ (800b2ac <LPS22DF_0_Probe+0x184>)
 800b1c2:	4a38      	ldr	r2, [pc, #224]	@ (800b2a4 <LPS22DF_0_Probe+0x17c>)
 800b1c4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b1c6:	4b3a      	ldr	r3, [pc, #232]	@ (800b2b0 <LPS22DF_0_Probe+0x188>)
 800b1c8:	4a3a      	ldr	r2, [pc, #232]	@ (800b2b4 <LPS22DF_0_Probe+0x18c>)
 800b1ca:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d11e      	bne.n	800b210 <LPS22DF_0_Probe+0xe8>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d019      	beq.n	800b210 <LPS22DF_0_Probe+0xe8>
 800b1dc:	7a3b      	ldrb	r3, [r7, #8]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d116      	bne.n	800b210 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b1e2:	4b35      	ldr	r3, [pc, #212]	@ (800b2b8 <LPS22DF_0_Probe+0x190>)
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	4a35      	ldr	r2, [pc, #212]	@ (800b2bc <LPS22DF_0_Probe+0x194>)
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4935      	ldr	r1, [pc, #212]	@ (800b2c0 <LPS22DF_0_Probe+0x198>)
 800b1ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b1f0:	4b2f      	ldr	r3, [pc, #188]	@ (800b2b0 <LPS22DF_0_Probe+0x188>)
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a2d      	ldr	r2, [pc, #180]	@ (800b2ac <LPS22DF_0_Probe+0x184>)
 800b1f8:	6852      	ldr	r2, [r2, #4]
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	4798      	blx	r3
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b204:	f06f 0304 	mvn.w	r3, #4
 800b208:	647b      	str	r3, [r7, #68]	@ 0x44
 800b20a:	e001      	b.n	800b210 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b20c:	2300      	movs	r3, #0
 800b20e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b212:	2b00      	cmp	r3, #0
 800b214:	d11e      	bne.n	800b254 <LPS22DF_0_Probe+0x12c>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d019      	beq.n	800b254 <LPS22DF_0_Probe+0x12c>
 800b220:	7a7b      	ldrb	r3, [r7, #9]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d116      	bne.n	800b254 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b226:	4b24      	ldr	r3, [pc, #144]	@ (800b2b8 <LPS22DF_0_Probe+0x190>)
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	4a24      	ldr	r2, [pc, #144]	@ (800b2bc <LPS22DF_0_Probe+0x194>)
 800b22c:	3304      	adds	r3, #4
 800b22e:	4925      	ldr	r1, [pc, #148]	@ (800b2c4 <LPS22DF_0_Probe+0x19c>)
 800b230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b234:	4b1e      	ldr	r3, [pc, #120]	@ (800b2b0 <LPS22DF_0_Probe+0x188>)
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a1c      	ldr	r2, [pc, #112]	@ (800b2ac <LPS22DF_0_Probe+0x184>)
 800b23c:	6852      	ldr	r2, [r2, #4]
 800b23e:	4610      	mov	r0, r2
 800b240:	4798      	blx	r3
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b248:	f06f 0304 	mvn.w	r3, #4
 800b24c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b24e:	e001      	b.n	800b254 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b250:	2300      	movs	r3, #0
 800b252:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b256:	2b00      	cmp	r3, #0
 800b258:	d107      	bne.n	800b26a <LPS22DF_0_Probe+0x142>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b264:	f06f 0304 	mvn.w	r3, #4
 800b268:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b26a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d107      	bne.n	800b280 <LPS22DF_0_Probe+0x158>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f003 0308 	and.w	r3, r3, #8
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b27a:	f06f 0304 	mvn.w	r3, #4
 800b27e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b282:	4618      	mov	r0, r3
 800b284:	3748      	adds	r7, #72	@ 0x48
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	08002411 	.word	0x08002411
 800b290:	08002475 	.word	0x08002475
 800b294:	08002529 	.word	0x08002529
 800b298:	080024c5 	.word	0x080024c5
 800b29c:	08002635 	.word	0x08002635
 800b2a0:	0800c359 	.word	0x0800c359
 800b2a4:	2000098c 	.word	0x2000098c
 800b2a8:	20000948 	.word	0x20000948
 800b2ac:	20000900 	.word	0x20000900
 800b2b0:	2000093c 	.word	0x2000093c
 800b2b4:	2000006c 	.word	0x2000006c
 800b2b8:	200001b0 	.word	0x200001b0
 800b2bc:	2000090c 	.word	0x2000090c
 800b2c0:	20000090 	.word	0x20000090
 800b2c4:	2000007c 	.word	0x2000007c

0800b2c8 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b092      	sub	sp, #72	@ 0x48
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b2d8:	2389      	movs	r3, #137	@ 0x89
 800b2da:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b2de:	4b53      	ldr	r3, [pc, #332]	@ (800b42c <SHT40AD1B_0_Probe+0x164>)
 800b2e0:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b2e2:	4b53      	ldr	r3, [pc, #332]	@ (800b430 <SHT40AD1B_0_Probe+0x168>)
 800b2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b2e6:	4b53      	ldr	r3, [pc, #332]	@ (800b434 <SHT40AD1B_0_Probe+0x16c>)
 800b2e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b2ea:	4b53      	ldr	r3, [pc, #332]	@ (800b438 <SHT40AD1B_0_Probe+0x170>)
 800b2ec:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b2ee:	4b53      	ldr	r3, [pc, #332]	@ (800b43c <SHT40AD1B_0_Probe+0x174>)
 800b2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b2f2:	4b53      	ldr	r3, [pc, #332]	@ (800b440 <SHT40AD1B_0_Probe+0x178>)
 800b2f4:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b2f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4851      	ldr	r0, [pc, #324]	@ (800b444 <SHT40AD1B_0_Probe+0x17c>)
 800b2fe:	f7fe fce9 	bl	8009cd4 <SHT40AD1B_RegisterBusIO>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b308:	f06f 0306 	mvn.w	r3, #6
 800b30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30e:	e087      	b.n	800b420 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b310:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b314:	4619      	mov	r1, r3
 800b316:	484b      	ldr	r0, [pc, #300]	@ (800b444 <SHT40AD1B_0_Probe+0x17c>)
 800b318:	f7fe fd4c 	bl	8009db4 <SHT40AD1B_ReadID>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b322:	f06f 0306 	mvn.w	r3, #6
 800b326:	647b      	str	r3, [r7, #68]	@ 0x44
 800b328:	e07a      	b.n	800b420 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b32a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b332:	f06f 0306 	mvn.w	r3, #6
 800b336:	647b      	str	r3, [r7, #68]	@ 0x44
 800b338:	e072      	b.n	800b420 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4619      	mov	r1, r3
 800b340:	4840      	ldr	r0, [pc, #256]	@ (800b444 <SHT40AD1B_0_Probe+0x17c>)
 800b342:	f7fe fd47 	bl	8009dd4 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b346:	7a3b      	ldrb	r3, [r7, #8]
 800b348:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b34a:	7a7b      	ldrb	r3, [r7, #9]
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b350:	7abb      	ldrb	r3, [r7, #10]
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b356:	7afb      	ldrb	r3, [r7, #11]
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b35c:	4a3a      	ldr	r2, [pc, #232]	@ (800b448 <SHT40AD1B_0_Probe+0x180>)
 800b35e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b360:	4b3a      	ldr	r3, [pc, #232]	@ (800b44c <SHT40AD1B_0_Probe+0x184>)
 800b362:	4a38      	ldr	r2, [pc, #224]	@ (800b444 <SHT40AD1B_0_Probe+0x17c>)
 800b364:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b366:	4b3a      	ldr	r3, [pc, #232]	@ (800b450 <SHT40AD1B_0_Probe+0x188>)
 800b368:	4a3a      	ldr	r2, [pc, #232]	@ (800b454 <SHT40AD1B_0_Probe+0x18c>)
 800b36a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d11e      	bne.n	800b3b0 <SHT40AD1B_0_Probe+0xe8>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d019      	beq.n	800b3b0 <SHT40AD1B_0_Probe+0xe8>
 800b37c:	7a3b      	ldrb	r3, [r7, #8]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d116      	bne.n	800b3b0 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b382:	4b35      	ldr	r3, [pc, #212]	@ (800b458 <SHT40AD1B_0_Probe+0x190>)
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4a35      	ldr	r2, [pc, #212]	@ (800b45c <SHT40AD1B_0_Probe+0x194>)
 800b388:	3308      	adds	r3, #8
 800b38a:	4935      	ldr	r1, [pc, #212]	@ (800b460 <SHT40AD1B_0_Probe+0x198>)
 800b38c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b390:	4b2f      	ldr	r3, [pc, #188]	@ (800b450 <SHT40AD1B_0_Probe+0x188>)
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a2d      	ldr	r2, [pc, #180]	@ (800b44c <SHT40AD1B_0_Probe+0x184>)
 800b398:	6892      	ldr	r2, [r2, #8]
 800b39a:	4610      	mov	r0, r2
 800b39c:	4798      	blx	r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3a4:	f06f 0304 	mvn.w	r3, #4
 800b3a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3aa:	e001      	b.n	800b3b0 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d11e      	bne.n	800b3f4 <SHT40AD1B_0_Probe+0x12c>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d019      	beq.n	800b3f4 <SHT40AD1B_0_Probe+0x12c>
 800b3c0:	7abb      	ldrb	r3, [r7, #10]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d116      	bne.n	800b3f4 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b3c6:	4b24      	ldr	r3, [pc, #144]	@ (800b458 <SHT40AD1B_0_Probe+0x190>)
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	4a24      	ldr	r2, [pc, #144]	@ (800b45c <SHT40AD1B_0_Probe+0x194>)
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	4925      	ldr	r1, [pc, #148]	@ (800b464 <SHT40AD1B_0_Probe+0x19c>)
 800b3d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b3d4:	4b1e      	ldr	r3, [pc, #120]	@ (800b450 <SHT40AD1B_0_Probe+0x188>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a1c      	ldr	r2, [pc, #112]	@ (800b44c <SHT40AD1B_0_Probe+0x184>)
 800b3dc:	6892      	ldr	r2, [r2, #8]
 800b3de:	4610      	mov	r0, r2
 800b3e0:	4798      	blx	r3
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3e8:	f06f 0304 	mvn.w	r3, #4
 800b3ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3ee:	e001      	b.n	800b3f4 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d107      	bne.n	800b40a <SHT40AD1B_0_Probe+0x142>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f003 0302 	and.w	r3, r3, #2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b404:	f06f 0304 	mvn.w	r3, #4
 800b408:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b40a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d107      	bne.n	800b420 <SHT40AD1B_0_Probe+0x158>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f003 0308 	and.w	r3, r3, #8
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b41a:	f06f 0304 	mvn.w	r3, #4
 800b41e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b422:	4618      	mov	r0, r3
 800b424:	3748      	adds	r7, #72	@ 0x48
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	08002411 	.word	0x08002411
 800b430:	08002475 	.word	0x08002475
 800b434:	080025e1 	.word	0x080025e1
 800b438:	0800258d 	.word	0x0800258d
 800b43c:	08002635 	.word	0x08002635
 800b440:	0800c359 	.word	0x0800c359
 800b444:	200009c4 	.word	0x200009c4
 800b448:	20000948 	.word	0x20000948
 800b44c:	20000900 	.word	0x20000900
 800b450:	2000093c 	.word	0x2000093c
 800b454:	20000154 	.word	0x20000154
 800b458:	200001b0 	.word	0x200001b0
 800b45c:	2000090c 	.word	0x2000090c
 800b460:	20000178 	.word	0x20000178
 800b464:	20000164 	.word	0x20000164

0800b468 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	@ 0x38
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b476:	2301      	movs	r3, #1
 800b478:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b03      	cmp	r3, #3
 800b482:	f200 80d4 	bhi.w	800b62e <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b486:	a201      	add	r2, pc, #4	@ (adr r2, 800b48c <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b49d 	.word	0x0800b49d
 800b490:	0800b503 	.word	0x0800b503
 800b494:	0800b567 	.word	0x0800b567
 800b498:	0800b5cb 	.word	0x0800b5cb
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b49c:	6838      	ldr	r0, [r7, #0]
 800b49e:	f000 fa35 	bl	800b90c <LIS2MDL_0_Probe>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ac:	e101      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b4ae:	4a83      	ldr	r2, [pc, #524]	@ (800b6bc <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	4981      	ldr	r1, [pc, #516]	@ (800b6c0 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4c0:	f107 010c 	add.w	r1, r7, #12
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b4ce:	f06f 0306 	mvn.w	r3, #6
 800b4d2:	e0ee      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b4d4:	7b3b      	ldrb	r3, [r7, #12]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d103      	bne.n	800b4e2 <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4dc:	f043 0302 	orr.w	r3, r3, #2
 800b4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b4e2:	7b7b      	ldrb	r3, [r7, #13]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d103      	bne.n	800b4f0 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ea:	f043 0301 	orr.w	r3, r3, #1
 800b4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	f040 809f 	bne.w	800b636 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fa:	f043 0304 	orr.w	r3, r3, #4
 800b4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b500:	e099      	b.n	800b636 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b502:	6838      	ldr	r0, [r7, #0]
 800b504:	f000 faaa 	bl	800ba5c <LSM6DSV16X_0_Probe>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b50e:	f04f 33ff 	mov.w	r3, #4294967295
 800b512:	e0ce      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b514:	4a69      	ldr	r2, [pc, #420]	@ (800b6bc <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	4968      	ldr	r1, [pc, #416]	@ (800b6c0 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b526:	f107 010c 	add.w	r1, r7, #12
 800b52a:	4610      	mov	r0, r2
 800b52c:	4798      	blx	r3
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b534:	f06f 0306 	mvn.w	r3, #6
 800b538:	e0bb      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b53a:	7b3b      	ldrb	r3, [r7, #12]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d103      	bne.n	800b548 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b542:	f043 0302 	orr.w	r3, r3, #2
 800b546:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b548:	7b7b      	ldrb	r3, [r7, #13]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d103      	bne.n	800b556 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b550:	f043 0301 	orr.w	r3, r3, #1
 800b554:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d16e      	bne.n	800b63a <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55e:	f043 0304 	orr.w	r3, r3, #4
 800b562:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b564:	e069      	b.n	800b63a <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b566:	6838      	ldr	r0, [r7, #0]
 800b568:	f000 fb44 	bl	800bbf4 <LIS2DUXS12_0_Probe>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b572:	f04f 33ff 	mov.w	r3, #4294967295
 800b576:	e09c      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b578:	4a50      	ldr	r2, [pc, #320]	@ (800b6bc <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	494f      	ldr	r1, [pc, #316]	@ (800b6c0 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b58a:	f107 010c 	add.w	r1, r7, #12
 800b58e:	4610      	mov	r0, r2
 800b590:	4798      	blx	r3
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b598:	f06f 0306 	mvn.w	r3, #6
 800b59c:	e089      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b59e:	7b3b      	ldrb	r3, [r7, #12]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d103      	bne.n	800b5ac <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a6:	f043 0302 	orr.w	r3, r3, #2
 800b5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b5ac:	7b7b      	ldrb	r3, [r7, #13]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d103      	bne.n	800b5ba <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	f043 0301 	orr.w	r3, r3, #1
 800b5b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d13e      	bne.n	800b63e <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c2:	f043 0304 	orr.w	r3, r3, #4
 800b5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b5c8:	e039      	b.n	800b63e <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b5ca:	6838      	ldr	r0, [r7, #0]
 800b5cc:	f000 fbc8 	bl	800bd60 <LSM6DSO16IS_0_Probe>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5da:	e06a      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b5dc:	4a37      	ldr	r2, [pc, #220]	@ (800b6bc <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	4936      	ldr	r1, [pc, #216]	@ (800b6c0 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5ee:	f107 010c 	add.w	r1, r7, #12
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	4798      	blx	r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b5fc:	f06f 0306 	mvn.w	r3, #6
 800b600:	e057      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b602:	7b3b      	ldrb	r3, [r7, #12]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d103      	bne.n	800b610 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60a:	f043 0302 	orr.w	r3, r3, #2
 800b60e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b610:	7b7b      	ldrb	r3, [r7, #13]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d103      	bne.n	800b61e <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b618:	f043 0301 	orr.w	r3, r3, #1
 800b61c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d10e      	bne.n	800b642 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	f043 0304 	orr.w	r3, r3, #4
 800b62a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b62c:	e009      	b.n	800b642 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b62e:	f06f 0301 	mvn.w	r3, #1
 800b632:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b634:	e006      	b.n	800b644 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b636:	bf00      	nop
 800b638:	e004      	b.n	800b644 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b63a:	bf00      	nop
 800b63c:	e002      	b.n	800b644 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b63e:	bf00      	nop
 800b640:	e000      	b.n	800b644 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b642:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b64c:	e031      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b64e:	2300      	movs	r3, #0
 800b650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b652:	e02a      	b.n	800b6aa <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b654:	683a      	ldr	r2, [r7, #0]
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	4013      	ands	r3, r2
 800b65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d11e      	bne.n	800b69e <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	4013      	ands	r3, r2
 800b666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b668:	429a      	cmp	r2, r3
 800b66a:	d118      	bne.n	800b69e <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b66c:	4a15      	ldr	r2, [pc, #84]	@ (800b6c4 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b674:	4814      	ldr	r0, [pc, #80]	@ (800b6c8 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	4613      	mov	r3, r2
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	4413      	add	r3, r2
 800b67e:	440b      	add	r3, r1
 800b680:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	490e      	ldr	r1, [pc, #56]	@ (800b6c0 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b68e:	4610      	mov	r0, r2
 800b690:	4798      	blx	r3
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b698:	f06f 0304 	mvn.w	r3, #4
 800b69c:	e009      	b.n	800b6b2 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d9d1      	bls.n	800b654 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3738      	adds	r7, #56	@ 0x38
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000a48 	.word	0x20000a48
 800b6c0:	20000a08 	.word	0x20000a08
 800b6c4:	200001f0 	.word	0x200001f0
 800b6c8:	20000a18 	.word	0x20000a18

0800b6cc <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d903      	bls.n	800b6e4 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b6dc:	f06f 0301 	mvn.w	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	e014      	b.n	800b70e <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b6e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b718 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	490b      	ldr	r1, [pc, #44]	@ (800b71c <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4798      	blx	r3
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b702:	f06f 0306 	mvn.w	r3, #6
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e001      	b.n	800b70e <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b70e:	68fb      	ldr	r3, [r7, #12]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20000a48 	.word	0x20000a48
 800b71c:	20000a08 	.word	0x20000a08

0800b720 <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d903      	bls.n	800b738 <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b730:	f06f 0301 	mvn.w	r3, #1
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e014      	b.n	800b762 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800b738:	4a0c      	ldr	r2, [pc, #48]	@ (800b76c <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	490b      	ldr	r1, [pc, #44]	@ (800b770 <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	4610      	mov	r0, r2
 800b74e:	4798      	blx	r3
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b756:	f06f 0306 	mvn.w	r3, #6
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e001      	b.n	800b762 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b75e:	2300      	movs	r3, #0
 800b760:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b762:	68fb      	ldr	r3, [r7, #12]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	20000a48 	.word	0x20000a48
 800b770:	20000a08 	.word	0x20000a08

0800b774 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b03      	cmp	r3, #3
 800b784:	d903      	bls.n	800b78e <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b786:	f06f 0301 	mvn.w	r3, #1
 800b78a:	617b      	str	r3, [r7, #20]
 800b78c:	e029      	b.n	800b7e2 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b78e:	4a17      	ldr	r2, [pc, #92]	@ (800b7ec <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	4013      	ands	r3, r2
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d11d      	bne.n	800b7dc <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b7a0:	4a13      	ldr	r2, [pc, #76]	@ (800b7f0 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b7a8:	4812      	ldr	r0, [pc, #72]	@ (800b7f4 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	4413      	add	r3, r2
 800b7b2:	440b      	add	r3, r1
 800b7b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	490f      	ldr	r1, [pc, #60]	@ (800b7f8 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	4798      	blx	r3
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7ce:	f06f 0304 	mvn.w	r3, #4
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	e005      	b.n	800b7e2 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	e002      	b.n	800b7e2 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b7dc:	f06f 0301 	mvn.w	r3, #1
 800b7e0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b7e2:	697b      	ldr	r3, [r7, #20]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20000a58 	.word	0x20000a58
 800b7f0:	200001f0 	.word	0x200001f0
 800b7f4:	20000a18 	.word	0x20000a18
 800b7f8:	20000a08 	.word	0x20000a08

0800b7fc <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d903      	bls.n	800b816 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b80e:	f06f 0301 	mvn.w	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	e029      	b.n	800b86a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b816:	4a17      	ldr	r2, [pc, #92]	@ (800b874 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4013      	ands	r3, r2
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	429a      	cmp	r2, r3
 800b826:	d11d      	bne.n	800b864 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b828:	4a13      	ldr	r2, [pc, #76]	@ (800b878 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b830:	4812      	ldr	r0, [pc, #72]	@ (800b87c <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	4613      	mov	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	4413      	add	r3, r2
 800b83a:	440b      	add	r3, r1
 800b83c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	490f      	ldr	r1, [pc, #60]	@ (800b880 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	4610      	mov	r0, r2
 800b84e:	4798      	blx	r3
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b856:	f06f 0304 	mvn.w	r3, #4
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	e005      	b.n	800b86a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e002      	b.n	800b86a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b864:	f06f 0301 	mvn.w	r3, #1
 800b868:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b86a:	697b      	ldr	r3, [r7, #20]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3718      	adds	r7, #24
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	20000a58 	.word	0x20000a58
 800b878:	200001f0 	.word	0x200001f0
 800b87c:	20000a18 	.word	0x20000a18
 800b880:	20000a08 	.word	0x20000a08

0800b884 <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b03      	cmp	r3, #3
 800b894:	d903      	bls.n	800b89e <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b896:	f06f 0301 	mvn.w	r3, #1
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e029      	b.n	800b8f2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b89e:	4a17      	ldr	r2, [pc, #92]	@ (800b8fc <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d11d      	bne.n	800b8ec <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800b8b0:	4a13      	ldr	r2, [pc, #76]	@ (800b900 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8b8:	4812      	ldr	r0, [pc, #72]	@ (800b904 <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	4413      	add	r3, r2
 800b8c2:	440b      	add	r3, r1
 800b8c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	490f      	ldr	r1, [pc, #60]	@ (800b908 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4798      	blx	r3
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8de:	f06f 0304 	mvn.w	r3, #4
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	e005      	b.n	800b8f2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	e002      	b.n	800b8f2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b8ec:	f06f 0301 	mvn.w	r3, #1
 800b8f0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b8f2:	697b      	ldr	r3, [r7, #20]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20000a58 	.word	0x20000a58
 800b900:	200001f0 	.word	0x200001f0
 800b904:	20000a18 	.word	0x20000a18
 800b908:	20000a08 	.word	0x20000a08

0800b90c <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b094      	sub	sp, #80	@ 0x50
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b914:	2300      	movs	r3, #0
 800b916:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b918:	2300      	movs	r3, #0
 800b91a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b91c:	233d      	movs	r3, #61	@ 0x3d
 800b91e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b922:	4b40      	ldr	r3, [pc, #256]	@ (800ba24 <LIS2MDL_0_Probe+0x118>)
 800b924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b926:	4b40      	ldr	r3, [pc, #256]	@ (800ba28 <LIS2MDL_0_Probe+0x11c>)
 800b928:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b92a:	4b40      	ldr	r3, [pc, #256]	@ (800ba2c <LIS2MDL_0_Probe+0x120>)
 800b92c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b92e:	4b40      	ldr	r3, [pc, #256]	@ (800ba30 <LIS2MDL_0_Probe+0x124>)
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b932:	4b40      	ldr	r3, [pc, #256]	@ (800ba34 <LIS2MDL_0_Probe+0x128>)
 800b934:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b936:	4b40      	ldr	r3, [pc, #256]	@ (800ba38 <LIS2MDL_0_Probe+0x12c>)
 800b938:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b93a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b93e:	4619      	mov	r1, r3
 800b940:	483e      	ldr	r0, [pc, #248]	@ (800ba3c <LIS2MDL_0_Probe+0x130>)
 800b942:	f7f8 fcbb 	bl	80042bc <LIS2MDL_RegisterBusIO>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b94c:	f06f 0306 	mvn.w	r3, #6
 800b950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b952:	e061      	b.n	800ba18 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b954:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b958:	4619      	mov	r1, r3
 800b95a:	4838      	ldr	r0, [pc, #224]	@ (800ba3c <LIS2MDL_0_Probe+0x130>)
 800b95c:	f7f8 fdca 	bl	80044f4 <LIS2MDL_ReadID>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b966:	f06f 0306 	mvn.w	r3, #6
 800b96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b96c:	e054      	b.n	800ba18 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800b96e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b972:	2b40      	cmp	r3, #64	@ 0x40
 800b974:	d003      	beq.n	800b97e <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b976:	f06f 0306 	mvn.w	r3, #6
 800b97a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b97c:	e04c      	b.n	800ba18 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800b97e:	f107 030c 	add.w	r3, r7, #12
 800b982:	4619      	mov	r1, r3
 800b984:	482d      	ldr	r0, [pc, #180]	@ (800ba3c <LIS2MDL_0_Probe+0x130>)
 800b986:	f7f8 fddb 	bl	8004540 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b98a:	7b7b      	ldrb	r3, [r7, #13]
 800b98c:	461a      	mov	r2, r3
 800b98e:	7b3b      	ldrb	r3, [r7, #12]
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	431a      	orrs	r2, r3
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4313      	orrs	r3, r2
 800b99a:	4a29      	ldr	r2, [pc, #164]	@ (800ba40 <LIS2MDL_0_Probe+0x134>)
 800b99c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800b99e:	4b29      	ldr	r3, [pc, #164]	@ (800ba44 <LIS2MDL_0_Probe+0x138>)
 800b9a0:	4a26      	ldr	r2, [pc, #152]	@ (800ba3c <LIS2MDL_0_Probe+0x130>)
 800b9a2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800b9a4:	4b28      	ldr	r3, [pc, #160]	@ (800ba48 <LIS2MDL_0_Probe+0x13c>)
 800b9a6:	4a29      	ldr	r2, [pc, #164]	@ (800ba4c <LIS2MDL_0_Probe+0x140>)
 800b9a8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d11d      	bne.n	800b9ec <LIS2MDL_0_Probe+0xe0>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f003 0304 	and.w	r3, r3, #4
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d018      	beq.n	800b9ec <LIS2MDL_0_Probe+0xe0>
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d115      	bne.n	800b9ec <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b9c0:	4b23      	ldr	r3, [pc, #140]	@ (800ba50 <LIS2MDL_0_Probe+0x144>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	4a23      	ldr	r2, [pc, #140]	@ (800ba54 <LIS2MDL_0_Probe+0x148>)
 800b9c6:	4924      	ldr	r1, [pc, #144]	@ (800ba58 <LIS2MDL_0_Probe+0x14c>)
 800b9c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800b9cc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba48 <LIS2MDL_0_Probe+0x13c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a1c      	ldr	r2, [pc, #112]	@ (800ba44 <LIS2MDL_0_Probe+0x138>)
 800b9d4:	6812      	ldr	r2, [r2, #0]
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9e0:	f06f 0304 	mvn.w	r3, #4
 800b9e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9e6:	e001      	b.n	800b9ec <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b9ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d107      	bne.n	800ba02 <LIS2MDL_0_Probe+0xf6>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9fc:	f06f 0304 	mvn.w	r3, #4
 800ba00:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800ba02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d107      	bne.n	800ba18 <LIS2MDL_0_Probe+0x10c>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba12:	f06f 0304 	mvn.w	r3, #4
 800ba16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800ba18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3750      	adds	r7, #80	@ 0x50
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	08002411 	.word	0x08002411
 800ba28:	08002475 	.word	0x08002475
 800ba2c:	08002529 	.word	0x08002529
 800ba30:	080024c5 	.word	0x080024c5
 800ba34:	08002635 	.word	0x08002635
 800ba38:	0800c359 	.word	0x0800c359
 800ba3c:	20000a68 	.word	0x20000a68
 800ba40:	20000a58 	.word	0x20000a58
 800ba44:	20000a08 	.word	0x20000a08
 800ba48:	20000a48 	.word	0x20000a48
 800ba4c:	20000038 	.word	0x20000038
 800ba50:	200001f0 	.word	0x200001f0
 800ba54:	20000a18 	.word	0x20000a18
 800ba58:	20000048 	.word	0x20000048

0800ba5c <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b094      	sub	sp, #80	@ 0x50
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800ba64:	2300      	movs	r3, #0
 800ba66:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800ba68:	2300      	movs	r3, #0
 800ba6a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800ba6c:	23d7      	movs	r3, #215	@ 0xd7
 800ba6e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ba72:	4b51      	ldr	r3, [pc, #324]	@ (800bbb8 <LSM6DSV16X_0_Probe+0x15c>)
 800ba74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ba76:	4b51      	ldr	r3, [pc, #324]	@ (800bbbc <LSM6DSV16X_0_Probe+0x160>)
 800ba78:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ba7a:	4b51      	ldr	r3, [pc, #324]	@ (800bbc0 <LSM6DSV16X_0_Probe+0x164>)
 800ba7c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ba7e:	4b51      	ldr	r3, [pc, #324]	@ (800bbc4 <LSM6DSV16X_0_Probe+0x168>)
 800ba80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ba82:	4b51      	ldr	r3, [pc, #324]	@ (800bbc8 <LSM6DSV16X_0_Probe+0x16c>)
 800ba84:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800ba86:	4b51      	ldr	r3, [pc, #324]	@ (800bbcc <LSM6DSV16X_0_Probe+0x170>)
 800ba88:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800ba8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba8e:	4619      	mov	r1, r3
 800ba90:	484f      	ldr	r0, [pc, #316]	@ (800bbd0 <LSM6DSV16X_0_Probe+0x174>)
 800ba92:	f7fc f983 	bl	8007d9c <LSM6DSV16X_RegisterBusIO>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba9c:	f06f 0306 	mvn.w	r3, #6
 800baa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baa2:	e084      	b.n	800bbae <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800baa4:	2100      	movs	r1, #0
 800baa6:	484a      	ldr	r0, [pc, #296]	@ (800bbd0 <LSM6DSV16X_0_Probe+0x174>)
 800baa8:	f7fd f905 	bl	8008cb6 <LSM6DSV16X_Set_Mem_Bank>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bab2:	f06f 0306 	mvn.w	r3, #6
 800bab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bab8:	e079      	b.n	800bbae <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800baba:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800babe:	4619      	mov	r1, r3
 800bac0:	4843      	ldr	r0, [pc, #268]	@ (800bbd0 <LSM6DSV16X_0_Probe+0x174>)
 800bac2:	f7fc fa9b 	bl	8007ffc <LSM6DSV16X_ReadID>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bacc:	f06f 0306 	mvn.w	r3, #6
 800bad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bad2:	e06c      	b.n	800bbae <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800bad4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bad8:	2b70      	cmp	r3, #112	@ 0x70
 800bada:	d003      	beq.n	800bae4 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800badc:	f06f 0306 	mvn.w	r3, #6
 800bae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bae2:	e064      	b.n	800bbae <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800bae4:	f107 030c 	add.w	r3, r7, #12
 800bae8:	4619      	mov	r1, r3
 800baea:	4839      	ldr	r0, [pc, #228]	@ (800bbd0 <LSM6DSV16X_0_Probe+0x174>)
 800baec:	f7fc fa9c 	bl	8008028 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800baf0:	7b7b      	ldrb	r3, [r7, #13]
 800baf2:	461a      	mov	r2, r3
 800baf4:	7b3b      	ldrb	r3, [r7, #12]
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	431a      	orrs	r2, r3
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4313      	orrs	r3, r2
 800bb00:	4a34      	ldr	r2, [pc, #208]	@ (800bbd4 <LSM6DSV16X_0_Probe+0x178>)
 800bb02:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800bb04:	4b34      	ldr	r3, [pc, #208]	@ (800bbd8 <LSM6DSV16X_0_Probe+0x17c>)
 800bb06:	4a32      	ldr	r2, [pc, #200]	@ (800bbd0 <LSM6DSV16X_0_Probe+0x174>)
 800bb08:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800bb0a:	4b34      	ldr	r3, [pc, #208]	@ (800bbdc <LSM6DSV16X_0_Probe+0x180>)
 800bb0c:	4a34      	ldr	r2, [pc, #208]	@ (800bbe0 <LSM6DSV16X_0_Probe+0x184>)
 800bb0e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bb10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d11e      	bne.n	800bb54 <LSM6DSV16X_0_Probe+0xf8>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d019      	beq.n	800bb54 <LSM6DSV16X_0_Probe+0xf8>
 800bb20:	7b7b      	ldrb	r3, [r7, #13]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d116      	bne.n	800bb54 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bb26:	4b2f      	ldr	r3, [pc, #188]	@ (800bbe4 <LSM6DSV16X_0_Probe+0x188>)
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	4a2f      	ldr	r2, [pc, #188]	@ (800bbe8 <LSM6DSV16X_0_Probe+0x18c>)
 800bb2c:	3303      	adds	r3, #3
 800bb2e:	492f      	ldr	r1, [pc, #188]	@ (800bbec <LSM6DSV16X_0_Probe+0x190>)
 800bb30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bb34:	4b29      	ldr	r3, [pc, #164]	@ (800bbdc <LSM6DSV16X_0_Probe+0x180>)
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a27      	ldr	r2, [pc, #156]	@ (800bbd8 <LSM6DSV16X_0_Probe+0x17c>)
 800bb3c:	6852      	ldr	r2, [r2, #4]
 800bb3e:	4610      	mov	r0, r2
 800bb40:	4798      	blx	r3
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb48:	f06f 0304 	mvn.w	r3, #4
 800bb4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb4e:	e001      	b.n	800bb54 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bb54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d11e      	bne.n	800bb98 <LSM6DSV16X_0_Probe+0x13c>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d019      	beq.n	800bb98 <LSM6DSV16X_0_Probe+0x13c>
 800bb64:	7b3b      	ldrb	r3, [r7, #12]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d116      	bne.n	800bb98 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bb6a:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe4 <LSM6DSV16X_0_Probe+0x188>)
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bbe8 <LSM6DSV16X_0_Probe+0x18c>)
 800bb70:	3303      	adds	r3, #3
 800bb72:	491f      	ldr	r1, [pc, #124]	@ (800bbf0 <LSM6DSV16X_0_Probe+0x194>)
 800bb74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bb78:	4b18      	ldr	r3, [pc, #96]	@ (800bbdc <LSM6DSV16X_0_Probe+0x180>)
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a16      	ldr	r2, [pc, #88]	@ (800bbd8 <LSM6DSV16X_0_Probe+0x17c>)
 800bb80:	6852      	ldr	r2, [r2, #4]
 800bb82:	4610      	mov	r0, r2
 800bb84:	4798      	blx	r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb8c:	f06f 0304 	mvn.w	r3, #4
 800bb90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb92:	e001      	b.n	800bb98 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bb98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d107      	bne.n	800bbae <LSM6DSV16X_0_Probe+0x152>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bba8:	f06f 0304 	mvn.w	r3, #4
 800bbac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bbae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3750      	adds	r7, #80	@ 0x50
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	08002411 	.word	0x08002411
 800bbbc:	08002475 	.word	0x08002475
 800bbc0:	08002529 	.word	0x08002529
 800bbc4:	080024c5 	.word	0x080024c5
 800bbc8:	08002635 	.word	0x08002635
 800bbcc:	0800c359 	.word	0x0800c359
 800bbd0:	20000a9c 	.word	0x20000a9c
 800bbd4:	20000a58 	.word	0x20000a58
 800bbd8:	20000a08 	.word	0x20000a08
 800bbdc:	20000a48 	.word	0x20000a48
 800bbe0:	200000fc 	.word	0x200000fc
 800bbe4:	200001f0 	.word	0x200001f0
 800bbe8:	20000a18 	.word	0x20000a18
 800bbec:	20000130 	.word	0x20000130
 800bbf0:	2000010c 	.word	0x2000010c

0800bbf4 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b094      	sub	sp, #80	@ 0x50
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800bc00:	2300      	movs	r3, #0
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800bc04:	2333      	movs	r3, #51	@ 0x33
 800bc06:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bc0a:	4b47      	ldr	r3, [pc, #284]	@ (800bd28 <LIS2DUXS12_0_Probe+0x134>)
 800bc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bc0e:	4b47      	ldr	r3, [pc, #284]	@ (800bd2c <LIS2DUXS12_0_Probe+0x138>)
 800bc10:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bc12:	4b47      	ldr	r3, [pc, #284]	@ (800bd30 <LIS2DUXS12_0_Probe+0x13c>)
 800bc14:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bc16:	4b47      	ldr	r3, [pc, #284]	@ (800bd34 <LIS2DUXS12_0_Probe+0x140>)
 800bc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bc1a:	4b47      	ldr	r3, [pc, #284]	@ (800bd38 <LIS2DUXS12_0_Probe+0x144>)
 800bc1c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bc1e:	4b47      	ldr	r3, [pc, #284]	@ (800bd3c <LIS2DUXS12_0_Probe+0x148>)
 800bc20:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800bc22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc26:	4619      	mov	r1, r3
 800bc28:	4845      	ldr	r0, [pc, #276]	@ (800bd40 <LIS2DUXS12_0_Probe+0x14c>)
 800bc2a:	f7f6 fe65 	bl	80028f8 <LIS2DUXS12_RegisterBusIO>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc34:	f06f 0306 	mvn.w	r3, #6
 800bc38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc3a:	e070      	b.n	800bd1e <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	4840      	ldr	r0, [pc, #256]	@ (800bd40 <LIS2DUXS12_0_Probe+0x14c>)
 800bc40:	f7f7 fad2 	bl	80031e8 <LIS2DUXS12_Set_Mem_Bank>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc4a:	f06f 0306 	mvn.w	r3, #6
 800bc4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc50:	e065      	b.n	800bd1e <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800bc52:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bc56:	4619      	mov	r1, r3
 800bc58:	4839      	ldr	r0, [pc, #228]	@ (800bd40 <LIS2DUXS12_0_Probe+0x14c>)
 800bc5a:	f7f6 ffac 	bl	8002bb6 <LIS2DUXS12_ReadID>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc64:	f06f 0306 	mvn.w	r3, #6
 800bc68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc6a:	e058      	b.n	800bd1e <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800bc6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc70:	2b47      	cmp	r3, #71	@ 0x47
 800bc72:	d003      	beq.n	800bc7c <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc74:	f06f 0306 	mvn.w	r3, #6
 800bc78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc7a:	e050      	b.n	800bd1e <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800bc7c:	f107 030c 	add.w	r3, r7, #12
 800bc80:	4619      	mov	r1, r3
 800bc82:	482f      	ldr	r0, [pc, #188]	@ (800bd40 <LIS2DUXS12_0_Probe+0x14c>)
 800bc84:	f7f6 ffb2 	bl	8002bec <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bc88:	7b7b      	ldrb	r3, [r7, #13]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	7b3b      	ldrb	r3, [r7, #12]
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	431a      	orrs	r2, r3
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4313      	orrs	r3, r2
 800bc98:	4a2a      	ldr	r2, [pc, #168]	@ (800bd44 <LIS2DUXS12_0_Probe+0x150>)
 800bc9a:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800bc9c:	4b2a      	ldr	r3, [pc, #168]	@ (800bd48 <LIS2DUXS12_0_Probe+0x154>)
 800bc9e:	4a28      	ldr	r2, [pc, #160]	@ (800bd40 <LIS2DUXS12_0_Probe+0x14c>)
 800bca0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800bca2:	4b2a      	ldr	r3, [pc, #168]	@ (800bd4c <LIS2DUXS12_0_Probe+0x158>)
 800bca4:	4a2a      	ldr	r2, [pc, #168]	@ (800bd50 <LIS2DUXS12_0_Probe+0x15c>)
 800bca6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <LIS2DUXS12_0_Probe+0xd0>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d005      	beq.n	800bcc4 <LIS2DUXS12_0_Probe+0xd0>
 800bcb8:	7b7b      	ldrb	r3, [r7, #13]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d102      	bne.n	800bcc4 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcbe:	f06f 0304 	mvn.w	r3, #4
 800bcc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bcc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d11e      	bne.n	800bd08 <LIS2DUXS12_0_Probe+0x114>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d019      	beq.n	800bd08 <LIS2DUXS12_0_Probe+0x114>
 800bcd4:	7b3b      	ldrb	r3, [r7, #12]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d116      	bne.n	800bd08 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bcda:	4b1e      	ldr	r3, [pc, #120]	@ (800bd54 <LIS2DUXS12_0_Probe+0x160>)
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	4a1e      	ldr	r2, [pc, #120]	@ (800bd58 <LIS2DUXS12_0_Probe+0x164>)
 800bce0:	3306      	adds	r3, #6
 800bce2:	491e      	ldr	r1, [pc, #120]	@ (800bd5c <LIS2DUXS12_0_Probe+0x168>)
 800bce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800bce8:	4b18      	ldr	r3, [pc, #96]	@ (800bd4c <LIS2DUXS12_0_Probe+0x158>)
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a16      	ldr	r2, [pc, #88]	@ (800bd48 <LIS2DUXS12_0_Probe+0x154>)
 800bcf0:	6892      	ldr	r2, [r2, #8]
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4798      	blx	r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d003      	beq.n	800bd04 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcfc:	f06f 0304 	mvn.w	r3, #4
 800bd00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd02:	e001      	b.n	800bd08 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bd04:	2300      	movs	r3, #0
 800bd06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bd08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d107      	bne.n	800bd1e <LIS2DUXS12_0_Probe+0x12a>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd18:	f06f 0304 	mvn.w	r3, #4
 800bd1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bd1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3750      	adds	r7, #80	@ 0x50
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	08002411 	.word	0x08002411
 800bd2c:	08002475 	.word	0x08002475
 800bd30:	08002529 	.word	0x08002529
 800bd34:	080024c5 	.word	0x080024c5
 800bd38:	08002635 	.word	0x08002635
 800bd3c:	0800c359 	.word	0x0800c359
 800bd40:	20000ad4 	.word	0x20000ad4
 800bd44:	20000a58 	.word	0x20000a58
 800bd48:	20000a08 	.word	0x20000a08
 800bd4c:	20000a48 	.word	0x20000a48
 800bd50:	20000004 	.word	0x20000004
 800bd54:	200001f0 	.word	0x200001f0
 800bd58:	20000a18 	.word	0x20000a18
 800bd5c:	20000014 	.word	0x20000014

0800bd60 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b094      	sub	sp, #80	@ 0x50
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800bd70:	23d5      	movs	r3, #213	@ 0xd5
 800bd72:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bd76:	4b51      	ldr	r3, [pc, #324]	@ (800bebc <LSM6DSO16IS_0_Probe+0x15c>)
 800bd78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bd7a:	4b51      	ldr	r3, [pc, #324]	@ (800bec0 <LSM6DSO16IS_0_Probe+0x160>)
 800bd7c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bd7e:	4b51      	ldr	r3, [pc, #324]	@ (800bec4 <LSM6DSO16IS_0_Probe+0x164>)
 800bd80:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bd82:	4b51      	ldr	r3, [pc, #324]	@ (800bec8 <LSM6DSO16IS_0_Probe+0x168>)
 800bd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bd86:	4b51      	ldr	r3, [pc, #324]	@ (800becc <LSM6DSO16IS_0_Probe+0x16c>)
 800bd88:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bd8a:	4b51      	ldr	r3, [pc, #324]	@ (800bed0 <LSM6DSO16IS_0_Probe+0x170>)
 800bd8c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800bd8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd92:	4619      	mov	r1, r3
 800bd94:	484f      	ldr	r0, [pc, #316]	@ (800bed4 <LSM6DSO16IS_0_Probe+0x174>)
 800bd96:	f7fa facd 	bl	8006334 <LSM6DSO16IS_RegisterBusIO>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bda0:	f06f 0306 	mvn.w	r3, #6
 800bda4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bda6:	e084      	b.n	800beb2 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800bda8:	2100      	movs	r1, #0
 800bdaa:	484a      	ldr	r0, [pc, #296]	@ (800bed4 <LSM6DSO16IS_0_Probe+0x174>)
 800bdac:	f7fb f8f3 	bl	8006f96 <LSM6DSO16IS_Set_Mem_Bank>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bdb6:	f06f 0306 	mvn.w	r3, #6
 800bdba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdbc:	e079      	b.n	800beb2 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800bdbe:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4843      	ldr	r0, [pc, #268]	@ (800bed4 <LSM6DSO16IS_0_Probe+0x174>)
 800bdc6:	f7fa fbb3 	bl	8006530 <LSM6DSO16IS_ReadID>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d003      	beq.n	800bdd8 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bdd0:	f06f 0306 	mvn.w	r3, #6
 800bdd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdd6:	e06c      	b.n	800beb2 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800bdd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bddc:	2b22      	cmp	r3, #34	@ 0x22
 800bdde:	d003      	beq.n	800bde8 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bde0:	f06f 0306 	mvn.w	r3, #6
 800bde4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bde6:	e064      	b.n	800beb2 <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800bde8:	f107 030c 	add.w	r3, r7, #12
 800bdec:	4619      	mov	r1, r3
 800bdee:	4839      	ldr	r0, [pc, #228]	@ (800bed4 <LSM6DSO16IS_0_Probe+0x174>)
 800bdf0:	f7fa fbb6 	bl	8006560 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bdf4:	7b7b      	ldrb	r3, [r7, #13]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	7b3b      	ldrb	r3, [r7, #12]
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4313      	orrs	r3, r2
 800be04:	4a34      	ldr	r2, [pc, #208]	@ (800bed8 <LSM6DSO16IS_0_Probe+0x178>)
 800be06:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800be08:	4b34      	ldr	r3, [pc, #208]	@ (800bedc <LSM6DSO16IS_0_Probe+0x17c>)
 800be0a:	4a32      	ldr	r2, [pc, #200]	@ (800bed4 <LSM6DSO16IS_0_Probe+0x174>)
 800be0c:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800be0e:	4b34      	ldr	r3, [pc, #208]	@ (800bee0 <LSM6DSO16IS_0_Probe+0x180>)
 800be10:	4a34      	ldr	r2, [pc, #208]	@ (800bee4 <LSM6DSO16IS_0_Probe+0x184>)
 800be12:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800be14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d11e      	bne.n	800be58 <LSM6DSO16IS_0_Probe+0xf8>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d019      	beq.n	800be58 <LSM6DSO16IS_0_Probe+0xf8>
 800be24:	7b7b      	ldrb	r3, [r7, #13]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d116      	bne.n	800be58 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bee8 <LSM6DSO16IS_0_Probe+0x188>)
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	4a2f      	ldr	r2, [pc, #188]	@ (800beec <LSM6DSO16IS_0_Probe+0x18c>)
 800be30:	3309      	adds	r3, #9
 800be32:	492f      	ldr	r1, [pc, #188]	@ (800bef0 <LSM6DSO16IS_0_Probe+0x190>)
 800be34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800be38:	4b29      	ldr	r3, [pc, #164]	@ (800bee0 <LSM6DSO16IS_0_Probe+0x180>)
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a27      	ldr	r2, [pc, #156]	@ (800bedc <LSM6DSO16IS_0_Probe+0x17c>)
 800be40:	68d2      	ldr	r2, [r2, #12]
 800be42:	4610      	mov	r0, r2
 800be44:	4798      	blx	r3
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be4c:	f06f 0304 	mvn.w	r3, #4
 800be50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be52:	e001      	b.n	800be58 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be54:	2300      	movs	r3, #0
 800be56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800be58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d11e      	bne.n	800be9c <LSM6DSO16IS_0_Probe+0x13c>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f003 0302 	and.w	r3, r3, #2
 800be64:	2b00      	cmp	r3, #0
 800be66:	d019      	beq.n	800be9c <LSM6DSO16IS_0_Probe+0x13c>
 800be68:	7b3b      	ldrb	r3, [r7, #12]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d116      	bne.n	800be9c <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bee8 <LSM6DSO16IS_0_Probe+0x188>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	4a1e      	ldr	r2, [pc, #120]	@ (800beec <LSM6DSO16IS_0_Probe+0x18c>)
 800be74:	3309      	adds	r3, #9
 800be76:	491f      	ldr	r1, [pc, #124]	@ (800bef4 <LSM6DSO16IS_0_Probe+0x194>)
 800be78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800be7c:	4b18      	ldr	r3, [pc, #96]	@ (800bee0 <LSM6DSO16IS_0_Probe+0x180>)
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a16      	ldr	r2, [pc, #88]	@ (800bedc <LSM6DSO16IS_0_Probe+0x17c>)
 800be84:	68d2      	ldr	r2, [r2, #12]
 800be86:	4610      	mov	r0, r2
 800be88:	4798      	blx	r3
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be90:	f06f 0304 	mvn.w	r3, #4
 800be94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be96:	e001      	b.n	800be9c <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be98:	2300      	movs	r3, #0
 800be9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800be9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d107      	bne.n	800beb2 <LSM6DSO16IS_0_Probe+0x152>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800beac:	f06f 0304 	mvn.w	r3, #4
 800beb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800beb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3750      	adds	r7, #80	@ 0x50
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	08002411 	.word	0x08002411
 800bec0:	08002475 	.word	0x08002475
 800bec4:	08002529 	.word	0x08002529
 800bec8:	080024c5 	.word	0x080024c5
 800becc:	08002635 	.word	0x08002635
 800bed0:	0800c359 	.word	0x0800c359
 800bed4:	20000b10 	.word	0x20000b10
 800bed8:	20000a58 	.word	0x20000a58
 800bedc:	20000a08 	.word	0x20000a08
 800bee0:	20000a48 	.word	0x20000a48
 800bee4:	200000a4 	.word	0x200000a4
 800bee8:	200001f0 	.word	0x200001f0
 800beec:	20000a18 	.word	0x20000a18
 800bef0:	200000d8 	.word	0x200000d8
 800bef4:	200000b4 	.word	0x200000b4

0800bef8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	4a04      	ldr	r2, [pc, #16]	@ (800bf18 <BSP_LED_Init+0x20>)
 800bf06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf0a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	08017ff0 	.word	0x08017ff0

0800bf1c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
 800bf26:	4b1c      	ldr	r3, [pc, #112]	@ (800bf98 <LED_USER_GPIO_Init+0x7c>)
 800bf28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf2a:	4a1b      	ldr	r2, [pc, #108]	@ (800bf98 <LED_USER_GPIO_Init+0x7c>)
 800bf2c:	f043 0301 	orr.w	r3, r3, #1
 800bf30:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf32:	4b19      	ldr	r3, [pc, #100]	@ (800bf98 <LED_USER_GPIO_Init+0x7c>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	60bb      	str	r3, [r7, #8]
 800bf3c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf3e:	f107 030c 	add.w	r3, r7, #12
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	605a      	str	r2, [r3, #4]
 800bf48:	609a      	str	r2, [r3, #8]
 800bf4a:	60da      	str	r2, [r3, #12]
 800bf4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf4e:	2300      	movs	r3, #0
 800bf50:	607b      	str	r3, [r7, #4]
 800bf52:	4b11      	ldr	r3, [pc, #68]	@ (800bf98 <LED_USER_GPIO_Init+0x7c>)
 800bf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf56:	4a10      	ldr	r2, [pc, #64]	@ (800bf98 <LED_USER_GPIO_Init+0x7c>)
 800bf58:	f043 0301 	orr.w	r3, r3, #1
 800bf5c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf98 <LED_USER_GPIO_Init+0x7c>)
 800bf60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	607b      	str	r3, [r7, #4]
 800bf68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2120      	movs	r1, #32
 800bf6e:	480b      	ldr	r0, [pc, #44]	@ (800bf9c <LED_USER_GPIO_Init+0x80>)
 800bf70:	f001 f946 	bl	800d200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800bf74:	2320      	movs	r3, #32
 800bf76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800bf84:	f107 030c 	add.w	r3, r7, #12
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4804      	ldr	r0, [pc, #16]	@ (800bf9c <LED_USER_GPIO_Init+0x80>)
 800bf8c:	f000 feb8 	bl	800cd00 <HAL_GPIO_Init>

}
 800bf90:	bf00      	nop
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	40023800 	.word	0x40023800
 800bf9c:	40020000 	.word	0x40020000

0800bfa0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	460a      	mov	r2, r1
 800bfaa:	71fb      	strb	r3, [r7, #7]
 800bfac:	4613      	mov	r3, r2
 800bfae:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	4a1f      	ldr	r2, [pc, #124]	@ (800c034 <BSP_PB_Init+0x94>)
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800bfbe:	79bb      	ldrb	r3, [r7, #6]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d132      	bne.n	800c02a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	4a1b      	ldr	r2, [pc, #108]	@ (800c038 <BSP_PB_Init+0x98>)
 800bfca:	441a      	add	r2, r3
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	491b      	ldr	r1, [pc, #108]	@ (800c03c <BSP_PB_Init+0x9c>)
 800bfd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f000 fe7e 	bl	800ccd8 <HAL_EXTI_GetHandle>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bfe2:	f06f 0303 	mvn.w	r3, #3
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	e01f      	b.n	800c02a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	4a12      	ldr	r2, [pc, #72]	@ (800c038 <BSP_PB_Init+0x98>)
 800bff0:	1898      	adds	r0, r3, r2
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	4a12      	ldr	r2, [pc, #72]	@ (800c040 <BSP_PB_Init+0xa0>)
 800bff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bffa:	461a      	mov	r2, r3
 800bffc:	2100      	movs	r1, #0
 800bffe:	f000 fe51 	bl	800cca4 <HAL_EXTI_RegisterCallback>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d003      	beq.n	800c010 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c008:	f06f 0303 	mvn.w	r3, #3
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	e00c      	b.n	800c02a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800c010:	2028      	movs	r0, #40	@ 0x28
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	4a0b      	ldr	r2, [pc, #44]	@ (800c044 <BSP_PB_Init+0xa4>)
 800c016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c01a:	2200      	movs	r2, #0
 800c01c:	4619      	mov	r1, r3
 800c01e:	f000 fa9a 	bl	800c556 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800c022:	2328      	movs	r3, #40	@ 0x28
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fab2 	bl	800c58e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800c02a:	68fb      	ldr	r3, [r7, #12]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	08017ff4 	.word	0x08017ff4
 800c038:	20000214 	.word	0x20000214
 800c03c:	08017ff8 	.word	0x08017ff8
 800c040:	08017ffc 	.word	0x08017ffc
 800c044:	08018000 	.word	0x08018000

0800c048 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c052:	79fb      	ldrb	r3, [r7, #7]
 800c054:	4a09      	ldr	r2, [pc, #36]	@ (800c07c <BSP_PB_GetState+0x34>)
 800c056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c05a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f001 f8b5 	bl	800d1d0 <HAL_GPIO_ReadPin>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf0c      	ite	eq
 800c06c:	2301      	moveq	r3, #1
 800c06e:	2300      	movne	r3, #0
 800c070:	b2db      	uxtb	r3, r3
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	20000210 	.word	0x20000210

0800c080 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c084:	2000      	movs	r0, #0
 800c086:	f005 fb4f 	bl	8011728 <BSP_PB_Callback>
}
 800c08a:	bf00      	nop
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c096:	2300      	movs	r3, #0
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	4b1a      	ldr	r3, [pc, #104]	@ (800c104 <BUTTON_USER_GPIO_Init+0x74>)
 800c09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09e:	4a19      	ldr	r2, [pc, #100]	@ (800c104 <BUTTON_USER_GPIO_Init+0x74>)
 800c0a0:	f043 0304 	orr.w	r3, r3, #4
 800c0a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0a6:	4b17      	ldr	r3, [pc, #92]	@ (800c104 <BUTTON_USER_GPIO_Init+0x74>)
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	60bb      	str	r3, [r7, #8]
 800c0b0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0b2:	f107 030c 	add.w	r3, r7, #12
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	605a      	str	r2, [r3, #4]
 800c0bc:	609a      	str	r2, [r3, #8]
 800c0be:	60da      	str	r2, [r3, #12]
 800c0c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	607b      	str	r3, [r7, #4]
 800c0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c104 <BUTTON_USER_GPIO_Init+0x74>)
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ca:	4a0e      	ldr	r2, [pc, #56]	@ (800c104 <BUTTON_USER_GPIO_Init+0x74>)
 800c0cc:	f043 0304 	orr.w	r3, r3, #4
 800c0d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c104 <BUTTON_USER_GPIO_Init+0x74>)
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d6:	f003 0304 	and.w	r3, r3, #4
 800c0da:	607b      	str	r3, [r7, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c0de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c0e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c0e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c0ee:	f107 030c 	add.w	r3, r7, #12
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4804      	ldr	r0, [pc, #16]	@ (800c108 <BUTTON_USER_GPIO_Init+0x78>)
 800c0f6:	f000 fe03 	bl	800cd00 <HAL_GPIO_Init>

}
 800c0fa:	bf00      	nop
 800c0fc:	3720      	adds	r7, #32
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	40023800 	.word	0x40023800
 800c108:	40020800 	.word	0x40020800

0800c10c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c11a:	79fb      	ldrb	r3, [r7, #7]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d903      	bls.n	800c128 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c120:	f06f 0301 	mvn.w	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	e025      	b.n	800c174 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	79fa      	ldrb	r2, [r7, #7]
 800c12c:	4914      	ldr	r1, [pc, #80]	@ (800c180 <BSP_COM_Init+0x74>)
 800c12e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c132:	4814      	ldr	r0, [pc, #80]	@ (800c184 <BSP_COM_Init+0x78>)
 800c134:	4613      	mov	r3, r2
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	4413      	add	r3, r2
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	4403      	add	r3, r0
 800c13e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c140:	79fa      	ldrb	r2, [r7, #7]
 800c142:	4613      	mov	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	4a0e      	ldr	r2, [pc, #56]	@ (800c184 <BSP_COM_Init+0x78>)
 800c14c:	4413      	add	r3, r2
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 f848 	bl	800c1e4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c154:	79fa      	ldrb	r2, [r7, #7]
 800c156:	4613      	mov	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	4413      	add	r3, r2
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	4a09      	ldr	r2, [pc, #36]	@ (800c184 <BSP_COM_Init+0x78>)
 800c160:	4413      	add	r3, r2
 800c162:	4618      	mov	r0, r3
 800c164:	f000 f810 	bl	800c188 <MX_USART2_UART_Init>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c16e:	f06f 0303 	mvn.w	r3, #3
 800c172:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c174:	68fb      	ldr	r3, [r7, #12]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	2000021c 	.word	0x2000021c
 800c184:	20000b48 	.word	0x20000b48

0800c188 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a12      	ldr	r2, [pc, #72]	@ (800c1e0 <MX_USART2_UART_Init+0x58>)
 800c198:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c1a0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	220c      	movs	r2, #12
 800c1b8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f004 fdd4 	bl	8010d74 <HAL_UART_Init>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	40004400 	.word	0x40004400

0800c1e4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08a      	sub	sp, #40	@ 0x28
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	4b1e      	ldr	r3, [pc, #120]	@ (800c26c <USART2_MspInit+0x88>)
 800c1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c26c <USART2_MspInit+0x88>)
 800c1f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1fa:	6413      	str	r3, [r2, #64]	@ 0x40
 800c1fc:	4b1b      	ldr	r3, [pc, #108]	@ (800c26c <USART2_MspInit+0x88>)
 800c1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c204:	613b      	str	r3, [r7, #16]
 800c206:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	4b17      	ldr	r3, [pc, #92]	@ (800c26c <USART2_MspInit+0x88>)
 800c20e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c210:	4a16      	ldr	r2, [pc, #88]	@ (800c26c <USART2_MspInit+0x88>)
 800c212:	f043 0301 	orr.w	r3, r3, #1
 800c216:	6313      	str	r3, [r2, #48]	@ 0x30
 800c218:	4b14      	ldr	r3, [pc, #80]	@ (800c26c <USART2_MspInit+0x88>)
 800c21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c224:	2304      	movs	r3, #4
 800c226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c228:	2302      	movs	r3, #2
 800c22a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c22c:	2300      	movs	r3, #0
 800c22e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c230:	2300      	movs	r3, #0
 800c232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c234:	2307      	movs	r3, #7
 800c236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c238:	f107 0314 	add.w	r3, r7, #20
 800c23c:	4619      	mov	r1, r3
 800c23e:	480c      	ldr	r0, [pc, #48]	@ (800c270 <USART2_MspInit+0x8c>)
 800c240:	f000 fd5e 	bl	800cd00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c244:	2308      	movs	r3, #8
 800c246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c248:	2302      	movs	r3, #2
 800c24a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c250:	2300      	movs	r3, #0
 800c252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c254:	2307      	movs	r3, #7
 800c256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c258:	f107 0314 	add.w	r3, r7, #20
 800c25c:	4619      	mov	r1, r3
 800c25e:	4804      	ldr	r0, [pc, #16]	@ (800c270 <USART2_MspInit+0x8c>)
 800c260:	f000 fd4e 	bl	800cd00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c264:	bf00      	nop
 800c266:	3728      	adds	r7, #40	@ 0x28
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	40023800 	.word	0x40023800
 800c270:	40020000 	.word	0x40020000

0800c274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c278:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <HAL_Init+0x40>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a0d      	ldr	r2, [pc, #52]	@ (800c2b4 <HAL_Init+0x40>)
 800c27e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c284:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b4 <HAL_Init+0x40>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b4 <HAL_Init+0x40>)
 800c28a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c28e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c290:	4b08      	ldr	r3, [pc, #32]	@ (800c2b4 <HAL_Init+0x40>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a07      	ldr	r2, [pc, #28]	@ (800c2b4 <HAL_Init+0x40>)
 800c296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c29a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c29c:	2003      	movs	r0, #3
 800c29e:	f000 f94f 	bl	800c540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	f000 f808 	bl	800c2b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c2a8:	f7f5 ff56 	bl	8002158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	40023c00 	.word	0x40023c00

0800c2b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c2c0:	4b12      	ldr	r3, [pc, #72]	@ (800c30c <HAL_InitTick+0x54>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4b12      	ldr	r3, [pc, #72]	@ (800c310 <HAL_InitTick+0x58>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 f967 	bl	800c5aa <HAL_SYSTICK_Config>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e00e      	b.n	800c304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b0f      	cmp	r3, #15
 800c2ea:	d80a      	bhi.n	800c302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f4:	f000 f92f 	bl	800c556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c2f8:	4a06      	ldr	r2, [pc, #24]	@ (800c314 <HAL_InitTick+0x5c>)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	e000      	b.n	800c304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000000 	.word	0x20000000
 800c310:	20000224 	.word	0x20000224
 800c314:	20000220 	.word	0x20000220

0800c318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c31c:	4b06      	ldr	r3, [pc, #24]	@ (800c338 <HAL_IncTick+0x20>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	461a      	mov	r2, r3
 800c322:	4b06      	ldr	r3, [pc, #24]	@ (800c33c <HAL_IncTick+0x24>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4413      	add	r3, r2
 800c328:	4a04      	ldr	r2, [pc, #16]	@ (800c33c <HAL_IncTick+0x24>)
 800c32a:	6013      	str	r3, [r2, #0]
}
 800c32c:	bf00      	nop
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	20000224 	.word	0x20000224
 800c33c:	20000b90 	.word	0x20000b90

0800c340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
  return uwTick;
 800c344:	4b03      	ldr	r3, [pc, #12]	@ (800c354 <HAL_GetTick+0x14>)
 800c346:	681b      	ldr	r3, [r3, #0]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000b90 	.word	0x20000b90

0800c358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c360:	f7ff ffee 	bl	800c340 <HAL_GetTick>
 800c364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c370:	d005      	beq.n	800c37e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c372:	4b0a      	ldr	r3, [pc, #40]	@ (800c39c <HAL_Delay+0x44>)
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c37e:	bf00      	nop
 800c380:	f7ff ffde 	bl	800c340 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d8f7      	bhi.n	800c380 <HAL_Delay+0x28>
  {
  }
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20000224 	.word	0x20000224

0800c3a0 <__NVIC_SetPriorityGrouping>:
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f003 0307 	and.w	r3, r3, #7
 800c3ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e4 <__NVIC_SetPriorityGrouping+0x44>)
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c3bc:	4013      	ands	r3, r2
 800c3be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c3c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c3cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c3d2:	4a04      	ldr	r2, [pc, #16]	@ (800c3e4 <__NVIC_SetPriorityGrouping+0x44>)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	60d3      	str	r3, [r2, #12]
}
 800c3d8:	bf00      	nop
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	e000ed00 	.word	0xe000ed00

0800c3e8 <__NVIC_GetPriorityGrouping>:
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c3ec:	4b04      	ldr	r3, [pc, #16]	@ (800c400 <__NVIC_GetPriorityGrouping+0x18>)
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	0a1b      	lsrs	r3, r3, #8
 800c3f2:	f003 0307 	and.w	r3, r3, #7
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	e000ed00 	.word	0xe000ed00

0800c404 <__NVIC_EnableIRQ>:
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	4603      	mov	r3, r0
 800c40c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c412:	2b00      	cmp	r3, #0
 800c414:	db0b      	blt.n	800c42e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c416:	79fb      	ldrb	r3, [r7, #7]
 800c418:	f003 021f 	and.w	r2, r3, #31
 800c41c:	4907      	ldr	r1, [pc, #28]	@ (800c43c <__NVIC_EnableIRQ+0x38>)
 800c41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c422:	095b      	lsrs	r3, r3, #5
 800c424:	2001      	movs	r0, #1
 800c426:	fa00 f202 	lsl.w	r2, r0, r2
 800c42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c42e:	bf00      	nop
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	e000e100 	.word	0xe000e100

0800c440 <__NVIC_SetPriority>:
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	6039      	str	r1, [r7, #0]
 800c44a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c44c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c450:	2b00      	cmp	r3, #0
 800c452:	db0a      	blt.n	800c46a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	b2da      	uxtb	r2, r3
 800c458:	490c      	ldr	r1, [pc, #48]	@ (800c48c <__NVIC_SetPriority+0x4c>)
 800c45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c45e:	0112      	lsls	r2, r2, #4
 800c460:	b2d2      	uxtb	r2, r2
 800c462:	440b      	add	r3, r1
 800c464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c468:	e00a      	b.n	800c480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	4908      	ldr	r1, [pc, #32]	@ (800c490 <__NVIC_SetPriority+0x50>)
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	f003 030f 	and.w	r3, r3, #15
 800c476:	3b04      	subs	r3, #4
 800c478:	0112      	lsls	r2, r2, #4
 800c47a:	b2d2      	uxtb	r2, r2
 800c47c:	440b      	add	r3, r1
 800c47e:	761a      	strb	r2, [r3, #24]
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	e000e100 	.word	0xe000e100
 800c490:	e000ed00 	.word	0xe000ed00

0800c494 <NVIC_EncodePriority>:
{
 800c494:	b480      	push	{r7}
 800c496:	b089      	sub	sp, #36	@ 0x24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	f1c3 0307 	rsb	r3, r3, #7
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	bf28      	it	cs
 800c4b2:	2304      	movcs	r3, #4
 800c4b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	2b06      	cmp	r3, #6
 800c4bc:	d902      	bls.n	800c4c4 <NVIC_EncodePriority+0x30>
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	3b03      	subs	r3, #3
 800c4c2:	e000      	b.n	800c4c6 <NVIC_EncodePriority+0x32>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d2:	43da      	mvns	r2, r3
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	401a      	ands	r2, r3
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4dc:	f04f 31ff 	mov.w	r1, #4294967295
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e6:	43d9      	mvns	r1, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4ec:	4313      	orrs	r3, r2
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3724      	adds	r7, #36	@ 0x24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
	...

0800c4fc <SysTick_Config>:
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3b01      	subs	r3, #1
 800c508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c50c:	d301      	bcc.n	800c512 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c50e:	2301      	movs	r3, #1
 800c510:	e00f      	b.n	800c532 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c512:	4a0a      	ldr	r2, [pc, #40]	@ (800c53c <SysTick_Config+0x40>)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	3b01      	subs	r3, #1
 800c518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c51a:	210f      	movs	r1, #15
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	f7ff ff8e 	bl	800c440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <SysTick_Config+0x40>)
 800c526:	2200      	movs	r2, #0
 800c528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c52a:	4b04      	ldr	r3, [pc, #16]	@ (800c53c <SysTick_Config+0x40>)
 800c52c:	2207      	movs	r2, #7
 800c52e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	e000e010 	.word	0xe000e010

0800c540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7ff ff29 	bl	800c3a0 <__NVIC_SetPriorityGrouping>
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c556:	b580      	push	{r7, lr}
 800c558:	b086      	sub	sp, #24
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	4603      	mov	r3, r0
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
 800c562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c564:	2300      	movs	r3, #0
 800c566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c568:	f7ff ff3e 	bl	800c3e8 <__NVIC_GetPriorityGrouping>
 800c56c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	68b9      	ldr	r1, [r7, #8]
 800c572:	6978      	ldr	r0, [r7, #20]
 800c574:	f7ff ff8e 	bl	800c494 <NVIC_EncodePriority>
 800c578:	4602      	mov	r2, r0
 800c57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57e:	4611      	mov	r1, r2
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff ff5d 	bl	800c440 <__NVIC_SetPriority>
}
 800c586:	bf00      	nop
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	4603      	mov	r3, r0
 800c596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff ff31 	bl	800c404 <__NVIC_EnableIRQ>
}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff ffa2 	bl	800c4fc <SysTick_Config>
 800c5b8:	4603      	mov	r3, r0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
	...

0800c5c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c5d0:	f7ff feb6 	bl	800c340 <HAL_GetTick>
 800c5d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e099      	b.n	800c714 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0201 	bic.w	r2, r2, #1
 800c5fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c600:	e00f      	b.n	800c622 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c602:	f7ff fe9d 	bl	800c340 <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b05      	cmp	r3, #5
 800c60e:	d908      	bls.n	800c622 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2220      	movs	r2, #32
 800c614:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2203      	movs	r2, #3
 800c61a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e078      	b.n	800c714 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e8      	bne.n	800c602 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	4b38      	ldr	r3, [pc, #224]	@ (800c71c <HAL_DMA_Init+0x158>)
 800c63c:	4013      	ands	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685a      	ldr	r2, [r3, #4]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c64e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c65a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4313      	orrs	r3, r2
 800c672:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d107      	bne.n	800c68c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c684:	4313      	orrs	r3, r2
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	4313      	orrs	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f023 0307 	bic.w	r3, r3, #7
 800c6a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d117      	bne.n	800c6e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00e      	beq.n	800c6e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa6f 	bl	800cbac <DMA_CheckFifoParam>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d008      	beq.n	800c6e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2240      	movs	r2, #64	@ 0x40
 800c6d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e016      	b.n	800c714 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fa26 	bl	800cb40 <DMA_CalcBaseAndBitshift>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6fc:	223f      	movs	r2, #63	@ 0x3f
 800c6fe:	409a      	lsls	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3718      	adds	r7, #24
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	f010803f 	.word	0xf010803f

0800c720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c736:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <HAL_DMA_Start_IT+0x26>
 800c742:	2302      	movs	r3, #2
 800c744:	e040      	b.n	800c7c8 <HAL_DMA_Start_IT+0xa8>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b01      	cmp	r3, #1
 800c758:	d12f      	bne.n	800c7ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2202      	movs	r2, #2
 800c75e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f9b8 	bl	800cae4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c778:	223f      	movs	r2, #63	@ 0x3f
 800c77a:	409a      	lsls	r2, r3
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0216 	orr.w	r2, r2, #22
 800c78e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c794:	2b00      	cmp	r3, #0
 800c796:	d007      	beq.n	800c7a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f042 0208 	orr.w	r2, r2, #8
 800c7a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f042 0201 	orr.w	r2, r2, #1
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	e005      	b.n	800c7c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c7dc:	4b8e      	ldr	r3, [pc, #568]	@ (800ca18 <HAL_DMA_IRQHandler+0x248>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a8e      	ldr	r2, [pc, #568]	@ (800ca1c <HAL_DMA_IRQHandler+0x24c>)
 800c7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e6:	0a9b      	lsrs	r3, r3, #10
 800c7e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7fa:	2208      	movs	r2, #8
 800c7fc:	409a      	lsls	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4013      	ands	r3, r2
 800c802:	2b00      	cmp	r3, #0
 800c804:	d01a      	beq.n	800c83c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 0304 	and.w	r3, r3, #4
 800c810:	2b00      	cmp	r3, #0
 800c812:	d013      	beq.n	800c83c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f022 0204 	bic.w	r2, r2, #4
 800c822:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c828:	2208      	movs	r2, #8
 800c82a:	409a      	lsls	r2, r3
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c834:	f043 0201 	orr.w	r2, r3, #1
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c840:	2201      	movs	r2, #1
 800c842:	409a      	lsls	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4013      	ands	r3, r2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d012      	beq.n	800c872 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00b      	beq.n	800c872 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c85e:	2201      	movs	r2, #1
 800c860:	409a      	lsls	r2, r3
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86a:	f043 0202 	orr.w	r2, r3, #2
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c876:	2204      	movs	r2, #4
 800c878:	409a      	lsls	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	4013      	ands	r3, r2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d012      	beq.n	800c8a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0302 	and.w	r3, r3, #2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c894:	2204      	movs	r2, #4
 800c896:	409a      	lsls	r2, r3
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a0:	f043 0204 	orr.w	r2, r3, #4
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8ac:	2210      	movs	r2, #16
 800c8ae:	409a      	lsls	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d043      	beq.n	800c940 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0308 	and.w	r3, r3, #8
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d03c      	beq.n	800c940 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8ca:	2210      	movs	r2, #16
 800c8cc:	409a      	lsls	r2, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d018      	beq.n	800c912 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d108      	bne.n	800c900 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d024      	beq.n	800c940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	4798      	blx	r3
 800c8fe:	e01f      	b.n	800c940 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c904:	2b00      	cmp	r3, #0
 800c906:	d01b      	beq.n	800c940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	4798      	blx	r3
 800c910:	e016      	b.n	800c940 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f022 0208 	bic.w	r2, r2, #8
 800c92e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c944:	2220      	movs	r2, #32
 800c946:	409a      	lsls	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4013      	ands	r3, r2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 808f 	beq.w	800ca70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0310 	and.w	r3, r3, #16
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 8087 	beq.w	800ca70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c966:	2220      	movs	r2, #32
 800c968:	409a      	lsls	r2, r3
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b05      	cmp	r3, #5
 800c978:	d136      	bne.n	800c9e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f022 0216 	bic.w	r2, r2, #22
 800c988:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	695a      	ldr	r2, [r3, #20]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c998:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d103      	bne.n	800c9aa <HAL_DMA_IRQHandler+0x1da>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d007      	beq.n	800c9ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 0208 	bic.w	r2, r2, #8
 800c9b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9be:	223f      	movs	r2, #63	@ 0x3f
 800c9c0:	409a      	lsls	r2, r3
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d07e      	beq.n	800cadc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	4798      	blx	r3
        }
        return;
 800c9e6:	e079      	b.n	800cadc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d01d      	beq.n	800ca32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10d      	bne.n	800ca20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d031      	beq.n	800ca70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	4798      	blx	r3
 800ca14:	e02c      	b.n	800ca70 <HAL_DMA_IRQHandler+0x2a0>
 800ca16:	bf00      	nop
 800ca18:	20000000 	.word	0x20000000
 800ca1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d023      	beq.n	800ca70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	4798      	blx	r3
 800ca30:	e01e      	b.n	800ca70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10f      	bne.n	800ca60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f022 0210 	bic.w	r2, r2, #16
 800ca4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d032      	beq.n	800cade <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d022      	beq.n	800caca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2205      	movs	r2, #5
 800ca88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f022 0201 	bic.w	r2, r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	60bb      	str	r3, [r7, #8]
 800caa2:	697a      	ldr	r2, [r7, #20]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d307      	bcc.n	800cab8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1f2      	bne.n	800ca9c <HAL_DMA_IRQHandler+0x2cc>
 800cab6:	e000      	b.n	800caba <HAL_DMA_IRQHandler+0x2ea>
          break;
 800cab8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d005      	beq.n	800cade <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	4798      	blx	r3
 800cada:	e000      	b.n	800cade <HAL_DMA_IRQHandler+0x30e>
        return;
 800cadc:	bf00      	nop
    }
  }
}
 800cade:	3718      	adds	r7, #24
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cb00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	2b40      	cmp	r3, #64	@ 0x40
 800cb10:	d108      	bne.n	800cb24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cb22:	e007      	b.n	800cb34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	60da      	str	r2, [r3, #12]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	3b10      	subs	r3, #16
 800cb50:	4a14      	ldr	r2, [pc, #80]	@ (800cba4 <DMA_CalcBaseAndBitshift+0x64>)
 800cb52:	fba2 2303 	umull	r2, r3, r2, r3
 800cb56:	091b      	lsrs	r3, r3, #4
 800cb58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cb5a:	4a13      	ldr	r2, [pc, #76]	@ (800cba8 <DMA_CalcBaseAndBitshift+0x68>)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b03      	cmp	r3, #3
 800cb6c:	d909      	bls.n	800cb82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800cb76:	f023 0303 	bic.w	r3, r3, #3
 800cb7a:	1d1a      	adds	r2, r3, #4
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	659a      	str	r2, [r3, #88]	@ 0x58
 800cb80:	e007      	b.n	800cb92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	aaaaaaab 	.word	0xaaaaaaab
 800cba8:	08018004 	.word	0x08018004

0800cbac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d11f      	bne.n	800cc06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d856      	bhi.n	800cc7a <DMA_CheckFifoParam+0xce>
 800cbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd4 <DMA_CheckFifoParam+0x28>)
 800cbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd2:	bf00      	nop
 800cbd4:	0800cbe5 	.word	0x0800cbe5
 800cbd8:	0800cbf7 	.word	0x0800cbf7
 800cbdc:	0800cbe5 	.word	0x0800cbe5
 800cbe0:	0800cc7b 	.word	0x0800cc7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d046      	beq.n	800cc7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbf4:	e043      	b.n	800cc7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cbfe:	d140      	bne.n	800cc82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc04:	e03d      	b.n	800cc82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc0e:	d121      	bne.n	800cc54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d837      	bhi.n	800cc86 <DMA_CheckFifoParam+0xda>
 800cc16:	a201      	add	r2, pc, #4	@ (adr r2, 800cc1c <DMA_CheckFifoParam+0x70>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800cc2d 	.word	0x0800cc2d
 800cc20:	0800cc33 	.word	0x0800cc33
 800cc24:	0800cc2d 	.word	0x0800cc2d
 800cc28:	0800cc45 	.word	0x0800cc45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc30:	e030      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d025      	beq.n	800cc8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc42:	e022      	b.n	800cc8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cc4c:	d11f      	bne.n	800cc8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cc52:	e01c      	b.n	800cc8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d903      	bls.n	800cc62 <DMA_CheckFifoParam+0xb6>
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d003      	beq.n	800cc68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cc60:	e018      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	73fb      	strb	r3, [r7, #15]
      break;
 800cc66:	e015      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00e      	beq.n	800cc92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	73fb      	strb	r3, [r7, #15]
      break;
 800cc78:	e00b      	b.n	800cc92 <DMA_CheckFifoParam+0xe6>
      break;
 800cc7a:	bf00      	nop
 800cc7c:	e00a      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      break;
 800cc7e:	bf00      	nop
 800cc80:	e008      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      break;
 800cc82:	bf00      	nop
 800cc84:	e006      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      break;
 800cc86:	bf00      	nop
 800cc88:	e004      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      break;
 800cc8a:	bf00      	nop
 800cc8c:	e002      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      break;   
 800cc8e:	bf00      	nop
 800cc90:	e000      	b.n	800cc94 <DMA_CheckFifoParam+0xe8>
      break;
 800cc92:	bf00      	nop
    }
  } 
  
  return status; 
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop

0800cca4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	460b      	mov	r3, r1
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800ccb6:	7afb      	ldrb	r3, [r7, #11]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d103      	bne.n	800ccc4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	605a      	str	r2, [r3, #4]
      break;
 800ccc2:	e002      	b.n	800ccca <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc8:	bf00      	nop
  }

  return status;
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e003      	b.n	800ccf4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
  }
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b089      	sub	sp, #36	@ 0x24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cd12:	2300      	movs	r3, #0
 800cd14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd16:	2300      	movs	r3, #0
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	e159      	b.n	800cfd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	fa02 f303 	lsl.w	r3, r2, r3
 800cd24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	f040 8148 	bne.w	800cfca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f003 0303 	and.w	r3, r3, #3
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d005      	beq.n	800cd52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d130      	bne.n	800cdb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	2203      	movs	r2, #3
 800cd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd62:	43db      	mvns	r3, r3
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	4013      	ands	r3, r2
 800cd68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	fa02 f303 	lsl.w	r3, r2, r3
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	69ba      	ldr	r2, [r7, #24]
 800cd80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cd88:	2201      	movs	r2, #1
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	43db      	mvns	r3, r3
 800cd92:	69ba      	ldr	r2, [r7, #24]
 800cd94:	4013      	ands	r3, r2
 800cd96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	091b      	lsrs	r3, r3, #4
 800cd9e:	f003 0201 	and.w	r2, r3, #1
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	fa02 f303 	lsl.w	r3, r2, r3
 800cda8:	69ba      	ldr	r2, [r7, #24]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	69ba      	ldr	r2, [r7, #24]
 800cdb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f003 0303 	and.w	r3, r3, #3
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d017      	beq.n	800cdf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	2203      	movs	r2, #3
 800cdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd0:	43db      	mvns	r3, r3
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	fa02 f303 	lsl.w	r3, r2, r3
 800cde4:	69ba      	ldr	r2, [r7, #24]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d123      	bne.n	800ce44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	08da      	lsrs	r2, r3, #3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3208      	adds	r2, #8
 800ce04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	f003 0307 	and.w	r3, r3, #7
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	220f      	movs	r2, #15
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	43db      	mvns	r3, r3
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	691a      	ldr	r2, [r3, #16]
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	08da      	lsrs	r2, r3, #3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	3208      	adds	r2, #8
 800ce3e:	69b9      	ldr	r1, [r7, #24]
 800ce40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	2203      	movs	r2, #3
 800ce50:	fa02 f303 	lsl.w	r3, r2, r3
 800ce54:	43db      	mvns	r3, r3
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	4013      	ands	r3, r2
 800ce5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	f003 0203 	and.w	r2, r3, #3
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6c:	69ba      	ldr	r2, [r7, #24]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 80a2 	beq.w	800cfca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce86:	2300      	movs	r3, #0
 800ce88:	60fb      	str	r3, [r7, #12]
 800ce8a:	4b57      	ldr	r3, [pc, #348]	@ (800cfe8 <HAL_GPIO_Init+0x2e8>)
 800ce8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce8e:	4a56      	ldr	r2, [pc, #344]	@ (800cfe8 <HAL_GPIO_Init+0x2e8>)
 800ce90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ce94:	6453      	str	r3, [r2, #68]	@ 0x44
 800ce96:	4b54      	ldr	r3, [pc, #336]	@ (800cfe8 <HAL_GPIO_Init+0x2e8>)
 800ce98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce9e:	60fb      	str	r3, [r7, #12]
 800cea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cea2:	4a52      	ldr	r2, [pc, #328]	@ (800cfec <HAL_GPIO_Init+0x2ec>)
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	089b      	lsrs	r3, r3, #2
 800cea8:	3302      	adds	r3, #2
 800ceaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	220f      	movs	r2, #15
 800ceba:	fa02 f303 	lsl.w	r3, r2, r3
 800cebe:	43db      	mvns	r3, r3
 800cec0:	69ba      	ldr	r2, [r7, #24]
 800cec2:	4013      	ands	r3, r2
 800cec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a49      	ldr	r2, [pc, #292]	@ (800cff0 <HAL_GPIO_Init+0x2f0>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d019      	beq.n	800cf02 <HAL_GPIO_Init+0x202>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a48      	ldr	r2, [pc, #288]	@ (800cff4 <HAL_GPIO_Init+0x2f4>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d013      	beq.n	800cefe <HAL_GPIO_Init+0x1fe>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a47      	ldr	r2, [pc, #284]	@ (800cff8 <HAL_GPIO_Init+0x2f8>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d00d      	beq.n	800cefa <HAL_GPIO_Init+0x1fa>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a46      	ldr	r2, [pc, #280]	@ (800cffc <HAL_GPIO_Init+0x2fc>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d007      	beq.n	800cef6 <HAL_GPIO_Init+0x1f6>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a45      	ldr	r2, [pc, #276]	@ (800d000 <HAL_GPIO_Init+0x300>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d101      	bne.n	800cef2 <HAL_GPIO_Init+0x1f2>
 800ceee:	2304      	movs	r3, #4
 800cef0:	e008      	b.n	800cf04 <HAL_GPIO_Init+0x204>
 800cef2:	2307      	movs	r3, #7
 800cef4:	e006      	b.n	800cf04 <HAL_GPIO_Init+0x204>
 800cef6:	2303      	movs	r3, #3
 800cef8:	e004      	b.n	800cf04 <HAL_GPIO_Init+0x204>
 800cefa:	2302      	movs	r3, #2
 800cefc:	e002      	b.n	800cf04 <HAL_GPIO_Init+0x204>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e000      	b.n	800cf04 <HAL_GPIO_Init+0x204>
 800cf02:	2300      	movs	r3, #0
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	f002 0203 	and.w	r2, r2, #3
 800cf0a:	0092      	lsls	r2, r2, #2
 800cf0c:	4093      	lsls	r3, r2
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	4313      	orrs	r3, r2
 800cf12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cf14:	4935      	ldr	r1, [pc, #212]	@ (800cfec <HAL_GPIO_Init+0x2ec>)
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	089b      	lsrs	r3, r3, #2
 800cf1a:	3302      	adds	r3, #2
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cf22:	4b38      	ldr	r3, [pc, #224]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	43db      	mvns	r3, r3
 800cf2c:	69ba      	ldr	r2, [r7, #24]
 800cf2e:	4013      	ands	r3, r2
 800cf30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cf46:	4a2f      	ldr	r2, [pc, #188]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cf4c:	4b2d      	ldr	r3, [pc, #180]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	43db      	mvns	r3, r3
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	4013      	ands	r3, r2
 800cf5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d003      	beq.n	800cf70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cf68:	69ba      	ldr	r2, [r7, #24]
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cf70:	4a24      	ldr	r2, [pc, #144]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cf76:	4b23      	ldr	r3, [pc, #140]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	43db      	mvns	r3, r3
 800cf80:	69ba      	ldr	r2, [r7, #24]
 800cf82:	4013      	ands	r3, r2
 800cf84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cf92:	69ba      	ldr	r2, [r7, #24]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cf9a:	4a1a      	ldr	r2, [pc, #104]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cfa0:	4b18      	ldr	r3, [pc, #96]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	43db      	mvns	r3, r3
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	4013      	ands	r3, r2
 800cfae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cfbc:	69ba      	ldr	r2, [r7, #24]
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cfc4:	4a0f      	ldr	r2, [pc, #60]	@ (800d004 <HAL_GPIO_Init+0x304>)
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	61fb      	str	r3, [r7, #28]
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	2b0f      	cmp	r3, #15
 800cfd4:	f67f aea2 	bls.w	800cd1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cfd8:	bf00      	nop
 800cfda:	bf00      	nop
 800cfdc:	3724      	adds	r7, #36	@ 0x24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	40023800 	.word	0x40023800
 800cfec:	40013800 	.word	0x40013800
 800cff0:	40020000 	.word	0x40020000
 800cff4:	40020400 	.word	0x40020400
 800cff8:	40020800 	.word	0x40020800
 800cffc:	40020c00 	.word	0x40020c00
 800d000:	40021000 	.word	0x40021000
 800d004:	40013c00 	.word	0x40013c00

0800d008 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d012:	2300      	movs	r3, #0
 800d014:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d01e:	2300      	movs	r3, #0
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	e0bb      	b.n	800d19c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d024:	2201      	movs	r2, #1
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	fa02 f303 	lsl.w	r3, r2, r3
 800d02c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	4013      	ands	r3, r2
 800d034:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	f040 80ab 	bne.w	800d196 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d040:	4a5c      	ldr	r2, [pc, #368]	@ (800d1b4 <HAL_GPIO_DeInit+0x1ac>)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	089b      	lsrs	r3, r3, #2
 800d046:	3302      	adds	r3, #2
 800d048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d04c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	220f      	movs	r2, #15
 800d058:	fa02 f303 	lsl.w	r3, r2, r3
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	4013      	ands	r3, r2
 800d060:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a54      	ldr	r2, [pc, #336]	@ (800d1b8 <HAL_GPIO_DeInit+0x1b0>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d019      	beq.n	800d09e <HAL_GPIO_DeInit+0x96>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a53      	ldr	r2, [pc, #332]	@ (800d1bc <HAL_GPIO_DeInit+0x1b4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d013      	beq.n	800d09a <HAL_GPIO_DeInit+0x92>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a52      	ldr	r2, [pc, #328]	@ (800d1c0 <HAL_GPIO_DeInit+0x1b8>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d00d      	beq.n	800d096 <HAL_GPIO_DeInit+0x8e>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a51      	ldr	r2, [pc, #324]	@ (800d1c4 <HAL_GPIO_DeInit+0x1bc>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d007      	beq.n	800d092 <HAL_GPIO_DeInit+0x8a>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a50      	ldr	r2, [pc, #320]	@ (800d1c8 <HAL_GPIO_DeInit+0x1c0>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d101      	bne.n	800d08e <HAL_GPIO_DeInit+0x86>
 800d08a:	2304      	movs	r3, #4
 800d08c:	e008      	b.n	800d0a0 <HAL_GPIO_DeInit+0x98>
 800d08e:	2307      	movs	r3, #7
 800d090:	e006      	b.n	800d0a0 <HAL_GPIO_DeInit+0x98>
 800d092:	2303      	movs	r3, #3
 800d094:	e004      	b.n	800d0a0 <HAL_GPIO_DeInit+0x98>
 800d096:	2302      	movs	r3, #2
 800d098:	e002      	b.n	800d0a0 <HAL_GPIO_DeInit+0x98>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <HAL_GPIO_DeInit+0x98>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	697a      	ldr	r2, [r7, #20]
 800d0a2:	f002 0203 	and.w	r2, r2, #3
 800d0a6:	0092      	lsls	r2, r2, #2
 800d0a8:	4093      	lsls	r3, r2
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d132      	bne.n	800d116 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d0b0:	4b46      	ldr	r3, [pc, #280]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	43db      	mvns	r3, r3
 800d0b8:	4944      	ldr	r1, [pc, #272]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d0be:	4b43      	ldr	r3, [pc, #268]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	43db      	mvns	r3, r3
 800d0c6:	4941      	ldr	r1, [pc, #260]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0ce:	68da      	ldr	r2, [r3, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	43db      	mvns	r3, r3
 800d0d4:	493d      	ldr	r1, [pc, #244]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d0da:	4b3c      	ldr	r3, [pc, #240]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0dc:	689a      	ldr	r2, [r3, #8]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	43db      	mvns	r3, r3
 800d0e2:	493a      	ldr	r1, [pc, #232]	@ (800d1cc <HAL_GPIO_DeInit+0x1c4>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	220f      	movs	r2, #15
 800d0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d0f8:	4a2e      	ldr	r2, [pc, #184]	@ (800d1b4 <HAL_GPIO_DeInit+0x1ac>)
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	089b      	lsrs	r3, r3, #2
 800d0fe:	3302      	adds	r3, #2
 800d100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	43da      	mvns	r2, r3
 800d108:	482a      	ldr	r0, [pc, #168]	@ (800d1b4 <HAL_GPIO_DeInit+0x1ac>)
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	089b      	lsrs	r3, r3, #2
 800d10e:	400a      	ands	r2, r1
 800d110:	3302      	adds	r3, #2
 800d112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	2103      	movs	r1, #3
 800d120:	fa01 f303 	lsl.w	r3, r1, r3
 800d124:	43db      	mvns	r3, r3
 800d126:	401a      	ands	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	08da      	lsrs	r2, r3, #3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3208      	adds	r2, #8
 800d134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f003 0307 	and.w	r3, r3, #7
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	220f      	movs	r2, #15
 800d142:	fa02 f303 	lsl.w	r3, r2, r3
 800d146:	43db      	mvns	r3, r3
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	08d2      	lsrs	r2, r2, #3
 800d14c:	4019      	ands	r1, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	3208      	adds	r2, #8
 800d152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	005b      	lsls	r3, r3, #1
 800d15e:	2103      	movs	r1, #3
 800d160:	fa01 f303 	lsl.w	r3, r1, r3
 800d164:	43db      	mvns	r3, r3
 800d166:	401a      	ands	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	2101      	movs	r1, #1
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	fa01 f303 	lsl.w	r3, r1, r3
 800d178:	43db      	mvns	r3, r3
 800d17a:	401a      	ands	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	689a      	ldr	r2, [r3, #8]
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	2103      	movs	r1, #3
 800d18a:	fa01 f303 	lsl.w	r3, r1, r3
 800d18e:	43db      	mvns	r3, r3
 800d190:	401a      	ands	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	3301      	adds	r3, #1
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	2b0f      	cmp	r3, #15
 800d1a0:	f67f af40 	bls.w	800d024 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	40013800 	.word	0x40013800
 800d1b8:	40020000 	.word	0x40020000
 800d1bc:	40020400 	.word	0x40020400
 800d1c0:	40020800 	.word	0x40020800
 800d1c4:	40020c00 	.word	0x40020c00
 800d1c8:	40021000 	.word	0x40021000
 800d1cc:	40013c00 	.word	0x40013c00

0800d1d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691a      	ldr	r2, [r3, #16]
 800d1e0:	887b      	ldrh	r3, [r7, #2]
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	73fb      	strb	r3, [r7, #15]
 800d1ec:	e001      	b.n	800d1f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	807b      	strh	r3, [r7, #2]
 800d20c:	4613      	mov	r3, r2
 800d20e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d210:	787b      	ldrb	r3, [r7, #1]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d003      	beq.n	800d21e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d216:	887a      	ldrh	r2, [r7, #2]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d21c:	e003      	b.n	800d226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d21e:	887b      	ldrh	r3, [r7, #2]
 800d220:	041a      	lsls	r2, r3, #16
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	619a      	str	r2, [r3, #24]
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
	...

0800d234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e12b      	b.n	800d49e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f95d 	bl	800d51a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2224      	movs	r2, #36	@ 0x24
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f022 0201 	bic.w	r2, r2, #1
 800d276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d298:	f002 f93e 	bl	800f518 <HAL_RCC_GetPCLK1Freq>
 800d29c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	4a81      	ldr	r2, [pc, #516]	@ (800d4a8 <HAL_I2C_Init+0x274>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d807      	bhi.n	800d2b8 <HAL_I2C_Init+0x84>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	4a80      	ldr	r2, [pc, #512]	@ (800d4ac <HAL_I2C_Init+0x278>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	bf94      	ite	ls
 800d2b0:	2301      	movls	r3, #1
 800d2b2:	2300      	movhi	r3, #0
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	e006      	b.n	800d2c6 <HAL_I2C_Init+0x92>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	4a7d      	ldr	r2, [pc, #500]	@ (800d4b0 <HAL_I2C_Init+0x27c>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	bf94      	ite	ls
 800d2c0:	2301      	movls	r3, #1
 800d2c2:	2300      	movhi	r3, #0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e0e7      	b.n	800d49e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4a78      	ldr	r2, [pc, #480]	@ (800d4b4 <HAL_I2C_Init+0x280>)
 800d2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d6:	0c9b      	lsrs	r3, r3, #18
 800d2d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6a1b      	ldr	r3, [r3, #32]
 800d2f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	4a6a      	ldr	r2, [pc, #424]	@ (800d4a8 <HAL_I2C_Init+0x274>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d802      	bhi.n	800d308 <HAL_I2C_Init+0xd4>
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	3301      	adds	r3, #1
 800d306:	e009      	b.n	800d31c <HAL_I2C_Init+0xe8>
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d30e:	fb02 f303 	mul.w	r3, r2, r3
 800d312:	4a69      	ldr	r2, [pc, #420]	@ (800d4b8 <HAL_I2C_Init+0x284>)
 800d314:	fba2 2303 	umull	r2, r3, r2, r3
 800d318:	099b      	lsrs	r3, r3, #6
 800d31a:	3301      	adds	r3, #1
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	6812      	ldr	r2, [r2, #0]
 800d320:	430b      	orrs	r3, r1
 800d322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d32e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	495c      	ldr	r1, [pc, #368]	@ (800d4a8 <HAL_I2C_Init+0x274>)
 800d338:	428b      	cmp	r3, r1
 800d33a:	d819      	bhi.n	800d370 <HAL_I2C_Init+0x13c>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	1e59      	subs	r1, r3, #1
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	fbb1 f3f3 	udiv	r3, r1, r3
 800d34a:	1c59      	adds	r1, r3, #1
 800d34c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d350:	400b      	ands	r3, r1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <HAL_I2C_Init+0x138>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	1e59      	subs	r1, r3, #1
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	fbb1 f3f3 	udiv	r3, r1, r3
 800d364:	3301      	adds	r3, #1
 800d366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d36a:	e051      	b.n	800d410 <HAL_I2C_Init+0x1dc>
 800d36c:	2304      	movs	r3, #4
 800d36e:	e04f      	b.n	800d410 <HAL_I2C_Init+0x1dc>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d111      	bne.n	800d39c <HAL_I2C_Init+0x168>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	1e58      	subs	r0, r3, #1
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6859      	ldr	r1, [r3, #4]
 800d380:	460b      	mov	r3, r1
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	440b      	add	r3, r1
 800d386:	fbb0 f3f3 	udiv	r3, r0, r3
 800d38a:	3301      	adds	r3, #1
 800d38c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d390:	2b00      	cmp	r3, #0
 800d392:	bf0c      	ite	eq
 800d394:	2301      	moveq	r3, #1
 800d396:	2300      	movne	r3, #0
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	e012      	b.n	800d3c2 <HAL_I2C_Init+0x18e>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	1e58      	subs	r0, r3, #1
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6859      	ldr	r1, [r3, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	440b      	add	r3, r1
 800d3aa:	0099      	lsls	r1, r3, #2
 800d3ac:	440b      	add	r3, r1
 800d3ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2301      	moveq	r3, #1
 800d3be:	2300      	movne	r3, #0
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <HAL_I2C_Init+0x196>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e022      	b.n	800d410 <HAL_I2C_Init+0x1dc>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10e      	bne.n	800d3f0 <HAL_I2C_Init+0x1bc>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	1e58      	subs	r0, r3, #1
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6859      	ldr	r1, [r3, #4]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	440b      	add	r3, r1
 800d3e0:	fbb0 f3f3 	udiv	r3, r0, r3
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3ee:	e00f      	b.n	800d410 <HAL_I2C_Init+0x1dc>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	1e58      	subs	r0, r3, #1
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6859      	ldr	r1, [r3, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	440b      	add	r3, r1
 800d3fe:	0099      	lsls	r1, r3, #2
 800d400:	440b      	add	r3, r1
 800d402:	fbb0 f3f3 	udiv	r3, r0, r3
 800d406:	3301      	adds	r3, #1
 800d408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d40c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	6809      	ldr	r1, [r1, #0]
 800d414:	4313      	orrs	r3, r2
 800d416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	69da      	ldr	r2, [r3, #28]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	431a      	orrs	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	430a      	orrs	r2, r1
 800d432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d43e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	6911      	ldr	r1, [r2, #16]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	68d2      	ldr	r2, [r2, #12]
 800d44a:	4311      	orrs	r1, r2
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	6812      	ldr	r2, [r2, #0]
 800d450:	430b      	orrs	r3, r1
 800d452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	695a      	ldr	r2, [r3, #20]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	431a      	orrs	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	430a      	orrs	r2, r1
 800d46e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f042 0201 	orr.w	r2, r2, #1
 800d47e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2220      	movs	r2, #32
 800d48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	000186a0 	.word	0x000186a0
 800d4ac:	001e847f 	.word	0x001e847f
 800d4b0:	003d08ff 	.word	0x003d08ff
 800d4b4:	431bde83 	.word	0x431bde83
 800d4b8:	10624dd3 	.word	0x10624dd3

0800d4bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e021      	b.n	800d512 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2224      	movs	r2, #36	@ 0x24
 800d4d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0201 	bic.w	r2, r2, #1
 800d4e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f821 	bl	800d52e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b083      	sub	sp, #12
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d522:	bf00      	nop
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr

0800d52e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d52e:	b480      	push	{r7}
 800d530:	b083      	sub	sp, #12
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d536:	bf00      	nop
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
	...

0800d544 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b088      	sub	sp, #32
 800d548:	af02      	add	r7, sp, #8
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	607a      	str	r2, [r7, #4]
 800d54e:	461a      	mov	r2, r3
 800d550:	460b      	mov	r3, r1
 800d552:	817b      	strh	r3, [r7, #10]
 800d554:	4613      	mov	r3, r2
 800d556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d558:	f7fe fef2 	bl	800c340 <HAL_GetTick>
 800d55c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b20      	cmp	r3, #32
 800d568:	f040 80e0 	bne.w	800d72c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	2319      	movs	r3, #25
 800d572:	2201      	movs	r2, #1
 800d574:	4970      	ldr	r1, [pc, #448]	@ (800d738 <HAL_I2C_Master_Transmit+0x1f4>)
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f001 f928 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d582:	2302      	movs	r3, #2
 800d584:	e0d3      	b.n	800d72e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d101      	bne.n	800d594 <HAL_I2C_Master_Transmit+0x50>
 800d590:	2302      	movs	r3, #2
 800d592:	e0cc      	b.n	800d72e <HAL_I2C_Master_Transmit+0x1ea>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d007      	beq.n	800d5ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f042 0201 	orr.w	r2, r2, #1
 800d5b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d5c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2221      	movs	r2, #33	@ 0x21
 800d5ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2210      	movs	r2, #16
 800d5d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	893a      	ldrh	r2, [r7, #8]
 800d5ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4a50      	ldr	r2, [pc, #320]	@ (800d73c <HAL_I2C_Master_Transmit+0x1f8>)
 800d5fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d5fc:	8979      	ldrh	r1, [r7, #10]
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	6a3a      	ldr	r2, [r7, #32]
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f000 fe14 	bl	800e230 <I2C_MasterRequestWrite>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d001      	beq.n	800d612 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	e08d      	b.n	800d72e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d612:	2300      	movs	r3, #0
 800d614:	613b      	str	r3, [r7, #16]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	613b      	str	r3, [r7, #16]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	613b      	str	r3, [r7, #16]
 800d626:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d628:	e066      	b.n	800d6f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	6a39      	ldr	r1, [r7, #32]
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f001 f9e6 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00d      	beq.n	800d656 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d63e:	2b04      	cmp	r3, #4
 800d640:	d107      	bne.n	800d652 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e06b      	b.n	800d72e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d65a:	781a      	ldrb	r2, [r3, #0]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d670:	b29b      	uxth	r3, r3
 800d672:	3b01      	subs	r3, #1
 800d674:	b29a      	uxth	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d67e:	3b01      	subs	r3, #1
 800d680:	b29a      	uxth	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b04      	cmp	r3, #4
 800d692:	d11b      	bne.n	800d6cc <HAL_I2C_Master_Transmit+0x188>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d017      	beq.n	800d6cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a0:	781a      	ldrb	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6cc:	697a      	ldr	r2, [r7, #20]
 800d6ce:	6a39      	ldr	r1, [r7, #32]
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f001 f9dd 	bl	800ea90 <I2C_WaitOnBTFFlagUntilTimeout>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00d      	beq.n	800d6f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	d107      	bne.n	800d6f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e01a      	b.n	800d72e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d194      	bne.n	800d62a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d70e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2220      	movs	r2, #32
 800d714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	e000      	b.n	800d72e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d72c:	2302      	movs	r3, #2
  }
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	00100002 	.word	0x00100002
 800d73c:	ffff0000 	.word	0xffff0000

0800d740 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08c      	sub	sp, #48	@ 0x30
 800d744:	af02      	add	r7, sp, #8
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	607a      	str	r2, [r7, #4]
 800d74a:	461a      	mov	r2, r3
 800d74c:	460b      	mov	r3, r1
 800d74e:	817b      	strh	r3, [r7, #10]
 800d750:	4613      	mov	r3, r2
 800d752:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d754:	f7fe fdf4 	bl	800c340 <HAL_GetTick>
 800d758:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b20      	cmp	r3, #32
 800d764:	f040 8217 	bne.w	800db96 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	2319      	movs	r3, #25
 800d76e:	2201      	movs	r2, #1
 800d770:	497c      	ldr	r1, [pc, #496]	@ (800d964 <HAL_I2C_Master_Receive+0x224>)
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f001 f82a 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d77e:	2302      	movs	r3, #2
 800d780:	e20a      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d101      	bne.n	800d790 <HAL_I2C_Master_Receive+0x50>
 800d78c:	2302      	movs	r3, #2
 800d78e:	e203      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d007      	beq.n	800d7b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f042 0201 	orr.w	r2, r2, #1
 800d7b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d7c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2222      	movs	r2, #34	@ 0x22
 800d7ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2210      	movs	r2, #16
 800d7d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	893a      	ldrh	r2, [r7, #8]
 800d7e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	4a5c      	ldr	r2, [pc, #368]	@ (800d968 <HAL_I2C_Master_Receive+0x228>)
 800d7f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d7f8:	8979      	ldrh	r1, [r7, #10]
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 fd98 	bl	800e334 <I2C_MasterRequestRead>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e1c4      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d812:	2b00      	cmp	r3, #0
 800d814:	d113      	bne.n	800d83e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d816:	2300      	movs	r3, #0
 800d818:	623b      	str	r3, [r7, #32]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	623b      	str	r3, [r7, #32]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	623b      	str	r3, [r7, #32]
 800d82a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	e198      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d842:	2b01      	cmp	r3, #1
 800d844:	d11b      	bne.n	800d87e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d856:	2300      	movs	r3, #0
 800d858:	61fb      	str	r3, [r7, #28]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	61fb      	str	r3, [r7, #28]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	61fb      	str	r3, [r7, #28]
 800d86a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d87a:	601a      	str	r2, [r3, #0]
 800d87c:	e178      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d882:	2b02      	cmp	r3, #2
 800d884:	d11b      	bne.n	800d8be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	61bb      	str	r3, [r7, #24]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	695b      	ldr	r3, [r3, #20]
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	61bb      	str	r3, [r7, #24]
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	e158      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d8cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	617b      	str	r3, [r7, #20]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d8e4:	e144      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	f200 80f1 	bhi.w	800dad2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d123      	bne.n	800d940 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f001 f90f 	bl	800eb20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e145      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	691a      	ldr	r2, [r3, #16]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d91e:	1c5a      	adds	r2, r3, #1
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d928:	3b01      	subs	r3, #1
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d934:	b29b      	uxth	r3, r3
 800d936:	3b01      	subs	r3, #1
 800d938:	b29a      	uxth	r2, r3
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d93e:	e117      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d944:	2b02      	cmp	r3, #2
 800d946:	d14e      	bne.n	800d9e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94e:	2200      	movs	r2, #0
 800d950:	4906      	ldr	r1, [pc, #24]	@ (800d96c <HAL_I2C_Master_Receive+0x22c>)
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 ff3a 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d008      	beq.n	800d970 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	e11a      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
 800d962:	bf00      	nop
 800d964:	00100002 	.word	0x00100002
 800d968:	ffff0000 	.word	0xffff0000
 800d96c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d97e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	691a      	ldr	r2, [r3, #16]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d99c:	3b01      	subs	r3, #1
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	691a      	ldr	r2, [r3, #16]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9bc:	b2d2      	uxtb	r2, r2
 800d9be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d9e4:	e0c4      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	496c      	ldr	r1, [pc, #432]	@ (800dba0 <HAL_I2C_Master_Receive+0x460>)
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 feeb 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e0cb      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	691a      	ldr	r2, [r3, #16]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1a:	b2d2      	uxtb	r2, r2
 800da1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da2c:	3b01      	subs	r3, #1
 800da2e:	b29a      	uxth	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da38:	b29b      	uxth	r3, r3
 800da3a:	3b01      	subs	r3, #1
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	2200      	movs	r2, #0
 800da4a:	4955      	ldr	r1, [pc, #340]	@ (800dba0 <HAL_I2C_Master_Receive+0x460>)
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 febd 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800da58:	2301      	movs	r3, #1
 800da5a:	e09d      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	691a      	ldr	r2, [r3, #16]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da76:	b2d2      	uxtb	r2, r2
 800da78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da88:	3b01      	subs	r3, #1
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da94:	b29b      	uxth	r3, r3
 800da96:	3b01      	subs	r3, #1
 800da98:	b29a      	uxth	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	691a      	ldr	r2, [r3, #16]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daa8:	b2d2      	uxtb	r2, r2
 800daaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab0:	1c5a      	adds	r2, r3, #1
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daba:	3b01      	subs	r3, #1
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	3b01      	subs	r3, #1
 800daca:	b29a      	uxth	r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dad0:	e04e      	b.n	800db70 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f001 f822 	bl	800eb20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e058      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	691a      	ldr	r2, [r3, #16]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf0:	b2d2      	uxtb	r2, r2
 800daf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf8:	1c5a      	adds	r2, r3, #1
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db02:	3b01      	subs	r3, #1
 800db04:	b29a      	uxth	r2, r3
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db0e:	b29b      	uxth	r3, r3
 800db10:	3b01      	subs	r3, #1
 800db12:	b29a      	uxth	r2, r3
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	f003 0304 	and.w	r3, r3, #4
 800db22:	2b04      	cmp	r3, #4
 800db24:	d124      	bne.n	800db70 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db2a:	2b03      	cmp	r3, #3
 800db2c:	d107      	bne.n	800db3e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	691a      	ldr	r2, [r3, #16]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db48:	b2d2      	uxtb	r2, r2
 800db4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db5a:	3b01      	subs	r3, #1
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db66:	b29b      	uxth	r3, r3
 800db68:	3b01      	subs	r3, #1
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db74:	2b00      	cmp	r3, #0
 800db76:	f47f aeb6 	bne.w	800d8e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2220      	movs	r2, #32
 800db7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	e000      	b.n	800db98 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800db96:	2302      	movs	r3, #2
  }
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3728      	adds	r7, #40	@ 0x28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	00010004 	.word	0x00010004

0800dba4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	4608      	mov	r0, r1
 800dbae:	4611      	mov	r1, r2
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	817b      	strh	r3, [r7, #10]
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	813b      	strh	r3, [r7, #8]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dbbe:	f7fe fbbf 	bl	800c340 <HAL_GetTick>
 800dbc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b20      	cmp	r3, #32
 800dbce:	f040 80d9 	bne.w	800dd84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	2319      	movs	r3, #25
 800dbd8:	2201      	movs	r2, #1
 800dbda:	496d      	ldr	r1, [pc, #436]	@ (800dd90 <HAL_I2C_Mem_Write+0x1ec>)
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 fdf5 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e0cc      	b.n	800dd86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d101      	bne.n	800dbfa <HAL_I2C_Mem_Write+0x56>
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	e0c5      	b.n	800dd86 <HAL_I2C_Mem_Write+0x1e2>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d007      	beq.n	800dc20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f042 0201 	orr.w	r2, r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2221      	movs	r2, #33	@ 0x21
 800dc34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2240      	movs	r2, #64	@ 0x40
 800dc3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6a3a      	ldr	r2, [r7, #32]
 800dc4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4a4d      	ldr	r2, [pc, #308]	@ (800dd94 <HAL_I2C_Mem_Write+0x1f0>)
 800dc60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dc62:	88f8      	ldrh	r0, [r7, #6]
 800dc64:	893a      	ldrh	r2, [r7, #8]
 800dc66:	8979      	ldrh	r1, [r7, #10]
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	4603      	mov	r3, r0
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f000 fc2c 	bl	800e4d0 <I2C_RequestMemoryWrite>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d052      	beq.n	800dd24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e081      	b.n	800dd86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f000 feba 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00d      	beq.n	800dcae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d107      	bne.n	800dcaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e06b      	b.n	800dd86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	f003 0304 	and.w	r3, r3, #4
 800dce8:	2b04      	cmp	r3, #4
 800dcea:	d11b      	bne.n	800dd24 <HAL_I2C_Mem_Write+0x180>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d017      	beq.n	800dd24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf8:	781a      	ldrb	r2, [r3, #0]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd04:	1c5a      	adds	r2, r3, #1
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1aa      	bne.n	800dc82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd2c:	697a      	ldr	r2, [r7, #20]
 800dd2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 fead 	bl	800ea90 <I2C_WaitOnBTFFlagUntilTimeout>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00d      	beq.n	800dd58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd40:	2b04      	cmp	r3, #4
 800dd42:	d107      	bne.n	800dd54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	e016      	b.n	800dd86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	e000      	b.n	800dd86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800dd84:	2302      	movs	r3, #2
  }
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3718      	adds	r7, #24
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	00100002 	.word	0x00100002
 800dd94:	ffff0000 	.word	0xffff0000

0800dd98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b08c      	sub	sp, #48	@ 0x30
 800dd9c:	af02      	add	r7, sp, #8
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	4608      	mov	r0, r1
 800dda2:	4611      	mov	r1, r2
 800dda4:	461a      	mov	r2, r3
 800dda6:	4603      	mov	r3, r0
 800dda8:	817b      	strh	r3, [r7, #10]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	813b      	strh	r3, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ddb2:	f7fe fac5 	bl	800c340 <HAL_GetTick>
 800ddb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b20      	cmp	r3, #32
 800ddc2:	f040 8214 	bne.w	800e1ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	2319      	movs	r3, #25
 800ddcc:	2201      	movs	r2, #1
 800ddce:	497b      	ldr	r1, [pc, #492]	@ (800dfbc <HAL_I2C_Mem_Read+0x224>)
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f000 fcfb 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800dddc:	2302      	movs	r3, #2
 800ddde:	e207      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d101      	bne.n	800ddee <HAL_I2C_Mem_Read+0x56>
 800ddea:	2302      	movs	r3, #2
 800ddec:	e200      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	2b01      	cmp	r3, #1
 800de02:	d007      	beq.n	800de14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f042 0201 	orr.w	r2, r2, #1
 800de12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800de22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2222      	movs	r2, #34	@ 0x22
 800de28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2240      	movs	r2, #64	@ 0x40
 800de30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800de44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4a5b      	ldr	r2, [pc, #364]	@ (800dfc0 <HAL_I2C_Mem_Read+0x228>)
 800de54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800de56:	88f8      	ldrh	r0, [r7, #6]
 800de58:	893a      	ldrh	r2, [r7, #8]
 800de5a:	8979      	ldrh	r1, [r7, #10]
 800de5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de62:	9300      	str	r3, [sp, #0]
 800de64:	4603      	mov	r3, r0
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 fbc8 	bl	800e5fc <I2C_RequestMemoryRead>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e1bc      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d113      	bne.n	800dea6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de7e:	2300      	movs	r3, #0
 800de80:	623b      	str	r3, [r7, #32]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	623b      	str	r3, [r7, #32]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	623b      	str	r3, [r7, #32]
 800de92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dea2:	601a      	str	r2, [r3, #0]
 800dea4:	e190      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d11b      	bne.n	800dee6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800debc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800debe:	2300      	movs	r3, #0
 800dec0:	61fb      	str	r3, [r7, #28]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	695b      	ldr	r3, [r3, #20]
 800dec8:	61fb      	str	r3, [r7, #28]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	699b      	ldr	r3, [r3, #24]
 800ded0:	61fb      	str	r3, [r7, #28]
 800ded2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	e170      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800deea:	2b02      	cmp	r3, #2
 800deec:	d11b      	bne.n	800df26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800defc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df0e:	2300      	movs	r3, #0
 800df10:	61bb      	str	r3, [r7, #24]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	61bb      	str	r3, [r7, #24]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	61bb      	str	r3, [r7, #24]
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	e150      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df26:	2300      	movs	r3, #0
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	695b      	ldr	r3, [r3, #20]
 800df30:	617b      	str	r3, [r7, #20]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	617b      	str	r3, [r7, #20]
 800df3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800df3c:	e144      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df42:	2b03      	cmp	r3, #3
 800df44:	f200 80f1 	bhi.w	800e12a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d123      	bne.n	800df98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f000 fde3 	bl	800eb20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e145      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	691a      	ldr	r2, [r3, #16]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6e:	b2d2      	uxtb	r2, r2
 800df70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df76:	1c5a      	adds	r2, r3, #1
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df80:	3b01      	subs	r3, #1
 800df82:	b29a      	uxth	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	3b01      	subs	r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800df96:	e117      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d14e      	bne.n	800e03e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4906      	ldr	r1, [pc, #24]	@ (800dfc4 <HAL_I2C_Mem_Read+0x22c>)
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f000 fc0e 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d008      	beq.n	800dfc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e11a      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
 800dfba:	bf00      	nop
 800dfbc:	00100002 	.word	0x00100002
 800dfc0:	ffff0000 	.word	0xffff0000
 800dfc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	691a      	ldr	r2, [r3, #16]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfe2:	b2d2      	uxtb	r2, r2
 800dfe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e000:	b29b      	uxth	r3, r3
 800e002:	3b01      	subs	r3, #1
 800e004:	b29a      	uxth	r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	691a      	ldr	r2, [r3, #16]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e014:	b2d2      	uxtb	r2, r2
 800e016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01c:	1c5a      	adds	r2, r3, #1
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e026:	3b01      	subs	r3, #1
 800e028:	b29a      	uxth	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e032:	b29b      	uxth	r3, r3
 800e034:	3b01      	subs	r3, #1
 800e036:	b29a      	uxth	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e03c:	e0c4      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	2200      	movs	r2, #0
 800e046:	496c      	ldr	r1, [pc, #432]	@ (800e1f8 <HAL_I2C_Mem_Read+0x460>)
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 fbbf 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e0cb      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	691a      	ldr	r2, [r3, #16]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e072:	b2d2      	uxtb	r2, r2
 800e074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e084:	3b01      	subs	r3, #1
 800e086:	b29a      	uxth	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e090:	b29b      	uxth	r3, r3
 800e092:	3b01      	subs	r3, #1
 800e094:	b29a      	uxth	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	4955      	ldr	r1, [pc, #340]	@ (800e1f8 <HAL_I2C_Mem_Read+0x460>)
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f000 fb91 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e09d      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	691a      	ldr	r2, [r3, #16]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ce:	b2d2      	uxtb	r2, r2
 800e0d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	691a      	ldr	r2, [r3, #16]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e100:	b2d2      	uxtb	r2, r2
 800e102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e112:	3b01      	subs	r3, #1
 800e114:	b29a      	uxth	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3b01      	subs	r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e128:	e04e      	b.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e12a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e12c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f000 fcf6 	bl	800eb20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e058      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	691a      	ldr	r2, [r3, #16]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e148:	b2d2      	uxtb	r2, r2
 800e14a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e15a:	3b01      	subs	r3, #1
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e166:	b29b      	uxth	r3, r3
 800e168:	3b01      	subs	r3, #1
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	695b      	ldr	r3, [r3, #20]
 800e176:	f003 0304 	and.w	r3, r3, #4
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d124      	bne.n	800e1c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e182:	2b03      	cmp	r3, #3
 800e184:	d107      	bne.n	800e196 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e194:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	691a      	ldr	r2, [r3, #16]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a0:	b2d2      	uxtb	r2, r2
 800e1a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f47f aeb6 	bne.w	800df3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2220      	movs	r2, #32
 800e1d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e000      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800e1ee:	2302      	movs	r3, #2
  }
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3728      	adds	r7, #40	@ 0x28
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	00010004 	.word	0x00010004

0800e1fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e20a:	b2db      	uxtb	r3, r3
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e224:	4618      	mov	r0, r3
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af02      	add	r7, sp, #8
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	607a      	str	r2, [r7, #4]
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	460b      	mov	r3, r1
 800e23e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e244:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	2b08      	cmp	r3, #8
 800e24a:	d006      	beq.n	800e25a <I2C_MasterRequestWrite+0x2a>
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d003      	beq.n	800e25a <I2C_MasterRequestWrite+0x2a>
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e258:	d108      	bne.n	800e26c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	e00b      	b.n	800e284 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e270:	2b12      	cmp	r3, #18
 800e272:	d107      	bne.n	800e284 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e282:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 fa9b 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00d      	beq.n	800e2b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2aa:	d103      	bne.n	800e2b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	e035      	b.n	800e324 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e2c0:	d108      	bne.n	800e2d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e2c2:	897b      	ldrh	r3, [r7, #10]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e2d0:	611a      	str	r2, [r3, #16]
 800e2d2:	e01b      	b.n	800e30c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e2d4:	897b      	ldrh	r3, [r7, #10]
 800e2d6:	11db      	asrs	r3, r3, #7
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	f003 0306 	and.w	r3, r3, #6
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	f063 030f 	orn	r3, r3, #15
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	490e      	ldr	r1, [pc, #56]	@ (800e32c <I2C_MasterRequestWrite+0xfc>)
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f000 fae4 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e010      	b.n	800e324 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e302:	897b      	ldrh	r3, [r7, #10]
 800e304:	b2da      	uxtb	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	4907      	ldr	r1, [pc, #28]	@ (800e330 <I2C_MasterRequestWrite+0x100>)
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 fad4 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3718      	adds	r7, #24
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	00010008 	.word	0x00010008
 800e330:	00010002 	.word	0x00010002

0800e334 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b088      	sub	sp, #32
 800e338:	af02      	add	r7, sp, #8
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	607a      	str	r2, [r7, #4]
 800e33e:	603b      	str	r3, [r7, #0]
 800e340:	460b      	mov	r3, r1
 800e342:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e348:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e358:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b08      	cmp	r3, #8
 800e35e:	d006      	beq.n	800e36e <I2C_MasterRequestRead+0x3a>
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d003      	beq.n	800e36e <I2C_MasterRequestRead+0x3a>
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e36c:	d108      	bne.n	800e380 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	e00b      	b.n	800e398 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e384:	2b11      	cmp	r3, #17
 800e386:	d107      	bne.n	800e398 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 fa11 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00d      	beq.n	800e3cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3be:	d103      	bne.n	800e3c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	e079      	b.n	800e4c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	691b      	ldr	r3, [r3, #16]
 800e3d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3d4:	d108      	bne.n	800e3e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e3d6:	897b      	ldrh	r3, [r7, #10]
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	f043 0301 	orr.w	r3, r3, #1
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	611a      	str	r2, [r3, #16]
 800e3e6:	e05f      	b.n	800e4a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e3e8:	897b      	ldrh	r3, [r7, #10]
 800e3ea:	11db      	asrs	r3, r3, #7
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	f003 0306 	and.w	r3, r3, #6
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f063 030f 	orn	r3, r3, #15
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	4930      	ldr	r1, [pc, #192]	@ (800e4c8 <I2C_MasterRequestRead+0x194>)
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f000 fa5a 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	e054      	b.n	800e4c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e416:	897b      	ldrh	r3, [r7, #10]
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	4929      	ldr	r1, [pc, #164]	@ (800e4cc <I2C_MasterRequestRead+0x198>)
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f000 fa4a 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d001      	beq.n	800e436 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e432:	2301      	movs	r3, #1
 800e434:	e044      	b.n	800e4c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e436:	2300      	movs	r3, #0
 800e438:	613b      	str	r3, [r7, #16]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	613b      	str	r3, [r7, #16]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	699b      	ldr	r3, [r3, #24]
 800e448:	613b      	str	r3, [r7, #16]
 800e44a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e45a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f000 f9af 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00d      	beq.n	800e490 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e47e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e482:	d103      	bne.n	800e48c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e48a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e48c:	2303      	movs	r3, #3
 800e48e:	e017      	b.n	800e4c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e490:	897b      	ldrh	r3, [r7, #10]
 800e492:	11db      	asrs	r3, r3, #7
 800e494:	b2db      	uxtb	r3, r3
 800e496:	f003 0306 	and.w	r3, r3, #6
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	f063 030e 	orn	r3, r3, #14
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	4907      	ldr	r1, [pc, #28]	@ (800e4cc <I2C_MasterRequestRead+0x198>)
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f000 fa06 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e000      	b.n	800e4c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	00010008 	.word	0x00010008
 800e4cc:	00010002 	.word	0x00010002

0800e4d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af02      	add	r7, sp, #8
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	4608      	mov	r0, r1
 800e4da:	4611      	mov	r1, r2
 800e4dc:	461a      	mov	r2, r3
 800e4de:	4603      	mov	r3, r0
 800e4e0:	817b      	strh	r3, [r7, #10]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	813b      	strh	r3, [r7, #8]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e4f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2200      	movs	r2, #0
 800e502:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f000 f960 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00d      	beq.n	800e52e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e51c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e520:	d103      	bne.n	800e52a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e528:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e05f      	b.n	800e5ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e52e:	897b      	ldrh	r3, [r7, #10]
 800e530:	b2db      	uxtb	r3, r3
 800e532:	461a      	mov	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e53c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e540:	6a3a      	ldr	r2, [r7, #32]
 800e542:	492d      	ldr	r1, [pc, #180]	@ (800e5f8 <I2C_RequestMemoryWrite+0x128>)
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 f9bb 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	e04c      	b.n	800e5ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e554:	2300      	movs	r3, #0
 800e556:	617b      	str	r3, [r7, #20]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	695b      	ldr	r3, [r3, #20]
 800e55e:	617b      	str	r3, [r7, #20]
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	699b      	ldr	r3, [r3, #24]
 800e566:	617b      	str	r3, [r7, #20]
 800e568:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e56a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e56c:	6a39      	ldr	r1, [r7, #32]
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f000 fa46 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00d      	beq.n	800e596 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e57e:	2b04      	cmp	r3, #4
 800e580:	d107      	bne.n	800e592 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e590:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e02b      	b.n	800e5ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e596:	88fb      	ldrh	r3, [r7, #6]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d105      	bne.n	800e5a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e59c:	893b      	ldrh	r3, [r7, #8]
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	611a      	str	r2, [r3, #16]
 800e5a6:	e021      	b.n	800e5ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e5a8:	893b      	ldrh	r3, [r7, #8]
 800e5aa:	0a1b      	lsrs	r3, r3, #8
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5b8:	6a39      	ldr	r1, [r7, #32]
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f000 fa20 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00d      	beq.n	800e5e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5ca:	2b04      	cmp	r3, #4
 800e5cc:	d107      	bne.n	800e5de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e005      	b.n	800e5ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e5e2:	893b      	ldrh	r3, [r7, #8]
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3718      	adds	r7, #24
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	00010002 	.word	0x00010002

0800e5fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b088      	sub	sp, #32
 800e600:	af02      	add	r7, sp, #8
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	4608      	mov	r0, r1
 800e606:	4611      	mov	r1, r2
 800e608:	461a      	mov	r2, r3
 800e60a:	4603      	mov	r3, r0
 800e60c:	817b      	strh	r3, [r7, #10]
 800e60e:	460b      	mov	r3, r1
 800e610:	813b      	strh	r3, [r7, #8]
 800e612:	4613      	mov	r3, r2
 800e614:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e624:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f000 f8c2 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00d      	beq.n	800e66a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e65c:	d103      	bne.n	800e666 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e664:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e666:	2303      	movs	r3, #3
 800e668:	e0aa      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e66a:	897b      	ldrh	r3, [r7, #10]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	461a      	mov	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67c:	6a3a      	ldr	r2, [r7, #32]
 800e67e:	4952      	ldr	r1, [pc, #328]	@ (800e7c8 <I2C_RequestMemoryRead+0x1cc>)
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f000 f91d 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	e097      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e690:	2300      	movs	r3, #0
 800e692:	617b      	str	r3, [r7, #20]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	617b      	str	r3, [r7, #20]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	699b      	ldr	r3, [r3, #24]
 800e6a2:	617b      	str	r3, [r7, #20]
 800e6a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6a8:	6a39      	ldr	r1, [r7, #32]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 f9a8 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00d      	beq.n	800e6d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d107      	bne.n	800e6ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e6cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e076      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e6d2:	88fb      	ldrh	r3, [r7, #6]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d105      	bne.n	800e6e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e6d8:	893b      	ldrh	r3, [r7, #8]
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	611a      	str	r2, [r3, #16]
 800e6e2:	e021      	b.n	800e728 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e6e4:	893b      	ldrh	r3, [r7, #8]
 800e6e6:	0a1b      	lsrs	r3, r3, #8
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6f4:	6a39      	ldr	r1, [r7, #32]
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f000 f982 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00d      	beq.n	800e71e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e706:	2b04      	cmp	r3, #4
 800e708:	d107      	bne.n	800e71a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e050      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e71e:	893b      	ldrh	r3, [r7, #8]
 800e720:	b2da      	uxtb	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e72a:	6a39      	ldr	r1, [r7, #32]
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 f967 	bl	800ea00 <I2C_WaitOnTXEFlagUntilTimeout>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00d      	beq.n	800e754 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e73c:	2b04      	cmp	r3, #4
 800e73e:	d107      	bne.n	800e750 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e74e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	e035      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e762:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	6a3b      	ldr	r3, [r7, #32]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f000 f82b 	bl	800e7cc <I2C_WaitOnFlagUntilTimeout>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00d      	beq.n	800e798 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e78a:	d103      	bne.n	800e794 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e794:	2303      	movs	r3, #3
 800e796:	e013      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e798:	897b      	ldrh	r3, [r7, #10]
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f043 0301 	orr.w	r3, r3, #1
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7aa:	6a3a      	ldr	r2, [r7, #32]
 800e7ac:	4906      	ldr	r1, [pc, #24]	@ (800e7c8 <I2C_RequestMemoryRead+0x1cc>)
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f000 f886 	bl	800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e000      	b.n	800e7c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	00010002 	.word	0x00010002

0800e7cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	603b      	str	r3, [r7, #0]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e7dc:	e048      	b.n	800e870 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e4:	d044      	beq.n	800e870 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7e6:	f7fd fdab 	bl	800c340 <HAL_GetTick>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d302      	bcc.n	800e7fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d139      	bne.n	800e870 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	0c1b      	lsrs	r3, r3, #16
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b01      	cmp	r3, #1
 800e804:	d10d      	bne.n	800e822 <I2C_WaitOnFlagUntilTimeout+0x56>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	43da      	mvns	r2, r3
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	4013      	ands	r3, r2
 800e812:	b29b      	uxth	r3, r3
 800e814:	2b00      	cmp	r3, #0
 800e816:	bf0c      	ite	eq
 800e818:	2301      	moveq	r3, #1
 800e81a:	2300      	movne	r3, #0
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	461a      	mov	r2, r3
 800e820:	e00c      	b.n	800e83c <I2C_WaitOnFlagUntilTimeout+0x70>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	43da      	mvns	r2, r3
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	4013      	ands	r3, r2
 800e82e:	b29b      	uxth	r3, r3
 800e830:	2b00      	cmp	r3, #0
 800e832:	bf0c      	ite	eq
 800e834:	2301      	moveq	r3, #1
 800e836:	2300      	movne	r3, #0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	461a      	mov	r2, r3
 800e83c:	79fb      	ldrb	r3, [r7, #7]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d116      	bne.n	800e870 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2220      	movs	r2, #32
 800e84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e85c:	f043 0220 	orr.w	r2, r3, #32
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e86c:	2301      	movs	r3, #1
 800e86e:	e023      	b.n	800e8b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	0c1b      	lsrs	r3, r3, #16
 800e874:	b2db      	uxtb	r3, r3
 800e876:	2b01      	cmp	r3, #1
 800e878:	d10d      	bne.n	800e896 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	43da      	mvns	r2, r3
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	4013      	ands	r3, r2
 800e886:	b29b      	uxth	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	bf0c      	ite	eq
 800e88c:	2301      	moveq	r3, #1
 800e88e:	2300      	movne	r3, #0
 800e890:	b2db      	uxtb	r3, r3
 800e892:	461a      	mov	r2, r3
 800e894:	e00c      	b.n	800e8b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	43da      	mvns	r2, r3
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	bf0c      	ite	eq
 800e8a8:	2301      	moveq	r3, #1
 800e8aa:	2300      	movne	r3, #0
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d093      	beq.n	800e7de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e8ce:	e071      	b.n	800e9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e8da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8de:	d123      	bne.n	800e928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e8ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e8f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2220      	movs	r2, #32
 800e904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e914:	f043 0204 	orr.w	r2, r3, #4
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	e067      	b.n	800e9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92e:	d041      	beq.n	800e9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e930:	f7fd fd06 	bl	800c340 <HAL_GetTick>
 800e934:	4602      	mov	r2, r0
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d302      	bcc.n	800e946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d136      	bne.n	800e9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	0c1b      	lsrs	r3, r3, #16
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10c      	bne.n	800e96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	43da      	mvns	r2, r3
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4013      	ands	r3, r2
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bf14      	ite	ne
 800e962:	2301      	movne	r3, #1
 800e964:	2300      	moveq	r3, #0
 800e966:	b2db      	uxtb	r3, r3
 800e968:	e00b      	b.n	800e982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	43da      	mvns	r2, r3
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	4013      	ands	r3, r2
 800e976:	b29b      	uxth	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	bf14      	ite	ne
 800e97c:	2301      	movne	r3, #1
 800e97e:	2300      	moveq	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d016      	beq.n	800e9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2200      	movs	r2, #0
 800e98a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2220      	movs	r2, #32
 800e990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9a0:	f043 0220 	orr.w	r2, r3, #32
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e021      	b.n	800e9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	0c1b      	lsrs	r3, r3, #16
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d10c      	bne.n	800e9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	695b      	ldr	r3, [r3, #20]
 800e9c4:	43da      	mvns	r2, r3
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bf14      	ite	ne
 800e9d0:	2301      	movne	r3, #1
 800e9d2:	2300      	moveq	r3, #0
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	e00b      	b.n	800e9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	43da      	mvns	r2, r3
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	4013      	ands	r3, r2
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	bf14      	ite	ne
 800e9ea:	2301      	movne	r3, #1
 800e9ec:	2300      	moveq	r3, #0
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f47f af6d 	bne.w	800e8d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea0c:	e034      	b.n	800ea78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 f8e3 	bl	800ebda <I2C_IsAcknowledgeFailed>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e034      	b.n	800ea88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea24:	d028      	beq.n	800ea78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea26:	f7fd fc8b 	bl	800c340 <HAL_GetTick>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d302      	bcc.n	800ea3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d11d      	bne.n	800ea78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	695b      	ldr	r3, [r3, #20]
 800ea42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea46:	2b80      	cmp	r3, #128	@ 0x80
 800ea48:	d016      	beq.n	800ea78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2220      	movs	r2, #32
 800ea54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea64:	f043 0220 	orr.w	r2, r3, #32
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ea74:	2301      	movs	r3, #1
 800ea76:	e007      	b.n	800ea88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	695b      	ldr	r3, [r3, #20]
 800ea7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea82:	2b80      	cmp	r3, #128	@ 0x80
 800ea84:	d1c3      	bne.n	800ea0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ea86:	2300      	movs	r3, #0
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea9c:	e034      	b.n	800eb08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f000 f89b 	bl	800ebda <I2C_IsAcknowledgeFailed>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e034      	b.n	800eb18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab4:	d028      	beq.n	800eb08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eab6:	f7fd fc43 	bl	800c340 <HAL_GetTick>
 800eaba:	4602      	mov	r2, r0
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	68ba      	ldr	r2, [r7, #8]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d302      	bcc.n	800eacc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d11d      	bne.n	800eb08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	695b      	ldr	r3, [r3, #20]
 800ead2:	f003 0304 	and.w	r3, r3, #4
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d016      	beq.n	800eb08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2200      	movs	r2, #0
 800eade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaf4:	f043 0220 	orr.w	r2, r3, #32
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e007      	b.n	800eb18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	695b      	ldr	r3, [r3, #20]
 800eb0e:	f003 0304 	and.w	r3, r3, #4
 800eb12:	2b04      	cmp	r3, #4
 800eb14:	d1c3      	bne.n	800ea9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb2c:	e049      	b.n	800ebc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	f003 0310 	and.w	r3, r3, #16
 800eb38:	2b10      	cmp	r3, #16
 800eb3a:	d119      	bne.n	800eb70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f06f 0210 	mvn.w	r2, #16
 800eb44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2220      	movs	r2, #32
 800eb50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e030      	b.n	800ebd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb70:	f7fd fbe6 	bl	800c340 <HAL_GetTick>
 800eb74:	4602      	mov	r2, r0
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d302      	bcc.n	800eb86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d11d      	bne.n	800ebc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	695b      	ldr	r3, [r3, #20]
 800eb8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb90:	2b40      	cmp	r3, #64	@ 0x40
 800eb92:	d016      	beq.n	800ebc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebae:	f043 0220 	orr.w	r2, r3, #32
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e007      	b.n	800ebd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	695b      	ldr	r3, [r3, #20]
 800ebc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebcc:	2b40      	cmp	r3, #64	@ 0x40
 800ebce:	d1ae      	bne.n	800eb2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ebda:	b480      	push	{r7}
 800ebdc:	b083      	sub	sp, #12
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	695b      	ldr	r3, [r3, #20]
 800ebe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebf0:	d11b      	bne.n	800ec2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ebfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2220      	movs	r2, #32
 800ec06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec16:	f043 0204 	orr.w	r2, r3, #4
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e000      	b.n	800ec2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d101      	bne.n	800ec4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ec46:	2301      	movs	r3, #1
 800ec48:	e267      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d075      	beq.n	800ed42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ec56:	4b88      	ldr	r3, [pc, #544]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	f003 030c 	and.w	r3, r3, #12
 800ec5e:	2b04      	cmp	r3, #4
 800ec60:	d00c      	beq.n	800ec7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec62:	4b85      	ldr	r3, [pc, #532]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ec6a:	2b08      	cmp	r3, #8
 800ec6c:	d112      	bne.n	800ec94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec6e:	4b82      	ldr	r3, [pc, #520]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec7a:	d10b      	bne.n	800ec94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ec7c:	4b7e      	ldr	r3, [pc, #504]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d05b      	beq.n	800ed40 <HAL_RCC_OscConfig+0x108>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d157      	bne.n	800ed40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e242      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec9c:	d106      	bne.n	800ecac <HAL_RCC_OscConfig+0x74>
 800ec9e:	4b76      	ldr	r3, [pc, #472]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a75      	ldr	r2, [pc, #468]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800eca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eca8:	6013      	str	r3, [r2, #0]
 800ecaa:	e01d      	b.n	800ece8 <HAL_RCC_OscConfig+0xb0>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ecb4:	d10c      	bne.n	800ecd0 <HAL_RCC_OscConfig+0x98>
 800ecb6:	4b70      	ldr	r3, [pc, #448]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a6f      	ldr	r2, [pc, #444]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	4b6d      	ldr	r3, [pc, #436]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a6c      	ldr	r2, [pc, #432]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	e00b      	b.n	800ece8 <HAL_RCC_OscConfig+0xb0>
 800ecd0:	4b69      	ldr	r3, [pc, #420]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a68      	ldr	r2, [pc, #416]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecda:	6013      	str	r3, [r2, #0]
 800ecdc:	4b66      	ldr	r3, [pc, #408]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a65      	ldr	r2, [pc, #404]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ece2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ece6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d013      	beq.n	800ed18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecf0:	f7fd fb26 	bl	800c340 <HAL_GetTick>
 800ecf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecf6:	e008      	b.n	800ed0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ecf8:	f7fd fb22 	bl	800c340 <HAL_GetTick>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	2b64      	cmp	r3, #100	@ 0x64
 800ed04:	d901      	bls.n	800ed0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e207      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed0a:	4b5b      	ldr	r3, [pc, #364]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d0f0      	beq.n	800ecf8 <HAL_RCC_OscConfig+0xc0>
 800ed16:	e014      	b.n	800ed42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed18:	f7fd fb12 	bl	800c340 <HAL_GetTick>
 800ed1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed1e:	e008      	b.n	800ed32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ed20:	f7fd fb0e 	bl	800c340 <HAL_GetTick>
 800ed24:	4602      	mov	r2, r0
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	2b64      	cmp	r3, #100	@ 0x64
 800ed2c:	d901      	bls.n	800ed32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e1f3      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed32:	4b51      	ldr	r3, [pc, #324]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1f0      	bne.n	800ed20 <HAL_RCC_OscConfig+0xe8>
 800ed3e:	e000      	b.n	800ed42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 0302 	and.w	r3, r3, #2
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d063      	beq.n	800ee16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ed4e:	4b4a      	ldr	r3, [pc, #296]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f003 030c 	and.w	r3, r3, #12
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00b      	beq.n	800ed72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed5a:	4b47      	ldr	r3, [pc, #284]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ed62:	2b08      	cmp	r3, #8
 800ed64:	d11c      	bne.n	800eda0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed66:	4b44      	ldr	r3, [pc, #272]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d116      	bne.n	800eda0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed72:	4b41      	ldr	r3, [pc, #260]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0302 	and.w	r3, r3, #2
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d005      	beq.n	800ed8a <HAL_RCC_OscConfig+0x152>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d001      	beq.n	800ed8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	e1c7      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed8a:	4b3b      	ldr	r3, [pc, #236]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	00db      	lsls	r3, r3, #3
 800ed98:	4937      	ldr	r1, [pc, #220]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed9e:	e03a      	b.n	800ee16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d020      	beq.n	800edea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eda8:	4b34      	ldr	r3, [pc, #208]	@ (800ee7c <HAL_RCC_OscConfig+0x244>)
 800edaa:	2201      	movs	r2, #1
 800edac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edae:	f7fd fac7 	bl	800c340 <HAL_GetTick>
 800edb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800edb4:	e008      	b.n	800edc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800edb6:	f7fd fac3 	bl	800c340 <HAL_GetTick>
 800edba:	4602      	mov	r2, r0
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d901      	bls.n	800edc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e1a8      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800edc8:	4b2b      	ldr	r3, [pc, #172]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f003 0302 	and.w	r3, r3, #2
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d0f0      	beq.n	800edb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800edd4:	4b28      	ldr	r3, [pc, #160]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	00db      	lsls	r3, r3, #3
 800ede2:	4925      	ldr	r1, [pc, #148]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ede4:	4313      	orrs	r3, r2
 800ede6:	600b      	str	r3, [r1, #0]
 800ede8:	e015      	b.n	800ee16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800edea:	4b24      	ldr	r3, [pc, #144]	@ (800ee7c <HAL_RCC_OscConfig+0x244>)
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edf0:	f7fd faa6 	bl	800c340 <HAL_GetTick>
 800edf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800edf6:	e008      	b.n	800ee0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800edf8:	f7fd faa2 	bl	800c340 <HAL_GetTick>
 800edfc:	4602      	mov	r2, r0
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d901      	bls.n	800ee0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e187      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ee0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1f0      	bne.n	800edf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f003 0308 	and.w	r3, r3, #8
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d036      	beq.n	800ee90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d016      	beq.n	800ee58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ee2a:	4b15      	ldr	r3, [pc, #84]	@ (800ee80 <HAL_RCC_OscConfig+0x248>)
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee30:	f7fd fa86 	bl	800c340 <HAL_GetTick>
 800ee34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee36:	e008      	b.n	800ee4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ee38:	f7fd fa82 	bl	800c340 <HAL_GetTick>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d901      	bls.n	800ee4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ee46:	2303      	movs	r3, #3
 800ee48:	e167      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ee4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d0f0      	beq.n	800ee38 <HAL_RCC_OscConfig+0x200>
 800ee56:	e01b      	b.n	800ee90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ee58:	4b09      	ldr	r3, [pc, #36]	@ (800ee80 <HAL_RCC_OscConfig+0x248>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee5e:	f7fd fa6f 	bl	800c340 <HAL_GetTick>
 800ee62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee64:	e00e      	b.n	800ee84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ee66:	f7fd fa6b 	bl	800c340 <HAL_GetTick>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d907      	bls.n	800ee84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e150      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
 800ee78:	40023800 	.word	0x40023800
 800ee7c:	42470000 	.word	0x42470000
 800ee80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee84:	4b88      	ldr	r3, [pc, #544]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ee86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee88:	f003 0302 	and.w	r3, r3, #2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1ea      	bne.n	800ee66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f003 0304 	and.w	r3, r3, #4
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 8097 	beq.w	800efcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eea2:	4b81      	ldr	r3, [pc, #516]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d10f      	bne.n	800eece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60bb      	str	r3, [r7, #8]
 800eeb2:	4b7d      	ldr	r3, [pc, #500]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eeb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeb6:	4a7c      	ldr	r2, [pc, #496]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eeb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eebc:	6413      	str	r3, [r2, #64]	@ 0x40
 800eebe:	4b7a      	ldr	r3, [pc, #488]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eec6:	60bb      	str	r3, [r7, #8]
 800eec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eeca:	2301      	movs	r3, #1
 800eecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eece:	4b77      	ldr	r3, [pc, #476]	@ (800f0ac <HAL_RCC_OscConfig+0x474>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d118      	bne.n	800ef0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eeda:	4b74      	ldr	r3, [pc, #464]	@ (800f0ac <HAL_RCC_OscConfig+0x474>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a73      	ldr	r2, [pc, #460]	@ (800f0ac <HAL_RCC_OscConfig+0x474>)
 800eee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eee6:	f7fd fa2b 	bl	800c340 <HAL_GetTick>
 800eeea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eeec:	e008      	b.n	800ef00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eeee:	f7fd fa27 	bl	800c340 <HAL_GetTick>
 800eef2:	4602      	mov	r2, r0
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	1ad3      	subs	r3, r2, r3
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d901      	bls.n	800ef00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800eefc:	2303      	movs	r3, #3
 800eefe:	e10c      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef00:	4b6a      	ldr	r3, [pc, #424]	@ (800f0ac <HAL_RCC_OscConfig+0x474>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d0f0      	beq.n	800eeee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d106      	bne.n	800ef22 <HAL_RCC_OscConfig+0x2ea>
 800ef14:	4b64      	ldr	r3, [pc, #400]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef18:	4a63      	ldr	r2, [pc, #396]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef1a:	f043 0301 	orr.w	r3, r3, #1
 800ef1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef20:	e01c      	b.n	800ef5c <HAL_RCC_OscConfig+0x324>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	2b05      	cmp	r3, #5
 800ef28:	d10c      	bne.n	800ef44 <HAL_RCC_OscConfig+0x30c>
 800ef2a:	4b5f      	ldr	r3, [pc, #380]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef2e:	4a5e      	ldr	r2, [pc, #376]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef30:	f043 0304 	orr.w	r3, r3, #4
 800ef34:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef36:	4b5c      	ldr	r3, [pc, #368]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef3a:	4a5b      	ldr	r2, [pc, #364]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef3c:	f043 0301 	orr.w	r3, r3, #1
 800ef40:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef42:	e00b      	b.n	800ef5c <HAL_RCC_OscConfig+0x324>
 800ef44:	4b58      	ldr	r3, [pc, #352]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef48:	4a57      	ldr	r2, [pc, #348]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef4a:	f023 0301 	bic.w	r3, r3, #1
 800ef4e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef50:	4b55      	ldr	r3, [pc, #340]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef54:	4a54      	ldr	r2, [pc, #336]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef56:	f023 0304 	bic.w	r3, r3, #4
 800ef5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d015      	beq.n	800ef90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef64:	f7fd f9ec 	bl	800c340 <HAL_GetTick>
 800ef68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef6a:	e00a      	b.n	800ef82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef6c:	f7fd f9e8 	bl	800c340 <HAL_GetTick>
 800ef70:	4602      	mov	r2, r0
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d901      	bls.n	800ef82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ef7e:	2303      	movs	r3, #3
 800ef80:	e0cb      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef82:	4b49      	ldr	r3, [pc, #292]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef86:	f003 0302 	and.w	r3, r3, #2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d0ee      	beq.n	800ef6c <HAL_RCC_OscConfig+0x334>
 800ef8e:	e014      	b.n	800efba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef90:	f7fd f9d6 	bl	800c340 <HAL_GetTick>
 800ef94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef96:	e00a      	b.n	800efae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef98:	f7fd f9d2 	bl	800c340 <HAL_GetTick>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d901      	bls.n	800efae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e0b5      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800efae:	4b3e      	ldr	r3, [pc, #248]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efb2:	f003 0302 	and.w	r3, r3, #2
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1ee      	bne.n	800ef98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800efba:	7dfb      	ldrb	r3, [r7, #23]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d105      	bne.n	800efcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800efc0:	4b39      	ldr	r3, [pc, #228]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc4:	4a38      	ldr	r2, [pc, #224]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800efca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	699b      	ldr	r3, [r3, #24]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 80a1 	beq.w	800f118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800efd6:	4b34      	ldr	r3, [pc, #208]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	f003 030c 	and.w	r3, r3, #12
 800efde:	2b08      	cmp	r3, #8
 800efe0:	d05c      	beq.n	800f09c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	d141      	bne.n	800f06e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efea:	4b31      	ldr	r3, [pc, #196]	@ (800f0b0 <HAL_RCC_OscConfig+0x478>)
 800efec:	2200      	movs	r2, #0
 800efee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eff0:	f7fd f9a6 	bl	800c340 <HAL_GetTick>
 800eff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eff6:	e008      	b.n	800f00a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eff8:	f7fd f9a2 	bl	800c340 <HAL_GetTick>
 800effc:	4602      	mov	r2, r0
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	2b02      	cmp	r3, #2
 800f004:	d901      	bls.n	800f00a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f006:	2303      	movs	r3, #3
 800f008:	e087      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f00a:	4b27      	ldr	r3, [pc, #156]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1f0      	bne.n	800eff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	69da      	ldr	r2, [r3, #28]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a1b      	ldr	r3, [r3, #32]
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f024:	019b      	lsls	r3, r3, #6
 800f026:	431a      	orrs	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	3b01      	subs	r3, #1
 800f030:	041b      	lsls	r3, r3, #16
 800f032:	431a      	orrs	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f038:	061b      	lsls	r3, r3, #24
 800f03a:	491b      	ldr	r1, [pc, #108]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f03c:	4313      	orrs	r3, r2
 800f03e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f040:	4b1b      	ldr	r3, [pc, #108]	@ (800f0b0 <HAL_RCC_OscConfig+0x478>)
 800f042:	2201      	movs	r2, #1
 800f044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f046:	f7fd f97b 	bl	800c340 <HAL_GetTick>
 800f04a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f04c:	e008      	b.n	800f060 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f04e:	f7fd f977 	bl	800c340 <HAL_GetTick>
 800f052:	4602      	mov	r2, r0
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d901      	bls.n	800f060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e05c      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f060:	4b11      	ldr	r3, [pc, #68]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d0f0      	beq.n	800f04e <HAL_RCC_OscConfig+0x416>
 800f06c:	e054      	b.n	800f118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f06e:	4b10      	ldr	r3, [pc, #64]	@ (800f0b0 <HAL_RCC_OscConfig+0x478>)
 800f070:	2200      	movs	r2, #0
 800f072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f074:	f7fd f964 	bl	800c340 <HAL_GetTick>
 800f078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f07a:	e008      	b.n	800f08e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f07c:	f7fd f960 	bl	800c340 <HAL_GetTick>
 800f080:	4602      	mov	r2, r0
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	2b02      	cmp	r3, #2
 800f088:	d901      	bls.n	800f08e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f08a:	2303      	movs	r3, #3
 800f08c:	e045      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f08e:	4b06      	ldr	r3, [pc, #24]	@ (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1f0      	bne.n	800f07c <HAL_RCC_OscConfig+0x444>
 800f09a:	e03d      	b.n	800f118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d107      	bne.n	800f0b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e038      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
 800f0a8:	40023800 	.word	0x40023800
 800f0ac:	40007000 	.word	0x40007000
 800f0b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f0b4:	4b1b      	ldr	r3, [pc, #108]	@ (800f124 <HAL_RCC_OscConfig+0x4ec>)
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d028      	beq.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d121      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d11a      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f0ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d111      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0fa:	085b      	lsrs	r3, r3, #1
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f100:	429a      	cmp	r2, r3
 800f102:	d107      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f10e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f110:	429a      	cmp	r2, r3
 800f112:	d001      	beq.n	800f118 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3718      	adds	r7, #24
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	40023800 	.word	0x40023800

0800f128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	e0cc      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f13c:	4b68      	ldr	r3, [pc, #416]	@ (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 0307 	and.w	r3, r3, #7
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d90c      	bls.n	800f164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f14a:	4b65      	ldr	r3, [pc, #404]	@ (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	b2d2      	uxtb	r2, r2
 800f150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f152:	4b63      	ldr	r3, [pc, #396]	@ (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 0307 	and.w	r3, r3, #7
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d001      	beq.n	800f164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	e0b8      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f003 0302 	and.w	r3, r3, #2
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d020      	beq.n	800f1b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d005      	beq.n	800f188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f17c:	4b59      	ldr	r3, [pc, #356]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	4a58      	ldr	r2, [pc, #352]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f182:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f186:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f003 0308 	and.w	r3, r3, #8
 800f190:	2b00      	cmp	r3, #0
 800f192:	d005      	beq.n	800f1a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f194:	4b53      	ldr	r3, [pc, #332]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	4a52      	ldr	r2, [pc, #328]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f19a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f19e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f1a0:	4b50      	ldr	r3, [pc, #320]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	494d      	ldr	r1, [pc, #308]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d044      	beq.n	800f248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d107      	bne.n	800f1d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1c6:	4b47      	ldr	r3, [pc, #284]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d119      	bne.n	800f206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e07f      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d003      	beq.n	800f1e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1e2:	2b03      	cmp	r3, #3
 800f1e4:	d107      	bne.n	800f1f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1e6:	4b3f      	ldr	r3, [pc, #252]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d109      	bne.n	800f206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e06f      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f1f6:	4b3b      	ldr	r3, [pc, #236]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f003 0302 	and.w	r3, r3, #2
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	e067      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f206:	4b37      	ldr	r3, [pc, #220]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	f023 0203 	bic.w	r2, r3, #3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	4934      	ldr	r1, [pc, #208]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f214:	4313      	orrs	r3, r2
 800f216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f218:	f7fd f892 	bl	800c340 <HAL_GetTick>
 800f21c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f21e:	e00a      	b.n	800f236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f220:	f7fd f88e 	bl	800c340 <HAL_GetTick>
 800f224:	4602      	mov	r2, r0
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f22e:	4293      	cmp	r3, r2
 800f230:	d901      	bls.n	800f236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f232:	2303      	movs	r3, #3
 800f234:	e04f      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f236:	4b2b      	ldr	r3, [pc, #172]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	f003 020c 	and.w	r2, r3, #12
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	429a      	cmp	r2, r3
 800f246:	d1eb      	bne.n	800f220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f248:	4b25      	ldr	r3, [pc, #148]	@ (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f003 0307 	and.w	r3, r3, #7
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	429a      	cmp	r2, r3
 800f254:	d20c      	bcs.n	800f270 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f256:	4b22      	ldr	r3, [pc, #136]	@ (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	b2d2      	uxtb	r2, r2
 800f25c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f25e:	4b20      	ldr	r3, [pc, #128]	@ (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f003 0307 	and.w	r3, r3, #7
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d001      	beq.n	800f270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f26c:	2301      	movs	r3, #1
 800f26e:	e032      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 0304 	and.w	r3, r3, #4
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d008      	beq.n	800f28e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f27c:	4b19      	ldr	r3, [pc, #100]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	4916      	ldr	r1, [pc, #88]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f28a:	4313      	orrs	r3, r2
 800f28c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f003 0308 	and.w	r3, r3, #8
 800f296:	2b00      	cmp	r3, #0
 800f298:	d009      	beq.n	800f2ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f29a:	4b12      	ldr	r3, [pc, #72]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	490e      	ldr	r1, [pc, #56]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f2ae:	f000 f821 	bl	800f2f4 <HAL_RCC_GetSysClockFreq>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	091b      	lsrs	r3, r3, #4
 800f2ba:	f003 030f 	and.w	r3, r3, #15
 800f2be:	490a      	ldr	r1, [pc, #40]	@ (800f2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800f2c0:	5ccb      	ldrb	r3, [r1, r3]
 800f2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c6:	4a09      	ldr	r2, [pc, #36]	@ (800f2ec <HAL_RCC_ClockConfig+0x1c4>)
 800f2c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f2ca:	4b09      	ldr	r3, [pc, #36]	@ (800f2f0 <HAL_RCC_ClockConfig+0x1c8>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fc fff2 	bl	800c2b8 <HAL_InitTick>

  return HAL_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	40023c00 	.word	0x40023c00
 800f2e4:	40023800 	.word	0x40023800
 800f2e8:	08017fd8 	.word	0x08017fd8
 800f2ec:	20000000 	.word	0x20000000
 800f2f0:	20000220 	.word	0x20000220

0800f2f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f2f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2f8:	b094      	sub	sp, #80	@ 0x50
 800f2fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800f300:	2300      	movs	r3, #0
 800f302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800f304:	2300      	movs	r3, #0
 800f306:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800f308:	2300      	movs	r3, #0
 800f30a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f30c:	4b79      	ldr	r3, [pc, #484]	@ (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	f003 030c 	and.w	r3, r3, #12
 800f314:	2b08      	cmp	r3, #8
 800f316:	d00d      	beq.n	800f334 <HAL_RCC_GetSysClockFreq+0x40>
 800f318:	2b08      	cmp	r3, #8
 800f31a:	f200 80e1 	bhi.w	800f4e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d002      	beq.n	800f328 <HAL_RCC_GetSysClockFreq+0x34>
 800f322:	2b04      	cmp	r3, #4
 800f324:	d003      	beq.n	800f32e <HAL_RCC_GetSysClockFreq+0x3a>
 800f326:	e0db      	b.n	800f4e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f328:	4b73      	ldr	r3, [pc, #460]	@ (800f4f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800f32a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f32c:	e0db      	b.n	800f4e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f32e:	4b73      	ldr	r3, [pc, #460]	@ (800f4fc <HAL_RCC_GetSysClockFreq+0x208>)
 800f330:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f332:	e0d8      	b.n	800f4e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f334:	4b6f      	ldr	r3, [pc, #444]	@ (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f33c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f33e:	4b6d      	ldr	r3, [pc, #436]	@ (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f346:	2b00      	cmp	r3, #0
 800f348:	d063      	beq.n	800f412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f34a:	4b6a      	ldr	r3, [pc, #424]	@ (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	099b      	lsrs	r3, r3, #6
 800f350:	2200      	movs	r2, #0
 800f352:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f354:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f35c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f35e:	2300      	movs	r3, #0
 800f360:	637b      	str	r3, [r7, #52]	@ 0x34
 800f362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f366:	4622      	mov	r2, r4
 800f368:	462b      	mov	r3, r5
 800f36a:	f04f 0000 	mov.w	r0, #0
 800f36e:	f04f 0100 	mov.w	r1, #0
 800f372:	0159      	lsls	r1, r3, #5
 800f374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f378:	0150      	lsls	r0, r2, #5
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4621      	mov	r1, r4
 800f380:	1a51      	subs	r1, r2, r1
 800f382:	6139      	str	r1, [r7, #16]
 800f384:	4629      	mov	r1, r5
 800f386:	eb63 0301 	sbc.w	r3, r3, r1
 800f38a:	617b      	str	r3, [r7, #20]
 800f38c:	f04f 0200 	mov.w	r2, #0
 800f390:	f04f 0300 	mov.w	r3, #0
 800f394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f398:	4659      	mov	r1, fp
 800f39a:	018b      	lsls	r3, r1, #6
 800f39c:	4651      	mov	r1, sl
 800f39e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f3a2:	4651      	mov	r1, sl
 800f3a4:	018a      	lsls	r2, r1, #6
 800f3a6:	4651      	mov	r1, sl
 800f3a8:	ebb2 0801 	subs.w	r8, r2, r1
 800f3ac:	4659      	mov	r1, fp
 800f3ae:	eb63 0901 	sbc.w	r9, r3, r1
 800f3b2:	f04f 0200 	mov.w	r2, #0
 800f3b6:	f04f 0300 	mov.w	r3, #0
 800f3ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f3be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f3c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f3c6:	4690      	mov	r8, r2
 800f3c8:	4699      	mov	r9, r3
 800f3ca:	4623      	mov	r3, r4
 800f3cc:	eb18 0303 	adds.w	r3, r8, r3
 800f3d0:	60bb      	str	r3, [r7, #8]
 800f3d2:	462b      	mov	r3, r5
 800f3d4:	eb49 0303 	adc.w	r3, r9, r3
 800f3d8:	60fb      	str	r3, [r7, #12]
 800f3da:	f04f 0200 	mov.w	r2, #0
 800f3de:	f04f 0300 	mov.w	r3, #0
 800f3e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	024b      	lsls	r3, r1, #9
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	024a      	lsls	r2, r1, #9
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f3fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f404:	f7f1 fc28 	bl	8000c58 <__aeabi_uldivmod>
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	4613      	mov	r3, r2
 800f40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f410:	e058      	b.n	800f4c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f412:	4b38      	ldr	r3, [pc, #224]	@ (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	099b      	lsrs	r3, r3, #6
 800f418:	2200      	movs	r2, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	4611      	mov	r1, r2
 800f41e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f422:	623b      	str	r3, [r7, #32]
 800f424:	2300      	movs	r3, #0
 800f426:	627b      	str	r3, [r7, #36]	@ 0x24
 800f428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f42c:	4642      	mov	r2, r8
 800f42e:	464b      	mov	r3, r9
 800f430:	f04f 0000 	mov.w	r0, #0
 800f434:	f04f 0100 	mov.w	r1, #0
 800f438:	0159      	lsls	r1, r3, #5
 800f43a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f43e:	0150      	lsls	r0, r2, #5
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4641      	mov	r1, r8
 800f446:	ebb2 0a01 	subs.w	sl, r2, r1
 800f44a:	4649      	mov	r1, r9
 800f44c:	eb63 0b01 	sbc.w	fp, r3, r1
 800f450:	f04f 0200 	mov.w	r2, #0
 800f454:	f04f 0300 	mov.w	r3, #0
 800f458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f45c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f464:	ebb2 040a 	subs.w	r4, r2, sl
 800f468:	eb63 050b 	sbc.w	r5, r3, fp
 800f46c:	f04f 0200 	mov.w	r2, #0
 800f470:	f04f 0300 	mov.w	r3, #0
 800f474:	00eb      	lsls	r3, r5, #3
 800f476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f47a:	00e2      	lsls	r2, r4, #3
 800f47c:	4614      	mov	r4, r2
 800f47e:	461d      	mov	r5, r3
 800f480:	4643      	mov	r3, r8
 800f482:	18e3      	adds	r3, r4, r3
 800f484:	603b      	str	r3, [r7, #0]
 800f486:	464b      	mov	r3, r9
 800f488:	eb45 0303 	adc.w	r3, r5, r3
 800f48c:	607b      	str	r3, [r7, #4]
 800f48e:	f04f 0200 	mov.w	r2, #0
 800f492:	f04f 0300 	mov.w	r3, #0
 800f496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f49a:	4629      	mov	r1, r5
 800f49c:	028b      	lsls	r3, r1, #10
 800f49e:	4621      	mov	r1, r4
 800f4a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	028a      	lsls	r2, r1, #10
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	61fa      	str	r2, [r7, #28]
 800f4b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4b8:	f7f1 fbce 	bl	8000c58 <__aeabi_uldivmod>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	0c1b      	lsrs	r3, r3, #16
 800f4ca:	f003 0303 	and.w	r3, r3, #3
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	005b      	lsls	r3, r3, #1
 800f4d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800f4d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f4de:	e002      	b.n	800f4e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f4e0:	4b05      	ldr	r3, [pc, #20]	@ (800f4f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800f4e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f4e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f4e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3750      	adds	r7, #80	@ 0x50
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4f2:	bf00      	nop
 800f4f4:	40023800 	.word	0x40023800
 800f4f8:	00f42400 	.word	0x00f42400
 800f4fc:	007a1200 	.word	0x007a1200

0800f500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f500:	b480      	push	{r7}
 800f502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f504:	4b03      	ldr	r3, [pc, #12]	@ (800f514 <HAL_RCC_GetHCLKFreq+0x14>)
 800f506:	681b      	ldr	r3, [r3, #0]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	20000000 	.word	0x20000000

0800f518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f51c:	f7ff fff0 	bl	800f500 <HAL_RCC_GetHCLKFreq>
 800f520:	4602      	mov	r2, r0
 800f522:	4b05      	ldr	r3, [pc, #20]	@ (800f538 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	0a9b      	lsrs	r3, r3, #10
 800f528:	f003 0307 	and.w	r3, r3, #7
 800f52c:	4903      	ldr	r1, [pc, #12]	@ (800f53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f52e:	5ccb      	ldrb	r3, [r1, r3]
 800f530:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f534:	4618      	mov	r0, r3
 800f536:	bd80      	pop	{r7, pc}
 800f538:	40023800 	.word	0x40023800
 800f53c:	08017fe8 	.word	0x08017fe8

0800f540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f544:	f7ff ffdc 	bl	800f500 <HAL_RCC_GetHCLKFreq>
 800f548:	4602      	mov	r2, r0
 800f54a:	4b05      	ldr	r3, [pc, #20]	@ (800f560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	0b5b      	lsrs	r3, r3, #13
 800f550:	f003 0307 	and.w	r3, r3, #7
 800f554:	4903      	ldr	r1, [pc, #12]	@ (800f564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f556:	5ccb      	ldrb	r3, [r1, r3]
 800f558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	40023800 	.word	0x40023800
 800f564:	08017fe8 	.word	0x08017fe8

0800f568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d101      	bne.n	800f57a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f576:	2301      	movs	r3, #1
 800f578:	e07b      	b.n	800f672 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d108      	bne.n	800f594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f58a:	d009      	beq.n	800f5a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	61da      	str	r2, [r3, #28]
 800f592:	e005      	b.n	800f5a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d106      	bne.n	800f5c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7f2 fdf4 	bl	80021a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f5e8:	431a      	orrs	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f5f2:	431a      	orrs	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	f003 0302 	and.w	r3, r3, #2
 800f5fc:	431a      	orrs	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	695b      	ldr	r3, [r3, #20]
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	431a      	orrs	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	699b      	ldr	r3, [r3, #24]
 800f60c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f610:	431a      	orrs	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	69db      	ldr	r3, [r3, #28]
 800f616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f61a:	431a      	orrs	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f624:	ea42 0103 	orr.w	r1, r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f62c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	430a      	orrs	r2, r1
 800f636:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	0c1b      	lsrs	r3, r3, #16
 800f63e:	f003 0104 	and.w	r1, r3, #4
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f646:	f003 0210 	and.w	r2, r3, #16
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	430a      	orrs	r2, r1
 800f650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	69da      	ldr	r2, [r3, #28]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b088      	sub	sp, #32
 800f67e:	af00      	add	r7, sp, #0
 800f680:	60f8      	str	r0, [r7, #12]
 800f682:	60b9      	str	r1, [r7, #8]
 800f684:	603b      	str	r3, [r7, #0]
 800f686:	4613      	mov	r3, r2
 800f688:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f68a:	f7fc fe59 	bl	800c340 <HAL_GetTick>
 800f68e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f690:	88fb      	ldrh	r3, [r7, #6]
 800f692:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d001      	beq.n	800f6a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	e12a      	b.n	800f8fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d002      	beq.n	800f6b0 <HAL_SPI_Transmit+0x36>
 800f6aa:	88fb      	ldrh	r3, [r7, #6]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d101      	bne.n	800f6b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e122      	b.n	800f8fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d101      	bne.n	800f6c2 <HAL_SPI_Transmit+0x48>
 800f6be:	2302      	movs	r3, #2
 800f6c0:	e11b      	b.n	800f8fa <HAL_SPI_Transmit+0x280>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2203      	movs	r2, #3
 800f6ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	88fa      	ldrh	r2, [r7, #6]
 800f6e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	88fa      	ldrh	r2, [r7, #6]
 800f6e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2200      	movs	r2, #0
 800f700:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2200      	movs	r2, #0
 800f706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f710:	d10f      	bne.n	800f732 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f73c:	2b40      	cmp	r3, #64	@ 0x40
 800f73e:	d007      	beq.n	800f750 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f74e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f758:	d152      	bne.n	800f800 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <HAL_SPI_Transmit+0xee>
 800f762:	8b7b      	ldrh	r3, [r7, #26]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d145      	bne.n	800f7f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f76c:	881a      	ldrh	r2, [r3, #0]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f778:	1c9a      	adds	r2, r3, #2
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f782:	b29b      	uxth	r3, r3
 800f784:	3b01      	subs	r3, #1
 800f786:	b29a      	uxth	r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f78c:	e032      	b.n	800f7f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	f003 0302 	and.w	r3, r3, #2
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d112      	bne.n	800f7c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7a0:	881a      	ldrh	r2, [r3, #0]
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ac:	1c9a      	adds	r2, r3, #2
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f7c0:	e018      	b.n	800f7f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7c2:	f7fc fdbd 	bl	800c340 <HAL_GetTick>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	683a      	ldr	r2, [r7, #0]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d803      	bhi.n	800f7da <HAL_SPI_Transmit+0x160>
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d8:	d102      	bne.n	800f7e0 <HAL_SPI_Transmit+0x166>
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d109      	bne.n	800f7f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e082      	b.n	800f8fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d1c7      	bne.n	800f78e <HAL_SPI_Transmit+0x114>
 800f7fe:	e053      	b.n	800f8a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d002      	beq.n	800f80e <HAL_SPI_Transmit+0x194>
 800f808:	8b7b      	ldrh	r3, [r7, #26]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d147      	bne.n	800f89e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	330c      	adds	r3, #12
 800f818:	7812      	ldrb	r2, [r2, #0]
 800f81a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	3b01      	subs	r3, #1
 800f82e:	b29a      	uxth	r2, r3
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f834:	e033      	b.n	800f89e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	f003 0302 	and.w	r3, r3, #2
 800f840:	2b02      	cmp	r3, #2
 800f842:	d113      	bne.n	800f86c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	330c      	adds	r3, #12
 800f84e:	7812      	ldrb	r2, [r2, #0]
 800f850:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f860:	b29b      	uxth	r3, r3
 800f862:	3b01      	subs	r3, #1
 800f864:	b29a      	uxth	r2, r3
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f86a:	e018      	b.n	800f89e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f86c:	f7fc fd68 	bl	800c340 <HAL_GetTick>
 800f870:	4602      	mov	r2, r0
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	683a      	ldr	r2, [r7, #0]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d803      	bhi.n	800f884 <HAL_SPI_Transmit+0x20a>
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f882:	d102      	bne.n	800f88a <HAL_SPI_Transmit+0x210>
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d109      	bne.n	800f89e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2201      	movs	r2, #1
 800f88e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f89a:	2303      	movs	r3, #3
 800f89c:	e02d      	b.n	800f8fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1c6      	bne.n	800f836 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f8a8:	69fa      	ldr	r2, [r7, #28]
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f000 fdd9 	bl	8010464 <SPI_EndRxTxTransaction>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d10a      	bne.n	800f8dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	617b      	str	r3, [r7, #20]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	617b      	str	r3, [r7, #20]
 800f8da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d001      	beq.n	800f8f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e000      	b.n	800f8fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f8f8:	2300      	movs	r3, #0
  }
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3720      	adds	r7, #32
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f902:	b580      	push	{r7, lr}
 800f904:	b08a      	sub	sp, #40	@ 0x28
 800f906:	af00      	add	r7, sp, #0
 800f908:	60f8      	str	r0, [r7, #12]
 800f90a:	60b9      	str	r1, [r7, #8]
 800f90c:	607a      	str	r2, [r7, #4]
 800f90e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f910:	2301      	movs	r3, #1
 800f912:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f914:	f7fc fd14 	bl	800c340 <HAL_GetTick>
 800f918:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f920:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f928:	887b      	ldrh	r3, [r7, #2]
 800f92a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f92c:	7ffb      	ldrb	r3, [r7, #31]
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d00c      	beq.n	800f94c <HAL_SPI_TransmitReceive+0x4a>
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f938:	d106      	bne.n	800f948 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d102      	bne.n	800f948 <HAL_SPI_TransmitReceive+0x46>
 800f942:	7ffb      	ldrb	r3, [r7, #31]
 800f944:	2b04      	cmp	r3, #4
 800f946:	d001      	beq.n	800f94c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f948:	2302      	movs	r3, #2
 800f94a:	e17f      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d005      	beq.n	800f95e <HAL_SPI_TransmitReceive+0x5c>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d002      	beq.n	800f95e <HAL_SPI_TransmitReceive+0x5c>
 800f958:	887b      	ldrh	r3, [r7, #2]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e174      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d101      	bne.n	800f970 <HAL_SPI_TransmitReceive+0x6e>
 800f96c:	2302      	movs	r3, #2
 800f96e:	e16d      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b04      	cmp	r3, #4
 800f982:	d003      	beq.n	800f98c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2205      	movs	r2, #5
 800f988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	887a      	ldrh	r2, [r7, #2]
 800f99c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	887a      	ldrh	r2, [r7, #2]
 800f9a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	887a      	ldrh	r2, [r7, #2]
 800f9ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	887a      	ldrh	r2, [r7, #2]
 800f9b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9cc:	2b40      	cmp	r3, #64	@ 0x40
 800f9ce:	d007      	beq.n	800f9e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f9e8:	d17e      	bne.n	800fae8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d002      	beq.n	800f9f8 <HAL_SPI_TransmitReceive+0xf6>
 800f9f2:	8afb      	ldrh	r3, [r7, #22]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d16c      	bne.n	800fad2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9fc:	881a      	ldrh	r2, [r3, #0]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa08:	1c9a      	adds	r2, r3, #2
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	3b01      	subs	r3, #1
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa1c:	e059      	b.n	800fad2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	f003 0302 	and.w	r3, r3, #2
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d11b      	bne.n	800fa64 <HAL_SPI_TransmitReceive+0x162>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d016      	beq.n	800fa64 <HAL_SPI_TransmitReceive+0x162>
 800fa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d113      	bne.n	800fa64 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa40:	881a      	ldrh	r2, [r3, #0]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa4c:	1c9a      	adds	r2, r3, #2
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fa60:	2300      	movs	r3, #0
 800fa62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	689b      	ldr	r3, [r3, #8]
 800fa6a:	f003 0301 	and.w	r3, r3, #1
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d119      	bne.n	800faa6 <HAL_SPI_TransmitReceive+0x1a4>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d014      	beq.n	800faa6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68da      	ldr	r2, [r3, #12]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa86:	b292      	uxth	r2, r2
 800fa88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8e:	1c9a      	adds	r2, r3, #2
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800faa2:	2301      	movs	r3, #1
 800faa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800faa6:	f7fc fc4b 	bl	800c340 <HAL_GetTick>
 800faaa:	4602      	mov	r2, r0
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d80d      	bhi.n	800fad2 <HAL_SPI_TransmitReceive+0x1d0>
 800fab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabc:	d009      	beq.n	800fad2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800face:	2303      	movs	r3, #3
 800fad0:	e0bc      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1a0      	bne.n	800fa1e <HAL_SPI_TransmitReceive+0x11c>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d19b      	bne.n	800fa1e <HAL_SPI_TransmitReceive+0x11c>
 800fae6:	e082      	b.n	800fbee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d002      	beq.n	800faf6 <HAL_SPI_TransmitReceive+0x1f4>
 800faf0:	8afb      	ldrh	r3, [r7, #22]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d171      	bne.n	800fbda <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	330c      	adds	r3, #12
 800fb00:	7812      	ldrb	r2, [r2, #0]
 800fb02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	3b01      	subs	r3, #1
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb1c:	e05d      	b.n	800fbda <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	f003 0302 	and.w	r3, r3, #2
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d11c      	bne.n	800fb66 <HAL_SPI_TransmitReceive+0x264>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d017      	beq.n	800fb66 <HAL_SPI_TransmitReceive+0x264>
 800fb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d114      	bne.n	800fb66 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	330c      	adds	r3, #12
 800fb46:	7812      	ldrb	r2, [r2, #0]
 800fb48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fb62:	2300      	movs	r3, #0
 800fb64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	689b      	ldr	r3, [r3, #8]
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d119      	bne.n	800fba8 <HAL_SPI_TransmitReceive+0x2a6>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d014      	beq.n	800fba8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	68da      	ldr	r2, [r3, #12]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb88:	b2d2      	uxtb	r2, r2
 800fb8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb90:	1c5a      	adds	r2, r3, #1
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fba4:	2301      	movs	r3, #1
 800fba6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fba8:	f7fc fbca 	bl	800c340 <HAL_GetTick>
 800fbac:	4602      	mov	r2, r0
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d803      	bhi.n	800fbc0 <HAL_SPI_TransmitReceive+0x2be>
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbbe:	d102      	bne.n	800fbc6 <HAL_SPI_TransmitReceive+0x2c4>
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d109      	bne.n	800fbda <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2201      	movs	r2, #1
 800fbca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	e038      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d19c      	bne.n	800fb1e <HAL_SPI_TransmitReceive+0x21c>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d197      	bne.n	800fb1e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbee:	6a3a      	ldr	r2, [r7, #32]
 800fbf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f000 fc36 	bl	8010464 <SPI_EndRxTxTransaction>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d008      	beq.n	800fc10 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2220      	movs	r2, #32
 800fc02:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	e01d      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10a      	bne.n	800fc2e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc18:	2300      	movs	r3, #0
 800fc1a:	613b      	str	r3, [r7, #16]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	613b      	str	r3, [r7, #16]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	613b      	str	r3, [r7, #16]
 800fc2c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2201      	movs	r2, #1
 800fc32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800fc46:	2301      	movs	r3, #1
 800fc48:	e000      	b.n	800fc4c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800fc4a:	2300      	movs	r3, #0
  }
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3728      	adds	r7, #40	@ 0x28
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d001      	beq.n	800fc72 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800fc6e:	2302      	movs	r3, #2
 800fc70:	e097      	b.n	800fda2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d002      	beq.n	800fc7e <HAL_SPI_Transmit_DMA+0x2a>
 800fc78:	88fb      	ldrh	r3, [r7, #6]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d101      	bne.n	800fc82 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e08f      	b.n	800fda2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d101      	bne.n	800fc90 <HAL_SPI_Transmit_DMA+0x3c>
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	e088      	b.n	800fda2 <HAL_SPI_Transmit_DMA+0x14e>
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2203      	movs	r2, #3
 800fc9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2200      	movs	r2, #0
 800fca4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	88fa      	ldrh	r2, [r7, #6]
 800fcb0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	88fa      	ldrh	r2, [r7, #6]
 800fcb6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fcde:	d10f      	bne.n	800fd00 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fcee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fcfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd04:	4a29      	ldr	r2, [pc, #164]	@ (800fdac <HAL_SPI_Transmit_DMA+0x158>)
 800fd06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd0c:	4a28      	ldr	r2, [pc, #160]	@ (800fdb0 <HAL_SPI_Transmit_DMA+0x15c>)
 800fd0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd14:	4a27      	ldr	r2, [pc, #156]	@ (800fdb4 <HAL_SPI_Transmit_DMA+0x160>)
 800fd16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd28:	4619      	mov	r1, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	330c      	adds	r3, #12
 800fd30:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fd36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fd38:	f7fc fcf2 	bl	800c720 <HAL_DMA_Start_IT>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00b      	beq.n	800fd5a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd46:	f043 0210 	orr.w	r2, r3, #16
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fd56:	2301      	movs	r3, #1
 800fd58:	e023      	b.n	800fda2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd64:	2b40      	cmp	r3, #64	@ 0x40
 800fd66:	d007      	beq.n	800fd78 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd76:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	685a      	ldr	r2, [r3, #4]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f042 0220 	orr.w	r2, r2, #32
 800fd8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f042 0202 	orr.w	r2, r2, #2
 800fd9e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	080101f5 	.word	0x080101f5
 800fdb0:	08010015 	.word	0x08010015
 800fdb4:	08010249 	.word	0x08010249

0800fdb8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
 800fdc4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fdcc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800fdd4:	7dfb      	ldrb	r3, [r7, #23]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d00c      	beq.n	800fdf4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fde0:	d106      	bne.n	800fdf0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d102      	bne.n	800fdf0 <HAL_SPI_TransmitReceive_DMA+0x38>
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
 800fdec:	2b04      	cmp	r3, #4
 800fdee:	d001      	beq.n	800fdf4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	e0cf      	b.n	800ff94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d005      	beq.n	800fe06 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800fe00:	887b      	ldrh	r3, [r7, #2]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d101      	bne.n	800fe0a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
 800fe08:	e0c4      	b.n	800ff94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d101      	bne.n	800fe18 <HAL_SPI_TransmitReceive_DMA+0x60>
 800fe14:	2302      	movs	r3, #2
 800fe16:	e0bd      	b.n	800ff94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b04      	cmp	r3, #4
 800fe2a:	d003      	beq.n	800fe34 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2205      	movs	r2, #5
 800fe30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2200      	movs	r2, #0
 800fe38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	887a      	ldrh	r2, [r7, #2]
 800fe44:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	887a      	ldrh	r2, [r7, #2]
 800fe4a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	887a      	ldrh	r2, [r7, #2]
 800fe56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	887a      	ldrh	r2, [r7, #2]
 800fe5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2200      	movs	r2, #0
 800fe62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2200      	movs	r2, #0
 800fe68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b04      	cmp	r3, #4
 800fe74:	d108      	bne.n	800fe88 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe7a:	4a48      	ldr	r2, [pc, #288]	@ (800ff9c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800fe7c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe82:	4a47      	ldr	r2, [pc, #284]	@ (800ffa0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800fe84:	63da      	str	r2, [r3, #60]	@ 0x3c
 800fe86:	e007      	b.n	800fe98 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe8c:	4a45      	ldr	r2, [pc, #276]	@ (800ffa4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800fe8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe94:	4a44      	ldr	r2, [pc, #272]	@ (800ffa8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800fe96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe9c:	4a43      	ldr	r2, [pc, #268]	@ (800ffac <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800fe9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fea4:	2200      	movs	r2, #0
 800fea6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	330c      	adds	r3, #12
 800feb2:	4619      	mov	r1, r3
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800febe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800fec0:	f7fc fc2e 	bl	800c720 <HAL_DMA_Start_IT>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00b      	beq.n	800fee2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fece:	f043 0210 	orr.w	r2, r3, #16
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	e058      	b.n	800ff94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	685a      	ldr	r2, [r3, #4]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f042 0201 	orr.w	r2, r2, #1
 800fef0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef6:	2200      	movs	r2, #0
 800fef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fefe:	2200      	movs	r2, #0
 800ff00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff06:	2200      	movs	r2, #0
 800ff08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff0e:	2200      	movs	r2, #0
 800ff10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	330c      	adds	r3, #12
 800ff22:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff28:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ff2a:	f7fc fbf9 	bl	800c720 <HAL_DMA_Start_IT>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00b      	beq.n	800ff4c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff38:	f043 0210 	orr.w	r2, r3, #16
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e023      	b.n	800ff94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff56:	2b40      	cmp	r3, #64	@ 0x40
 800ff58:	d007      	beq.n	800ff6a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff68:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	685a      	ldr	r2, [r3, #4]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f042 0220 	orr.w	r2, r2, #32
 800ff80:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	685a      	ldr	r2, [r3, #4]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f042 0202 	orr.w	r2, r2, #2
 800ff90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff92:	2300      	movs	r3, #0
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3718      	adds	r7, #24
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	08010211 	.word	0x08010211
 800ffa0:	080100bd 	.word	0x080100bd
 800ffa4:	0801022d 	.word	0x0801022d
 800ffa8:	08010165 	.word	0x08010165
 800ffac:	08010249 	.word	0x08010249

0800ffb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800fff4:	bf00      	nop
 800fff6:	370c      	adds	r7, #12
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr

08010000 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010008:	bf00      	nop
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010020:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010022:	f7fc f98d 	bl	800c340 <HAL_GetTick>
 8010026:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010036:	d03b      	beq.n	80100b0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	685a      	ldr	r2, [r3, #4]
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f022 0220 	bic.w	r2, r2, #32
 8010046:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	685a      	ldr	r2, [r3, #4]
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f022 0202 	bic.w	r2, r2, #2
 8010056:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	2164      	movs	r1, #100	@ 0x64
 801005c:	6978      	ldr	r0, [r7, #20]
 801005e:	f000 fa01 	bl	8010464 <SPI_EndRxTxTransaction>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d005      	beq.n	8010074 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801006c:	f043 0220 	orr.w	r2, r3, #32
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d10a      	bne.n	8010092 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801007c:	2300      	movs	r3, #0
 801007e:	60fb      	str	r3, [r7, #12]
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	60fb      	str	r3, [r7, #12]
 8010090:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	2200      	movs	r2, #0
 8010096:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d003      	beq.n	80100b0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80100a8:	6978      	ldr	r0, [r7, #20]
 80100aa:	f7ff ffa9 	bl	8010000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80100ae:	e002      	b.n	80100b6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80100b0:	6978      	ldr	r0, [r7, #20]
 80100b2:	f7f1 fcab 	bl	8001a0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80100b6:	3718      	adds	r7, #24
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100c8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80100ca:	f7fc f939 	bl	800c340 <HAL_GetTick>
 80100ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100de:	d03b      	beq.n	8010158 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	685a      	ldr	r2, [r3, #4]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f022 0220 	bic.w	r2, r2, #32
 80100ee:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d10d      	bne.n	8010114 <SPI_DMAReceiveCplt+0x58>
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010100:	d108      	bne.n	8010114 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f022 0203 	bic.w	r2, r2, #3
 8010110:	605a      	str	r2, [r3, #4]
 8010112:	e007      	b.n	8010124 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	685a      	ldr	r2, [r3, #4]
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f022 0201 	bic.w	r2, r2, #1
 8010122:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010124:	68ba      	ldr	r2, [r7, #8]
 8010126:	2164      	movs	r1, #100	@ 0x64
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f000 f935 	bl	8010398 <SPI_EndRxTransaction>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d002      	beq.n	801013a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2220      	movs	r2, #32
 8010138:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2200      	movs	r2, #0
 801013e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2201      	movs	r2, #1
 8010144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff ff55 	bl	8010000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010156:	e002      	b.n	801015e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	f7ff ff29 	bl	800ffb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010170:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010172:	f7fc f8e5 	bl	800c340 <HAL_GetTick>
 8010176:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010186:	d02f      	beq.n	80101e8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	685a      	ldr	r2, [r3, #4]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f022 0220 	bic.w	r2, r2, #32
 8010196:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	2164      	movs	r1, #100	@ 0x64
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	f000 f961 	bl	8010464 <SPI_EndRxTxTransaction>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d005      	beq.n	80101b4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101ac:	f043 0220 	orr.w	r2, r3, #32
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f022 0203 	bic.w	r2, r2, #3
 80101c2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2200      	movs	r2, #0
 80101ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2201      	movs	r2, #1
 80101d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d003      	beq.n	80101e8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f7ff ff0d 	bl	8010000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80101e6:	e002      	b.n	80101ee <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f7f1 fc25 	bl	8001a38 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010200:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f7ff fede 	bl	800ffc4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010208:	bf00      	nop
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801021c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7ff feda 	bl	800ffd8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010224:	bf00      	nop
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010238:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 801023a:	68f8      	ldr	r0, [r7, #12]
 801023c:	f7ff fed6 	bl	800ffec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010240:	bf00      	nop
 8010242:	3710      	adds	r7, #16
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010254:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f022 0203 	bic.w	r2, r2, #3
 8010264:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801026a:	f043 0210 	orr.w	r2, r3, #16
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2201      	movs	r2, #1
 8010276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7ff fec0 	bl	8010000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010280:	bf00      	nop
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b088      	sub	sp, #32
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	603b      	str	r3, [r7, #0]
 8010294:	4613      	mov	r3, r2
 8010296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010298:	f7fc f852 	bl	800c340 <HAL_GetTick>
 801029c:	4602      	mov	r2, r0
 801029e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a0:	1a9b      	subs	r3, r3, r2
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	4413      	add	r3, r2
 80102a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80102a8:	f7fc f84a 	bl	800c340 <HAL_GetTick>
 80102ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80102ae:	4b39      	ldr	r3, [pc, #228]	@ (8010394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	015b      	lsls	r3, r3, #5
 80102b4:	0d1b      	lsrs	r3, r3, #20
 80102b6:	69fa      	ldr	r2, [r7, #28]
 80102b8:	fb02 f303 	mul.w	r3, r2, r3
 80102bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80102be:	e055      	b.n	801036c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c6:	d051      	beq.n	801036c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80102c8:	f7fc f83a 	bl	800c340 <HAL_GetTick>
 80102cc:	4602      	mov	r2, r0
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	1ad3      	subs	r3, r2, r3
 80102d2:	69fa      	ldr	r2, [r7, #28]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d902      	bls.n	80102de <SPI_WaitFlagStateUntilTimeout+0x56>
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d13d      	bne.n	801035a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80102ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102f6:	d111      	bne.n	801031c <SPI_WaitFlagStateUntilTimeout+0x94>
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010300:	d004      	beq.n	801030c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801030a:	d107      	bne.n	801031c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801031a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010324:	d10f      	bne.n	8010346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010334:	601a      	str	r2, [r3, #0]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2201      	movs	r2, #1
 801034a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010356:	2303      	movs	r3, #3
 8010358:	e018      	b.n	801038c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d102      	bne.n	8010366 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8010360:	2300      	movs	r3, #0
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	e002      	b.n	801036c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	3b01      	subs	r3, #1
 801036a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	689a      	ldr	r2, [r3, #8]
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	4013      	ands	r3, r2
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	429a      	cmp	r2, r3
 801037a:	bf0c      	ite	eq
 801037c:	2301      	moveq	r3, #1
 801037e:	2300      	movne	r3, #0
 8010380:	b2db      	uxtb	r3, r3
 8010382:	461a      	mov	r2, r3
 8010384:	79fb      	ldrb	r3, [r7, #7]
 8010386:	429a      	cmp	r2, r3
 8010388:	d19a      	bne.n	80102c0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 801038a:	2300      	movs	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3720      	adds	r7, #32
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	20000000 	.word	0x20000000

08010398 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af02      	add	r7, sp, #8
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103ac:	d111      	bne.n	80103d2 <SPI_EndRxTransaction+0x3a>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103b6:	d004      	beq.n	80103c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103c0:	d107      	bne.n	80103d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80103d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103da:	d12a      	bne.n	8010432 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103e4:	d012      	beq.n	801040c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2200      	movs	r2, #0
 80103ee:	2180      	movs	r1, #128	@ 0x80
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7ff ff49 	bl	8010288 <SPI_WaitFlagStateUntilTimeout>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d02d      	beq.n	8010458 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010400:	f043 0220 	orr.w	r2, r3, #32
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010408:	2303      	movs	r3, #3
 801040a:	e026      	b.n	801045a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	9300      	str	r3, [sp, #0]
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	2200      	movs	r2, #0
 8010414:	2101      	movs	r1, #1
 8010416:	68f8      	ldr	r0, [r7, #12]
 8010418:	f7ff ff36 	bl	8010288 <SPI_WaitFlagStateUntilTimeout>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d01a      	beq.n	8010458 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010426:	f043 0220 	orr.w	r2, r3, #32
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801042e:	2303      	movs	r3, #3
 8010430:	e013      	b.n	801045a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	9300      	str	r3, [sp, #0]
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2200      	movs	r2, #0
 801043a:	2101      	movs	r1, #1
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f7ff ff23 	bl	8010288 <SPI_WaitFlagStateUntilTimeout>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d007      	beq.n	8010458 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801044c:	f043 0220 	orr.w	r2, r3, #32
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010454:	2303      	movs	r3, #3
 8010456:	e000      	b.n	801045a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010458:	2300      	movs	r3, #0
}
 801045a:	4618      	mov	r0, r3
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
	...

08010464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af02      	add	r7, sp, #8
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2201      	movs	r2, #1
 8010478:	2102      	movs	r1, #2
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff ff04 	bl	8010288 <SPI_WaitFlagStateUntilTimeout>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d007      	beq.n	8010496 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801048a:	f043 0220 	orr.w	r2, r3, #32
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8010492:	2303      	movs	r3, #3
 8010494:	e032      	b.n	80104fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010496:	4b1b      	ldr	r3, [pc, #108]	@ (8010504 <SPI_EndRxTxTransaction+0xa0>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a1b      	ldr	r2, [pc, #108]	@ (8010508 <SPI_EndRxTxTransaction+0xa4>)
 801049c:	fba2 2303 	umull	r2, r3, r2, r3
 80104a0:	0d5b      	lsrs	r3, r3, #21
 80104a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80104a6:	fb02 f303 	mul.w	r3, r2, r3
 80104aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80104b4:	d112      	bne.n	80104dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	2200      	movs	r2, #0
 80104be:	2180      	movs	r1, #128	@ 0x80
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f7ff fee1 	bl	8010288 <SPI_WaitFlagStateUntilTimeout>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d016      	beq.n	80104fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104d0:	f043 0220 	orr.w	r2, r3, #32
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80104d8:	2303      	movs	r3, #3
 80104da:	e00f      	b.n	80104fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00a      	beq.n	80104f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104f2:	2b80      	cmp	r3, #128	@ 0x80
 80104f4:	d0f2      	beq.n	80104dc <SPI_EndRxTxTransaction+0x78>
 80104f6:	e000      	b.n	80104fa <SPI_EndRxTxTransaction+0x96>
        break;
 80104f8:	bf00      	nop
  }

  return HAL_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3718      	adds	r7, #24
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	20000000 	.word	0x20000000
 8010508:	165e9f81 	.word	0x165e9f81

0801050c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d101      	bne.n	801051e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801051a:	2301      	movs	r3, #1
 801051c:	e041      	b.n	80105a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010524:	b2db      	uxtb	r3, r3
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7f1 fee4 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2202      	movs	r2, #2
 801053c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	3304      	adds	r3, #4
 8010548:	4619      	mov	r1, r3
 801054a:	4610      	mov	r0, r2
 801054c:	f000 fa70 	bl	8010a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2201      	movs	r2, #1
 801055c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2201      	movs	r2, #1
 8010584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2201      	movs	r2, #1
 801058c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2201      	movs	r2, #1
 8010594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2201      	movs	r2, #1
 801059c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
	...

080105ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d001      	beq.n	80105c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80105c0:	2301      	movs	r3, #1
 80105c2:	e044      	b.n	801064e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2202      	movs	r2, #2
 80105c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	68da      	ldr	r2, [r3, #12]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f042 0201 	orr.w	r2, r2, #1
 80105da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a1e      	ldr	r2, [pc, #120]	@ (801065c <HAL_TIM_Base_Start_IT+0xb0>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d018      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x6c>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105ee:	d013      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x6c>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a1a      	ldr	r2, [pc, #104]	@ (8010660 <HAL_TIM_Base_Start_IT+0xb4>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d00e      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x6c>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4a19      	ldr	r2, [pc, #100]	@ (8010664 <HAL_TIM_Base_Start_IT+0xb8>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d009      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x6c>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a17      	ldr	r2, [pc, #92]	@ (8010668 <HAL_TIM_Base_Start_IT+0xbc>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d004      	beq.n	8010618 <HAL_TIM_Base_Start_IT+0x6c>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4a16      	ldr	r2, [pc, #88]	@ (801066c <HAL_TIM_Base_Start_IT+0xc0>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d111      	bne.n	801063c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	f003 0307 	and.w	r3, r3, #7
 8010622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2b06      	cmp	r3, #6
 8010628:	d010      	beq.n	801064c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f042 0201 	orr.w	r2, r2, #1
 8010638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801063a:	e007      	b.n	801064c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f042 0201 	orr.w	r2, r2, #1
 801064a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	3714      	adds	r7, #20
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	40010000 	.word	0x40010000
 8010660:	40000400 	.word	0x40000400
 8010664:	40000800 	.word	0x40000800
 8010668:	40000c00 	.word	0x40000c00
 801066c:	40014000 	.word	0x40014000

08010670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	f003 0302 	and.w	r3, r3, #2
 801068e:	2b00      	cmp	r3, #0
 8010690:	d020      	beq.n	80106d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f003 0302 	and.w	r3, r3, #2
 8010698:	2b00      	cmp	r3, #0
 801069a:	d01b      	beq.n	80106d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f06f 0202 	mvn.w	r2, #2
 80106a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2201      	movs	r2, #1
 80106aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	699b      	ldr	r3, [r3, #24]
 80106b2:	f003 0303 	and.w	r3, r3, #3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d003      	beq.n	80106c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 f999 	bl	80109f2 <HAL_TIM_IC_CaptureCallback>
 80106c0:	e005      	b.n	80106ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f98b 	bl	80109de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 f99c 	bl	8010a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	f003 0304 	and.w	r3, r3, #4
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d020      	beq.n	8010720 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f003 0304 	and.w	r3, r3, #4
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d01b      	beq.n	8010720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f06f 0204 	mvn.w	r2, #4
 80106f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2202      	movs	r2, #2
 80106f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	699b      	ldr	r3, [r3, #24]
 80106fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010702:	2b00      	cmp	r3, #0
 8010704:	d003      	beq.n	801070e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 f973 	bl	80109f2 <HAL_TIM_IC_CaptureCallback>
 801070c:	e005      	b.n	801071a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f000 f965 	bl	80109de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 f976 	bl	8010a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	f003 0308 	and.w	r3, r3, #8
 8010726:	2b00      	cmp	r3, #0
 8010728:	d020      	beq.n	801076c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f003 0308 	and.w	r3, r3, #8
 8010730:	2b00      	cmp	r3, #0
 8010732:	d01b      	beq.n	801076c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f06f 0208 	mvn.w	r2, #8
 801073c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2204      	movs	r2, #4
 8010742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	69db      	ldr	r3, [r3, #28]
 801074a:	f003 0303 	and.w	r3, r3, #3
 801074e:	2b00      	cmp	r3, #0
 8010750:	d003      	beq.n	801075a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 f94d 	bl	80109f2 <HAL_TIM_IC_CaptureCallback>
 8010758:	e005      	b.n	8010766 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 f93f 	bl	80109de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 f950 	bl	8010a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f003 0310 	and.w	r3, r3, #16
 8010772:	2b00      	cmp	r3, #0
 8010774:	d020      	beq.n	80107b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f003 0310 	and.w	r3, r3, #16
 801077c:	2b00      	cmp	r3, #0
 801077e:	d01b      	beq.n	80107b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f06f 0210 	mvn.w	r2, #16
 8010788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2208      	movs	r2, #8
 801078e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	69db      	ldr	r3, [r3, #28]
 8010796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801079a:	2b00      	cmp	r3, #0
 801079c:	d003      	beq.n	80107a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f927 	bl	80109f2 <HAL_TIM_IC_CaptureCallback>
 80107a4:	e005      	b.n	80107b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f919 	bl	80109de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f000 f92a 	bl	8010a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	f003 0301 	and.w	r3, r3, #1
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d00c      	beq.n	80107dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f003 0301 	and.w	r3, r3, #1
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d007      	beq.n	80107dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f06f 0201 	mvn.w	r2, #1
 80107d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f7f0 fe4a 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00c      	beq.n	8010800 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d007      	beq.n	8010800 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80107f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 fab0 	bl	8010d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010806:	2b00      	cmp	r3, #0
 8010808:	d00c      	beq.n	8010824 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010810:	2b00      	cmp	r3, #0
 8010812:	d007      	beq.n	8010824 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801081c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 f8fb 	bl	8010a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	f003 0320 	and.w	r3, r3, #32
 801082a:	2b00      	cmp	r3, #0
 801082c:	d00c      	beq.n	8010848 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f003 0320 	and.w	r3, r3, #32
 8010834:	2b00      	cmp	r3, #0
 8010836:	d007      	beq.n	8010848 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f06f 0220 	mvn.w	r2, #32
 8010840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 fa82 	bl	8010d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010848:	bf00      	nop
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801085a:	2300      	movs	r3, #0
 801085c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010864:	2b01      	cmp	r3, #1
 8010866:	d101      	bne.n	801086c <HAL_TIM_ConfigClockSource+0x1c>
 8010868:	2302      	movs	r3, #2
 801086a:	e0b4      	b.n	80109d6 <HAL_TIM_ConfigClockSource+0x186>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2202      	movs	r2, #2
 8010878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801088a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108a4:	d03e      	beq.n	8010924 <HAL_TIM_ConfigClockSource+0xd4>
 80108a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108aa:	f200 8087 	bhi.w	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108b2:	f000 8086 	beq.w	80109c2 <HAL_TIM_ConfigClockSource+0x172>
 80108b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108ba:	d87f      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108bc:	2b70      	cmp	r3, #112	@ 0x70
 80108be:	d01a      	beq.n	80108f6 <HAL_TIM_ConfigClockSource+0xa6>
 80108c0:	2b70      	cmp	r3, #112	@ 0x70
 80108c2:	d87b      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108c4:	2b60      	cmp	r3, #96	@ 0x60
 80108c6:	d050      	beq.n	801096a <HAL_TIM_ConfigClockSource+0x11a>
 80108c8:	2b60      	cmp	r3, #96	@ 0x60
 80108ca:	d877      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108cc:	2b50      	cmp	r3, #80	@ 0x50
 80108ce:	d03c      	beq.n	801094a <HAL_TIM_ConfigClockSource+0xfa>
 80108d0:	2b50      	cmp	r3, #80	@ 0x50
 80108d2:	d873      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108d4:	2b40      	cmp	r3, #64	@ 0x40
 80108d6:	d058      	beq.n	801098a <HAL_TIM_ConfigClockSource+0x13a>
 80108d8:	2b40      	cmp	r3, #64	@ 0x40
 80108da:	d86f      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108dc:	2b30      	cmp	r3, #48	@ 0x30
 80108de:	d064      	beq.n	80109aa <HAL_TIM_ConfigClockSource+0x15a>
 80108e0:	2b30      	cmp	r3, #48	@ 0x30
 80108e2:	d86b      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108e4:	2b20      	cmp	r3, #32
 80108e6:	d060      	beq.n	80109aa <HAL_TIM_ConfigClockSource+0x15a>
 80108e8:	2b20      	cmp	r3, #32
 80108ea:	d867      	bhi.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d05c      	beq.n	80109aa <HAL_TIM_ConfigClockSource+0x15a>
 80108f0:	2b10      	cmp	r3, #16
 80108f2:	d05a      	beq.n	80109aa <HAL_TIM_ConfigClockSource+0x15a>
 80108f4:	e062      	b.n	80109bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010906:	f000 f993 	bl	8010c30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	689b      	ldr	r3, [r3, #8]
 8010910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	609a      	str	r2, [r3, #8]
      break;
 8010922:	e04f      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010934:	f000 f97c 	bl	8010c30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	689a      	ldr	r2, [r3, #8]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010946:	609a      	str	r2, [r3, #8]
      break;
 8010948:	e03c      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010956:	461a      	mov	r2, r3
 8010958:	f000 f8f0 	bl	8010b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2150      	movs	r1, #80	@ 0x50
 8010962:	4618      	mov	r0, r3
 8010964:	f000 f949 	bl	8010bfa <TIM_ITRx_SetConfig>
      break;
 8010968:	e02c      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010976:	461a      	mov	r2, r3
 8010978:	f000 f90f 	bl	8010b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2160      	movs	r1, #96	@ 0x60
 8010982:	4618      	mov	r0, r3
 8010984:	f000 f939 	bl	8010bfa <TIM_ITRx_SetConfig>
      break;
 8010988:	e01c      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010996:	461a      	mov	r2, r3
 8010998:	f000 f8d0 	bl	8010b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2140      	movs	r1, #64	@ 0x40
 80109a2:	4618      	mov	r0, r3
 80109a4:	f000 f929 	bl	8010bfa <TIM_ITRx_SetConfig>
      break;
 80109a8:	e00c      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4619      	mov	r1, r3
 80109b4:	4610      	mov	r0, r2
 80109b6:	f000 f920 	bl	8010bfa <TIM_ITRx_SetConfig>
      break;
 80109ba:	e003      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80109bc:	2301      	movs	r3, #1
 80109be:	73fb      	strb	r3, [r7, #15]
      break;
 80109c0:	e000      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80109c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2200      	movs	r2, #0
 80109d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80109d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3710      	adds	r7, #16
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80109de:	b480      	push	{r7}
 80109e0:	b083      	sub	sp, #12
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80109e6:	bf00      	nop
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80109f2:	b480      	push	{r7}
 80109f4:	b083      	sub	sp, #12
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80109fa:	bf00      	nop
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010a06:	b480      	push	{r7}
 8010a08:	b083      	sub	sp, #12
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010a0e:	bf00      	nop
 8010a10:	370c      	adds	r7, #12
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr

08010a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a1a:	b480      	push	{r7}
 8010a1c:	b083      	sub	sp, #12
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010a22:	bf00      	nop
 8010a24:	370c      	adds	r7, #12
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr
	...

08010a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b085      	sub	sp, #20
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4a37      	ldr	r2, [pc, #220]	@ (8010b20 <TIM_Base_SetConfig+0xf0>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d00f      	beq.n	8010a68 <TIM_Base_SetConfig+0x38>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a4e:	d00b      	beq.n	8010a68 <TIM_Base_SetConfig+0x38>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a34      	ldr	r2, [pc, #208]	@ (8010b24 <TIM_Base_SetConfig+0xf4>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d007      	beq.n	8010a68 <TIM_Base_SetConfig+0x38>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a33      	ldr	r2, [pc, #204]	@ (8010b28 <TIM_Base_SetConfig+0xf8>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d003      	beq.n	8010a68 <TIM_Base_SetConfig+0x38>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	4a32      	ldr	r2, [pc, #200]	@ (8010b2c <TIM_Base_SetConfig+0xfc>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d108      	bne.n	8010a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	68fa      	ldr	r2, [r7, #12]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a28      	ldr	r2, [pc, #160]	@ (8010b20 <TIM_Base_SetConfig+0xf0>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d01b      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a88:	d017      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a25      	ldr	r2, [pc, #148]	@ (8010b24 <TIM_Base_SetConfig+0xf4>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d013      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a24      	ldr	r2, [pc, #144]	@ (8010b28 <TIM_Base_SetConfig+0xf8>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d00f      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a23      	ldr	r2, [pc, #140]	@ (8010b2c <TIM_Base_SetConfig+0xfc>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d00b      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a22      	ldr	r2, [pc, #136]	@ (8010b30 <TIM_Base_SetConfig+0x100>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d007      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4a21      	ldr	r2, [pc, #132]	@ (8010b34 <TIM_Base_SetConfig+0x104>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d003      	beq.n	8010aba <TIM_Base_SetConfig+0x8a>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4a20      	ldr	r2, [pc, #128]	@ (8010b38 <TIM_Base_SetConfig+0x108>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d108      	bne.n	8010acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	68fa      	ldr	r2, [r7, #12]
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	695b      	ldr	r3, [r3, #20]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	689a      	ldr	r2, [r3, #8]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4a0c      	ldr	r2, [pc, #48]	@ (8010b20 <TIM_Base_SetConfig+0xf0>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d103      	bne.n	8010afa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	691a      	ldr	r2, [r3, #16]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f043 0204 	orr.w	r2, r3, #4
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2201      	movs	r2, #1
 8010b0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	601a      	str	r2, [r3, #0]
}
 8010b12:	bf00      	nop
 8010b14:	3714      	adds	r7, #20
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr
 8010b1e:	bf00      	nop
 8010b20:	40010000 	.word	0x40010000
 8010b24:	40000400 	.word	0x40000400
 8010b28:	40000800 	.word	0x40000800
 8010b2c:	40000c00 	.word	0x40000c00
 8010b30:	40014000 	.word	0x40014000
 8010b34:	40014400 	.word	0x40014400
 8010b38:	40014800 	.word	0x40014800

08010b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b087      	sub	sp, #28
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6a1b      	ldr	r3, [r3, #32]
 8010b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	6a1b      	ldr	r3, [r3, #32]
 8010b52:	f023 0201 	bic.w	r2, r3, #1
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	699b      	ldr	r3, [r3, #24]
 8010b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	011b      	lsls	r3, r3, #4
 8010b6c:	693a      	ldr	r2, [r7, #16]
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	f023 030a 	bic.w	r3, r3, #10
 8010b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010b7a:	697a      	ldr	r2, [r7, #20]
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	693a      	ldr	r2, [r7, #16]
 8010b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	697a      	ldr	r2, [r7, #20]
 8010b8c:	621a      	str	r2, [r3, #32]
}
 8010b8e:	bf00      	nop
 8010b90:	371c      	adds	r7, #28
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b9a:	b480      	push	{r7}
 8010b9c:	b087      	sub	sp, #28
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	60f8      	str	r0, [r7, #12]
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6a1b      	ldr	r3, [r3, #32]
 8010baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	f023 0210 	bic.w	r2, r3, #16
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	699b      	ldr	r3, [r3, #24]
 8010bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	031b      	lsls	r3, r3, #12
 8010bca:	693a      	ldr	r2, [r7, #16]
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	011b      	lsls	r3, r3, #4
 8010bdc:	697a      	ldr	r2, [r7, #20]
 8010bde:	4313      	orrs	r3, r2
 8010be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	693a      	ldr	r2, [r7, #16]
 8010be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	621a      	str	r2, [r3, #32]
}
 8010bee:	bf00      	nop
 8010bf0:	371c      	adds	r7, #28
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr

08010bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b085      	sub	sp, #20
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	4313      	orrs	r3, r2
 8010c18:	f043 0307 	orr.w	r3, r3, #7
 8010c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	609a      	str	r2, [r3, #8]
}
 8010c24:	bf00      	nop
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
 8010c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	021a      	lsls	r2, r3, #8
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	431a      	orrs	r2, r3
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	697a      	ldr	r2, [r7, #20]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	609a      	str	r2, [r3, #8]
}
 8010c64:	bf00      	nop
 8010c66:	371c      	adds	r7, #28
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d101      	bne.n	8010c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c84:	2302      	movs	r3, #2
 8010c86:	e050      	b.n	8010d2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2202      	movs	r2, #2
 8010c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	689b      	ldr	r3, [r3, #8]
 8010ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	68fa      	ldr	r2, [r7, #12]
 8010cb6:	4313      	orrs	r3, r2
 8010cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8010d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d018      	beq.n	8010cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cd4:	d013      	beq.n	8010cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a18      	ldr	r2, [pc, #96]	@ (8010d3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d00e      	beq.n	8010cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4a16      	ldr	r2, [pc, #88]	@ (8010d40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d009      	beq.n	8010cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4a15      	ldr	r2, [pc, #84]	@ (8010d44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d004      	beq.n	8010cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	4a13      	ldr	r2, [pc, #76]	@ (8010d48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d10c      	bne.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	68ba      	ldr	r2, [r7, #8]
 8010d0c:	4313      	orrs	r3, r2
 8010d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	68ba      	ldr	r2, [r7, #8]
 8010d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010d28:	2300      	movs	r3, #0
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3714      	adds	r7, #20
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop
 8010d38:	40010000 	.word	0x40010000
 8010d3c:	40000400 	.word	0x40000400
 8010d40:	40000800 	.word	0x40000800
 8010d44:	40000c00 	.word	0x40000c00
 8010d48:	40014000 	.word	0x40014000

08010d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010d68:	bf00      	nop
 8010d6a:	370c      	adds	r7, #12
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr

08010d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d101      	bne.n	8010d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010d82:	2301      	movs	r3, #1
 8010d84:	e042      	b.n	8010e0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2200      	movs	r2, #0
 8010d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 f83a 	bl	8010e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2224      	movs	r2, #36	@ 0x24
 8010da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	68da      	ldr	r2, [r3, #12]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f000 f835 	bl	8010e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	691a      	ldr	r2, [r3, #16]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	695a      	ldr	r2, [r3, #20]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	68da      	ldr	r2, [r3, #12]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2200      	movs	r2, #0
 8010df2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2220      	movs	r2, #32
 8010df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2220      	movs	r2, #32
 8010e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e2c:	b0c0      	sub	sp, #256	@ 0x100
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	691b      	ldr	r3, [r3, #16]
 8010e3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e44:	68d9      	ldr	r1, [r3, #12]
 8010e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	ea40 0301 	orr.w	r3, r0, r1
 8010e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e56:	689a      	ldr	r2, [r3, #8]
 8010e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e5c:	691b      	ldr	r3, [r3, #16]
 8010e5e:	431a      	orrs	r2, r3
 8010e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e64:	695b      	ldr	r3, [r3, #20]
 8010e66:	431a      	orrs	r2, r3
 8010e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e6c:	69db      	ldr	r3, [r3, #28]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010e80:	f021 010c 	bic.w	r1, r1, #12
 8010e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010e8e:	430b      	orrs	r3, r1
 8010e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ea2:	6999      	ldr	r1, [r3, #24]
 8010ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	ea40 0301 	orr.w	r3, r0, r1
 8010eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80110f4 <UART_SetConfig+0x2cc>)
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d005      	beq.n	8010ec8 <UART_SetConfig+0xa0>
 8010ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	4b8d      	ldr	r3, [pc, #564]	@ (80110f8 <UART_SetConfig+0x2d0>)
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d104      	bne.n	8010ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010ec8:	f7fe fb3a 	bl	800f540 <HAL_RCC_GetPCLK2Freq>
 8010ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010ed0:	e003      	b.n	8010eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010ed2:	f7fe fb21 	bl	800f518 <HAL_RCC_GetPCLK1Freq>
 8010ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ede:	69db      	ldr	r3, [r3, #28]
 8010ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010ee4:	f040 810c 	bne.w	8011100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010eec:	2200      	movs	r2, #0
 8010eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010efa:	4622      	mov	r2, r4
 8010efc:	462b      	mov	r3, r5
 8010efe:	1891      	adds	r1, r2, r2
 8010f00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010f02:	415b      	adcs	r3, r3
 8010f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010f0a:	4621      	mov	r1, r4
 8010f0c:	eb12 0801 	adds.w	r8, r2, r1
 8010f10:	4629      	mov	r1, r5
 8010f12:	eb43 0901 	adc.w	r9, r3, r1
 8010f16:	f04f 0200 	mov.w	r2, #0
 8010f1a:	f04f 0300 	mov.w	r3, #0
 8010f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010f2a:	4690      	mov	r8, r2
 8010f2c:	4699      	mov	r9, r3
 8010f2e:	4623      	mov	r3, r4
 8010f30:	eb18 0303 	adds.w	r3, r8, r3
 8010f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010f38:	462b      	mov	r3, r5
 8010f3a:	eb49 0303 	adc.w	r3, r9, r3
 8010f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010f56:	460b      	mov	r3, r1
 8010f58:	18db      	adds	r3, r3, r3
 8010f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f5c:	4613      	mov	r3, r2
 8010f5e:	eb42 0303 	adc.w	r3, r2, r3
 8010f62:	657b      	str	r3, [r7, #84]	@ 0x54
 8010f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010f6c:	f7ef fe74 	bl	8000c58 <__aeabi_uldivmod>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	4b61      	ldr	r3, [pc, #388]	@ (80110fc <UART_SetConfig+0x2d4>)
 8010f76:	fba3 2302 	umull	r2, r3, r3, r2
 8010f7a:	095b      	lsrs	r3, r3, #5
 8010f7c:	011c      	lsls	r4, r3, #4
 8010f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010f82:	2200      	movs	r2, #0
 8010f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010f88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010f90:	4642      	mov	r2, r8
 8010f92:	464b      	mov	r3, r9
 8010f94:	1891      	adds	r1, r2, r2
 8010f96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010f98:	415b      	adcs	r3, r3
 8010f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010fa0:	4641      	mov	r1, r8
 8010fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8010fa6:	4649      	mov	r1, r9
 8010fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8010fac:	f04f 0200 	mov.w	r2, #0
 8010fb0:	f04f 0300 	mov.w	r3, #0
 8010fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010fc0:	4692      	mov	sl, r2
 8010fc2:	469b      	mov	fp, r3
 8010fc4:	4643      	mov	r3, r8
 8010fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8010fca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010fce:	464b      	mov	r3, r9
 8010fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8010fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010fec:	460b      	mov	r3, r1
 8010fee:	18db      	adds	r3, r3, r3
 8010ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	eb42 0303 	adc.w	r3, r2, r3
 8010ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011002:	f7ef fe29 	bl	8000c58 <__aeabi_uldivmod>
 8011006:	4602      	mov	r2, r0
 8011008:	460b      	mov	r3, r1
 801100a:	4611      	mov	r1, r2
 801100c:	4b3b      	ldr	r3, [pc, #236]	@ (80110fc <UART_SetConfig+0x2d4>)
 801100e:	fba3 2301 	umull	r2, r3, r3, r1
 8011012:	095b      	lsrs	r3, r3, #5
 8011014:	2264      	movs	r2, #100	@ 0x64
 8011016:	fb02 f303 	mul.w	r3, r2, r3
 801101a:	1acb      	subs	r3, r1, r3
 801101c:	00db      	lsls	r3, r3, #3
 801101e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011022:	4b36      	ldr	r3, [pc, #216]	@ (80110fc <UART_SetConfig+0x2d4>)
 8011024:	fba3 2302 	umull	r2, r3, r3, r2
 8011028:	095b      	lsrs	r3, r3, #5
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011030:	441c      	add	r4, r3
 8011032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011036:	2200      	movs	r2, #0
 8011038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801103c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011044:	4642      	mov	r2, r8
 8011046:	464b      	mov	r3, r9
 8011048:	1891      	adds	r1, r2, r2
 801104a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801104c:	415b      	adcs	r3, r3
 801104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011054:	4641      	mov	r1, r8
 8011056:	1851      	adds	r1, r2, r1
 8011058:	6339      	str	r1, [r7, #48]	@ 0x30
 801105a:	4649      	mov	r1, r9
 801105c:	414b      	adcs	r3, r1
 801105e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011060:	f04f 0200 	mov.w	r2, #0
 8011064:	f04f 0300 	mov.w	r3, #0
 8011068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801106c:	4659      	mov	r1, fp
 801106e:	00cb      	lsls	r3, r1, #3
 8011070:	4651      	mov	r1, sl
 8011072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011076:	4651      	mov	r1, sl
 8011078:	00ca      	lsls	r2, r1, #3
 801107a:	4610      	mov	r0, r2
 801107c:	4619      	mov	r1, r3
 801107e:	4603      	mov	r3, r0
 8011080:	4642      	mov	r2, r8
 8011082:	189b      	adds	r3, r3, r2
 8011084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011088:	464b      	mov	r3, r9
 801108a:	460a      	mov	r2, r1
 801108c:	eb42 0303 	adc.w	r3, r2, r3
 8011090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80110a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80110a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80110a8:	460b      	mov	r3, r1
 80110aa:	18db      	adds	r3, r3, r3
 80110ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80110ae:	4613      	mov	r3, r2
 80110b0:	eb42 0303 	adc.w	r3, r2, r3
 80110b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80110ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80110be:	f7ef fdcb 	bl	8000c58 <__aeabi_uldivmod>
 80110c2:	4602      	mov	r2, r0
 80110c4:	460b      	mov	r3, r1
 80110c6:	4b0d      	ldr	r3, [pc, #52]	@ (80110fc <UART_SetConfig+0x2d4>)
 80110c8:	fba3 1302 	umull	r1, r3, r3, r2
 80110cc:	095b      	lsrs	r3, r3, #5
 80110ce:	2164      	movs	r1, #100	@ 0x64
 80110d0:	fb01 f303 	mul.w	r3, r1, r3
 80110d4:	1ad3      	subs	r3, r2, r3
 80110d6:	00db      	lsls	r3, r3, #3
 80110d8:	3332      	adds	r3, #50	@ 0x32
 80110da:	4a08      	ldr	r2, [pc, #32]	@ (80110fc <UART_SetConfig+0x2d4>)
 80110dc:	fba2 2303 	umull	r2, r3, r2, r3
 80110e0:	095b      	lsrs	r3, r3, #5
 80110e2:	f003 0207 	and.w	r2, r3, #7
 80110e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4422      	add	r2, r4
 80110ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80110f0:	e106      	b.n	8011300 <UART_SetConfig+0x4d8>
 80110f2:	bf00      	nop
 80110f4:	40011000 	.word	0x40011000
 80110f8:	40011400 	.word	0x40011400
 80110fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011104:	2200      	movs	r2, #0
 8011106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801110a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801110e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8011112:	4642      	mov	r2, r8
 8011114:	464b      	mov	r3, r9
 8011116:	1891      	adds	r1, r2, r2
 8011118:	6239      	str	r1, [r7, #32]
 801111a:	415b      	adcs	r3, r3
 801111c:	627b      	str	r3, [r7, #36]	@ 0x24
 801111e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011122:	4641      	mov	r1, r8
 8011124:	1854      	adds	r4, r2, r1
 8011126:	4649      	mov	r1, r9
 8011128:	eb43 0501 	adc.w	r5, r3, r1
 801112c:	f04f 0200 	mov.w	r2, #0
 8011130:	f04f 0300 	mov.w	r3, #0
 8011134:	00eb      	lsls	r3, r5, #3
 8011136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801113a:	00e2      	lsls	r2, r4, #3
 801113c:	4614      	mov	r4, r2
 801113e:	461d      	mov	r5, r3
 8011140:	4643      	mov	r3, r8
 8011142:	18e3      	adds	r3, r4, r3
 8011144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011148:	464b      	mov	r3, r9
 801114a:	eb45 0303 	adc.w	r3, r5, r3
 801114e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801115e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011162:	f04f 0200 	mov.w	r2, #0
 8011166:	f04f 0300 	mov.w	r3, #0
 801116a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801116e:	4629      	mov	r1, r5
 8011170:	008b      	lsls	r3, r1, #2
 8011172:	4621      	mov	r1, r4
 8011174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011178:	4621      	mov	r1, r4
 801117a:	008a      	lsls	r2, r1, #2
 801117c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011180:	f7ef fd6a 	bl	8000c58 <__aeabi_uldivmod>
 8011184:	4602      	mov	r2, r0
 8011186:	460b      	mov	r3, r1
 8011188:	4b60      	ldr	r3, [pc, #384]	@ (801130c <UART_SetConfig+0x4e4>)
 801118a:	fba3 2302 	umull	r2, r3, r3, r2
 801118e:	095b      	lsrs	r3, r3, #5
 8011190:	011c      	lsls	r4, r3, #4
 8011192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011196:	2200      	movs	r2, #0
 8011198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801119c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80111a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80111a4:	4642      	mov	r2, r8
 80111a6:	464b      	mov	r3, r9
 80111a8:	1891      	adds	r1, r2, r2
 80111aa:	61b9      	str	r1, [r7, #24]
 80111ac:	415b      	adcs	r3, r3
 80111ae:	61fb      	str	r3, [r7, #28]
 80111b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80111b4:	4641      	mov	r1, r8
 80111b6:	1851      	adds	r1, r2, r1
 80111b8:	6139      	str	r1, [r7, #16]
 80111ba:	4649      	mov	r1, r9
 80111bc:	414b      	adcs	r3, r1
 80111be:	617b      	str	r3, [r7, #20]
 80111c0:	f04f 0200 	mov.w	r2, #0
 80111c4:	f04f 0300 	mov.w	r3, #0
 80111c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80111cc:	4659      	mov	r1, fp
 80111ce:	00cb      	lsls	r3, r1, #3
 80111d0:	4651      	mov	r1, sl
 80111d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80111d6:	4651      	mov	r1, sl
 80111d8:	00ca      	lsls	r2, r1, #3
 80111da:	4610      	mov	r0, r2
 80111dc:	4619      	mov	r1, r3
 80111de:	4603      	mov	r3, r0
 80111e0:	4642      	mov	r2, r8
 80111e2:	189b      	adds	r3, r3, r2
 80111e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80111e8:	464b      	mov	r3, r9
 80111ea:	460a      	mov	r2, r1
 80111ec:	eb42 0303 	adc.w	r3, r2, r3
 80111f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80111f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80111fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011200:	f04f 0200 	mov.w	r2, #0
 8011204:	f04f 0300 	mov.w	r3, #0
 8011208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801120c:	4649      	mov	r1, r9
 801120e:	008b      	lsls	r3, r1, #2
 8011210:	4641      	mov	r1, r8
 8011212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011216:	4641      	mov	r1, r8
 8011218:	008a      	lsls	r2, r1, #2
 801121a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801121e:	f7ef fd1b 	bl	8000c58 <__aeabi_uldivmod>
 8011222:	4602      	mov	r2, r0
 8011224:	460b      	mov	r3, r1
 8011226:	4611      	mov	r1, r2
 8011228:	4b38      	ldr	r3, [pc, #224]	@ (801130c <UART_SetConfig+0x4e4>)
 801122a:	fba3 2301 	umull	r2, r3, r3, r1
 801122e:	095b      	lsrs	r3, r3, #5
 8011230:	2264      	movs	r2, #100	@ 0x64
 8011232:	fb02 f303 	mul.w	r3, r2, r3
 8011236:	1acb      	subs	r3, r1, r3
 8011238:	011b      	lsls	r3, r3, #4
 801123a:	3332      	adds	r3, #50	@ 0x32
 801123c:	4a33      	ldr	r2, [pc, #204]	@ (801130c <UART_SetConfig+0x4e4>)
 801123e:	fba2 2303 	umull	r2, r3, r2, r3
 8011242:	095b      	lsrs	r3, r3, #5
 8011244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011248:	441c      	add	r4, r3
 801124a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801124e:	2200      	movs	r2, #0
 8011250:	673b      	str	r3, [r7, #112]	@ 0x70
 8011252:	677a      	str	r2, [r7, #116]	@ 0x74
 8011254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011258:	4642      	mov	r2, r8
 801125a:	464b      	mov	r3, r9
 801125c:	1891      	adds	r1, r2, r2
 801125e:	60b9      	str	r1, [r7, #8]
 8011260:	415b      	adcs	r3, r3
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011268:	4641      	mov	r1, r8
 801126a:	1851      	adds	r1, r2, r1
 801126c:	6039      	str	r1, [r7, #0]
 801126e:	4649      	mov	r1, r9
 8011270:	414b      	adcs	r3, r1
 8011272:	607b      	str	r3, [r7, #4]
 8011274:	f04f 0200 	mov.w	r2, #0
 8011278:	f04f 0300 	mov.w	r3, #0
 801127c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011280:	4659      	mov	r1, fp
 8011282:	00cb      	lsls	r3, r1, #3
 8011284:	4651      	mov	r1, sl
 8011286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801128a:	4651      	mov	r1, sl
 801128c:	00ca      	lsls	r2, r1, #3
 801128e:	4610      	mov	r0, r2
 8011290:	4619      	mov	r1, r3
 8011292:	4603      	mov	r3, r0
 8011294:	4642      	mov	r2, r8
 8011296:	189b      	adds	r3, r3, r2
 8011298:	66bb      	str	r3, [r7, #104]	@ 0x68
 801129a:	464b      	mov	r3, r9
 801129c:	460a      	mov	r2, r1
 801129e:	eb42 0303 	adc.w	r3, r2, r3
 80112a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80112a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	2200      	movs	r2, #0
 80112ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80112ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80112b0:	f04f 0200 	mov.w	r2, #0
 80112b4:	f04f 0300 	mov.w	r3, #0
 80112b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80112bc:	4649      	mov	r1, r9
 80112be:	008b      	lsls	r3, r1, #2
 80112c0:	4641      	mov	r1, r8
 80112c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80112c6:	4641      	mov	r1, r8
 80112c8:	008a      	lsls	r2, r1, #2
 80112ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80112ce:	f7ef fcc3 	bl	8000c58 <__aeabi_uldivmod>
 80112d2:	4602      	mov	r2, r0
 80112d4:	460b      	mov	r3, r1
 80112d6:	4b0d      	ldr	r3, [pc, #52]	@ (801130c <UART_SetConfig+0x4e4>)
 80112d8:	fba3 1302 	umull	r1, r3, r3, r2
 80112dc:	095b      	lsrs	r3, r3, #5
 80112de:	2164      	movs	r1, #100	@ 0x64
 80112e0:	fb01 f303 	mul.w	r3, r1, r3
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	011b      	lsls	r3, r3, #4
 80112e8:	3332      	adds	r3, #50	@ 0x32
 80112ea:	4a08      	ldr	r2, [pc, #32]	@ (801130c <UART_SetConfig+0x4e4>)
 80112ec:	fba2 2303 	umull	r2, r3, r2, r3
 80112f0:	095b      	lsrs	r3, r3, #5
 80112f2:	f003 020f 	and.w	r2, r3, #15
 80112f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4422      	add	r2, r4
 80112fe:	609a      	str	r2, [r3, #8]
}
 8011300:	bf00      	nop
 8011302:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011306:	46bd      	mov	sp, r7
 8011308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801130c:	51eb851f 	.word	0x51eb851f

08011310 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011310:	b480      	push	{r7}
 8011312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011314:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011316:	4618      	mov	r0, r3
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 8011324:	f000 f808 	bl	8011338 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8011328:	bf00      	nop
 801132a:	bd80      	pop	{r7, pc}

0801132c <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 8011330:	f000 fa0a 	bl	8011748 <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8011334:	bf00      	nop
 8011336:	bd80      	pop	{r7, pc}

08011338 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 8011338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801133a:	b089      	sub	sp, #36	@ 0x24
 801133c:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 801133e:	2000      	movs	r0, #0
 8011340:	f7fa fdda 	bl	800bef8 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8011344:	2101      	movs	r1, #1
 8011346:	2000      	movs	r0, #0
 8011348:	f7fa fe2a 	bl	800bfa0 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 801134c:	2000      	movs	r0, #0
 801134e:	f7fa fe7b 	bl	800c048 <BSP_PB_GetState>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	bf0c      	ite	eq
 8011358:	2301      	moveq	r3, #1
 801135a:	2300      	movne	r3, #0
 801135c:	b2db      	uxtb	r3, r3
 801135e:	461a      	mov	r2, r3
 8011360:	4b84      	ldr	r3, [pc, #528]	@ (8011574 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 8011362:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8011364:	2000      	movs	r0, #0
 8011366:	f7fa fed1 	bl	800c10c <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 801136a:	4a83      	ldr	r2, [pc, #524]	@ (8011578 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 801136c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011370:	4882      	ldr	r0, [pc, #520]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011372:	f004 fa6b 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 8011376:	4981      	ldr	r1, [pc, #516]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011378:	4881      	ldr	r0, [pc, #516]	@ (8011580 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801137a:	f004 f9f7 	bl	801576c <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 801137e:	2103      	movs	r1, #3
 8011380:	2001      	movs	r0, #1
 8011382:	f7fa f871 	bl	800b468 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 8011386:	2103      	movs	r1, #3
 8011388:	2003      	movs	r0, #3
 801138a:	f7fa f86d 	bl	800b468 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 801138e:	2102      	movs	r1, #2
 8011390:	2002      	movs	r0, #2
 8011392:	f7fa f869 	bl	800b468 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8011396:	2104      	movs	r1, #4
 8011398:	2000      	movs	r0, #0
 801139a:	f7fa f865 	bl	800b468 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801139e:	2300      	movs	r3, #0
 80113a0:	81fb      	strh	r3, [r7, #14]
 80113a2:	e0d4      	b.n	801154e <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 80113a4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80113a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113ac:	4613      	mov	r3, r2
 80113ae:	00db      	lsls	r3, r3, #3
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	4a73      	ldr	r2, [pc, #460]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80113b6:	4413      	add	r3, r2
 80113b8:	4619      	mov	r1, r3
 80113ba:	f7fa f987 	bl	800b6cc <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80113be:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80113c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113c6:	486f      	ldr	r0, [pc, #444]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80113c8:	4613      	mov	r3, r2
 80113ca:	00db      	lsls	r3, r3, #3
 80113cc:	1a9b      	subs	r3, r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4403      	add	r3, r0
 80113d2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80113d4:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80113d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113da:	486a      	ldr	r0, [pc, #424]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80113dc:	4613      	mov	r3, r2
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	1a9b      	subs	r3, r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	4403      	add	r3, r0
 80113e6:	3301      	adds	r3, #1
 80113e8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80113ea:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80113ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113f0:	4864      	ldr	r0, [pc, #400]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80113f2:	4613      	mov	r3, r2
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	1a9b      	subs	r3, r3, r2
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	4403      	add	r3, r0
 80113fc:	3302      	adds	r3, #2
 80113fe:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011400:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011402:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011406:	485f      	ldr	r0, [pc, #380]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011408:	4613      	mov	r3, r2
 801140a:	00db      	lsls	r3, r3, #3
 801140c:	1a9b      	subs	r3, r3, r2
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	4403      	add	r3, r0
 8011412:	3303      	adds	r3, #3
 8011414:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011416:	9303      	str	r3, [sp, #12]
 8011418:	9602      	str	r6, [sp, #8]
 801141a:	9501      	str	r5, [sp, #4]
 801141c:	9400      	str	r4, [sp, #0]
 801141e:	460b      	mov	r3, r1
 8011420:	4a59      	ldr	r2, [pc, #356]	@ (8011588 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 8011422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011426:	4855      	ldr	r0, [pc, #340]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011428:	f004 fa10 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 801142c:	4953      	ldr	r1, [pc, #332]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801142e:	4854      	ldr	r0, [pc, #336]	@ (8011580 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8011430:	f004 f99c 	bl	801576c <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8011434:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011438:	4952      	ldr	r1, [pc, #328]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801143a:	4613      	mov	r3, r2
 801143c:	00db      	lsls	r3, r3, #3
 801143e:	1a9b      	subs	r3, r3, r2
 8011440:	009b      	lsls	r3, r3, #2
 8011442:	440b      	add	r3, r1
 8011444:	3314      	adds	r3, #20
 8011446:	edd3 7a00 	vldr	s15, [r3]
 801144a:	463b      	mov	r3, r7
 801144c:	2103      	movs	r1, #3
 801144e:	4618      	mov	r0, r3
 8011450:	eeb0 0a67 	vmov.f32	s0, s15
 8011454:	f000 fa20 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 801145c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 801145e:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8011460:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011464:	4947      	ldr	r1, [pc, #284]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011466:	4613      	mov	r3, r2
 8011468:	00db      	lsls	r3, r3, #3
 801146a:	1a9b      	subs	r3, r3, r2
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	440b      	add	r3, r1
 8011470:	3308      	adds	r3, #8
 8011472:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011474:	9301      	str	r3, [sp, #4]
 8011476:	9000      	str	r0, [sp, #0]
 8011478:	4623      	mov	r3, r4
 801147a:	4a44      	ldr	r2, [pc, #272]	@ (801158c <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 801147c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011480:	483e      	ldr	r0, [pc, #248]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011482:	f004 f9e3 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 8011486:	493d      	ldr	r1, [pc, #244]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011488:	483d      	ldr	r0, [pc, #244]	@ (8011580 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801148a:	f004 f96f 	bl	801576c <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 801148e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011492:	493c      	ldr	r1, [pc, #240]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011494:	4613      	mov	r3, r2
 8011496:	00db      	lsls	r3, r3, #3
 8011498:	1a9b      	subs	r3, r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	440b      	add	r3, r1
 801149e:	3310      	adds	r3, #16
 80114a0:	edd3 7a00 	vldr	s15, [r3]
 80114a4:	463b      	mov	r3, r7
 80114a6:	2103      	movs	r1, #3
 80114a8:	4618      	mov	r0, r3
 80114aa:	eeb0 0a67 	vmov.f32	s0, s15
 80114ae:	f000 f9f3 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80114b6:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80114b8:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80114ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80114be:	4931      	ldr	r1, [pc, #196]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80114c0:	4613      	mov	r3, r2
 80114c2:	00db      	lsls	r3, r3, #3
 80114c4:	1a9b      	subs	r3, r3, r2
 80114c6:	009b      	lsls	r3, r3, #2
 80114c8:	440b      	add	r3, r1
 80114ca:	3304      	adds	r3, #4
 80114cc:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80114ce:	9301      	str	r3, [sp, #4]
 80114d0:	9000      	str	r0, [sp, #0]
 80114d2:	4623      	mov	r3, r4
 80114d4:	4a2e      	ldr	r2, [pc, #184]	@ (8011590 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 80114d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114da:	4828      	ldr	r0, [pc, #160]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80114dc:	f004 f9b6 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 80114e0:	4926      	ldr	r1, [pc, #152]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80114e2:	4827      	ldr	r0, [pc, #156]	@ (8011580 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80114e4:	f004 f942 	bl	801576c <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 80114e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80114ec:	4925      	ldr	r1, [pc, #148]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80114ee:	4613      	mov	r3, r2
 80114f0:	00db      	lsls	r3, r3, #3
 80114f2:	1a9b      	subs	r3, r3, r2
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	440b      	add	r3, r1
 80114f8:	3318      	adds	r3, #24
 80114fa:	edd3 7a00 	vldr	s15, [r3]
 80114fe:	463b      	mov	r3, r7
 8011500:	2103      	movs	r1, #3
 8011502:	4618      	mov	r0, r3
 8011504:	eeb0 0a67 	vmov.f32	s0, s15
 8011508:	f000 f9c6 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8011510:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011512:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8011514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011518:	491a      	ldr	r1, [pc, #104]	@ (8011584 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801151a:	4613      	mov	r3, r2
 801151c:	00db      	lsls	r3, r3, #3
 801151e:	1a9b      	subs	r3, r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	440b      	add	r3, r1
 8011524:	330c      	adds	r3, #12
 8011526:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011528:	9301      	str	r3, [sp, #4]
 801152a:	9000      	str	r0, [sp, #0]
 801152c:	4623      	mov	r3, r4
 801152e:	4a19      	ldr	r2, [pc, #100]	@ (8011594 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 8011530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011534:	4811      	ldr	r0, [pc, #68]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011536:	f004 f989 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 801153a:	4910      	ldr	r1, [pc, #64]	@ (801157c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801153c:	4810      	ldr	r0, [pc, #64]	@ (8011580 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801153e:	f004 f915 	bl	801576c <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8011542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011546:	b29b      	uxth	r3, r3
 8011548:	3301      	adds	r3, #1
 801154a:	b29b      	uxth	r3, r3
 801154c:	81fb      	strh	r3, [r7, #14]
 801154e:	89fb      	ldrh	r3, [r7, #14]
 8011550:	2b03      	cmp	r3, #3
 8011552:	f67f af27 	bls.w	80113a4 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8011556:	2105      	movs	r1, #5
 8011558:	2002      	movs	r0, #2
 801155a:	f7f9 fb49 	bl	800abf0 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 801155e:	2103      	movs	r1, #3
 8011560:	2001      	movs	r0, #1
 8011562:	f7f9 fb45 	bl	800abf0 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8011566:	2101      	movs	r1, #1
 8011568:	2000      	movs	r0, #0
 801156a:	f7f9 fb41 	bl	800abf0 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 801156e:	2300      	movs	r3, #0
 8011570:	81fb      	strh	r3, [r7, #14]
 8011572:	e0c2      	b.n	80116fa <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 8011574:	20000d50 	.word	0x20000d50
 8011578:	08017b0c 	.word	0x08017b0c
 801157c:	20000c50 	.word	0x20000c50
 8011580:	08017b5c 	.word	0x08017b5c
 8011584:	20000b98 	.word	0x20000b98
 8011588:	08017b60 	.word	0x08017b60
 801158c:	08017bd4 	.word	0x08017bd4
 8011590:	08017c00 	.word	0x08017c00
 8011594:	08017c30 	.word	0x08017c30
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8011598:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801159c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80115a0:	4613      	mov	r3, r2
 80115a2:	005b      	lsls	r3, r3, #1
 80115a4:	4413      	add	r3, r2
 80115a6:	00db      	lsls	r3, r3, #3
 80115a8:	4a58      	ldr	r2, [pc, #352]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80115aa:	4413      	add	r3, r2
 80115ac:	4619      	mov	r1, r3
 80115ae:	f7f9 fc2d 	bl	800ae0c <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80115b2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80115b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80115ba:	4854      	ldr	r0, [pc, #336]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80115bc:	4613      	mov	r3, r2
 80115be:	005b      	lsls	r3, r3, #1
 80115c0:	4413      	add	r3, r2
 80115c2:	00db      	lsls	r3, r3, #3
 80115c4:	4403      	add	r3, r0
 80115c6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80115c8:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80115ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80115ce:	484f      	ldr	r0, [pc, #316]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80115d0:	4613      	mov	r3, r2
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	4413      	add	r3, r2
 80115d6:	00db      	lsls	r3, r3, #3
 80115d8:	4403      	add	r3, r0
 80115da:	3301      	adds	r3, #1
 80115dc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80115de:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80115e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80115e4:	4849      	ldr	r0, [pc, #292]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80115e6:	4613      	mov	r3, r2
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	4413      	add	r3, r2
 80115ec:	00db      	lsls	r3, r3, #3
 80115ee:	4403      	add	r3, r0
 80115f0:	3302      	adds	r3, #2
 80115f2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80115f4:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80115f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80115fa:	4844      	ldr	r0, [pc, #272]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80115fc:	4613      	mov	r3, r2
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	4413      	add	r3, r2
 8011602:	00db      	lsls	r3, r3, #3
 8011604:	4403      	add	r3, r0
 8011606:	3304      	adds	r3, #4
 8011608:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801160a:	9303      	str	r3, [sp, #12]
 801160c:	9602      	str	r6, [sp, #8]
 801160e:	9501      	str	r5, [sp, #4]
 8011610:	9400      	str	r4, [sp, #0]
 8011612:	460b      	mov	r3, r1
 8011614:	4a3e      	ldr	r2, [pc, #248]	@ (8011710 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 8011616:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801161a:	483e      	ldr	r0, [pc, #248]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801161c:	f004 f916 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 8011620:	493c      	ldr	r1, [pc, #240]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011622:	483d      	ldr	r0, [pc, #244]	@ (8011718 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011624:	f004 f8a2 	bl	801576c <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8011628:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801162c:	4937      	ldr	r1, [pc, #220]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801162e:	4613      	mov	r3, r2
 8011630:	005b      	lsls	r3, r3, #1
 8011632:	4413      	add	r3, r2
 8011634:	00db      	lsls	r3, r3, #3
 8011636:	440b      	add	r3, r1
 8011638:	330c      	adds	r3, #12
 801163a:	edd3 7a00 	vldr	s15, [r3]
 801163e:	463b      	mov	r3, r7
 8011640:	2103      	movs	r1, #3
 8011642:	4618      	mov	r0, r3
 8011644:	eeb0 0a67 	vmov.f32	s0, s15
 8011648:	f000 f926 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8011650:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	4613      	mov	r3, r2
 8011656:	4a31      	ldr	r2, [pc, #196]	@ (801171c <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8011658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801165c:	482d      	ldr	r0, [pc, #180]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801165e:	f004 f8f5 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 8011662:	492c      	ldr	r1, [pc, #176]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011664:	482c      	ldr	r0, [pc, #176]	@ (8011718 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011666:	f004 f881 	bl	801576c <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 801166a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801166e:	4927      	ldr	r1, [pc, #156]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011670:	4613      	mov	r3, r2
 8011672:	005b      	lsls	r3, r3, #1
 8011674:	4413      	add	r3, r2
 8011676:	00db      	lsls	r3, r3, #3
 8011678:	440b      	add	r3, r1
 801167a:	3310      	adds	r3, #16
 801167c:	edd3 7a00 	vldr	s15, [r3]
 8011680:	463b      	mov	r3, r7
 8011682:	2103      	movs	r1, #3
 8011684:	4618      	mov	r0, r3
 8011686:	eeb0 0a67 	vmov.f32	s0, s15
 801168a:	f000 f905 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8011692:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	4613      	mov	r3, r2
 8011698:	4a21      	ldr	r2, [pc, #132]	@ (8011720 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 801169a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801169e:	481d      	ldr	r0, [pc, #116]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80116a0:	f004 f8d4 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 80116a4:	491b      	ldr	r1, [pc, #108]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80116a6:	481c      	ldr	r0, [pc, #112]	@ (8011718 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80116a8:	f004 f860 	bl	801576c <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 80116ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80116b0:	4916      	ldr	r1, [pc, #88]	@ (801170c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80116b2:	4613      	mov	r3, r2
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	4413      	add	r3, r2
 80116b8:	00db      	lsls	r3, r3, #3
 80116ba:	440b      	add	r3, r1
 80116bc:	3308      	adds	r3, #8
 80116be:	edd3 7a00 	vldr	s15, [r3]
 80116c2:	463b      	mov	r3, r7
 80116c4:	2103      	movs	r1, #3
 80116c6:	4618      	mov	r0, r3
 80116c8:	eeb0 0a67 	vmov.f32	s0, s15
 80116cc:	f000 f8e4 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	461a      	mov	r2, r3
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	4613      	mov	r3, r2
 80116da:	4a12      	ldr	r2, [pc, #72]	@ (8011724 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 80116dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80116e0:	480c      	ldr	r0, [pc, #48]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80116e2:	f004 f8b3 	bl	801584c <sniprintf>
    printf("%s", dataOut);
 80116e6:	490b      	ldr	r1, [pc, #44]	@ (8011714 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80116e8:	480b      	ldr	r0, [pc, #44]	@ (8011718 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80116ea:	f004 f83f 	bl	801576c <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80116ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	3301      	adds	r3, #1
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	81fb      	strh	r3, [r7, #14]
 80116fa:	89fb      	ldrh	r3, [r7, #14]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	f67f af4b 	bls.w	8011598 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 8011702:	bf00      	nop
 8011704:	bf00      	nop
 8011706:	3714      	adds	r7, #20
 8011708:	46bd      	mov	sp, r7
 801170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170c:	20000c08 	.word	0x20000c08
 8011710:	08017c5c 	.word	0x08017c5c
 8011714:	20000c50 	.word	0x20000c50
 8011718:	08017b5c 	.word	0x08017b5c
 801171c:	08017cd0 	.word	0x08017cd0
 8011720:	08017cec 	.word	0x08017cec
 8011724:	08017d0c 	.word	0x08017d0c

08011728 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	4603      	mov	r3, r0
 8011730:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8011732:	4b04      	ldr	r3, [pc, #16]	@ (8011744 <BSP_PB_Callback+0x1c>)
 8011734:	2201      	movs	r2, #1
 8011736:	701a      	strb	r2, [r3, #0]
}
 8011738:	bf00      	nop
 801173a:	370c      	adds	r7, #12
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr
 8011744:	20000b94 	.word	0x20000b94

08011748 <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 801174e:	4b4a      	ldr	r3, [pc, #296]	@ (8011878 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	b2db      	uxtb	r3, r3
 8011754:	2b00      	cmp	r3, #0
 8011756:	d013      	beq.n	8011780 <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 8011758:	2032      	movs	r0, #50	@ 0x32
 801175a:	f7fa fdfd 	bl	800c358 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 801175e:	bf00      	nop
 8011760:	2000      	movs	r0, #0
 8011762:	f7fa fc71 	bl	800c048 <BSP_PB_GetState>
 8011766:	4602      	mov	r2, r0
 8011768:	4b44      	ldr	r3, [pc, #272]	@ (801187c <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	429a      	cmp	r2, r3
 801176e:	d0f7      	beq.n	8011760 <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8011770:	2032      	movs	r0, #50	@ 0x32
 8011772:	f7fa fdf1 	bl	800c358 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8011776:	4b40      	ldr	r3, [pc, #256]	@ (8011878 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8011778:	2200      	movs	r2, #0
 801177a:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 801177c:	f7ff fddc 	bl	8011338 <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8011780:	4a3f      	ldr	r2, [pc, #252]	@ (8011880 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 8011782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011786:	483f      	ldr	r0, [pc, #252]	@ (8011884 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8011788:	f004 f860 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 801178c:	493d      	ldr	r1, [pc, #244]	@ (8011884 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 801178e:	483e      	ldr	r0, [pc, #248]	@ (8011888 <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 8011790:	f003 ffec 	bl	801576c <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8011794:	2300      	movs	r3, #0
 8011796:	607b      	str	r3, [r7, #4]
 8011798:	e02e      	b.n	80117f8 <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 801179a:	493c      	ldr	r1, [pc, #240]	@ (801188c <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	4613      	mov	r3, r2
 80117a0:	00db      	lsls	r3, r3, #3
 80117a2:	1a9b      	subs	r3, r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	440b      	add	r3, r1
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d003      	beq.n	80117b6 <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f000 f8f1 	bl	8011998 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 80117b6:	4935      	ldr	r1, [pc, #212]	@ (801188c <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	4613      	mov	r3, r2
 80117bc:	00db      	lsls	r3, r3, #3
 80117be:	1a9b      	subs	r3, r3, r2
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	440b      	add	r3, r1
 80117c4:	3301      	adds	r3, #1
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d003      	beq.n	80117d4 <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f000 f9a2 	bl	8011b18 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 80117d4:	492d      	ldr	r1, [pc, #180]	@ (801188c <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	4613      	mov	r3, r2
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	1a9b      	subs	r3, r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	440b      	add	r3, r1
 80117e2:	3302      	adds	r3, #2
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d003      	beq.n	80117f2 <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	4618      	mov	r0, r3
 80117ee:	f000 fa53 	bl	8011c98 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	3301      	adds	r3, #1
 80117f6:	607b      	str	r3, [r7, #4]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b03      	cmp	r3, #3
 80117fc:	d9cd      	bls.n	801179a <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80117fe:	2300      	movs	r3, #0
 8011800:	607b      	str	r3, [r7, #4]
 8011802:	e02e      	b.n	8011862 <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 8011804:	4922      	ldr	r1, [pc, #136]	@ (8011890 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	4613      	mov	r3, r2
 801180a:	005b      	lsls	r3, r3, #1
 801180c:	4413      	add	r3, r2
 801180e:	00db      	lsls	r3, r3, #3
 8011810:	440b      	add	r3, r1
 8011812:	3302      	adds	r3, #2
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d003      	beq.n	8011822 <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	f000 fc43 	bl	80120a8 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 8011822:	491b      	ldr	r1, [pc, #108]	@ (8011890 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	4613      	mov	r3, r2
 8011828:	005b      	lsls	r3, r3, #1
 801182a:	4413      	add	r3, r2
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	440b      	add	r3, r1
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d003      	beq.n	801183e <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4618      	mov	r0, r3
 801183a:	f000 faed 	bl	8011e18 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 801183e:	4914      	ldr	r1, [pc, #80]	@ (8011890 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	4613      	mov	r3, r2
 8011844:	005b      	lsls	r3, r3, #1
 8011846:	4413      	add	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	440b      	add	r3, r1
 801184c:	3301      	adds	r3, #1
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d003      	beq.n	801185c <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	4618      	mov	r0, r3
 8011858:	f000 fb86 	bl	8011f68 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3301      	adds	r3, #1
 8011860:	607b      	str	r3, [r7, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b02      	cmp	r3, #2
 8011866:	d9cd      	bls.n	8011804 <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 8011868:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801186c:	f7fa fd74 	bl	800c358 <HAL_Delay>
}
 8011870:	bf00      	nop
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	20000b94 	.word	0x20000b94
 801187c:	20000d50 	.word	0x20000d50
 8011880:	08017b0c 	.word	0x08017b0c
 8011884:	20000c50 	.word	0x20000c50
 8011888:	08017b5c 	.word	0x08017b5c
 801188c:	20000b98 	.word	0x20000b98
 8011890:	20000c08 	.word	0x20000c08
 8011894:	00000000 	.word	0x00000000

08011898 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8011898:	b5b0      	push	{r4, r5, r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	ed87 0a03 	vstr	s0, [r7, #12]
 80118a2:	60b8      	str	r0, [r7, #8]
 80118a4:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 80118a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80118aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b2:	db03      	blt.n	80118bc <floatToInt+0x24>
  {
    out_value->sign = 0;
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	2200      	movs	r2, #0
 80118b8:	701a      	strb	r2, [r3, #0]
 80118ba:	e008      	b.n	80118ce <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	2201      	movs	r2, #1
 80118c0:	701a      	strb	r2, [r3, #0]
    in = -in;
 80118c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80118c6:	eef1 7a67 	vneg.f32	s15, s15
 80118ca:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f7ee fe30 	bl	8000534 <__aeabi_i2d>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	ec43 2b11 	vmov	d1, r2, r3
 80118dc:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8011990 <floatToInt+0xf8>
 80118e0:	f004 ff4c 	bl	801677c <pow>
 80118e4:	ec53 2b10 	vmov	r2, r3, d0
 80118e8:	4610      	mov	r0, r2
 80118ea:	4619      	mov	r1, r3
 80118ec:	f7ef f964 	bl	8000bb8 <__aeabi_d2f>
 80118f0:	ee06 0a90 	vmov	s13, r0
 80118f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80118f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80118fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8011900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011904:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8011908:	edd7 7a03 	vldr	s15, [r7, #12]
 801190c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011910:	ee17 2a90 	vmov	r2, s15
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	ee07 3a90 	vmov	s15, r3
 8011920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011924:	ed97 7a03 	vldr	s14, [r7, #12]
 8011928:	ee77 7a67 	vsub.f32	s15, s14, s15
 801192c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8011930:	68f8      	ldr	r0, [r7, #12]
 8011932:	f7ee fe11 	bl	8000558 <__aeabi_f2d>
 8011936:	4604      	mov	r4, r0
 8011938:	460d      	mov	r5, r1
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7ee fdfa 	bl	8000534 <__aeabi_i2d>
 8011940:	4602      	mov	r2, r0
 8011942:	460b      	mov	r3, r1
 8011944:	ec43 2b11 	vmov	d1, r2, r3
 8011948:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8011990 <floatToInt+0xf8>
 801194c:	f004 ff16 	bl	801677c <pow>
 8011950:	ec53 2b10 	vmov	r2, r3, d0
 8011954:	4620      	mov	r0, r4
 8011956:	4629      	mov	r1, r5
 8011958:	f7ee fe56 	bl	8000608 <__aeabi_dmul>
 801195c:	4602      	mov	r2, r0
 801195e:	460b      	mov	r3, r1
 8011960:	ec43 2b17 	vmov	d7, r2, r3
 8011964:	eeb0 0a47 	vmov.f32	s0, s14
 8011968:	eef0 0a67 	vmov.f32	s1, s15
 801196c:	f004 ff82 	bl	8016874 <trunc>
 8011970:	ec53 2b10 	vmov	r2, r3, d0
 8011974:	4610      	mov	r0, r2
 8011976:	4619      	mov	r1, r3
 8011978:	f7ef f8f6 	bl	8000b68 <__aeabi_d2iz>
 801197c:	4603      	mov	r3, r0
 801197e:	461a      	mov	r2, r3
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	609a      	str	r2, [r3, #8]
}
 8011984:	bf00      	nop
 8011986:	3710      	adds	r7, #16
 8011988:	46bd      	mov	sp, r7
 801198a:	bdb0      	pop	{r4, r5, r7, pc}
 801198c:	f3af 8000 	nop.w
 8011990:	00000000 	.word	0x00000000
 8011994:	40240000 	.word	0x40240000

08011998 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 8011998:	b5b0      	push	{r4, r5, r7, lr}
 801199a:	b092      	sub	sp, #72	@ 0x48
 801199c:	af06      	add	r7, sp, #24
 801199e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	4a51      	ldr	r2, [pc, #324]	@ (8011ae8 <Accelero_Sensor_Handler+0x150>)
 80119a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119a8:	4850      	ldr	r0, [pc, #320]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 80119aa:	f003 ff4f 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 80119ae:	494f      	ldr	r1, [pc, #316]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 80119b0:	484f      	ldr	r0, [pc, #316]	@ (8011af0 <Accelero_Sensor_Handler+0x158>)
 80119b2:	f003 fedb 	bl	801576c <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 80119b6:	f107 031c 	add.w	r3, r7, #28
 80119ba:	461a      	mov	r2, r3
 80119bc:	2102      	movs	r1, #2
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7f9 fed8 	bl	800b774 <IKS4A1_MOTION_SENSOR_GetAxes>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d007      	beq.n	80119da <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4a49      	ldr	r2, [pc, #292]	@ (8011af4 <Accelero_Sensor_Handler+0x15c>)
 80119ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119d2:	4846      	ldr	r0, [pc, #280]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 80119d4:	f003 ff3a 	bl	801584c <sniprintf>
 80119d8:	e011      	b.n	80119fe <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80119da:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 80119dc:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80119de:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 80119e0:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80119e2:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 80119e4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 80119e6:	9404      	str	r4, [sp, #16]
 80119e8:	9003      	str	r0, [sp, #12]
 80119ea:	9102      	str	r1, [sp, #8]
 80119ec:	9201      	str	r2, [sp, #4]
 80119ee:	9300      	str	r3, [sp, #0]
 80119f0:	462b      	mov	r3, r5
 80119f2:	4a41      	ldr	r2, [pc, #260]	@ (8011af8 <Accelero_Sensor_Handler+0x160>)
 80119f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119f8:	483c      	ldr	r0, [pc, #240]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 80119fa:	f003 ff27 	bl	801584c <sniprintf>
  }

  printf("%s", dataOut);
 80119fe:	493b      	ldr	r1, [pc, #236]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a00:	483b      	ldr	r0, [pc, #236]	@ (8011af0 <Accelero_Sensor_Handler+0x158>)
 8011a02:	f003 feb3 	bl	801576c <iprintf>

  if (verbose == 1)
 8011a06:	4b3d      	ldr	r3, [pc, #244]	@ (8011afc <Accelero_Sensor_Handler+0x164>)
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d168      	bne.n	8011ae0 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011a0e:	f107 030f 	add.w	r3, r7, #15
 8011a12:	4619      	mov	r1, r3
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f7f9 fe83 	bl	800b720 <IKS4A1_MOTION_SENSOR_ReadID>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d007      	beq.n	8011a30 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4a37      	ldr	r2, [pc, #220]	@ (8011b00 <Accelero_Sensor_Handler+0x168>)
 8011a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a28:	4830      	ldr	r0, [pc, #192]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a2a:	f003 ff0f 	bl	801584c <sniprintf>
 8011a2e:	e008      	b.n	8011a42 <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	7bfa      	ldrb	r2, [r7, #15]
 8011a34:	9200      	str	r2, [sp, #0]
 8011a36:	4a33      	ldr	r2, [pc, #204]	@ (8011b04 <Accelero_Sensor_Handler+0x16c>)
 8011a38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a3c:	482b      	ldr	r0, [pc, #172]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a3e:	f003 ff05 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011a42:	492a      	ldr	r1, [pc, #168]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a44:	482a      	ldr	r0, [pc, #168]	@ (8011af0 <Accelero_Sensor_Handler+0x158>)
 8011a46:	f003 fe91 	bl	801576c <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8011a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011a4e:	461a      	mov	r2, r3
 8011a50:	2102      	movs	r1, #2
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7f9 fed2 	bl	800b7fc <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d007      	beq.n	8011a6e <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	4a29      	ldr	r2, [pc, #164]	@ (8011b08 <Accelero_Sensor_Handler+0x170>)
 8011a62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a66:	4821      	ldr	r0, [pc, #132]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a68:	f003 fef0 	bl	801584c <sniprintf>
 8011a6c:	e014      	b.n	8011a98 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011a6e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011a72:	f107 0310 	add.w	r3, r7, #16
 8011a76:	2103      	movs	r1, #3
 8011a78:	4618      	mov	r0, r3
 8011a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8011a7e:	f7ff ff0b 	bl	8011898 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011a86:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011a88:	9101      	str	r1, [sp, #4]
 8011a8a:	9200      	str	r2, [sp, #0]
 8011a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8011b0c <Accelero_Sensor_Handler+0x174>)
 8011a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a92:	4816      	ldr	r0, [pc, #88]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a94:	f003 feda 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011a98:	4914      	ldr	r1, [pc, #80]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011a9a:	4815      	ldr	r0, [pc, #84]	@ (8011af0 <Accelero_Sensor_Handler+0x158>)
 8011a9c:	f003 fe66 	bl	801576c <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8011aa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	2102      	movs	r1, #2
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7f9 feeb 	bl	800b884 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d007      	beq.n	8011ac4 <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	4a16      	ldr	r2, [pc, #88]	@ (8011b10 <Accelero_Sensor_Handler+0x178>)
 8011ab8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011abc:	480b      	ldr	r0, [pc, #44]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011abe:	f003 fec5 	bl	801584c <sniprintf>
 8011ac2:	e009      	b.n	8011ad8 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	4613      	mov	r3, r2
 8011acc:	4a11      	ldr	r2, [pc, #68]	@ (8011b14 <Accelero_Sensor_Handler+0x17c>)
 8011ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ad2:	4806      	ldr	r0, [pc, #24]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011ad4:	f003 feba 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011ad8:	4904      	ldr	r1, [pc, #16]	@ (8011aec <Accelero_Sensor_Handler+0x154>)
 8011ada:	4805      	ldr	r0, [pc, #20]	@ (8011af0 <Accelero_Sensor_Handler+0x158>)
 8011adc:	f003 fe46 	bl	801576c <iprintf>
  }
}
 8011ae0:	bf00      	nop
 8011ae2:	3730      	adds	r7, #48	@ 0x30
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ae8:	08017d28 	.word	0x08017d28
 8011aec:	20000c50 	.word	0x20000c50
 8011af0:	08017b5c 	.word	0x08017b5c
 8011af4:	08017d48 	.word	0x08017d48
 8011af8:	08017d5c 	.word	0x08017d5c
 8011afc:	20000225 	.word	0x20000225
 8011b00:	08017d8c 	.word	0x08017d8c
 8011b04:	08017da0 	.word	0x08017da0
 8011b08:	08017db4 	.word	0x08017db4
 8011b0c:	08017dc8 	.word	0x08017dc8
 8011b10:	08017de0 	.word	0x08017de0
 8011b14:	08017df0 	.word	0x08017df0

08011b18 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 8011b18:	b5b0      	push	{r4, r5, r7, lr}
 8011b1a:	b092      	sub	sp, #72	@ 0x48
 8011b1c:	af06      	add	r7, sp, #24
 8011b1e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	4a51      	ldr	r2, [pc, #324]	@ (8011c68 <Gyro_Sensor_Handler+0x150>)
 8011b24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b28:	4850      	ldr	r0, [pc, #320]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011b2a:	f003 fe8f 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 8011b2e:	494f      	ldr	r1, [pc, #316]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011b30:	484f      	ldr	r0, [pc, #316]	@ (8011c70 <Gyro_Sensor_Handler+0x158>)
 8011b32:	f003 fe1b 	bl	801576c <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8011b36:	f107 031c 	add.w	r3, r7, #28
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	2101      	movs	r1, #1
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f7f9 fe18 	bl	800b774 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d007      	beq.n	8011b5a <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a49      	ldr	r2, [pc, #292]	@ (8011c74 <Gyro_Sensor_Handler+0x15c>)
 8011b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b52:	4846      	ldr	r0, [pc, #280]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011b54:	f003 fe7a 	bl	801584c <sniprintf>
 8011b58:	e011      	b.n	8011b7e <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011b5a:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011b5c:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011b5e:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011b60:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011b62:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011b64:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011b66:	9404      	str	r4, [sp, #16]
 8011b68:	9003      	str	r0, [sp, #12]
 8011b6a:	9102      	str	r1, [sp, #8]
 8011b6c:	9201      	str	r2, [sp, #4]
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	462b      	mov	r3, r5
 8011b72:	4a41      	ldr	r2, [pc, #260]	@ (8011c78 <Gyro_Sensor_Handler+0x160>)
 8011b74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b78:	483c      	ldr	r0, [pc, #240]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011b7a:	f003 fe67 	bl	801584c <sniprintf>
  }

  printf("%s", dataOut);
 8011b7e:	493b      	ldr	r1, [pc, #236]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011b80:	483b      	ldr	r0, [pc, #236]	@ (8011c70 <Gyro_Sensor_Handler+0x158>)
 8011b82:	f003 fdf3 	bl	801576c <iprintf>

  if (verbose == 1)
 8011b86:	4b3d      	ldr	r3, [pc, #244]	@ (8011c7c <Gyro_Sensor_Handler+0x164>)
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d168      	bne.n	8011c60 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011b8e:	f107 030f 	add.w	r3, r7, #15
 8011b92:	4619      	mov	r1, r3
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7f9 fdc3 	bl	800b720 <IKS4A1_MOTION_SENSOR_ReadID>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d007      	beq.n	8011bb0 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	4a37      	ldr	r2, [pc, #220]	@ (8011c80 <Gyro_Sensor_Handler+0x168>)
 8011ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ba8:	4830      	ldr	r0, [pc, #192]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011baa:	f003 fe4f 	bl	801584c <sniprintf>
 8011bae:	e008      	b.n	8011bc2 <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	7bfa      	ldrb	r2, [r7, #15]
 8011bb4:	9200      	str	r2, [sp, #0]
 8011bb6:	4a33      	ldr	r2, [pc, #204]	@ (8011c84 <Gyro_Sensor_Handler+0x16c>)
 8011bb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011bbc:	482b      	ldr	r0, [pc, #172]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011bbe:	f003 fe45 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011bc2:	492a      	ldr	r1, [pc, #168]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011bc4:	482a      	ldr	r0, [pc, #168]	@ (8011c70 <Gyro_Sensor_Handler+0x158>)
 8011bc6:	f003 fdd1 	bl	801576c <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8011bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011bce:	461a      	mov	r2, r3
 8011bd0:	2101      	movs	r1, #1
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7f9 fe12 	bl	800b7fc <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d007      	beq.n	8011bee <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a29      	ldr	r2, [pc, #164]	@ (8011c88 <Gyro_Sensor_Handler+0x170>)
 8011be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011be6:	4821      	ldr	r0, [pc, #132]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011be8:	f003 fe30 	bl	801584c <sniprintf>
 8011bec:	e014      	b.n	8011c18 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011bee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011bf2:	f107 0310 	add.w	r3, r7, #16
 8011bf6:	2103      	movs	r1, #3
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8011bfe:	f7ff fe4b 	bl	8011898 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011c06:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011c08:	9101      	str	r1, [sp, #4]
 8011c0a:	9200      	str	r2, [sp, #0]
 8011c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8011c8c <Gyro_Sensor_Handler+0x174>)
 8011c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c12:	4816      	ldr	r0, [pc, #88]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011c14:	f003 fe1a 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011c18:	4914      	ldr	r1, [pc, #80]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011c1a:	4815      	ldr	r0, [pc, #84]	@ (8011c70 <Gyro_Sensor_Handler+0x158>)
 8011c1c:	f003 fda6 	bl	801576c <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 8011c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011c24:	461a      	mov	r2, r3
 8011c26:	2101      	movs	r1, #1
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7f9 fe2b 	bl	800b884 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d007      	beq.n	8011c44 <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4a16      	ldr	r2, [pc, #88]	@ (8011c90 <Gyro_Sensor_Handler+0x178>)
 8011c38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c3c:	480b      	ldr	r0, [pc, #44]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011c3e:	f003 fe05 	bl	801584c <sniprintf>
 8011c42:	e009      	b.n	8011c58 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	4a11      	ldr	r2, [pc, #68]	@ (8011c94 <Gyro_Sensor_Handler+0x17c>)
 8011c4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c52:	4806      	ldr	r0, [pc, #24]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011c54:	f003 fdfa 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011c58:	4904      	ldr	r1, [pc, #16]	@ (8011c6c <Gyro_Sensor_Handler+0x154>)
 8011c5a:	4805      	ldr	r0, [pc, #20]	@ (8011c70 <Gyro_Sensor_Handler+0x158>)
 8011c5c:	f003 fd86 	bl	801576c <iprintf>
  }
}
 8011c60:	bf00      	nop
 8011c62:	3730      	adds	r7, #48	@ 0x30
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bdb0      	pop	{r4, r5, r7, pc}
 8011c68:	08017d28 	.word	0x08017d28
 8011c6c:	20000c50 	.word	0x20000c50
 8011c70:	08017b5c 	.word	0x08017b5c
 8011c74:	08017e00 	.word	0x08017e00
 8011c78:	08017e14 	.word	0x08017e14
 8011c7c:	20000225 	.word	0x20000225
 8011c80:	08017d8c 	.word	0x08017d8c
 8011c84:	08017da0 	.word	0x08017da0
 8011c88:	08017db4 	.word	0x08017db4
 8011c8c:	08017dc8 	.word	0x08017dc8
 8011c90:	08017de0 	.word	0x08017de0
 8011c94:	08017e44 	.word	0x08017e44

08011c98 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8011c98:	b5b0      	push	{r4, r5, r7, lr}
 8011c9a:	b092      	sub	sp, #72	@ 0x48
 8011c9c:	af06      	add	r7, sp, #24
 8011c9e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a51      	ldr	r2, [pc, #324]	@ (8011de8 <Magneto_Sensor_Handler+0x150>)
 8011ca4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ca8:	4850      	ldr	r0, [pc, #320]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011caa:	f003 fdcf 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 8011cae:	494f      	ldr	r1, [pc, #316]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011cb0:	484f      	ldr	r0, [pc, #316]	@ (8011df0 <Magneto_Sensor_Handler+0x158>)
 8011cb2:	f003 fd5b 	bl	801576c <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8011cb6:	f107 031c 	add.w	r3, r7, #28
 8011cba:	461a      	mov	r2, r3
 8011cbc:	2104      	movs	r1, #4
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7f9 fd58 	bl	800b774 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d007      	beq.n	8011cda <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4a49      	ldr	r2, [pc, #292]	@ (8011df4 <Magneto_Sensor_Handler+0x15c>)
 8011cce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cd2:	4846      	ldr	r0, [pc, #280]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011cd4:	f003 fdba 	bl	801584c <sniprintf>
 8011cd8:	e011      	b.n	8011cfe <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011cda:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011cdc:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011cde:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011ce0:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011ce2:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011ce4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011ce6:	9404      	str	r4, [sp, #16]
 8011ce8:	9003      	str	r0, [sp, #12]
 8011cea:	9102      	str	r1, [sp, #8]
 8011cec:	9201      	str	r2, [sp, #4]
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	462b      	mov	r3, r5
 8011cf2:	4a41      	ldr	r2, [pc, #260]	@ (8011df8 <Magneto_Sensor_Handler+0x160>)
 8011cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cf8:	483c      	ldr	r0, [pc, #240]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011cfa:	f003 fda7 	bl	801584c <sniprintf>
  }

  printf("%s", dataOut);
 8011cfe:	493b      	ldr	r1, [pc, #236]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d00:	483b      	ldr	r0, [pc, #236]	@ (8011df0 <Magneto_Sensor_Handler+0x158>)
 8011d02:	f003 fd33 	bl	801576c <iprintf>

  if (verbose == 1)
 8011d06:	4b3d      	ldr	r3, [pc, #244]	@ (8011dfc <Magneto_Sensor_Handler+0x164>)
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d168      	bne.n	8011de0 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011d0e:	f107 030f 	add.w	r3, r7, #15
 8011d12:	4619      	mov	r1, r3
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f7f9 fd03 	bl	800b720 <IKS4A1_MOTION_SENSOR_ReadID>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d007      	beq.n	8011d30 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	4a37      	ldr	r2, [pc, #220]	@ (8011e00 <Magneto_Sensor_Handler+0x168>)
 8011d24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d28:	4830      	ldr	r0, [pc, #192]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d2a:	f003 fd8f 	bl	801584c <sniprintf>
 8011d2e:	e008      	b.n	8011d42 <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	7bfa      	ldrb	r2, [r7, #15]
 8011d34:	9200      	str	r2, [sp, #0]
 8011d36:	4a33      	ldr	r2, [pc, #204]	@ (8011e04 <Magneto_Sensor_Handler+0x16c>)
 8011d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d3c:	482b      	ldr	r0, [pc, #172]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d3e:	f003 fd85 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011d42:	492a      	ldr	r1, [pc, #168]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d44:	482a      	ldr	r0, [pc, #168]	@ (8011df0 <Magneto_Sensor_Handler+0x158>)
 8011d46:	f003 fd11 	bl	801576c <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 8011d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d4e:	461a      	mov	r2, r3
 8011d50:	2104      	movs	r1, #4
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7f9 fd52 	bl	800b7fc <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d007      	beq.n	8011d6e <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	4a29      	ldr	r2, [pc, #164]	@ (8011e08 <Magneto_Sensor_Handler+0x170>)
 8011d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d66:	4821      	ldr	r0, [pc, #132]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d68:	f003 fd70 	bl	801584c <sniprintf>
 8011d6c:	e014      	b.n	8011d98 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011d6e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011d72:	f107 0310 	add.w	r3, r7, #16
 8011d76:	2103      	movs	r1, #3
 8011d78:	4618      	mov	r0, r3
 8011d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8011d7e:	f7ff fd8b 	bl	8011898 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011d86:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011d88:	9101      	str	r1, [sp, #4]
 8011d8a:	9200      	str	r2, [sp, #0]
 8011d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8011e0c <Magneto_Sensor_Handler+0x174>)
 8011d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d92:	4816      	ldr	r0, [pc, #88]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d94:	f003 fd5a 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011d98:	4914      	ldr	r1, [pc, #80]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011d9a:	4815      	ldr	r0, [pc, #84]	@ (8011df0 <Magneto_Sensor_Handler+0x158>)
 8011d9c:	f003 fce6 	bl	801576c <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8011da0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011da4:	461a      	mov	r2, r3
 8011da6:	2104      	movs	r1, #4
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7f9 fd6b 	bl	800b884 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011dae:	4603      	mov	r3, r0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d007      	beq.n	8011dc4 <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	4a16      	ldr	r2, [pc, #88]	@ (8011e10 <Magneto_Sensor_Handler+0x178>)
 8011db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011dbc:	480b      	ldr	r0, [pc, #44]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011dbe:	f003 fd45 	bl	801584c <sniprintf>
 8011dc2:	e009      	b.n	8011dd8 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	4a11      	ldr	r2, [pc, #68]	@ (8011e14 <Magneto_Sensor_Handler+0x17c>)
 8011dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011dd2:	4806      	ldr	r0, [pc, #24]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011dd4:	f003 fd3a 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011dd8:	4904      	ldr	r1, [pc, #16]	@ (8011dec <Magneto_Sensor_Handler+0x154>)
 8011dda:	4805      	ldr	r0, [pc, #20]	@ (8011df0 <Magneto_Sensor_Handler+0x158>)
 8011ddc:	f003 fcc6 	bl	801576c <iprintf>
  }
}
 8011de0:	bf00      	nop
 8011de2:	3730      	adds	r7, #48	@ 0x30
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bdb0      	pop	{r4, r5, r7, pc}
 8011de8:	08017d28 	.word	0x08017d28
 8011dec:	20000c50 	.word	0x20000c50
 8011df0:	08017b5c 	.word	0x08017b5c
 8011df4:	08017e58 	.word	0x08017e58
 8011df8:	08017e6c 	.word	0x08017e6c
 8011dfc:	20000225 	.word	0x20000225
 8011e00:	08017d8c 	.word	0x08017d8c
 8011e04:	08017da0 	.word	0x08017da0
 8011e08:	08017db4 	.word	0x08017db4
 8011e0c:	08017dc8 	.word	0x08017dc8
 8011e10:	08017de0 	.word	0x08017de0
 8011e14:	08017e9c 	.word	0x08017e9c

08011e18 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b08c      	sub	sp, #48	@ 0x30
 8011e1c:	af04      	add	r7, sp, #16
 8011e1e:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	4a47      	ldr	r2, [pc, #284]	@ (8011f40 <Temp_Sensor_Handler+0x128>)
 8011e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e28:	4846      	ldr	r0, [pc, #280]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011e2a:	f003 fd0f 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 8011e2e:	4945      	ldr	r1, [pc, #276]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011e30:	4845      	ldr	r0, [pc, #276]	@ (8011f48 <Temp_Sensor_Handler+0x130>)
 8011e32:	f003 fc9b 	bl	801576c <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 8011e36:	f107 0318 	add.w	r3, r7, #24
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7f9 f87a 	bl	800af38 <IKS4A1_ENV_SENSOR_GetValue>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d007      	beq.n	8011e5a <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8011f4c <Temp_Sensor_Handler+0x134>)
 8011e4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e52:	483c      	ldr	r0, [pc, #240]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011e54:	f003 fcfa 	bl	801584c <sniprintf>
 8011e58:	e01d      	b.n	8011e96 <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 8011e5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011e5e:	f107 030c 	add.w	r3, r7, #12
 8011e62:	2102      	movs	r1, #2
 8011e64:	4618      	mov	r0, r3
 8011e66:	eeb0 0a67 	vmov.f32	s0, s15
 8011e6a:	f7ff fd15 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d001      	beq.n	8011e7c <Temp_Sensor_Handler+0x64>
 8011e78:	232d      	movs	r3, #45	@ 0x2d
 8011e7a:	e000      	b.n	8011e7e <Temp_Sensor_Handler+0x66>
 8011e7c:	232b      	movs	r3, #43	@ 0x2b
 8011e7e:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 8011e80:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011e82:	9002      	str	r0, [sp, #8]
 8011e84:	9101      	str	r1, [sp, #4]
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	4a31      	ldr	r2, [pc, #196]	@ (8011f50 <Temp_Sensor_Handler+0x138>)
 8011e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e90:	482c      	ldr	r0, [pc, #176]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011e92:	f003 fcdb 	bl	801584c <sniprintf>
  }

  printf("%s", dataOut);
 8011e96:	492b      	ldr	r1, [pc, #172]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011e98:	482b      	ldr	r0, [pc, #172]	@ (8011f48 <Temp_Sensor_Handler+0x130>)
 8011e9a:	f003 fc67 	bl	801576c <iprintf>

  if (verbose == 1)
 8011e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8011f54 <Temp_Sensor_Handler+0x13c>)
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	d148      	bne.n	8011f38 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011ea6:	f107 030b 	add.w	r3, r7, #11
 8011eaa:	4619      	mov	r1, r3
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7f8 ffd7 	bl	800ae60 <IKS4A1_ENV_SENSOR_ReadID>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d007      	beq.n	8011ec8 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	4a27      	ldr	r2, [pc, #156]	@ (8011f58 <Temp_Sensor_Handler+0x140>)
 8011ebc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ec0:	4820      	ldr	r0, [pc, #128]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011ec2:	f003 fcc3 	bl	801584c <sniprintf>
 8011ec6:	e008      	b.n	8011eda <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	7afa      	ldrb	r2, [r7, #11]
 8011ecc:	9200      	str	r2, [sp, #0]
 8011ece:	4a23      	ldr	r2, [pc, #140]	@ (8011f5c <Temp_Sensor_Handler+0x144>)
 8011ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ed4:	481b      	ldr	r0, [pc, #108]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011ed6:	f003 fcb9 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011eda:	491a      	ldr	r1, [pc, #104]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011edc:	481a      	ldr	r0, [pc, #104]	@ (8011f48 <Temp_Sensor_Handler+0x130>)
 8011ede:	f003 fc45 	bl	801576c <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 8011ee2:	f107 031c 	add.w	r3, r7, #28
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	2101      	movs	r1, #1
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7f8 ffe2 	bl	800aeb4 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d007      	beq.n	8011f06 <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4a19      	ldr	r2, [pc, #100]	@ (8011f60 <Temp_Sensor_Handler+0x148>)
 8011efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011efe:	4811      	ldr	r0, [pc, #68]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011f00:	f003 fca4 	bl	801584c <sniprintf>
 8011f04:	e014      	b.n	8011f30 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011f06:	edd7 7a07 	vldr	s15, [r7, #28]
 8011f0a:	f107 030c 	add.w	r3, r7, #12
 8011f0e:	2103      	movs	r1, #3
 8011f10:	4618      	mov	r0, r3
 8011f12:	eeb0 0a67 	vmov.f32	s0, s15
 8011f16:	f7ff fcbf 	bl	8011898 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8011f1e:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011f20:	9101      	str	r1, [sp, #4]
 8011f22:	9200      	str	r2, [sp, #0]
 8011f24:	4a0f      	ldr	r2, [pc, #60]	@ (8011f64 <Temp_Sensor_Handler+0x14c>)
 8011f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f2a:	4806      	ldr	r0, [pc, #24]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011f2c:	f003 fc8e 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8011f30:	4904      	ldr	r1, [pc, #16]	@ (8011f44 <Temp_Sensor_Handler+0x12c>)
 8011f32:	4805      	ldr	r0, [pc, #20]	@ (8011f48 <Temp_Sensor_Handler+0x130>)
 8011f34:	f003 fc1a 	bl	801576c <iprintf>
  }
}
 8011f38:	bf00      	nop
 8011f3a:	3720      	adds	r7, #32
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	08017eb0 	.word	0x08017eb0
 8011f44:	20000c50 	.word	0x20000c50
 8011f48:	08017b5c 	.word	0x08017b5c
 8011f4c:	08017ed4 	.word	0x08017ed4
 8011f50:	08017ee8 	.word	0x08017ee8
 8011f54:	20000225 	.word	0x20000225
 8011f58:	08017d8c 	.word	0x08017d8c
 8011f5c:	08017da0 	.word	0x08017da0
 8011f60:	08017f08 	.word	0x08017f08
 8011f64:	08017dc8 	.word	0x08017dc8

08011f68 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b08a      	sub	sp, #40	@ 0x28
 8011f6c:	af02      	add	r7, sp, #8
 8011f6e:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	4a43      	ldr	r2, [pc, #268]	@ (8012080 <Press_Sensor_Handler+0x118>)
 8011f74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f78:	4842      	ldr	r0, [pc, #264]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8011f7a:	f003 fc67 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 8011f7e:	4941      	ldr	r1, [pc, #260]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8011f80:	4841      	ldr	r0, [pc, #260]	@ (8012088 <Press_Sensor_Handler+0x120>)
 8011f82:	f003 fbf3 	bl	801576c <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 8011f86:	f107 0318 	add.w	r3, r7, #24
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	2102      	movs	r1, #2
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7f8 ffd2 	bl	800af38 <IKS4A1_ENV_SENSOR_GetValue>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d007      	beq.n	8011faa <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4a3b      	ldr	r2, [pc, #236]	@ (801208c <Press_Sensor_Handler+0x124>)
 8011f9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fa2:	4838      	ldr	r0, [pc, #224]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8011fa4:	f003 fc52 	bl	801584c <sniprintf>
 8011fa8:	e014      	b.n	8011fd4 <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 8011faa:	edd7 7a06 	vldr	s15, [r7, #24]
 8011fae:	f107 030c 	add.w	r3, r7, #12
 8011fb2:	2102      	movs	r1, #2
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8011fba:	f7ff fc6d 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8011fc2:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8011fc4:	9101      	str	r1, [sp, #4]
 8011fc6:	9200      	str	r2, [sp, #0]
 8011fc8:	4a31      	ldr	r2, [pc, #196]	@ (8012090 <Press_Sensor_Handler+0x128>)
 8011fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fce:	482d      	ldr	r0, [pc, #180]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8011fd0:	f003 fc3c 	bl	801584c <sniprintf>
  }

  printf("%s", dataOut);
 8011fd4:	492b      	ldr	r1, [pc, #172]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8011fd6:	482c      	ldr	r0, [pc, #176]	@ (8012088 <Press_Sensor_Handler+0x120>)
 8011fd8:	f003 fbc8 	bl	801576c <iprintf>

  if (verbose == 1)
 8011fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8012094 <Press_Sensor_Handler+0x12c>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d148      	bne.n	8012076 <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011fe4:	f107 030b 	add.w	r3, r7, #11
 8011fe8:	4619      	mov	r1, r3
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f7f8 ff38 	bl	800ae60 <IKS4A1_ENV_SENSOR_ReadID>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d007      	beq.n	8012006 <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4a27      	ldr	r2, [pc, #156]	@ (8012098 <Press_Sensor_Handler+0x130>)
 8011ffa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ffe:	4821      	ldr	r0, [pc, #132]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8012000:	f003 fc24 	bl	801584c <sniprintf>
 8012004:	e008      	b.n	8012018 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	7afa      	ldrb	r2, [r7, #11]
 801200a:	9200      	str	r2, [sp, #0]
 801200c:	4a23      	ldr	r2, [pc, #140]	@ (801209c <Press_Sensor_Handler+0x134>)
 801200e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012012:	481c      	ldr	r0, [pc, #112]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8012014:	f003 fc1a 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8012018:	491a      	ldr	r1, [pc, #104]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 801201a:	481b      	ldr	r0, [pc, #108]	@ (8012088 <Press_Sensor_Handler+0x120>)
 801201c:	f003 fba6 	bl	801576c <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 8012020:	f107 031c 	add.w	r3, r7, #28
 8012024:	461a      	mov	r2, r3
 8012026:	2102      	movs	r1, #2
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7f8 ff43 	bl	800aeb4 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d007      	beq.n	8012044 <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	4a1a      	ldr	r2, [pc, #104]	@ (80120a0 <Press_Sensor_Handler+0x138>)
 8012038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801203c:	4811      	ldr	r0, [pc, #68]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 801203e:	f003 fc05 	bl	801584c <sniprintf>
 8012042:	e014      	b.n	801206e <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8012044:	edd7 7a07 	vldr	s15, [r7, #28]
 8012048:	f107 030c 	add.w	r3, r7, #12
 801204c:	2103      	movs	r1, #3
 801204e:	4618      	mov	r0, r3
 8012050:	eeb0 0a67 	vmov.f32	s0, s15
 8012054:	f7ff fc20 	bl	8011898 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 801205c:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 801205e:	9101      	str	r1, [sp, #4]
 8012060:	9200      	str	r2, [sp, #0]
 8012062:	4a10      	ldr	r2, [pc, #64]	@ (80120a4 <Press_Sensor_Handler+0x13c>)
 8012064:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012068:	4806      	ldr	r0, [pc, #24]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 801206a:	f003 fbef 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 801206e:	4905      	ldr	r1, [pc, #20]	@ (8012084 <Press_Sensor_Handler+0x11c>)
 8012070:	4805      	ldr	r0, [pc, #20]	@ (8012088 <Press_Sensor_Handler+0x120>)
 8012072:	f003 fb7b 	bl	801576c <iprintf>
  }
}
 8012076:	bf00      	nop
 8012078:	3720      	adds	r7, #32
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	08017eb0 	.word	0x08017eb0
 8012084:	20000c50 	.word	0x20000c50
 8012088:	08017b5c 	.word	0x08017b5c
 801208c:	08017f1c 	.word	0x08017f1c
 8012090:	08017f34 	.word	0x08017f34
 8012094:	20000225 	.word	0x20000225
 8012098:	08017d8c 	.word	0x08017d8c
 801209c:	08017da0 	.word	0x08017da0
 80120a0:	08017f08 	.word	0x08017f08
 80120a4:	08017dc8 	.word	0x08017dc8

080120a8 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b08a      	sub	sp, #40	@ 0x28
 80120ac:	af02      	add	r7, sp, #8
 80120ae:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	4a43      	ldr	r2, [pc, #268]	@ (80121c0 <Hum_Sensor_Handler+0x118>)
 80120b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80120b8:	4842      	ldr	r0, [pc, #264]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 80120ba:	f003 fbc7 	bl	801584c <sniprintf>
  printf("%s", dataOut);
 80120be:	4941      	ldr	r1, [pc, #260]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 80120c0:	4841      	ldr	r0, [pc, #260]	@ (80121c8 <Hum_Sensor_Handler+0x120>)
 80120c2:	f003 fb53 	bl	801576c <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 80120c6:	f107 0318 	add.w	r3, r7, #24
 80120ca:	461a      	mov	r2, r3
 80120cc:	2104      	movs	r1, #4
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7f8 ff32 	bl	800af38 <IKS4A1_ENV_SENSOR_GetValue>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d007      	beq.n	80120ea <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	4a3b      	ldr	r2, [pc, #236]	@ (80121cc <Hum_Sensor_Handler+0x124>)
 80120de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80120e2:	4838      	ldr	r0, [pc, #224]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 80120e4:	f003 fbb2 	bl	801584c <sniprintf>
 80120e8:	e014      	b.n	8012114 <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 80120ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80120ee:	f107 030c 	add.w	r3, r7, #12
 80120f2:	2102      	movs	r1, #2
 80120f4:	4618      	mov	r0, r3
 80120f6:	eeb0 0a67 	vmov.f32	s0, s15
 80120fa:	f7ff fbcd 	bl	8011898 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8012102:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8012104:	9101      	str	r1, [sp, #4]
 8012106:	9200      	str	r2, [sp, #0]
 8012108:	4a31      	ldr	r2, [pc, #196]	@ (80121d0 <Hum_Sensor_Handler+0x128>)
 801210a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801210e:	482d      	ldr	r0, [pc, #180]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 8012110:	f003 fb9c 	bl	801584c <sniprintf>
  }

  printf("%s", dataOut);
 8012114:	492b      	ldr	r1, [pc, #172]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 8012116:	482c      	ldr	r0, [pc, #176]	@ (80121c8 <Hum_Sensor_Handler+0x120>)
 8012118:	f003 fb28 	bl	801576c <iprintf>

  if (verbose == 1)
 801211c:	4b2d      	ldr	r3, [pc, #180]	@ (80121d4 <Hum_Sensor_Handler+0x12c>)
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d148      	bne.n	80121b6 <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8012124:	f107 030b 	add.w	r3, r7, #11
 8012128:	4619      	mov	r1, r3
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7f8 fe98 	bl	800ae60 <IKS4A1_ENV_SENSOR_ReadID>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d007      	beq.n	8012146 <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4a27      	ldr	r2, [pc, #156]	@ (80121d8 <Hum_Sensor_Handler+0x130>)
 801213a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801213e:	4821      	ldr	r0, [pc, #132]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 8012140:	f003 fb84 	bl	801584c <sniprintf>
 8012144:	e008      	b.n	8012158 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	7afa      	ldrb	r2, [r7, #11]
 801214a:	9200      	str	r2, [sp, #0]
 801214c:	4a23      	ldr	r2, [pc, #140]	@ (80121dc <Hum_Sensor_Handler+0x134>)
 801214e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012152:	481c      	ldr	r0, [pc, #112]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 8012154:	f003 fb7a 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 8012158:	491a      	ldr	r1, [pc, #104]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 801215a:	481b      	ldr	r0, [pc, #108]	@ (80121c8 <Hum_Sensor_Handler+0x120>)
 801215c:	f003 fb06 	bl	801576c <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 8012160:	f107 031c 	add.w	r3, r7, #28
 8012164:	461a      	mov	r2, r3
 8012166:	2104      	movs	r1, #4
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7f8 fea3 	bl	800aeb4 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d007      	beq.n	8012184 <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	4a1a      	ldr	r2, [pc, #104]	@ (80121e0 <Hum_Sensor_Handler+0x138>)
 8012178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801217c:	4811      	ldr	r0, [pc, #68]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 801217e:	f003 fb65 	bl	801584c <sniprintf>
 8012182:	e014      	b.n	80121ae <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8012184:	edd7 7a07 	vldr	s15, [r7, #28]
 8012188:	f107 030c 	add.w	r3, r7, #12
 801218c:	2103      	movs	r1, #3
 801218e:	4618      	mov	r0, r3
 8012190:	eeb0 0a67 	vmov.f32	s0, s15
 8012194:	f7ff fb80 	bl	8011898 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 801219c:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 801219e:	9101      	str	r1, [sp, #4]
 80121a0:	9200      	str	r2, [sp, #0]
 80121a2:	4a10      	ldr	r2, [pc, #64]	@ (80121e4 <Hum_Sensor_Handler+0x13c>)
 80121a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80121a8:	4806      	ldr	r0, [pc, #24]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 80121aa:	f003 fb4f 	bl	801584c <sniprintf>
    }

    printf("%s", dataOut);
 80121ae:	4905      	ldr	r1, [pc, #20]	@ (80121c4 <Hum_Sensor_Handler+0x11c>)
 80121b0:	4805      	ldr	r0, [pc, #20]	@ (80121c8 <Hum_Sensor_Handler+0x120>)
 80121b2:	f003 fadb 	bl	801576c <iprintf>
  }
}
 80121b6:	bf00      	nop
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	08017eb0 	.word	0x08017eb0
 80121c4:	20000c50 	.word	0x20000c50
 80121c8:	08017b5c 	.word	0x08017b5c
 80121cc:	08017f50 	.word	0x08017f50
 80121d0:	08017f64 	.word	0x08017f64
 80121d4:	20000225 	.word	0x20000225
 80121d8:	08017d8c 	.word	0x08017d8c
 80121dc:	08017da0 	.word	0x08017da0
 80121e0:	08017f08 	.word	0x08017f08
 80121e4:	08017dc8 	.word	0x08017dc8

080121e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	4603      	mov	r3, r0
 80121f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80121f2:	79fb      	ldrb	r3, [r7, #7]
 80121f4:	4a08      	ldr	r2, [pc, #32]	@ (8012218 <disk_status+0x30>)
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	4413      	add	r3, r2
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	79fa      	ldrb	r2, [r7, #7]
 8012200:	4905      	ldr	r1, [pc, #20]	@ (8012218 <disk_status+0x30>)
 8012202:	440a      	add	r2, r1
 8012204:	7a12      	ldrb	r2, [r2, #8]
 8012206:	4610      	mov	r0, r2
 8012208:	4798      	blx	r3
 801220a:	4603      	mov	r3, r0
 801220c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3710      	adds	r7, #16
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	20000d7c 	.word	0x20000d7c

0801221c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	4603      	mov	r3, r0
 8012224:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801222a:	79fb      	ldrb	r3, [r7, #7]
 801222c:	4a0e      	ldr	r2, [pc, #56]	@ (8012268 <disk_initialize+0x4c>)
 801222e:	5cd3      	ldrb	r3, [r2, r3]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d114      	bne.n	801225e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012234:	79fb      	ldrb	r3, [r7, #7]
 8012236:	4a0c      	ldr	r2, [pc, #48]	@ (8012268 <disk_initialize+0x4c>)
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	4413      	add	r3, r2
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	79fa      	ldrb	r2, [r7, #7]
 8012242:	4909      	ldr	r1, [pc, #36]	@ (8012268 <disk_initialize+0x4c>)
 8012244:	440a      	add	r2, r1
 8012246:	7a12      	ldrb	r2, [r2, #8]
 8012248:	4610      	mov	r0, r2
 801224a:	4798      	blx	r3
 801224c:	4603      	mov	r3, r0
 801224e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d103      	bne.n	801225e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8012256:	79fb      	ldrb	r3, [r7, #7]
 8012258:	4a03      	ldr	r2, [pc, #12]	@ (8012268 <disk_initialize+0x4c>)
 801225a:	2101      	movs	r1, #1
 801225c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3710      	adds	r7, #16
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	20000d7c 	.word	0x20000d7c

0801226c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801226c:	b590      	push	{r4, r7, lr}
 801226e:	b087      	sub	sp, #28
 8012270:	af00      	add	r7, sp, #0
 8012272:	60b9      	str	r1, [r7, #8]
 8012274:	607a      	str	r2, [r7, #4]
 8012276:	603b      	str	r3, [r7, #0]
 8012278:	4603      	mov	r3, r0
 801227a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801227c:	7bfb      	ldrb	r3, [r7, #15]
 801227e:	4a0a      	ldr	r2, [pc, #40]	@ (80122a8 <disk_read+0x3c>)
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	4413      	add	r3, r2
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	689c      	ldr	r4, [r3, #8]
 8012288:	7bfb      	ldrb	r3, [r7, #15]
 801228a:	4a07      	ldr	r2, [pc, #28]	@ (80122a8 <disk_read+0x3c>)
 801228c:	4413      	add	r3, r2
 801228e:	7a18      	ldrb	r0, [r3, #8]
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	68b9      	ldr	r1, [r7, #8]
 8012296:	47a0      	blx	r4
 8012298:	4603      	mov	r3, r0
 801229a:	75fb      	strb	r3, [r7, #23]
  return res;
 801229c:	7dfb      	ldrb	r3, [r7, #23]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	371c      	adds	r7, #28
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd90      	pop	{r4, r7, pc}
 80122a6:	bf00      	nop
 80122a8:	20000d7c 	.word	0x20000d7c

080122ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80122ac:	b590      	push	{r4, r7, lr}
 80122ae:	b087      	sub	sp, #28
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60b9      	str	r1, [r7, #8]
 80122b4:	607a      	str	r2, [r7, #4]
 80122b6:	603b      	str	r3, [r7, #0]
 80122b8:	4603      	mov	r3, r0
 80122ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80122bc:	7bfb      	ldrb	r3, [r7, #15]
 80122be:	4a0a      	ldr	r2, [pc, #40]	@ (80122e8 <disk_write+0x3c>)
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	4413      	add	r3, r2
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	68dc      	ldr	r4, [r3, #12]
 80122c8:	7bfb      	ldrb	r3, [r7, #15]
 80122ca:	4a07      	ldr	r2, [pc, #28]	@ (80122e8 <disk_write+0x3c>)
 80122cc:	4413      	add	r3, r2
 80122ce:	7a18      	ldrb	r0, [r3, #8]
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	68b9      	ldr	r1, [r7, #8]
 80122d6:	47a0      	blx	r4
 80122d8:	4603      	mov	r3, r0
 80122da:	75fb      	strb	r3, [r7, #23]
  return res;
 80122dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	371c      	adds	r7, #28
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd90      	pop	{r4, r7, pc}
 80122e6:	bf00      	nop
 80122e8:	20000d7c 	.word	0x20000d7c

080122ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	4603      	mov	r3, r0
 80122f4:	603a      	str	r2, [r7, #0]
 80122f6:	71fb      	strb	r3, [r7, #7]
 80122f8:	460b      	mov	r3, r1
 80122fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80122fc:	79fb      	ldrb	r3, [r7, #7]
 80122fe:	4a09      	ldr	r2, [pc, #36]	@ (8012324 <disk_ioctl+0x38>)
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	4413      	add	r3, r2
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	79fa      	ldrb	r2, [r7, #7]
 801230a:	4906      	ldr	r1, [pc, #24]	@ (8012324 <disk_ioctl+0x38>)
 801230c:	440a      	add	r2, r1
 801230e:	7a10      	ldrb	r0, [r2, #8]
 8012310:	79b9      	ldrb	r1, [r7, #6]
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	4798      	blx	r3
 8012316:	4603      	mov	r3, r0
 8012318:	73fb      	strb	r3, [r7, #15]
  return res;
 801231a:	7bfb      	ldrb	r3, [r7, #15]
}
 801231c:	4618      	mov	r0, r3
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	20000d7c 	.word	0x20000d7c

08012328 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	3301      	adds	r3, #1
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012338:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801233c:	021b      	lsls	r3, r3, #8
 801233e:	b21a      	sxth	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	b21b      	sxth	r3, r3
 8012346:	4313      	orrs	r3, r2
 8012348:	b21b      	sxth	r3, r3
 801234a:	81fb      	strh	r3, [r7, #14]
	return rv;
 801234c:	89fb      	ldrh	r3, [r7, #14]
}
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr

0801235a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801235a:	b480      	push	{r7}
 801235c:	b085      	sub	sp, #20
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	3303      	adds	r3, #3
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	021b      	lsls	r3, r3, #8
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	3202      	adds	r2, #2
 8012372:	7812      	ldrb	r2, [r2, #0]
 8012374:	4313      	orrs	r3, r2
 8012376:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	021b      	lsls	r3, r3, #8
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	3201      	adds	r2, #1
 8012380:	7812      	ldrb	r2, [r2, #0]
 8012382:	4313      	orrs	r3, r2
 8012384:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	021b      	lsls	r3, r3, #8
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	7812      	ldrb	r2, [r2, #0]
 801238e:	4313      	orrs	r3, r2
 8012390:	60fb      	str	r3, [r7, #12]
	return rv;
 8012392:	68fb      	ldr	r3, [r7, #12]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3714      	adds	r7, #20
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	460b      	mov	r3, r1
 80123aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	1c5a      	adds	r2, r3, #1
 80123b0:	607a      	str	r2, [r7, #4]
 80123b2:	887a      	ldrh	r2, [r7, #2]
 80123b4:	b2d2      	uxtb	r2, r2
 80123b6:	701a      	strb	r2, [r3, #0]
 80123b8:	887b      	ldrh	r3, [r7, #2]
 80123ba:	0a1b      	lsrs	r3, r3, #8
 80123bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	1c5a      	adds	r2, r3, #1
 80123c2:	607a      	str	r2, [r7, #4]
 80123c4:	887a      	ldrh	r2, [r7, #2]
 80123c6:	b2d2      	uxtb	r2, r2
 80123c8:	701a      	strb	r2, [r3, #0]
}
 80123ca:	bf00      	nop
 80123cc:	370c      	adds	r7, #12
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr

080123d6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80123d6:	b480      	push	{r7}
 80123d8:	b083      	sub	sp, #12
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
 80123de:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	1c5a      	adds	r2, r3, #1
 80123e4:	607a      	str	r2, [r7, #4]
 80123e6:	683a      	ldr	r2, [r7, #0]
 80123e8:	b2d2      	uxtb	r2, r2
 80123ea:	701a      	strb	r2, [r3, #0]
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	0a1b      	lsrs	r3, r3, #8
 80123f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	1c5a      	adds	r2, r3, #1
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	b2d2      	uxtb	r2, r2
 80123fc:	701a      	strb	r2, [r3, #0]
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	0a1b      	lsrs	r3, r3, #8
 8012402:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	1c5a      	adds	r2, r3, #1
 8012408:	607a      	str	r2, [r7, #4]
 801240a:	683a      	ldr	r2, [r7, #0]
 801240c:	b2d2      	uxtb	r2, r2
 801240e:	701a      	strb	r2, [r3, #0]
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	0a1b      	lsrs	r3, r3, #8
 8012414:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	1c5a      	adds	r2, r3, #1
 801241a:	607a      	str	r2, [r7, #4]
 801241c:	683a      	ldr	r2, [r7, #0]
 801241e:	b2d2      	uxtb	r2, r2
 8012420:	701a      	strb	r2, [r3, #0]
}
 8012422:	bf00      	nop
 8012424:	370c      	adds	r7, #12
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801242e:	b480      	push	{r7}
 8012430:	b087      	sub	sp, #28
 8012432:	af00      	add	r7, sp, #0
 8012434:	60f8      	str	r0, [r7, #12]
 8012436:	60b9      	str	r1, [r7, #8]
 8012438:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d00d      	beq.n	8012464 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012448:	693a      	ldr	r2, [r7, #16]
 801244a:	1c53      	adds	r3, r2, #1
 801244c:	613b      	str	r3, [r7, #16]
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	1c59      	adds	r1, r3, #1
 8012452:	6179      	str	r1, [r7, #20]
 8012454:	7812      	ldrb	r2, [r2, #0]
 8012456:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	3b01      	subs	r3, #1
 801245c:	607b      	str	r3, [r7, #4]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d1f1      	bne.n	8012448 <mem_cpy+0x1a>
	}
}
 8012464:	bf00      	nop
 8012466:	371c      	adds	r7, #28
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr

08012470 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012470:	b480      	push	{r7}
 8012472:	b087      	sub	sp, #28
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	617a      	str	r2, [r7, #20]
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	b2d2      	uxtb	r2, r2
 801248a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	3b01      	subs	r3, #1
 8012490:	607b      	str	r3, [r7, #4]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1f3      	bne.n	8012480 <mem_set+0x10>
}
 8012498:	bf00      	nop
 801249a:	bf00      	nop
 801249c:	371c      	adds	r7, #28
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr

080124a6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80124a6:	b480      	push	{r7}
 80124a8:	b089      	sub	sp, #36	@ 0x24
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	60f8      	str	r0, [r7, #12]
 80124ae:	60b9      	str	r1, [r7, #8]
 80124b0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	61fb      	str	r3, [r7, #28]
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80124ba:	2300      	movs	r3, #0
 80124bc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80124be:	69fb      	ldr	r3, [r7, #28]
 80124c0:	1c5a      	adds	r2, r3, #1
 80124c2:	61fa      	str	r2, [r7, #28]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	4619      	mov	r1, r3
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	1c5a      	adds	r2, r3, #1
 80124cc:	61ba      	str	r2, [r7, #24]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	1acb      	subs	r3, r1, r3
 80124d2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	3b01      	subs	r3, #1
 80124d8:	607b      	str	r3, [r7, #4]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <mem_cmp+0x40>
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d0eb      	beq.n	80124be <mem_cmp+0x18>

	return r;
 80124e6:	697b      	ldr	r3, [r7, #20]
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3724      	adds	r7, #36	@ 0x24
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80124f4:	b480      	push	{r7}
 80124f6:	b083      	sub	sp, #12
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80124fe:	e002      	b.n	8012506 <chk_chr+0x12>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	3301      	adds	r3, #1
 8012504:	607b      	str	r3, [r7, #4]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d005      	beq.n	801251a <chk_chr+0x26>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	461a      	mov	r2, r3
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	4293      	cmp	r3, r2
 8012518:	d1f2      	bne.n	8012500 <chk_chr+0xc>
	return *str;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	781b      	ldrb	r3, [r3, #0]
}
 801251e:	4618      	mov	r0, r3
 8012520:	370c      	adds	r7, #12
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
	...

0801252c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801252c:	b480      	push	{r7}
 801252e:	b085      	sub	sp, #20
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012536:	2300      	movs	r3, #0
 8012538:	60bb      	str	r3, [r7, #8]
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	60fb      	str	r3, [r7, #12]
 801253e:	e029      	b.n	8012594 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012540:	4a27      	ldr	r2, [pc, #156]	@ (80125e0 <chk_lock+0xb4>)
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	011b      	lsls	r3, r3, #4
 8012546:	4413      	add	r3, r2
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d01d      	beq.n	801258a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801254e:	4a24      	ldr	r2, [pc, #144]	@ (80125e0 <chk_lock+0xb4>)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	011b      	lsls	r3, r3, #4
 8012554:	4413      	add	r3, r2
 8012556:	681a      	ldr	r2, [r3, #0]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	429a      	cmp	r2, r3
 801255e:	d116      	bne.n	801258e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012560:	4a1f      	ldr	r2, [pc, #124]	@ (80125e0 <chk_lock+0xb4>)
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	011b      	lsls	r3, r3, #4
 8012566:	4413      	add	r3, r2
 8012568:	3304      	adds	r3, #4
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012570:	429a      	cmp	r2, r3
 8012572:	d10c      	bne.n	801258e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012574:	4a1a      	ldr	r2, [pc, #104]	@ (80125e0 <chk_lock+0xb4>)
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	011b      	lsls	r3, r3, #4
 801257a:	4413      	add	r3, r2
 801257c:	3308      	adds	r3, #8
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012584:	429a      	cmp	r2, r3
 8012586:	d102      	bne.n	801258e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012588:	e007      	b.n	801259a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801258a:	2301      	movs	r3, #1
 801258c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	3301      	adds	r3, #1
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2b01      	cmp	r3, #1
 8012598:	d9d2      	bls.n	8012540 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2b02      	cmp	r3, #2
 801259e:	d109      	bne.n	80125b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d102      	bne.n	80125ac <chk_lock+0x80>
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d101      	bne.n	80125b0 <chk_lock+0x84>
 80125ac:	2300      	movs	r3, #0
 80125ae:	e010      	b.n	80125d2 <chk_lock+0xa6>
 80125b0:	2312      	movs	r3, #18
 80125b2:	e00e      	b.n	80125d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d108      	bne.n	80125cc <chk_lock+0xa0>
 80125ba:	4a09      	ldr	r2, [pc, #36]	@ (80125e0 <chk_lock+0xb4>)
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	011b      	lsls	r3, r3, #4
 80125c0:	4413      	add	r3, r2
 80125c2:	330c      	adds	r3, #12
 80125c4:	881b      	ldrh	r3, [r3, #0]
 80125c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125ca:	d101      	bne.n	80125d0 <chk_lock+0xa4>
 80125cc:	2310      	movs	r3, #16
 80125ce:	e000      	b.n	80125d2 <chk_lock+0xa6>
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3714      	adds	r7, #20
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	20000d5c 	.word	0x20000d5c

080125e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80125ea:	2300      	movs	r3, #0
 80125ec:	607b      	str	r3, [r7, #4]
 80125ee:	e002      	b.n	80125f6 <enq_lock+0x12>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	3301      	adds	r3, #1
 80125f4:	607b      	str	r3, [r7, #4]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2b01      	cmp	r3, #1
 80125fa:	d806      	bhi.n	801260a <enq_lock+0x26>
 80125fc:	4a09      	ldr	r2, [pc, #36]	@ (8012624 <enq_lock+0x40>)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	011b      	lsls	r3, r3, #4
 8012602:	4413      	add	r3, r2
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1f2      	bne.n	80125f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b02      	cmp	r3, #2
 801260e:	bf14      	ite	ne
 8012610:	2301      	movne	r3, #1
 8012612:	2300      	moveq	r3, #0
 8012614:	b2db      	uxtb	r3, r3
}
 8012616:	4618      	mov	r0, r3
 8012618:	370c      	adds	r7, #12
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	20000d5c 	.word	0x20000d5c

08012628 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012628:	b480      	push	{r7}
 801262a:	b085      	sub	sp, #20
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012632:	2300      	movs	r3, #0
 8012634:	60fb      	str	r3, [r7, #12]
 8012636:	e01f      	b.n	8012678 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012638:	4a41      	ldr	r2, [pc, #260]	@ (8012740 <inc_lock+0x118>)
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	011b      	lsls	r3, r3, #4
 801263e:	4413      	add	r3, r2
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	429a      	cmp	r2, r3
 8012648:	d113      	bne.n	8012672 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801264a:	4a3d      	ldr	r2, [pc, #244]	@ (8012740 <inc_lock+0x118>)
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	011b      	lsls	r3, r3, #4
 8012650:	4413      	add	r3, r2
 8012652:	3304      	adds	r3, #4
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801265a:	429a      	cmp	r2, r3
 801265c:	d109      	bne.n	8012672 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801265e:	4a38      	ldr	r2, [pc, #224]	@ (8012740 <inc_lock+0x118>)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	011b      	lsls	r3, r3, #4
 8012664:	4413      	add	r3, r2
 8012666:	3308      	adds	r3, #8
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801266e:	429a      	cmp	r2, r3
 8012670:	d006      	beq.n	8012680 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	3301      	adds	r3, #1
 8012676:	60fb      	str	r3, [r7, #12]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	2b01      	cmp	r3, #1
 801267c:	d9dc      	bls.n	8012638 <inc_lock+0x10>
 801267e:	e000      	b.n	8012682 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012680:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	2b02      	cmp	r3, #2
 8012686:	d132      	bne.n	80126ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	e002      	b.n	8012694 <inc_lock+0x6c>
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3301      	adds	r3, #1
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d806      	bhi.n	80126a8 <inc_lock+0x80>
 801269a:	4a29      	ldr	r2, [pc, #164]	@ (8012740 <inc_lock+0x118>)
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	011b      	lsls	r3, r3, #4
 80126a0:	4413      	add	r3, r2
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1f2      	bne.n	801268e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2b02      	cmp	r3, #2
 80126ac:	d101      	bne.n	80126b2 <inc_lock+0x8a>
 80126ae:	2300      	movs	r3, #0
 80126b0:	e040      	b.n	8012734 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	4922      	ldr	r1, [pc, #136]	@ (8012740 <inc_lock+0x118>)
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	011b      	lsls	r3, r3, #4
 80126bc:	440b      	add	r3, r1
 80126be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	689a      	ldr	r2, [r3, #8]
 80126c4:	491e      	ldr	r1, [pc, #120]	@ (8012740 <inc_lock+0x118>)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	011b      	lsls	r3, r3, #4
 80126ca:	440b      	add	r3, r1
 80126cc:	3304      	adds	r3, #4
 80126ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	695a      	ldr	r2, [r3, #20]
 80126d4:	491a      	ldr	r1, [pc, #104]	@ (8012740 <inc_lock+0x118>)
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	011b      	lsls	r3, r3, #4
 80126da:	440b      	add	r3, r1
 80126dc:	3308      	adds	r3, #8
 80126de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80126e0:	4a17      	ldr	r2, [pc, #92]	@ (8012740 <inc_lock+0x118>)
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	011b      	lsls	r3, r3, #4
 80126e6:	4413      	add	r3, r2
 80126e8:	330c      	adds	r3, #12
 80126ea:	2200      	movs	r2, #0
 80126ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d009      	beq.n	8012708 <inc_lock+0xe0>
 80126f4:	4a12      	ldr	r2, [pc, #72]	@ (8012740 <inc_lock+0x118>)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	011b      	lsls	r3, r3, #4
 80126fa:	4413      	add	r3, r2
 80126fc:	330c      	adds	r3, #12
 80126fe:	881b      	ldrh	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d001      	beq.n	8012708 <inc_lock+0xe0>
 8012704:	2300      	movs	r3, #0
 8012706:	e015      	b.n	8012734 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d108      	bne.n	8012720 <inc_lock+0xf8>
 801270e:	4a0c      	ldr	r2, [pc, #48]	@ (8012740 <inc_lock+0x118>)
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	011b      	lsls	r3, r3, #4
 8012714:	4413      	add	r3, r2
 8012716:	330c      	adds	r3, #12
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	3301      	adds	r3, #1
 801271c:	b29a      	uxth	r2, r3
 801271e:	e001      	b.n	8012724 <inc_lock+0xfc>
 8012720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012724:	4906      	ldr	r1, [pc, #24]	@ (8012740 <inc_lock+0x118>)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	011b      	lsls	r3, r3, #4
 801272a:	440b      	add	r3, r1
 801272c:	330c      	adds	r3, #12
 801272e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	3301      	adds	r3, #1
}
 8012734:	4618      	mov	r0, r3
 8012736:	3714      	adds	r7, #20
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr
 8012740:	20000d5c 	.word	0x20000d5c

08012744 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012744:	b480      	push	{r7}
 8012746:	b085      	sub	sp, #20
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	3b01      	subs	r3, #1
 8012750:	607b      	str	r3, [r7, #4]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d825      	bhi.n	80127a4 <dec_lock+0x60>
		n = Files[i].ctr;
 8012758:	4a17      	ldr	r2, [pc, #92]	@ (80127b8 <dec_lock+0x74>)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	011b      	lsls	r3, r3, #4
 801275e:	4413      	add	r3, r2
 8012760:	330c      	adds	r3, #12
 8012762:	881b      	ldrh	r3, [r3, #0]
 8012764:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012766:	89fb      	ldrh	r3, [r7, #14]
 8012768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801276c:	d101      	bne.n	8012772 <dec_lock+0x2e>
 801276e:	2300      	movs	r3, #0
 8012770:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012772:	89fb      	ldrh	r3, [r7, #14]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <dec_lock+0x3a>
 8012778:	89fb      	ldrh	r3, [r7, #14]
 801277a:	3b01      	subs	r3, #1
 801277c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801277e:	4a0e      	ldr	r2, [pc, #56]	@ (80127b8 <dec_lock+0x74>)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	011b      	lsls	r3, r3, #4
 8012784:	4413      	add	r3, r2
 8012786:	330c      	adds	r3, #12
 8012788:	89fa      	ldrh	r2, [r7, #14]
 801278a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801278c:	89fb      	ldrh	r3, [r7, #14]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d105      	bne.n	801279e <dec_lock+0x5a>
 8012792:	4a09      	ldr	r2, [pc, #36]	@ (80127b8 <dec_lock+0x74>)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	011b      	lsls	r3, r3, #4
 8012798:	4413      	add	r3, r2
 801279a:	2200      	movs	r2, #0
 801279c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801279e:	2300      	movs	r3, #0
 80127a0:	737b      	strb	r3, [r7, #13]
 80127a2:	e001      	b.n	80127a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80127a4:	2302      	movs	r3, #2
 80127a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80127a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3714      	adds	r7, #20
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop
 80127b8:	20000d5c 	.word	0x20000d5c

080127bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80127bc:	b480      	push	{r7}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80127c4:	2300      	movs	r3, #0
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	e010      	b.n	80127ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80127ca:	4a0d      	ldr	r2, [pc, #52]	@ (8012800 <clear_lock+0x44>)
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	011b      	lsls	r3, r3, #4
 80127d0:	4413      	add	r3, r2
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d105      	bne.n	80127e6 <clear_lock+0x2a>
 80127da:	4a09      	ldr	r2, [pc, #36]	@ (8012800 <clear_lock+0x44>)
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	011b      	lsls	r3, r3, #4
 80127e0:	4413      	add	r3, r2
 80127e2:	2200      	movs	r2, #0
 80127e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	3301      	adds	r3, #1
 80127ea:	60fb      	str	r3, [r7, #12]
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2b01      	cmp	r3, #1
 80127f0:	d9eb      	bls.n	80127ca <clear_lock+0xe>
	}
}
 80127f2:	bf00      	nop
 80127f4:	bf00      	nop
 80127f6:	3714      	adds	r7, #20
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr
 8012800:	20000d5c 	.word	0x20000d5c

08012804 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b086      	sub	sp, #24
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801280c:	2300      	movs	r3, #0
 801280e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	78db      	ldrb	r3, [r3, #3]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d034      	beq.n	8012882 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801281c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	7858      	ldrb	r0, [r3, #1]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012828:	2301      	movs	r3, #1
 801282a:	697a      	ldr	r2, [r7, #20]
 801282c:	f7ff fd3e 	bl	80122ac <disk_write>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d002      	beq.n	801283c <sync_window+0x38>
			res = FR_DISK_ERR;
 8012836:	2301      	movs	r3, #1
 8012838:	73fb      	strb	r3, [r7, #15]
 801283a:	e022      	b.n	8012882 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012846:	697a      	ldr	r2, [r7, #20]
 8012848:	1ad2      	subs	r2, r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	69db      	ldr	r3, [r3, #28]
 801284e:	429a      	cmp	r2, r3
 8012850:	d217      	bcs.n	8012882 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	789b      	ldrb	r3, [r3, #2]
 8012856:	613b      	str	r3, [r7, #16]
 8012858:	e010      	b.n	801287c <sync_window+0x78>
					wsect += fs->fsize;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	69db      	ldr	r3, [r3, #28]
 801285e:	697a      	ldr	r2, [r7, #20]
 8012860:	4413      	add	r3, r2
 8012862:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	7858      	ldrb	r0, [r3, #1]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801286e:	2301      	movs	r3, #1
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	f7ff fd1b 	bl	80122ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	3b01      	subs	r3, #1
 801287a:	613b      	str	r3, [r7, #16]
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	2b01      	cmp	r3, #1
 8012880:	d8eb      	bhi.n	801285a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012882:	7bfb      	ldrb	r3, [r7, #15]
}
 8012884:	4618      	mov	r0, r3
 8012886:	3718      	adds	r7, #24
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012896:	2300      	movs	r3, #0
 8012898:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801289e:	683a      	ldr	r2, [r7, #0]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d01b      	beq.n	80128dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f7ff ffad 	bl	8012804 <sync_window>
 80128aa:	4603      	mov	r3, r0
 80128ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80128ae:	7bfb      	ldrb	r3, [r7, #15]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d113      	bne.n	80128dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	7858      	ldrb	r0, [r3, #1]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80128be:	2301      	movs	r3, #1
 80128c0:	683a      	ldr	r2, [r7, #0]
 80128c2:	f7ff fcd3 	bl	801226c <disk_read>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d004      	beq.n	80128d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80128cc:	f04f 33ff 	mov.w	r3, #4294967295
 80128d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128d2:	2301      	movs	r3, #1
 80128d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	683a      	ldr	r2, [r7, #0]
 80128da:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80128dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
	...

080128e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f7ff ff87 	bl	8012804 <sync_window>
 80128f6:	4603      	mov	r3, r0
 80128f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80128fa:	7bfb      	ldrb	r3, [r7, #15]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d158      	bne.n	80129b2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b03      	cmp	r3, #3
 8012906:	d148      	bne.n	801299a <sync_fs+0xb2>
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	791b      	ldrb	r3, [r3, #4]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d144      	bne.n	801299a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	3334      	adds	r3, #52	@ 0x34
 8012914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012918:	2100      	movs	r1, #0
 801291a:	4618      	mov	r0, r3
 801291c:	f7ff fda8 	bl	8012470 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	3334      	adds	r3, #52	@ 0x34
 8012924:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012928:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801292c:	4618      	mov	r0, r3
 801292e:	f7ff fd37 	bl	80123a0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3334      	adds	r3, #52	@ 0x34
 8012936:	4921      	ldr	r1, [pc, #132]	@ (80129bc <sync_fs+0xd4>)
 8012938:	4618      	mov	r0, r3
 801293a:	f7ff fd4c 	bl	80123d6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	3334      	adds	r3, #52	@ 0x34
 8012942:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012946:	491e      	ldr	r1, [pc, #120]	@ (80129c0 <sync_fs+0xd8>)
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff fd44 	bl	80123d6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3334      	adds	r3, #52	@ 0x34
 8012952:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	695b      	ldr	r3, [r3, #20]
 801295a:	4619      	mov	r1, r3
 801295c:	4610      	mov	r0, r2
 801295e:	f7ff fd3a 	bl	80123d6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3334      	adds	r3, #52	@ 0x34
 8012966:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	691b      	ldr	r3, [r3, #16]
 801296e:	4619      	mov	r1, r3
 8012970:	4610      	mov	r0, r2
 8012972:	f7ff fd30 	bl	80123d6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6a1b      	ldr	r3, [r3, #32]
 801297a:	1c5a      	adds	r2, r3, #1
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	7858      	ldrb	r0, [r3, #1]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801298e:	2301      	movs	r3, #1
 8012990:	f7ff fc8c 	bl	80122ac <disk_write>
			fs->fsi_flag = 0;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	785b      	ldrb	r3, [r3, #1]
 801299e:	2200      	movs	r2, #0
 80129a0:	2100      	movs	r1, #0
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7ff fca2 	bl	80122ec <disk_ioctl>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d001      	beq.n	80129b2 <sync_fs+0xca>
 80129ae:	2301      	movs	r3, #1
 80129b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80129b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3710      	adds	r7, #16
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	41615252 	.word	0x41615252
 80129c0:	61417272 	.word	0x61417272

080129c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	3b02      	subs	r3, #2
 80129d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	699b      	ldr	r3, [r3, #24]
 80129d8:	3b02      	subs	r3, #2
 80129da:	683a      	ldr	r2, [r7, #0]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d301      	bcc.n	80129e4 <clust2sect+0x20>
 80129e0:	2300      	movs	r3, #0
 80129e2:	e008      	b.n	80129f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	895b      	ldrh	r3, [r3, #10]
 80129e8:	461a      	mov	r2, r3
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	fb03 f202 	mul.w	r2, r3, r2
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129f4:	4413      	add	r3, r2
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr

08012a02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a02:	b580      	push	{r7, lr}
 8012a04:	b086      	sub	sp, #24
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
 8012a0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d904      	bls.n	8012a22 <get_fat+0x20>
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	699b      	ldr	r3, [r3, #24]
 8012a1c:	683a      	ldr	r2, [r7, #0]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d302      	bcc.n	8012a28 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a22:	2301      	movs	r3, #1
 8012a24:	617b      	str	r3, [r7, #20]
 8012a26:	e08e      	b.n	8012b46 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a28:	f04f 33ff 	mov.w	r3, #4294967295
 8012a2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	2b03      	cmp	r3, #3
 8012a34:	d061      	beq.n	8012afa <get_fat+0xf8>
 8012a36:	2b03      	cmp	r3, #3
 8012a38:	dc7b      	bgt.n	8012b32 <get_fat+0x130>
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d002      	beq.n	8012a44 <get_fat+0x42>
 8012a3e:	2b02      	cmp	r3, #2
 8012a40:	d041      	beq.n	8012ac6 <get_fat+0xc4>
 8012a42:	e076      	b.n	8012b32 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	60fb      	str	r3, [r7, #12]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	085b      	lsrs	r3, r3, #1
 8012a4c:	68fa      	ldr	r2, [r7, #12]
 8012a4e:	4413      	add	r3, r2
 8012a50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	0a5b      	lsrs	r3, r3, #9
 8012a5a:	4413      	add	r3, r2
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	6938      	ldr	r0, [r7, #16]
 8012a60:	f7ff ff14 	bl	801288c <move_window>
 8012a64:	4603      	mov	r3, r0
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d166      	bne.n	8012b38 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	1c5a      	adds	r2, r3, #1
 8012a6e:	60fa      	str	r2, [r7, #12]
 8012a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a74:	693a      	ldr	r2, [r7, #16]
 8012a76:	4413      	add	r3, r2
 8012a78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012a7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	0a5b      	lsrs	r3, r3, #9
 8012a86:	4413      	add	r3, r2
 8012a88:	4619      	mov	r1, r3
 8012a8a:	6938      	ldr	r0, [r7, #16]
 8012a8c:	f7ff fefe 	bl	801288c <move_window>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d152      	bne.n	8012b3c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a9c:	693a      	ldr	r2, [r7, #16]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012aa4:	021b      	lsls	r3, r3, #8
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	f003 0301 	and.w	r3, r3, #1
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d002      	beq.n	8012abc <get_fat+0xba>
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	091b      	lsrs	r3, r3, #4
 8012aba:	e002      	b.n	8012ac2 <get_fat+0xc0>
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ac2:	617b      	str	r3, [r7, #20]
			break;
 8012ac4:	e03f      	b.n	8012b46 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	0a1b      	lsrs	r3, r3, #8
 8012ace:	4413      	add	r3, r2
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	6938      	ldr	r0, [r7, #16]
 8012ad4:	f7ff feda 	bl	801288c <move_window>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d130      	bne.n	8012b40 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	005b      	lsls	r3, r3, #1
 8012ae8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012aec:	4413      	add	r3, r2
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7ff fc1a 	bl	8012328 <ld_word>
 8012af4:	4603      	mov	r3, r0
 8012af6:	617b      	str	r3, [r7, #20]
			break;
 8012af8:	e025      	b.n	8012b46 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	09db      	lsrs	r3, r3, #7
 8012b02:	4413      	add	r3, r2
 8012b04:	4619      	mov	r1, r3
 8012b06:	6938      	ldr	r0, [r7, #16]
 8012b08:	f7ff fec0 	bl	801288c <move_window>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d118      	bne.n	8012b44 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	009b      	lsls	r3, r3, #2
 8012b1c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b20:	4413      	add	r3, r2
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7ff fc19 	bl	801235a <ld_dword>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012b2e:	617b      	str	r3, [r7, #20]
			break;
 8012b30:	e009      	b.n	8012b46 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b32:	2301      	movs	r3, #1
 8012b34:	617b      	str	r3, [r7, #20]
 8012b36:	e006      	b.n	8012b46 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b38:	bf00      	nop
 8012b3a:	e004      	b.n	8012b46 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b3c:	bf00      	nop
 8012b3e:	e002      	b.n	8012b46 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b40:	bf00      	nop
 8012b42:	e000      	b.n	8012b46 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b44:	bf00      	nop
		}
	}

	return val;
 8012b46:	697b      	ldr	r3, [r7, #20]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3718      	adds	r7, #24
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b50:	b590      	push	{r4, r7, lr}
 8012b52:	b089      	sub	sp, #36	@ 0x24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b5c:	2302      	movs	r3, #2
 8012b5e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	f240 80d9 	bls.w	8012d1a <put_fat+0x1ca>
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	699b      	ldr	r3, [r3, #24]
 8012b6c:	68ba      	ldr	r2, [r7, #8]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	f080 80d3 	bcs.w	8012d1a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b03      	cmp	r3, #3
 8012b7a:	f000 8096 	beq.w	8012caa <put_fat+0x15a>
 8012b7e:	2b03      	cmp	r3, #3
 8012b80:	f300 80cb 	bgt.w	8012d1a <put_fat+0x1ca>
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d002      	beq.n	8012b8e <put_fat+0x3e>
 8012b88:	2b02      	cmp	r3, #2
 8012b8a:	d06e      	beq.n	8012c6a <put_fat+0x11a>
 8012b8c:	e0c5      	b.n	8012d1a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	61bb      	str	r3, [r7, #24]
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	085b      	lsrs	r3, r3, #1
 8012b96:	69ba      	ldr	r2, [r7, #24]
 8012b98:	4413      	add	r3, r2
 8012b9a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	0a5b      	lsrs	r3, r3, #9
 8012ba4:	4413      	add	r3, r2
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f7ff fe6f 	bl	801288c <move_window>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bb2:	7ffb      	ldrb	r3, [r7, #31]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f040 80a9 	bne.w	8012d0c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	1c59      	adds	r1, r3, #1
 8012bc4:	61b9      	str	r1, [r7, #24]
 8012bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bca:	4413      	add	r3, r2
 8012bcc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	f003 0301 	and.w	r3, r3, #1
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00d      	beq.n	8012bf4 <put_fat+0xa4>
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	b25b      	sxtb	r3, r3
 8012bde:	f003 030f 	and.w	r3, r3, #15
 8012be2:	b25a      	sxtb	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	b25b      	sxtb	r3, r3
 8012be8:	011b      	lsls	r3, r3, #4
 8012bea:	b25b      	sxtb	r3, r3
 8012bec:	4313      	orrs	r3, r2
 8012bee:	b25b      	sxtb	r3, r3
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	e001      	b.n	8012bf8 <put_fat+0xa8>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	697a      	ldr	r2, [r7, #20]
 8012bfa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2201      	movs	r2, #1
 8012c00:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	0a5b      	lsrs	r3, r3, #9
 8012c0a:	4413      	add	r3, r2
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	68f8      	ldr	r0, [r7, #12]
 8012c10:	f7ff fe3c 	bl	801288c <move_window>
 8012c14:	4603      	mov	r3, r0
 8012c16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c18:	7ffb      	ldrb	r3, [r7, #31]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d178      	bne.n	8012d10 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c2a:	4413      	add	r3, r2
 8012c2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	f003 0301 	and.w	r3, r3, #1
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d003      	beq.n	8012c40 <put_fat+0xf0>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	091b      	lsrs	r3, r3, #4
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	e00e      	b.n	8012c5e <put_fat+0x10e>
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	b25b      	sxtb	r3, r3
 8012c46:	f023 030f 	bic.w	r3, r3, #15
 8012c4a:	b25a      	sxtb	r2, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	0a1b      	lsrs	r3, r3, #8
 8012c50:	b25b      	sxtb	r3, r3
 8012c52:	f003 030f 	and.w	r3, r3, #15
 8012c56:	b25b      	sxtb	r3, r3
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	b25b      	sxtb	r3, r3
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	697a      	ldr	r2, [r7, #20]
 8012c60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2201      	movs	r2, #1
 8012c66:	70da      	strb	r2, [r3, #3]
			break;
 8012c68:	e057      	b.n	8012d1a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	0a1b      	lsrs	r3, r3, #8
 8012c72:	4413      	add	r3, r2
 8012c74:	4619      	mov	r1, r3
 8012c76:	68f8      	ldr	r0, [r7, #12]
 8012c78:	f7ff fe08 	bl	801288c <move_window>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c80:	7ffb      	ldrb	r3, [r7, #31]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d146      	bne.n	8012d14 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	005b      	lsls	r3, r3, #1
 8012c90:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012c94:	4413      	add	r3, r2
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	b292      	uxth	r2, r2
 8012c9a:	4611      	mov	r1, r2
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7ff fb7f 	bl	80123a0 <st_word>
			fs->wflag = 1;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	70da      	strb	r2, [r3, #3]
			break;
 8012ca8:	e037      	b.n	8012d1a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	09db      	lsrs	r3, r3, #7
 8012cb2:	4413      	add	r3, r2
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f7ff fde8 	bl	801288c <move_window>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cc0:	7ffb      	ldrb	r3, [r7, #31]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d128      	bne.n	8012d18 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012cda:	4413      	add	r3, r2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7ff fb3c 	bl	801235a <ld_dword>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012ce8:	4323      	orrs	r3, r4
 8012cea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012cfa:	4413      	add	r3, r2
 8012cfc:	6879      	ldr	r1, [r7, #4]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7ff fb69 	bl	80123d6 <st_dword>
			fs->wflag = 1;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2201      	movs	r2, #1
 8012d08:	70da      	strb	r2, [r3, #3]
			break;
 8012d0a:	e006      	b.n	8012d1a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d0c:	bf00      	nop
 8012d0e:	e004      	b.n	8012d1a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d10:	bf00      	nop
 8012d12:	e002      	b.n	8012d1a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d14:	bf00      	nop
 8012d16:	e000      	b.n	8012d1a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d18:	bf00      	nop
		}
	}
	return res;
 8012d1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3724      	adds	r7, #36	@ 0x24
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}

08012d24 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b088      	sub	sp, #32
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d30:	2300      	movs	r3, #0
 8012d32:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	2b01      	cmp	r3, #1
 8012d3e:	d904      	bls.n	8012d4a <remove_chain+0x26>
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	699b      	ldr	r3, [r3, #24]
 8012d44:	68ba      	ldr	r2, [r7, #8]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d301      	bcc.n	8012d4e <remove_chain+0x2a>
 8012d4a:	2302      	movs	r3, #2
 8012d4c:	e04b      	b.n	8012de6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d00c      	beq.n	8012d6e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d54:	f04f 32ff 	mov.w	r2, #4294967295
 8012d58:	6879      	ldr	r1, [r7, #4]
 8012d5a:	69b8      	ldr	r0, [r7, #24]
 8012d5c:	f7ff fef8 	bl	8012b50 <put_fat>
 8012d60:	4603      	mov	r3, r0
 8012d62:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d64:	7ffb      	ldrb	r3, [r7, #31]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d001      	beq.n	8012d6e <remove_chain+0x4a>
 8012d6a:	7ffb      	ldrb	r3, [r7, #31]
 8012d6c:	e03b      	b.n	8012de6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d6e:	68b9      	ldr	r1, [r7, #8]
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f7ff fe46 	bl	8012a02 <get_fat>
 8012d76:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d031      	beq.n	8012de2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d101      	bne.n	8012d88 <remove_chain+0x64>
 8012d84:	2302      	movs	r3, #2
 8012d86:	e02e      	b.n	8012de6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d8e:	d101      	bne.n	8012d94 <remove_chain+0x70>
 8012d90:	2301      	movs	r3, #1
 8012d92:	e028      	b.n	8012de6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012d94:	2200      	movs	r2, #0
 8012d96:	68b9      	ldr	r1, [r7, #8]
 8012d98:	69b8      	ldr	r0, [r7, #24]
 8012d9a:	f7ff fed9 	bl	8012b50 <put_fat>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012da2:	7ffb      	ldrb	r3, [r7, #31]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d001      	beq.n	8012dac <remove_chain+0x88>
 8012da8:	7ffb      	ldrb	r3, [r7, #31]
 8012daa:	e01c      	b.n	8012de6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	695a      	ldr	r2, [r3, #20]
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	699b      	ldr	r3, [r3, #24]
 8012db4:	3b02      	subs	r3, #2
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d20b      	bcs.n	8012dd2 <remove_chain+0xae>
			fs->free_clst++;
 8012dba:	69bb      	ldr	r3, [r7, #24]
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	1c5a      	adds	r2, r3, #1
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	791b      	ldrb	r3, [r3, #4]
 8012dc8:	f043 0301 	orr.w	r3, r3, #1
 8012dcc:	b2da      	uxtb	r2, r3
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	699b      	ldr	r3, [r3, #24]
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d3c6      	bcc.n	8012d6e <remove_chain+0x4a>
 8012de0:	e000      	b.n	8012de4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012de2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3720      	adds	r7, #32
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012dee:	b580      	push	{r7, lr}
 8012df0:	b088      	sub	sp, #32
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
 8012df6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d10d      	bne.n	8012e20 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	691b      	ldr	r3, [r3, #16]
 8012e08:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d004      	beq.n	8012e1a <create_chain+0x2c>
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	699b      	ldr	r3, [r3, #24]
 8012e14:	69ba      	ldr	r2, [r7, #24]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d31b      	bcc.n	8012e52 <create_chain+0x64>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	61bb      	str	r3, [r7, #24]
 8012e1e:	e018      	b.n	8012e52 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012e20:	6839      	ldr	r1, [r7, #0]
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7ff fded 	bl	8012a02 <get_fat>
 8012e28:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d801      	bhi.n	8012e34 <create_chain+0x46>
 8012e30:	2301      	movs	r3, #1
 8012e32:	e070      	b.n	8012f16 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e3a:	d101      	bne.n	8012e40 <create_chain+0x52>
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	e06a      	b.n	8012f16 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	699b      	ldr	r3, [r3, #24]
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d201      	bcs.n	8012e4e <create_chain+0x60>
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	e063      	b.n	8012f16 <create_chain+0x128>
		scl = clst;
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	699b      	ldr	r3, [r3, #24]
 8012e60:	69fa      	ldr	r2, [r7, #28]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d307      	bcc.n	8012e76 <create_chain+0x88>
				ncl = 2;
 8012e66:	2302      	movs	r3, #2
 8012e68:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e6a:	69fa      	ldr	r2, [r7, #28]
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d901      	bls.n	8012e76 <create_chain+0x88>
 8012e72:	2300      	movs	r3, #0
 8012e74:	e04f      	b.n	8012f16 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e76:	69f9      	ldr	r1, [r7, #28]
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff fdc2 	bl	8012a02 <get_fat>
 8012e7e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00e      	beq.n	8012ea4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d003      	beq.n	8012e94 <create_chain+0xa6>
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e92:	d101      	bne.n	8012e98 <create_chain+0xaa>
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	e03e      	b.n	8012f16 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e98:	69fa      	ldr	r2, [r7, #28]
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d1da      	bne.n	8012e56 <create_chain+0x68>
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	e038      	b.n	8012f16 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012ea4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8012eaa:	69f9      	ldr	r1, [r7, #28]
 8012eac:	6938      	ldr	r0, [r7, #16]
 8012eae:	f7ff fe4f 	bl	8012b50 <put_fat>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012eb6:	7dfb      	ldrb	r3, [r7, #23]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d109      	bne.n	8012ed0 <create_chain+0xe2>
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d006      	beq.n	8012ed0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012ec2:	69fa      	ldr	r2, [r7, #28]
 8012ec4:	6839      	ldr	r1, [r7, #0]
 8012ec6:	6938      	ldr	r0, [r7, #16]
 8012ec8:	f7ff fe42 	bl	8012b50 <put_fat>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012ed0:	7dfb      	ldrb	r3, [r7, #23]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d116      	bne.n	8012f04 <create_chain+0x116>
		fs->last_clst = ncl;
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	69fa      	ldr	r2, [r7, #28]
 8012eda:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	695a      	ldr	r2, [r3, #20]
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	699b      	ldr	r3, [r3, #24]
 8012ee4:	3b02      	subs	r3, #2
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d804      	bhi.n	8012ef4 <create_chain+0x106>
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	695b      	ldr	r3, [r3, #20]
 8012eee:	1e5a      	subs	r2, r3, #1
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	791b      	ldrb	r3, [r3, #4]
 8012ef8:	f043 0301 	orr.w	r3, r3, #1
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	711a      	strb	r2, [r3, #4]
 8012f02:	e007      	b.n	8012f14 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f04:	7dfb      	ldrb	r3, [r7, #23]
 8012f06:	2b01      	cmp	r3, #1
 8012f08:	d102      	bne.n	8012f10 <create_chain+0x122>
 8012f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f0e:	e000      	b.n	8012f12 <create_chain+0x124>
 8012f10:	2301      	movs	r3, #1
 8012f12:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f14:	69fb      	ldr	r3, [r7, #28]
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3720      	adds	r7, #32
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012f1e:	b480      	push	{r7}
 8012f20:	b087      	sub	sp, #28
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
 8012f26:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f32:	3304      	adds	r3, #4
 8012f34:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	0a5b      	lsrs	r3, r3, #9
 8012f3a:	68fa      	ldr	r2, [r7, #12]
 8012f3c:	8952      	ldrh	r2, [r2, #10]
 8012f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f42:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	1d1a      	adds	r2, r3, #4
 8012f48:	613a      	str	r2, [r7, #16]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d101      	bne.n	8012f58 <clmt_clust+0x3a>
 8012f54:	2300      	movs	r3, #0
 8012f56:	e010      	b.n	8012f7a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f58:	697a      	ldr	r2, [r7, #20]
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d307      	bcc.n	8012f70 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f60:	697a      	ldr	r2, [r7, #20]
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	1ad3      	subs	r3, r2, r3
 8012f66:	617b      	str	r3, [r7, #20]
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	3304      	adds	r3, #4
 8012f6c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f6e:	e7e9      	b.n	8012f44 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f70:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	681a      	ldr	r2, [r3, #0]
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	4413      	add	r3, r2
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	371c      	adds	r7, #28
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f84:	4770      	bx	lr

08012f86 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f86:	b580      	push	{r7, lr}
 8012f88:	b086      	sub	sp, #24
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
 8012f8e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f9c:	d204      	bcs.n	8012fa8 <dir_sdi+0x22>
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	f003 031f 	and.w	r3, r3, #31
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d001      	beq.n	8012fac <dir_sdi+0x26>
		return FR_INT_ERR;
 8012fa8:	2302      	movs	r3, #2
 8012faa:	e063      	b.n	8013074 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	683a      	ldr	r2, [r7, #0]
 8012fb0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d106      	bne.n	8012fcc <dir_sdi+0x46>
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	2b02      	cmp	r3, #2
 8012fc4:	d902      	bls.n	8012fcc <dir_sdi+0x46>
		clst = fs->dirbase;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d10c      	bne.n	8012fec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	095b      	lsrs	r3, r3, #5
 8012fd6:	693a      	ldr	r2, [r7, #16]
 8012fd8:	8912      	ldrh	r2, [r2, #8]
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d301      	bcc.n	8012fe2 <dir_sdi+0x5c>
 8012fde:	2302      	movs	r3, #2
 8012fe0:	e048      	b.n	8013074 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	61da      	str	r2, [r3, #28]
 8012fea:	e029      	b.n	8013040 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	895b      	ldrh	r3, [r3, #10]
 8012ff0:	025b      	lsls	r3, r3, #9
 8012ff2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012ff4:	e019      	b.n	801302a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6979      	ldr	r1, [r7, #20]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7ff fd01 	bl	8012a02 <get_fat>
 8013000:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013008:	d101      	bne.n	801300e <dir_sdi+0x88>
 801300a:	2301      	movs	r3, #1
 801300c:	e032      	b.n	8013074 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d904      	bls.n	801301e <dir_sdi+0x98>
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	699b      	ldr	r3, [r3, #24]
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	429a      	cmp	r2, r3
 801301c:	d301      	bcc.n	8013022 <dir_sdi+0x9c>
 801301e:	2302      	movs	r3, #2
 8013020:	e028      	b.n	8013074 <dir_sdi+0xee>
			ofs -= csz;
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801302a:	683a      	ldr	r2, [r7, #0]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	429a      	cmp	r2, r3
 8013030:	d2e1      	bcs.n	8012ff6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013032:	6979      	ldr	r1, [r7, #20]
 8013034:	6938      	ldr	r0, [r7, #16]
 8013036:	f7ff fcc5 	bl	80129c4 <clust2sect>
 801303a:	4602      	mov	r2, r0
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	697a      	ldr	r2, [r7, #20]
 8013044:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	69db      	ldr	r3, [r3, #28]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d101      	bne.n	8013052 <dir_sdi+0xcc>
 801304e:	2302      	movs	r3, #2
 8013050:	e010      	b.n	8013074 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	69da      	ldr	r2, [r3, #28]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	0a5b      	lsrs	r3, r3, #9
 801305a:	441a      	add	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801306c:	441a      	add	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	3718      	adds	r7, #24
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b086      	sub	sp, #24
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	695b      	ldr	r3, [r3, #20]
 8013090:	3320      	adds	r3, #32
 8013092:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d003      	beq.n	80130a4 <dir_next+0x28>
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80130a2:	d301      	bcc.n	80130a8 <dir_next+0x2c>
 80130a4:	2304      	movs	r3, #4
 80130a6:	e0aa      	b.n	80131fe <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f040 8098 	bne.w	80131e4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	69db      	ldr	r3, [r3, #28]
 80130b8:	1c5a      	adds	r2, r3, #1
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	699b      	ldr	r3, [r3, #24]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10b      	bne.n	80130de <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	095b      	lsrs	r3, r3, #5
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	8912      	ldrh	r2, [r2, #8]
 80130ce:	4293      	cmp	r3, r2
 80130d0:	f0c0 8088 	bcc.w	80131e4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	61da      	str	r2, [r3, #28]
 80130da:	2304      	movs	r3, #4
 80130dc:	e08f      	b.n	80131fe <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	0a5b      	lsrs	r3, r3, #9
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	8952      	ldrh	r2, [r2, #10]
 80130e6:	3a01      	subs	r2, #1
 80130e8:	4013      	ands	r3, r2
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d17a      	bne.n	80131e4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	699b      	ldr	r3, [r3, #24]
 80130f4:	4619      	mov	r1, r3
 80130f6:	4610      	mov	r0, r2
 80130f8:	f7ff fc83 	bl	8012a02 <get_fat>
 80130fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d801      	bhi.n	8013108 <dir_next+0x8c>
 8013104:	2302      	movs	r3, #2
 8013106:	e07a      	b.n	80131fe <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310e:	d101      	bne.n	8013114 <dir_next+0x98>
 8013110:	2301      	movs	r3, #1
 8013112:	e074      	b.n	80131fe <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	699b      	ldr	r3, [r3, #24]
 8013118:	697a      	ldr	r2, [r7, #20]
 801311a:	429a      	cmp	r2, r3
 801311c:	d358      	bcc.n	80131d0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d104      	bne.n	801312e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2200      	movs	r2, #0
 8013128:	61da      	str	r2, [r3, #28]
 801312a:	2304      	movs	r3, #4
 801312c:	e067      	b.n	80131fe <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	699b      	ldr	r3, [r3, #24]
 8013134:	4619      	mov	r1, r3
 8013136:	4610      	mov	r0, r2
 8013138:	f7ff fe59 	bl	8012dee <create_chain>
 801313c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d101      	bne.n	8013148 <dir_next+0xcc>
 8013144:	2307      	movs	r3, #7
 8013146:	e05a      	b.n	80131fe <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	2b01      	cmp	r3, #1
 801314c:	d101      	bne.n	8013152 <dir_next+0xd6>
 801314e:	2302      	movs	r3, #2
 8013150:	e055      	b.n	80131fe <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013158:	d101      	bne.n	801315e <dir_next+0xe2>
 801315a:	2301      	movs	r3, #1
 801315c:	e04f      	b.n	80131fe <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801315e:	68f8      	ldr	r0, [r7, #12]
 8013160:	f7ff fb50 	bl	8012804 <sync_window>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <dir_next+0xf2>
 801316a:	2301      	movs	r3, #1
 801316c:	e047      	b.n	80131fe <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3334      	adds	r3, #52	@ 0x34
 8013172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013176:	2100      	movs	r1, #0
 8013178:	4618      	mov	r0, r3
 801317a:	f7ff f979 	bl	8012470 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801317e:	2300      	movs	r3, #0
 8013180:	613b      	str	r3, [r7, #16]
 8013182:	6979      	ldr	r1, [r7, #20]
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	f7ff fc1d 	bl	80129c4 <clust2sect>
 801318a:	4602      	mov	r2, r0
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	631a      	str	r2, [r3, #48]	@ 0x30
 8013190:	e012      	b.n	80131b8 <dir_next+0x13c>
						fs->wflag = 1;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2201      	movs	r2, #1
 8013196:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7ff fb33 	bl	8012804 <sync_window>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d001      	beq.n	80131a8 <dir_next+0x12c>
 80131a4:	2301      	movs	r3, #1
 80131a6:	e02a      	b.n	80131fe <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	3301      	adds	r3, #1
 80131ac:	613b      	str	r3, [r7, #16]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131b2:	1c5a      	adds	r2, r3, #1
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	895b      	ldrh	r3, [r3, #10]
 80131bc:	461a      	mov	r2, r3
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	4293      	cmp	r3, r2
 80131c2:	d3e6      	bcc.n	8013192 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	1ad2      	subs	r2, r2, r3
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	697a      	ldr	r2, [r7, #20]
 80131d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80131d6:	6979      	ldr	r1, [r7, #20]
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	f7ff fbf3 	bl	80129c4 <clust2sect>
 80131de:	4602      	mov	r2, r0
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131f6:	441a      	add	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3718      	adds	r7, #24
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b086      	sub	sp, #24
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
 801320e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013216:	2100      	movs	r1, #0
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f7ff feb4 	bl	8012f86 <dir_sdi>
 801321e:	4603      	mov	r3, r0
 8013220:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013222:	7dfb      	ldrb	r3, [r7, #23]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d12b      	bne.n	8013280 <dir_alloc+0x7a>
		n = 0;
 8013228:	2300      	movs	r3, #0
 801322a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	69db      	ldr	r3, [r3, #28]
 8013230:	4619      	mov	r1, r3
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f7ff fb2a 	bl	801288c <move_window>
 8013238:	4603      	mov	r3, r0
 801323a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801323c:	7dfb      	ldrb	r3, [r7, #23]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d11d      	bne.n	801327e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6a1b      	ldr	r3, [r3, #32]
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	2be5      	cmp	r3, #229	@ 0xe5
 801324a:	d004      	beq.n	8013256 <dir_alloc+0x50>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6a1b      	ldr	r3, [r3, #32]
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d107      	bne.n	8013266 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	3301      	adds	r3, #1
 801325a:	613b      	str	r3, [r7, #16]
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	429a      	cmp	r2, r3
 8013262:	d102      	bne.n	801326a <dir_alloc+0x64>
 8013264:	e00c      	b.n	8013280 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013266:	2300      	movs	r3, #0
 8013268:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801326a:	2101      	movs	r1, #1
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ff05 	bl	801307c <dir_next>
 8013272:	4603      	mov	r3, r0
 8013274:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013276:	7dfb      	ldrb	r3, [r7, #23]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d0d7      	beq.n	801322c <dir_alloc+0x26>
 801327c:	e000      	b.n	8013280 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801327e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013280:	7dfb      	ldrb	r3, [r7, #23]
 8013282:	2b04      	cmp	r3, #4
 8013284:	d101      	bne.n	801328a <dir_alloc+0x84>
 8013286:	2307      	movs	r3, #7
 8013288:	75fb      	strb	r3, [r7, #23]
	return res;
 801328a:	7dfb      	ldrb	r3, [r7, #23]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3718      	adds	r7, #24
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	331a      	adds	r3, #26
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7ff f840 	bl	8012328 <ld_word>
 80132a8:	4603      	mov	r3, r0
 80132aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	2b03      	cmp	r3, #3
 80132b2:	d109      	bne.n	80132c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	3314      	adds	r3, #20
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7ff f835 	bl	8012328 <ld_word>
 80132be:	4603      	mov	r3, r0
 80132c0:	041b      	lsls	r3, r3, #16
 80132c2:	68fa      	ldr	r2, [r7, #12]
 80132c4:	4313      	orrs	r3, r2
 80132c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80132c8:	68fb      	ldr	r3, [r7, #12]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3710      	adds	r7, #16
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b084      	sub	sp, #16
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	60f8      	str	r0, [r7, #12]
 80132da:	60b9      	str	r1, [r7, #8]
 80132dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	331a      	adds	r3, #26
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	b292      	uxth	r2, r2
 80132e6:	4611      	mov	r1, r2
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7ff f859 	bl	80123a0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	2b03      	cmp	r3, #3
 80132f4:	d109      	bne.n	801330a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	f103 0214 	add.w	r2, r3, #20
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	0c1b      	lsrs	r3, r3, #16
 8013300:	b29b      	uxth	r3, r3
 8013302:	4619      	mov	r1, r3
 8013304:	4610      	mov	r0, r2
 8013306:	f7ff f84b 	bl	80123a0 <st_word>
	}
}
 801330a:	bf00      	nop
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
	...

08013314 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013314:	b590      	push	{r4, r7, lr}
 8013316:	b087      	sub	sp, #28
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	331a      	adds	r3, #26
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff f800 	bl	8012328 <ld_word>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d001      	beq.n	8013332 <cmp_lfn+0x1e>
 801332e:	2300      	movs	r3, #0
 8013330:	e059      	b.n	80133e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801333a:	1e5a      	subs	r2, r3, #1
 801333c:	4613      	mov	r3, r2
 801333e:	005b      	lsls	r3, r3, #1
 8013340:	4413      	add	r3, r2
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	4413      	add	r3, r2
 8013346:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013348:	2301      	movs	r3, #1
 801334a:	81fb      	strh	r3, [r7, #14]
 801334c:	2300      	movs	r3, #0
 801334e:	613b      	str	r3, [r7, #16]
 8013350:	e033      	b.n	80133ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013352:	4a27      	ldr	r2, [pc, #156]	@ (80133f0 <cmp_lfn+0xdc>)
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	4413      	add	r3, r2
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	461a      	mov	r2, r3
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	4413      	add	r3, r2
 8013360:	4618      	mov	r0, r3
 8013362:	f7fe ffe1 	bl	8012328 <ld_word>
 8013366:	4603      	mov	r3, r0
 8013368:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801336a:	89fb      	ldrh	r3, [r7, #14]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d01a      	beq.n	80133a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	2bfe      	cmp	r3, #254	@ 0xfe
 8013374:	d812      	bhi.n	801339c <cmp_lfn+0x88>
 8013376:	89bb      	ldrh	r3, [r7, #12]
 8013378:	4618      	mov	r0, r3
 801337a:	f001 ffd5 	bl	8015328 <ff_wtoupper>
 801337e:	4603      	mov	r3, r0
 8013380:	461c      	mov	r4, r3
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	1c5a      	adds	r2, r3, #1
 8013386:	617a      	str	r2, [r7, #20]
 8013388:	005b      	lsls	r3, r3, #1
 801338a:	687a      	ldr	r2, [r7, #4]
 801338c:	4413      	add	r3, r2
 801338e:	881b      	ldrh	r3, [r3, #0]
 8013390:	4618      	mov	r0, r3
 8013392:	f001 ffc9 	bl	8015328 <ff_wtoupper>
 8013396:	4603      	mov	r3, r0
 8013398:	429c      	cmp	r4, r3
 801339a:	d001      	beq.n	80133a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801339c:	2300      	movs	r3, #0
 801339e:	e022      	b.n	80133e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80133a0:	89bb      	ldrh	r3, [r7, #12]
 80133a2:	81fb      	strh	r3, [r7, #14]
 80133a4:	e006      	b.n	80133b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80133a6:	89bb      	ldrh	r3, [r7, #12]
 80133a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d001      	beq.n	80133b4 <cmp_lfn+0xa0>
 80133b0:	2300      	movs	r3, #0
 80133b2:	e018      	b.n	80133e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	3301      	adds	r3, #1
 80133b8:	613b      	str	r3, [r7, #16]
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	2b0c      	cmp	r3, #12
 80133be:	d9c8      	bls.n	8013352 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d00b      	beq.n	80133e4 <cmp_lfn+0xd0>
 80133cc:	89fb      	ldrh	r3, [r7, #14]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d008      	beq.n	80133e4 <cmp_lfn+0xd0>
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	005b      	lsls	r3, r3, #1
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	4413      	add	r3, r2
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <cmp_lfn+0xd0>
 80133e0:	2300      	movs	r3, #0
 80133e2:	e000      	b.n	80133e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80133e4:	2301      	movs	r3, #1
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	371c      	adds	r7, #28
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd90      	pop	{r4, r7, pc}
 80133ee:	bf00      	nop
 80133f0:	0801808c 	.word	0x0801808c

080133f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b088      	sub	sp, #32
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	60f8      	str	r0, [r7, #12]
 80133fc:	60b9      	str	r1, [r7, #8]
 80133fe:	4611      	mov	r1, r2
 8013400:	461a      	mov	r2, r3
 8013402:	460b      	mov	r3, r1
 8013404:	71fb      	strb	r3, [r7, #7]
 8013406:	4613      	mov	r3, r2
 8013408:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	330d      	adds	r3, #13
 801340e:	79ba      	ldrb	r2, [r7, #6]
 8013410:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	330b      	adds	r3, #11
 8013416:	220f      	movs	r2, #15
 8013418:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	330c      	adds	r3, #12
 801341e:	2200      	movs	r2, #0
 8013420:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	331a      	adds	r3, #26
 8013426:	2100      	movs	r1, #0
 8013428:	4618      	mov	r0, r3
 801342a:	f7fe ffb9 	bl	80123a0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801342e:	79fb      	ldrb	r3, [r7, #7]
 8013430:	1e5a      	subs	r2, r3, #1
 8013432:	4613      	mov	r3, r2
 8013434:	005b      	lsls	r3, r3, #1
 8013436:	4413      	add	r3, r2
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	4413      	add	r3, r2
 801343c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801343e:	2300      	movs	r3, #0
 8013440:	82fb      	strh	r3, [r7, #22]
 8013442:	2300      	movs	r3, #0
 8013444:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013446:	8afb      	ldrh	r3, [r7, #22]
 8013448:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801344c:	4293      	cmp	r3, r2
 801344e:	d007      	beq.n	8013460 <put_lfn+0x6c>
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	1c5a      	adds	r2, r3, #1
 8013454:	61fa      	str	r2, [r7, #28]
 8013456:	005b      	lsls	r3, r3, #1
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	4413      	add	r3, r2
 801345c:	881b      	ldrh	r3, [r3, #0]
 801345e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013460:	4a17      	ldr	r2, [pc, #92]	@ (80134c0 <put_lfn+0xcc>)
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	4413      	add	r3, r2
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	461a      	mov	r2, r3
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	4413      	add	r3, r2
 801346e:	8afa      	ldrh	r2, [r7, #22]
 8013470:	4611      	mov	r1, r2
 8013472:	4618      	mov	r0, r3
 8013474:	f7fe ff94 	bl	80123a0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013478:	8afb      	ldrh	r3, [r7, #22]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d102      	bne.n	8013484 <put_lfn+0x90>
 801347e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013482:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013484:	69bb      	ldr	r3, [r7, #24]
 8013486:	3301      	adds	r3, #1
 8013488:	61bb      	str	r3, [r7, #24]
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	2b0c      	cmp	r3, #12
 801348e:	d9da      	bls.n	8013446 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013490:	8afb      	ldrh	r3, [r7, #22]
 8013492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013496:	4293      	cmp	r3, r2
 8013498:	d006      	beq.n	80134a8 <put_lfn+0xb4>
 801349a:	69fb      	ldr	r3, [r7, #28]
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	68fa      	ldr	r2, [r7, #12]
 80134a0:	4413      	add	r3, r2
 80134a2:	881b      	ldrh	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d103      	bne.n	80134b0 <put_lfn+0xbc>
 80134a8:	79fb      	ldrb	r3, [r7, #7]
 80134aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	79fa      	ldrb	r2, [r7, #7]
 80134b4:	701a      	strb	r2, [r3, #0]
}
 80134b6:	bf00      	nop
 80134b8:	3720      	adds	r7, #32
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	0801808c 	.word	0x0801808c

080134c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b08c      	sub	sp, #48	@ 0x30
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80134d2:	220b      	movs	r2, #11
 80134d4:	68b9      	ldr	r1, [r7, #8]
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f7fe ffa9 	bl	801242e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	2b05      	cmp	r3, #5
 80134e0:	d92b      	bls.n	801353a <gen_numname+0x76>
		sr = seq;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80134e6:	e022      	b.n	801352e <gen_numname+0x6a>
			wc = *lfn++;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	1c9a      	adds	r2, r3, #2
 80134ec:	607a      	str	r2, [r7, #4]
 80134ee:	881b      	ldrh	r3, [r3, #0]
 80134f0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80134f2:	2300      	movs	r3, #0
 80134f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80134f6:	e017      	b.n	8013528 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	005a      	lsls	r2, r3, #1
 80134fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134fe:	f003 0301 	and.w	r3, r3, #1
 8013502:	4413      	add	r3, r2
 8013504:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013506:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013508:	085b      	lsrs	r3, r3, #1
 801350a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801350c:	69fb      	ldr	r3, [r7, #28]
 801350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013512:	2b00      	cmp	r3, #0
 8013514:	d005      	beq.n	8013522 <gen_numname+0x5e>
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801351c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8013520:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013524:	3301      	adds	r3, #1
 8013526:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801352a:	2b0f      	cmp	r3, #15
 801352c:	d9e4      	bls.n	80134f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d1d8      	bne.n	80134e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801353a:	2307      	movs	r3, #7
 801353c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	b2db      	uxtb	r3, r3
 8013542:	f003 030f 	and.w	r3, r3, #15
 8013546:	b2db      	uxtb	r3, r3
 8013548:	3330      	adds	r3, #48	@ 0x30
 801354a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801354e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013552:	2b39      	cmp	r3, #57	@ 0x39
 8013554:	d904      	bls.n	8013560 <gen_numname+0x9c>
 8013556:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801355a:	3307      	adds	r3, #7
 801355c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8013560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013562:	1e5a      	subs	r2, r3, #1
 8013564:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013566:	3330      	adds	r3, #48	@ 0x30
 8013568:	443b      	add	r3, r7
 801356a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801356e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	091b      	lsrs	r3, r3, #4
 8013576:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1df      	bne.n	801353e <gen_numname+0x7a>
	ns[i] = '~';
 801357e:	f107 0214 	add.w	r2, r7, #20
 8013582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013584:	4413      	add	r3, r2
 8013586:	227e      	movs	r2, #126	@ 0x7e
 8013588:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801358a:	2300      	movs	r3, #0
 801358c:	627b      	str	r3, [r7, #36]	@ 0x24
 801358e:	e002      	b.n	8013596 <gen_numname+0xd2>
 8013590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013592:	3301      	adds	r3, #1
 8013594:	627b      	str	r3, [r7, #36]	@ 0x24
 8013596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801359a:	429a      	cmp	r2, r3
 801359c:	d205      	bcs.n	80135aa <gen_numname+0xe6>
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a2:	4413      	add	r3, r2
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	2b20      	cmp	r3, #32
 80135a8:	d1f2      	bne.n	8013590 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80135aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ac:	2b07      	cmp	r3, #7
 80135ae:	d807      	bhi.n	80135c0 <gen_numname+0xfc>
 80135b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80135b6:	3330      	adds	r3, #48	@ 0x30
 80135b8:	443b      	add	r3, r7
 80135ba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80135be:	e000      	b.n	80135c2 <gen_numname+0xfe>
 80135c0:	2120      	movs	r1, #32
 80135c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c4:	1c5a      	adds	r2, r3, #1
 80135c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	4413      	add	r3, r2
 80135cc:	460a      	mov	r2, r1
 80135ce:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80135d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d2:	2b07      	cmp	r3, #7
 80135d4:	d9e9      	bls.n	80135aa <gen_numname+0xe6>
}
 80135d6:	bf00      	nop
 80135d8:	bf00      	nop
 80135da:	3730      	adds	r7, #48	@ 0x30
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80135e8:	2300      	movs	r3, #0
 80135ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80135ec:	230b      	movs	r3, #11
 80135ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80135f0:	7bfb      	ldrb	r3, [r7, #15]
 80135f2:	b2da      	uxtb	r2, r3
 80135f4:	0852      	lsrs	r2, r2, #1
 80135f6:	01db      	lsls	r3, r3, #7
 80135f8:	4313      	orrs	r3, r2
 80135fa:	b2da      	uxtb	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	1c59      	adds	r1, r3, #1
 8013600:	6079      	str	r1, [r7, #4]
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	4413      	add	r3, r2
 8013606:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	3b01      	subs	r3, #1
 801360c:	60bb      	str	r3, [r7, #8]
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1ed      	bne.n	80135f0 <sum_sfn+0x10>
	return sum;
 8013614:	7bfb      	ldrb	r3, [r7, #15]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3714      	adds	r7, #20
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr

08013622 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b086      	sub	sp, #24
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013630:	2100      	movs	r1, #0
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7ff fca7 	bl	8012f86 <dir_sdi>
 8013638:	4603      	mov	r3, r0
 801363a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801363c:	7dfb      	ldrb	r3, [r7, #23]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d001      	beq.n	8013646 <dir_find+0x24>
 8013642:	7dfb      	ldrb	r3, [r7, #23]
 8013644:	e0a9      	b.n	801379a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013646:	23ff      	movs	r3, #255	@ 0xff
 8013648:	753b      	strb	r3, [r7, #20]
 801364a:	7d3b      	ldrb	r3, [r7, #20]
 801364c:	757b      	strb	r3, [r7, #21]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f04f 32ff 	mov.w	r2, #4294967295
 8013654:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	69db      	ldr	r3, [r3, #28]
 801365a:	4619      	mov	r1, r3
 801365c:	6938      	ldr	r0, [r7, #16]
 801365e:	f7ff f915 	bl	801288c <move_window>
 8013662:	4603      	mov	r3, r0
 8013664:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013666:	7dfb      	ldrb	r3, [r7, #23]
 8013668:	2b00      	cmp	r3, #0
 801366a:	f040 8090 	bne.w	801378e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a1b      	ldr	r3, [r3, #32]
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013676:	7dbb      	ldrb	r3, [r7, #22]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d102      	bne.n	8013682 <dir_find+0x60>
 801367c:	2304      	movs	r3, #4
 801367e:	75fb      	strb	r3, [r7, #23]
 8013680:	e08a      	b.n	8013798 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6a1b      	ldr	r3, [r3, #32]
 8013686:	330b      	adds	r3, #11
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801368e:	73fb      	strb	r3, [r7, #15]
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	7bfa      	ldrb	r2, [r7, #15]
 8013694:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013696:	7dbb      	ldrb	r3, [r7, #22]
 8013698:	2be5      	cmp	r3, #229	@ 0xe5
 801369a:	d007      	beq.n	80136ac <dir_find+0x8a>
 801369c:	7bfb      	ldrb	r3, [r7, #15]
 801369e:	f003 0308 	and.w	r3, r3, #8
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d009      	beq.n	80136ba <dir_find+0x98>
 80136a6:	7bfb      	ldrb	r3, [r7, #15]
 80136a8:	2b0f      	cmp	r3, #15
 80136aa:	d006      	beq.n	80136ba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80136ac:	23ff      	movs	r3, #255	@ 0xff
 80136ae:	757b      	strb	r3, [r7, #21]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f04f 32ff 	mov.w	r2, #4294967295
 80136b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80136b8:	e05e      	b.n	8013778 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80136ba:	7bfb      	ldrb	r3, [r7, #15]
 80136bc:	2b0f      	cmp	r3, #15
 80136be:	d136      	bne.n	801372e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80136c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d154      	bne.n	8013778 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80136ce:	7dbb      	ldrb	r3, [r7, #22]
 80136d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d00d      	beq.n	80136f4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6a1b      	ldr	r3, [r3, #32]
 80136dc:	7b5b      	ldrb	r3, [r3, #13]
 80136de:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80136e0:	7dbb      	ldrb	r3, [r7, #22]
 80136e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80136e6:	75bb      	strb	r3, [r7, #22]
 80136e8:	7dbb      	ldrb	r3, [r7, #22]
 80136ea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	695a      	ldr	r2, [r3, #20]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80136f4:	7dba      	ldrb	r2, [r7, #22]
 80136f6:	7d7b      	ldrb	r3, [r7, #21]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d115      	bne.n	8013728 <dir_find+0x106>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6a1b      	ldr	r3, [r3, #32]
 8013700:	330d      	adds	r3, #13
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	7d3a      	ldrb	r2, [r7, #20]
 8013706:	429a      	cmp	r2, r3
 8013708:	d10e      	bne.n	8013728 <dir_find+0x106>
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	68da      	ldr	r2, [r3, #12]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6a1b      	ldr	r3, [r3, #32]
 8013712:	4619      	mov	r1, r3
 8013714:	4610      	mov	r0, r2
 8013716:	f7ff fdfd 	bl	8013314 <cmp_lfn>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d003      	beq.n	8013728 <dir_find+0x106>
 8013720:	7d7b      	ldrb	r3, [r7, #21]
 8013722:	3b01      	subs	r3, #1
 8013724:	b2db      	uxtb	r3, r3
 8013726:	e000      	b.n	801372a <dir_find+0x108>
 8013728:	23ff      	movs	r3, #255	@ 0xff
 801372a:	757b      	strb	r3, [r7, #21]
 801372c:	e024      	b.n	8013778 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801372e:	7d7b      	ldrb	r3, [r7, #21]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d109      	bne.n	8013748 <dir_find+0x126>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6a1b      	ldr	r3, [r3, #32]
 8013738:	4618      	mov	r0, r3
 801373a:	f7ff ff51 	bl	80135e0 <sum_sfn>
 801373e:	4603      	mov	r3, r0
 8013740:	461a      	mov	r2, r3
 8013742:	7d3b      	ldrb	r3, [r7, #20]
 8013744:	4293      	cmp	r3, r2
 8013746:	d024      	beq.n	8013792 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801374e:	f003 0301 	and.w	r3, r3, #1
 8013752:	2b00      	cmp	r3, #0
 8013754:	d10a      	bne.n	801376c <dir_find+0x14a>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6a18      	ldr	r0, [r3, #32]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	3324      	adds	r3, #36	@ 0x24
 801375e:	220b      	movs	r2, #11
 8013760:	4619      	mov	r1, r3
 8013762:	f7fe fea0 	bl	80124a6 <mem_cmp>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d014      	beq.n	8013796 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801376c:	23ff      	movs	r3, #255	@ 0xff
 801376e:	757b      	strb	r3, [r7, #21]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f04f 32ff 	mov.w	r2, #4294967295
 8013776:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013778:	2100      	movs	r1, #0
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f7ff fc7e 	bl	801307c <dir_next>
 8013780:	4603      	mov	r3, r0
 8013782:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013784:	7dfb      	ldrb	r3, [r7, #23]
 8013786:	2b00      	cmp	r3, #0
 8013788:	f43f af65 	beq.w	8013656 <dir_find+0x34>
 801378c:	e004      	b.n	8013798 <dir_find+0x176>
		if (res != FR_OK) break;
 801378e:	bf00      	nop
 8013790:	e002      	b.n	8013798 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013792:	bf00      	nop
 8013794:	e000      	b.n	8013798 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013796:	bf00      	nop

	return res;
 8013798:	7dfb      	ldrb	r3, [r7, #23]
}
 801379a:	4618      	mov	r0, r3
 801379c:	3718      	adds	r7, #24
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
	...

080137a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08c      	sub	sp, #48	@ 0x30
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80137b8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d001      	beq.n	80137c4 <dir_register+0x20>
 80137c0:	2306      	movs	r3, #6
 80137c2:	e0e0      	b.n	8013986 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80137c4:	2300      	movs	r3, #0
 80137c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80137c8:	e002      	b.n	80137d0 <dir_register+0x2c>
 80137ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137cc:	3301      	adds	r3, #1
 80137ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	68da      	ldr	r2, [r3, #12]
 80137d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d6:	005b      	lsls	r3, r3, #1
 80137d8:	4413      	add	r3, r2
 80137da:	881b      	ldrh	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d1f4      	bne.n	80137ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80137e6:	f107 030c 	add.w	r3, r7, #12
 80137ea:	220c      	movs	r2, #12
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fe fe1e 	bl	801242e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80137f2:	7dfb      	ldrb	r3, [r7, #23]
 80137f4:	f003 0301 	and.w	r3, r3, #1
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d032      	beq.n	8013862 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2240      	movs	r2, #64	@ 0x40
 8013800:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8013804:	2301      	movs	r3, #1
 8013806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013808:	e016      	b.n	8013838 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	68da      	ldr	r2, [r3, #12]
 8013814:	f107 010c 	add.w	r1, r7, #12
 8013818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801381a:	f7ff fe53 	bl	80134c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7ff feff 	bl	8013622 <dir_find>
 8013824:	4603      	mov	r3, r0
 8013826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801382a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013834:	3301      	adds	r3, #1
 8013836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801383a:	2b63      	cmp	r3, #99	@ 0x63
 801383c:	d9e5      	bls.n	801380a <dir_register+0x66>
 801383e:	e000      	b.n	8013842 <dir_register+0x9e>
			if (res != FR_OK) break;
 8013840:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013844:	2b64      	cmp	r3, #100	@ 0x64
 8013846:	d101      	bne.n	801384c <dir_register+0xa8>
 8013848:	2307      	movs	r3, #7
 801384a:	e09c      	b.n	8013986 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801384c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013850:	2b04      	cmp	r3, #4
 8013852:	d002      	beq.n	801385a <dir_register+0xb6>
 8013854:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013858:	e095      	b.n	8013986 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801385a:	7dfa      	ldrb	r2, [r7, #23]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013862:	7dfb      	ldrb	r3, [r7, #23]
 8013864:	f003 0302 	and.w	r3, r3, #2
 8013868:	2b00      	cmp	r3, #0
 801386a:	d007      	beq.n	801387c <dir_register+0xd8>
 801386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386e:	330c      	adds	r3, #12
 8013870:	4a47      	ldr	r2, [pc, #284]	@ (8013990 <dir_register+0x1ec>)
 8013872:	fba2 2303 	umull	r2, r3, r2, r3
 8013876:	089b      	lsrs	r3, r3, #2
 8013878:	3301      	adds	r3, #1
 801387a:	e000      	b.n	801387e <dir_register+0xda>
 801387c:	2301      	movs	r3, #1
 801387e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013880:	6a39      	ldr	r1, [r7, #32]
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7ff fcbf 	bl	8013206 <dir_alloc>
 8013888:	4603      	mov	r3, r0
 801388a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801388e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013892:	2b00      	cmp	r3, #0
 8013894:	d148      	bne.n	8013928 <dir_register+0x184>
 8013896:	6a3b      	ldr	r3, [r7, #32]
 8013898:	3b01      	subs	r3, #1
 801389a:	623b      	str	r3, [r7, #32]
 801389c:	6a3b      	ldr	r3, [r7, #32]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d042      	beq.n	8013928 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	695a      	ldr	r2, [r3, #20]
 80138a6:	6a3b      	ldr	r3, [r7, #32]
 80138a8:	015b      	lsls	r3, r3, #5
 80138aa:	1ad3      	subs	r3, r2, r3
 80138ac:	4619      	mov	r1, r3
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7ff fb69 	bl	8012f86 <dir_sdi>
 80138b4:	4603      	mov	r3, r0
 80138b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80138ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d132      	bne.n	8013928 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3324      	adds	r3, #36	@ 0x24
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff fe8a 	bl	80135e0 <sum_sfn>
 80138cc:	4603      	mov	r3, r0
 80138ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	69db      	ldr	r3, [r3, #28]
 80138d4:	4619      	mov	r1, r3
 80138d6:	69f8      	ldr	r0, [r7, #28]
 80138d8:	f7fe ffd8 	bl	801288c <move_window>
 80138dc:	4603      	mov	r3, r0
 80138de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80138e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d11d      	bne.n	8013926 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	68d8      	ldr	r0, [r3, #12]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6a19      	ldr	r1, [r3, #32]
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	b2da      	uxtb	r2, r3
 80138f6:	7efb      	ldrb	r3, [r7, #27]
 80138f8:	f7ff fd7c 	bl	80133f4 <put_lfn>
				fs->wflag = 1;
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	2201      	movs	r2, #1
 8013900:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013902:	2100      	movs	r1, #0
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f7ff fbb9 	bl	801307c <dir_next>
 801390a:	4603      	mov	r3, r0
 801390c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8013910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013914:	2b00      	cmp	r3, #0
 8013916:	d107      	bne.n	8013928 <dir_register+0x184>
 8013918:	6a3b      	ldr	r3, [r7, #32]
 801391a:	3b01      	subs	r3, #1
 801391c:	623b      	str	r3, [r7, #32]
 801391e:	6a3b      	ldr	r3, [r7, #32]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d1d5      	bne.n	80138d0 <dir_register+0x12c>
 8013924:	e000      	b.n	8013928 <dir_register+0x184>
				if (res != FR_OK) break;
 8013926:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801392c:	2b00      	cmp	r3, #0
 801392e:	d128      	bne.n	8013982 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	69db      	ldr	r3, [r3, #28]
 8013934:	4619      	mov	r1, r3
 8013936:	69f8      	ldr	r0, [r7, #28]
 8013938:	f7fe ffa8 	bl	801288c <move_window>
 801393c:	4603      	mov	r3, r0
 801393e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013946:	2b00      	cmp	r3, #0
 8013948:	d11b      	bne.n	8013982 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6a1b      	ldr	r3, [r3, #32]
 801394e:	2220      	movs	r2, #32
 8013950:	2100      	movs	r1, #0
 8013952:	4618      	mov	r0, r3
 8013954:	f7fe fd8c 	bl	8012470 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6a18      	ldr	r0, [r3, #32]
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	3324      	adds	r3, #36	@ 0x24
 8013960:	220b      	movs	r2, #11
 8013962:	4619      	mov	r1, r3
 8013964:	f7fe fd63 	bl	801242e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	330c      	adds	r3, #12
 8013974:	f002 0218 	and.w	r2, r2, #24
 8013978:	b2d2      	uxtb	r2, r2
 801397a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	2201      	movs	r2, #1
 8013980:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013986:	4618      	mov	r0, r3
 8013988:	3730      	adds	r7, #48	@ 0x30
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	4ec4ec4f 	.word	0x4ec4ec4f

08013994 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b08a      	sub	sp, #40	@ 0x28
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	613b      	str	r3, [r7, #16]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	60fb      	str	r3, [r7, #12]
 80139ac:	2300      	movs	r3, #0
 80139ae:	617b      	str	r3, [r7, #20]
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	1c5a      	adds	r2, r3, #1
 80139b8:	61ba      	str	r2, [r7, #24]
 80139ba:	693a      	ldr	r2, [r7, #16]
 80139bc:	4413      	add	r3, r2
 80139be:	781b      	ldrb	r3, [r3, #0]
 80139c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80139c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80139c4:	2b1f      	cmp	r3, #31
 80139c6:	d940      	bls.n	8013a4a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80139c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80139ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80139cc:	d006      	beq.n	80139dc <create_name+0x48>
 80139ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80139d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80139d2:	d110      	bne.n	80139f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80139d4:	e002      	b.n	80139dc <create_name+0x48>
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	3301      	adds	r3, #1
 80139da:	61bb      	str	r3, [r7, #24]
 80139dc:	693a      	ldr	r2, [r7, #16]
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	4413      	add	r3, r2
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80139e6:	d0f6      	beq.n	80139d6 <create_name+0x42>
 80139e8:	693a      	ldr	r2, [r7, #16]
 80139ea:	69bb      	ldr	r3, [r7, #24]
 80139ec:	4413      	add	r3, r2
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80139f2:	d0f0      	beq.n	80139d6 <create_name+0x42>
			break;
 80139f4:	e02a      	b.n	8013a4c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80139fa:	d901      	bls.n	8013a00 <create_name+0x6c>
 80139fc:	2306      	movs	r3, #6
 80139fe:	e17d      	b.n	8013cfc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013a00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a08:	2101      	movs	r1, #1
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f001 fc50 	bl	80152b0 <ff_convert>
 8013a10:	4603      	mov	r3, r0
 8013a12:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013a14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d101      	bne.n	8013a1e <create_name+0x8a>
 8013a1a:	2306      	movs	r3, #6
 8013a1c:	e16e      	b.n	8013cfc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013a1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8013a22:	d809      	bhi.n	8013a38 <create_name+0xa4>
 8013a24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a26:	4619      	mov	r1, r3
 8013a28:	488d      	ldr	r0, [pc, #564]	@ (8013c60 <create_name+0x2cc>)
 8013a2a:	f7fe fd63 	bl	80124f4 <chk_chr>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d001      	beq.n	8013a38 <create_name+0xa4>
 8013a34:	2306      	movs	r3, #6
 8013a36:	e161      	b.n	8013cfc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	1c5a      	adds	r2, r3, #1
 8013a3c:	617a      	str	r2, [r7, #20]
 8013a3e:	005b      	lsls	r3, r3, #1
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	4413      	add	r3, r2
 8013a44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013a46:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013a48:	e7b4      	b.n	80139b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013a4a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013a4c:	693a      	ldr	r2, [r7, #16]
 8013a4e:	69bb      	ldr	r3, [r7, #24]
 8013a50:	441a      	add	r2, r3
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013a56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a58:	2b1f      	cmp	r3, #31
 8013a5a:	d801      	bhi.n	8013a60 <create_name+0xcc>
 8013a5c:	2304      	movs	r3, #4
 8013a5e:	e000      	b.n	8013a62 <create_name+0xce>
 8013a60:	2300      	movs	r3, #0
 8013a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013a66:	e011      	b.n	8013a8c <create_name+0xf8>
		w = lfn[di - 1];
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	005b      	lsls	r3, r3, #1
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	4413      	add	r3, r2
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a7c:	2b20      	cmp	r3, #32
 8013a7e:	d002      	beq.n	8013a86 <create_name+0xf2>
 8013a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a84:	d106      	bne.n	8013a94 <create_name+0x100>
		di--;
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d1ea      	bne.n	8013a68 <create_name+0xd4>
 8013a92:	e000      	b.n	8013a96 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013a94:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	005b      	lsls	r3, r3, #1
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <create_name+0x118>
 8013aa8:	2306      	movs	r3, #6
 8013aaa:	e127      	b.n	8013cfc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	3324      	adds	r3, #36	@ 0x24
 8013ab0:	220b      	movs	r2, #11
 8013ab2:	2120      	movs	r1, #32
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7fe fcdb 	bl	8012470 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013aba:	2300      	movs	r3, #0
 8013abc:	61bb      	str	r3, [r7, #24]
 8013abe:	e002      	b.n	8013ac6 <create_name+0x132>
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	61bb      	str	r3, [r7, #24]
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	68fa      	ldr	r2, [r7, #12]
 8013acc:	4413      	add	r3, r2
 8013ace:	881b      	ldrh	r3, [r3, #0]
 8013ad0:	2b20      	cmp	r3, #32
 8013ad2:	d0f5      	beq.n	8013ac0 <create_name+0x12c>
 8013ad4:	69bb      	ldr	r3, [r7, #24]
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	68fa      	ldr	r2, [r7, #12]
 8013ada:	4413      	add	r3, r2
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ae0:	d0ee      	beq.n	8013ac0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d009      	beq.n	8013afc <create_name+0x168>
 8013ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013aec:	f043 0303 	orr.w	r3, r3, #3
 8013af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013af4:	e002      	b.n	8013afc <create_name+0x168>
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	3b01      	subs	r3, #1
 8013afa:	617b      	str	r3, [r7, #20]
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d009      	beq.n	8013b16 <create_name+0x182>
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	005b      	lsls	r3, r3, #1
 8013b0c:	68fa      	ldr	r2, [r7, #12]
 8013b0e:	4413      	add	r3, r2
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b14:	d1ef      	bne.n	8013af6 <create_name+0x162>

	i = b = 0; ni = 8;
 8013b16:	2300      	movs	r3, #0
 8013b18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	623b      	str	r3, [r7, #32]
 8013b20:	2308      	movs	r3, #8
 8013b22:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	61ba      	str	r2, [r7, #24]
 8013b2a:	005b      	lsls	r3, r3, #1
 8013b2c:	68fa      	ldr	r2, [r7, #12]
 8013b2e:	4413      	add	r3, r2
 8013b30:	881b      	ldrh	r3, [r3, #0]
 8013b32:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013b34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	f000 8090 	beq.w	8013c5c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013b3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013b3e:	2b20      	cmp	r3, #32
 8013b40:	d006      	beq.n	8013b50 <create_name+0x1bc>
 8013b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013b44:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b46:	d10a      	bne.n	8013b5e <create_name+0x1ca>
 8013b48:	69ba      	ldr	r2, [r7, #24]
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d006      	beq.n	8013b5e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b54:	f043 0303 	orr.w	r3, r3, #3
 8013b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013b5c:	e07d      	b.n	8013c5a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013b5e:	6a3a      	ldr	r2, [r7, #32]
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d203      	bcs.n	8013b6e <create_name+0x1da>
 8013b66:	69ba      	ldr	r2, [r7, #24]
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d123      	bne.n	8013bb6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	2b0b      	cmp	r3, #11
 8013b72:	d106      	bne.n	8013b82 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b78:	f043 0303 	orr.w	r3, r3, #3
 8013b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013b80:	e075      	b.n	8013c6e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013b82:	69ba      	ldr	r2, [r7, #24]
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d005      	beq.n	8013b96 <create_name+0x202>
 8013b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b8e:	f043 0303 	orr.w	r3, r3, #3
 8013b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013b96:	69ba      	ldr	r2, [r7, #24]
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d866      	bhi.n	8013c6c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	61bb      	str	r3, [r7, #24]
 8013ba2:	2308      	movs	r3, #8
 8013ba4:	623b      	str	r3, [r7, #32]
 8013ba6:	230b      	movs	r3, #11
 8013ba8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013baa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013bb4:	e051      	b.n	8013c5a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013bb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8013bba:	d914      	bls.n	8013be6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013bbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f001 fb75 	bl	80152b0 <ff_convert>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013bca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d004      	beq.n	8013bda <create_name+0x246>
 8013bd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bd2:	3b80      	subs	r3, #128	@ 0x80
 8013bd4:	4a23      	ldr	r2, [pc, #140]	@ (8013c64 <create_name+0x2d0>)
 8013bd6:	5cd3      	ldrb	r3, [r2, r3]
 8013bd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bde:	f043 0302 	orr.w	r3, r3, #2
 8013be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d007      	beq.n	8013bfc <create_name+0x268>
 8013bec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bee:	4619      	mov	r1, r3
 8013bf0:	481d      	ldr	r0, [pc, #116]	@ (8013c68 <create_name+0x2d4>)
 8013bf2:	f7fe fc7f 	bl	80124f4 <chk_chr>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d008      	beq.n	8013c0e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013bfc:	235f      	movs	r3, #95	@ 0x5f
 8013bfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c04:	f043 0303 	orr.w	r3, r3, #3
 8013c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013c0c:	e01b      	b.n	8013c46 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013c0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c10:	2b40      	cmp	r3, #64	@ 0x40
 8013c12:	d909      	bls.n	8013c28 <create_name+0x294>
 8013c14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c16:	2b5a      	cmp	r3, #90	@ 0x5a
 8013c18:	d806      	bhi.n	8013c28 <create_name+0x294>
					b |= 2;
 8013c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013c1e:	f043 0302 	orr.w	r3, r3, #2
 8013c22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013c26:	e00e      	b.n	8013c46 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013c28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c2a:	2b60      	cmp	r3, #96	@ 0x60
 8013c2c:	d90b      	bls.n	8013c46 <create_name+0x2b2>
 8013c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c30:	2b7a      	cmp	r3, #122	@ 0x7a
 8013c32:	d808      	bhi.n	8013c46 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013c34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013c38:	f043 0301 	orr.w	r3, r3, #1
 8013c3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c42:	3b20      	subs	r3, #32
 8013c44:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013c46:	6a3b      	ldr	r3, [r7, #32]
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	623a      	str	r2, [r7, #32]
 8013c4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013c4e:	b2d1      	uxtb	r1, r2
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	4413      	add	r3, r2
 8013c54:	460a      	mov	r2, r1
 8013c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013c5a:	e763      	b.n	8013b24 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013c5c:	bf00      	nop
 8013c5e:	e006      	b.n	8013c6e <create_name+0x2da>
 8013c60:	08017f7c 	.word	0x08017f7c
 8013c64:	0801800c 	.word	0x0801800c
 8013c68:	08017f88 	.word	0x08017f88
			if (si > di) break;			/* No extension */
 8013c6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013c74:	2be5      	cmp	r3, #229	@ 0xe5
 8013c76:	d103      	bne.n	8013c80 <create_name+0x2ec>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2205      	movs	r2, #5
 8013c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	2b08      	cmp	r3, #8
 8013c84:	d104      	bne.n	8013c90 <create_name+0x2fc>
 8013c86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013c90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013c94:	f003 030c 	and.w	r3, r3, #12
 8013c98:	2b0c      	cmp	r3, #12
 8013c9a:	d005      	beq.n	8013ca8 <create_name+0x314>
 8013c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ca0:	f003 0303 	and.w	r3, r3, #3
 8013ca4:	2b03      	cmp	r3, #3
 8013ca6:	d105      	bne.n	8013cb4 <create_name+0x320>
 8013ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013cac:	f043 0302 	orr.w	r3, r3, #2
 8013cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013cb8:	f003 0302 	and.w	r3, r3, #2
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d117      	bne.n	8013cf0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013cc4:	f003 0303 	and.w	r3, r3, #3
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d105      	bne.n	8013cd8 <create_name+0x344>
 8013ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013cd0:	f043 0310 	orr.w	r3, r3, #16
 8013cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013cdc:	f003 030c 	and.w	r3, r3, #12
 8013ce0:	2b04      	cmp	r3, #4
 8013ce2:	d105      	bne.n	8013cf0 <create_name+0x35c>
 8013ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ce8:	f043 0308 	orr.w	r3, r3, #8
 8013cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013cf6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8013cfa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3728      	adds	r7, #40	@ 0x28
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013d18:	e002      	b.n	8013d20 <follow_path+0x1c>
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	603b      	str	r3, [r7, #0]
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	2b2f      	cmp	r3, #47	@ 0x2f
 8013d26:	d0f8      	beq.n	8013d1a <follow_path+0x16>
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8013d2e:	d0f4      	beq.n	8013d1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	2200      	movs	r2, #0
 8013d34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	2b1f      	cmp	r3, #31
 8013d3c:	d80a      	bhi.n	8013d54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2280      	movs	r2, #128	@ 0x80
 8013d42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8013d46:	2100      	movs	r1, #0
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f7ff f91c 	bl	8012f86 <dir_sdi>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	75fb      	strb	r3, [r7, #23]
 8013d52:	e043      	b.n	8013ddc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013d54:	463b      	mov	r3, r7
 8013d56:	4619      	mov	r1, r3
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7ff fe1b 	bl	8013994 <create_name>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d62:	7dfb      	ldrb	r3, [r7, #23]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d134      	bne.n	8013dd2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff fc5a 	bl	8013622 <dir_find>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013d78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013d7a:	7dfb      	ldrb	r3, [r7, #23]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00a      	beq.n	8013d96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013d80:	7dfb      	ldrb	r3, [r7, #23]
 8013d82:	2b04      	cmp	r3, #4
 8013d84:	d127      	bne.n	8013dd6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013d86:	7afb      	ldrb	r3, [r7, #11]
 8013d88:	f003 0304 	and.w	r3, r3, #4
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d122      	bne.n	8013dd6 <follow_path+0xd2>
 8013d90:	2305      	movs	r3, #5
 8013d92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013d94:	e01f      	b.n	8013dd6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013d96:	7afb      	ldrb	r3, [r7, #11]
 8013d98:	f003 0304 	and.w	r3, r3, #4
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d11c      	bne.n	8013dda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	799b      	ldrb	r3, [r3, #6]
 8013da4:	f003 0310 	and.w	r3, r3, #16
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d102      	bne.n	8013db2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013dac:	2305      	movs	r3, #5
 8013dae:	75fb      	strb	r3, [r7, #23]
 8013db0:	e014      	b.n	8013ddc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	695b      	ldr	r3, [r3, #20]
 8013dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dc0:	4413      	add	r3, r2
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f7ff fa65 	bl	8013294 <ld_clust>
 8013dca:	4602      	mov	r2, r0
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013dd0:	e7c0      	b.n	8013d54 <follow_path+0x50>
			if (res != FR_OK) break;
 8013dd2:	bf00      	nop
 8013dd4:	e002      	b.n	8013ddc <follow_path+0xd8>
				break;
 8013dd6:	bf00      	nop
 8013dd8:	e000      	b.n	8013ddc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013dda:	bf00      	nop
			}
		}
	}

	return res;
 8013ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3718      	adds	r7, #24
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}

08013de6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013de6:	b480      	push	{r7}
 8013de8:	b087      	sub	sp, #28
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013dee:	f04f 33ff 	mov.w	r3, #4294967295
 8013df2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d031      	beq.n	8013e60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	617b      	str	r3, [r7, #20]
 8013e02:	e002      	b.n	8013e0a <get_ldnumber+0x24>
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	3301      	adds	r3, #1
 8013e08:	617b      	str	r3, [r7, #20]
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	2b1f      	cmp	r3, #31
 8013e10:	d903      	bls.n	8013e1a <get_ldnumber+0x34>
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	2b3a      	cmp	r3, #58	@ 0x3a
 8013e18:	d1f4      	bne.n	8013e04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013e20:	d11c      	bne.n	8013e5c <get_ldnumber+0x76>
			tp = *path;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	1c5a      	adds	r2, r3, #1
 8013e2c:	60fa      	str	r2, [r7, #12]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	3b30      	subs	r3, #48	@ 0x30
 8013e32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	2b09      	cmp	r3, #9
 8013e38:	d80e      	bhi.n	8013e58 <get_ldnumber+0x72>
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d10a      	bne.n	8013e58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d107      	bne.n	8013e58 <get_ldnumber+0x72>
					vol = (int)i;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	617b      	str	r3, [r7, #20]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	697a      	ldr	r2, [r7, #20]
 8013e56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	e002      	b.n	8013e62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013e60:	693b      	ldr	r3, [r7, #16]
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	371c      	adds	r7, #28
 8013e66:	46bd      	mov	sp, r7
 8013e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6c:	4770      	bx	lr
	...

08013e70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	70da      	strb	r2, [r3, #3]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f04f 32ff 	mov.w	r2, #4294967295
 8013e86:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013e88:	6839      	ldr	r1, [r7, #0]
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f7fe fcfe 	bl	801288c <move_window>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d001      	beq.n	8013e9a <check_fs+0x2a>
 8013e96:	2304      	movs	r3, #4
 8013e98:	e038      	b.n	8013f0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	3334      	adds	r3, #52	@ 0x34
 8013e9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fe fa40 	bl	8012328 <ld_word>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	461a      	mov	r2, r3
 8013eac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d001      	beq.n	8013eb8 <check_fs+0x48>
 8013eb4:	2303      	movs	r3, #3
 8013eb6:	e029      	b.n	8013f0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013ebe:	2be9      	cmp	r3, #233	@ 0xe9
 8013ec0:	d009      	beq.n	8013ed6 <check_fs+0x66>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013ec8:	2beb      	cmp	r3, #235	@ 0xeb
 8013eca:	d11e      	bne.n	8013f0a <check_fs+0x9a>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8013ed2:	2b90      	cmp	r3, #144	@ 0x90
 8013ed4:	d119      	bne.n	8013f0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	3334      	adds	r3, #52	@ 0x34
 8013eda:	3336      	adds	r3, #54	@ 0x36
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fe fa3c 	bl	801235a <ld_dword>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8013f14 <check_fs+0xa4>)
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d101      	bne.n	8013ef2 <check_fs+0x82>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	e00c      	b.n	8013f0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	3334      	adds	r3, #52	@ 0x34
 8013ef6:	3352      	adds	r3, #82	@ 0x52
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fe fa2e 	bl	801235a <ld_dword>
 8013efe:	4603      	mov	r3, r0
 8013f00:	4a05      	ldr	r2, [pc, #20]	@ (8013f18 <check_fs+0xa8>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d101      	bne.n	8013f0a <check_fs+0x9a>
 8013f06:	2300      	movs	r3, #0
 8013f08:	e000      	b.n	8013f0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013f0a:	2302      	movs	r3, #2
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	00544146 	.word	0x00544146
 8013f18:	33544146 	.word	0x33544146

08013f1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b096      	sub	sp, #88	@ 0x58
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	4613      	mov	r3, r2
 8013f28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f7ff ff58 	bl	8013de6 <get_ldnumber>
 8013f36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	da01      	bge.n	8013f42 <find_volume+0x26>
 8013f3e:	230b      	movs	r3, #11
 8013f40:	e22d      	b.n	801439e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013f42:	4aa1      	ldr	r2, [pc, #644]	@ (80141c8 <find_volume+0x2ac>)
 8013f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <find_volume+0x3a>
 8013f52:	230c      	movs	r3, #12
 8013f54:	e223      	b.n	801439e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013f5c:	79fb      	ldrb	r3, [r7, #7]
 8013f5e:	f023 0301 	bic.w	r3, r3, #1
 8013f62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d01a      	beq.n	8013fa2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f6e:	785b      	ldrb	r3, [r3, #1]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fe f939 	bl	80121e8 <disk_status>
 8013f76:	4603      	mov	r3, r0
 8013f78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d10c      	bne.n	8013fa2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013f88:	79fb      	ldrb	r3, [r7, #7]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d007      	beq.n	8013f9e <find_volume+0x82>
 8013f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013f92:	f003 0304 	and.w	r3, r3, #4
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d001      	beq.n	8013f9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013f9a:	230a      	movs	r3, #10
 8013f9c:	e1ff      	b.n	801439e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e1fd      	b.n	801439e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013faa:	b2da      	uxtb	r2, r3
 8013fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fb2:	785b      	ldrb	r3, [r3, #1]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fe f931 	bl	801221c <disk_initialize>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013fc4:	f003 0301 	and.w	r3, r3, #1
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013fcc:	2303      	movs	r3, #3
 8013fce:	e1e6      	b.n	801439e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013fd0:	79fb      	ldrb	r3, [r7, #7]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d007      	beq.n	8013fe6 <find_volume+0xca>
 8013fd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013fda:	f003 0304 	and.w	r3, r3, #4
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d001      	beq.n	8013fe6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013fe2:	230a      	movs	r3, #10
 8013fe4:	e1db      	b.n	801439e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013fea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013fec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013fee:	f7ff ff3f 	bl	8013e70 <check_fs>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ffc:	2b02      	cmp	r3, #2
 8013ffe:	d149      	bne.n	8014094 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014000:	2300      	movs	r3, #0
 8014002:	643b      	str	r3, [r7, #64]	@ 0x40
 8014004:	e01e      	b.n	8014044 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014008:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801400c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801400e:	011b      	lsls	r3, r3, #4
 8014010:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014014:	4413      	add	r3, r2
 8014016:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801401a:	3304      	adds	r3, #4
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d006      	beq.n	8014030 <find_volume+0x114>
 8014022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014024:	3308      	adds	r3, #8
 8014026:	4618      	mov	r0, r3
 8014028:	f7fe f997 	bl	801235a <ld_dword>
 801402c:	4602      	mov	r2, r0
 801402e:	e000      	b.n	8014032 <find_volume+0x116>
 8014030:	2200      	movs	r2, #0
 8014032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	3358      	adds	r3, #88	@ 0x58
 8014038:	443b      	add	r3, r7
 801403a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801403e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014040:	3301      	adds	r3, #1
 8014042:	643b      	str	r3, [r7, #64]	@ 0x40
 8014044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014046:	2b03      	cmp	r3, #3
 8014048:	d9dd      	bls.n	8014006 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801404a:	2300      	movs	r3, #0
 801404c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014050:	2b00      	cmp	r3, #0
 8014052:	d002      	beq.n	801405a <find_volume+0x13e>
 8014054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014056:	3b01      	subs	r3, #1
 8014058:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801405a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	3358      	adds	r3, #88	@ 0x58
 8014060:	443b      	add	r3, r7
 8014062:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014066:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801406a:	2b00      	cmp	r3, #0
 801406c:	d005      	beq.n	801407a <find_volume+0x15e>
 801406e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014070:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014072:	f7ff fefd 	bl	8013e70 <check_fs>
 8014076:	4603      	mov	r3, r0
 8014078:	e000      	b.n	801407c <find_volume+0x160>
 801407a:	2303      	movs	r3, #3
 801407c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014080:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014084:	2b01      	cmp	r3, #1
 8014086:	d905      	bls.n	8014094 <find_volume+0x178>
 8014088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801408a:	3301      	adds	r3, #1
 801408c:	643b      	str	r3, [r7, #64]	@ 0x40
 801408e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014090:	2b03      	cmp	r3, #3
 8014092:	d9e2      	bls.n	801405a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014098:	2b04      	cmp	r3, #4
 801409a:	d101      	bne.n	80140a0 <find_volume+0x184>
 801409c:	2301      	movs	r3, #1
 801409e:	e17e      	b.n	801439e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80140a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d901      	bls.n	80140ac <find_volume+0x190>
 80140a8:	230d      	movs	r3, #13
 80140aa:	e178      	b.n	801439e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80140ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ae:	3334      	adds	r3, #52	@ 0x34
 80140b0:	330b      	adds	r3, #11
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7fe f938 	bl	8012328 <ld_word>
 80140b8:	4603      	mov	r3, r0
 80140ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140be:	d001      	beq.n	80140c4 <find_volume+0x1a8>
 80140c0:	230d      	movs	r3, #13
 80140c2:	e16c      	b.n	801439e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80140c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140c6:	3334      	adds	r3, #52	@ 0x34
 80140c8:	3316      	adds	r3, #22
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7fe f92c 	bl	8012328 <ld_word>
 80140d0:	4603      	mov	r3, r0
 80140d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80140d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d106      	bne.n	80140e8 <find_volume+0x1cc>
 80140da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140dc:	3334      	adds	r3, #52	@ 0x34
 80140de:	3324      	adds	r3, #36	@ 0x24
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7fe f93a 	bl	801235a <ld_dword>
 80140e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80140e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80140ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140f0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80140f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80140f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140fa:	789b      	ldrb	r3, [r3, #2]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d005      	beq.n	801410c <find_volume+0x1f0>
 8014100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014102:	789b      	ldrb	r3, [r3, #2]
 8014104:	2b02      	cmp	r3, #2
 8014106:	d001      	beq.n	801410c <find_volume+0x1f0>
 8014108:	230d      	movs	r3, #13
 801410a:	e148      	b.n	801439e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801410e:	789b      	ldrb	r3, [r3, #2]
 8014110:	461a      	mov	r2, r3
 8014112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014114:	fb02 f303 	mul.w	r3, r2, r3
 8014118:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801411c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014120:	461a      	mov	r2, r3
 8014122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014124:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014128:	895b      	ldrh	r3, [r3, #10]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d008      	beq.n	8014140 <find_volume+0x224>
 801412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014130:	895b      	ldrh	r3, [r3, #10]
 8014132:	461a      	mov	r2, r3
 8014134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014136:	895b      	ldrh	r3, [r3, #10]
 8014138:	3b01      	subs	r3, #1
 801413a:	4013      	ands	r3, r2
 801413c:	2b00      	cmp	r3, #0
 801413e:	d001      	beq.n	8014144 <find_volume+0x228>
 8014140:	230d      	movs	r3, #13
 8014142:	e12c      	b.n	801439e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014146:	3334      	adds	r3, #52	@ 0x34
 8014148:	3311      	adds	r3, #17
 801414a:	4618      	mov	r0, r3
 801414c:	f7fe f8ec 	bl	8012328 <ld_word>
 8014150:	4603      	mov	r3, r0
 8014152:	461a      	mov	r2, r3
 8014154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014156:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801415a:	891b      	ldrh	r3, [r3, #8]
 801415c:	f003 030f 	and.w	r3, r3, #15
 8014160:	b29b      	uxth	r3, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	d001      	beq.n	801416a <find_volume+0x24e>
 8014166:	230d      	movs	r3, #13
 8014168:	e119      	b.n	801439e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801416c:	3334      	adds	r3, #52	@ 0x34
 801416e:	3313      	adds	r3, #19
 8014170:	4618      	mov	r0, r3
 8014172:	f7fe f8d9 	bl	8012328 <ld_word>
 8014176:	4603      	mov	r3, r0
 8014178:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801417c:	2b00      	cmp	r3, #0
 801417e:	d106      	bne.n	801418e <find_volume+0x272>
 8014180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014182:	3334      	adds	r3, #52	@ 0x34
 8014184:	3320      	adds	r3, #32
 8014186:	4618      	mov	r0, r3
 8014188:	f7fe f8e7 	bl	801235a <ld_dword>
 801418c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801418e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014190:	3334      	adds	r3, #52	@ 0x34
 8014192:	330e      	adds	r3, #14
 8014194:	4618      	mov	r0, r3
 8014196:	f7fe f8c7 	bl	8012328 <ld_word>
 801419a:	4603      	mov	r3, r0
 801419c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801419e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d101      	bne.n	80141a8 <find_volume+0x28c>
 80141a4:	230d      	movs	r3, #13
 80141a6:	e0fa      	b.n	801439e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80141a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80141aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141ac:	4413      	add	r3, r2
 80141ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80141b0:	8912      	ldrh	r2, [r2, #8]
 80141b2:	0912      	lsrs	r2, r2, #4
 80141b4:	b292      	uxth	r2, r2
 80141b6:	4413      	add	r3, r2
 80141b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80141ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80141bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141be:	429a      	cmp	r2, r3
 80141c0:	d204      	bcs.n	80141cc <find_volume+0x2b0>
 80141c2:	230d      	movs	r3, #13
 80141c4:	e0eb      	b.n	801439e <find_volume+0x482>
 80141c6:	bf00      	nop
 80141c8:	20000d54 	.word	0x20000d54
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80141cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80141ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141d0:	1ad3      	subs	r3, r2, r3
 80141d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80141d4:	8952      	ldrh	r2, [r2, #10]
 80141d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80141da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80141dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d101      	bne.n	80141e6 <find_volume+0x2ca>
 80141e2:	230d      	movs	r3, #13
 80141e4:	e0db      	b.n	801439e <find_volume+0x482>
		fmt = FS_FAT32;
 80141e6:	2303      	movs	r3, #3
 80141e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80141ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d802      	bhi.n	80141fc <find_volume+0x2e0>
 80141f6:	2302      	movs	r3, #2
 80141f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80141fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014202:	4293      	cmp	r3, r2
 8014204:	d802      	bhi.n	801420c <find_volume+0x2f0>
 8014206:	2301      	movs	r3, #1
 8014208:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801420e:	1c9a      	adds	r2, r3, #2
 8014210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014212:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014216:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014218:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801421a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801421c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801421e:	441a      	add	r2, r3
 8014220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014222:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014228:	441a      	add	r2, r3
 801422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801422c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801422e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014232:	2b03      	cmp	r3, #3
 8014234:	d11e      	bne.n	8014274 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014238:	3334      	adds	r3, #52	@ 0x34
 801423a:	332a      	adds	r3, #42	@ 0x2a
 801423c:	4618      	mov	r0, r3
 801423e:	f7fe f873 	bl	8012328 <ld_word>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	d001      	beq.n	801424c <find_volume+0x330>
 8014248:	230d      	movs	r3, #13
 801424a:	e0a8      	b.n	801439e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801424e:	891b      	ldrh	r3, [r3, #8]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d001      	beq.n	8014258 <find_volume+0x33c>
 8014254:	230d      	movs	r3, #13
 8014256:	e0a2      	b.n	801439e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801425a:	3334      	adds	r3, #52	@ 0x34
 801425c:	332c      	adds	r3, #44	@ 0x2c
 801425e:	4618      	mov	r0, r3
 8014260:	f7fe f87b 	bl	801235a <ld_dword>
 8014264:	4602      	mov	r2, r0
 8014266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014268:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801426c:	699b      	ldr	r3, [r3, #24]
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	647b      	str	r3, [r7, #68]	@ 0x44
 8014272:	e01f      	b.n	80142b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014276:	891b      	ldrh	r3, [r3, #8]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d101      	bne.n	8014280 <find_volume+0x364>
 801427c:	230d      	movs	r3, #13
 801427e:	e08e      	b.n	801439e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014286:	441a      	add	r2, r3
 8014288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801428a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801428c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014290:	2b02      	cmp	r3, #2
 8014292:	d103      	bne.n	801429c <find_volume+0x380>
 8014294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014296:	699b      	ldr	r3, [r3, #24]
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	e00a      	b.n	80142b2 <find_volume+0x396>
 801429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801429e:	699a      	ldr	r2, [r3, #24]
 80142a0:	4613      	mov	r3, r2
 80142a2:	005b      	lsls	r3, r3, #1
 80142a4:	4413      	add	r3, r2
 80142a6:	085a      	lsrs	r2, r3, #1
 80142a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142aa:	699b      	ldr	r3, [r3, #24]
 80142ac:	f003 0301 	and.w	r3, r3, #1
 80142b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80142b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80142b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142b6:	69da      	ldr	r2, [r3, #28]
 80142b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80142be:	0a5b      	lsrs	r3, r3, #9
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d201      	bcs.n	80142c8 <find_volume+0x3ac>
 80142c4:	230d      	movs	r3, #13
 80142c6:	e06a      	b.n	801439e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80142c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ca:	f04f 32ff 	mov.w	r2, #4294967295
 80142ce:	615a      	str	r2, [r3, #20]
 80142d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142d2:	695a      	ldr	r2, [r3, #20]
 80142d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142d6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80142d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142da:	2280      	movs	r2, #128	@ 0x80
 80142dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80142de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142e2:	2b03      	cmp	r3, #3
 80142e4:	d149      	bne.n	801437a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80142e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142e8:	3334      	adds	r3, #52	@ 0x34
 80142ea:	3330      	adds	r3, #48	@ 0x30
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fe f81b 	bl	8012328 <ld_word>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d140      	bne.n	801437a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80142f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142fa:	3301      	adds	r3, #1
 80142fc:	4619      	mov	r1, r3
 80142fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014300:	f7fe fac4 	bl	801288c <move_window>
 8014304:	4603      	mov	r3, r0
 8014306:	2b00      	cmp	r3, #0
 8014308:	d137      	bne.n	801437a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801430c:	2200      	movs	r2, #0
 801430e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014312:	3334      	adds	r3, #52	@ 0x34
 8014314:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014318:	4618      	mov	r0, r3
 801431a:	f7fe f805 	bl	8012328 <ld_word>
 801431e:	4603      	mov	r3, r0
 8014320:	461a      	mov	r2, r3
 8014322:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014326:	429a      	cmp	r2, r3
 8014328:	d127      	bne.n	801437a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801432c:	3334      	adds	r3, #52	@ 0x34
 801432e:	4618      	mov	r0, r3
 8014330:	f7fe f813 	bl	801235a <ld_dword>
 8014334:	4603      	mov	r3, r0
 8014336:	4a1c      	ldr	r2, [pc, #112]	@ (80143a8 <find_volume+0x48c>)
 8014338:	4293      	cmp	r3, r2
 801433a:	d11e      	bne.n	801437a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801433e:	3334      	adds	r3, #52	@ 0x34
 8014340:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014344:	4618      	mov	r0, r3
 8014346:	f7fe f808 	bl	801235a <ld_dword>
 801434a:	4603      	mov	r3, r0
 801434c:	4a17      	ldr	r2, [pc, #92]	@ (80143ac <find_volume+0x490>)
 801434e:	4293      	cmp	r3, r2
 8014350:	d113      	bne.n	801437a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014354:	3334      	adds	r3, #52	@ 0x34
 8014356:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801435a:	4618      	mov	r0, r3
 801435c:	f7fd fffd 	bl	801235a <ld_dword>
 8014360:	4602      	mov	r2, r0
 8014362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014364:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014368:	3334      	adds	r3, #52	@ 0x34
 801436a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801436e:	4618      	mov	r0, r3
 8014370:	f7fd fff3 	bl	801235a <ld_dword>
 8014374:	4602      	mov	r2, r0
 8014376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014378:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801437c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8014380:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014382:	4b0b      	ldr	r3, [pc, #44]	@ (80143b0 <find_volume+0x494>)
 8014384:	881b      	ldrh	r3, [r3, #0]
 8014386:	3301      	adds	r3, #1
 8014388:	b29a      	uxth	r2, r3
 801438a:	4b09      	ldr	r3, [pc, #36]	@ (80143b0 <find_volume+0x494>)
 801438c:	801a      	strh	r2, [r3, #0]
 801438e:	4b08      	ldr	r3, [pc, #32]	@ (80143b0 <find_volume+0x494>)
 8014390:	881a      	ldrh	r2, [r3, #0]
 8014392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014394:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014396:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014398:	f7fe fa10 	bl	80127bc <clear_lock>
#endif
	return FR_OK;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3758      	adds	r7, #88	@ 0x58
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	41615252 	.word	0x41615252
 80143ac:	61417272 	.word	0x61417272
 80143b0:	20000d58 	.word	0x20000d58

080143b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80143be:	2309      	movs	r3, #9
 80143c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d01c      	beq.n	8014402 <validate+0x4e>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d018      	beq.n	8014402 <validate+0x4e>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d013      	beq.n	8014402 <validate+0x4e>
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	889a      	ldrh	r2, [r3, #4]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	88db      	ldrh	r3, [r3, #6]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d10c      	bne.n	8014402 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	785b      	ldrb	r3, [r3, #1]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fd fefa 	bl	80121e8 <disk_status>
 80143f4:	4603      	mov	r3, r0
 80143f6:	f003 0301 	and.w	r3, r3, #1
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d101      	bne.n	8014402 <validate+0x4e>
			res = FR_OK;
 80143fe:	2300      	movs	r3, #0
 8014400:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014402:	7bfb      	ldrb	r3, [r7, #15]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d102      	bne.n	801440e <validate+0x5a>
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	e000      	b.n	8014410 <validate+0x5c>
 801440e:	2300      	movs	r3, #0
 8014410:	683a      	ldr	r2, [r7, #0]
 8014412:	6013      	str	r3, [r2, #0]
	return res;
 8014414:	7bfb      	ldrb	r3, [r7, #15]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
	...

08014420 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b088      	sub	sp, #32
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	4613      	mov	r3, r2
 801442c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014432:	f107 0310 	add.w	r3, r7, #16
 8014436:	4618      	mov	r0, r3
 8014438:	f7ff fcd5 	bl	8013de6 <get_ldnumber>
 801443c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	2b00      	cmp	r3, #0
 8014442:	da01      	bge.n	8014448 <f_mount+0x28>
 8014444:	230b      	movs	r3, #11
 8014446:	e02b      	b.n	80144a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014448:	4a17      	ldr	r2, [pc, #92]	@ (80144a8 <f_mount+0x88>)
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014450:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014452:	69bb      	ldr	r3, [r7, #24]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d005      	beq.n	8014464 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014458:	69b8      	ldr	r0, [r7, #24]
 801445a:	f7fe f9af 	bl	80127bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	2200      	movs	r2, #0
 8014462:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d002      	beq.n	8014470 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	2200      	movs	r2, #0
 801446e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	490d      	ldr	r1, [pc, #52]	@ (80144a8 <f_mount+0x88>)
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d002      	beq.n	8014486 <f_mount+0x66>
 8014480:	79fb      	ldrb	r3, [r7, #7]
 8014482:	2b01      	cmp	r3, #1
 8014484:	d001      	beq.n	801448a <f_mount+0x6a>
 8014486:	2300      	movs	r3, #0
 8014488:	e00a      	b.n	80144a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801448a:	f107 010c 	add.w	r1, r7, #12
 801448e:	f107 0308 	add.w	r3, r7, #8
 8014492:	2200      	movs	r2, #0
 8014494:	4618      	mov	r0, r3
 8014496:	f7ff fd41 	bl	8013f1c <find_volume>
 801449a:	4603      	mov	r3, r0
 801449c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801449e:	7dfb      	ldrb	r3, [r7, #23]
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3720      	adds	r7, #32
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	20000d54 	.word	0x20000d54

080144ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b09a      	sub	sp, #104	@ 0x68
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	4613      	mov	r3, r2
 80144b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d101      	bne.n	80144c4 <f_open+0x18>
 80144c0:	2309      	movs	r3, #9
 80144c2:	e1b9      	b.n	8014838 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80144c4:	79fb      	ldrb	r3, [r7, #7]
 80144c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80144ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80144cc:	79fa      	ldrb	r2, [r7, #7]
 80144ce:	f107 0110 	add.w	r1, r7, #16
 80144d2:	f107 0308 	add.w	r3, r7, #8
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7ff fd20 	bl	8013f1c <find_volume>
 80144dc:	4603      	mov	r3, r0
 80144de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80144e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f040 819d 	bne.w	8014826 <f_open+0x37a>
		dj.obj.fs = fs;
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80144f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80144f4:	f000 ffa2 	bl	801543c <ff_memalloc>
 80144f8:	65b8      	str	r0, [r7, #88]	@ 0x58
 80144fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d101      	bne.n	8014504 <f_open+0x58>
 8014500:	2311      	movs	r3, #17
 8014502:	e199      	b.n	8014838 <f_open+0x38c>
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014508:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801450a:	68ba      	ldr	r2, [r7, #8]
 801450c:	f107 0314 	add.w	r3, r7, #20
 8014510:	4611      	mov	r1, r2
 8014512:	4618      	mov	r0, r3
 8014514:	f7ff fbf6 	bl	8013d04 <follow_path>
 8014518:	4603      	mov	r3, r0
 801451a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801451e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014522:	2b00      	cmp	r3, #0
 8014524:	d118      	bne.n	8014558 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014526:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801452a:	b25b      	sxtb	r3, r3
 801452c:	2b00      	cmp	r3, #0
 801452e:	da03      	bge.n	8014538 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8014530:	2306      	movs	r3, #6
 8014532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014536:	e00f      	b.n	8014558 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014538:	79fb      	ldrb	r3, [r7, #7]
 801453a:	2b01      	cmp	r3, #1
 801453c:	bf8c      	ite	hi
 801453e:	2301      	movhi	r3, #1
 8014540:	2300      	movls	r3, #0
 8014542:	b2db      	uxtb	r3, r3
 8014544:	461a      	mov	r2, r3
 8014546:	f107 0314 	add.w	r3, r7, #20
 801454a:	4611      	mov	r1, r2
 801454c:	4618      	mov	r0, r3
 801454e:	f7fd ffed 	bl	801252c <chk_lock>
 8014552:	4603      	mov	r3, r0
 8014554:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014558:	79fb      	ldrb	r3, [r7, #7]
 801455a:	f003 031c 	and.w	r3, r3, #28
 801455e:	2b00      	cmp	r3, #0
 8014560:	d07f      	beq.n	8014662 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8014562:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014566:	2b00      	cmp	r3, #0
 8014568:	d017      	beq.n	801459a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801456a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801456e:	2b04      	cmp	r3, #4
 8014570:	d10e      	bne.n	8014590 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014572:	f7fe f837 	bl	80125e4 <enq_lock>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d006      	beq.n	801458a <f_open+0xde>
 801457c:	f107 0314 	add.w	r3, r7, #20
 8014580:	4618      	mov	r0, r3
 8014582:	f7ff f90f 	bl	80137a4 <dir_register>
 8014586:	4603      	mov	r3, r0
 8014588:	e000      	b.n	801458c <f_open+0xe0>
 801458a:	2312      	movs	r3, #18
 801458c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014590:	79fb      	ldrb	r3, [r7, #7]
 8014592:	f043 0308 	orr.w	r3, r3, #8
 8014596:	71fb      	strb	r3, [r7, #7]
 8014598:	e010      	b.n	80145bc <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801459a:	7ebb      	ldrb	r3, [r7, #26]
 801459c:	f003 0311 	and.w	r3, r3, #17
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d003      	beq.n	80145ac <f_open+0x100>
					res = FR_DENIED;
 80145a4:	2307      	movs	r3, #7
 80145a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80145aa:	e007      	b.n	80145bc <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80145ac:	79fb      	ldrb	r3, [r7, #7]
 80145ae:	f003 0304 	and.w	r3, r3, #4
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d002      	beq.n	80145bc <f_open+0x110>
 80145b6:	2308      	movs	r3, #8
 80145b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80145bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d168      	bne.n	8014696 <f_open+0x1ea>
 80145c4:	79fb      	ldrb	r3, [r7, #7]
 80145c6:	f003 0308 	and.w	r3, r3, #8
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d063      	beq.n	8014696 <f_open+0x1ea>
				dw = GET_FATTIME();
 80145ce:	f7fc fe9f 	bl	8011310 <get_fattime>
 80145d2:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80145d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145d6:	330e      	adds	r3, #14
 80145d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fd fefb 	bl	80123d6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80145e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145e2:	3316      	adds	r3, #22
 80145e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fd fef5 	bl	80123d6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80145ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145ee:	330b      	adds	r3, #11
 80145f0:	2220      	movs	r2, #32
 80145f2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80145f8:	4611      	mov	r1, r2
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fe fe4a 	bl	8013294 <ld_clust>
 8014600:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014606:	2200      	movs	r2, #0
 8014608:	4618      	mov	r0, r3
 801460a:	f7fe fe62 	bl	80132d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801460e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014610:	331c      	adds	r3, #28
 8014612:	2100      	movs	r1, #0
 8014614:	4618      	mov	r0, r3
 8014616:	f7fd fede 	bl	80123d6 <st_dword>
					fs->wflag = 1;
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	2201      	movs	r2, #1
 801461e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014622:	2b00      	cmp	r3, #0
 8014624:	d037      	beq.n	8014696 <f_open+0x1ea>
						dw = fs->winsect;
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801462a:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 801462c:	f107 0314 	add.w	r3, r7, #20
 8014630:	2200      	movs	r2, #0
 8014632:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014634:	4618      	mov	r0, r3
 8014636:	f7fe fb75 	bl	8012d24 <remove_chain>
 801463a:	4603      	mov	r3, r0
 801463c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8014640:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014644:	2b00      	cmp	r3, #0
 8014646:	d126      	bne.n	8014696 <f_open+0x1ea>
							res = move_window(fs, dw);
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801464c:	4618      	mov	r0, r3
 801464e:	f7fe f91d 	bl	801288c <move_window>
 8014652:	4603      	mov	r3, r0
 8014654:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801465c:	3a01      	subs	r2, #1
 801465e:	611a      	str	r2, [r3, #16]
 8014660:	e019      	b.n	8014696 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014662:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014666:	2b00      	cmp	r3, #0
 8014668:	d115      	bne.n	8014696 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801466a:	7ebb      	ldrb	r3, [r7, #26]
 801466c:	f003 0310 	and.w	r3, r3, #16
 8014670:	2b00      	cmp	r3, #0
 8014672:	d003      	beq.n	801467c <f_open+0x1d0>
					res = FR_NO_FILE;
 8014674:	2304      	movs	r3, #4
 8014676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801467a:	e00c      	b.n	8014696 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801467c:	79fb      	ldrb	r3, [r7, #7]
 801467e:	f003 0302 	and.w	r3, r3, #2
 8014682:	2b00      	cmp	r3, #0
 8014684:	d007      	beq.n	8014696 <f_open+0x1ea>
 8014686:	7ebb      	ldrb	r3, [r7, #26]
 8014688:	f003 0301 	and.w	r3, r3, #1
 801468c:	2b00      	cmp	r3, #0
 801468e:	d002      	beq.n	8014696 <f_open+0x1ea>
						res = FR_DENIED;
 8014690:	2307      	movs	r3, #7
 8014692:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014696:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801469a:	2b00      	cmp	r3, #0
 801469c:	d126      	bne.n	80146ec <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801469e:	79fb      	ldrb	r3, [r7, #7]
 80146a0:	f003 0308 	and.w	r3, r3, #8
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d003      	beq.n	80146b0 <f_open+0x204>
				mode |= FA_MODIFIED;
 80146a8:	79fb      	ldrb	r3, [r7, #7]
 80146aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146ae:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80146b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80146be:	79fb      	ldrb	r3, [r7, #7]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	bf8c      	ite	hi
 80146c4:	2301      	movhi	r3, #1
 80146c6:	2300      	movls	r3, #0
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	461a      	mov	r2, r3
 80146cc:	f107 0314 	add.w	r3, r7, #20
 80146d0:	4611      	mov	r1, r2
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fd ffa8 	bl	8012628 <inc_lock>
 80146d8:	4602      	mov	r2, r0
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	691b      	ldr	r3, [r3, #16]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d102      	bne.n	80146ec <f_open+0x240>
 80146e6:	2302      	movs	r3, #2
 80146e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80146ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	f040 8095 	bne.w	8014820 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80146fa:	4611      	mov	r1, r2
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7fe fdc9 	bl	8013294 <ld_clust>
 8014702:	4602      	mov	r2, r0
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801470a:	331c      	adds	r3, #28
 801470c:	4618      	mov	r0, r3
 801470e:	f7fd fe24 	bl	801235a <ld_dword>
 8014712:	4602      	mov	r2, r0
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2200      	movs	r2, #0
 801471c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801471e:	693a      	ldr	r2, [r7, #16]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	88da      	ldrh	r2, [r3, #6]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	79fa      	ldrb	r2, [r7, #7]
 8014730:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2200      	movs	r2, #0
 8014736:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	2200      	movs	r2, #0
 801473c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2200      	movs	r2, #0
 8014742:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	3330      	adds	r3, #48	@ 0x30
 8014748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801474c:	2100      	movs	r1, #0
 801474e:	4618      	mov	r0, r3
 8014750:	f7fd fe8e 	bl	8012470 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014754:	79fb      	ldrb	r3, [r7, #7]
 8014756:	f003 0320 	and.w	r3, r3, #32
 801475a:	2b00      	cmp	r3, #0
 801475c:	d060      	beq.n	8014820 <f_open+0x374>
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	68db      	ldr	r3, [r3, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d05c      	beq.n	8014820 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	68da      	ldr	r2, [r3, #12]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	895b      	ldrh	r3, [r3, #10]
 8014772:	025b      	lsls	r3, r3, #9
 8014774:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	689b      	ldr	r3, [r3, #8]
 801477a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014782:	e016      	b.n	80147b2 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014788:	4618      	mov	r0, r3
 801478a:	f7fe f93a 	bl	8012a02 <get_fat>
 801478e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014792:	2b01      	cmp	r3, #1
 8014794:	d802      	bhi.n	801479c <f_open+0x2f0>
 8014796:	2302      	movs	r3, #2
 8014798:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801479c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a2:	d102      	bne.n	80147aa <f_open+0x2fe>
 80147a4:	2301      	movs	r3, #1
 80147a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80147aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80147ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147ae:	1ad3      	subs	r3, r2, r3
 80147b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80147b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d103      	bne.n	80147c2 <f_open+0x316>
 80147ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80147bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147be:	429a      	cmp	r2, r3
 80147c0:	d8e0      	bhi.n	8014784 <f_open+0x2d8>
				}
				fp->clust = clst;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80147c6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80147c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d127      	bne.n	8014820 <f_open+0x374>
 80147d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d022      	beq.n	8014820 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80147de:	4618      	mov	r0, r3
 80147e0:	f7fe f8f0 	bl	80129c4 <clust2sect>
 80147e4:	64b8      	str	r0, [r7, #72]	@ 0x48
 80147e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d103      	bne.n	80147f4 <f_open+0x348>
						res = FR_INT_ERR;
 80147ec:	2302      	movs	r3, #2
 80147ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80147f2:	e015      	b.n	8014820 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80147f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147f6:	0a5a      	lsrs	r2, r3, #9
 80147f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147fa:	441a      	add	r2, r3
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	7858      	ldrb	r0, [r3, #1]
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	6a1a      	ldr	r2, [r3, #32]
 801480e:	2301      	movs	r3, #1
 8014810:	f7fd fd2c 	bl	801226c <disk_read>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d002      	beq.n	8014820 <f_open+0x374>
 801481a:	2301      	movs	r3, #1
 801481c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8014820:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014822:	f000 fe17 	bl	8015454 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014826:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801482a:	2b00      	cmp	r3, #0
 801482c:	d002      	beq.n	8014834 <f_open+0x388>
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2200      	movs	r2, #0
 8014832:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014834:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8014838:	4618      	mov	r0, r3
 801483a:	3768      	adds	r7, #104	@ 0x68
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b08c      	sub	sp, #48	@ 0x30
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
 801484c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	2200      	movs	r2, #0
 8014856:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	f107 0210 	add.w	r2, r7, #16
 801485e:	4611      	mov	r1, r2
 8014860:	4618      	mov	r0, r3
 8014862:	f7ff fda7 	bl	80143b4 <validate>
 8014866:	4603      	mov	r3, r0
 8014868:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801486c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014870:	2b00      	cmp	r3, #0
 8014872:	d107      	bne.n	8014884 <f_write+0x44>
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	7d5b      	ldrb	r3, [r3, #21]
 8014878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801487c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014880:	2b00      	cmp	r3, #0
 8014882:	d002      	beq.n	801488a <f_write+0x4a>
 8014884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014888:	e14b      	b.n	8014b22 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	7d1b      	ldrb	r3, [r3, #20]
 801488e:	f003 0302 	and.w	r3, r3, #2
 8014892:	2b00      	cmp	r3, #0
 8014894:	d101      	bne.n	801489a <f_write+0x5a>
 8014896:	2307      	movs	r3, #7
 8014898:	e143      	b.n	8014b22 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	699a      	ldr	r2, [r3, #24]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	441a      	add	r2, r3
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	699b      	ldr	r3, [r3, #24]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	f080 812d 	bcs.w	8014b06 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	699b      	ldr	r3, [r3, #24]
 80148b0:	43db      	mvns	r3, r3
 80148b2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80148b4:	e127      	b.n	8014b06 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	699b      	ldr	r3, [r3, #24]
 80148ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148be:	2b00      	cmp	r3, #0
 80148c0:	f040 80e3 	bne.w	8014a8a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	699b      	ldr	r3, [r3, #24]
 80148c8:	0a5b      	lsrs	r3, r3, #9
 80148ca:	693a      	ldr	r2, [r7, #16]
 80148cc:	8952      	ldrh	r2, [r2, #10]
 80148ce:	3a01      	subs	r2, #1
 80148d0:	4013      	ands	r3, r2
 80148d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80148d4:	69bb      	ldr	r3, [r7, #24]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d143      	bne.n	8014962 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	699b      	ldr	r3, [r3, #24]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d10c      	bne.n	80148fc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	689b      	ldr	r3, [r3, #8]
 80148e6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80148e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d11a      	bne.n	8014924 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	2100      	movs	r1, #0
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fe fa7b 	bl	8012dee <create_chain>
 80148f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80148fa:	e013      	b.n	8014924 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014900:	2b00      	cmp	r3, #0
 8014902:	d007      	beq.n	8014914 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	699b      	ldr	r3, [r3, #24]
 8014908:	4619      	mov	r1, r3
 801490a:	68f8      	ldr	r0, [r7, #12]
 801490c:	f7fe fb07 	bl	8012f1e <clmt_clust>
 8014910:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014912:	e007      	b.n	8014924 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	69db      	ldr	r3, [r3, #28]
 801491a:	4619      	mov	r1, r3
 801491c:	4610      	mov	r0, r2
 801491e:	f7fe fa66 	bl	8012dee <create_chain>
 8014922:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014926:	2b00      	cmp	r3, #0
 8014928:	f000 80f2 	beq.w	8014b10 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492e:	2b01      	cmp	r3, #1
 8014930:	d104      	bne.n	801493c <f_write+0xfc>
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2202      	movs	r2, #2
 8014936:	755a      	strb	r2, [r3, #21]
 8014938:	2302      	movs	r3, #2
 801493a:	e0f2      	b.n	8014b22 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014942:	d104      	bne.n	801494e <f_write+0x10e>
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	2201      	movs	r2, #1
 8014948:	755a      	strb	r2, [r3, #21]
 801494a:	2301      	movs	r3, #1
 801494c:	e0e9      	b.n	8014b22 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014952:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	689b      	ldr	r3, [r3, #8]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d102      	bne.n	8014962 <f_write+0x122>
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014960:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	7d1b      	ldrb	r3, [r3, #20]
 8014966:	b25b      	sxtb	r3, r3
 8014968:	2b00      	cmp	r3, #0
 801496a:	da18      	bge.n	801499e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	7858      	ldrb	r0, [r3, #1]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6a1a      	ldr	r2, [r3, #32]
 801497a:	2301      	movs	r3, #1
 801497c:	f7fd fc96 	bl	80122ac <disk_write>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d004      	beq.n	8014990 <f_write+0x150>
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2201      	movs	r2, #1
 801498a:	755a      	strb	r2, [r3, #21]
 801498c:	2301      	movs	r3, #1
 801498e:	e0c8      	b.n	8014b22 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	7d1b      	ldrb	r3, [r3, #20]
 8014994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014998:	b2da      	uxtb	r2, r3
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801499e:	693a      	ldr	r2, [r7, #16]
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	69db      	ldr	r3, [r3, #28]
 80149a4:	4619      	mov	r1, r3
 80149a6:	4610      	mov	r0, r2
 80149a8:	f7fe f80c 	bl	80129c4 <clust2sect>
 80149ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d104      	bne.n	80149be <f_write+0x17e>
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2202      	movs	r2, #2
 80149b8:	755a      	strb	r2, [r3, #21]
 80149ba:	2302      	movs	r3, #2
 80149bc:	e0b1      	b.n	8014b22 <f_write+0x2e2>
			sect += csect;
 80149be:	697a      	ldr	r2, [r7, #20]
 80149c0:	69bb      	ldr	r3, [r7, #24]
 80149c2:	4413      	add	r3, r2
 80149c4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	0a5b      	lsrs	r3, r3, #9
 80149ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80149cc:	6a3b      	ldr	r3, [r7, #32]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d03c      	beq.n	8014a4c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80149d2:	69ba      	ldr	r2, [r7, #24]
 80149d4:	6a3b      	ldr	r3, [r7, #32]
 80149d6:	4413      	add	r3, r2
 80149d8:	693a      	ldr	r2, [r7, #16]
 80149da:	8952      	ldrh	r2, [r2, #10]
 80149dc:	4293      	cmp	r3, r2
 80149de:	d905      	bls.n	80149ec <f_write+0x1ac>
					cc = fs->csize - csect;
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	895b      	ldrh	r3, [r3, #10]
 80149e4:	461a      	mov	r2, r3
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	7858      	ldrb	r0, [r3, #1]
 80149f0:	6a3b      	ldr	r3, [r7, #32]
 80149f2:	697a      	ldr	r2, [r7, #20]
 80149f4:	69f9      	ldr	r1, [r7, #28]
 80149f6:	f7fd fc59 	bl	80122ac <disk_write>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d004      	beq.n	8014a0a <f_write+0x1ca>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2201      	movs	r2, #1
 8014a04:	755a      	strb	r2, [r3, #21]
 8014a06:	2301      	movs	r3, #1
 8014a08:	e08b      	b.n	8014b22 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	6a1a      	ldr	r2, [r3, #32]
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	6a3a      	ldr	r2, [r7, #32]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d915      	bls.n	8014a44 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	6a1a      	ldr	r2, [r3, #32]
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	025b      	lsls	r3, r3, #9
 8014a28:	69fa      	ldr	r2, [r7, #28]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a30:	4619      	mov	r1, r3
 8014a32:	f7fd fcfc 	bl	801242e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	7d1b      	ldrb	r3, [r3, #20]
 8014a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014a44:	6a3b      	ldr	r3, [r7, #32]
 8014a46:	025b      	lsls	r3, r3, #9
 8014a48:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014a4a:	e03f      	b.n	8014acc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	6a1b      	ldr	r3, [r3, #32]
 8014a50:	697a      	ldr	r2, [r7, #20]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d016      	beq.n	8014a84 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	699a      	ldr	r2, [r3, #24]
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d210      	bcs.n	8014a84 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	7858      	ldrb	r0, [r3, #1]
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	697a      	ldr	r2, [r7, #20]
 8014a70:	f7fd fbfc 	bl	801226c <disk_read>
 8014a74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d004      	beq.n	8014a84 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	755a      	strb	r2, [r3, #21]
 8014a80:	2301      	movs	r3, #1
 8014a82:	e04e      	b.n	8014b22 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	697a      	ldr	r2, [r7, #20]
 8014a88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	699b      	ldr	r3, [r3, #24]
 8014a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a92:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014a96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d901      	bls.n	8014aa4 <f_write+0x264>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	699b      	ldr	r3, [r3, #24]
 8014aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ab2:	4413      	add	r3, r2
 8014ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ab6:	69f9      	ldr	r1, [r7, #28]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7fd fcb8 	bl	801242e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	7d1b      	ldrb	r3, [r3, #20]
 8014ac2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014ac6:	b2da      	uxtb	r2, r3
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014acc:	69fa      	ldr	r2, [r7, #28]
 8014ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ad0:	4413      	add	r3, r2
 8014ad2:	61fb      	str	r3, [r7, #28]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	699a      	ldr	r2, [r3, #24]
 8014ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ada:	441a      	add	r2, r3
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	619a      	str	r2, [r3, #24]
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	68da      	ldr	r2, [r3, #12]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	699b      	ldr	r3, [r3, #24]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	bf38      	it	cc
 8014aec:	461a      	movcc	r2, r3
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	60da      	str	r2, [r3, #12]
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	681a      	ldr	r2, [r3, #0]
 8014af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014af8:	441a      	add	r2, r3
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	601a      	str	r2, [r3, #0]
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b02:	1ad3      	subs	r3, r2, r3
 8014b04:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	f47f aed4 	bne.w	80148b6 <f_write+0x76>
 8014b0e:	e000      	b.n	8014b12 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014b10:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	7d1b      	ldrb	r3, [r3, #20]
 8014b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b1a:	b2da      	uxtb	r2, r3
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014b20:	2300      	movs	r3, #0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3730      	adds	r7, #48	@ 0x30
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}

08014b2a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014b2a:	b580      	push	{r7, lr}
 8014b2c:	b086      	sub	sp, #24
 8014b2e:	af00      	add	r7, sp, #0
 8014b30:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f107 0208 	add.w	r2, r7, #8
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7ff fc3a 	bl	80143b4 <validate>
 8014b40:	4603      	mov	r3, r0
 8014b42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014b44:	7dfb      	ldrb	r3, [r7, #23]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d168      	bne.n	8014c1c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	7d1b      	ldrb	r3, [r3, #20]
 8014b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d062      	beq.n	8014c1c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	7d1b      	ldrb	r3, [r3, #20]
 8014b5a:	b25b      	sxtb	r3, r3
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	da15      	bge.n	8014b8c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	7858      	ldrb	r0, [r3, #1]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	6a1a      	ldr	r2, [r3, #32]
 8014b6e:	2301      	movs	r3, #1
 8014b70:	f7fd fb9c 	bl	80122ac <disk_write>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d001      	beq.n	8014b7e <f_sync+0x54>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e04f      	b.n	8014c1e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	7d1b      	ldrb	r3, [r3, #20]
 8014b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b86:	b2da      	uxtb	r2, r3
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014b8c:	f7fc fbc0 	bl	8011310 <get_fattime>
 8014b90:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b98:	4619      	mov	r1, r3
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	f7fd fe76 	bl	801288c <move_window>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014ba4:	7dfb      	ldrb	r3, [r7, #23]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d138      	bne.n	8014c1c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	330b      	adds	r3, #11
 8014bb4:	781a      	ldrb	r2, [r3, #0]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	330b      	adds	r3, #11
 8014bba:	f042 0220 	orr.w	r2, r2, #32
 8014bbe:	b2d2      	uxtb	r2, r2
 8014bc0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6818      	ldr	r0, [r3, #0]
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	461a      	mov	r2, r3
 8014bcc:	68f9      	ldr	r1, [r7, #12]
 8014bce:	f7fe fb80 	bl	80132d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	f103 021c 	add.w	r2, r3, #28
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	4610      	mov	r0, r2
 8014be0:	f7fd fbf9 	bl	80123d6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	3316      	adds	r3, #22
 8014be8:	6939      	ldr	r1, [r7, #16]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7fd fbf3 	bl	80123d6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	3312      	adds	r3, #18
 8014bf4:	2100      	movs	r1, #0
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fd fbd2 	bl	80123a0 <st_word>
					fs->wflag = 1;
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	2201      	movs	r2, #1
 8014c00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7fd fe6f 	bl	80128e8 <sync_fs>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	7d1b      	ldrb	r3, [r3, #20]
 8014c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3718      	adds	r7, #24
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}

08014c26 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014c26:	b580      	push	{r7, lr}
 8014c28:	b084      	sub	sp, #16
 8014c2a:	af00      	add	r7, sp, #0
 8014c2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7ff ff7b 	bl	8014b2a <f_sync>
 8014c34:	4603      	mov	r3, r0
 8014c36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014c38:	7bfb      	ldrb	r3, [r7, #15]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d118      	bne.n	8014c70 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f107 0208 	add.w	r2, r7, #8
 8014c44:	4611      	mov	r1, r2
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7ff fbb4 	bl	80143b4 <validate>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014c50:	7bfb      	ldrb	r3, [r7, #15]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d10c      	bne.n	8014c70 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	691b      	ldr	r3, [r3, #16]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fd fd72 	bl	8012744 <dec_lock>
 8014c60:	4603      	mov	r3, r0
 8014c62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014c64:	7bfb      	ldrb	r3, [r7, #15]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d102      	bne.n	8014c70 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3710      	adds	r7, #16
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b090      	sub	sp, #64	@ 0x40
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	6078      	str	r0, [r7, #4]
 8014c82:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f107 0208 	add.w	r2, r7, #8
 8014c8a:	4611      	mov	r1, r2
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7ff fb91 	bl	80143b4 <validate>
 8014c92:	4603      	mov	r3, r0
 8014c94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014c98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d103      	bne.n	8014ca8 <f_lseek+0x2e>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	7d5b      	ldrb	r3, [r3, #21]
 8014ca4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014ca8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d002      	beq.n	8014cb6 <f_lseek+0x3c>
 8014cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014cb4:	e1e6      	b.n	8015084 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f000 80d1 	beq.w	8014e62 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc6:	d15a      	bne.n	8014d7e <f_lseek+0x104>
			tbl = fp->cltbl;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ccc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd0:	1d1a      	adds	r2, r3, #4
 8014cd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	617b      	str	r3, [r7, #20]
 8014cd8:	2302      	movs	r3, #2
 8014cda:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	689b      	ldr	r3, [r3, #8]
 8014ce0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d03a      	beq.n	8014d5e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cea:	613b      	str	r3, [r7, #16]
 8014cec:	2300      	movs	r3, #0
 8014cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cf2:	3302      	adds	r3, #2
 8014cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cf8:	60fb      	str	r3, [r7, #12]
 8014cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7fd fe7c 	bl	8012a02 <get_fat>
 8014d0a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d804      	bhi.n	8014d1c <f_lseek+0xa2>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	2202      	movs	r2, #2
 8014d16:	755a      	strb	r2, [r3, #21]
 8014d18:	2302      	movs	r3, #2
 8014d1a:	e1b3      	b.n	8015084 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d22:	d104      	bne.n	8014d2e <f_lseek+0xb4>
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2201      	movs	r2, #1
 8014d28:	755a      	strb	r2, [r3, #21]
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	e1aa      	b.n	8015084 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	3301      	adds	r3, #1
 8014d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d0de      	beq.n	8014cf6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	d809      	bhi.n	8014d54 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d42:	1d1a      	adds	r2, r3, #4
 8014d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8014d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014d48:	601a      	str	r2, [r3, #0]
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4c:	1d1a      	adds	r2, r3, #4
 8014d4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8014d50:	693a      	ldr	r2, [r7, #16]
 8014d52:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	699b      	ldr	r3, [r3, #24]
 8014d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d3c4      	bcc.n	8014ce8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d64:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d803      	bhi.n	8014d76 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d70:	2200      	movs	r2, #0
 8014d72:	601a      	str	r2, [r3, #0]
 8014d74:	e184      	b.n	8015080 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014d76:	2311      	movs	r3, #17
 8014d78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014d7c:	e180      	b.n	8015080 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	68db      	ldr	r3, [r3, #12]
 8014d82:	683a      	ldr	r2, [r7, #0]
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d902      	bls.n	8014d8e <f_lseek+0x114>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	683a      	ldr	r2, [r7, #0]
 8014d92:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	f000 8172 	beq.w	8015080 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	3b01      	subs	r3, #1
 8014da0:	4619      	mov	r1, r3
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7fe f8bb 	bl	8012f1e <clmt_clust>
 8014da8:	4602      	mov	r2, r0
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	69db      	ldr	r3, [r3, #28]
 8014db4:	4619      	mov	r1, r3
 8014db6:	4610      	mov	r0, r2
 8014db8:	f7fd fe04 	bl	80129c4 <clust2sect>
 8014dbc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014dbe:	69bb      	ldr	r3, [r7, #24]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d104      	bne.n	8014dce <f_lseek+0x154>
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2202      	movs	r2, #2
 8014dc8:	755a      	strb	r2, [r3, #21]
 8014dca:	2302      	movs	r3, #2
 8014dcc:	e15a      	b.n	8015084 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	0a5b      	lsrs	r3, r3, #9
 8014dd4:	68ba      	ldr	r2, [r7, #8]
 8014dd6:	8952      	ldrh	r2, [r2, #10]
 8014dd8:	3a01      	subs	r2, #1
 8014dda:	4013      	ands	r3, r2
 8014ddc:	69ba      	ldr	r2, [r7, #24]
 8014dde:	4413      	add	r3, r2
 8014de0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	699b      	ldr	r3, [r3, #24]
 8014de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f000 8148 	beq.w	8015080 <f_lseek+0x406>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6a1b      	ldr	r3, [r3, #32]
 8014df4:	69ba      	ldr	r2, [r7, #24]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	f000 8142 	beq.w	8015080 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	7d1b      	ldrb	r3, [r3, #20]
 8014e00:	b25b      	sxtb	r3, r3
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	da18      	bge.n	8014e38 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	7858      	ldrb	r0, [r3, #1]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6a1a      	ldr	r2, [r3, #32]
 8014e14:	2301      	movs	r3, #1
 8014e16:	f7fd fa49 	bl	80122ac <disk_write>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d004      	beq.n	8014e2a <f_lseek+0x1b0>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2201      	movs	r2, #1
 8014e24:	755a      	strb	r2, [r3, #21]
 8014e26:	2301      	movs	r3, #1
 8014e28:	e12c      	b.n	8015084 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	7d1b      	ldrb	r3, [r3, #20]
 8014e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014e32:	b2da      	uxtb	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	7858      	ldrb	r0, [r3, #1]
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014e42:	2301      	movs	r3, #1
 8014e44:	69ba      	ldr	r2, [r7, #24]
 8014e46:	f7fd fa11 	bl	801226c <disk_read>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d004      	beq.n	8014e5a <f_lseek+0x1e0>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2201      	movs	r2, #1
 8014e54:	755a      	strb	r2, [r3, #21]
 8014e56:	2301      	movs	r3, #1
 8014e58:	e114      	b.n	8015084 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	69ba      	ldr	r2, [r7, #24]
 8014e5e:	621a      	str	r2, [r3, #32]
 8014e60:	e10e      	b.n	8015080 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d908      	bls.n	8014e7e <f_lseek+0x204>
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	7d1b      	ldrb	r3, [r3, #20]
 8014e70:	f003 0302 	and.w	r3, r3, #2
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d102      	bne.n	8014e7e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	699b      	ldr	r3, [r3, #24]
 8014e82:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014e84:	2300      	movs	r3, #0
 8014e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014e8c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f000 80a7 	beq.w	8014fe4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	895b      	ldrh	r3, [r3, #10]
 8014e9a:	025b      	lsls	r3, r3, #9
 8014e9c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014e9e:	6a3b      	ldr	r3, [r7, #32]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d01b      	beq.n	8014edc <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	1e5a      	subs	r2, r3, #1
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8014eae:	6a3b      	ldr	r3, [r7, #32]
 8014eb0:	1e59      	subs	r1, r3, #1
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d30f      	bcc.n	8014edc <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014ebc:	6a3b      	ldr	r3, [r7, #32]
 8014ebe:	1e5a      	subs	r2, r3, #1
 8014ec0:	69fb      	ldr	r3, [r7, #28]
 8014ec2:	425b      	negs	r3, r3
 8014ec4:	401a      	ands	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	699b      	ldr	r3, [r3, #24]
 8014ece:	683a      	ldr	r2, [r7, #0]
 8014ed0:	1ad3      	subs	r3, r2, r3
 8014ed2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	69db      	ldr	r3, [r3, #28]
 8014ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014eda:	e022      	b.n	8014f22 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	689b      	ldr	r3, [r3, #8]
 8014ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d119      	bne.n	8014f1c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2100      	movs	r1, #0
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fd ff7e 	bl	8012dee <create_chain>
 8014ef2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d104      	bne.n	8014f04 <f_lseek+0x28a>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2202      	movs	r2, #2
 8014efe:	755a      	strb	r2, [r3, #21]
 8014f00:	2302      	movs	r3, #2
 8014f02:	e0bf      	b.n	8015084 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f0a:	d104      	bne.n	8014f16 <f_lseek+0x29c>
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	755a      	strb	r2, [r3, #21]
 8014f12:	2301      	movs	r3, #1
 8014f14:	e0b6      	b.n	8015084 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f1a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f20:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d05d      	beq.n	8014fe4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8014f28:	e03a      	b.n	8014fa0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8014f2a:	683a      	ldr	r2, [r7, #0]
 8014f2c:	69fb      	ldr	r3, [r7, #28]
 8014f2e:	1ad3      	subs	r3, r2, r3
 8014f30:	603b      	str	r3, [r7, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	699a      	ldr	r2, [r3, #24]
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	441a      	add	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	7d1b      	ldrb	r3, [r3, #20]
 8014f42:	f003 0302 	and.w	r3, r3, #2
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d00b      	beq.n	8014f62 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fd ff4d 	bl	8012dee <create_chain>
 8014f54:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d108      	bne.n	8014f6e <f_lseek+0x2f4>
							ofs = 0; break;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	603b      	str	r3, [r7, #0]
 8014f60:	e022      	b.n	8014fa8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7fd fd4b 	bl	8012a02 <get_fat>
 8014f6c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f74:	d104      	bne.n	8014f80 <f_lseek+0x306>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2201      	movs	r2, #1
 8014f7a:	755a      	strb	r2, [r3, #21]
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	e081      	b.n	8015084 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d904      	bls.n	8014f90 <f_lseek+0x316>
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	699b      	ldr	r3, [r3, #24]
 8014f8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d304      	bcc.n	8014f9a <f_lseek+0x320>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2202      	movs	r2, #2
 8014f94:	755a      	strb	r2, [r3, #21]
 8014f96:	2302      	movs	r3, #2
 8014f98:	e074      	b.n	8015084 <f_lseek+0x40a>
					fp->clust = clst;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f9e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014fa0:	683a      	ldr	r2, [r7, #0]
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d8c0      	bhi.n	8014f2a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	699a      	ldr	r2, [r3, #24]
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	441a      	add	r2, r3
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d012      	beq.n	8014fe4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fd fcfe 	bl	80129c4 <clust2sect>
 8014fc8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d104      	bne.n	8014fda <f_lseek+0x360>
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2202      	movs	r2, #2
 8014fd4:	755a      	strb	r2, [r3, #21]
 8014fd6:	2302      	movs	r3, #2
 8014fd8:	e054      	b.n	8015084 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	0a5b      	lsrs	r3, r3, #9
 8014fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014fe0:	4413      	add	r3, r2
 8014fe2:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	699a      	ldr	r2, [r3, #24]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d90a      	bls.n	8015006 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	699a      	ldr	r2, [r3, #24]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	7d1b      	ldrb	r3, [r3, #20]
 8014ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015000:	b2da      	uxtb	r2, r3
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	699b      	ldr	r3, [r3, #24]
 801500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801500e:	2b00      	cmp	r3, #0
 8015010:	d036      	beq.n	8015080 <f_lseek+0x406>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6a1b      	ldr	r3, [r3, #32]
 8015016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015018:	429a      	cmp	r2, r3
 801501a:	d031      	beq.n	8015080 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	7d1b      	ldrb	r3, [r3, #20]
 8015020:	b25b      	sxtb	r3, r3
 8015022:	2b00      	cmp	r3, #0
 8015024:	da18      	bge.n	8015058 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	7858      	ldrb	r0, [r3, #1]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	6a1a      	ldr	r2, [r3, #32]
 8015034:	2301      	movs	r3, #1
 8015036:	f7fd f939 	bl	80122ac <disk_write>
 801503a:	4603      	mov	r3, r0
 801503c:	2b00      	cmp	r3, #0
 801503e:	d004      	beq.n	801504a <f_lseek+0x3d0>
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2201      	movs	r2, #1
 8015044:	755a      	strb	r2, [r3, #21]
 8015046:	2301      	movs	r3, #1
 8015048:	e01c      	b.n	8015084 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	7d1b      	ldrb	r3, [r3, #20]
 801504e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015052:	b2da      	uxtb	r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	7858      	ldrb	r0, [r3, #1]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015062:	2301      	movs	r3, #1
 8015064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015066:	f7fd f901 	bl	801226c <disk_read>
 801506a:	4603      	mov	r3, r0
 801506c:	2b00      	cmp	r3, #0
 801506e:	d004      	beq.n	801507a <f_lseek+0x400>
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2201      	movs	r2, #1
 8015074:	755a      	strb	r2, [r3, #21]
 8015076:	2301      	movs	r3, #1
 8015078:	e004      	b.n	8015084 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801507e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015080:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8015084:	4618      	mov	r0, r3
 8015086:	3740      	adds	r7, #64	@ 0x40
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b092      	sub	sp, #72	@ 0x48
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015098:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801509c:	f107 030c 	add.w	r3, r7, #12
 80150a0:	2200      	movs	r2, #0
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fe ff3a 	bl	8013f1c <find_volume>
 80150a8:	4603      	mov	r3, r0
 80150aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80150ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	f040 8099 	bne.w	80151ea <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80150b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80150be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150c0:	695a      	ldr	r2, [r3, #20]
 80150c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150c4:	699b      	ldr	r3, [r3, #24]
 80150c6:	3b02      	subs	r3, #2
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d804      	bhi.n	80150d6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80150cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150ce:	695a      	ldr	r2, [r3, #20]
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	601a      	str	r2, [r3, #0]
 80150d4:	e089      	b.n	80151ea <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80150d6:	2300      	movs	r3, #0
 80150d8:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80150da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	2b01      	cmp	r3, #1
 80150e0:	d128      	bne.n	8015134 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80150e2:	2302      	movs	r3, #2
 80150e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80150e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150e8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80150ea:	f107 0314 	add.w	r3, r7, #20
 80150ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fd fc86 	bl	8012a02 <get_fat>
 80150f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80150f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150fe:	d103      	bne.n	8015108 <f_getfree+0x7c>
 8015100:	2301      	movs	r3, #1
 8015102:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015106:	e063      	b.n	80151d0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8015108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801510a:	2b01      	cmp	r3, #1
 801510c:	d103      	bne.n	8015116 <f_getfree+0x8a>
 801510e:	2302      	movs	r3, #2
 8015110:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015114:	e05c      	b.n	80151d0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8015116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015118:	2b00      	cmp	r3, #0
 801511a:	d102      	bne.n	8015122 <f_getfree+0x96>
 801511c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801511e:	3301      	adds	r3, #1
 8015120:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8015122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015124:	3301      	adds	r3, #1
 8015126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801512a:	699b      	ldr	r3, [r3, #24]
 801512c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801512e:	429a      	cmp	r2, r3
 8015130:	d3db      	bcc.n	80150ea <f_getfree+0x5e>
 8015132:	e04d      	b.n	80151d0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8015134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015136:	699b      	ldr	r3, [r3, #24]
 8015138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801513e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8015140:	2300      	movs	r3, #0
 8015142:	637b      	str	r3, [r7, #52]	@ 0x34
 8015144:	2300      	movs	r3, #0
 8015146:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8015148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801514a:	2b00      	cmp	r3, #0
 801514c:	d113      	bne.n	8015176 <f_getfree+0xea>
							res = move_window(fs, sect++);
 801514e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015152:	1c5a      	adds	r2, r3, #1
 8015154:	63ba      	str	r2, [r7, #56]	@ 0x38
 8015156:	4619      	mov	r1, r3
 8015158:	f7fd fb98 	bl	801288c <move_window>
 801515c:	4603      	mov	r3, r0
 801515e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8015162:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015166:	2b00      	cmp	r3, #0
 8015168:	d131      	bne.n	80151ce <f_getfree+0x142>
							p = fs->win;
 801516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801516c:	3334      	adds	r3, #52	@ 0x34
 801516e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8015170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015174:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8015176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015178:	781b      	ldrb	r3, [r3, #0]
 801517a:	2b02      	cmp	r3, #2
 801517c:	d10f      	bne.n	801519e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801517e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015180:	f7fd f8d2 	bl	8012328 <ld_word>
 8015184:	4603      	mov	r3, r0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d102      	bne.n	8015190 <f_getfree+0x104>
 801518a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801518c:	3301      	adds	r3, #1
 801518e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8015190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015192:	3302      	adds	r3, #2
 8015194:	633b      	str	r3, [r7, #48]	@ 0x30
 8015196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015198:	3b02      	subs	r3, #2
 801519a:	637b      	str	r3, [r7, #52]	@ 0x34
 801519c:	e010      	b.n	80151c0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801519e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80151a0:	f7fd f8db 	bl	801235a <ld_dword>
 80151a4:	4603      	mov	r3, r0
 80151a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d102      	bne.n	80151b4 <f_getfree+0x128>
 80151ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80151b0:	3301      	adds	r3, #1
 80151b2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80151b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151b6:	3304      	adds	r3, #4
 80151b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80151ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151bc:	3b04      	subs	r3, #4
 80151be:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80151c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80151c2:	3b01      	subs	r3, #1
 80151c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80151c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d1bd      	bne.n	8015148 <f_getfree+0xbc>
 80151cc:	e000      	b.n	80151d0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80151ce:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151d4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80151d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151da:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80151dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151de:	791a      	ldrb	r2, [r3, #4]
 80151e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151e2:	f042 0201 	orr.w	r2, r2, #1
 80151e6:	b2d2      	uxtb	r2, r2
 80151e8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80151ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3748      	adds	r7, #72	@ 0x48
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}
	...

080151f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80151f8:	b480      	push	{r7}
 80151fa:	b087      	sub	sp, #28
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	4613      	mov	r3, r2
 8015204:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015206:	2301      	movs	r3, #1
 8015208:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801520e:	4b1f      	ldr	r3, [pc, #124]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015210:	7a5b      	ldrb	r3, [r3, #9]
 8015212:	b2db      	uxtb	r3, r3
 8015214:	2b00      	cmp	r3, #0
 8015216:	d131      	bne.n	801527c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015218:	4b1c      	ldr	r3, [pc, #112]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 801521a:	7a5b      	ldrb	r3, [r3, #9]
 801521c:	b2db      	uxtb	r3, r3
 801521e:	461a      	mov	r2, r3
 8015220:	4b1a      	ldr	r3, [pc, #104]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015222:	2100      	movs	r1, #0
 8015224:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015226:	4b19      	ldr	r3, [pc, #100]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015228:	7a5b      	ldrb	r3, [r3, #9]
 801522a:	b2db      	uxtb	r3, r3
 801522c:	4a17      	ldr	r2, [pc, #92]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	4413      	add	r3, r2
 8015232:	68fa      	ldr	r2, [r7, #12]
 8015234:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015236:	4b15      	ldr	r3, [pc, #84]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015238:	7a5b      	ldrb	r3, [r3, #9]
 801523a:	b2db      	uxtb	r3, r3
 801523c:	461a      	mov	r2, r3
 801523e:	4b13      	ldr	r3, [pc, #76]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015240:	4413      	add	r3, r2
 8015242:	79fa      	ldrb	r2, [r7, #7]
 8015244:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015246:	4b11      	ldr	r3, [pc, #68]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015248:	7a5b      	ldrb	r3, [r3, #9]
 801524a:	b2db      	uxtb	r3, r3
 801524c:	1c5a      	adds	r2, r3, #1
 801524e:	b2d1      	uxtb	r1, r2
 8015250:	4a0e      	ldr	r2, [pc, #56]	@ (801528c <FATFS_LinkDriverEx+0x94>)
 8015252:	7251      	strb	r1, [r2, #9]
 8015254:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015256:	7dbb      	ldrb	r3, [r7, #22]
 8015258:	3330      	adds	r3, #48	@ 0x30
 801525a:	b2da      	uxtb	r2, r3
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	3301      	adds	r3, #1
 8015264:	223a      	movs	r2, #58	@ 0x3a
 8015266:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	3302      	adds	r3, #2
 801526c:	222f      	movs	r2, #47	@ 0x2f
 801526e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	3303      	adds	r3, #3
 8015274:	2200      	movs	r2, #0
 8015276:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015278:	2300      	movs	r3, #0
 801527a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801527c:	7dfb      	ldrb	r3, [r7, #23]
}
 801527e:	4618      	mov	r0, r3
 8015280:	371c      	adds	r7, #28
 8015282:	46bd      	mov	sp, r7
 8015284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015288:	4770      	bx	lr
 801528a:	bf00      	nop
 801528c:	20000d7c 	.word	0x20000d7c

08015290 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801529a:	2200      	movs	r2, #0
 801529c:	6839      	ldr	r1, [r7, #0]
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7ff ffaa 	bl	80151f8 <FATFS_LinkDriverEx>
 80152a4:	4603      	mov	r3, r0
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3708      	adds	r7, #8
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
	...

080152b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b085      	sub	sp, #20
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	6039      	str	r1, [r7, #0]
 80152ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80152bc:	88fb      	ldrh	r3, [r7, #6]
 80152be:	2b7f      	cmp	r3, #127	@ 0x7f
 80152c0:	d802      	bhi.n	80152c8 <ff_convert+0x18>
		c = chr;
 80152c2:	88fb      	ldrh	r3, [r7, #6]
 80152c4:	81fb      	strh	r3, [r7, #14]
 80152c6:	e025      	b.n	8015314 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d00b      	beq.n	80152e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80152ce:	88fb      	ldrh	r3, [r7, #6]
 80152d0:	2bff      	cmp	r3, #255	@ 0xff
 80152d2:	d805      	bhi.n	80152e0 <ff_convert+0x30>
 80152d4:	88fb      	ldrh	r3, [r7, #6]
 80152d6:	3b80      	subs	r3, #128	@ 0x80
 80152d8:	4a12      	ldr	r2, [pc, #72]	@ (8015324 <ff_convert+0x74>)
 80152da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152de:	e000      	b.n	80152e2 <ff_convert+0x32>
 80152e0:	2300      	movs	r3, #0
 80152e2:	81fb      	strh	r3, [r7, #14]
 80152e4:	e016      	b.n	8015314 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80152e6:	2300      	movs	r3, #0
 80152e8:	81fb      	strh	r3, [r7, #14]
 80152ea:	e009      	b.n	8015300 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80152ec:	89fb      	ldrh	r3, [r7, #14]
 80152ee:	4a0d      	ldr	r2, [pc, #52]	@ (8015324 <ff_convert+0x74>)
 80152f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152f4:	88fa      	ldrh	r2, [r7, #6]
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d006      	beq.n	8015308 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80152fa:	89fb      	ldrh	r3, [r7, #14]
 80152fc:	3301      	adds	r3, #1
 80152fe:	81fb      	strh	r3, [r7, #14]
 8015300:	89fb      	ldrh	r3, [r7, #14]
 8015302:	2b7f      	cmp	r3, #127	@ 0x7f
 8015304:	d9f2      	bls.n	80152ec <ff_convert+0x3c>
 8015306:	e000      	b.n	801530a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015308:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801530a:	89fb      	ldrh	r3, [r7, #14]
 801530c:	3380      	adds	r3, #128	@ 0x80
 801530e:	b29b      	uxth	r3, r3
 8015310:	b2db      	uxtb	r3, r3
 8015312:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015314:	89fb      	ldrh	r3, [r7, #14]
}
 8015316:	4618      	mov	r0, r3
 8015318:	3714      	adds	r7, #20
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	0801809c 	.word	0x0801809c

08015328 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015328:	b480      	push	{r7}
 801532a:	b087      	sub	sp, #28
 801532c:	af00      	add	r7, sp, #0
 801532e:	4603      	mov	r3, r0
 8015330:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015332:	88fb      	ldrh	r3, [r7, #6]
 8015334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015338:	d201      	bcs.n	801533e <ff_wtoupper+0x16>
 801533a:	4b3e      	ldr	r3, [pc, #248]	@ (8015434 <ff_wtoupper+0x10c>)
 801533c:	e000      	b.n	8015340 <ff_wtoupper+0x18>
 801533e:	4b3e      	ldr	r3, [pc, #248]	@ (8015438 <ff_wtoupper+0x110>)
 8015340:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	1c9a      	adds	r2, r3, #2
 8015346:	617a      	str	r2, [r7, #20]
 8015348:	881b      	ldrh	r3, [r3, #0]
 801534a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801534c:	8a7b      	ldrh	r3, [r7, #18]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d068      	beq.n	8015424 <ff_wtoupper+0xfc>
 8015352:	88fa      	ldrh	r2, [r7, #6]
 8015354:	8a7b      	ldrh	r3, [r7, #18]
 8015356:	429a      	cmp	r2, r3
 8015358:	d364      	bcc.n	8015424 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	1c9a      	adds	r2, r3, #2
 801535e:	617a      	str	r2, [r7, #20]
 8015360:	881b      	ldrh	r3, [r3, #0]
 8015362:	823b      	strh	r3, [r7, #16]
 8015364:	8a3b      	ldrh	r3, [r7, #16]
 8015366:	0a1b      	lsrs	r3, r3, #8
 8015368:	81fb      	strh	r3, [r7, #14]
 801536a:	8a3b      	ldrh	r3, [r7, #16]
 801536c:	b2db      	uxtb	r3, r3
 801536e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015370:	88fa      	ldrh	r2, [r7, #6]
 8015372:	8a79      	ldrh	r1, [r7, #18]
 8015374:	8a3b      	ldrh	r3, [r7, #16]
 8015376:	440b      	add	r3, r1
 8015378:	429a      	cmp	r2, r3
 801537a:	da49      	bge.n	8015410 <ff_wtoupper+0xe8>
			switch (cmd) {
 801537c:	89fb      	ldrh	r3, [r7, #14]
 801537e:	2b08      	cmp	r3, #8
 8015380:	d84f      	bhi.n	8015422 <ff_wtoupper+0xfa>
 8015382:	a201      	add	r2, pc, #4	@ (adr r2, 8015388 <ff_wtoupper+0x60>)
 8015384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015388:	080153ad 	.word	0x080153ad
 801538c:	080153bf 	.word	0x080153bf
 8015390:	080153d5 	.word	0x080153d5
 8015394:	080153dd 	.word	0x080153dd
 8015398:	080153e5 	.word	0x080153e5
 801539c:	080153ed 	.word	0x080153ed
 80153a0:	080153f5 	.word	0x080153f5
 80153a4:	080153fd 	.word	0x080153fd
 80153a8:	08015405 	.word	0x08015405
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80153ac:	88fa      	ldrh	r2, [r7, #6]
 80153ae:	8a7b      	ldrh	r3, [r7, #18]
 80153b0:	1ad3      	subs	r3, r2, r3
 80153b2:	005b      	lsls	r3, r3, #1
 80153b4:	697a      	ldr	r2, [r7, #20]
 80153b6:	4413      	add	r3, r2
 80153b8:	881b      	ldrh	r3, [r3, #0]
 80153ba:	80fb      	strh	r3, [r7, #6]
 80153bc:	e027      	b.n	801540e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80153be:	88fa      	ldrh	r2, [r7, #6]
 80153c0:	8a7b      	ldrh	r3, [r7, #18]
 80153c2:	1ad3      	subs	r3, r2, r3
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	f003 0301 	and.w	r3, r3, #1
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	88fa      	ldrh	r2, [r7, #6]
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	80fb      	strh	r3, [r7, #6]
 80153d2:	e01c      	b.n	801540e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80153d4:	88fb      	ldrh	r3, [r7, #6]
 80153d6:	3b10      	subs	r3, #16
 80153d8:	80fb      	strh	r3, [r7, #6]
 80153da:	e018      	b.n	801540e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80153dc:	88fb      	ldrh	r3, [r7, #6]
 80153de:	3b20      	subs	r3, #32
 80153e0:	80fb      	strh	r3, [r7, #6]
 80153e2:	e014      	b.n	801540e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80153e4:	88fb      	ldrh	r3, [r7, #6]
 80153e6:	3b30      	subs	r3, #48	@ 0x30
 80153e8:	80fb      	strh	r3, [r7, #6]
 80153ea:	e010      	b.n	801540e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80153ec:	88fb      	ldrh	r3, [r7, #6]
 80153ee:	3b1a      	subs	r3, #26
 80153f0:	80fb      	strh	r3, [r7, #6]
 80153f2:	e00c      	b.n	801540e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80153f4:	88fb      	ldrh	r3, [r7, #6]
 80153f6:	3308      	adds	r3, #8
 80153f8:	80fb      	strh	r3, [r7, #6]
 80153fa:	e008      	b.n	801540e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80153fc:	88fb      	ldrh	r3, [r7, #6]
 80153fe:	3b50      	subs	r3, #80	@ 0x50
 8015400:	80fb      	strh	r3, [r7, #6]
 8015402:	e004      	b.n	801540e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015404:	88fb      	ldrh	r3, [r7, #6]
 8015406:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801540a:	80fb      	strh	r3, [r7, #6]
 801540c:	bf00      	nop
			}
			break;
 801540e:	e008      	b.n	8015422 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015410:	89fb      	ldrh	r3, [r7, #14]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d195      	bne.n	8015342 <ff_wtoupper+0x1a>
 8015416:	8a3b      	ldrh	r3, [r7, #16]
 8015418:	005b      	lsls	r3, r3, #1
 801541a:	697a      	ldr	r2, [r7, #20]
 801541c:	4413      	add	r3, r2
 801541e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015420:	e78f      	b.n	8015342 <ff_wtoupper+0x1a>
			break;
 8015422:	bf00      	nop
	}

	return chr;
 8015424:	88fb      	ldrh	r3, [r7, #6]
}
 8015426:	4618      	mov	r0, r3
 8015428:	371c      	adds	r7, #28
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr
 8015432:	bf00      	nop
 8015434:	0801819c 	.word	0x0801819c
 8015438:	08018390 	.word	0x08018390

0801543c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f000 f811 	bl	801546c <malloc>
 801544a:	4603      	mov	r3, r0
}
 801544c:	4618      	mov	r0, r3
 801544e:	3708      	adds	r7, #8
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f000 f80d 	bl	801547c <free>
}
 8015462:	bf00      	nop
 8015464:	3708      	adds	r7, #8
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
	...

0801546c <malloc>:
 801546c:	4b02      	ldr	r3, [pc, #8]	@ (8015478 <malloc+0xc>)
 801546e:	4601      	mov	r1, r0
 8015470:	6818      	ldr	r0, [r3, #0]
 8015472:	f000 b82d 	b.w	80154d0 <_malloc_r>
 8015476:	bf00      	nop
 8015478:	20000234 	.word	0x20000234

0801547c <free>:
 801547c:	4b02      	ldr	r3, [pc, #8]	@ (8015488 <free+0xc>)
 801547e:	4601      	mov	r1, r0
 8015480:	6818      	ldr	r0, [r3, #0]
 8015482:	f000 bb7d 	b.w	8015b80 <_free_r>
 8015486:	bf00      	nop
 8015488:	20000234 	.word	0x20000234

0801548c <sbrk_aligned>:
 801548c:	b570      	push	{r4, r5, r6, lr}
 801548e:	4e0f      	ldr	r6, [pc, #60]	@ (80154cc <sbrk_aligned+0x40>)
 8015490:	460c      	mov	r4, r1
 8015492:	6831      	ldr	r1, [r6, #0]
 8015494:	4605      	mov	r5, r0
 8015496:	b911      	cbnz	r1, 801549e <sbrk_aligned+0x12>
 8015498:	f000 fb22 	bl	8015ae0 <_sbrk_r>
 801549c:	6030      	str	r0, [r6, #0]
 801549e:	4621      	mov	r1, r4
 80154a0:	4628      	mov	r0, r5
 80154a2:	f000 fb1d 	bl	8015ae0 <_sbrk_r>
 80154a6:	1c43      	adds	r3, r0, #1
 80154a8:	d103      	bne.n	80154b2 <sbrk_aligned+0x26>
 80154aa:	f04f 34ff 	mov.w	r4, #4294967295
 80154ae:	4620      	mov	r0, r4
 80154b0:	bd70      	pop	{r4, r5, r6, pc}
 80154b2:	1cc4      	adds	r4, r0, #3
 80154b4:	f024 0403 	bic.w	r4, r4, #3
 80154b8:	42a0      	cmp	r0, r4
 80154ba:	d0f8      	beq.n	80154ae <sbrk_aligned+0x22>
 80154bc:	1a21      	subs	r1, r4, r0
 80154be:	4628      	mov	r0, r5
 80154c0:	f000 fb0e 	bl	8015ae0 <_sbrk_r>
 80154c4:	3001      	adds	r0, #1
 80154c6:	d1f2      	bne.n	80154ae <sbrk_aligned+0x22>
 80154c8:	e7ef      	b.n	80154aa <sbrk_aligned+0x1e>
 80154ca:	bf00      	nop
 80154cc:	20000d88 	.word	0x20000d88

080154d0 <_malloc_r>:
 80154d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154d4:	1ccd      	adds	r5, r1, #3
 80154d6:	f025 0503 	bic.w	r5, r5, #3
 80154da:	3508      	adds	r5, #8
 80154dc:	2d0c      	cmp	r5, #12
 80154de:	bf38      	it	cc
 80154e0:	250c      	movcc	r5, #12
 80154e2:	2d00      	cmp	r5, #0
 80154e4:	4606      	mov	r6, r0
 80154e6:	db01      	blt.n	80154ec <_malloc_r+0x1c>
 80154e8:	42a9      	cmp	r1, r5
 80154ea:	d904      	bls.n	80154f6 <_malloc_r+0x26>
 80154ec:	230c      	movs	r3, #12
 80154ee:	6033      	str	r3, [r6, #0]
 80154f0:	2000      	movs	r0, #0
 80154f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80155cc <_malloc_r+0xfc>
 80154fa:	f000 f869 	bl	80155d0 <__malloc_lock>
 80154fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015502:	461c      	mov	r4, r3
 8015504:	bb44      	cbnz	r4, 8015558 <_malloc_r+0x88>
 8015506:	4629      	mov	r1, r5
 8015508:	4630      	mov	r0, r6
 801550a:	f7ff ffbf 	bl	801548c <sbrk_aligned>
 801550e:	1c43      	adds	r3, r0, #1
 8015510:	4604      	mov	r4, r0
 8015512:	d158      	bne.n	80155c6 <_malloc_r+0xf6>
 8015514:	f8d8 4000 	ldr.w	r4, [r8]
 8015518:	4627      	mov	r7, r4
 801551a:	2f00      	cmp	r7, #0
 801551c:	d143      	bne.n	80155a6 <_malloc_r+0xd6>
 801551e:	2c00      	cmp	r4, #0
 8015520:	d04b      	beq.n	80155ba <_malloc_r+0xea>
 8015522:	6823      	ldr	r3, [r4, #0]
 8015524:	4639      	mov	r1, r7
 8015526:	4630      	mov	r0, r6
 8015528:	eb04 0903 	add.w	r9, r4, r3
 801552c:	f000 fad8 	bl	8015ae0 <_sbrk_r>
 8015530:	4581      	cmp	r9, r0
 8015532:	d142      	bne.n	80155ba <_malloc_r+0xea>
 8015534:	6821      	ldr	r1, [r4, #0]
 8015536:	1a6d      	subs	r5, r5, r1
 8015538:	4629      	mov	r1, r5
 801553a:	4630      	mov	r0, r6
 801553c:	f7ff ffa6 	bl	801548c <sbrk_aligned>
 8015540:	3001      	adds	r0, #1
 8015542:	d03a      	beq.n	80155ba <_malloc_r+0xea>
 8015544:	6823      	ldr	r3, [r4, #0]
 8015546:	442b      	add	r3, r5
 8015548:	6023      	str	r3, [r4, #0]
 801554a:	f8d8 3000 	ldr.w	r3, [r8]
 801554e:	685a      	ldr	r2, [r3, #4]
 8015550:	bb62      	cbnz	r2, 80155ac <_malloc_r+0xdc>
 8015552:	f8c8 7000 	str.w	r7, [r8]
 8015556:	e00f      	b.n	8015578 <_malloc_r+0xa8>
 8015558:	6822      	ldr	r2, [r4, #0]
 801555a:	1b52      	subs	r2, r2, r5
 801555c:	d420      	bmi.n	80155a0 <_malloc_r+0xd0>
 801555e:	2a0b      	cmp	r2, #11
 8015560:	d917      	bls.n	8015592 <_malloc_r+0xc2>
 8015562:	1961      	adds	r1, r4, r5
 8015564:	42a3      	cmp	r3, r4
 8015566:	6025      	str	r5, [r4, #0]
 8015568:	bf18      	it	ne
 801556a:	6059      	strne	r1, [r3, #4]
 801556c:	6863      	ldr	r3, [r4, #4]
 801556e:	bf08      	it	eq
 8015570:	f8c8 1000 	streq.w	r1, [r8]
 8015574:	5162      	str	r2, [r4, r5]
 8015576:	604b      	str	r3, [r1, #4]
 8015578:	4630      	mov	r0, r6
 801557a:	f000 f82f 	bl	80155dc <__malloc_unlock>
 801557e:	f104 000b 	add.w	r0, r4, #11
 8015582:	1d23      	adds	r3, r4, #4
 8015584:	f020 0007 	bic.w	r0, r0, #7
 8015588:	1ac2      	subs	r2, r0, r3
 801558a:	bf1c      	itt	ne
 801558c:	1a1b      	subne	r3, r3, r0
 801558e:	50a3      	strne	r3, [r4, r2]
 8015590:	e7af      	b.n	80154f2 <_malloc_r+0x22>
 8015592:	6862      	ldr	r2, [r4, #4]
 8015594:	42a3      	cmp	r3, r4
 8015596:	bf0c      	ite	eq
 8015598:	f8c8 2000 	streq.w	r2, [r8]
 801559c:	605a      	strne	r2, [r3, #4]
 801559e:	e7eb      	b.n	8015578 <_malloc_r+0xa8>
 80155a0:	4623      	mov	r3, r4
 80155a2:	6864      	ldr	r4, [r4, #4]
 80155a4:	e7ae      	b.n	8015504 <_malloc_r+0x34>
 80155a6:	463c      	mov	r4, r7
 80155a8:	687f      	ldr	r7, [r7, #4]
 80155aa:	e7b6      	b.n	801551a <_malloc_r+0x4a>
 80155ac:	461a      	mov	r2, r3
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	42a3      	cmp	r3, r4
 80155b2:	d1fb      	bne.n	80155ac <_malloc_r+0xdc>
 80155b4:	2300      	movs	r3, #0
 80155b6:	6053      	str	r3, [r2, #4]
 80155b8:	e7de      	b.n	8015578 <_malloc_r+0xa8>
 80155ba:	230c      	movs	r3, #12
 80155bc:	6033      	str	r3, [r6, #0]
 80155be:	4630      	mov	r0, r6
 80155c0:	f000 f80c 	bl	80155dc <__malloc_unlock>
 80155c4:	e794      	b.n	80154f0 <_malloc_r+0x20>
 80155c6:	6005      	str	r5, [r0, #0]
 80155c8:	e7d6      	b.n	8015578 <_malloc_r+0xa8>
 80155ca:	bf00      	nop
 80155cc:	20000d8c 	.word	0x20000d8c

080155d0 <__malloc_lock>:
 80155d0:	4801      	ldr	r0, [pc, #4]	@ (80155d8 <__malloc_lock+0x8>)
 80155d2:	f000 bad2 	b.w	8015b7a <__retarget_lock_acquire_recursive>
 80155d6:	bf00      	nop
 80155d8:	20000ed0 	.word	0x20000ed0

080155dc <__malloc_unlock>:
 80155dc:	4801      	ldr	r0, [pc, #4]	@ (80155e4 <__malloc_unlock+0x8>)
 80155de:	f000 bacd 	b.w	8015b7c <__retarget_lock_release_recursive>
 80155e2:	bf00      	nop
 80155e4:	20000ed0 	.word	0x20000ed0

080155e8 <std>:
 80155e8:	2300      	movs	r3, #0
 80155ea:	b510      	push	{r4, lr}
 80155ec:	4604      	mov	r4, r0
 80155ee:	e9c0 3300 	strd	r3, r3, [r0]
 80155f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155f6:	6083      	str	r3, [r0, #8]
 80155f8:	8181      	strh	r1, [r0, #12]
 80155fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80155fc:	81c2      	strh	r2, [r0, #14]
 80155fe:	6183      	str	r3, [r0, #24]
 8015600:	4619      	mov	r1, r3
 8015602:	2208      	movs	r2, #8
 8015604:	305c      	adds	r0, #92	@ 0x5c
 8015606:	f000 fa2f 	bl	8015a68 <memset>
 801560a:	4b0d      	ldr	r3, [pc, #52]	@ (8015640 <std+0x58>)
 801560c:	6263      	str	r3, [r4, #36]	@ 0x24
 801560e:	4b0d      	ldr	r3, [pc, #52]	@ (8015644 <std+0x5c>)
 8015610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015612:	4b0d      	ldr	r3, [pc, #52]	@ (8015648 <std+0x60>)
 8015614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015616:	4b0d      	ldr	r3, [pc, #52]	@ (801564c <std+0x64>)
 8015618:	6323      	str	r3, [r4, #48]	@ 0x30
 801561a:	4b0d      	ldr	r3, [pc, #52]	@ (8015650 <std+0x68>)
 801561c:	6224      	str	r4, [r4, #32]
 801561e:	429c      	cmp	r4, r3
 8015620:	d006      	beq.n	8015630 <std+0x48>
 8015622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015626:	4294      	cmp	r4, r2
 8015628:	d002      	beq.n	8015630 <std+0x48>
 801562a:	33d0      	adds	r3, #208	@ 0xd0
 801562c:	429c      	cmp	r4, r3
 801562e:	d105      	bne.n	801563c <std+0x54>
 8015630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015638:	f000 ba9e 	b.w	8015b78 <__retarget_lock_init_recursive>
 801563c:	bd10      	pop	{r4, pc}
 801563e:	bf00      	nop
 8015640:	080158b9 	.word	0x080158b9
 8015644:	080158db 	.word	0x080158db
 8015648:	08015913 	.word	0x08015913
 801564c:	08015937 	.word	0x08015937
 8015650:	20000d90 	.word	0x20000d90

08015654 <stdio_exit_handler>:
 8015654:	4a02      	ldr	r2, [pc, #8]	@ (8015660 <stdio_exit_handler+0xc>)
 8015656:	4903      	ldr	r1, [pc, #12]	@ (8015664 <stdio_exit_handler+0x10>)
 8015658:	4803      	ldr	r0, [pc, #12]	@ (8015668 <stdio_exit_handler+0x14>)
 801565a:	f000 b869 	b.w	8015730 <_fwalk_sglue>
 801565e:	bf00      	nop
 8015660:	20000228 	.word	0x20000228
 8015664:	08016569 	.word	0x08016569
 8015668:	20000238 	.word	0x20000238

0801566c <cleanup_stdio>:
 801566c:	6841      	ldr	r1, [r0, #4]
 801566e:	4b0c      	ldr	r3, [pc, #48]	@ (80156a0 <cleanup_stdio+0x34>)
 8015670:	4299      	cmp	r1, r3
 8015672:	b510      	push	{r4, lr}
 8015674:	4604      	mov	r4, r0
 8015676:	d001      	beq.n	801567c <cleanup_stdio+0x10>
 8015678:	f000 ff76 	bl	8016568 <_fflush_r>
 801567c:	68a1      	ldr	r1, [r4, #8]
 801567e:	4b09      	ldr	r3, [pc, #36]	@ (80156a4 <cleanup_stdio+0x38>)
 8015680:	4299      	cmp	r1, r3
 8015682:	d002      	beq.n	801568a <cleanup_stdio+0x1e>
 8015684:	4620      	mov	r0, r4
 8015686:	f000 ff6f 	bl	8016568 <_fflush_r>
 801568a:	68e1      	ldr	r1, [r4, #12]
 801568c:	4b06      	ldr	r3, [pc, #24]	@ (80156a8 <cleanup_stdio+0x3c>)
 801568e:	4299      	cmp	r1, r3
 8015690:	d004      	beq.n	801569c <cleanup_stdio+0x30>
 8015692:	4620      	mov	r0, r4
 8015694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015698:	f000 bf66 	b.w	8016568 <_fflush_r>
 801569c:	bd10      	pop	{r4, pc}
 801569e:	bf00      	nop
 80156a0:	20000d90 	.word	0x20000d90
 80156a4:	20000df8 	.word	0x20000df8
 80156a8:	20000e60 	.word	0x20000e60

080156ac <global_stdio_init.part.0>:
 80156ac:	b510      	push	{r4, lr}
 80156ae:	4b0b      	ldr	r3, [pc, #44]	@ (80156dc <global_stdio_init.part.0+0x30>)
 80156b0:	4c0b      	ldr	r4, [pc, #44]	@ (80156e0 <global_stdio_init.part.0+0x34>)
 80156b2:	4a0c      	ldr	r2, [pc, #48]	@ (80156e4 <global_stdio_init.part.0+0x38>)
 80156b4:	601a      	str	r2, [r3, #0]
 80156b6:	4620      	mov	r0, r4
 80156b8:	2200      	movs	r2, #0
 80156ba:	2104      	movs	r1, #4
 80156bc:	f7ff ff94 	bl	80155e8 <std>
 80156c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80156c4:	2201      	movs	r2, #1
 80156c6:	2109      	movs	r1, #9
 80156c8:	f7ff ff8e 	bl	80155e8 <std>
 80156cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80156d0:	2202      	movs	r2, #2
 80156d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156d6:	2112      	movs	r1, #18
 80156d8:	f7ff bf86 	b.w	80155e8 <std>
 80156dc:	20000ec8 	.word	0x20000ec8
 80156e0:	20000d90 	.word	0x20000d90
 80156e4:	08015655 	.word	0x08015655

080156e8 <__sfp_lock_acquire>:
 80156e8:	4801      	ldr	r0, [pc, #4]	@ (80156f0 <__sfp_lock_acquire+0x8>)
 80156ea:	f000 ba46 	b.w	8015b7a <__retarget_lock_acquire_recursive>
 80156ee:	bf00      	nop
 80156f0:	20000ed1 	.word	0x20000ed1

080156f4 <__sfp_lock_release>:
 80156f4:	4801      	ldr	r0, [pc, #4]	@ (80156fc <__sfp_lock_release+0x8>)
 80156f6:	f000 ba41 	b.w	8015b7c <__retarget_lock_release_recursive>
 80156fa:	bf00      	nop
 80156fc:	20000ed1 	.word	0x20000ed1

08015700 <__sinit>:
 8015700:	b510      	push	{r4, lr}
 8015702:	4604      	mov	r4, r0
 8015704:	f7ff fff0 	bl	80156e8 <__sfp_lock_acquire>
 8015708:	6a23      	ldr	r3, [r4, #32]
 801570a:	b11b      	cbz	r3, 8015714 <__sinit+0x14>
 801570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015710:	f7ff bff0 	b.w	80156f4 <__sfp_lock_release>
 8015714:	4b04      	ldr	r3, [pc, #16]	@ (8015728 <__sinit+0x28>)
 8015716:	6223      	str	r3, [r4, #32]
 8015718:	4b04      	ldr	r3, [pc, #16]	@ (801572c <__sinit+0x2c>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1f5      	bne.n	801570c <__sinit+0xc>
 8015720:	f7ff ffc4 	bl	80156ac <global_stdio_init.part.0>
 8015724:	e7f2      	b.n	801570c <__sinit+0xc>
 8015726:	bf00      	nop
 8015728:	0801566d 	.word	0x0801566d
 801572c:	20000ec8 	.word	0x20000ec8

08015730 <_fwalk_sglue>:
 8015730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015734:	4607      	mov	r7, r0
 8015736:	4688      	mov	r8, r1
 8015738:	4614      	mov	r4, r2
 801573a:	2600      	movs	r6, #0
 801573c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015740:	f1b9 0901 	subs.w	r9, r9, #1
 8015744:	d505      	bpl.n	8015752 <_fwalk_sglue+0x22>
 8015746:	6824      	ldr	r4, [r4, #0]
 8015748:	2c00      	cmp	r4, #0
 801574a:	d1f7      	bne.n	801573c <_fwalk_sglue+0xc>
 801574c:	4630      	mov	r0, r6
 801574e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015752:	89ab      	ldrh	r3, [r5, #12]
 8015754:	2b01      	cmp	r3, #1
 8015756:	d907      	bls.n	8015768 <_fwalk_sglue+0x38>
 8015758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801575c:	3301      	adds	r3, #1
 801575e:	d003      	beq.n	8015768 <_fwalk_sglue+0x38>
 8015760:	4629      	mov	r1, r5
 8015762:	4638      	mov	r0, r7
 8015764:	47c0      	blx	r8
 8015766:	4306      	orrs	r6, r0
 8015768:	3568      	adds	r5, #104	@ 0x68
 801576a:	e7e9      	b.n	8015740 <_fwalk_sglue+0x10>

0801576c <iprintf>:
 801576c:	b40f      	push	{r0, r1, r2, r3}
 801576e:	b507      	push	{r0, r1, r2, lr}
 8015770:	4906      	ldr	r1, [pc, #24]	@ (801578c <iprintf+0x20>)
 8015772:	ab04      	add	r3, sp, #16
 8015774:	6808      	ldr	r0, [r1, #0]
 8015776:	f853 2b04 	ldr.w	r2, [r3], #4
 801577a:	6881      	ldr	r1, [r0, #8]
 801577c:	9301      	str	r3, [sp, #4]
 801577e:	f000 fbcb 	bl	8015f18 <_vfiprintf_r>
 8015782:	b003      	add	sp, #12
 8015784:	f85d eb04 	ldr.w	lr, [sp], #4
 8015788:	b004      	add	sp, #16
 801578a:	4770      	bx	lr
 801578c:	20000234 	.word	0x20000234

08015790 <_puts_r>:
 8015790:	6a03      	ldr	r3, [r0, #32]
 8015792:	b570      	push	{r4, r5, r6, lr}
 8015794:	6884      	ldr	r4, [r0, #8]
 8015796:	4605      	mov	r5, r0
 8015798:	460e      	mov	r6, r1
 801579a:	b90b      	cbnz	r3, 80157a0 <_puts_r+0x10>
 801579c:	f7ff ffb0 	bl	8015700 <__sinit>
 80157a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157a2:	07db      	lsls	r3, r3, #31
 80157a4:	d405      	bmi.n	80157b2 <_puts_r+0x22>
 80157a6:	89a3      	ldrh	r3, [r4, #12]
 80157a8:	0598      	lsls	r0, r3, #22
 80157aa:	d402      	bmi.n	80157b2 <_puts_r+0x22>
 80157ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157ae:	f000 f9e4 	bl	8015b7a <__retarget_lock_acquire_recursive>
 80157b2:	89a3      	ldrh	r3, [r4, #12]
 80157b4:	0719      	lsls	r1, r3, #28
 80157b6:	d502      	bpl.n	80157be <_puts_r+0x2e>
 80157b8:	6923      	ldr	r3, [r4, #16]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d135      	bne.n	801582a <_puts_r+0x9a>
 80157be:	4621      	mov	r1, r4
 80157c0:	4628      	mov	r0, r5
 80157c2:	f000 f8fb 	bl	80159bc <__swsetup_r>
 80157c6:	b380      	cbz	r0, 801582a <_puts_r+0x9a>
 80157c8:	f04f 35ff 	mov.w	r5, #4294967295
 80157cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157ce:	07da      	lsls	r2, r3, #31
 80157d0:	d405      	bmi.n	80157de <_puts_r+0x4e>
 80157d2:	89a3      	ldrh	r3, [r4, #12]
 80157d4:	059b      	lsls	r3, r3, #22
 80157d6:	d402      	bmi.n	80157de <_puts_r+0x4e>
 80157d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157da:	f000 f9cf 	bl	8015b7c <__retarget_lock_release_recursive>
 80157de:	4628      	mov	r0, r5
 80157e0:	bd70      	pop	{r4, r5, r6, pc}
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	da04      	bge.n	80157f0 <_puts_r+0x60>
 80157e6:	69a2      	ldr	r2, [r4, #24]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	dc17      	bgt.n	801581c <_puts_r+0x8c>
 80157ec:	290a      	cmp	r1, #10
 80157ee:	d015      	beq.n	801581c <_puts_r+0x8c>
 80157f0:	6823      	ldr	r3, [r4, #0]
 80157f2:	1c5a      	adds	r2, r3, #1
 80157f4:	6022      	str	r2, [r4, #0]
 80157f6:	7019      	strb	r1, [r3, #0]
 80157f8:	68a3      	ldr	r3, [r4, #8]
 80157fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80157fe:	3b01      	subs	r3, #1
 8015800:	60a3      	str	r3, [r4, #8]
 8015802:	2900      	cmp	r1, #0
 8015804:	d1ed      	bne.n	80157e2 <_puts_r+0x52>
 8015806:	2b00      	cmp	r3, #0
 8015808:	da11      	bge.n	801582e <_puts_r+0x9e>
 801580a:	4622      	mov	r2, r4
 801580c:	210a      	movs	r1, #10
 801580e:	4628      	mov	r0, r5
 8015810:	f000 f895 	bl	801593e <__swbuf_r>
 8015814:	3001      	adds	r0, #1
 8015816:	d0d7      	beq.n	80157c8 <_puts_r+0x38>
 8015818:	250a      	movs	r5, #10
 801581a:	e7d7      	b.n	80157cc <_puts_r+0x3c>
 801581c:	4622      	mov	r2, r4
 801581e:	4628      	mov	r0, r5
 8015820:	f000 f88d 	bl	801593e <__swbuf_r>
 8015824:	3001      	adds	r0, #1
 8015826:	d1e7      	bne.n	80157f8 <_puts_r+0x68>
 8015828:	e7ce      	b.n	80157c8 <_puts_r+0x38>
 801582a:	3e01      	subs	r6, #1
 801582c:	e7e4      	b.n	80157f8 <_puts_r+0x68>
 801582e:	6823      	ldr	r3, [r4, #0]
 8015830:	1c5a      	adds	r2, r3, #1
 8015832:	6022      	str	r2, [r4, #0]
 8015834:	220a      	movs	r2, #10
 8015836:	701a      	strb	r2, [r3, #0]
 8015838:	e7ee      	b.n	8015818 <_puts_r+0x88>
	...

0801583c <puts>:
 801583c:	4b02      	ldr	r3, [pc, #8]	@ (8015848 <puts+0xc>)
 801583e:	4601      	mov	r1, r0
 8015840:	6818      	ldr	r0, [r3, #0]
 8015842:	f7ff bfa5 	b.w	8015790 <_puts_r>
 8015846:	bf00      	nop
 8015848:	20000234 	.word	0x20000234

0801584c <sniprintf>:
 801584c:	b40c      	push	{r2, r3}
 801584e:	b530      	push	{r4, r5, lr}
 8015850:	4b18      	ldr	r3, [pc, #96]	@ (80158b4 <sniprintf+0x68>)
 8015852:	1e0c      	subs	r4, r1, #0
 8015854:	681d      	ldr	r5, [r3, #0]
 8015856:	b09d      	sub	sp, #116	@ 0x74
 8015858:	da08      	bge.n	801586c <sniprintf+0x20>
 801585a:	238b      	movs	r3, #139	@ 0x8b
 801585c:	602b      	str	r3, [r5, #0]
 801585e:	f04f 30ff 	mov.w	r0, #4294967295
 8015862:	b01d      	add	sp, #116	@ 0x74
 8015864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015868:	b002      	add	sp, #8
 801586a:	4770      	bx	lr
 801586c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015870:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015874:	f04f 0300 	mov.w	r3, #0
 8015878:	931b      	str	r3, [sp, #108]	@ 0x6c
 801587a:	bf14      	ite	ne
 801587c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015880:	4623      	moveq	r3, r4
 8015882:	9304      	str	r3, [sp, #16]
 8015884:	9307      	str	r3, [sp, #28]
 8015886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801588a:	9002      	str	r0, [sp, #8]
 801588c:	9006      	str	r0, [sp, #24]
 801588e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015892:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015894:	ab21      	add	r3, sp, #132	@ 0x84
 8015896:	a902      	add	r1, sp, #8
 8015898:	4628      	mov	r0, r5
 801589a:	9301      	str	r3, [sp, #4]
 801589c:	f000 fa16 	bl	8015ccc <_svfiprintf_r>
 80158a0:	1c43      	adds	r3, r0, #1
 80158a2:	bfbc      	itt	lt
 80158a4:	238b      	movlt	r3, #139	@ 0x8b
 80158a6:	602b      	strlt	r3, [r5, #0]
 80158a8:	2c00      	cmp	r4, #0
 80158aa:	d0da      	beq.n	8015862 <sniprintf+0x16>
 80158ac:	9b02      	ldr	r3, [sp, #8]
 80158ae:	2200      	movs	r2, #0
 80158b0:	701a      	strb	r2, [r3, #0]
 80158b2:	e7d6      	b.n	8015862 <sniprintf+0x16>
 80158b4:	20000234 	.word	0x20000234

080158b8 <__sread>:
 80158b8:	b510      	push	{r4, lr}
 80158ba:	460c      	mov	r4, r1
 80158bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158c0:	f000 f8fc 	bl	8015abc <_read_r>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	bfab      	itete	ge
 80158c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80158ca:	89a3      	ldrhlt	r3, [r4, #12]
 80158cc:	181b      	addge	r3, r3, r0
 80158ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80158d2:	bfac      	ite	ge
 80158d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80158d6:	81a3      	strhlt	r3, [r4, #12]
 80158d8:	bd10      	pop	{r4, pc}

080158da <__swrite>:
 80158da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158de:	461f      	mov	r7, r3
 80158e0:	898b      	ldrh	r3, [r1, #12]
 80158e2:	05db      	lsls	r3, r3, #23
 80158e4:	4605      	mov	r5, r0
 80158e6:	460c      	mov	r4, r1
 80158e8:	4616      	mov	r6, r2
 80158ea:	d505      	bpl.n	80158f8 <__swrite+0x1e>
 80158ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158f0:	2302      	movs	r3, #2
 80158f2:	2200      	movs	r2, #0
 80158f4:	f000 f8d0 	bl	8015a98 <_lseek_r>
 80158f8:	89a3      	ldrh	r3, [r4, #12]
 80158fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015902:	81a3      	strh	r3, [r4, #12]
 8015904:	4632      	mov	r2, r6
 8015906:	463b      	mov	r3, r7
 8015908:	4628      	mov	r0, r5
 801590a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801590e:	f000 b8f7 	b.w	8015b00 <_write_r>

08015912 <__sseek>:
 8015912:	b510      	push	{r4, lr}
 8015914:	460c      	mov	r4, r1
 8015916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801591a:	f000 f8bd 	bl	8015a98 <_lseek_r>
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	89a3      	ldrh	r3, [r4, #12]
 8015922:	bf15      	itete	ne
 8015924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801592a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801592e:	81a3      	strheq	r3, [r4, #12]
 8015930:	bf18      	it	ne
 8015932:	81a3      	strhne	r3, [r4, #12]
 8015934:	bd10      	pop	{r4, pc}

08015936 <__sclose>:
 8015936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801593a:	f000 b89d 	b.w	8015a78 <_close_r>

0801593e <__swbuf_r>:
 801593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015940:	460e      	mov	r6, r1
 8015942:	4614      	mov	r4, r2
 8015944:	4605      	mov	r5, r0
 8015946:	b118      	cbz	r0, 8015950 <__swbuf_r+0x12>
 8015948:	6a03      	ldr	r3, [r0, #32]
 801594a:	b90b      	cbnz	r3, 8015950 <__swbuf_r+0x12>
 801594c:	f7ff fed8 	bl	8015700 <__sinit>
 8015950:	69a3      	ldr	r3, [r4, #24]
 8015952:	60a3      	str	r3, [r4, #8]
 8015954:	89a3      	ldrh	r3, [r4, #12]
 8015956:	071a      	lsls	r2, r3, #28
 8015958:	d501      	bpl.n	801595e <__swbuf_r+0x20>
 801595a:	6923      	ldr	r3, [r4, #16]
 801595c:	b943      	cbnz	r3, 8015970 <__swbuf_r+0x32>
 801595e:	4621      	mov	r1, r4
 8015960:	4628      	mov	r0, r5
 8015962:	f000 f82b 	bl	80159bc <__swsetup_r>
 8015966:	b118      	cbz	r0, 8015970 <__swbuf_r+0x32>
 8015968:	f04f 37ff 	mov.w	r7, #4294967295
 801596c:	4638      	mov	r0, r7
 801596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015970:	6823      	ldr	r3, [r4, #0]
 8015972:	6922      	ldr	r2, [r4, #16]
 8015974:	1a98      	subs	r0, r3, r2
 8015976:	6963      	ldr	r3, [r4, #20]
 8015978:	b2f6      	uxtb	r6, r6
 801597a:	4283      	cmp	r3, r0
 801597c:	4637      	mov	r7, r6
 801597e:	dc05      	bgt.n	801598c <__swbuf_r+0x4e>
 8015980:	4621      	mov	r1, r4
 8015982:	4628      	mov	r0, r5
 8015984:	f000 fdf0 	bl	8016568 <_fflush_r>
 8015988:	2800      	cmp	r0, #0
 801598a:	d1ed      	bne.n	8015968 <__swbuf_r+0x2a>
 801598c:	68a3      	ldr	r3, [r4, #8]
 801598e:	3b01      	subs	r3, #1
 8015990:	60a3      	str	r3, [r4, #8]
 8015992:	6823      	ldr	r3, [r4, #0]
 8015994:	1c5a      	adds	r2, r3, #1
 8015996:	6022      	str	r2, [r4, #0]
 8015998:	701e      	strb	r6, [r3, #0]
 801599a:	6962      	ldr	r2, [r4, #20]
 801599c:	1c43      	adds	r3, r0, #1
 801599e:	429a      	cmp	r2, r3
 80159a0:	d004      	beq.n	80159ac <__swbuf_r+0x6e>
 80159a2:	89a3      	ldrh	r3, [r4, #12]
 80159a4:	07db      	lsls	r3, r3, #31
 80159a6:	d5e1      	bpl.n	801596c <__swbuf_r+0x2e>
 80159a8:	2e0a      	cmp	r6, #10
 80159aa:	d1df      	bne.n	801596c <__swbuf_r+0x2e>
 80159ac:	4621      	mov	r1, r4
 80159ae:	4628      	mov	r0, r5
 80159b0:	f000 fdda 	bl	8016568 <_fflush_r>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	d0d9      	beq.n	801596c <__swbuf_r+0x2e>
 80159b8:	e7d6      	b.n	8015968 <__swbuf_r+0x2a>
	...

080159bc <__swsetup_r>:
 80159bc:	b538      	push	{r3, r4, r5, lr}
 80159be:	4b29      	ldr	r3, [pc, #164]	@ (8015a64 <__swsetup_r+0xa8>)
 80159c0:	4605      	mov	r5, r0
 80159c2:	6818      	ldr	r0, [r3, #0]
 80159c4:	460c      	mov	r4, r1
 80159c6:	b118      	cbz	r0, 80159d0 <__swsetup_r+0x14>
 80159c8:	6a03      	ldr	r3, [r0, #32]
 80159ca:	b90b      	cbnz	r3, 80159d0 <__swsetup_r+0x14>
 80159cc:	f7ff fe98 	bl	8015700 <__sinit>
 80159d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159d4:	0719      	lsls	r1, r3, #28
 80159d6:	d422      	bmi.n	8015a1e <__swsetup_r+0x62>
 80159d8:	06da      	lsls	r2, r3, #27
 80159da:	d407      	bmi.n	80159ec <__swsetup_r+0x30>
 80159dc:	2209      	movs	r2, #9
 80159de:	602a      	str	r2, [r5, #0]
 80159e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159e4:	81a3      	strh	r3, [r4, #12]
 80159e6:	f04f 30ff 	mov.w	r0, #4294967295
 80159ea:	e033      	b.n	8015a54 <__swsetup_r+0x98>
 80159ec:	0758      	lsls	r0, r3, #29
 80159ee:	d512      	bpl.n	8015a16 <__swsetup_r+0x5a>
 80159f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80159f2:	b141      	cbz	r1, 8015a06 <__swsetup_r+0x4a>
 80159f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80159f8:	4299      	cmp	r1, r3
 80159fa:	d002      	beq.n	8015a02 <__swsetup_r+0x46>
 80159fc:	4628      	mov	r0, r5
 80159fe:	f000 f8bf 	bl	8015b80 <_free_r>
 8015a02:	2300      	movs	r3, #0
 8015a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a06:	89a3      	ldrh	r3, [r4, #12]
 8015a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015a0c:	81a3      	strh	r3, [r4, #12]
 8015a0e:	2300      	movs	r3, #0
 8015a10:	6063      	str	r3, [r4, #4]
 8015a12:	6923      	ldr	r3, [r4, #16]
 8015a14:	6023      	str	r3, [r4, #0]
 8015a16:	89a3      	ldrh	r3, [r4, #12]
 8015a18:	f043 0308 	orr.w	r3, r3, #8
 8015a1c:	81a3      	strh	r3, [r4, #12]
 8015a1e:	6923      	ldr	r3, [r4, #16]
 8015a20:	b94b      	cbnz	r3, 8015a36 <__swsetup_r+0x7a>
 8015a22:	89a3      	ldrh	r3, [r4, #12]
 8015a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a2c:	d003      	beq.n	8015a36 <__swsetup_r+0x7a>
 8015a2e:	4621      	mov	r1, r4
 8015a30:	4628      	mov	r0, r5
 8015a32:	f000 fde7 	bl	8016604 <__smakebuf_r>
 8015a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a3a:	f013 0201 	ands.w	r2, r3, #1
 8015a3e:	d00a      	beq.n	8015a56 <__swsetup_r+0x9a>
 8015a40:	2200      	movs	r2, #0
 8015a42:	60a2      	str	r2, [r4, #8]
 8015a44:	6962      	ldr	r2, [r4, #20]
 8015a46:	4252      	negs	r2, r2
 8015a48:	61a2      	str	r2, [r4, #24]
 8015a4a:	6922      	ldr	r2, [r4, #16]
 8015a4c:	b942      	cbnz	r2, 8015a60 <__swsetup_r+0xa4>
 8015a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015a52:	d1c5      	bne.n	80159e0 <__swsetup_r+0x24>
 8015a54:	bd38      	pop	{r3, r4, r5, pc}
 8015a56:	0799      	lsls	r1, r3, #30
 8015a58:	bf58      	it	pl
 8015a5a:	6962      	ldrpl	r2, [r4, #20]
 8015a5c:	60a2      	str	r2, [r4, #8]
 8015a5e:	e7f4      	b.n	8015a4a <__swsetup_r+0x8e>
 8015a60:	2000      	movs	r0, #0
 8015a62:	e7f7      	b.n	8015a54 <__swsetup_r+0x98>
 8015a64:	20000234 	.word	0x20000234

08015a68 <memset>:
 8015a68:	4402      	add	r2, r0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	d100      	bne.n	8015a72 <memset+0xa>
 8015a70:	4770      	bx	lr
 8015a72:	f803 1b01 	strb.w	r1, [r3], #1
 8015a76:	e7f9      	b.n	8015a6c <memset+0x4>

08015a78 <_close_r>:
 8015a78:	b538      	push	{r3, r4, r5, lr}
 8015a7a:	4d06      	ldr	r5, [pc, #24]	@ (8015a94 <_close_r+0x1c>)
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	4604      	mov	r4, r0
 8015a80:	4608      	mov	r0, r1
 8015a82:	602b      	str	r3, [r5, #0]
 8015a84:	f7ec fe91 	bl	80027aa <_close>
 8015a88:	1c43      	adds	r3, r0, #1
 8015a8a:	d102      	bne.n	8015a92 <_close_r+0x1a>
 8015a8c:	682b      	ldr	r3, [r5, #0]
 8015a8e:	b103      	cbz	r3, 8015a92 <_close_r+0x1a>
 8015a90:	6023      	str	r3, [r4, #0]
 8015a92:	bd38      	pop	{r3, r4, r5, pc}
 8015a94:	20000ecc 	.word	0x20000ecc

08015a98 <_lseek_r>:
 8015a98:	b538      	push	{r3, r4, r5, lr}
 8015a9a:	4d07      	ldr	r5, [pc, #28]	@ (8015ab8 <_lseek_r+0x20>)
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	4608      	mov	r0, r1
 8015aa0:	4611      	mov	r1, r2
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	602a      	str	r2, [r5, #0]
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	f7ec fea6 	bl	80027f8 <_lseek>
 8015aac:	1c43      	adds	r3, r0, #1
 8015aae:	d102      	bne.n	8015ab6 <_lseek_r+0x1e>
 8015ab0:	682b      	ldr	r3, [r5, #0]
 8015ab2:	b103      	cbz	r3, 8015ab6 <_lseek_r+0x1e>
 8015ab4:	6023      	str	r3, [r4, #0]
 8015ab6:	bd38      	pop	{r3, r4, r5, pc}
 8015ab8:	20000ecc 	.word	0x20000ecc

08015abc <_read_r>:
 8015abc:	b538      	push	{r3, r4, r5, lr}
 8015abe:	4d07      	ldr	r5, [pc, #28]	@ (8015adc <_read_r+0x20>)
 8015ac0:	4604      	mov	r4, r0
 8015ac2:	4608      	mov	r0, r1
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	602a      	str	r2, [r5, #0]
 8015aca:	461a      	mov	r2, r3
 8015acc:	f7ec fe50 	bl	8002770 <_read>
 8015ad0:	1c43      	adds	r3, r0, #1
 8015ad2:	d102      	bne.n	8015ada <_read_r+0x1e>
 8015ad4:	682b      	ldr	r3, [r5, #0]
 8015ad6:	b103      	cbz	r3, 8015ada <_read_r+0x1e>
 8015ad8:	6023      	str	r3, [r4, #0]
 8015ada:	bd38      	pop	{r3, r4, r5, pc}
 8015adc:	20000ecc 	.word	0x20000ecc

08015ae0 <_sbrk_r>:
 8015ae0:	b538      	push	{r3, r4, r5, lr}
 8015ae2:	4d06      	ldr	r5, [pc, #24]	@ (8015afc <_sbrk_r+0x1c>)
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	4608      	mov	r0, r1
 8015aea:	602b      	str	r3, [r5, #0]
 8015aec:	f7ec fe92 	bl	8002814 <_sbrk>
 8015af0:	1c43      	adds	r3, r0, #1
 8015af2:	d102      	bne.n	8015afa <_sbrk_r+0x1a>
 8015af4:	682b      	ldr	r3, [r5, #0]
 8015af6:	b103      	cbz	r3, 8015afa <_sbrk_r+0x1a>
 8015af8:	6023      	str	r3, [r4, #0]
 8015afa:	bd38      	pop	{r3, r4, r5, pc}
 8015afc:	20000ecc 	.word	0x20000ecc

08015b00 <_write_r>:
 8015b00:	b538      	push	{r3, r4, r5, lr}
 8015b02:	4d07      	ldr	r5, [pc, #28]	@ (8015b20 <_write_r+0x20>)
 8015b04:	4604      	mov	r4, r0
 8015b06:	4608      	mov	r0, r1
 8015b08:	4611      	mov	r1, r2
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	602a      	str	r2, [r5, #0]
 8015b0e:	461a      	mov	r2, r3
 8015b10:	f7eb fa5f 	bl	8000fd2 <_write>
 8015b14:	1c43      	adds	r3, r0, #1
 8015b16:	d102      	bne.n	8015b1e <_write_r+0x1e>
 8015b18:	682b      	ldr	r3, [r5, #0]
 8015b1a:	b103      	cbz	r3, 8015b1e <_write_r+0x1e>
 8015b1c:	6023      	str	r3, [r4, #0]
 8015b1e:	bd38      	pop	{r3, r4, r5, pc}
 8015b20:	20000ecc 	.word	0x20000ecc

08015b24 <__errno>:
 8015b24:	4b01      	ldr	r3, [pc, #4]	@ (8015b2c <__errno+0x8>)
 8015b26:	6818      	ldr	r0, [r3, #0]
 8015b28:	4770      	bx	lr
 8015b2a:	bf00      	nop
 8015b2c:	20000234 	.word	0x20000234

08015b30 <__libc_init_array>:
 8015b30:	b570      	push	{r4, r5, r6, lr}
 8015b32:	4d0d      	ldr	r5, [pc, #52]	@ (8015b68 <__libc_init_array+0x38>)
 8015b34:	4c0d      	ldr	r4, [pc, #52]	@ (8015b6c <__libc_init_array+0x3c>)
 8015b36:	1b64      	subs	r4, r4, r5
 8015b38:	10a4      	asrs	r4, r4, #2
 8015b3a:	2600      	movs	r6, #0
 8015b3c:	42a6      	cmp	r6, r4
 8015b3e:	d109      	bne.n	8015b54 <__libc_init_array+0x24>
 8015b40:	4d0b      	ldr	r5, [pc, #44]	@ (8015b70 <__libc_init_array+0x40>)
 8015b42:	4c0c      	ldr	r4, [pc, #48]	@ (8015b74 <__libc_init_array+0x44>)
 8015b44:	f001 fdb2 	bl	80176ac <_init>
 8015b48:	1b64      	subs	r4, r4, r5
 8015b4a:	10a4      	asrs	r4, r4, #2
 8015b4c:	2600      	movs	r6, #0
 8015b4e:	42a6      	cmp	r6, r4
 8015b50:	d105      	bne.n	8015b5e <__libc_init_array+0x2e>
 8015b52:	bd70      	pop	{r4, r5, r6, pc}
 8015b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b58:	4798      	blx	r3
 8015b5a:	3601      	adds	r6, #1
 8015b5c:	e7ee      	b.n	8015b3c <__libc_init_array+0xc>
 8015b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b62:	4798      	blx	r3
 8015b64:	3601      	adds	r6, #1
 8015b66:	e7f2      	b.n	8015b4e <__libc_init_array+0x1e>
 8015b68:	080184c8 	.word	0x080184c8
 8015b6c:	080184c8 	.word	0x080184c8
 8015b70:	080184c8 	.word	0x080184c8
 8015b74:	080184cc 	.word	0x080184cc

08015b78 <__retarget_lock_init_recursive>:
 8015b78:	4770      	bx	lr

08015b7a <__retarget_lock_acquire_recursive>:
 8015b7a:	4770      	bx	lr

08015b7c <__retarget_lock_release_recursive>:
 8015b7c:	4770      	bx	lr
	...

08015b80 <_free_r>:
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	4605      	mov	r5, r0
 8015b84:	2900      	cmp	r1, #0
 8015b86:	d041      	beq.n	8015c0c <_free_r+0x8c>
 8015b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b8c:	1f0c      	subs	r4, r1, #4
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	bfb8      	it	lt
 8015b92:	18e4      	addlt	r4, r4, r3
 8015b94:	f7ff fd1c 	bl	80155d0 <__malloc_lock>
 8015b98:	4a1d      	ldr	r2, [pc, #116]	@ (8015c10 <_free_r+0x90>)
 8015b9a:	6813      	ldr	r3, [r2, #0]
 8015b9c:	b933      	cbnz	r3, 8015bac <_free_r+0x2c>
 8015b9e:	6063      	str	r3, [r4, #4]
 8015ba0:	6014      	str	r4, [r2, #0]
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ba8:	f7ff bd18 	b.w	80155dc <__malloc_unlock>
 8015bac:	42a3      	cmp	r3, r4
 8015bae:	d908      	bls.n	8015bc2 <_free_r+0x42>
 8015bb0:	6820      	ldr	r0, [r4, #0]
 8015bb2:	1821      	adds	r1, r4, r0
 8015bb4:	428b      	cmp	r3, r1
 8015bb6:	bf01      	itttt	eq
 8015bb8:	6819      	ldreq	r1, [r3, #0]
 8015bba:	685b      	ldreq	r3, [r3, #4]
 8015bbc:	1809      	addeq	r1, r1, r0
 8015bbe:	6021      	streq	r1, [r4, #0]
 8015bc0:	e7ed      	b.n	8015b9e <_free_r+0x1e>
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	b10b      	cbz	r3, 8015bcc <_free_r+0x4c>
 8015bc8:	42a3      	cmp	r3, r4
 8015bca:	d9fa      	bls.n	8015bc2 <_free_r+0x42>
 8015bcc:	6811      	ldr	r1, [r2, #0]
 8015bce:	1850      	adds	r0, r2, r1
 8015bd0:	42a0      	cmp	r0, r4
 8015bd2:	d10b      	bne.n	8015bec <_free_r+0x6c>
 8015bd4:	6820      	ldr	r0, [r4, #0]
 8015bd6:	4401      	add	r1, r0
 8015bd8:	1850      	adds	r0, r2, r1
 8015bda:	4283      	cmp	r3, r0
 8015bdc:	6011      	str	r1, [r2, #0]
 8015bde:	d1e0      	bne.n	8015ba2 <_free_r+0x22>
 8015be0:	6818      	ldr	r0, [r3, #0]
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	6053      	str	r3, [r2, #4]
 8015be6:	4408      	add	r0, r1
 8015be8:	6010      	str	r0, [r2, #0]
 8015bea:	e7da      	b.n	8015ba2 <_free_r+0x22>
 8015bec:	d902      	bls.n	8015bf4 <_free_r+0x74>
 8015bee:	230c      	movs	r3, #12
 8015bf0:	602b      	str	r3, [r5, #0]
 8015bf2:	e7d6      	b.n	8015ba2 <_free_r+0x22>
 8015bf4:	6820      	ldr	r0, [r4, #0]
 8015bf6:	1821      	adds	r1, r4, r0
 8015bf8:	428b      	cmp	r3, r1
 8015bfa:	bf04      	itt	eq
 8015bfc:	6819      	ldreq	r1, [r3, #0]
 8015bfe:	685b      	ldreq	r3, [r3, #4]
 8015c00:	6063      	str	r3, [r4, #4]
 8015c02:	bf04      	itt	eq
 8015c04:	1809      	addeq	r1, r1, r0
 8015c06:	6021      	streq	r1, [r4, #0]
 8015c08:	6054      	str	r4, [r2, #4]
 8015c0a:	e7ca      	b.n	8015ba2 <_free_r+0x22>
 8015c0c:	bd38      	pop	{r3, r4, r5, pc}
 8015c0e:	bf00      	nop
 8015c10:	20000d8c 	.word	0x20000d8c

08015c14 <__ssputs_r>:
 8015c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c18:	688e      	ldr	r6, [r1, #8]
 8015c1a:	461f      	mov	r7, r3
 8015c1c:	42be      	cmp	r6, r7
 8015c1e:	680b      	ldr	r3, [r1, #0]
 8015c20:	4682      	mov	sl, r0
 8015c22:	460c      	mov	r4, r1
 8015c24:	4690      	mov	r8, r2
 8015c26:	d82d      	bhi.n	8015c84 <__ssputs_r+0x70>
 8015c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015c30:	d026      	beq.n	8015c80 <__ssputs_r+0x6c>
 8015c32:	6965      	ldr	r5, [r4, #20]
 8015c34:	6909      	ldr	r1, [r1, #16]
 8015c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c3a:	eba3 0901 	sub.w	r9, r3, r1
 8015c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c42:	1c7b      	adds	r3, r7, #1
 8015c44:	444b      	add	r3, r9
 8015c46:	106d      	asrs	r5, r5, #1
 8015c48:	429d      	cmp	r5, r3
 8015c4a:	bf38      	it	cc
 8015c4c:	461d      	movcc	r5, r3
 8015c4e:	0553      	lsls	r3, r2, #21
 8015c50:	d527      	bpl.n	8015ca2 <__ssputs_r+0x8e>
 8015c52:	4629      	mov	r1, r5
 8015c54:	f7ff fc3c 	bl	80154d0 <_malloc_r>
 8015c58:	4606      	mov	r6, r0
 8015c5a:	b360      	cbz	r0, 8015cb6 <__ssputs_r+0xa2>
 8015c5c:	6921      	ldr	r1, [r4, #16]
 8015c5e:	464a      	mov	r2, r9
 8015c60:	f000 fd48 	bl	80166f4 <memcpy>
 8015c64:	89a3      	ldrh	r3, [r4, #12]
 8015c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c6e:	81a3      	strh	r3, [r4, #12]
 8015c70:	6126      	str	r6, [r4, #16]
 8015c72:	6165      	str	r5, [r4, #20]
 8015c74:	444e      	add	r6, r9
 8015c76:	eba5 0509 	sub.w	r5, r5, r9
 8015c7a:	6026      	str	r6, [r4, #0]
 8015c7c:	60a5      	str	r5, [r4, #8]
 8015c7e:	463e      	mov	r6, r7
 8015c80:	42be      	cmp	r6, r7
 8015c82:	d900      	bls.n	8015c86 <__ssputs_r+0x72>
 8015c84:	463e      	mov	r6, r7
 8015c86:	6820      	ldr	r0, [r4, #0]
 8015c88:	4632      	mov	r2, r6
 8015c8a:	4641      	mov	r1, r8
 8015c8c:	f000 fcf6 	bl	801667c <memmove>
 8015c90:	68a3      	ldr	r3, [r4, #8]
 8015c92:	1b9b      	subs	r3, r3, r6
 8015c94:	60a3      	str	r3, [r4, #8]
 8015c96:	6823      	ldr	r3, [r4, #0]
 8015c98:	4433      	add	r3, r6
 8015c9a:	6023      	str	r3, [r4, #0]
 8015c9c:	2000      	movs	r0, #0
 8015c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ca2:	462a      	mov	r2, r5
 8015ca4:	f000 fd34 	bl	8016710 <_realloc_r>
 8015ca8:	4606      	mov	r6, r0
 8015caa:	2800      	cmp	r0, #0
 8015cac:	d1e0      	bne.n	8015c70 <__ssputs_r+0x5c>
 8015cae:	6921      	ldr	r1, [r4, #16]
 8015cb0:	4650      	mov	r0, sl
 8015cb2:	f7ff ff65 	bl	8015b80 <_free_r>
 8015cb6:	230c      	movs	r3, #12
 8015cb8:	f8ca 3000 	str.w	r3, [sl]
 8015cbc:	89a3      	ldrh	r3, [r4, #12]
 8015cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015cc2:	81a3      	strh	r3, [r4, #12]
 8015cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cc8:	e7e9      	b.n	8015c9e <__ssputs_r+0x8a>
	...

08015ccc <_svfiprintf_r>:
 8015ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd0:	4698      	mov	r8, r3
 8015cd2:	898b      	ldrh	r3, [r1, #12]
 8015cd4:	061b      	lsls	r3, r3, #24
 8015cd6:	b09d      	sub	sp, #116	@ 0x74
 8015cd8:	4607      	mov	r7, r0
 8015cda:	460d      	mov	r5, r1
 8015cdc:	4614      	mov	r4, r2
 8015cde:	d510      	bpl.n	8015d02 <_svfiprintf_r+0x36>
 8015ce0:	690b      	ldr	r3, [r1, #16]
 8015ce2:	b973      	cbnz	r3, 8015d02 <_svfiprintf_r+0x36>
 8015ce4:	2140      	movs	r1, #64	@ 0x40
 8015ce6:	f7ff fbf3 	bl	80154d0 <_malloc_r>
 8015cea:	6028      	str	r0, [r5, #0]
 8015cec:	6128      	str	r0, [r5, #16]
 8015cee:	b930      	cbnz	r0, 8015cfe <_svfiprintf_r+0x32>
 8015cf0:	230c      	movs	r3, #12
 8015cf2:	603b      	str	r3, [r7, #0]
 8015cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cf8:	b01d      	add	sp, #116	@ 0x74
 8015cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cfe:	2340      	movs	r3, #64	@ 0x40
 8015d00:	616b      	str	r3, [r5, #20]
 8015d02:	2300      	movs	r3, #0
 8015d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d06:	2320      	movs	r3, #32
 8015d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d10:	2330      	movs	r3, #48	@ 0x30
 8015d12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015eb0 <_svfiprintf_r+0x1e4>
 8015d16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015d1a:	f04f 0901 	mov.w	r9, #1
 8015d1e:	4623      	mov	r3, r4
 8015d20:	469a      	mov	sl, r3
 8015d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d26:	b10a      	cbz	r2, 8015d2c <_svfiprintf_r+0x60>
 8015d28:	2a25      	cmp	r2, #37	@ 0x25
 8015d2a:	d1f9      	bne.n	8015d20 <_svfiprintf_r+0x54>
 8015d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8015d30:	d00b      	beq.n	8015d4a <_svfiprintf_r+0x7e>
 8015d32:	465b      	mov	r3, fp
 8015d34:	4622      	mov	r2, r4
 8015d36:	4629      	mov	r1, r5
 8015d38:	4638      	mov	r0, r7
 8015d3a:	f7ff ff6b 	bl	8015c14 <__ssputs_r>
 8015d3e:	3001      	adds	r0, #1
 8015d40:	f000 80a7 	beq.w	8015e92 <_svfiprintf_r+0x1c6>
 8015d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d46:	445a      	add	r2, fp
 8015d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f000 809f 	beq.w	8015e92 <_svfiprintf_r+0x1c6>
 8015d54:	2300      	movs	r3, #0
 8015d56:	f04f 32ff 	mov.w	r2, #4294967295
 8015d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d5e:	f10a 0a01 	add.w	sl, sl, #1
 8015d62:	9304      	str	r3, [sp, #16]
 8015d64:	9307      	str	r3, [sp, #28]
 8015d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8015d6c:	4654      	mov	r4, sl
 8015d6e:	2205      	movs	r2, #5
 8015d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d74:	484e      	ldr	r0, [pc, #312]	@ (8015eb0 <_svfiprintf_r+0x1e4>)
 8015d76:	f7ea fa3b 	bl	80001f0 <memchr>
 8015d7a:	9a04      	ldr	r2, [sp, #16]
 8015d7c:	b9d8      	cbnz	r0, 8015db6 <_svfiprintf_r+0xea>
 8015d7e:	06d0      	lsls	r0, r2, #27
 8015d80:	bf44      	itt	mi
 8015d82:	2320      	movmi	r3, #32
 8015d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d88:	0711      	lsls	r1, r2, #28
 8015d8a:	bf44      	itt	mi
 8015d8c:	232b      	movmi	r3, #43	@ 0x2b
 8015d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d92:	f89a 3000 	ldrb.w	r3, [sl]
 8015d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d98:	d015      	beq.n	8015dc6 <_svfiprintf_r+0xfa>
 8015d9a:	9a07      	ldr	r2, [sp, #28]
 8015d9c:	4654      	mov	r4, sl
 8015d9e:	2000      	movs	r0, #0
 8015da0:	f04f 0c0a 	mov.w	ip, #10
 8015da4:	4621      	mov	r1, r4
 8015da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015daa:	3b30      	subs	r3, #48	@ 0x30
 8015dac:	2b09      	cmp	r3, #9
 8015dae:	d94b      	bls.n	8015e48 <_svfiprintf_r+0x17c>
 8015db0:	b1b0      	cbz	r0, 8015de0 <_svfiprintf_r+0x114>
 8015db2:	9207      	str	r2, [sp, #28]
 8015db4:	e014      	b.n	8015de0 <_svfiprintf_r+0x114>
 8015db6:	eba0 0308 	sub.w	r3, r0, r8
 8015dba:	fa09 f303 	lsl.w	r3, r9, r3
 8015dbe:	4313      	orrs	r3, r2
 8015dc0:	9304      	str	r3, [sp, #16]
 8015dc2:	46a2      	mov	sl, r4
 8015dc4:	e7d2      	b.n	8015d6c <_svfiprintf_r+0xa0>
 8015dc6:	9b03      	ldr	r3, [sp, #12]
 8015dc8:	1d19      	adds	r1, r3, #4
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	9103      	str	r1, [sp, #12]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	bfbb      	ittet	lt
 8015dd2:	425b      	neglt	r3, r3
 8015dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8015dd8:	9307      	strge	r3, [sp, #28]
 8015dda:	9307      	strlt	r3, [sp, #28]
 8015ddc:	bfb8      	it	lt
 8015dde:	9204      	strlt	r2, [sp, #16]
 8015de0:	7823      	ldrb	r3, [r4, #0]
 8015de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8015de4:	d10a      	bne.n	8015dfc <_svfiprintf_r+0x130>
 8015de6:	7863      	ldrb	r3, [r4, #1]
 8015de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8015dea:	d132      	bne.n	8015e52 <_svfiprintf_r+0x186>
 8015dec:	9b03      	ldr	r3, [sp, #12]
 8015dee:	1d1a      	adds	r2, r3, #4
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	9203      	str	r2, [sp, #12]
 8015df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015df8:	3402      	adds	r4, #2
 8015dfa:	9305      	str	r3, [sp, #20]
 8015dfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015ec0 <_svfiprintf_r+0x1f4>
 8015e00:	7821      	ldrb	r1, [r4, #0]
 8015e02:	2203      	movs	r2, #3
 8015e04:	4650      	mov	r0, sl
 8015e06:	f7ea f9f3 	bl	80001f0 <memchr>
 8015e0a:	b138      	cbz	r0, 8015e1c <_svfiprintf_r+0x150>
 8015e0c:	9b04      	ldr	r3, [sp, #16]
 8015e0e:	eba0 000a 	sub.w	r0, r0, sl
 8015e12:	2240      	movs	r2, #64	@ 0x40
 8015e14:	4082      	lsls	r2, r0
 8015e16:	4313      	orrs	r3, r2
 8015e18:	3401      	adds	r4, #1
 8015e1a:	9304      	str	r3, [sp, #16]
 8015e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e20:	4824      	ldr	r0, [pc, #144]	@ (8015eb4 <_svfiprintf_r+0x1e8>)
 8015e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015e26:	2206      	movs	r2, #6
 8015e28:	f7ea f9e2 	bl	80001f0 <memchr>
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	d036      	beq.n	8015e9e <_svfiprintf_r+0x1d2>
 8015e30:	4b21      	ldr	r3, [pc, #132]	@ (8015eb8 <_svfiprintf_r+0x1ec>)
 8015e32:	bb1b      	cbnz	r3, 8015e7c <_svfiprintf_r+0x1b0>
 8015e34:	9b03      	ldr	r3, [sp, #12]
 8015e36:	3307      	adds	r3, #7
 8015e38:	f023 0307 	bic.w	r3, r3, #7
 8015e3c:	3308      	adds	r3, #8
 8015e3e:	9303      	str	r3, [sp, #12]
 8015e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e42:	4433      	add	r3, r6
 8015e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e46:	e76a      	b.n	8015d1e <_svfiprintf_r+0x52>
 8015e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e4c:	460c      	mov	r4, r1
 8015e4e:	2001      	movs	r0, #1
 8015e50:	e7a8      	b.n	8015da4 <_svfiprintf_r+0xd8>
 8015e52:	2300      	movs	r3, #0
 8015e54:	3401      	adds	r4, #1
 8015e56:	9305      	str	r3, [sp, #20]
 8015e58:	4619      	mov	r1, r3
 8015e5a:	f04f 0c0a 	mov.w	ip, #10
 8015e5e:	4620      	mov	r0, r4
 8015e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e64:	3a30      	subs	r2, #48	@ 0x30
 8015e66:	2a09      	cmp	r2, #9
 8015e68:	d903      	bls.n	8015e72 <_svfiprintf_r+0x1a6>
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d0c6      	beq.n	8015dfc <_svfiprintf_r+0x130>
 8015e6e:	9105      	str	r1, [sp, #20]
 8015e70:	e7c4      	b.n	8015dfc <_svfiprintf_r+0x130>
 8015e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e76:	4604      	mov	r4, r0
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e7f0      	b.n	8015e5e <_svfiprintf_r+0x192>
 8015e7c:	ab03      	add	r3, sp, #12
 8015e7e:	9300      	str	r3, [sp, #0]
 8015e80:	462a      	mov	r2, r5
 8015e82:	4b0e      	ldr	r3, [pc, #56]	@ (8015ebc <_svfiprintf_r+0x1f0>)
 8015e84:	a904      	add	r1, sp, #16
 8015e86:	4638      	mov	r0, r7
 8015e88:	f3af 8000 	nop.w
 8015e8c:	1c42      	adds	r2, r0, #1
 8015e8e:	4606      	mov	r6, r0
 8015e90:	d1d6      	bne.n	8015e40 <_svfiprintf_r+0x174>
 8015e92:	89ab      	ldrh	r3, [r5, #12]
 8015e94:	065b      	lsls	r3, r3, #25
 8015e96:	f53f af2d 	bmi.w	8015cf4 <_svfiprintf_r+0x28>
 8015e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e9c:	e72c      	b.n	8015cf8 <_svfiprintf_r+0x2c>
 8015e9e:	ab03      	add	r3, sp, #12
 8015ea0:	9300      	str	r3, [sp, #0]
 8015ea2:	462a      	mov	r2, r5
 8015ea4:	4b05      	ldr	r3, [pc, #20]	@ (8015ebc <_svfiprintf_r+0x1f0>)
 8015ea6:	a904      	add	r1, sp, #16
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f000 f9bb 	bl	8016224 <_printf_i>
 8015eae:	e7ed      	b.n	8015e8c <_svfiprintf_r+0x1c0>
 8015eb0:	0801844c 	.word	0x0801844c
 8015eb4:	08018456 	.word	0x08018456
 8015eb8:	00000000 	.word	0x00000000
 8015ebc:	08015c15 	.word	0x08015c15
 8015ec0:	08018452 	.word	0x08018452

08015ec4 <__sfputc_r>:
 8015ec4:	6893      	ldr	r3, [r2, #8]
 8015ec6:	3b01      	subs	r3, #1
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	b410      	push	{r4}
 8015ecc:	6093      	str	r3, [r2, #8]
 8015ece:	da08      	bge.n	8015ee2 <__sfputc_r+0x1e>
 8015ed0:	6994      	ldr	r4, [r2, #24]
 8015ed2:	42a3      	cmp	r3, r4
 8015ed4:	db01      	blt.n	8015eda <__sfputc_r+0x16>
 8015ed6:	290a      	cmp	r1, #10
 8015ed8:	d103      	bne.n	8015ee2 <__sfputc_r+0x1e>
 8015eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ede:	f7ff bd2e 	b.w	801593e <__swbuf_r>
 8015ee2:	6813      	ldr	r3, [r2, #0]
 8015ee4:	1c58      	adds	r0, r3, #1
 8015ee6:	6010      	str	r0, [r2, #0]
 8015ee8:	7019      	strb	r1, [r3, #0]
 8015eea:	4608      	mov	r0, r1
 8015eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ef0:	4770      	bx	lr

08015ef2 <__sfputs_r>:
 8015ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ef4:	4606      	mov	r6, r0
 8015ef6:	460f      	mov	r7, r1
 8015ef8:	4614      	mov	r4, r2
 8015efa:	18d5      	adds	r5, r2, r3
 8015efc:	42ac      	cmp	r4, r5
 8015efe:	d101      	bne.n	8015f04 <__sfputs_r+0x12>
 8015f00:	2000      	movs	r0, #0
 8015f02:	e007      	b.n	8015f14 <__sfputs_r+0x22>
 8015f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f08:	463a      	mov	r2, r7
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f7ff ffda 	bl	8015ec4 <__sfputc_r>
 8015f10:	1c43      	adds	r3, r0, #1
 8015f12:	d1f3      	bne.n	8015efc <__sfputs_r+0xa>
 8015f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015f18 <_vfiprintf_r>:
 8015f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f1c:	460d      	mov	r5, r1
 8015f1e:	b09d      	sub	sp, #116	@ 0x74
 8015f20:	4614      	mov	r4, r2
 8015f22:	4698      	mov	r8, r3
 8015f24:	4606      	mov	r6, r0
 8015f26:	b118      	cbz	r0, 8015f30 <_vfiprintf_r+0x18>
 8015f28:	6a03      	ldr	r3, [r0, #32]
 8015f2a:	b90b      	cbnz	r3, 8015f30 <_vfiprintf_r+0x18>
 8015f2c:	f7ff fbe8 	bl	8015700 <__sinit>
 8015f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f32:	07d9      	lsls	r1, r3, #31
 8015f34:	d405      	bmi.n	8015f42 <_vfiprintf_r+0x2a>
 8015f36:	89ab      	ldrh	r3, [r5, #12]
 8015f38:	059a      	lsls	r2, r3, #22
 8015f3a:	d402      	bmi.n	8015f42 <_vfiprintf_r+0x2a>
 8015f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f3e:	f7ff fe1c 	bl	8015b7a <__retarget_lock_acquire_recursive>
 8015f42:	89ab      	ldrh	r3, [r5, #12]
 8015f44:	071b      	lsls	r3, r3, #28
 8015f46:	d501      	bpl.n	8015f4c <_vfiprintf_r+0x34>
 8015f48:	692b      	ldr	r3, [r5, #16]
 8015f4a:	b99b      	cbnz	r3, 8015f74 <_vfiprintf_r+0x5c>
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	4630      	mov	r0, r6
 8015f50:	f7ff fd34 	bl	80159bc <__swsetup_r>
 8015f54:	b170      	cbz	r0, 8015f74 <_vfiprintf_r+0x5c>
 8015f56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f58:	07dc      	lsls	r4, r3, #31
 8015f5a:	d504      	bpl.n	8015f66 <_vfiprintf_r+0x4e>
 8015f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f60:	b01d      	add	sp, #116	@ 0x74
 8015f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f66:	89ab      	ldrh	r3, [r5, #12]
 8015f68:	0598      	lsls	r0, r3, #22
 8015f6a:	d4f7      	bmi.n	8015f5c <_vfiprintf_r+0x44>
 8015f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f6e:	f7ff fe05 	bl	8015b7c <__retarget_lock_release_recursive>
 8015f72:	e7f3      	b.n	8015f5c <_vfiprintf_r+0x44>
 8015f74:	2300      	movs	r3, #0
 8015f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f78:	2320      	movs	r3, #32
 8015f7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f82:	2330      	movs	r3, #48	@ 0x30
 8015f84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016134 <_vfiprintf_r+0x21c>
 8015f88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f8c:	f04f 0901 	mov.w	r9, #1
 8015f90:	4623      	mov	r3, r4
 8015f92:	469a      	mov	sl, r3
 8015f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f98:	b10a      	cbz	r2, 8015f9e <_vfiprintf_r+0x86>
 8015f9a:	2a25      	cmp	r2, #37	@ 0x25
 8015f9c:	d1f9      	bne.n	8015f92 <_vfiprintf_r+0x7a>
 8015f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8015fa2:	d00b      	beq.n	8015fbc <_vfiprintf_r+0xa4>
 8015fa4:	465b      	mov	r3, fp
 8015fa6:	4622      	mov	r2, r4
 8015fa8:	4629      	mov	r1, r5
 8015faa:	4630      	mov	r0, r6
 8015fac:	f7ff ffa1 	bl	8015ef2 <__sfputs_r>
 8015fb0:	3001      	adds	r0, #1
 8015fb2:	f000 80a7 	beq.w	8016104 <_vfiprintf_r+0x1ec>
 8015fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fb8:	445a      	add	r2, fp
 8015fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	f000 809f 	beq.w	8016104 <_vfiprintf_r+0x1ec>
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8015fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fd0:	f10a 0a01 	add.w	sl, sl, #1
 8015fd4:	9304      	str	r3, [sp, #16]
 8015fd6:	9307      	str	r3, [sp, #28]
 8015fd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8015fde:	4654      	mov	r4, sl
 8015fe0:	2205      	movs	r2, #5
 8015fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fe6:	4853      	ldr	r0, [pc, #332]	@ (8016134 <_vfiprintf_r+0x21c>)
 8015fe8:	f7ea f902 	bl	80001f0 <memchr>
 8015fec:	9a04      	ldr	r2, [sp, #16]
 8015fee:	b9d8      	cbnz	r0, 8016028 <_vfiprintf_r+0x110>
 8015ff0:	06d1      	lsls	r1, r2, #27
 8015ff2:	bf44      	itt	mi
 8015ff4:	2320      	movmi	r3, #32
 8015ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ffa:	0713      	lsls	r3, r2, #28
 8015ffc:	bf44      	itt	mi
 8015ffe:	232b      	movmi	r3, #43	@ 0x2b
 8016000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016004:	f89a 3000 	ldrb.w	r3, [sl]
 8016008:	2b2a      	cmp	r3, #42	@ 0x2a
 801600a:	d015      	beq.n	8016038 <_vfiprintf_r+0x120>
 801600c:	9a07      	ldr	r2, [sp, #28]
 801600e:	4654      	mov	r4, sl
 8016010:	2000      	movs	r0, #0
 8016012:	f04f 0c0a 	mov.w	ip, #10
 8016016:	4621      	mov	r1, r4
 8016018:	f811 3b01 	ldrb.w	r3, [r1], #1
 801601c:	3b30      	subs	r3, #48	@ 0x30
 801601e:	2b09      	cmp	r3, #9
 8016020:	d94b      	bls.n	80160ba <_vfiprintf_r+0x1a2>
 8016022:	b1b0      	cbz	r0, 8016052 <_vfiprintf_r+0x13a>
 8016024:	9207      	str	r2, [sp, #28]
 8016026:	e014      	b.n	8016052 <_vfiprintf_r+0x13a>
 8016028:	eba0 0308 	sub.w	r3, r0, r8
 801602c:	fa09 f303 	lsl.w	r3, r9, r3
 8016030:	4313      	orrs	r3, r2
 8016032:	9304      	str	r3, [sp, #16]
 8016034:	46a2      	mov	sl, r4
 8016036:	e7d2      	b.n	8015fde <_vfiprintf_r+0xc6>
 8016038:	9b03      	ldr	r3, [sp, #12]
 801603a:	1d19      	adds	r1, r3, #4
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	9103      	str	r1, [sp, #12]
 8016040:	2b00      	cmp	r3, #0
 8016042:	bfbb      	ittet	lt
 8016044:	425b      	neglt	r3, r3
 8016046:	f042 0202 	orrlt.w	r2, r2, #2
 801604a:	9307      	strge	r3, [sp, #28]
 801604c:	9307      	strlt	r3, [sp, #28]
 801604e:	bfb8      	it	lt
 8016050:	9204      	strlt	r2, [sp, #16]
 8016052:	7823      	ldrb	r3, [r4, #0]
 8016054:	2b2e      	cmp	r3, #46	@ 0x2e
 8016056:	d10a      	bne.n	801606e <_vfiprintf_r+0x156>
 8016058:	7863      	ldrb	r3, [r4, #1]
 801605a:	2b2a      	cmp	r3, #42	@ 0x2a
 801605c:	d132      	bne.n	80160c4 <_vfiprintf_r+0x1ac>
 801605e:	9b03      	ldr	r3, [sp, #12]
 8016060:	1d1a      	adds	r2, r3, #4
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	9203      	str	r2, [sp, #12]
 8016066:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801606a:	3402      	adds	r4, #2
 801606c:	9305      	str	r3, [sp, #20]
 801606e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016144 <_vfiprintf_r+0x22c>
 8016072:	7821      	ldrb	r1, [r4, #0]
 8016074:	2203      	movs	r2, #3
 8016076:	4650      	mov	r0, sl
 8016078:	f7ea f8ba 	bl	80001f0 <memchr>
 801607c:	b138      	cbz	r0, 801608e <_vfiprintf_r+0x176>
 801607e:	9b04      	ldr	r3, [sp, #16]
 8016080:	eba0 000a 	sub.w	r0, r0, sl
 8016084:	2240      	movs	r2, #64	@ 0x40
 8016086:	4082      	lsls	r2, r0
 8016088:	4313      	orrs	r3, r2
 801608a:	3401      	adds	r4, #1
 801608c:	9304      	str	r3, [sp, #16]
 801608e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016092:	4829      	ldr	r0, [pc, #164]	@ (8016138 <_vfiprintf_r+0x220>)
 8016094:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016098:	2206      	movs	r2, #6
 801609a:	f7ea f8a9 	bl	80001f0 <memchr>
 801609e:	2800      	cmp	r0, #0
 80160a0:	d03f      	beq.n	8016122 <_vfiprintf_r+0x20a>
 80160a2:	4b26      	ldr	r3, [pc, #152]	@ (801613c <_vfiprintf_r+0x224>)
 80160a4:	bb1b      	cbnz	r3, 80160ee <_vfiprintf_r+0x1d6>
 80160a6:	9b03      	ldr	r3, [sp, #12]
 80160a8:	3307      	adds	r3, #7
 80160aa:	f023 0307 	bic.w	r3, r3, #7
 80160ae:	3308      	adds	r3, #8
 80160b0:	9303      	str	r3, [sp, #12]
 80160b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160b4:	443b      	add	r3, r7
 80160b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80160b8:	e76a      	b.n	8015f90 <_vfiprintf_r+0x78>
 80160ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80160be:	460c      	mov	r4, r1
 80160c0:	2001      	movs	r0, #1
 80160c2:	e7a8      	b.n	8016016 <_vfiprintf_r+0xfe>
 80160c4:	2300      	movs	r3, #0
 80160c6:	3401      	adds	r4, #1
 80160c8:	9305      	str	r3, [sp, #20]
 80160ca:	4619      	mov	r1, r3
 80160cc:	f04f 0c0a 	mov.w	ip, #10
 80160d0:	4620      	mov	r0, r4
 80160d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160d6:	3a30      	subs	r2, #48	@ 0x30
 80160d8:	2a09      	cmp	r2, #9
 80160da:	d903      	bls.n	80160e4 <_vfiprintf_r+0x1cc>
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d0c6      	beq.n	801606e <_vfiprintf_r+0x156>
 80160e0:	9105      	str	r1, [sp, #20]
 80160e2:	e7c4      	b.n	801606e <_vfiprintf_r+0x156>
 80160e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80160e8:	4604      	mov	r4, r0
 80160ea:	2301      	movs	r3, #1
 80160ec:	e7f0      	b.n	80160d0 <_vfiprintf_r+0x1b8>
 80160ee:	ab03      	add	r3, sp, #12
 80160f0:	9300      	str	r3, [sp, #0]
 80160f2:	462a      	mov	r2, r5
 80160f4:	4b12      	ldr	r3, [pc, #72]	@ (8016140 <_vfiprintf_r+0x228>)
 80160f6:	a904      	add	r1, sp, #16
 80160f8:	4630      	mov	r0, r6
 80160fa:	f3af 8000 	nop.w
 80160fe:	4607      	mov	r7, r0
 8016100:	1c78      	adds	r0, r7, #1
 8016102:	d1d6      	bne.n	80160b2 <_vfiprintf_r+0x19a>
 8016104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016106:	07d9      	lsls	r1, r3, #31
 8016108:	d405      	bmi.n	8016116 <_vfiprintf_r+0x1fe>
 801610a:	89ab      	ldrh	r3, [r5, #12]
 801610c:	059a      	lsls	r2, r3, #22
 801610e:	d402      	bmi.n	8016116 <_vfiprintf_r+0x1fe>
 8016110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016112:	f7ff fd33 	bl	8015b7c <__retarget_lock_release_recursive>
 8016116:	89ab      	ldrh	r3, [r5, #12]
 8016118:	065b      	lsls	r3, r3, #25
 801611a:	f53f af1f 	bmi.w	8015f5c <_vfiprintf_r+0x44>
 801611e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016120:	e71e      	b.n	8015f60 <_vfiprintf_r+0x48>
 8016122:	ab03      	add	r3, sp, #12
 8016124:	9300      	str	r3, [sp, #0]
 8016126:	462a      	mov	r2, r5
 8016128:	4b05      	ldr	r3, [pc, #20]	@ (8016140 <_vfiprintf_r+0x228>)
 801612a:	a904      	add	r1, sp, #16
 801612c:	4630      	mov	r0, r6
 801612e:	f000 f879 	bl	8016224 <_printf_i>
 8016132:	e7e4      	b.n	80160fe <_vfiprintf_r+0x1e6>
 8016134:	0801844c 	.word	0x0801844c
 8016138:	08018456 	.word	0x08018456
 801613c:	00000000 	.word	0x00000000
 8016140:	08015ef3 	.word	0x08015ef3
 8016144:	08018452 	.word	0x08018452

08016148 <_printf_common>:
 8016148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801614c:	4616      	mov	r6, r2
 801614e:	4698      	mov	r8, r3
 8016150:	688a      	ldr	r2, [r1, #8]
 8016152:	690b      	ldr	r3, [r1, #16]
 8016154:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016158:	4293      	cmp	r3, r2
 801615a:	bfb8      	it	lt
 801615c:	4613      	movlt	r3, r2
 801615e:	6033      	str	r3, [r6, #0]
 8016160:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016164:	4607      	mov	r7, r0
 8016166:	460c      	mov	r4, r1
 8016168:	b10a      	cbz	r2, 801616e <_printf_common+0x26>
 801616a:	3301      	adds	r3, #1
 801616c:	6033      	str	r3, [r6, #0]
 801616e:	6823      	ldr	r3, [r4, #0]
 8016170:	0699      	lsls	r1, r3, #26
 8016172:	bf42      	ittt	mi
 8016174:	6833      	ldrmi	r3, [r6, #0]
 8016176:	3302      	addmi	r3, #2
 8016178:	6033      	strmi	r3, [r6, #0]
 801617a:	6825      	ldr	r5, [r4, #0]
 801617c:	f015 0506 	ands.w	r5, r5, #6
 8016180:	d106      	bne.n	8016190 <_printf_common+0x48>
 8016182:	f104 0a19 	add.w	sl, r4, #25
 8016186:	68e3      	ldr	r3, [r4, #12]
 8016188:	6832      	ldr	r2, [r6, #0]
 801618a:	1a9b      	subs	r3, r3, r2
 801618c:	42ab      	cmp	r3, r5
 801618e:	dc26      	bgt.n	80161de <_printf_common+0x96>
 8016190:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016194:	6822      	ldr	r2, [r4, #0]
 8016196:	3b00      	subs	r3, #0
 8016198:	bf18      	it	ne
 801619a:	2301      	movne	r3, #1
 801619c:	0692      	lsls	r2, r2, #26
 801619e:	d42b      	bmi.n	80161f8 <_printf_common+0xb0>
 80161a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80161a4:	4641      	mov	r1, r8
 80161a6:	4638      	mov	r0, r7
 80161a8:	47c8      	blx	r9
 80161aa:	3001      	adds	r0, #1
 80161ac:	d01e      	beq.n	80161ec <_printf_common+0xa4>
 80161ae:	6823      	ldr	r3, [r4, #0]
 80161b0:	6922      	ldr	r2, [r4, #16]
 80161b2:	f003 0306 	and.w	r3, r3, #6
 80161b6:	2b04      	cmp	r3, #4
 80161b8:	bf02      	ittt	eq
 80161ba:	68e5      	ldreq	r5, [r4, #12]
 80161bc:	6833      	ldreq	r3, [r6, #0]
 80161be:	1aed      	subeq	r5, r5, r3
 80161c0:	68a3      	ldr	r3, [r4, #8]
 80161c2:	bf0c      	ite	eq
 80161c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80161c8:	2500      	movne	r5, #0
 80161ca:	4293      	cmp	r3, r2
 80161cc:	bfc4      	itt	gt
 80161ce:	1a9b      	subgt	r3, r3, r2
 80161d0:	18ed      	addgt	r5, r5, r3
 80161d2:	2600      	movs	r6, #0
 80161d4:	341a      	adds	r4, #26
 80161d6:	42b5      	cmp	r5, r6
 80161d8:	d11a      	bne.n	8016210 <_printf_common+0xc8>
 80161da:	2000      	movs	r0, #0
 80161dc:	e008      	b.n	80161f0 <_printf_common+0xa8>
 80161de:	2301      	movs	r3, #1
 80161e0:	4652      	mov	r2, sl
 80161e2:	4641      	mov	r1, r8
 80161e4:	4638      	mov	r0, r7
 80161e6:	47c8      	blx	r9
 80161e8:	3001      	adds	r0, #1
 80161ea:	d103      	bne.n	80161f4 <_printf_common+0xac>
 80161ec:	f04f 30ff 	mov.w	r0, #4294967295
 80161f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161f4:	3501      	adds	r5, #1
 80161f6:	e7c6      	b.n	8016186 <_printf_common+0x3e>
 80161f8:	18e1      	adds	r1, r4, r3
 80161fa:	1c5a      	adds	r2, r3, #1
 80161fc:	2030      	movs	r0, #48	@ 0x30
 80161fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016202:	4422      	add	r2, r4
 8016204:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016208:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801620c:	3302      	adds	r3, #2
 801620e:	e7c7      	b.n	80161a0 <_printf_common+0x58>
 8016210:	2301      	movs	r3, #1
 8016212:	4622      	mov	r2, r4
 8016214:	4641      	mov	r1, r8
 8016216:	4638      	mov	r0, r7
 8016218:	47c8      	blx	r9
 801621a:	3001      	adds	r0, #1
 801621c:	d0e6      	beq.n	80161ec <_printf_common+0xa4>
 801621e:	3601      	adds	r6, #1
 8016220:	e7d9      	b.n	80161d6 <_printf_common+0x8e>
	...

08016224 <_printf_i>:
 8016224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016228:	7e0f      	ldrb	r7, [r1, #24]
 801622a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801622c:	2f78      	cmp	r7, #120	@ 0x78
 801622e:	4691      	mov	r9, r2
 8016230:	4680      	mov	r8, r0
 8016232:	460c      	mov	r4, r1
 8016234:	469a      	mov	sl, r3
 8016236:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801623a:	d807      	bhi.n	801624c <_printf_i+0x28>
 801623c:	2f62      	cmp	r7, #98	@ 0x62
 801623e:	d80a      	bhi.n	8016256 <_printf_i+0x32>
 8016240:	2f00      	cmp	r7, #0
 8016242:	f000 80d1 	beq.w	80163e8 <_printf_i+0x1c4>
 8016246:	2f58      	cmp	r7, #88	@ 0x58
 8016248:	f000 80b8 	beq.w	80163bc <_printf_i+0x198>
 801624c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016250:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016254:	e03a      	b.n	80162cc <_printf_i+0xa8>
 8016256:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801625a:	2b15      	cmp	r3, #21
 801625c:	d8f6      	bhi.n	801624c <_printf_i+0x28>
 801625e:	a101      	add	r1, pc, #4	@ (adr r1, 8016264 <_printf_i+0x40>)
 8016260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016264:	080162bd 	.word	0x080162bd
 8016268:	080162d1 	.word	0x080162d1
 801626c:	0801624d 	.word	0x0801624d
 8016270:	0801624d 	.word	0x0801624d
 8016274:	0801624d 	.word	0x0801624d
 8016278:	0801624d 	.word	0x0801624d
 801627c:	080162d1 	.word	0x080162d1
 8016280:	0801624d 	.word	0x0801624d
 8016284:	0801624d 	.word	0x0801624d
 8016288:	0801624d 	.word	0x0801624d
 801628c:	0801624d 	.word	0x0801624d
 8016290:	080163cf 	.word	0x080163cf
 8016294:	080162fb 	.word	0x080162fb
 8016298:	08016389 	.word	0x08016389
 801629c:	0801624d 	.word	0x0801624d
 80162a0:	0801624d 	.word	0x0801624d
 80162a4:	080163f1 	.word	0x080163f1
 80162a8:	0801624d 	.word	0x0801624d
 80162ac:	080162fb 	.word	0x080162fb
 80162b0:	0801624d 	.word	0x0801624d
 80162b4:	0801624d 	.word	0x0801624d
 80162b8:	08016391 	.word	0x08016391
 80162bc:	6833      	ldr	r3, [r6, #0]
 80162be:	1d1a      	adds	r2, r3, #4
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	6032      	str	r2, [r6, #0]
 80162c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80162c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80162cc:	2301      	movs	r3, #1
 80162ce:	e09c      	b.n	801640a <_printf_i+0x1e6>
 80162d0:	6833      	ldr	r3, [r6, #0]
 80162d2:	6820      	ldr	r0, [r4, #0]
 80162d4:	1d19      	adds	r1, r3, #4
 80162d6:	6031      	str	r1, [r6, #0]
 80162d8:	0606      	lsls	r6, r0, #24
 80162da:	d501      	bpl.n	80162e0 <_printf_i+0xbc>
 80162dc:	681d      	ldr	r5, [r3, #0]
 80162de:	e003      	b.n	80162e8 <_printf_i+0xc4>
 80162e0:	0645      	lsls	r5, r0, #25
 80162e2:	d5fb      	bpl.n	80162dc <_printf_i+0xb8>
 80162e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80162e8:	2d00      	cmp	r5, #0
 80162ea:	da03      	bge.n	80162f4 <_printf_i+0xd0>
 80162ec:	232d      	movs	r3, #45	@ 0x2d
 80162ee:	426d      	negs	r5, r5
 80162f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162f4:	4858      	ldr	r0, [pc, #352]	@ (8016458 <_printf_i+0x234>)
 80162f6:	230a      	movs	r3, #10
 80162f8:	e011      	b.n	801631e <_printf_i+0xfa>
 80162fa:	6821      	ldr	r1, [r4, #0]
 80162fc:	6833      	ldr	r3, [r6, #0]
 80162fe:	0608      	lsls	r0, r1, #24
 8016300:	f853 5b04 	ldr.w	r5, [r3], #4
 8016304:	d402      	bmi.n	801630c <_printf_i+0xe8>
 8016306:	0649      	lsls	r1, r1, #25
 8016308:	bf48      	it	mi
 801630a:	b2ad      	uxthmi	r5, r5
 801630c:	2f6f      	cmp	r7, #111	@ 0x6f
 801630e:	4852      	ldr	r0, [pc, #328]	@ (8016458 <_printf_i+0x234>)
 8016310:	6033      	str	r3, [r6, #0]
 8016312:	bf14      	ite	ne
 8016314:	230a      	movne	r3, #10
 8016316:	2308      	moveq	r3, #8
 8016318:	2100      	movs	r1, #0
 801631a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801631e:	6866      	ldr	r6, [r4, #4]
 8016320:	60a6      	str	r6, [r4, #8]
 8016322:	2e00      	cmp	r6, #0
 8016324:	db05      	blt.n	8016332 <_printf_i+0x10e>
 8016326:	6821      	ldr	r1, [r4, #0]
 8016328:	432e      	orrs	r6, r5
 801632a:	f021 0104 	bic.w	r1, r1, #4
 801632e:	6021      	str	r1, [r4, #0]
 8016330:	d04b      	beq.n	80163ca <_printf_i+0x1a6>
 8016332:	4616      	mov	r6, r2
 8016334:	fbb5 f1f3 	udiv	r1, r5, r3
 8016338:	fb03 5711 	mls	r7, r3, r1, r5
 801633c:	5dc7      	ldrb	r7, [r0, r7]
 801633e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016342:	462f      	mov	r7, r5
 8016344:	42bb      	cmp	r3, r7
 8016346:	460d      	mov	r5, r1
 8016348:	d9f4      	bls.n	8016334 <_printf_i+0x110>
 801634a:	2b08      	cmp	r3, #8
 801634c:	d10b      	bne.n	8016366 <_printf_i+0x142>
 801634e:	6823      	ldr	r3, [r4, #0]
 8016350:	07df      	lsls	r7, r3, #31
 8016352:	d508      	bpl.n	8016366 <_printf_i+0x142>
 8016354:	6923      	ldr	r3, [r4, #16]
 8016356:	6861      	ldr	r1, [r4, #4]
 8016358:	4299      	cmp	r1, r3
 801635a:	bfde      	ittt	le
 801635c:	2330      	movle	r3, #48	@ 0x30
 801635e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016362:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016366:	1b92      	subs	r2, r2, r6
 8016368:	6122      	str	r2, [r4, #16]
 801636a:	f8cd a000 	str.w	sl, [sp]
 801636e:	464b      	mov	r3, r9
 8016370:	aa03      	add	r2, sp, #12
 8016372:	4621      	mov	r1, r4
 8016374:	4640      	mov	r0, r8
 8016376:	f7ff fee7 	bl	8016148 <_printf_common>
 801637a:	3001      	adds	r0, #1
 801637c:	d14a      	bne.n	8016414 <_printf_i+0x1f0>
 801637e:	f04f 30ff 	mov.w	r0, #4294967295
 8016382:	b004      	add	sp, #16
 8016384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016388:	6823      	ldr	r3, [r4, #0]
 801638a:	f043 0320 	orr.w	r3, r3, #32
 801638e:	6023      	str	r3, [r4, #0]
 8016390:	4832      	ldr	r0, [pc, #200]	@ (801645c <_printf_i+0x238>)
 8016392:	2778      	movs	r7, #120	@ 0x78
 8016394:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	6831      	ldr	r1, [r6, #0]
 801639c:	061f      	lsls	r7, r3, #24
 801639e:	f851 5b04 	ldr.w	r5, [r1], #4
 80163a2:	d402      	bmi.n	80163aa <_printf_i+0x186>
 80163a4:	065f      	lsls	r7, r3, #25
 80163a6:	bf48      	it	mi
 80163a8:	b2ad      	uxthmi	r5, r5
 80163aa:	6031      	str	r1, [r6, #0]
 80163ac:	07d9      	lsls	r1, r3, #31
 80163ae:	bf44      	itt	mi
 80163b0:	f043 0320 	orrmi.w	r3, r3, #32
 80163b4:	6023      	strmi	r3, [r4, #0]
 80163b6:	b11d      	cbz	r5, 80163c0 <_printf_i+0x19c>
 80163b8:	2310      	movs	r3, #16
 80163ba:	e7ad      	b.n	8016318 <_printf_i+0xf4>
 80163bc:	4826      	ldr	r0, [pc, #152]	@ (8016458 <_printf_i+0x234>)
 80163be:	e7e9      	b.n	8016394 <_printf_i+0x170>
 80163c0:	6823      	ldr	r3, [r4, #0]
 80163c2:	f023 0320 	bic.w	r3, r3, #32
 80163c6:	6023      	str	r3, [r4, #0]
 80163c8:	e7f6      	b.n	80163b8 <_printf_i+0x194>
 80163ca:	4616      	mov	r6, r2
 80163cc:	e7bd      	b.n	801634a <_printf_i+0x126>
 80163ce:	6833      	ldr	r3, [r6, #0]
 80163d0:	6825      	ldr	r5, [r4, #0]
 80163d2:	6961      	ldr	r1, [r4, #20]
 80163d4:	1d18      	adds	r0, r3, #4
 80163d6:	6030      	str	r0, [r6, #0]
 80163d8:	062e      	lsls	r6, r5, #24
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	d501      	bpl.n	80163e2 <_printf_i+0x1be>
 80163de:	6019      	str	r1, [r3, #0]
 80163e0:	e002      	b.n	80163e8 <_printf_i+0x1c4>
 80163e2:	0668      	lsls	r0, r5, #25
 80163e4:	d5fb      	bpl.n	80163de <_printf_i+0x1ba>
 80163e6:	8019      	strh	r1, [r3, #0]
 80163e8:	2300      	movs	r3, #0
 80163ea:	6123      	str	r3, [r4, #16]
 80163ec:	4616      	mov	r6, r2
 80163ee:	e7bc      	b.n	801636a <_printf_i+0x146>
 80163f0:	6833      	ldr	r3, [r6, #0]
 80163f2:	1d1a      	adds	r2, r3, #4
 80163f4:	6032      	str	r2, [r6, #0]
 80163f6:	681e      	ldr	r6, [r3, #0]
 80163f8:	6862      	ldr	r2, [r4, #4]
 80163fa:	2100      	movs	r1, #0
 80163fc:	4630      	mov	r0, r6
 80163fe:	f7e9 fef7 	bl	80001f0 <memchr>
 8016402:	b108      	cbz	r0, 8016408 <_printf_i+0x1e4>
 8016404:	1b80      	subs	r0, r0, r6
 8016406:	6060      	str	r0, [r4, #4]
 8016408:	6863      	ldr	r3, [r4, #4]
 801640a:	6123      	str	r3, [r4, #16]
 801640c:	2300      	movs	r3, #0
 801640e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016412:	e7aa      	b.n	801636a <_printf_i+0x146>
 8016414:	6923      	ldr	r3, [r4, #16]
 8016416:	4632      	mov	r2, r6
 8016418:	4649      	mov	r1, r9
 801641a:	4640      	mov	r0, r8
 801641c:	47d0      	blx	sl
 801641e:	3001      	adds	r0, #1
 8016420:	d0ad      	beq.n	801637e <_printf_i+0x15a>
 8016422:	6823      	ldr	r3, [r4, #0]
 8016424:	079b      	lsls	r3, r3, #30
 8016426:	d413      	bmi.n	8016450 <_printf_i+0x22c>
 8016428:	68e0      	ldr	r0, [r4, #12]
 801642a:	9b03      	ldr	r3, [sp, #12]
 801642c:	4298      	cmp	r0, r3
 801642e:	bfb8      	it	lt
 8016430:	4618      	movlt	r0, r3
 8016432:	e7a6      	b.n	8016382 <_printf_i+0x15e>
 8016434:	2301      	movs	r3, #1
 8016436:	4632      	mov	r2, r6
 8016438:	4649      	mov	r1, r9
 801643a:	4640      	mov	r0, r8
 801643c:	47d0      	blx	sl
 801643e:	3001      	adds	r0, #1
 8016440:	d09d      	beq.n	801637e <_printf_i+0x15a>
 8016442:	3501      	adds	r5, #1
 8016444:	68e3      	ldr	r3, [r4, #12]
 8016446:	9903      	ldr	r1, [sp, #12]
 8016448:	1a5b      	subs	r3, r3, r1
 801644a:	42ab      	cmp	r3, r5
 801644c:	dcf2      	bgt.n	8016434 <_printf_i+0x210>
 801644e:	e7eb      	b.n	8016428 <_printf_i+0x204>
 8016450:	2500      	movs	r5, #0
 8016452:	f104 0619 	add.w	r6, r4, #25
 8016456:	e7f5      	b.n	8016444 <_printf_i+0x220>
 8016458:	0801845d 	.word	0x0801845d
 801645c:	0801846e 	.word	0x0801846e

08016460 <__sflush_r>:
 8016460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016468:	0716      	lsls	r6, r2, #28
 801646a:	4605      	mov	r5, r0
 801646c:	460c      	mov	r4, r1
 801646e:	d454      	bmi.n	801651a <__sflush_r+0xba>
 8016470:	684b      	ldr	r3, [r1, #4]
 8016472:	2b00      	cmp	r3, #0
 8016474:	dc02      	bgt.n	801647c <__sflush_r+0x1c>
 8016476:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016478:	2b00      	cmp	r3, #0
 801647a:	dd48      	ble.n	801650e <__sflush_r+0xae>
 801647c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801647e:	2e00      	cmp	r6, #0
 8016480:	d045      	beq.n	801650e <__sflush_r+0xae>
 8016482:	2300      	movs	r3, #0
 8016484:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016488:	682f      	ldr	r7, [r5, #0]
 801648a:	6a21      	ldr	r1, [r4, #32]
 801648c:	602b      	str	r3, [r5, #0]
 801648e:	d030      	beq.n	80164f2 <__sflush_r+0x92>
 8016490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	0759      	lsls	r1, r3, #29
 8016496:	d505      	bpl.n	80164a4 <__sflush_r+0x44>
 8016498:	6863      	ldr	r3, [r4, #4]
 801649a:	1ad2      	subs	r2, r2, r3
 801649c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801649e:	b10b      	cbz	r3, 80164a4 <__sflush_r+0x44>
 80164a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80164a2:	1ad2      	subs	r2, r2, r3
 80164a4:	2300      	movs	r3, #0
 80164a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80164a8:	6a21      	ldr	r1, [r4, #32]
 80164aa:	4628      	mov	r0, r5
 80164ac:	47b0      	blx	r6
 80164ae:	1c43      	adds	r3, r0, #1
 80164b0:	89a3      	ldrh	r3, [r4, #12]
 80164b2:	d106      	bne.n	80164c2 <__sflush_r+0x62>
 80164b4:	6829      	ldr	r1, [r5, #0]
 80164b6:	291d      	cmp	r1, #29
 80164b8:	d82b      	bhi.n	8016512 <__sflush_r+0xb2>
 80164ba:	4a2a      	ldr	r2, [pc, #168]	@ (8016564 <__sflush_r+0x104>)
 80164bc:	40ca      	lsrs	r2, r1
 80164be:	07d6      	lsls	r6, r2, #31
 80164c0:	d527      	bpl.n	8016512 <__sflush_r+0xb2>
 80164c2:	2200      	movs	r2, #0
 80164c4:	6062      	str	r2, [r4, #4]
 80164c6:	04d9      	lsls	r1, r3, #19
 80164c8:	6922      	ldr	r2, [r4, #16]
 80164ca:	6022      	str	r2, [r4, #0]
 80164cc:	d504      	bpl.n	80164d8 <__sflush_r+0x78>
 80164ce:	1c42      	adds	r2, r0, #1
 80164d0:	d101      	bne.n	80164d6 <__sflush_r+0x76>
 80164d2:	682b      	ldr	r3, [r5, #0]
 80164d4:	b903      	cbnz	r3, 80164d8 <__sflush_r+0x78>
 80164d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80164d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80164da:	602f      	str	r7, [r5, #0]
 80164dc:	b1b9      	cbz	r1, 801650e <__sflush_r+0xae>
 80164de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80164e2:	4299      	cmp	r1, r3
 80164e4:	d002      	beq.n	80164ec <__sflush_r+0x8c>
 80164e6:	4628      	mov	r0, r5
 80164e8:	f7ff fb4a 	bl	8015b80 <_free_r>
 80164ec:	2300      	movs	r3, #0
 80164ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80164f0:	e00d      	b.n	801650e <__sflush_r+0xae>
 80164f2:	2301      	movs	r3, #1
 80164f4:	4628      	mov	r0, r5
 80164f6:	47b0      	blx	r6
 80164f8:	4602      	mov	r2, r0
 80164fa:	1c50      	adds	r0, r2, #1
 80164fc:	d1c9      	bne.n	8016492 <__sflush_r+0x32>
 80164fe:	682b      	ldr	r3, [r5, #0]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d0c6      	beq.n	8016492 <__sflush_r+0x32>
 8016504:	2b1d      	cmp	r3, #29
 8016506:	d001      	beq.n	801650c <__sflush_r+0xac>
 8016508:	2b16      	cmp	r3, #22
 801650a:	d11e      	bne.n	801654a <__sflush_r+0xea>
 801650c:	602f      	str	r7, [r5, #0]
 801650e:	2000      	movs	r0, #0
 8016510:	e022      	b.n	8016558 <__sflush_r+0xf8>
 8016512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016516:	b21b      	sxth	r3, r3
 8016518:	e01b      	b.n	8016552 <__sflush_r+0xf2>
 801651a:	690f      	ldr	r7, [r1, #16]
 801651c:	2f00      	cmp	r7, #0
 801651e:	d0f6      	beq.n	801650e <__sflush_r+0xae>
 8016520:	0793      	lsls	r3, r2, #30
 8016522:	680e      	ldr	r6, [r1, #0]
 8016524:	bf08      	it	eq
 8016526:	694b      	ldreq	r3, [r1, #20]
 8016528:	600f      	str	r7, [r1, #0]
 801652a:	bf18      	it	ne
 801652c:	2300      	movne	r3, #0
 801652e:	eba6 0807 	sub.w	r8, r6, r7
 8016532:	608b      	str	r3, [r1, #8]
 8016534:	f1b8 0f00 	cmp.w	r8, #0
 8016538:	dde9      	ble.n	801650e <__sflush_r+0xae>
 801653a:	6a21      	ldr	r1, [r4, #32]
 801653c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801653e:	4643      	mov	r3, r8
 8016540:	463a      	mov	r2, r7
 8016542:	4628      	mov	r0, r5
 8016544:	47b0      	blx	r6
 8016546:	2800      	cmp	r0, #0
 8016548:	dc08      	bgt.n	801655c <__sflush_r+0xfc>
 801654a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801654e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016552:	81a3      	strh	r3, [r4, #12]
 8016554:	f04f 30ff 	mov.w	r0, #4294967295
 8016558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801655c:	4407      	add	r7, r0
 801655e:	eba8 0800 	sub.w	r8, r8, r0
 8016562:	e7e7      	b.n	8016534 <__sflush_r+0xd4>
 8016564:	20400001 	.word	0x20400001

08016568 <_fflush_r>:
 8016568:	b538      	push	{r3, r4, r5, lr}
 801656a:	690b      	ldr	r3, [r1, #16]
 801656c:	4605      	mov	r5, r0
 801656e:	460c      	mov	r4, r1
 8016570:	b913      	cbnz	r3, 8016578 <_fflush_r+0x10>
 8016572:	2500      	movs	r5, #0
 8016574:	4628      	mov	r0, r5
 8016576:	bd38      	pop	{r3, r4, r5, pc}
 8016578:	b118      	cbz	r0, 8016582 <_fflush_r+0x1a>
 801657a:	6a03      	ldr	r3, [r0, #32]
 801657c:	b90b      	cbnz	r3, 8016582 <_fflush_r+0x1a>
 801657e:	f7ff f8bf 	bl	8015700 <__sinit>
 8016582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d0f3      	beq.n	8016572 <_fflush_r+0xa>
 801658a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801658c:	07d0      	lsls	r0, r2, #31
 801658e:	d404      	bmi.n	801659a <_fflush_r+0x32>
 8016590:	0599      	lsls	r1, r3, #22
 8016592:	d402      	bmi.n	801659a <_fflush_r+0x32>
 8016594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016596:	f7ff faf0 	bl	8015b7a <__retarget_lock_acquire_recursive>
 801659a:	4628      	mov	r0, r5
 801659c:	4621      	mov	r1, r4
 801659e:	f7ff ff5f 	bl	8016460 <__sflush_r>
 80165a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80165a4:	07da      	lsls	r2, r3, #31
 80165a6:	4605      	mov	r5, r0
 80165a8:	d4e4      	bmi.n	8016574 <_fflush_r+0xc>
 80165aa:	89a3      	ldrh	r3, [r4, #12]
 80165ac:	059b      	lsls	r3, r3, #22
 80165ae:	d4e1      	bmi.n	8016574 <_fflush_r+0xc>
 80165b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80165b2:	f7ff fae3 	bl	8015b7c <__retarget_lock_release_recursive>
 80165b6:	e7dd      	b.n	8016574 <_fflush_r+0xc>

080165b8 <__swhatbuf_r>:
 80165b8:	b570      	push	{r4, r5, r6, lr}
 80165ba:	460c      	mov	r4, r1
 80165bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165c0:	2900      	cmp	r1, #0
 80165c2:	b096      	sub	sp, #88	@ 0x58
 80165c4:	4615      	mov	r5, r2
 80165c6:	461e      	mov	r6, r3
 80165c8:	da0d      	bge.n	80165e6 <__swhatbuf_r+0x2e>
 80165ca:	89a3      	ldrh	r3, [r4, #12]
 80165cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80165d0:	f04f 0100 	mov.w	r1, #0
 80165d4:	bf14      	ite	ne
 80165d6:	2340      	movne	r3, #64	@ 0x40
 80165d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80165dc:	2000      	movs	r0, #0
 80165de:	6031      	str	r1, [r6, #0]
 80165e0:	602b      	str	r3, [r5, #0]
 80165e2:	b016      	add	sp, #88	@ 0x58
 80165e4:	bd70      	pop	{r4, r5, r6, pc}
 80165e6:	466a      	mov	r2, sp
 80165e8:	f000 f862 	bl	80166b0 <_fstat_r>
 80165ec:	2800      	cmp	r0, #0
 80165ee:	dbec      	blt.n	80165ca <__swhatbuf_r+0x12>
 80165f0:	9901      	ldr	r1, [sp, #4]
 80165f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80165f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80165fa:	4259      	negs	r1, r3
 80165fc:	4159      	adcs	r1, r3
 80165fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016602:	e7eb      	b.n	80165dc <__swhatbuf_r+0x24>

08016604 <__smakebuf_r>:
 8016604:	898b      	ldrh	r3, [r1, #12]
 8016606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016608:	079d      	lsls	r5, r3, #30
 801660a:	4606      	mov	r6, r0
 801660c:	460c      	mov	r4, r1
 801660e:	d507      	bpl.n	8016620 <__smakebuf_r+0x1c>
 8016610:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016614:	6023      	str	r3, [r4, #0]
 8016616:	6123      	str	r3, [r4, #16]
 8016618:	2301      	movs	r3, #1
 801661a:	6163      	str	r3, [r4, #20]
 801661c:	b003      	add	sp, #12
 801661e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016620:	ab01      	add	r3, sp, #4
 8016622:	466a      	mov	r2, sp
 8016624:	f7ff ffc8 	bl	80165b8 <__swhatbuf_r>
 8016628:	9f00      	ldr	r7, [sp, #0]
 801662a:	4605      	mov	r5, r0
 801662c:	4639      	mov	r1, r7
 801662e:	4630      	mov	r0, r6
 8016630:	f7fe ff4e 	bl	80154d0 <_malloc_r>
 8016634:	b948      	cbnz	r0, 801664a <__smakebuf_r+0x46>
 8016636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801663a:	059a      	lsls	r2, r3, #22
 801663c:	d4ee      	bmi.n	801661c <__smakebuf_r+0x18>
 801663e:	f023 0303 	bic.w	r3, r3, #3
 8016642:	f043 0302 	orr.w	r3, r3, #2
 8016646:	81a3      	strh	r3, [r4, #12]
 8016648:	e7e2      	b.n	8016610 <__smakebuf_r+0xc>
 801664a:	89a3      	ldrh	r3, [r4, #12]
 801664c:	6020      	str	r0, [r4, #0]
 801664e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016652:	81a3      	strh	r3, [r4, #12]
 8016654:	9b01      	ldr	r3, [sp, #4]
 8016656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801665a:	b15b      	cbz	r3, 8016674 <__smakebuf_r+0x70>
 801665c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016660:	4630      	mov	r0, r6
 8016662:	f000 f837 	bl	80166d4 <_isatty_r>
 8016666:	b128      	cbz	r0, 8016674 <__smakebuf_r+0x70>
 8016668:	89a3      	ldrh	r3, [r4, #12]
 801666a:	f023 0303 	bic.w	r3, r3, #3
 801666e:	f043 0301 	orr.w	r3, r3, #1
 8016672:	81a3      	strh	r3, [r4, #12]
 8016674:	89a3      	ldrh	r3, [r4, #12]
 8016676:	431d      	orrs	r5, r3
 8016678:	81a5      	strh	r5, [r4, #12]
 801667a:	e7cf      	b.n	801661c <__smakebuf_r+0x18>

0801667c <memmove>:
 801667c:	4288      	cmp	r0, r1
 801667e:	b510      	push	{r4, lr}
 8016680:	eb01 0402 	add.w	r4, r1, r2
 8016684:	d902      	bls.n	801668c <memmove+0x10>
 8016686:	4284      	cmp	r4, r0
 8016688:	4623      	mov	r3, r4
 801668a:	d807      	bhi.n	801669c <memmove+0x20>
 801668c:	1e43      	subs	r3, r0, #1
 801668e:	42a1      	cmp	r1, r4
 8016690:	d008      	beq.n	80166a4 <memmove+0x28>
 8016692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016696:	f803 2f01 	strb.w	r2, [r3, #1]!
 801669a:	e7f8      	b.n	801668e <memmove+0x12>
 801669c:	4402      	add	r2, r0
 801669e:	4601      	mov	r1, r0
 80166a0:	428a      	cmp	r2, r1
 80166a2:	d100      	bne.n	80166a6 <memmove+0x2a>
 80166a4:	bd10      	pop	{r4, pc}
 80166a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80166aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80166ae:	e7f7      	b.n	80166a0 <memmove+0x24>

080166b0 <_fstat_r>:
 80166b0:	b538      	push	{r3, r4, r5, lr}
 80166b2:	4d07      	ldr	r5, [pc, #28]	@ (80166d0 <_fstat_r+0x20>)
 80166b4:	2300      	movs	r3, #0
 80166b6:	4604      	mov	r4, r0
 80166b8:	4608      	mov	r0, r1
 80166ba:	4611      	mov	r1, r2
 80166bc:	602b      	str	r3, [r5, #0]
 80166be:	f7ec f880 	bl	80027c2 <_fstat>
 80166c2:	1c43      	adds	r3, r0, #1
 80166c4:	d102      	bne.n	80166cc <_fstat_r+0x1c>
 80166c6:	682b      	ldr	r3, [r5, #0]
 80166c8:	b103      	cbz	r3, 80166cc <_fstat_r+0x1c>
 80166ca:	6023      	str	r3, [r4, #0]
 80166cc:	bd38      	pop	{r3, r4, r5, pc}
 80166ce:	bf00      	nop
 80166d0:	20000ecc 	.word	0x20000ecc

080166d4 <_isatty_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4d06      	ldr	r5, [pc, #24]	@ (80166f0 <_isatty_r+0x1c>)
 80166d8:	2300      	movs	r3, #0
 80166da:	4604      	mov	r4, r0
 80166dc:	4608      	mov	r0, r1
 80166de:	602b      	str	r3, [r5, #0]
 80166e0:	f7ec f87f 	bl	80027e2 <_isatty>
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	d102      	bne.n	80166ee <_isatty_r+0x1a>
 80166e8:	682b      	ldr	r3, [r5, #0]
 80166ea:	b103      	cbz	r3, 80166ee <_isatty_r+0x1a>
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	20000ecc 	.word	0x20000ecc

080166f4 <memcpy>:
 80166f4:	440a      	add	r2, r1
 80166f6:	4291      	cmp	r1, r2
 80166f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80166fc:	d100      	bne.n	8016700 <memcpy+0xc>
 80166fe:	4770      	bx	lr
 8016700:	b510      	push	{r4, lr}
 8016702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016706:	f803 4f01 	strb.w	r4, [r3, #1]!
 801670a:	4291      	cmp	r1, r2
 801670c:	d1f9      	bne.n	8016702 <memcpy+0xe>
 801670e:	bd10      	pop	{r4, pc}

08016710 <_realloc_r>:
 8016710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016714:	4607      	mov	r7, r0
 8016716:	4614      	mov	r4, r2
 8016718:	460d      	mov	r5, r1
 801671a:	b921      	cbnz	r1, 8016726 <_realloc_r+0x16>
 801671c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016720:	4611      	mov	r1, r2
 8016722:	f7fe bed5 	b.w	80154d0 <_malloc_r>
 8016726:	b92a      	cbnz	r2, 8016734 <_realloc_r+0x24>
 8016728:	f7ff fa2a 	bl	8015b80 <_free_r>
 801672c:	4625      	mov	r5, r4
 801672e:	4628      	mov	r0, r5
 8016730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016734:	f000 f81a 	bl	801676c <_malloc_usable_size_r>
 8016738:	4284      	cmp	r4, r0
 801673a:	4606      	mov	r6, r0
 801673c:	d802      	bhi.n	8016744 <_realloc_r+0x34>
 801673e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016742:	d8f4      	bhi.n	801672e <_realloc_r+0x1e>
 8016744:	4621      	mov	r1, r4
 8016746:	4638      	mov	r0, r7
 8016748:	f7fe fec2 	bl	80154d0 <_malloc_r>
 801674c:	4680      	mov	r8, r0
 801674e:	b908      	cbnz	r0, 8016754 <_realloc_r+0x44>
 8016750:	4645      	mov	r5, r8
 8016752:	e7ec      	b.n	801672e <_realloc_r+0x1e>
 8016754:	42b4      	cmp	r4, r6
 8016756:	4622      	mov	r2, r4
 8016758:	4629      	mov	r1, r5
 801675a:	bf28      	it	cs
 801675c:	4632      	movcs	r2, r6
 801675e:	f7ff ffc9 	bl	80166f4 <memcpy>
 8016762:	4629      	mov	r1, r5
 8016764:	4638      	mov	r0, r7
 8016766:	f7ff fa0b 	bl	8015b80 <_free_r>
 801676a:	e7f1      	b.n	8016750 <_realloc_r+0x40>

0801676c <_malloc_usable_size_r>:
 801676c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016770:	1f18      	subs	r0, r3, #4
 8016772:	2b00      	cmp	r3, #0
 8016774:	bfbc      	itt	lt
 8016776:	580b      	ldrlt	r3, [r1, r0]
 8016778:	18c0      	addlt	r0, r0, r3
 801677a:	4770      	bx	lr

0801677c <pow>:
 801677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801677e:	ed2d 8b02 	vpush	{d8}
 8016782:	eeb0 8a40 	vmov.f32	s16, s0
 8016786:	eef0 8a60 	vmov.f32	s17, s1
 801678a:	ec55 4b11 	vmov	r4, r5, d1
 801678e:	f000 f8ab 	bl	80168e8 <__ieee754_pow>
 8016792:	4622      	mov	r2, r4
 8016794:	462b      	mov	r3, r5
 8016796:	4620      	mov	r0, r4
 8016798:	4629      	mov	r1, r5
 801679a:	ec57 6b10 	vmov	r6, r7, d0
 801679e:	f7ea f9cd 	bl	8000b3c <__aeabi_dcmpun>
 80167a2:	2800      	cmp	r0, #0
 80167a4:	d13b      	bne.n	801681e <pow+0xa2>
 80167a6:	ec51 0b18 	vmov	r0, r1, d8
 80167aa:	2200      	movs	r2, #0
 80167ac:	2300      	movs	r3, #0
 80167ae:	f7ea f993 	bl	8000ad8 <__aeabi_dcmpeq>
 80167b2:	b1b8      	cbz	r0, 80167e4 <pow+0x68>
 80167b4:	2200      	movs	r2, #0
 80167b6:	2300      	movs	r3, #0
 80167b8:	4620      	mov	r0, r4
 80167ba:	4629      	mov	r1, r5
 80167bc:	f7ea f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d146      	bne.n	8016852 <pow+0xd6>
 80167c4:	ec45 4b10 	vmov	d0, r4, r5
 80167c8:	f000 f848 	bl	801685c <finite>
 80167cc:	b338      	cbz	r0, 801681e <pow+0xa2>
 80167ce:	2200      	movs	r2, #0
 80167d0:	2300      	movs	r3, #0
 80167d2:	4620      	mov	r0, r4
 80167d4:	4629      	mov	r1, r5
 80167d6:	f7ea f989 	bl	8000aec <__aeabi_dcmplt>
 80167da:	b300      	cbz	r0, 801681e <pow+0xa2>
 80167dc:	f7ff f9a2 	bl	8015b24 <__errno>
 80167e0:	2322      	movs	r3, #34	@ 0x22
 80167e2:	e01b      	b.n	801681c <pow+0xa0>
 80167e4:	ec47 6b10 	vmov	d0, r6, r7
 80167e8:	f000 f838 	bl	801685c <finite>
 80167ec:	b9e0      	cbnz	r0, 8016828 <pow+0xac>
 80167ee:	eeb0 0a48 	vmov.f32	s0, s16
 80167f2:	eef0 0a68 	vmov.f32	s1, s17
 80167f6:	f000 f831 	bl	801685c <finite>
 80167fa:	b1a8      	cbz	r0, 8016828 <pow+0xac>
 80167fc:	ec45 4b10 	vmov	d0, r4, r5
 8016800:	f000 f82c 	bl	801685c <finite>
 8016804:	b180      	cbz	r0, 8016828 <pow+0xac>
 8016806:	4632      	mov	r2, r6
 8016808:	463b      	mov	r3, r7
 801680a:	4630      	mov	r0, r6
 801680c:	4639      	mov	r1, r7
 801680e:	f7ea f995 	bl	8000b3c <__aeabi_dcmpun>
 8016812:	2800      	cmp	r0, #0
 8016814:	d0e2      	beq.n	80167dc <pow+0x60>
 8016816:	f7ff f985 	bl	8015b24 <__errno>
 801681a:	2321      	movs	r3, #33	@ 0x21
 801681c:	6003      	str	r3, [r0, #0]
 801681e:	ecbd 8b02 	vpop	{d8}
 8016822:	ec47 6b10 	vmov	d0, r6, r7
 8016826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016828:	2200      	movs	r2, #0
 801682a:	2300      	movs	r3, #0
 801682c:	4630      	mov	r0, r6
 801682e:	4639      	mov	r1, r7
 8016830:	f7ea f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8016834:	2800      	cmp	r0, #0
 8016836:	d0f2      	beq.n	801681e <pow+0xa2>
 8016838:	eeb0 0a48 	vmov.f32	s0, s16
 801683c:	eef0 0a68 	vmov.f32	s1, s17
 8016840:	f000 f80c 	bl	801685c <finite>
 8016844:	2800      	cmp	r0, #0
 8016846:	d0ea      	beq.n	801681e <pow+0xa2>
 8016848:	ec45 4b10 	vmov	d0, r4, r5
 801684c:	f000 f806 	bl	801685c <finite>
 8016850:	e7c3      	b.n	80167da <pow+0x5e>
 8016852:	4f01      	ldr	r7, [pc, #4]	@ (8016858 <pow+0xdc>)
 8016854:	2600      	movs	r6, #0
 8016856:	e7e2      	b.n	801681e <pow+0xa2>
 8016858:	3ff00000 	.word	0x3ff00000

0801685c <finite>:
 801685c:	b082      	sub	sp, #8
 801685e:	ed8d 0b00 	vstr	d0, [sp]
 8016862:	9801      	ldr	r0, [sp, #4]
 8016864:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8016868:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801686c:	0fc0      	lsrs	r0, r0, #31
 801686e:	b002      	add	sp, #8
 8016870:	4770      	bx	lr
	...

08016874 <trunc>:
 8016874:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8016878:	ec5c bb10 	vmov	fp, ip, d0
 801687c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8016880:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8016884:	2913      	cmp	r1, #19
 8016886:	4664      	mov	r4, ip
 8016888:	dc14      	bgt.n	80168b4 <trunc+0x40>
 801688a:	2900      	cmp	r1, #0
 801688c:	bfa4      	itt	ge
 801688e:	4b15      	ldrge	r3, [pc, #84]	@ (80168e4 <trunc+0x70>)
 8016890:	fa43 f101 	asrge.w	r1, r3, r1
 8016894:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8016898:	bfad      	iteet	ge
 801689a:	4021      	andge	r1, r4
 801689c:	2200      	movlt	r2, #0
 801689e:	4603      	movlt	r3, r0
 80168a0:	2200      	movge	r2, #0
 80168a2:	bfa8      	it	ge
 80168a4:	ea41 0300 	orrge.w	r3, r1, r0
 80168a8:	4693      	mov	fp, r2
 80168aa:	469c      	mov	ip, r3
 80168ac:	ec4c bb10 	vmov	d0, fp, ip
 80168b0:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80168b4:	2933      	cmp	r1, #51	@ 0x33
 80168b6:	dd0b      	ble.n	80168d0 <trunc+0x5c>
 80168b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80168bc:	d1f6      	bne.n	80168ac <trunc+0x38>
 80168be:	465a      	mov	r2, fp
 80168c0:	4663      	mov	r3, ip
 80168c2:	4658      	mov	r0, fp
 80168c4:	4621      	mov	r1, r4
 80168c6:	f7e9 fce9 	bl	800029c <__adddf3>
 80168ca:	4683      	mov	fp, r0
 80168cc:	468c      	mov	ip, r1
 80168ce:	e7ed      	b.n	80168ac <trunc+0x38>
 80168d0:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 80168d4:	f04f 33ff 	mov.w	r3, #4294967295
 80168d8:	40c3      	lsrs	r3, r0
 80168da:	ea2b 0603 	bic.w	r6, fp, r3
 80168de:	46b3      	mov	fp, r6
 80168e0:	46a4      	mov	ip, r4
 80168e2:	e7e3      	b.n	80168ac <trunc+0x38>
 80168e4:	fff00000 	.word	0xfff00000

080168e8 <__ieee754_pow>:
 80168e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ec:	b091      	sub	sp, #68	@ 0x44
 80168ee:	ed8d 1b00 	vstr	d1, [sp]
 80168f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80168f6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80168fa:	ea5a 0001 	orrs.w	r0, sl, r1
 80168fe:	ec57 6b10 	vmov	r6, r7, d0
 8016902:	d113      	bne.n	801692c <__ieee754_pow+0x44>
 8016904:	19b3      	adds	r3, r6, r6
 8016906:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801690a:	4152      	adcs	r2, r2
 801690c:	4298      	cmp	r0, r3
 801690e:	4b9a      	ldr	r3, [pc, #616]	@ (8016b78 <__ieee754_pow+0x290>)
 8016910:	4193      	sbcs	r3, r2
 8016912:	f080 84ee 	bcs.w	80172f2 <__ieee754_pow+0xa0a>
 8016916:	e9dd 2300 	ldrd	r2, r3, [sp]
 801691a:	4630      	mov	r0, r6
 801691c:	4639      	mov	r1, r7
 801691e:	f7e9 fcbd 	bl	800029c <__adddf3>
 8016922:	ec41 0b10 	vmov	d0, r0, r1
 8016926:	b011      	add	sp, #68	@ 0x44
 8016928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801692c:	4a93      	ldr	r2, [pc, #588]	@ (8016b7c <__ieee754_pow+0x294>)
 801692e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8016932:	4295      	cmp	r5, r2
 8016934:	46b8      	mov	r8, r7
 8016936:	4633      	mov	r3, r6
 8016938:	d80a      	bhi.n	8016950 <__ieee754_pow+0x68>
 801693a:	d104      	bne.n	8016946 <__ieee754_pow+0x5e>
 801693c:	2e00      	cmp	r6, #0
 801693e:	d1ea      	bne.n	8016916 <__ieee754_pow+0x2e>
 8016940:	45aa      	cmp	sl, r5
 8016942:	d8e8      	bhi.n	8016916 <__ieee754_pow+0x2e>
 8016944:	e001      	b.n	801694a <__ieee754_pow+0x62>
 8016946:	4592      	cmp	sl, r2
 8016948:	d802      	bhi.n	8016950 <__ieee754_pow+0x68>
 801694a:	4592      	cmp	sl, r2
 801694c:	d10f      	bne.n	801696e <__ieee754_pow+0x86>
 801694e:	b171      	cbz	r1, 801696e <__ieee754_pow+0x86>
 8016950:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8016954:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016958:	ea58 0803 	orrs.w	r8, r8, r3
 801695c:	d1db      	bne.n	8016916 <__ieee754_pow+0x2e>
 801695e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016962:	18db      	adds	r3, r3, r3
 8016964:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016968:	4152      	adcs	r2, r2
 801696a:	4598      	cmp	r8, r3
 801696c:	e7cf      	b.n	801690e <__ieee754_pow+0x26>
 801696e:	f1b8 0f00 	cmp.w	r8, #0
 8016972:	46ab      	mov	fp, r5
 8016974:	da43      	bge.n	80169fe <__ieee754_pow+0x116>
 8016976:	4a82      	ldr	r2, [pc, #520]	@ (8016b80 <__ieee754_pow+0x298>)
 8016978:	4592      	cmp	sl, r2
 801697a:	d856      	bhi.n	8016a2a <__ieee754_pow+0x142>
 801697c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8016980:	4592      	cmp	sl, r2
 8016982:	f240 84c5 	bls.w	8017310 <__ieee754_pow+0xa28>
 8016986:	ea4f 522a 	mov.w	r2, sl, asr #20
 801698a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801698e:	2a14      	cmp	r2, #20
 8016990:	dd18      	ble.n	80169c4 <__ieee754_pow+0xdc>
 8016992:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8016996:	fa21 f402 	lsr.w	r4, r1, r2
 801699a:	fa04 f202 	lsl.w	r2, r4, r2
 801699e:	428a      	cmp	r2, r1
 80169a0:	f040 84b6 	bne.w	8017310 <__ieee754_pow+0xa28>
 80169a4:	f004 0401 	and.w	r4, r4, #1
 80169a8:	f1c4 0402 	rsb	r4, r4, #2
 80169ac:	2900      	cmp	r1, #0
 80169ae:	d159      	bne.n	8016a64 <__ieee754_pow+0x17c>
 80169b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80169b4:	d148      	bne.n	8016a48 <__ieee754_pow+0x160>
 80169b6:	4632      	mov	r2, r6
 80169b8:	463b      	mov	r3, r7
 80169ba:	4630      	mov	r0, r6
 80169bc:	4639      	mov	r1, r7
 80169be:	f7e9 fe23 	bl	8000608 <__aeabi_dmul>
 80169c2:	e7ae      	b.n	8016922 <__ieee754_pow+0x3a>
 80169c4:	2900      	cmp	r1, #0
 80169c6:	d14c      	bne.n	8016a62 <__ieee754_pow+0x17a>
 80169c8:	f1c2 0214 	rsb	r2, r2, #20
 80169cc:	fa4a f402 	asr.w	r4, sl, r2
 80169d0:	fa04 f202 	lsl.w	r2, r4, r2
 80169d4:	4552      	cmp	r2, sl
 80169d6:	f040 8498 	bne.w	801730a <__ieee754_pow+0xa22>
 80169da:	f004 0401 	and.w	r4, r4, #1
 80169de:	f1c4 0402 	rsb	r4, r4, #2
 80169e2:	4a68      	ldr	r2, [pc, #416]	@ (8016b84 <__ieee754_pow+0x29c>)
 80169e4:	4592      	cmp	sl, r2
 80169e6:	d1e3      	bne.n	80169b0 <__ieee754_pow+0xc8>
 80169e8:	f1b9 0f00 	cmp.w	r9, #0
 80169ec:	f280 8489 	bge.w	8017302 <__ieee754_pow+0xa1a>
 80169f0:	4964      	ldr	r1, [pc, #400]	@ (8016b84 <__ieee754_pow+0x29c>)
 80169f2:	4632      	mov	r2, r6
 80169f4:	463b      	mov	r3, r7
 80169f6:	2000      	movs	r0, #0
 80169f8:	f7e9 ff30 	bl	800085c <__aeabi_ddiv>
 80169fc:	e791      	b.n	8016922 <__ieee754_pow+0x3a>
 80169fe:	2400      	movs	r4, #0
 8016a00:	bb81      	cbnz	r1, 8016a64 <__ieee754_pow+0x17c>
 8016a02:	4a5e      	ldr	r2, [pc, #376]	@ (8016b7c <__ieee754_pow+0x294>)
 8016a04:	4592      	cmp	sl, r2
 8016a06:	d1ec      	bne.n	80169e2 <__ieee754_pow+0xfa>
 8016a08:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8016a0c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8016a10:	431a      	orrs	r2, r3
 8016a12:	f000 846e 	beq.w	80172f2 <__ieee754_pow+0xa0a>
 8016a16:	4b5c      	ldr	r3, [pc, #368]	@ (8016b88 <__ieee754_pow+0x2a0>)
 8016a18:	429d      	cmp	r5, r3
 8016a1a:	d908      	bls.n	8016a2e <__ieee754_pow+0x146>
 8016a1c:	f1b9 0f00 	cmp.w	r9, #0
 8016a20:	f280 846b 	bge.w	80172fa <__ieee754_pow+0xa12>
 8016a24:	2000      	movs	r0, #0
 8016a26:	2100      	movs	r1, #0
 8016a28:	e77b      	b.n	8016922 <__ieee754_pow+0x3a>
 8016a2a:	2402      	movs	r4, #2
 8016a2c:	e7e8      	b.n	8016a00 <__ieee754_pow+0x118>
 8016a2e:	f1b9 0f00 	cmp.w	r9, #0
 8016a32:	f04f 0000 	mov.w	r0, #0
 8016a36:	f04f 0100 	mov.w	r1, #0
 8016a3a:	f6bf af72 	bge.w	8016922 <__ieee754_pow+0x3a>
 8016a3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016a42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8016a46:	e76c      	b.n	8016922 <__ieee754_pow+0x3a>
 8016a48:	4a50      	ldr	r2, [pc, #320]	@ (8016b8c <__ieee754_pow+0x2a4>)
 8016a4a:	4591      	cmp	r9, r2
 8016a4c:	d10a      	bne.n	8016a64 <__ieee754_pow+0x17c>
 8016a4e:	f1b8 0f00 	cmp.w	r8, #0
 8016a52:	db07      	blt.n	8016a64 <__ieee754_pow+0x17c>
 8016a54:	ec47 6b10 	vmov	d0, r6, r7
 8016a58:	b011      	add	sp, #68	@ 0x44
 8016a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a5e:	f000 bd4f 	b.w	8017500 <__ieee754_sqrt>
 8016a62:	2400      	movs	r4, #0
 8016a64:	ec47 6b10 	vmov	d0, r6, r7
 8016a68:	9302      	str	r3, [sp, #8]
 8016a6a:	f000 fc87 	bl	801737c <fabs>
 8016a6e:	9b02      	ldr	r3, [sp, #8]
 8016a70:	ec51 0b10 	vmov	r0, r1, d0
 8016a74:	bb43      	cbnz	r3, 8016ac8 <__ieee754_pow+0x1e0>
 8016a76:	4b43      	ldr	r3, [pc, #268]	@ (8016b84 <__ieee754_pow+0x29c>)
 8016a78:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	d000      	beq.n	8016a82 <__ieee754_pow+0x19a>
 8016a80:	bb15      	cbnz	r5, 8016ac8 <__ieee754_pow+0x1e0>
 8016a82:	f1b9 0f00 	cmp.w	r9, #0
 8016a86:	da05      	bge.n	8016a94 <__ieee754_pow+0x1ac>
 8016a88:	4602      	mov	r2, r0
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	2000      	movs	r0, #0
 8016a8e:	493d      	ldr	r1, [pc, #244]	@ (8016b84 <__ieee754_pow+0x29c>)
 8016a90:	f7e9 fee4 	bl	800085c <__aeabi_ddiv>
 8016a94:	f1b8 0f00 	cmp.w	r8, #0
 8016a98:	f6bf af43 	bge.w	8016922 <__ieee754_pow+0x3a>
 8016a9c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016aa0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016aa4:	4325      	orrs	r5, r4
 8016aa6:	d108      	bne.n	8016aba <__ieee754_pow+0x1d2>
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	460b      	mov	r3, r1
 8016aac:	4610      	mov	r0, r2
 8016aae:	4619      	mov	r1, r3
 8016ab0:	f7e9 fbf2 	bl	8000298 <__aeabi_dsub>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	460b      	mov	r3, r1
 8016ab8:	e79e      	b.n	80169f8 <__ieee754_pow+0x110>
 8016aba:	2c01      	cmp	r4, #1
 8016abc:	f47f af31 	bne.w	8016922 <__ieee754_pow+0x3a>
 8016ac0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	e72c      	b.n	8016922 <__ieee754_pow+0x3a>
 8016ac8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8016acc:	3b01      	subs	r3, #1
 8016ace:	ea53 0204 	orrs.w	r2, r3, r4
 8016ad2:	d102      	bne.n	8016ada <__ieee754_pow+0x1f2>
 8016ad4:	4632      	mov	r2, r6
 8016ad6:	463b      	mov	r3, r7
 8016ad8:	e7e8      	b.n	8016aac <__ieee754_pow+0x1c4>
 8016ada:	3c01      	subs	r4, #1
 8016adc:	431c      	orrs	r4, r3
 8016ade:	d016      	beq.n	8016b0e <__ieee754_pow+0x226>
 8016ae0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016b68 <__ieee754_pow+0x280>
 8016ae4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016ae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016aec:	f240 8110 	bls.w	8016d10 <__ieee754_pow+0x428>
 8016af0:	4b27      	ldr	r3, [pc, #156]	@ (8016b90 <__ieee754_pow+0x2a8>)
 8016af2:	459a      	cmp	sl, r3
 8016af4:	4b24      	ldr	r3, [pc, #144]	@ (8016b88 <__ieee754_pow+0x2a0>)
 8016af6:	d916      	bls.n	8016b26 <__ieee754_pow+0x23e>
 8016af8:	429d      	cmp	r5, r3
 8016afa:	d80b      	bhi.n	8016b14 <__ieee754_pow+0x22c>
 8016afc:	f1b9 0f00 	cmp.w	r9, #0
 8016b00:	da0b      	bge.n	8016b1a <__ieee754_pow+0x232>
 8016b02:	2000      	movs	r0, #0
 8016b04:	b011      	add	sp, #68	@ 0x44
 8016b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b0a:	f000 bcf1 	b.w	80174f0 <__math_oflow>
 8016b0e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8016b70 <__ieee754_pow+0x288>
 8016b12:	e7e7      	b.n	8016ae4 <__ieee754_pow+0x1fc>
 8016b14:	f1b9 0f00 	cmp.w	r9, #0
 8016b18:	dcf3      	bgt.n	8016b02 <__ieee754_pow+0x21a>
 8016b1a:	2000      	movs	r0, #0
 8016b1c:	b011      	add	sp, #68	@ 0x44
 8016b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b22:	f000 bcdd 	b.w	80174e0 <__math_uflow>
 8016b26:	429d      	cmp	r5, r3
 8016b28:	d20c      	bcs.n	8016b44 <__ieee754_pow+0x25c>
 8016b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	2300      	movs	r3, #0
 8016b32:	f7e9 ffdb 	bl	8000aec <__aeabi_dcmplt>
 8016b36:	3800      	subs	r0, #0
 8016b38:	bf18      	it	ne
 8016b3a:	2001      	movne	r0, #1
 8016b3c:	f1b9 0f00 	cmp.w	r9, #0
 8016b40:	daec      	bge.n	8016b1c <__ieee754_pow+0x234>
 8016b42:	e7df      	b.n	8016b04 <__ieee754_pow+0x21c>
 8016b44:	4b0f      	ldr	r3, [pc, #60]	@ (8016b84 <__ieee754_pow+0x29c>)
 8016b46:	429d      	cmp	r5, r3
 8016b48:	f04f 0200 	mov.w	r2, #0
 8016b4c:	d922      	bls.n	8016b94 <__ieee754_pow+0x2ac>
 8016b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b52:	2300      	movs	r3, #0
 8016b54:	f7e9 ffca 	bl	8000aec <__aeabi_dcmplt>
 8016b58:	3800      	subs	r0, #0
 8016b5a:	bf18      	it	ne
 8016b5c:	2001      	movne	r0, #1
 8016b5e:	f1b9 0f00 	cmp.w	r9, #0
 8016b62:	dccf      	bgt.n	8016b04 <__ieee754_pow+0x21c>
 8016b64:	e7da      	b.n	8016b1c <__ieee754_pow+0x234>
 8016b66:	bf00      	nop
 8016b68:	00000000 	.word	0x00000000
 8016b6c:	3ff00000 	.word	0x3ff00000
 8016b70:	00000000 	.word	0x00000000
 8016b74:	bff00000 	.word	0xbff00000
 8016b78:	fff00000 	.word	0xfff00000
 8016b7c:	7ff00000 	.word	0x7ff00000
 8016b80:	433fffff 	.word	0x433fffff
 8016b84:	3ff00000 	.word	0x3ff00000
 8016b88:	3fefffff 	.word	0x3fefffff
 8016b8c:	3fe00000 	.word	0x3fe00000
 8016b90:	43f00000 	.word	0x43f00000
 8016b94:	4b5a      	ldr	r3, [pc, #360]	@ (8016d00 <__ieee754_pow+0x418>)
 8016b96:	f7e9 fb7f 	bl	8000298 <__aeabi_dsub>
 8016b9a:	a351      	add	r3, pc, #324	@ (adr r3, 8016ce0 <__ieee754_pow+0x3f8>)
 8016b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba0:	4604      	mov	r4, r0
 8016ba2:	460d      	mov	r5, r1
 8016ba4:	f7e9 fd30 	bl	8000608 <__aeabi_dmul>
 8016ba8:	a34f      	add	r3, pc, #316	@ (adr r3, 8016ce8 <__ieee754_pow+0x400>)
 8016baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bae:	4606      	mov	r6, r0
 8016bb0:	460f      	mov	r7, r1
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	f7e9 fd27 	bl	8000608 <__aeabi_dmul>
 8016bba:	4b52      	ldr	r3, [pc, #328]	@ (8016d04 <__ieee754_pow+0x41c>)
 8016bbc:	4682      	mov	sl, r0
 8016bbe:	468b      	mov	fp, r1
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	4629      	mov	r1, r5
 8016bc6:	f7e9 fd1f 	bl	8000608 <__aeabi_dmul>
 8016bca:	4602      	mov	r2, r0
 8016bcc:	460b      	mov	r3, r1
 8016bce:	a148      	add	r1, pc, #288	@ (adr r1, 8016cf0 <__ieee754_pow+0x408>)
 8016bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bd4:	f7e9 fb60 	bl	8000298 <__aeabi_dsub>
 8016bd8:	4622      	mov	r2, r4
 8016bda:	462b      	mov	r3, r5
 8016bdc:	f7e9 fd14 	bl	8000608 <__aeabi_dmul>
 8016be0:	4602      	mov	r2, r0
 8016be2:	460b      	mov	r3, r1
 8016be4:	2000      	movs	r0, #0
 8016be6:	4948      	ldr	r1, [pc, #288]	@ (8016d08 <__ieee754_pow+0x420>)
 8016be8:	f7e9 fb56 	bl	8000298 <__aeabi_dsub>
 8016bec:	4622      	mov	r2, r4
 8016bee:	4680      	mov	r8, r0
 8016bf0:	4689      	mov	r9, r1
 8016bf2:	462b      	mov	r3, r5
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	f7e9 fd06 	bl	8000608 <__aeabi_dmul>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	460b      	mov	r3, r1
 8016c00:	4640      	mov	r0, r8
 8016c02:	4649      	mov	r1, r9
 8016c04:	f7e9 fd00 	bl	8000608 <__aeabi_dmul>
 8016c08:	a33b      	add	r3, pc, #236	@ (adr r3, 8016cf8 <__ieee754_pow+0x410>)
 8016c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0e:	f7e9 fcfb 	bl	8000608 <__aeabi_dmul>
 8016c12:	4602      	mov	r2, r0
 8016c14:	460b      	mov	r3, r1
 8016c16:	4650      	mov	r0, sl
 8016c18:	4659      	mov	r1, fp
 8016c1a:	f7e9 fb3d 	bl	8000298 <__aeabi_dsub>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	460b      	mov	r3, r1
 8016c22:	4680      	mov	r8, r0
 8016c24:	4689      	mov	r9, r1
 8016c26:	4630      	mov	r0, r6
 8016c28:	4639      	mov	r1, r7
 8016c2a:	f7e9 fb37 	bl	800029c <__adddf3>
 8016c2e:	2400      	movs	r4, #0
 8016c30:	4632      	mov	r2, r6
 8016c32:	463b      	mov	r3, r7
 8016c34:	4620      	mov	r0, r4
 8016c36:	460d      	mov	r5, r1
 8016c38:	f7e9 fb2e 	bl	8000298 <__aeabi_dsub>
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	460b      	mov	r3, r1
 8016c40:	4640      	mov	r0, r8
 8016c42:	4649      	mov	r1, r9
 8016c44:	f7e9 fb28 	bl	8000298 <__aeabi_dsub>
 8016c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016c50:	2300      	movs	r3, #0
 8016c52:	9304      	str	r3, [sp, #16]
 8016c54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016c58:	4606      	mov	r6, r0
 8016c5a:	460f      	mov	r7, r1
 8016c5c:	465b      	mov	r3, fp
 8016c5e:	4652      	mov	r2, sl
 8016c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c64:	f7e9 fb18 	bl	8000298 <__aeabi_dsub>
 8016c68:	4622      	mov	r2, r4
 8016c6a:	462b      	mov	r3, r5
 8016c6c:	f7e9 fccc 	bl	8000608 <__aeabi_dmul>
 8016c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c74:	4680      	mov	r8, r0
 8016c76:	4689      	mov	r9, r1
 8016c78:	4630      	mov	r0, r6
 8016c7a:	4639      	mov	r1, r7
 8016c7c:	f7e9 fcc4 	bl	8000608 <__aeabi_dmul>
 8016c80:	4602      	mov	r2, r0
 8016c82:	460b      	mov	r3, r1
 8016c84:	4640      	mov	r0, r8
 8016c86:	4649      	mov	r1, r9
 8016c88:	f7e9 fb08 	bl	800029c <__adddf3>
 8016c8c:	465b      	mov	r3, fp
 8016c8e:	4606      	mov	r6, r0
 8016c90:	460f      	mov	r7, r1
 8016c92:	4652      	mov	r2, sl
 8016c94:	4620      	mov	r0, r4
 8016c96:	4629      	mov	r1, r5
 8016c98:	f7e9 fcb6 	bl	8000608 <__aeabi_dmul>
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	4602      	mov	r2, r0
 8016ca0:	4680      	mov	r8, r0
 8016ca2:	4689      	mov	r9, r1
 8016ca4:	4630      	mov	r0, r6
 8016ca6:	4639      	mov	r1, r7
 8016ca8:	f7e9 faf8 	bl	800029c <__adddf3>
 8016cac:	4b17      	ldr	r3, [pc, #92]	@ (8016d0c <__ieee754_pow+0x424>)
 8016cae:	4299      	cmp	r1, r3
 8016cb0:	4604      	mov	r4, r0
 8016cb2:	460d      	mov	r5, r1
 8016cb4:	468b      	mov	fp, r1
 8016cb6:	f340 820b 	ble.w	80170d0 <__ieee754_pow+0x7e8>
 8016cba:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016cbe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016cc2:	4303      	orrs	r3, r0
 8016cc4:	f000 81ea 	beq.w	801709c <__ieee754_pow+0x7b4>
 8016cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	2300      	movs	r3, #0
 8016cd0:	f7e9 ff0c 	bl	8000aec <__aeabi_dcmplt>
 8016cd4:	3800      	subs	r0, #0
 8016cd6:	bf18      	it	ne
 8016cd8:	2001      	movne	r0, #1
 8016cda:	e713      	b.n	8016b04 <__ieee754_pow+0x21c>
 8016cdc:	f3af 8000 	nop.w
 8016ce0:	60000000 	.word	0x60000000
 8016ce4:	3ff71547 	.word	0x3ff71547
 8016ce8:	f85ddf44 	.word	0xf85ddf44
 8016cec:	3e54ae0b 	.word	0x3e54ae0b
 8016cf0:	55555555 	.word	0x55555555
 8016cf4:	3fd55555 	.word	0x3fd55555
 8016cf8:	652b82fe 	.word	0x652b82fe
 8016cfc:	3ff71547 	.word	0x3ff71547
 8016d00:	3ff00000 	.word	0x3ff00000
 8016d04:	3fd00000 	.word	0x3fd00000
 8016d08:	3fe00000 	.word	0x3fe00000
 8016d0c:	408fffff 	.word	0x408fffff
 8016d10:	4bd5      	ldr	r3, [pc, #852]	@ (8017068 <__ieee754_pow+0x780>)
 8016d12:	ea08 0303 	and.w	r3, r8, r3
 8016d16:	2200      	movs	r2, #0
 8016d18:	b92b      	cbnz	r3, 8016d26 <__ieee754_pow+0x43e>
 8016d1a:	4bd4      	ldr	r3, [pc, #848]	@ (801706c <__ieee754_pow+0x784>)
 8016d1c:	f7e9 fc74 	bl	8000608 <__aeabi_dmul>
 8016d20:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016d24:	468b      	mov	fp, r1
 8016d26:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016d2a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016d2e:	4413      	add	r3, r2
 8016d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d32:	4bcf      	ldr	r3, [pc, #828]	@ (8017070 <__ieee754_pow+0x788>)
 8016d34:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016d38:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8016d3c:	459b      	cmp	fp, r3
 8016d3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016d42:	dd08      	ble.n	8016d56 <__ieee754_pow+0x46e>
 8016d44:	4bcb      	ldr	r3, [pc, #812]	@ (8017074 <__ieee754_pow+0x78c>)
 8016d46:	459b      	cmp	fp, r3
 8016d48:	f340 81a5 	ble.w	8017096 <__ieee754_pow+0x7ae>
 8016d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d4e:	3301      	adds	r3, #1
 8016d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d52:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016d56:	f04f 0a00 	mov.w	sl, #0
 8016d5a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d60:	4bc5      	ldr	r3, [pc, #788]	@ (8017078 <__ieee754_pow+0x790>)
 8016d62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016d66:	ed93 7b00 	vldr	d7, [r3]
 8016d6a:	4629      	mov	r1, r5
 8016d6c:	ec53 2b17 	vmov	r2, r3, d7
 8016d70:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016d78:	f7e9 fa8e 	bl	8000298 <__aeabi_dsub>
 8016d7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016d80:	4606      	mov	r6, r0
 8016d82:	460f      	mov	r7, r1
 8016d84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d88:	f7e9 fa88 	bl	800029c <__adddf3>
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	460b      	mov	r3, r1
 8016d90:	2000      	movs	r0, #0
 8016d92:	49ba      	ldr	r1, [pc, #744]	@ (801707c <__ieee754_pow+0x794>)
 8016d94:	f7e9 fd62 	bl	800085c <__aeabi_ddiv>
 8016d98:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016d9c:	4602      	mov	r2, r0
 8016d9e:	460b      	mov	r3, r1
 8016da0:	4630      	mov	r0, r6
 8016da2:	4639      	mov	r1, r7
 8016da4:	f7e9 fc30 	bl	8000608 <__aeabi_dmul>
 8016da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016dac:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016db0:	106d      	asrs	r5, r5, #1
 8016db2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016db6:	f04f 0b00 	mov.w	fp, #0
 8016dba:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8016dbe:	4661      	mov	r1, ip
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016dc6:	4658      	mov	r0, fp
 8016dc8:	46e1      	mov	r9, ip
 8016dca:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8016dce:	4614      	mov	r4, r2
 8016dd0:	461d      	mov	r5, r3
 8016dd2:	f7e9 fc19 	bl	8000608 <__aeabi_dmul>
 8016dd6:	4602      	mov	r2, r0
 8016dd8:	460b      	mov	r3, r1
 8016dda:	4630      	mov	r0, r6
 8016ddc:	4639      	mov	r1, r7
 8016dde:	f7e9 fa5b 	bl	8000298 <__aeabi_dsub>
 8016de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016de6:	4606      	mov	r6, r0
 8016de8:	460f      	mov	r7, r1
 8016dea:	4620      	mov	r0, r4
 8016dec:	4629      	mov	r1, r5
 8016dee:	f7e9 fa53 	bl	8000298 <__aeabi_dsub>
 8016df2:	4602      	mov	r2, r0
 8016df4:	460b      	mov	r3, r1
 8016df6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016dfa:	f7e9 fa4d 	bl	8000298 <__aeabi_dsub>
 8016dfe:	465a      	mov	r2, fp
 8016e00:	464b      	mov	r3, r9
 8016e02:	f7e9 fc01 	bl	8000608 <__aeabi_dmul>
 8016e06:	4602      	mov	r2, r0
 8016e08:	460b      	mov	r3, r1
 8016e0a:	4630      	mov	r0, r6
 8016e0c:	4639      	mov	r1, r7
 8016e0e:	f7e9 fa43 	bl	8000298 <__aeabi_dsub>
 8016e12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016e16:	f7e9 fbf7 	bl	8000608 <__aeabi_dmul>
 8016e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016e22:	4610      	mov	r0, r2
 8016e24:	4619      	mov	r1, r3
 8016e26:	f7e9 fbef 	bl	8000608 <__aeabi_dmul>
 8016e2a:	a37d      	add	r3, pc, #500	@ (adr r3, 8017020 <__ieee754_pow+0x738>)
 8016e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e30:	4604      	mov	r4, r0
 8016e32:	460d      	mov	r5, r1
 8016e34:	f7e9 fbe8 	bl	8000608 <__aeabi_dmul>
 8016e38:	a37b      	add	r3, pc, #492	@ (adr r3, 8017028 <__ieee754_pow+0x740>)
 8016e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3e:	f7e9 fa2d 	bl	800029c <__adddf3>
 8016e42:	4622      	mov	r2, r4
 8016e44:	462b      	mov	r3, r5
 8016e46:	f7e9 fbdf 	bl	8000608 <__aeabi_dmul>
 8016e4a:	a379      	add	r3, pc, #484	@ (adr r3, 8017030 <__ieee754_pow+0x748>)
 8016e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e50:	f7e9 fa24 	bl	800029c <__adddf3>
 8016e54:	4622      	mov	r2, r4
 8016e56:	462b      	mov	r3, r5
 8016e58:	f7e9 fbd6 	bl	8000608 <__aeabi_dmul>
 8016e5c:	a376      	add	r3, pc, #472	@ (adr r3, 8017038 <__ieee754_pow+0x750>)
 8016e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e62:	f7e9 fa1b 	bl	800029c <__adddf3>
 8016e66:	4622      	mov	r2, r4
 8016e68:	462b      	mov	r3, r5
 8016e6a:	f7e9 fbcd 	bl	8000608 <__aeabi_dmul>
 8016e6e:	a374      	add	r3, pc, #464	@ (adr r3, 8017040 <__ieee754_pow+0x758>)
 8016e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e74:	f7e9 fa12 	bl	800029c <__adddf3>
 8016e78:	4622      	mov	r2, r4
 8016e7a:	462b      	mov	r3, r5
 8016e7c:	f7e9 fbc4 	bl	8000608 <__aeabi_dmul>
 8016e80:	a371      	add	r3, pc, #452	@ (adr r3, 8017048 <__ieee754_pow+0x760>)
 8016e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e86:	f7e9 fa09 	bl	800029c <__adddf3>
 8016e8a:	4622      	mov	r2, r4
 8016e8c:	4606      	mov	r6, r0
 8016e8e:	460f      	mov	r7, r1
 8016e90:	462b      	mov	r3, r5
 8016e92:	4620      	mov	r0, r4
 8016e94:	4629      	mov	r1, r5
 8016e96:	f7e9 fbb7 	bl	8000608 <__aeabi_dmul>
 8016e9a:	4602      	mov	r2, r0
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	4630      	mov	r0, r6
 8016ea0:	4639      	mov	r1, r7
 8016ea2:	f7e9 fbb1 	bl	8000608 <__aeabi_dmul>
 8016ea6:	465a      	mov	r2, fp
 8016ea8:	4604      	mov	r4, r0
 8016eaa:	460d      	mov	r5, r1
 8016eac:	464b      	mov	r3, r9
 8016eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016eb2:	f7e9 f9f3 	bl	800029c <__adddf3>
 8016eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016eba:	f7e9 fba5 	bl	8000608 <__aeabi_dmul>
 8016ebe:	4622      	mov	r2, r4
 8016ec0:	462b      	mov	r3, r5
 8016ec2:	f7e9 f9eb 	bl	800029c <__adddf3>
 8016ec6:	465a      	mov	r2, fp
 8016ec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016ecc:	464b      	mov	r3, r9
 8016ece:	4658      	mov	r0, fp
 8016ed0:	4649      	mov	r1, r9
 8016ed2:	f7e9 fb99 	bl	8000608 <__aeabi_dmul>
 8016ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8017080 <__ieee754_pow+0x798>)
 8016ed8:	2200      	movs	r2, #0
 8016eda:	4606      	mov	r6, r0
 8016edc:	460f      	mov	r7, r1
 8016ede:	f7e9 f9dd 	bl	800029c <__adddf3>
 8016ee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016ee6:	f7e9 f9d9 	bl	800029c <__adddf3>
 8016eea:	46d8      	mov	r8, fp
 8016eec:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8016ef0:	460d      	mov	r5, r1
 8016ef2:	465a      	mov	r2, fp
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	4640      	mov	r0, r8
 8016ef8:	4649      	mov	r1, r9
 8016efa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8016efe:	f7e9 fb83 	bl	8000608 <__aeabi_dmul>
 8016f02:	465c      	mov	r4, fp
 8016f04:	4680      	mov	r8, r0
 8016f06:	4689      	mov	r9, r1
 8016f08:	4b5d      	ldr	r3, [pc, #372]	@ (8017080 <__ieee754_pow+0x798>)
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	4629      	mov	r1, r5
 8016f10:	f7e9 f9c2 	bl	8000298 <__aeabi_dsub>
 8016f14:	4632      	mov	r2, r6
 8016f16:	463b      	mov	r3, r7
 8016f18:	f7e9 f9be 	bl	8000298 <__aeabi_dsub>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	460b      	mov	r3, r1
 8016f20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f24:	f7e9 f9b8 	bl	8000298 <__aeabi_dsub>
 8016f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f2c:	f7e9 fb6c 	bl	8000608 <__aeabi_dmul>
 8016f30:	4622      	mov	r2, r4
 8016f32:	4606      	mov	r6, r0
 8016f34:	460f      	mov	r7, r1
 8016f36:	462b      	mov	r3, r5
 8016f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f3c:	f7e9 fb64 	bl	8000608 <__aeabi_dmul>
 8016f40:	4602      	mov	r2, r0
 8016f42:	460b      	mov	r3, r1
 8016f44:	4630      	mov	r0, r6
 8016f46:	4639      	mov	r1, r7
 8016f48:	f7e9 f9a8 	bl	800029c <__adddf3>
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	460f      	mov	r7, r1
 8016f50:	4602      	mov	r2, r0
 8016f52:	460b      	mov	r3, r1
 8016f54:	4640      	mov	r0, r8
 8016f56:	4649      	mov	r1, r9
 8016f58:	f7e9 f9a0 	bl	800029c <__adddf3>
 8016f5c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016f60:	a33b      	add	r3, pc, #236	@ (adr r3, 8017050 <__ieee754_pow+0x768>)
 8016f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f66:	4658      	mov	r0, fp
 8016f68:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016f6c:	460d      	mov	r5, r1
 8016f6e:	f7e9 fb4b 	bl	8000608 <__aeabi_dmul>
 8016f72:	465c      	mov	r4, fp
 8016f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f78:	4642      	mov	r2, r8
 8016f7a:	464b      	mov	r3, r9
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	4629      	mov	r1, r5
 8016f80:	f7e9 f98a 	bl	8000298 <__aeabi_dsub>
 8016f84:	4602      	mov	r2, r0
 8016f86:	460b      	mov	r3, r1
 8016f88:	4630      	mov	r0, r6
 8016f8a:	4639      	mov	r1, r7
 8016f8c:	f7e9 f984 	bl	8000298 <__aeabi_dsub>
 8016f90:	a331      	add	r3, pc, #196	@ (adr r3, 8017058 <__ieee754_pow+0x770>)
 8016f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f96:	f7e9 fb37 	bl	8000608 <__aeabi_dmul>
 8016f9a:	a331      	add	r3, pc, #196	@ (adr r3, 8017060 <__ieee754_pow+0x778>)
 8016f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa0:	4606      	mov	r6, r0
 8016fa2:	460f      	mov	r7, r1
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	4629      	mov	r1, r5
 8016fa8:	f7e9 fb2e 	bl	8000608 <__aeabi_dmul>
 8016fac:	4602      	mov	r2, r0
 8016fae:	460b      	mov	r3, r1
 8016fb0:	4630      	mov	r0, r6
 8016fb2:	4639      	mov	r1, r7
 8016fb4:	f7e9 f972 	bl	800029c <__adddf3>
 8016fb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016fba:	4b32      	ldr	r3, [pc, #200]	@ (8017084 <__ieee754_pow+0x79c>)
 8016fbc:	4413      	add	r3, r2
 8016fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fc2:	f7e9 f96b 	bl	800029c <__adddf3>
 8016fc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016fca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016fcc:	f7e9 fab2 	bl	8000534 <__aeabi_i2d>
 8016fd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8017088 <__ieee754_pow+0x7a0>)
 8016fd4:	4413      	add	r3, r2
 8016fd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016fda:	4606      	mov	r6, r0
 8016fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016fe0:	460f      	mov	r7, r1
 8016fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016fe6:	f7e9 f959 	bl	800029c <__adddf3>
 8016fea:	4642      	mov	r2, r8
 8016fec:	464b      	mov	r3, r9
 8016fee:	f7e9 f955 	bl	800029c <__adddf3>
 8016ff2:	4632      	mov	r2, r6
 8016ff4:	463b      	mov	r3, r7
 8016ff6:	f7e9 f951 	bl	800029c <__adddf3>
 8016ffa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8016ffe:	4632      	mov	r2, r6
 8017000:	463b      	mov	r3, r7
 8017002:	4658      	mov	r0, fp
 8017004:	460d      	mov	r5, r1
 8017006:	f7e9 f947 	bl	8000298 <__aeabi_dsub>
 801700a:	4642      	mov	r2, r8
 801700c:	464b      	mov	r3, r9
 801700e:	f7e9 f943 	bl	8000298 <__aeabi_dsub>
 8017012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017016:	f7e9 f93f 	bl	8000298 <__aeabi_dsub>
 801701a:	465c      	mov	r4, fp
 801701c:	e036      	b.n	801708c <__ieee754_pow+0x7a4>
 801701e:	bf00      	nop
 8017020:	4a454eef 	.word	0x4a454eef
 8017024:	3fca7e28 	.word	0x3fca7e28
 8017028:	93c9db65 	.word	0x93c9db65
 801702c:	3fcd864a 	.word	0x3fcd864a
 8017030:	a91d4101 	.word	0xa91d4101
 8017034:	3fd17460 	.word	0x3fd17460
 8017038:	518f264d 	.word	0x518f264d
 801703c:	3fd55555 	.word	0x3fd55555
 8017040:	db6fabff 	.word	0xdb6fabff
 8017044:	3fdb6db6 	.word	0x3fdb6db6
 8017048:	33333303 	.word	0x33333303
 801704c:	3fe33333 	.word	0x3fe33333
 8017050:	e0000000 	.word	0xe0000000
 8017054:	3feec709 	.word	0x3feec709
 8017058:	dc3a03fd 	.word	0xdc3a03fd
 801705c:	3feec709 	.word	0x3feec709
 8017060:	145b01f5 	.word	0x145b01f5
 8017064:	be3e2fe0 	.word	0xbe3e2fe0
 8017068:	7ff00000 	.word	0x7ff00000
 801706c:	43400000 	.word	0x43400000
 8017070:	0003988e 	.word	0x0003988e
 8017074:	000bb679 	.word	0x000bb679
 8017078:	080184a0 	.word	0x080184a0
 801707c:	3ff00000 	.word	0x3ff00000
 8017080:	40080000 	.word	0x40080000
 8017084:	08018480 	.word	0x08018480
 8017088:	08018490 	.word	0x08018490
 801708c:	4602      	mov	r2, r0
 801708e:	460b      	mov	r3, r1
 8017090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017094:	e5d6      	b.n	8016c44 <__ieee754_pow+0x35c>
 8017096:	f04f 0a01 	mov.w	sl, #1
 801709a:	e65e      	b.n	8016d5a <__ieee754_pow+0x472>
 801709c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8017374 <__ieee754_pow+0xa8c>)
 801709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a2:	4630      	mov	r0, r6
 80170a4:	4639      	mov	r1, r7
 80170a6:	f7e9 f8f9 	bl	800029c <__adddf3>
 80170aa:	4642      	mov	r2, r8
 80170ac:	e9cd 0100 	strd	r0, r1, [sp]
 80170b0:	464b      	mov	r3, r9
 80170b2:	4620      	mov	r0, r4
 80170b4:	4629      	mov	r1, r5
 80170b6:	f7e9 f8ef 	bl	8000298 <__aeabi_dsub>
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170c2:	f7e9 fd31 	bl	8000b28 <__aeabi_dcmpgt>
 80170c6:	2800      	cmp	r0, #0
 80170c8:	f47f adfe 	bne.w	8016cc8 <__ieee754_pow+0x3e0>
 80170cc:	4ba2      	ldr	r3, [pc, #648]	@ (8017358 <__ieee754_pow+0xa70>)
 80170ce:	e022      	b.n	8017116 <__ieee754_pow+0x82e>
 80170d0:	4ca2      	ldr	r4, [pc, #648]	@ (801735c <__ieee754_pow+0xa74>)
 80170d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80170d6:	42a3      	cmp	r3, r4
 80170d8:	d919      	bls.n	801710e <__ieee754_pow+0x826>
 80170da:	4ba1      	ldr	r3, [pc, #644]	@ (8017360 <__ieee754_pow+0xa78>)
 80170dc:	440b      	add	r3, r1
 80170de:	4303      	orrs	r3, r0
 80170e0:	d009      	beq.n	80170f6 <__ieee754_pow+0x80e>
 80170e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170e6:	2200      	movs	r2, #0
 80170e8:	2300      	movs	r3, #0
 80170ea:	f7e9 fcff 	bl	8000aec <__aeabi_dcmplt>
 80170ee:	3800      	subs	r0, #0
 80170f0:	bf18      	it	ne
 80170f2:	2001      	movne	r0, #1
 80170f4:	e512      	b.n	8016b1c <__ieee754_pow+0x234>
 80170f6:	4642      	mov	r2, r8
 80170f8:	464b      	mov	r3, r9
 80170fa:	f7e9 f8cd 	bl	8000298 <__aeabi_dsub>
 80170fe:	4632      	mov	r2, r6
 8017100:	463b      	mov	r3, r7
 8017102:	f7e9 fd07 	bl	8000b14 <__aeabi_dcmpge>
 8017106:	2800      	cmp	r0, #0
 8017108:	d1eb      	bne.n	80170e2 <__ieee754_pow+0x7fa>
 801710a:	4b96      	ldr	r3, [pc, #600]	@ (8017364 <__ieee754_pow+0xa7c>)
 801710c:	e003      	b.n	8017116 <__ieee754_pow+0x82e>
 801710e:	4a96      	ldr	r2, [pc, #600]	@ (8017368 <__ieee754_pow+0xa80>)
 8017110:	4293      	cmp	r3, r2
 8017112:	f240 80e7 	bls.w	80172e4 <__ieee754_pow+0x9fc>
 8017116:	151b      	asrs	r3, r3, #20
 8017118:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801711c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8017120:	fa4a fa03 	asr.w	sl, sl, r3
 8017124:	44da      	add	sl, fp
 8017126:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801712a:	4890      	ldr	r0, [pc, #576]	@ (801736c <__ieee754_pow+0xa84>)
 801712c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8017130:	4108      	asrs	r0, r1
 8017132:	ea00 030a 	and.w	r3, r0, sl
 8017136:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801713a:	f1c1 0114 	rsb	r1, r1, #20
 801713e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8017142:	fa4a fa01 	asr.w	sl, sl, r1
 8017146:	f1bb 0f00 	cmp.w	fp, #0
 801714a:	4640      	mov	r0, r8
 801714c:	4649      	mov	r1, r9
 801714e:	f04f 0200 	mov.w	r2, #0
 8017152:	bfb8      	it	lt
 8017154:	f1ca 0a00 	rsblt	sl, sl, #0
 8017158:	f7e9 f89e 	bl	8000298 <__aeabi_dsub>
 801715c:	4680      	mov	r8, r0
 801715e:	4689      	mov	r9, r1
 8017160:	4632      	mov	r2, r6
 8017162:	463b      	mov	r3, r7
 8017164:	4640      	mov	r0, r8
 8017166:	4649      	mov	r1, r9
 8017168:	f7e9 f898 	bl	800029c <__adddf3>
 801716c:	2400      	movs	r4, #0
 801716e:	a36a      	add	r3, pc, #424	@ (adr r3, 8017318 <__ieee754_pow+0xa30>)
 8017170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017174:	4620      	mov	r0, r4
 8017176:	460d      	mov	r5, r1
 8017178:	f7e9 fa46 	bl	8000608 <__aeabi_dmul>
 801717c:	4642      	mov	r2, r8
 801717e:	e9cd 0100 	strd	r0, r1, [sp]
 8017182:	464b      	mov	r3, r9
 8017184:	4620      	mov	r0, r4
 8017186:	4629      	mov	r1, r5
 8017188:	f7e9 f886 	bl	8000298 <__aeabi_dsub>
 801718c:	4602      	mov	r2, r0
 801718e:	460b      	mov	r3, r1
 8017190:	4630      	mov	r0, r6
 8017192:	4639      	mov	r1, r7
 8017194:	f7e9 f880 	bl	8000298 <__aeabi_dsub>
 8017198:	a361      	add	r3, pc, #388	@ (adr r3, 8017320 <__ieee754_pow+0xa38>)
 801719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801719e:	f7e9 fa33 	bl	8000608 <__aeabi_dmul>
 80171a2:	a361      	add	r3, pc, #388	@ (adr r3, 8017328 <__ieee754_pow+0xa40>)
 80171a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a8:	4680      	mov	r8, r0
 80171aa:	4689      	mov	r9, r1
 80171ac:	4620      	mov	r0, r4
 80171ae:	4629      	mov	r1, r5
 80171b0:	f7e9 fa2a 	bl	8000608 <__aeabi_dmul>
 80171b4:	4602      	mov	r2, r0
 80171b6:	460b      	mov	r3, r1
 80171b8:	4640      	mov	r0, r8
 80171ba:	4649      	mov	r1, r9
 80171bc:	f7e9 f86e 	bl	800029c <__adddf3>
 80171c0:	4604      	mov	r4, r0
 80171c2:	460d      	mov	r5, r1
 80171c4:	4602      	mov	r2, r0
 80171c6:	460b      	mov	r3, r1
 80171c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171cc:	f7e9 f866 	bl	800029c <__adddf3>
 80171d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171d4:	4680      	mov	r8, r0
 80171d6:	4689      	mov	r9, r1
 80171d8:	f7e9 f85e 	bl	8000298 <__aeabi_dsub>
 80171dc:	4602      	mov	r2, r0
 80171de:	460b      	mov	r3, r1
 80171e0:	4620      	mov	r0, r4
 80171e2:	4629      	mov	r1, r5
 80171e4:	f7e9 f858 	bl	8000298 <__aeabi_dsub>
 80171e8:	4642      	mov	r2, r8
 80171ea:	4606      	mov	r6, r0
 80171ec:	460f      	mov	r7, r1
 80171ee:	464b      	mov	r3, r9
 80171f0:	4640      	mov	r0, r8
 80171f2:	4649      	mov	r1, r9
 80171f4:	f7e9 fa08 	bl	8000608 <__aeabi_dmul>
 80171f8:	a34d      	add	r3, pc, #308	@ (adr r3, 8017330 <__ieee754_pow+0xa48>)
 80171fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171fe:	4604      	mov	r4, r0
 8017200:	460d      	mov	r5, r1
 8017202:	f7e9 fa01 	bl	8000608 <__aeabi_dmul>
 8017206:	a34c      	add	r3, pc, #304	@ (adr r3, 8017338 <__ieee754_pow+0xa50>)
 8017208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720c:	f7e9 f844 	bl	8000298 <__aeabi_dsub>
 8017210:	4622      	mov	r2, r4
 8017212:	462b      	mov	r3, r5
 8017214:	f7e9 f9f8 	bl	8000608 <__aeabi_dmul>
 8017218:	a349      	add	r3, pc, #292	@ (adr r3, 8017340 <__ieee754_pow+0xa58>)
 801721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721e:	f7e9 f83d 	bl	800029c <__adddf3>
 8017222:	4622      	mov	r2, r4
 8017224:	462b      	mov	r3, r5
 8017226:	f7e9 f9ef 	bl	8000608 <__aeabi_dmul>
 801722a:	a347      	add	r3, pc, #284	@ (adr r3, 8017348 <__ieee754_pow+0xa60>)
 801722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017230:	f7e9 f832 	bl	8000298 <__aeabi_dsub>
 8017234:	4622      	mov	r2, r4
 8017236:	462b      	mov	r3, r5
 8017238:	f7e9 f9e6 	bl	8000608 <__aeabi_dmul>
 801723c:	a344      	add	r3, pc, #272	@ (adr r3, 8017350 <__ieee754_pow+0xa68>)
 801723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017242:	f7e9 f82b 	bl	800029c <__adddf3>
 8017246:	4622      	mov	r2, r4
 8017248:	462b      	mov	r3, r5
 801724a:	f7e9 f9dd 	bl	8000608 <__aeabi_dmul>
 801724e:	4602      	mov	r2, r0
 8017250:	460b      	mov	r3, r1
 8017252:	4640      	mov	r0, r8
 8017254:	4649      	mov	r1, r9
 8017256:	f7e9 f81f 	bl	8000298 <__aeabi_dsub>
 801725a:	4604      	mov	r4, r0
 801725c:	460d      	mov	r5, r1
 801725e:	4602      	mov	r2, r0
 8017260:	460b      	mov	r3, r1
 8017262:	4640      	mov	r0, r8
 8017264:	4649      	mov	r1, r9
 8017266:	f7e9 f9cf 	bl	8000608 <__aeabi_dmul>
 801726a:	2200      	movs	r2, #0
 801726c:	e9cd 0100 	strd	r0, r1, [sp]
 8017270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017274:	4620      	mov	r0, r4
 8017276:	4629      	mov	r1, r5
 8017278:	f7e9 f80e 	bl	8000298 <__aeabi_dsub>
 801727c:	4602      	mov	r2, r0
 801727e:	460b      	mov	r3, r1
 8017280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017284:	f7e9 faea 	bl	800085c <__aeabi_ddiv>
 8017288:	4632      	mov	r2, r6
 801728a:	4604      	mov	r4, r0
 801728c:	460d      	mov	r5, r1
 801728e:	463b      	mov	r3, r7
 8017290:	4640      	mov	r0, r8
 8017292:	4649      	mov	r1, r9
 8017294:	f7e9 f9b8 	bl	8000608 <__aeabi_dmul>
 8017298:	4632      	mov	r2, r6
 801729a:	463b      	mov	r3, r7
 801729c:	f7e8 fffe 	bl	800029c <__adddf3>
 80172a0:	4602      	mov	r2, r0
 80172a2:	460b      	mov	r3, r1
 80172a4:	4620      	mov	r0, r4
 80172a6:	4629      	mov	r1, r5
 80172a8:	f7e8 fff6 	bl	8000298 <__aeabi_dsub>
 80172ac:	4642      	mov	r2, r8
 80172ae:	464b      	mov	r3, r9
 80172b0:	f7e8 fff2 	bl	8000298 <__aeabi_dsub>
 80172b4:	460b      	mov	r3, r1
 80172b6:	4602      	mov	r2, r0
 80172b8:	492d      	ldr	r1, [pc, #180]	@ (8017370 <__ieee754_pow+0xa88>)
 80172ba:	2000      	movs	r0, #0
 80172bc:	f7e8 ffec 	bl	8000298 <__aeabi_dsub>
 80172c0:	ec41 0b10 	vmov	d0, r0, r1
 80172c4:	ee10 3a90 	vmov	r3, s1
 80172c8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80172cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80172d0:	da0b      	bge.n	80172ea <__ieee754_pow+0xa02>
 80172d2:	4650      	mov	r0, sl
 80172d4:	f000 f85c 	bl	8017390 <scalbn>
 80172d8:	ec51 0b10 	vmov	r0, r1, d0
 80172dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172e0:	f7ff bb6d 	b.w	80169be <__ieee754_pow+0xd6>
 80172e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80172e8:	e73a      	b.n	8017160 <__ieee754_pow+0x878>
 80172ea:	ec51 0b10 	vmov	r0, r1, d0
 80172ee:	4619      	mov	r1, r3
 80172f0:	e7f4      	b.n	80172dc <__ieee754_pow+0x9f4>
 80172f2:	491f      	ldr	r1, [pc, #124]	@ (8017370 <__ieee754_pow+0xa88>)
 80172f4:	2000      	movs	r0, #0
 80172f6:	f7ff bb14 	b.w	8016922 <__ieee754_pow+0x3a>
 80172fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172fe:	f7ff bb10 	b.w	8016922 <__ieee754_pow+0x3a>
 8017302:	4630      	mov	r0, r6
 8017304:	4639      	mov	r1, r7
 8017306:	f7ff bb0c 	b.w	8016922 <__ieee754_pow+0x3a>
 801730a:	460c      	mov	r4, r1
 801730c:	f7ff bb69 	b.w	80169e2 <__ieee754_pow+0xfa>
 8017310:	2400      	movs	r4, #0
 8017312:	f7ff bb4b 	b.w	80169ac <__ieee754_pow+0xc4>
 8017316:	bf00      	nop
 8017318:	00000000 	.word	0x00000000
 801731c:	3fe62e43 	.word	0x3fe62e43
 8017320:	fefa39ef 	.word	0xfefa39ef
 8017324:	3fe62e42 	.word	0x3fe62e42
 8017328:	0ca86c39 	.word	0x0ca86c39
 801732c:	be205c61 	.word	0xbe205c61
 8017330:	72bea4d0 	.word	0x72bea4d0
 8017334:	3e663769 	.word	0x3e663769
 8017338:	c5d26bf1 	.word	0xc5d26bf1
 801733c:	3ebbbd41 	.word	0x3ebbbd41
 8017340:	af25de2c 	.word	0xaf25de2c
 8017344:	3f11566a 	.word	0x3f11566a
 8017348:	16bebd93 	.word	0x16bebd93
 801734c:	3f66c16c 	.word	0x3f66c16c
 8017350:	5555553e 	.word	0x5555553e
 8017354:	3fc55555 	.word	0x3fc55555
 8017358:	40900000 	.word	0x40900000
 801735c:	4090cbff 	.word	0x4090cbff
 8017360:	3f6f3400 	.word	0x3f6f3400
 8017364:	4090cc00 	.word	0x4090cc00
 8017368:	3fe00000 	.word	0x3fe00000
 801736c:	fff00000 	.word	0xfff00000
 8017370:	3ff00000 	.word	0x3ff00000
 8017374:	652b82fe 	.word	0x652b82fe
 8017378:	3c971547 	.word	0x3c971547

0801737c <fabs>:
 801737c:	ec51 0b10 	vmov	r0, r1, d0
 8017380:	4602      	mov	r2, r0
 8017382:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017386:	ec43 2b10 	vmov	d0, r2, r3
 801738a:	4770      	bx	lr
 801738c:	0000      	movs	r0, r0
	...

08017390 <scalbn>:
 8017390:	b570      	push	{r4, r5, r6, lr}
 8017392:	ec55 4b10 	vmov	r4, r5, d0
 8017396:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801739a:	4606      	mov	r6, r0
 801739c:	462b      	mov	r3, r5
 801739e:	b991      	cbnz	r1, 80173c6 <scalbn+0x36>
 80173a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80173a4:	4323      	orrs	r3, r4
 80173a6:	d03b      	beq.n	8017420 <scalbn+0x90>
 80173a8:	4b33      	ldr	r3, [pc, #204]	@ (8017478 <scalbn+0xe8>)
 80173aa:	4620      	mov	r0, r4
 80173ac:	4629      	mov	r1, r5
 80173ae:	2200      	movs	r2, #0
 80173b0:	f7e9 f92a 	bl	8000608 <__aeabi_dmul>
 80173b4:	4b31      	ldr	r3, [pc, #196]	@ (801747c <scalbn+0xec>)
 80173b6:	429e      	cmp	r6, r3
 80173b8:	4604      	mov	r4, r0
 80173ba:	460d      	mov	r5, r1
 80173bc:	da0f      	bge.n	80173de <scalbn+0x4e>
 80173be:	a326      	add	r3, pc, #152	@ (adr r3, 8017458 <scalbn+0xc8>)
 80173c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c4:	e01e      	b.n	8017404 <scalbn+0x74>
 80173c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80173ca:	4291      	cmp	r1, r2
 80173cc:	d10b      	bne.n	80173e6 <scalbn+0x56>
 80173ce:	4622      	mov	r2, r4
 80173d0:	4620      	mov	r0, r4
 80173d2:	4629      	mov	r1, r5
 80173d4:	f7e8 ff62 	bl	800029c <__adddf3>
 80173d8:	4604      	mov	r4, r0
 80173da:	460d      	mov	r5, r1
 80173dc:	e020      	b.n	8017420 <scalbn+0x90>
 80173de:	460b      	mov	r3, r1
 80173e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80173e4:	3936      	subs	r1, #54	@ 0x36
 80173e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80173ea:	4296      	cmp	r6, r2
 80173ec:	dd0d      	ble.n	801740a <scalbn+0x7a>
 80173ee:	2d00      	cmp	r5, #0
 80173f0:	a11b      	add	r1, pc, #108	@ (adr r1, 8017460 <scalbn+0xd0>)
 80173f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173f6:	da02      	bge.n	80173fe <scalbn+0x6e>
 80173f8:	a11b      	add	r1, pc, #108	@ (adr r1, 8017468 <scalbn+0xd8>)
 80173fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173fe:	a318      	add	r3, pc, #96	@ (adr r3, 8017460 <scalbn+0xd0>)
 8017400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017404:	f7e9 f900 	bl	8000608 <__aeabi_dmul>
 8017408:	e7e6      	b.n	80173d8 <scalbn+0x48>
 801740a:	1872      	adds	r2, r6, r1
 801740c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017410:	428a      	cmp	r2, r1
 8017412:	dcec      	bgt.n	80173ee <scalbn+0x5e>
 8017414:	2a00      	cmp	r2, #0
 8017416:	dd06      	ble.n	8017426 <scalbn+0x96>
 8017418:	f36f 531e 	bfc	r3, #20, #11
 801741c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017420:	ec45 4b10 	vmov	d0, r4, r5
 8017424:	bd70      	pop	{r4, r5, r6, pc}
 8017426:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801742a:	da08      	bge.n	801743e <scalbn+0xae>
 801742c:	2d00      	cmp	r5, #0
 801742e:	a10a      	add	r1, pc, #40	@ (adr r1, 8017458 <scalbn+0xc8>)
 8017430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017434:	dac3      	bge.n	80173be <scalbn+0x2e>
 8017436:	a10e      	add	r1, pc, #56	@ (adr r1, 8017470 <scalbn+0xe0>)
 8017438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801743c:	e7bf      	b.n	80173be <scalbn+0x2e>
 801743e:	3236      	adds	r2, #54	@ 0x36
 8017440:	f36f 531e 	bfc	r3, #20, #11
 8017444:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017448:	4620      	mov	r0, r4
 801744a:	4b0d      	ldr	r3, [pc, #52]	@ (8017480 <scalbn+0xf0>)
 801744c:	4629      	mov	r1, r5
 801744e:	2200      	movs	r2, #0
 8017450:	e7d8      	b.n	8017404 <scalbn+0x74>
 8017452:	bf00      	nop
 8017454:	f3af 8000 	nop.w
 8017458:	c2f8f359 	.word	0xc2f8f359
 801745c:	01a56e1f 	.word	0x01a56e1f
 8017460:	8800759c 	.word	0x8800759c
 8017464:	7e37e43c 	.word	0x7e37e43c
 8017468:	8800759c 	.word	0x8800759c
 801746c:	fe37e43c 	.word	0xfe37e43c
 8017470:	c2f8f359 	.word	0xc2f8f359
 8017474:	81a56e1f 	.word	0x81a56e1f
 8017478:	43500000 	.word	0x43500000
 801747c:	ffff3cb0 	.word	0xffff3cb0
 8017480:	3c900000 	.word	0x3c900000

08017484 <with_errno>:
 8017484:	b510      	push	{r4, lr}
 8017486:	ed2d 8b02 	vpush	{d8}
 801748a:	eeb0 8a40 	vmov.f32	s16, s0
 801748e:	eef0 8a60 	vmov.f32	s17, s1
 8017492:	4604      	mov	r4, r0
 8017494:	f7fe fb46 	bl	8015b24 <__errno>
 8017498:	eeb0 0a48 	vmov.f32	s0, s16
 801749c:	eef0 0a68 	vmov.f32	s1, s17
 80174a0:	ecbd 8b02 	vpop	{d8}
 80174a4:	6004      	str	r4, [r0, #0]
 80174a6:	bd10      	pop	{r4, pc}

080174a8 <xflow>:
 80174a8:	4603      	mov	r3, r0
 80174aa:	b507      	push	{r0, r1, r2, lr}
 80174ac:	ec51 0b10 	vmov	r0, r1, d0
 80174b0:	b183      	cbz	r3, 80174d4 <xflow+0x2c>
 80174b2:	4602      	mov	r2, r0
 80174b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80174b8:	e9cd 2300 	strd	r2, r3, [sp]
 80174bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174c0:	f7e9 f8a2 	bl	8000608 <__aeabi_dmul>
 80174c4:	ec41 0b10 	vmov	d0, r0, r1
 80174c8:	2022      	movs	r0, #34	@ 0x22
 80174ca:	b003      	add	sp, #12
 80174cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80174d0:	f7ff bfd8 	b.w	8017484 <with_errno>
 80174d4:	4602      	mov	r2, r0
 80174d6:	460b      	mov	r3, r1
 80174d8:	e7ee      	b.n	80174b8 <xflow+0x10>
 80174da:	0000      	movs	r0, r0
 80174dc:	0000      	movs	r0, r0
	...

080174e0 <__math_uflow>:
 80174e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174e8 <__math_uflow+0x8>
 80174e4:	f7ff bfe0 	b.w	80174a8 <xflow>
 80174e8:	00000000 	.word	0x00000000
 80174ec:	10000000 	.word	0x10000000

080174f0 <__math_oflow>:
 80174f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174f8 <__math_oflow+0x8>
 80174f4:	f7ff bfd8 	b.w	80174a8 <xflow>
 80174f8:	00000000 	.word	0x00000000
 80174fc:	70000000 	.word	0x70000000

08017500 <__ieee754_sqrt>:
 8017500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	4a66      	ldr	r2, [pc, #408]	@ (80176a0 <__ieee754_sqrt+0x1a0>)
 8017506:	ec55 4b10 	vmov	r4, r5, d0
 801750a:	43aa      	bics	r2, r5
 801750c:	462b      	mov	r3, r5
 801750e:	4621      	mov	r1, r4
 8017510:	d110      	bne.n	8017534 <__ieee754_sqrt+0x34>
 8017512:	4622      	mov	r2, r4
 8017514:	4620      	mov	r0, r4
 8017516:	4629      	mov	r1, r5
 8017518:	f7e9 f876 	bl	8000608 <__aeabi_dmul>
 801751c:	4602      	mov	r2, r0
 801751e:	460b      	mov	r3, r1
 8017520:	4620      	mov	r0, r4
 8017522:	4629      	mov	r1, r5
 8017524:	f7e8 feba 	bl	800029c <__adddf3>
 8017528:	4604      	mov	r4, r0
 801752a:	460d      	mov	r5, r1
 801752c:	ec45 4b10 	vmov	d0, r4, r5
 8017530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017534:	2d00      	cmp	r5, #0
 8017536:	dc0e      	bgt.n	8017556 <__ieee754_sqrt+0x56>
 8017538:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801753c:	4322      	orrs	r2, r4
 801753e:	d0f5      	beq.n	801752c <__ieee754_sqrt+0x2c>
 8017540:	b19d      	cbz	r5, 801756a <__ieee754_sqrt+0x6a>
 8017542:	4622      	mov	r2, r4
 8017544:	4620      	mov	r0, r4
 8017546:	4629      	mov	r1, r5
 8017548:	f7e8 fea6 	bl	8000298 <__aeabi_dsub>
 801754c:	4602      	mov	r2, r0
 801754e:	460b      	mov	r3, r1
 8017550:	f7e9 f984 	bl	800085c <__aeabi_ddiv>
 8017554:	e7e8      	b.n	8017528 <__ieee754_sqrt+0x28>
 8017556:	152a      	asrs	r2, r5, #20
 8017558:	d115      	bne.n	8017586 <__ieee754_sqrt+0x86>
 801755a:	2000      	movs	r0, #0
 801755c:	e009      	b.n	8017572 <__ieee754_sqrt+0x72>
 801755e:	0acb      	lsrs	r3, r1, #11
 8017560:	3a15      	subs	r2, #21
 8017562:	0549      	lsls	r1, r1, #21
 8017564:	2b00      	cmp	r3, #0
 8017566:	d0fa      	beq.n	801755e <__ieee754_sqrt+0x5e>
 8017568:	e7f7      	b.n	801755a <__ieee754_sqrt+0x5a>
 801756a:	462a      	mov	r2, r5
 801756c:	e7fa      	b.n	8017564 <__ieee754_sqrt+0x64>
 801756e:	005b      	lsls	r3, r3, #1
 8017570:	3001      	adds	r0, #1
 8017572:	02dc      	lsls	r4, r3, #11
 8017574:	d5fb      	bpl.n	801756e <__ieee754_sqrt+0x6e>
 8017576:	1e44      	subs	r4, r0, #1
 8017578:	1b12      	subs	r2, r2, r4
 801757a:	f1c0 0420 	rsb	r4, r0, #32
 801757e:	fa21 f404 	lsr.w	r4, r1, r4
 8017582:	4323      	orrs	r3, r4
 8017584:	4081      	lsls	r1, r0
 8017586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801758a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801758e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017592:	07d2      	lsls	r2, r2, #31
 8017594:	bf5c      	itt	pl
 8017596:	005b      	lslpl	r3, r3, #1
 8017598:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801759c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80175a0:	bf58      	it	pl
 80175a2:	0049      	lslpl	r1, r1, #1
 80175a4:	2600      	movs	r6, #0
 80175a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80175aa:	107f      	asrs	r7, r7, #1
 80175ac:	0049      	lsls	r1, r1, #1
 80175ae:	2016      	movs	r0, #22
 80175b0:	4632      	mov	r2, r6
 80175b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80175b6:	1915      	adds	r5, r2, r4
 80175b8:	429d      	cmp	r5, r3
 80175ba:	bfde      	ittt	le
 80175bc:	192a      	addle	r2, r5, r4
 80175be:	1b5b      	suble	r3, r3, r5
 80175c0:	1936      	addle	r6, r6, r4
 80175c2:	0fcd      	lsrs	r5, r1, #31
 80175c4:	3801      	subs	r0, #1
 80175c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80175ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80175ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80175d2:	d1f0      	bne.n	80175b6 <__ieee754_sqrt+0xb6>
 80175d4:	4605      	mov	r5, r0
 80175d6:	2420      	movs	r4, #32
 80175d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80175dc:	4293      	cmp	r3, r2
 80175de:	eb0c 0e00 	add.w	lr, ip, r0
 80175e2:	dc02      	bgt.n	80175ea <__ieee754_sqrt+0xea>
 80175e4:	d113      	bne.n	801760e <__ieee754_sqrt+0x10e>
 80175e6:	458e      	cmp	lr, r1
 80175e8:	d811      	bhi.n	801760e <__ieee754_sqrt+0x10e>
 80175ea:	f1be 0f00 	cmp.w	lr, #0
 80175ee:	eb0e 000c 	add.w	r0, lr, ip
 80175f2:	da3f      	bge.n	8017674 <__ieee754_sqrt+0x174>
 80175f4:	2800      	cmp	r0, #0
 80175f6:	db3d      	blt.n	8017674 <__ieee754_sqrt+0x174>
 80175f8:	f102 0801 	add.w	r8, r2, #1
 80175fc:	1a9b      	subs	r3, r3, r2
 80175fe:	458e      	cmp	lr, r1
 8017600:	bf88      	it	hi
 8017602:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017606:	eba1 010e 	sub.w	r1, r1, lr
 801760a:	4465      	add	r5, ip
 801760c:	4642      	mov	r2, r8
 801760e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8017612:	3c01      	subs	r4, #1
 8017614:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8017618:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801761c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8017620:	d1dc      	bne.n	80175dc <__ieee754_sqrt+0xdc>
 8017622:	4319      	orrs	r1, r3
 8017624:	d01b      	beq.n	801765e <__ieee754_sqrt+0x15e>
 8017626:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80176a4 <__ieee754_sqrt+0x1a4>
 801762a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80176a8 <__ieee754_sqrt+0x1a8>
 801762e:	e9da 0100 	ldrd	r0, r1, [sl]
 8017632:	e9db 2300 	ldrd	r2, r3, [fp]
 8017636:	f7e8 fe2f 	bl	8000298 <__aeabi_dsub>
 801763a:	e9da 8900 	ldrd	r8, r9, [sl]
 801763e:	4602      	mov	r2, r0
 8017640:	460b      	mov	r3, r1
 8017642:	4640      	mov	r0, r8
 8017644:	4649      	mov	r1, r9
 8017646:	f7e9 fa5b 	bl	8000b00 <__aeabi_dcmple>
 801764a:	b140      	cbz	r0, 801765e <__ieee754_sqrt+0x15e>
 801764c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8017650:	e9da 0100 	ldrd	r0, r1, [sl]
 8017654:	e9db 2300 	ldrd	r2, r3, [fp]
 8017658:	d10e      	bne.n	8017678 <__ieee754_sqrt+0x178>
 801765a:	3601      	adds	r6, #1
 801765c:	4625      	mov	r5, r4
 801765e:	1073      	asrs	r3, r6, #1
 8017660:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8017664:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8017668:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801766c:	086b      	lsrs	r3, r5, #1
 801766e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8017672:	e759      	b.n	8017528 <__ieee754_sqrt+0x28>
 8017674:	4690      	mov	r8, r2
 8017676:	e7c1      	b.n	80175fc <__ieee754_sqrt+0xfc>
 8017678:	f7e8 fe10 	bl	800029c <__adddf3>
 801767c:	e9da 8900 	ldrd	r8, r9, [sl]
 8017680:	4602      	mov	r2, r0
 8017682:	460b      	mov	r3, r1
 8017684:	4640      	mov	r0, r8
 8017686:	4649      	mov	r1, r9
 8017688:	f7e9 fa30 	bl	8000aec <__aeabi_dcmplt>
 801768c:	b120      	cbz	r0, 8017698 <__ieee754_sqrt+0x198>
 801768e:	1cab      	adds	r3, r5, #2
 8017690:	bf08      	it	eq
 8017692:	3601      	addeq	r6, #1
 8017694:	3502      	adds	r5, #2
 8017696:	e7e2      	b.n	801765e <__ieee754_sqrt+0x15e>
 8017698:	1c6b      	adds	r3, r5, #1
 801769a:	f023 0501 	bic.w	r5, r3, #1
 801769e:	e7de      	b.n	801765e <__ieee754_sqrt+0x15e>
 80176a0:	7ff00000 	.word	0x7ff00000
 80176a4:	080184b8 	.word	0x080184b8
 80176a8:	080184b0 	.word	0x080184b0

080176ac <_init>:
 80176ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ae:	bf00      	nop
 80176b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176b2:	bc08      	pop	{r3}
 80176b4:	469e      	mov	lr, r3
 80176b6:	4770      	bx	lr

080176b8 <_fini>:
 80176b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ba:	bf00      	nop
 80176bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176be:	bc08      	pop	{r3}
 80176c0:	469e      	mov	lr, r3
 80176c2:	4770      	bx	lr
