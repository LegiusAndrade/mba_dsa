
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cdc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08016e80  08016e80  00017e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c88  08017c88  00019284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017c88  08017c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c90  08017c90  00019284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c90  08017c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017c94  08017c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08017c98  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000284  08017f1c  00019284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000efc  08017f1c  00019efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d405  00000000  00000000  000192b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062fe  00000000  00000000  000566b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036d0  00000000  00000000  0005c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a99  00000000  00000000  00060088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f196  00000000  00000000  00062b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000373cf  00000000  00000000  00081cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af268  00000000  00000000  000b9086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001682ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000faf4  00000000  00000000  00168334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00177e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016e64 	.word	0x08016e64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	08016e64 	.word	0x08016e64

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fcc:	e000      	b.n	8000fd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fda:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write( int file, char * ptr, int len )
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
    for( int i = 0; i < len; i++ )
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
    {
        ITM_SendChar( *ptr++ );
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffc9 	bl	8000fa4 <ITM_SendChar>
    for( int i = 0; i < len; i++ )
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
    }
    return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	b0bd      	sub	sp, #244	@ 0xf4
 8001030:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f00b f90b 	bl	800c24c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f8b3 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 f9a5 	bl	8001388 <MX_GPIO_Init>
  MX_TIM1_Init();
 800103e:	f000 f951 	bl	80012e4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001042:	f000 f919 	bl	8001278 <MX_SPI1_Init>
  MX_MEMS_Init();
 8001046:	f00f fa67 	bl	8010518 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT( &htim1 );
 800104a:	484f      	ldr	r0, [pc, #316]	@ (8001188 <main+0x15c>)
 800104c:	f00e fbaa 	bl	800f7a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
    while( 1 )
    {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001050:	f00f fa68 	bl	8010524 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */
        if( data_ready )
 8001054:	4b4d      	ldr	r3, [pc, #308]	@ (800118c <main+0x160>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f9      	beq.n	8001050 <main+0x24>
        {
            const char name_file[] = { "sensor_data.csv" };
 800105c:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <main+0x164>)
 800105e:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            const char header_csv[] = "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z\n";
 8001068:	4b4a      	ldr	r3, [pc, #296]	@ (8001194 <main+0x168>)
 800106a:	f107 040c 	add.w	r4, r7, #12
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001080:	e884 0003 	stmia.w	r4, {r0, r1}
            // Save data to SD card
            sd_list_files();
 8001084:	f000 fd56 	bl	8001b34 <sd_list_files>
            sd_mount();
 8001088:	f000 fb20 	bl	80016cc <sd_mount>
            sd_write_file( name_file, header_csv ); // Write header
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fbae 	bl	80017f8 <sd_write_file>

            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80010a2:	e069      	b.n	8001178 <main+0x14c>
            {
                char line[128] = { 0 };
 80010a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f014 f8b5 	bl	801521c <memset>
                snprintf( line, sizeof( line ), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp, (long) sensor_data[i].acceleration.x,
 80010b2:	4939      	ldr	r1, [pc, #228]	@ (8001198 <main+0x16c>)
 80010b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4934      	ldr	r1, [pc, #208]	@ (8001198 <main+0x16c>)
 80010c8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3304      	adds	r3, #4
 80010d8:	6819      	ldr	r1, [r3, #0]
                          (long) sensor_data[i].acceleration.y, (long) sensor_data[i].acceleration.z, (long) sensor_data[i].angular_velocity.x,
 80010da:	482f      	ldr	r0, [pc, #188]	@ (8001198 <main+0x16c>)
 80010dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4403      	add	r3, r0
 80010ea:	3308      	adds	r3, #8
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	4c2a      	ldr	r4, [pc, #168]	@ (8001198 <main+0x16c>)
 80010f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4423      	add	r3, r4
 80010fe:	330c      	adds	r3, #12
 8001100:	681c      	ldr	r4, [r3, #0]
 8001102:	4d25      	ldr	r5, [pc, #148]	@ (8001198 <main+0x16c>)
 8001104:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	442b      	add	r3, r5
 8001112:	3310      	adds	r3, #16
 8001114:	681d      	ldr	r5, [r3, #0]
                          (long) sensor_data[i].angular_velocity.y, (long) sensor_data[i].angular_velocity.z );
 8001116:	4e20      	ldr	r6, [pc, #128]	@ (8001198 <main+0x16c>)
 8001118:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4433      	add	r3, r6
 8001126:	3314      	adds	r3, #20
 8001128:	681e      	ldr	r6, [r3, #0]
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <main+0x16c>)
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	3318      	adds	r3, #24
 8001140:	681b      	ldr	r3, [r3, #0]
                snprintf( line, sizeof( line ), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp, (long) sensor_data[i].acceleration.x,
 8001142:	f107 0c44 	add.w	ip, r7, #68	@ 0x44
 8001146:	9305      	str	r3, [sp, #20]
 8001148:	9604      	str	r6, [sp, #16]
 800114a:	9503      	str	r5, [sp, #12]
 800114c:	9402      	str	r4, [sp, #8]
 800114e:	9001      	str	r0, [sp, #4]
 8001150:	9100      	str	r1, [sp, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a11      	ldr	r2, [pc, #68]	@ (800119c <main+0x170>)
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	4660      	mov	r0, ip
 800115a:	f013 ff51 	bl	8015000 <sniprintf>
                sd_append_file( name_file, line );
 800115e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001162:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fbad 	bl	80018c8 <sd_append_file>
            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 800116e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001172:	3301      	adds	r3, #1
 8001174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800117c:	2b1d      	cmp	r3, #29
 800117e:	d991      	bls.n	80010a4 <main+0x78>
            }
            sd_unmount();
 8001180:	f000 fb18 	bl	80017b4 <sd_unmount>
  MX_MEMS_Process();
 8001184:	e764      	b.n	8001050 <main+0x24>
 8001186:	bf00      	nop
 8001188:	200002f8 	.word	0x200002f8
 800118c:	20000688 	.word	0x20000688
 8001190:	08016ea0 	.word	0x08016ea0
 8001194:	08016eb0 	.word	0x08016eb0
 8001198:	20000340 	.word	0x20000340
 800119c:	08016e80 	.word	0x08016e80

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	@ 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f014 f834 	bl	801521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <SystemClock_Config+0xd0>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <SystemClock_Config+0xd0>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <SystemClock_Config+0xd0>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <SystemClock_Config+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <SystemClock_Config+0xd4>)
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <SystemClock_Config+0xd4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001214:	2310      	movs	r3, #16
 8001216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001218:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800121c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800121e:	2304      	movs	r3, #4
 8001220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001222:	2307      	movs	r3, #7
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4618      	mov	r0, r3
 800122c:	f00d f980 	bl	800e530 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001236:	f000 f961 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f00d fbe2 	bl	800ea20 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001262:	f000 f94b 	bl	80014fc <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3750      	adds	r7, #80	@ 0x50
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_SPI1_Init+0x64>)
 800127e:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <MX_SPI1_Init+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_SPI1_Init+0x64>)
 8001284:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012ac:	2228      	movs	r2, #40	@ 0x28
 80012ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012ca:	f00d fdc9 	bl	800ee60 <HAL_SPI_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d4:	f000 f912 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002a0 	.word	0x200002a0
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001302:	4a20      	ldr	r2, [pc, #128]	@ (8001384 <MX_TIM1_Init+0xa0>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001308:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800130c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001316:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800131a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_TIM1_Init+0x9c>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <MX_TIM1_Init+0x9c>)
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001330:	f00e f9e8 	bl	800f704 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800133a:	f000 f8df 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <MX_TIM1_Init+0x9c>)
 800134c:	f00e fb7c 	bl	800fa48 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001356:	f000 f8d1 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001368:	f00e fd7e 	bl	800fe68 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001372:	f000 f8c3 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002f8 	.word	0x200002f8
 8001384:	40010000 	.word	0x40010000

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a25      	ldr	r2, [pc, #148]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <MX_GPIO_Init+0xb4>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_GPIO_Init+0xb4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2120      	movs	r1, #32
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <MX_GPIO_Init+0xb8>)
 8001414:	f00b fb70 	bl	800caf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001418:	2320      	movs	r3, #32
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_GPIO_Init+0xb8>)
 8001430:	f00b f8e2 	bl	800c5f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400

08001444 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim )
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

    if( htim->Instance == TIM1 )  // Check if the interrupt comes from TIM1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a25      	ldr	r2, [pc, #148]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d143      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        // Your code to be executed every second
        if( count_data < AMOUNT_DATA )
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b1d      	cmp	r3, #29
 800145c:	d83c      	bhi.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x94>
        {
            if( IKS4A1_MOTION_SENSOR_GetAxes(
            IKS4A1_LSM6DSV16X_0,
                                              MOTION_ACCELERO, &sensor_data[count_data].acceleration ) != 0 )
 800145e:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001460:	681a      	ldr	r2, [r3, #0]
            if( IKS4A1_MOTION_SENSOR_GetAxes(
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4a21      	ldr	r2, [pc, #132]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800146c:	4413      	add	r3, r2
 800146e:	3304      	adds	r3, #4
 8001470:	461a      	mov	r2, r3
 8001472:	2102      	movs	r1, #2
 8001474:	2001      	movs	r0, #1
 8001476:	f00a f969 	bl	800b74c <IKS4A1_MOTION_SENSOR_GetAxes>
            {
                // Handle error
            }
            if( IKS4A1_MOTION_SENSOR_GetAxes(
            IKS4A1_LSM6DSV16X_0,
                                              MOTION_GYRO, &sensor_data[count_data].angular_velocity ) != 0 )
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800147c:	681a      	ldr	r2, [r3, #0]
            if( IKS4A1_MOTION_SENSOR_GetAxes(
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	3310      	adds	r3, #16
 8001488:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800148a:	4413      	add	r3, r2
 800148c:	461a      	mov	r2, r3
 800148e:	2101      	movs	r1, #1
 8001490:	2001      	movs	r0, #1
 8001492:	f00a f95b 	bl	800b74c <IKS4A1_MOTION_SENSOR_GetAxes>
            {
                // Handle error
            }

            sensor_data[count_data].timestamp = count_data * BASE_TIME_TIM1; //now - prev;
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	2164      	movs	r1, #100	@ 0x64
 80014a0:	fb03 f101 	mul.w	r1, r3, r1
 80014a4:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	6019      	str	r1, [r3, #0]
            printf("Timestamp: %lu ms\n",
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014b4:	681a      	ldr	r2, [r3, #0]
                   (unsigned long) sensor_data[count_data].timestamp);
 80014b6:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	681b      	ldr	r3, [r3, #0]
            printf("Timestamp: %lu ms\n",
 80014c4:	4619      	mov	r1, r3
 80014c6:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80014c8:	f013 fd2a 	bl	8014f20 <iprintf>
            count_data++;
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014d4:	6013      	str	r3, [r2, #0]
        else
        {
            data_ready = 1;           // avisa a thread principal
        }
    }
}
 80014d6:	e002      	b.n	80014de <HAL_TIM_PeriodElapsedCallback+0x9a>
            data_ready = 1;           // avisa a thread principal
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40010000 	.word	0x40010000
 80014ec:	2000068c 	.word	0x2000068c
 80014f0:	20000340 	.word	0x20000340
 80014f4:	08016ee8 	.word	0x08016ee8
 80014f8:	20000688 	.word	0x20000688

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while( 1 )
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SD_disk_status+0x14>
        return STA_NOINIT;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <SD_disk_status+0x16>
    return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SD_disk_initialize+0x14>
        return STA_NOINIT;
 800153a:	2301      	movs	r3, #1
 800153c:	e007      	b.n	800154e <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 800153e:	f000 fbd1 	bl	8001ce4 <SD_SPI_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	4603      	mov	r3, r0
 8001566:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <SD_disk_read+0x1c>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <SD_disk_read+0x20>
        return RES_PARERR;
 8001574:	2304      	movs	r3, #4
 8001576:	e010      	b.n	800159a <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <SD_disk_read+0x4c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <SD_disk_read+0x2c>
 8001580:	2303      	movs	r3, #3
 8001582:	e00a      	b.n	800159a <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 fc9d 	bl	8001ec8 <SD_ReadBlocks>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200008c9 	.word	0x200008c9

080015a8 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <SD_disk_write+0x1c>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <SD_disk_write+0x20>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e010      	b.n	80015ea <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <SD_disk_write+0x4c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <SD_disk_write+0x2c>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e00a      	b.n	80015ea <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f000 fd49 	bl	8002070 <SD_WriteBlocks>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf14      	ite	ne
 80015e4:	2301      	movne	r3, #1
 80015e6:	2300      	moveq	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200008c9 	.word	0x200008c9

080015f8 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	460b      	mov	r3, r1
 8001606:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 800160e:	2304      	movs	r3, #4
 8001610:	e022      	b.n	8001658 <SD_disk_ioctl+0x60>

    switch (cmd) {
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d81e      	bhi.n	8001656 <SD_disk_ioctl+0x5e>
 8001618:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <SD_disk_ioctl+0x28>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001641 	.word	0x08001641
 8001628:	08001635 	.word	0x08001635
 800162c:	0800164d 	.word	0x0800164d
    case CTRL_SYNC:
        return RES_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e011      	b.n	8001658 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163a:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	e00b      	b.n	8001658 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001646:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	e005      	b.n	8001658 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8001656:	2304      	movs	r3, #4
    }
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <sd_get_space_kb>:
//		printf("Format failed: f_mkfs returned %d\r\n", res);
//	}
//		return res;
//}

int sd_get_space_kb(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 800166a:	f107 0208 	add.w	r2, r7, #8
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <sd_get_space_kb+0x60>)
 8001674:	f013 f8e4 	bl	8014840 <f_getfree>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <sd_get_space_kb+0x22>
 8001682:	7ffb      	ldrb	r3, [r7, #31]
 8001684:	e01a      	b.n	80016bc <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	3b02      	subs	r3, #2
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	8952      	ldrh	r2, [r2, #10]
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	895b      	ldrh	r3, [r3, #10]
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	6939      	ldr	r1, [r7, #16]
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <sd_get_space_kb+0x64>)
 80016b6:	f013 fc33 	bl	8014f20 <iprintf>
	return FR_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000690 	.word	0x20000690
 80016c8:	08016efc 	.word	0x08016efc

080016cc <sd_mount>:

int sd_mount(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 80016d2:	4829      	ldr	r0, [pc, #164]	@ (8001778 <sd_mount+0xac>)
 80016d4:	f013 fc8c 	bl	8014ff0 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 80016d8:	4928      	ldr	r1, [pc, #160]	@ (800177c <sd_mount+0xb0>)
 80016da:	4829      	ldr	r0, [pc, #164]	@ (8001780 <sd_mount+0xb4>)
 80016dc:	f013 f9b2 	bl	8014a44 <FATFS_LinkDriver>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 80016e6:	4827      	ldr	r0, [pc, #156]	@ (8001784 <sd_mount+0xb8>)
 80016e8:	f013 fc82 	bl	8014ff0 <puts>
		return FR_DISK_ERR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e03f      	b.n	8001770 <sd_mount+0xa4>
	}

	printf("Initializing disk...\r\n");
 80016f0:	4825      	ldr	r0, [pc, #148]	@ (8001788 <sd_mount+0xbc>)
 80016f2:	f013 fc7d 	bl	8014ff0 <puts>
	DSTATUS stat = disk_initialize(0);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f00f fe8c 	bl	8011414 <disk_initialize>
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <sd_mount+0x54>
		printf("disk_initialize failed: 0x%02X\n", stat);
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	4619      	mov	r1, r3
 800170a:	4820      	ldr	r0, [pc, #128]	@ (800178c <sd_mount+0xc0>)
 800170c:	f013 fc08 	bl	8014f20 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8001710:	481f      	ldr	r0, [pc, #124]	@ (8001790 <sd_mount+0xc4>)
 8001712:	f013 fc6d 	bl	8014ff0 <puts>
		printf("Make sure \"MX_FATFS_Init\" is not being called in the main function\n"\
 8001716:	481f      	ldr	r0, [pc, #124]	@ (8001794 <sd_mount+0xc8>)
 8001718:	f013 fc6a 	bl	8014ff0 <puts>
				"You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n");
		return FR_NOT_READY;
 800171c:	2303      	movs	r3, #3
 800171e:	e027      	b.n	8001770 <sd_mount+0xa4>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 8001720:	4916      	ldr	r1, [pc, #88]	@ (800177c <sd_mount+0xb0>)
 8001722:	481d      	ldr	r0, [pc, #116]	@ (8001798 <sd_mount+0xcc>)
 8001724:	f013 fbfc 	bl	8014f20 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	4914      	ldr	r1, [pc, #80]	@ (800177c <sd_mount+0xb0>)
 800172c:	481b      	ldr	r0, [pc, #108]	@ (800179c <sd_mount+0xd0>)
 800172e:	f012 f95b 	bl	80139e8 <f_mount>
 8001732:	4603      	mov	r3, r0
 8001734:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d113      	bne.n	8001764 <sd_mount+0x98>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 800173c:	490f      	ldr	r1, [pc, #60]	@ (800177c <sd_mount+0xb0>)
 800173e:	4818      	ldr	r0, [pc, #96]	@ (80017a0 <sd_mount+0xd4>)
 8001740:	f013 fbee 	bl	8014f20 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8001744:	f000 fac2 	bl	8001ccc <sd_is_sdhc>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <sd_mount+0x86>
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <sd_mount+0xd8>)
 8001750:	e000      	b.n	8001754 <sd_mount+0x88>
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <sd_mount+0xdc>)
 8001754:	4619      	mov	r1, r3
 8001756:	4815      	ldr	r0, [pc, #84]	@ (80017ac <sd_mount+0xe0>)
 8001758:	f013 fbe2 	bl	8014f20 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 800175c:	f7ff ff82 	bl	8001664 <sd_get_space_kb>
		return FR_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e005      	b.n	8001770 <sd_mount+0xa4>
//		}
//		return res;
//	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	4619      	mov	r1, r3
 8001768:	4811      	ldr	r0, [pc, #68]	@ (80017b0 <sd_mount+0xe4>)
 800176a:	f013 fbd9 	bl	8014f20 <iprintf>
	return res;
 800176e:	79bb      	ldrb	r3, [r7, #6]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08016f20 	.word	0x08016f20
 800177c:	20000690 	.word	0x20000690
 8001780:	08017790 	.word	0x08017790
 8001784:	08016f38 	.word	0x08016f38
 8001788:	08016f50 	.word	0x08016f50
 800178c:	08016f68 	.word	0x08016f68
 8001790:	08016f88 	.word	0x08016f88
 8001794:	08016fc0 	.word	0x08016fc0
 8001798:	08017078 	.word	0x08017078
 800179c:	20000694 	.word	0x20000694
 80017a0:	08017094 	.word	0x08017094
 80017a4:	080170bc 	.word	0x080170bc
 80017a8:	080170c8 	.word	0x080170c8
 80017ac:	080170d0 	.word	0x080170d0
 80017b0:	080170e0 	.word	0x080170e0

080017b4 <sd_unmount>:


int sd_unmount(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	490a      	ldr	r1, [pc, #40]	@ (80017e8 <sd_unmount+0x34>)
 80017be:	2000      	movs	r0, #0
 80017c0:	f012 f912 	bl	80139e8 <f_mount>
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <sd_unmount+0x1e>
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <sd_unmount+0x38>)
 80017d0:	e000      	b.n	80017d4 <sd_unmount+0x20>
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <sd_unmount+0x3c>)
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <sd_unmount+0x40>)
 80017d8:	f013 fba2 	bl	8014f20 <iprintf>
	return res;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000690 	.word	0x20000690
 80017ec:	08017100 	.word	0x08017100
 80017f0:	08017104 	.word	0x08017104
 80017f4:	0801710c 	.word	0x0801710c

080017f8 <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80017fe:	af00      	add	r7, sp, #0
 8001800:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001804:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001808:	6018      	str	r0, [r3, #0]
 800180a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800180e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001812:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001814:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001818:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800181c:	f107 000c 	add.w	r0, r7, #12
 8001820:	220a      	movs	r2, #10
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	f012 f926 	bl	8013a74 <f_open>
 8001828:	4603      	mov	r3, r0
 800182a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 800182e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <sd_write_file+0x44>
 8001836:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800183a:	e03e      	b.n	80018ba <sd_write_file+0xc2>

	res = f_write(&file, text, strlen(text), &bw);
 800183c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001840:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	f7fe fcd5 	bl	80001f4 <strlen>
 800184a:	4604      	mov	r4, r0
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001854:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001858:	f107 000c 	add.w	r0, r7, #12
 800185c:	4622      	mov	r2, r4
 800185e:	6809      	ldr	r1, [r1, #0]
 8001860:	f012 fad2 	bl	8013e08 <f_write>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	4618      	mov	r0, r3
 8001870:	f012 fcbd 	bl	80141ee <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 8001874:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001878:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001882:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	480e      	ldr	r0, [pc, #56]	@ (80018c4 <sd_write_file+0xcc>)
 800188a:	f013 fb49 	bl	8014f20 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 800188e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <sd_write_file+0xbc>
 8001896:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800189a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f7fe fca8 	bl	80001f4 <strlen>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018aa:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <sd_write_file+0xc0>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <sd_write_file+0xc2>
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	08017124 	.word	0x08017124

080018c8 <sd_append_file>:

int sd_append_file(const char *filename, const char *text) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018d4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018d8:	6018      	str	r0, [r3, #0]
 80018da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018de:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018e2:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 80018e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018e8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018ec:	f107 000c 	add.w	r0, r7, #12
 80018f0:	2212      	movs	r2, #18
 80018f2:	6819      	ldr	r1, [r3, #0]
 80018f4:	f012 f8be 	bl	8013a74 <f_open>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 80018fe:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <sd_append_file+0x44>
 8001906:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800190a:	e058      	b.n	80019be <sd_append_file+0xf6>

	res = f_lseek(&file, f_size(&file));
 800190c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001910:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f012 fc90 	bl	8014242 <f_lseek>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) {
 8001928:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <sd_append_file+0x78>
		f_close(&file);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4618      	mov	r0, r3
 8001936:	f012 fc5a 	bl	80141ee <f_close>
		return res;
 800193a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800193e:	e03e      	b.n	80019be <sd_append_file+0xf6>
	}

	res = f_write(&file, text, strlen(text), &bw);
 8001940:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001944:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f7fe fc53 	bl	80001f4 <strlen>
 800194e:	4604      	mov	r4, r0
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001958:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 800195c:	f107 000c 	add.w	r0, r7, #12
 8001960:	4622      	mov	r2, r4
 8001962:	6809      	ldr	r1, [r1, #0]
 8001964:	f012 fa50 	bl	8013e08 <f_write>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4618      	mov	r0, r3
 8001974:	f012 fc3b 	bl	80141ee <f_close>
	printf("Appended %u bytes to %s\r\n", bw, filename);
 8001978:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800197c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001986:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	480e      	ldr	r0, [pc, #56]	@ (80019c8 <sd_append_file+0x100>)
 800198e:	f013 fac7 	bl	8014f20 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8001992:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10e      	bne.n	80019b8 <sd_append_file+0xf0>
 800199a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800199e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f7fe fc26 	bl	80001f4 <strlen>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019ae:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <sd_append_file+0xf4>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <sd_append_file+0xf6>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	0801713c 	.word	0x0801713c

080019cc <sd_list_directory_recursive>:
	FRESULT res = f_mkdir(path);
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

void sd_list_directory_recursive(const char *path, int depth) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0fa      	sub	sp, #488	@ 0x1e8
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80019d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80019da:	6018      	str	r0, [r3, #0]
 80019dc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80019e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80019e4:	6019      	str	r1, [r3, #0]
	DIR dir;
	FILINFO fno;
	FRESULT res = f_opendir(&dir, path);
 80019e6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80019ea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80019ee:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4610      	mov	r0, r2
 80019f6:	f012 fe2d 	bl	8014654 <f_opendir>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
	if (res != FR_OK) {
 8001a00:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00f      	beq.n	8001a28 <sd_list_directory_recursive+0x5c>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8001a08:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0059      	lsls	r1, r3, #1
 8001a14:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a18:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b18 <sd_list_directory_recursive+0x14c>)
 8001a20:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <sd_list_directory_recursive+0x150>)
 8001a22:	f013 fa7d 	bl	8014f20 <iprintf>
 8001a26:	e072      	b.n	8001b0e <sd_list_directory_recursive+0x142>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8001a28:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001a2c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f012 feb7 	bl	80147a6 <f_readdir>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
		if (res != FR_OK || fno.fname[0] == 0) break;
 8001a3e:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d15e      	bne.n	8001b04 <sd_list_directory_recursive+0x138>
 8001a46:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a4e:	7d9b      	ldrb	r3, [r3, #22]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d057      	beq.n	8001b04 <sd_list_directory_recursive+0x138>

		const char *name = (*fno.fname) ? fno.fname : fno.fname;
 8001a54:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001a58:	3316      	adds	r3, #22
 8001a5a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

		if (fno.fattrib & AM_DIR) {
 8001a5e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a66:	7a1b      	ldrb	r3, [r3, #8]
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d036      	beq.n	8001ade <sd_list_directory_recursive+0x112>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8001a70:	492b      	ldr	r1, [pc, #172]	@ (8001b20 <sd_list_directory_recursive+0x154>)
 8001a72:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001a76:	f7fe fbb3 	bl	80001e0 <strcmp>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0d3      	beq.n	8001a28 <sd_list_directory_recursive+0x5c>
 8001a80:	4928      	ldr	r1, [pc, #160]	@ (8001b24 <sd_list_directory_recursive+0x158>)
 8001a82:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001a86:	f7fe fbab 	bl	80001e0 <strcmp>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0cb      	beq.n	8001a28 <sd_list_directory_recursive+0x5c>
				printf("%*s📁 %s\r\n", depth * 2, "", name);
 8001a90:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0059      	lsls	r1, r3, #1
 8001a9c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <sd_list_directory_recursive+0x14c>)
 8001aa2:	4821      	ldr	r0, [pc, #132]	@ (8001b28 <sd_list_directory_recursive+0x15c>)
 8001aa4:	f013 fa3c 	bl	8014f20 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 8001aa8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001aac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ab0:	f107 000c 	add.w	r0, r7, #12
 8001ab4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ab8:	9200      	str	r2, [sp, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b2c <sd_list_directory_recursive+0x160>)
 8001abe:	2180      	movs	r1, #128	@ 0x80
 8001ac0:	f013 fa9e 	bl	8015000 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8001ac4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ac8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff78 	bl	80019cc <sd_list_directory_recursive>
 8001adc:	e7a4      	b.n	8001a28 <sd_list_directory_recursive+0x5c>
			}
		} else {
			printf("%*s📄 %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8001ade:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ae2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0059      	lsls	r1, r3, #1
 8001aea:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001aee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001afa:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <sd_list_directory_recursive+0x14c>)
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <sd_list_directory_recursive+0x164>)
 8001afe:	f013 fa0f 	bl	8014f20 <iprintf>
	while (1) {
 8001b02:	e791      	b.n	8001a28 <sd_list_directory_recursive+0x5c>
		}
	}
	f_closedir(&dir);
 8001b04:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f012 fe26 	bl	801475a <f_closedir>
}
 8001b0e:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	08017260 	.word	0x08017260
 8001b1c:	08017264 	.word	0x08017264
 8001b20:	08017280 	.word	0x08017280
 8001b24:	08017284 	.word	0x08017284
 8001b28:	08017288 	.word	0x08017288
 8001b2c:	08017298 	.word	0x08017298
 8001b30:	080172a0 	.word	0x080172a0

08001b34 <sd_list_files>:

void sd_list_files(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	printf("📂 Files on SD Card:\r\n");
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <sd_list_files+0x1c>)
 8001b3a:	f013 fa59 	bl	8014ff0 <puts>
	sd_list_directory_recursive(sd_path, 0);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <sd_list_files+0x20>)
 8001b42:	f7ff ff43 	bl	80019cc <sd_list_directory_recursive>
	printf("\r\n\r\n");
 8001b46:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <sd_list_files+0x24>)
 8001b48:	f013 fa52 	bl	8014ff0 <puts>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	080172bc 	.word	0x080172bc
 8001b54:	20000690 	.word	0x20000690
 8001b58:	080172d4 	.word	0x080172d4

08001b5c <SD_TransmitByte>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi1) dma_rx_done = 1;
}
#endif

static void SD_TransmitByte(uint8_t data) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001b66:	1df9      	adds	r1, r7, #7
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <SD_TransmitByte+0x20>)
 8001b70:	f00d f9ff 	bl	800ef72 <HAL_SPI_Transmit>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200002a0 	.word	0x200002a0

08001b80 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001b86:	23ff      	movs	r3, #255	@ 0xff
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8001b8e:	1dba      	adds	r2, r7, #6
 8001b90:	1df9      	adds	r1, r7, #7
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	4804      	ldr	r0, [pc, #16]	@ (8001bac <SD_ReceiveByte+0x2c>)
 8001b9c:	f00d fb2d 	bl	800f1fa <HAL_SPI_TransmitReceive>
    return data;
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002a0 	.word	0x200002a0

08001bb0 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
    while (!dma_tx_done);
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8001bbc:	887a      	ldrh	r2, [r7, #2]
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <SD_TransmitBuffer+0x24>)
 8001bc6:	f00d f9d4 	bl	800ef72 <HAL_SPI_Transmit>
#endif
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200002a0 	.word	0x200002a0

08001bd8 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
    dma_rx_done = 0;
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
    while (!dma_rx_done);
#else
    for (uint16_t i = 0; i < len; i++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	81fb      	strh	r3, [r7, #14]
 8001be8:	e009      	b.n	8001bfe <SD_ReceiveBuffer+0x26>
        buffer[i] = SD_ReceiveByte();
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	18d4      	adds	r4, r2, r3
 8001bf0:	f7ff ffc6 	bl	8001b80 <SD_ReceiveByte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	81fb      	strh	r3, [r7, #14]
 8001bfe:	89fa      	ldrh	r2, [r7, #14]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3f1      	bcc.n	8001bea <SD_ReceiveBuffer+0x12>
    }
#endif
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8001c16:	f00a fb7f 	bl	800c318 <HAL_GetTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c20:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8001c22:	f7ff ffad 	bl	8001b80 <SD_ReceiveByte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	2bff      	cmp	r3, #255	@ 0xff
 8001c2e:	d101      	bne.n	8001c34 <SD_WaitReady+0x24>
 8001c30:	2300      	movs	r3, #0
 8001c32:	e006      	b.n	8001c42 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001c34:	f00a fb70 	bl	800c318 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d8f0      	bhi.n	8001c22 <SD_WaitReady+0x12>
    return SD_ERROR;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	6039      	str	r1, [r7, #0]
 8001c54:	71fb      	strb	r3, [r7, #7]
 8001c56:	4613      	mov	r3, r2
 8001c58:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8001c5a:	23ff      	movs	r3, #255	@ 0xff
 8001c5c:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8001c5e:	f7ff ffd7 	bl	8001c10 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff76 	bl	8001b5c <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	0e1b      	lsrs	r3, r3, #24
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff70 	bl	8001b5c <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff6a 	bl	8001b5c <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff64 	bl	8001b5c <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5b 	bl	8001b5c <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001ca6:	f7ff ff6b 	bl	8001b80 <SD_ReceiveByte>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da05      	bge.n	8001cc2 <SD_SendCommand+0x78>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f1      	bne.n	8001ca6 <SD_SendCommand+0x5c>

    return response;
 8001cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    return sdhc;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <sd_is_sdhc+0x14>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200008c8 	.word	0x200008c8

08001ce4 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8001cea:	2201      	movs	r2, #1
 8001cec:	2120      	movs	r1, #32
 8001cee:	4873      	ldr	r0, [pc, #460]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001cf0:	f00a ff02 	bl	800caf8 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e005      	b.n	8001d06 <SD_SPI_Init+0x22>
 8001cfa:	20ff      	movs	r0, #255	@ 0xff
 8001cfc:	f7ff ff2e 	bl	8001b5c <SD_TransmitByte>
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	3301      	adds	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	d9f6      	bls.n	8001cfa <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2120      	movs	r1, #32
 8001d10:	486a      	ldr	r0, [pc, #424]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001d12:	f00a fef1 	bl	800caf8 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8001d16:	2295      	movs	r2, #149	@ 0x95
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff ff95 	bl	8001c4a <SD_SendCommand>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8001d24:	2201      	movs	r2, #1
 8001d26:	2120      	movs	r1, #32
 8001d28:	4864      	ldr	r0, [pc, #400]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001d2a:	f00a fee5 	bl	800caf8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001d2e:	20ff      	movs	r0, #255	@ 0xff
 8001d30:	f7ff ff14 	bl	8001b5c <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d001      	beq.n	8001d3e <SD_SPI_Init+0x5a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0ba      	b.n	8001eb4 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2120      	movs	r1, #32
 8001d42:	485e      	ldr	r0, [pc, #376]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001d44:	f00a fed8 	bl	800caf8 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8001d48:	2287      	movs	r2, #135	@ 0x87
 8001d4a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001d4e:	2008      	movs	r0, #8
 8001d50:	f7ff ff7b 	bl	8001c4a <SD_SendCommand>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e00c      	b.n	8001d78 <SD_SPI_Init+0x94>
 8001d5e:	7bfc      	ldrb	r4, [r7, #15]
 8001d60:	f7ff ff0e 	bl	8001b80 <SD_ReceiveByte>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	f104 0310 	add.w	r3, r4, #16
 8001d6c:	443b      	add	r3, r7
 8001d6e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	3301      	adds	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d9ef      	bls.n	8001d5e <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2120      	movs	r1, #32
 8001d82:	484e      	ldr	r0, [pc, #312]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001d84:	f00a feb8 	bl	800caf8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001d88:	20ff      	movs	r0, #255	@ 0xff
 8001d8a:	f7ff fee7 	bl	8001b5c <SD_TransmitByte>

    sdhc = 0;
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <SD_SPI_Init+0x1dc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001d94:	f00a fac0 	bl	800c318 <HAL_GetTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d9e:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d15a      	bne.n	8001e5c <SD_SPI_Init+0x178>
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d157      	bne.n	8001e5c <SD_SPI_Init+0x178>
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2baa      	cmp	r3, #170	@ 0xaa
 8001db0:	d154      	bne.n	8001e5c <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001db2:	2200      	movs	r2, #0
 8001db4:	2120      	movs	r1, #32
 8001db6:	4841      	ldr	r0, [pc, #260]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001db8:	f00a fe9e 	bl	800caf8 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001dbc:	22ff      	movs	r2, #255	@ 0xff
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2037      	movs	r0, #55	@ 0x37
 8001dc2:	f7ff ff42 	bl	8001c4a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001dc6:	22ff      	movs	r2, #255	@ 0xff
 8001dc8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dcc:	2029      	movs	r0, #41	@ 0x29
 8001dce:	f7ff ff3c 	bl	8001c4a <SD_SendCommand>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2120      	movs	r1, #32
 8001dda:	4838      	ldr	r0, [pc, #224]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001ddc:	f00a fe8c 	bl	800caf8 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001de0:	20ff      	movs	r0, #255	@ 0xff
 8001de2:	f7ff febb 	bl	8001b5c <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <SD_SPI_Init+0x114>
 8001dec:	f00a fa94 	bl	800c318 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d8dc      	bhi.n	8001db2 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SD_SPI_Init+0x11e>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e058      	b.n	8001eb4 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8001e02:	2200      	movs	r2, #0
 8001e04:	2120      	movs	r1, #32
 8001e06:	482d      	ldr	r0, [pc, #180]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001e08:	f00a fe76 	bl	800caf8 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8001e0c:	22ff      	movs	r2, #255	@ 0xff
 8001e0e:	2100      	movs	r1, #0
 8001e10:	203a      	movs	r0, #58	@ 0x3a
 8001e12:	f7ff ff1a 	bl	8001c4a <SD_SendCommand>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e00c      	b.n	8001e3a <SD_SPI_Init+0x156>
 8001e20:	7bfc      	ldrb	r4, [r7, #15]
 8001e22:	f7ff fead 	bl	8001b80 <SD_ReceiveByte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f104 0310 	add.w	r3, r4, #16
 8001e2e:	443b      	add	r3, r7
 8001e30:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d9ef      	bls.n	8001e20 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8001e40:	2201      	movs	r2, #1
 8001e42:	2120      	movs	r1, #32
 8001e44:	481d      	ldr	r0, [pc, #116]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001e46:	f00a fe57 	bl	800caf8 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001e4a:	783b      	ldrb	r3, [r7, #0]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02a      	beq.n	8001eaa <SD_SPI_Init+0x1c6>
 8001e54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <SD_SPI_Init+0x1dc>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001e5a:	e026      	b.n	8001eaa <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2120      	movs	r1, #32
 8001e60:	4816      	ldr	r0, [pc, #88]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001e62:	f00a fe49 	bl	800caf8 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001e66:	22ff      	movs	r2, #255	@ 0xff
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2037      	movs	r0, #55	@ 0x37
 8001e6c:	f7ff feed 	bl	8001c4a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8001e70:	22ff      	movs	r2, #255	@ 0xff
 8001e72:	2100      	movs	r1, #0
 8001e74:	2029      	movs	r0, #41	@ 0x29
 8001e76:	f7ff fee8 	bl	8001c4a <SD_SendCommand>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2120      	movs	r1, #32
 8001e82:	480e      	ldr	r0, [pc, #56]	@ (8001ebc <SD_SPI_Init+0x1d8>)
 8001e84:	f00a fe38 	bl	800caf8 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001e88:	20ff      	movs	r0, #255	@ 0xff
 8001e8a:	f7ff fe67 	bl	8001b5c <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <SD_SPI_Init+0x1bc>
 8001e94:	f00a fa40 	bl	800c318 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d8dd      	bhi.n	8001e5c <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <SD_SPI_Init+0x1c8>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e004      	b.n	8001eb4 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001eaa:	bf00      	nop
    }

    card_initialized = 1;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <SD_SPI_Init+0x1e0>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	200008c8 	.word	0x200008c8
 8001ec4:	200008c9 	.word	0x200008c9

08001ec8 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <SD_ReadBlocks+0x16>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e054      	b.n	8001f88 <SD_ReadBlocks+0xc0>

    if (count == 1) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d14b      	bne.n	8001f7c <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <SD_ReadBlocks+0xc8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <SD_ReadBlocks+0x2a>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	025b      	lsls	r3, r3, #9
 8001ef0:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4827      	ldr	r0, [pc, #156]	@ (8001f94 <SD_ReadBlocks+0xcc>)
 8001ef8:	f00a fdfe 	bl	800caf8 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001efc:	22ff      	movs	r2, #255	@ 0xff
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	2011      	movs	r0, #17
 8001f02:	f7ff fea2 	bl	8001c4a <SD_SendCommand>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2120      	movs	r1, #32
 8001f10:	4820      	ldr	r0, [pc, #128]	@ (8001f94 <SD_ReadBlocks+0xcc>)
 8001f12:	f00a fdf1 	bl	800caf8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e036      	b.n	8001f88 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001f1a:	f00a f9fd 	bl	800c318 <HAL_GetTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	33c8      	adds	r3, #200	@ 0xc8
 8001f22:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001f24:	f7ff fe2c 	bl	8001b80 <SD_ReceiveByte>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f30:	d006      	beq.n	8001f40 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001f32:	f00a f9f1 	bl	800c318 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d8f2      	bhi.n	8001f24 <SD_ReadBlocks+0x5c>
 8001f3e:	e000      	b.n	8001f42 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8001f40:	bf00      	nop
        if (token != 0xFE) {
 8001f42:	7cfb      	ldrb	r3, [r7, #19]
 8001f44:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f46:	d006      	beq.n	8001f56 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <SD_ReadBlocks+0xcc>)
 8001f4e:	f00a fdd3 	bl	800caf8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e018      	b.n	8001f88 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8001f56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff fe3c 	bl	8001bd8 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8001f60:	f7ff fe0e 	bl	8001b80 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001f64:	f7ff fe0c 	bl	8001b80 <SD_ReceiveByte>
        SD_CS_HIGH();
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	4809      	ldr	r0, [pc, #36]	@ (8001f94 <SD_ReadBlocks+0xcc>)
 8001f6e:	f00a fdc3 	bl	800caf8 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001f72:	20ff      	movs	r0, #255	@ 0xff
 8001f74:	f7ff fdf2 	bl	8001b5c <SD_TransmitByte>
        return SD_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e005      	b.n	8001f88 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f809 	bl	8001f98 <SD_ReadMultiBlocks>
 8001f86:	4603      	mov	r3, r0
    }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200008c8 	.word	0x200008c8
 8001f94:	40020400 	.word	0x40020400

08001f98 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <SD_ReadMultiBlocks+0x16>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e058      	b.n	8002060 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <SD_ReadMultiBlocks+0xd0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <SD_ReadMultiBlocks+0x24>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	482a      	ldr	r0, [pc, #168]	@ (800206c <SD_ReadMultiBlocks+0xd4>)
 8001fc2:	f00a fd99 	bl	800caf8 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001fc6:	22ff      	movs	r2, #255	@ 0xff
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	2012      	movs	r0, #18
 8001fcc:	f7ff fe3d 	bl	8001c4a <SD_SendCommand>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d031      	beq.n	800203a <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2120      	movs	r1, #32
 8001fda:	4824      	ldr	r0, [pc, #144]	@ (800206c <SD_ReadMultiBlocks+0xd4>)
 8001fdc:	f00a fd8c 	bl	800caf8 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e03d      	b.n	8002060 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001fe4:	f00a f998 	bl	800c318 <HAL_GetTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	33c8      	adds	r3, #200	@ 0xc8
 8001fec:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001fee:	f7ff fdc7 	bl	8001b80 <SD_ReceiveByte>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ffa:	d006      	beq.n	800200a <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001ffc:	f00a f98c 	bl	800c318 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4293      	cmp	r3, r2
 8002006:	d8f2      	bhi.n	8001fee <SD_ReadMultiBlocks+0x56>
 8002008:	e000      	b.n	800200c <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 800200a:	bf00      	nop

        if (token != 0xFE) {
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002010:	d006      	beq.n	8002020 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8002012:	2201      	movs	r2, #1
 8002014:	2120      	movs	r1, #32
 8002016:	4815      	ldr	r0, [pc, #84]	@ (800206c <SD_ReadMultiBlocks+0xd4>)
 8002018:	f00a fd6e 	bl	800caf8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e01f      	b.n	8002060 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8002020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fdd7 	bl	8001bd8 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 800202a:	f7ff fda9 	bl	8001b80 <SD_ReceiveByte>
        SD_ReceiveByte();
 800202e:	f7ff fda7 	bl	8001b80 <SD_ReceiveByte>

        buff += 512;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002038:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1cf      	bne.n	8001fe4 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8002044:	22ff      	movs	r2, #255	@ 0xff
 8002046:	2100      	movs	r1, #0
 8002048:	200c      	movs	r0, #12
 800204a:	f7ff fdfe 	bl	8001c4a <SD_SendCommand>
    SD_CS_HIGH();
 800204e:	2201      	movs	r2, #1
 8002050:	2120      	movs	r1, #32
 8002052:	4806      	ldr	r0, [pc, #24]	@ (800206c <SD_ReadMultiBlocks+0xd4>)
 8002054:	f00a fd50 	bl	800caf8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8002058:	20ff      	movs	r0, #255	@ 0xff
 800205a:	f7ff fd7f 	bl	8001b5c <SD_TransmitByte>

    return SD_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200008c8 	.word	0x200008c8
 800206c:	40020400 	.word	0x40020400

08002070 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <SD_WriteBlocks+0x16>
 8002082:	2301      	movs	r3, #1
 8002084:	e051      	b.n	800212a <SD_WriteBlocks+0xba>

    if (count == 1) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d148      	bne.n	800211e <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <SD_WriteBlocks+0xc4>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <SD_WriteBlocks+0x2a>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 800209a:	2200      	movs	r2, #0
 800209c:	2120      	movs	r1, #32
 800209e:	4826      	ldr	r0, [pc, #152]	@ (8002138 <SD_WriteBlocks+0xc8>)
 80020a0:	f00a fd2a 	bl	800caf8 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 80020a4:	22ff      	movs	r2, #255	@ 0xff
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	2018      	movs	r0, #24
 80020aa:	f7ff fdce 	bl	8001c4a <SD_SendCommand>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 80020b4:	2201      	movs	r2, #1
 80020b6:	2120      	movs	r1, #32
 80020b8:	481f      	ldr	r0, [pc, #124]	@ (8002138 <SD_WriteBlocks+0xc8>)
 80020ba:	f00a fd1d 	bl	800caf8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e033      	b.n	800212a <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 80020c2:	20fe      	movs	r0, #254	@ 0xfe
 80020c4:	f7ff fd4a 	bl	8001b5c <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 80020c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fd6f 	bl	8001bb0 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 80020d2:	20ff      	movs	r0, #255	@ 0xff
 80020d4:	f7ff fd42 	bl	8001b5c <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80020d8:	20ff      	movs	r0, #255	@ 0xff
 80020da:	f7ff fd3f 	bl	8001b5c <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80020de:	f7ff fd4f 	bl	8001b80 <SD_ReceiveByte>
 80020e2:	4603      	mov	r3, r0
 80020e4:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d006      	beq.n	80020fe <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 80020f0:	2201      	movs	r2, #1
 80020f2:	2120      	movs	r1, #32
 80020f4:	4810      	ldr	r0, [pc, #64]	@ (8002138 <SD_WriteBlocks+0xc8>)
 80020f6:	f00a fcff 	bl	800caf8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e015      	b.n	800212a <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 80020fe:	bf00      	nop
 8002100:	f7ff fd3e 	bl	8001b80 <SD_ReceiveByte>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0fa      	beq.n	8002100 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 800210a:	2201      	movs	r2, #1
 800210c:	2120      	movs	r1, #32
 800210e:	480a      	ldr	r0, [pc, #40]	@ (8002138 <SD_WriteBlocks+0xc8>)
 8002110:	f00a fcf2 	bl	800caf8 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002114:	20ff      	movs	r0, #255	@ 0xff
 8002116:	f7ff fd21 	bl	8001b5c <SD_TransmitByte>

        return SD_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e005      	b.n	800212a <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f80a 	bl	800213c <SD_WriteMultiBlocks>
 8002128:	4603      	mov	r3, r0
    }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200008c8 	.word	0x200008c8
 8002138:	40020400 	.word	0x40020400

0800213c <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <SD_WriteMultiBlocks+0x16>
 800214e:	2301      	movs	r3, #1
 8002150:	e059      	b.n	8002206 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8002152:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <SD_WriteMultiBlocks+0xd4>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <SD_WriteMultiBlocks+0x24>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002160:	2200      	movs	r2, #0
 8002162:	2120      	movs	r1, #32
 8002164:	482b      	ldr	r0, [pc, #172]	@ (8002214 <SD_WriteMultiBlocks+0xd8>)
 8002166:	f00a fcc7 	bl	800caf8 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	2019      	movs	r0, #25
 8002170:	f7ff fd6b 	bl	8001c4a <SD_SendCommand>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d02e      	beq.n	80021d8 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 800217a:	2201      	movs	r2, #1
 800217c:	2120      	movs	r1, #32
 800217e:	4825      	ldr	r0, [pc, #148]	@ (8002214 <SD_WriteMultiBlocks+0xd8>)
 8002180:	f00a fcba 	bl	800caf8 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e03e      	b.n	8002206 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8002188:	20fc      	movs	r0, #252	@ 0xfc
 800218a:	f7ff fce7 	bl	8001b5c <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 800218e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff fd0c 	bl	8001bb0 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8002198:	20ff      	movs	r0, #255	@ 0xff
 800219a:	f7ff fcdf 	bl	8001b5c <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 800219e:	20ff      	movs	r0, #255	@ 0xff
 80021a0:	f7ff fcdc 	bl	8001b5c <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80021a4:	f7ff fcec 	bl	8001b80 <SD_ReceiveByte>
 80021a8:	4603      	mov	r3, r0
 80021aa:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d006      	beq.n	80021c4 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 80021b6:	2201      	movs	r2, #1
 80021b8:	2120      	movs	r1, #32
 80021ba:	4816      	ldr	r0, [pc, #88]	@ (8002214 <SD_WriteMultiBlocks+0xd8>)
 80021bc:	f00a fc9c 	bl	800caf8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e020      	b.n	8002206 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 80021c4:	bf00      	nop
 80021c6:	f7ff fcdb 	bl	8001b80 <SD_ReceiveByte>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0fa      	beq.n	80021c6 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021d6:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1d2      	bne.n	8002188 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 80021e2:	20fd      	movs	r0, #253	@ 0xfd
 80021e4:	f7ff fcba 	bl	8001b5c <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 80021e8:	bf00      	nop
 80021ea:	f7ff fcc9 	bl	8001b80 <SD_ReceiveByte>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0fa      	beq.n	80021ea <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 80021f4:	2201      	movs	r2, #1
 80021f6:	2120      	movs	r1, #32
 80021f8:	4806      	ldr	r0, [pc, #24]	@ (8002214 <SD_WriteMultiBlocks+0xd8>)
 80021fa:	f00a fc7d 	bl	800caf8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80021fe:	20ff      	movs	r0, #255	@ 0xff
 8002200:	f7ff fcac 	bl	8001b5c <SD_TransmitByte>

    return SD_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200008c8 	.word	0x200008c8
 8002214:	40020400 	.word	0x40020400

08002218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <HAL_MspInit+0x4c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <HAL_MspInit+0x4c>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222c:	6453      	str	r3, [r2, #68]	@ 0x44
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_MspInit+0x4c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <HAL_MspInit+0x4c>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_SPI_MspInit+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12b      	bne.n	80022e2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 8002294:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002298:	6453      	str	r3, [r2, #68]	@ 0x44
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022c2:	23e0      	movs	r3, #224	@ 0xe0
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d2:	2305      	movs	r3, #5
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_SPI_MspInit+0x8c>)
 80022de:	f00a f98b 	bl	800c5f8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40013000 	.word	0x40013000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000

080022f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <HAL_TIM_Base_MspInit+0x58>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11d      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_TIM_Base_MspInit+0x5c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <HAL_TIM_Base_MspInit+0x5c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6453      	str	r3, [r2, #68]	@ 0x44
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_TIM_Base_MspInit+0x5c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2018      	movs	r0, #24
 800232c:	f00a f8ff 	bl	800c52e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002330:	2018      	movs	r0, #24
 8002332:	f00a f918 	bl	800c566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	2019      	movs	r0, #25
 800233c:	f00a f8f7 	bl	800c52e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002340:	2019      	movs	r0, #25
 8002342:	f00a f910 	bl	800c566 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40023800 	.word	0x40023800

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <NMI_Handler+0x4>

08002360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <MemManage_Handler+0x4>

08002370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <UsageFault_Handler+0x4>

08002380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ae:	f009 ff9f 	bl	800c2f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023be:	f00d fa53 	bl	800f868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002f8 	.word	0x200002f8

080023cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023d2:	f00d fa49 	bl	800f868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002f8 	.word	0x200002f8

080023e0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <BSP_I2C1_Init+0x58>)
 80023ec:	4a13      	ldr	r2, [pc, #76]	@ (800243c <BSP_I2C1_Init+0x5c>)
 80023ee:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <BSP_I2C1_Init+0x60>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4912      	ldr	r1, [pc, #72]	@ (8002440 <BSP_I2C1_Init+0x60>)
 80023f8:	600a      	str	r2, [r1, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d117      	bne.n	800242e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <BSP_I2C1_Init+0x58>)
 8002400:	f00b fb78 	bl	800daf4 <HAL_I2C_GetState>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d111      	bne.n	800242e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800240a:	480b      	ldr	r0, [pc, #44]	@ (8002438 <BSP_I2C1_Init+0x58>)
 800240c:	f000 f936 	bl	800267c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002416:	4808      	ldr	r0, [pc, #32]	@ (8002438 <BSP_I2C1_Init+0x58>)
 8002418:	f000 f8fc 	bl	8002614 <MX_I2C1_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002422:	f06f 0307 	mvn.w	r3, #7
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800242e:	687b      	ldr	r3, [r7, #4]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200008cc 	.word	0x200008cc
 800243c:	40005400 	.word	0x40005400
 8002440:	20000920 	.word	0x20000920

08002444 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <BSP_I2C1_DeInit+0x48>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d014      	beq.n	8002480 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <BSP_I2C1_DeInit+0x48>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3b01      	subs	r3, #1
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <BSP_I2C1_DeInit+0x48>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <BSP_I2C1_DeInit+0x48>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002468:	4809      	ldr	r0, [pc, #36]	@ (8002490 <BSP_I2C1_DeInit+0x4c>)
 800246a:	f000 f951 	bl	8002710 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800246e:	4808      	ldr	r0, [pc, #32]	@ (8002490 <BSP_I2C1_DeInit+0x4c>)
 8002470:	f00a fca0 	bl	800cdb4 <HAL_I2C_DeInit>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800247a:	f06f 0307 	mvn.w	r3, #7
 800247e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000920 	.word	0x20000920
 8002490:	200008cc 	.word	0x200008cc

08002494 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	@ 0x28
 8002498:	af04      	add	r7, sp, #16
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	81fb      	strh	r3, [r7, #14]
 80024a2:	460b      	mov	r3, r1
 80024a4:	81bb      	strh	r3, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80024ae:	89ba      	ldrh	r2, [r7, #12]
 80024b0:	89f9      	ldrh	r1, [r7, #14]
 80024b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <BSP_I2C1_WriteReg+0x60>)
 80024c4:	f00a ffea 	bl	800d49c <HAL_I2C_Mem_Write>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80024ce:	4809      	ldr	r0, [pc, #36]	@ (80024f4 <BSP_I2C1_WriteReg+0x60>)
 80024d0:	f00b fb1e 	bl	800db10 <HAL_I2C_GetError>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d103      	bne.n	80024e2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80024da:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e002      	b.n	80024e8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80024e2:	f06f 0303 	mvn.w	r3, #3
 80024e6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80024e8:	697b      	ldr	r3, [r7, #20]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200008cc 	.word	0x200008cc

080024f8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af04      	add	r7, sp, #16
 80024fe:	60ba      	str	r2, [r7, #8]
 8002500:	461a      	mov	r2, r3
 8002502:	4603      	mov	r3, r0
 8002504:	81fb      	strh	r3, [r7, #14]
 8002506:	460b      	mov	r3, r1
 8002508:	81bb      	strh	r3, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002512:	89ba      	ldrh	r2, [r7, #12]
 8002514:	89f9      	ldrh	r1, [r7, #14]
 8002516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	480c      	ldr	r0, [pc, #48]	@ (8002558 <BSP_I2C1_ReadReg+0x60>)
 8002528:	f00b f8b2 	bl	800d690 <HAL_I2C_Mem_Read>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002532:	4809      	ldr	r0, [pc, #36]	@ (8002558 <BSP_I2C1_ReadReg+0x60>)
 8002534:	f00b faec 	bl	800db10 <HAL_I2C_GetError>
 8002538:	4603      	mov	r3, r0
 800253a:	2b04      	cmp	r3, #4
 800253c:	d103      	bne.n	8002546 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800253e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e002      	b.n	800254c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002546:	f06f 0303 	mvn.w	r3, #3
 800254a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800254c:	697b      	ldr	r3, [r7, #20]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200008cc 	.word	0x200008cc

0800255c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	80fb      	strh	r3, [r7, #6]
 8002568:	4613      	mov	r3, r2
 800256a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	88f9      	ldrh	r1, [r7, #6]
 8002574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	480b      	ldr	r0, [pc, #44]	@ (80025ac <BSP_I2C1_Send+0x50>)
 800257e:	f00a fc5d 	bl	800ce3c <HAL_I2C_Master_Transmit>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00c      	beq.n	80025a2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002588:	4808      	ldr	r0, [pc, #32]	@ (80025ac <BSP_I2C1_Send+0x50>)
 800258a:	f00b fac1 	bl	800db10 <HAL_I2C_GetError>
 800258e:	4603      	mov	r3, r0
 8002590:	2b04      	cmp	r3, #4
 8002592:	d003      	beq.n	800259c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002594:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e002      	b.n	80025a2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800259c:	f06f 0303 	mvn.w	r3, #3
 80025a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200008cc 	.word	0x200008cc

080025b0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	80fb      	strh	r3, [r7, #6]
 80025bc:	4613      	mov	r3, r2
 80025be:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	88f9      	ldrh	r1, [r7, #6]
 80025c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025cc:	9200      	str	r2, [sp, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	480b      	ldr	r0, [pc, #44]	@ (8002600 <BSP_I2C1_Recv+0x50>)
 80025d2:	f00a fd31 	bl	800d038 <HAL_I2C_Master_Receive>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80025dc:	4808      	ldr	r0, [pc, #32]	@ (8002600 <BSP_I2C1_Recv+0x50>)
 80025de:	f00b fa97 	bl	800db10 <HAL_I2C_GetError>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d003      	beq.n	80025f0 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80025e8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e002      	b.n	80025f6 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80025f0:	f06f 0303 	mvn.w	r3, #3
 80025f4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200008cc 	.word	0x200008cc

08002604 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002608:	f009 fe86 	bl	800c318 <HAL_GetTick>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a14      	ldr	r2, [pc, #80]	@ (8002674 <MX_I2C1_Init+0x60>)
 8002624:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a13      	ldr	r2, [pc, #76]	@ (8002678 <MX_I2C1_Init+0x64>)
 800262a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800263e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f00a fa67 	bl	800cb2c <HAL_I2C_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40005400 	.word	0x40005400
 8002678:	000186a0 	.word	0x000186a0

0800267c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <I2C1_MspInit+0x8c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <I2C1_MspInit+0x8c>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <I2C1_MspInit+0x8c>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80026a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a6:	2312      	movs	r3, #18
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80026b2:	2304      	movs	r3, #4
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4813      	ldr	r0, [pc, #76]	@ (800270c <I2C1_MspInit+0x90>)
 80026be:	f009 ff9b 	bl	800c5f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80026c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c8:	2312      	movs	r3, #18
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80026d4:	2304      	movs	r3, #4
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	480b      	ldr	r0, [pc, #44]	@ (800270c <I2C1_MspInit+0x90>)
 80026e0:	f009 ff8a 	bl	800c5f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <I2C1_MspInit+0x8c>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <I2C1_MspInit+0x8c>)
 80026ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <I2C1_MspInit+0x8c>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002700:	bf00      	nop
 8002702:	3728      	adds	r7, #40	@ 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	40020400 	.word	0x40020400

08002710 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002718:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <I2C1_MspDeInit+0x30>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <I2C1_MspDeInit+0x30>)
 800271e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002722:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002724:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002728:	4806      	ldr	r0, [pc, #24]	@ (8002744 <I2C1_MspDeInit+0x34>)
 800272a:	f00a f8e9 	bl	800c900 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800272e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002732:	4804      	ldr	r0, [pc, #16]	@ (8002744 <I2C1_MspDeInit+0x34>)
 8002734:	f00a f8e4 	bl	800c900 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400

08002748 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e00a      	b.n	8002770 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800275a:	f3af 8000 	nop.w
 800275e:	4601      	mov	r1, r0
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	60ba      	str	r2, [r7, #8]
 8002766:	b2ca      	uxtb	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	dbf0      	blt.n	800275a <_read+0x12>
  }

  return len;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027aa:	605a      	str	r2, [r3, #4]
  return 0;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <_isatty>:

int _isatty(int file)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f4:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <_sbrk+0x5c>)
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <_sbrk+0x60>)
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <_sbrk+0x64>)
 800280a:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <_sbrk+0x68>)
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d207      	bcs.n	800282c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800281c:	f012 fd5c 	bl	80152d8 <__errno>
 8002820:	4603      	mov	r3, r0
 8002822:	220c      	movs	r2, #12
 8002824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	e009      	b.n	8002840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <_sbrk+0x64>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	4a05      	ldr	r2, [pc, #20]	@ (8002850 <_sbrk+0x64>)
 800283c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20018000 	.word	0x20018000
 800284c:	00000400 	.word	0x00000400
 8002850:	20000924 	.word	0x20000924
 8002854:	20000f00 	.word	0x20000f00

08002858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <SystemInit+0x20>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <SystemInit+0x20>)
 8002864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800287c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002880:	f7ff ffea 	bl	8002858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002886:	490d      	ldr	r1, [pc, #52]	@ (80028bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800289c:	4c0a      	ldr	r4, [pc, #40]	@ (80028c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028aa:	f012 fd1b 	bl	80152e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ae:	f7fe fbbd 	bl	800102c <main>
  bx  lr    
 80028b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80028c0:	08017c98 	.word	0x08017c98
  ldr r2, =_sbss
 80028c4:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 80028c8:	20000efc 	.word	0x20000efc

080028cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC_IRQHandler>
	...

080028d0 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e088      	b.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	7b1a      	ldrb	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a36      	ldr	r2, [pc, #216]	@ (8002a08 <LIS2DUXS12_RegisterBusIO+0x138>)
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a35      	ldr	r2, [pc, #212]	@ (8002a0c <LIS2DUXS12_RegisterBusIO+0x13c>)
 8002936:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e053      	b.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4798      	blx	r3
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e049      	b.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d11c      	bne.n	80029ac <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002978:	2b00      	cmp	r3, #0
 800297a:	d140      	bne.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8f4 	bl	8002b6a <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 800298e:	2350      	movs	r3, #80	@ 0x50
 8002990:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	461a      	mov	r2, r3
 8002996:	2110      	movs	r1, #16
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fbf6 	bl	800318a <LIS2DUXS12_Write_Reg>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02c      	beq.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e028      	b.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10e      	bne.n	80029d2 <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11f      	bne.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8d3 	bl	8002b6a <LIS2DUXS12_ExitDeepPowerDownSPI>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d019      	beq.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e015      	b.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10c      	bne.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8ab 	bl	8002b40 <LIS2DUXS12_ExitDeepPowerDownI2C>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e002      	b.n	80029fe <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	08003645 	.word	0x08003645
 8002a0c:	0800367b 	.word	0x0800367b

08002a10 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d01f      	beq.n	8002a60 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3320      	adds	r3, #32
 8002a24:	f107 0214 	add.w	r2, r7, #20
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 fb0a 	bl	8004044 <lis2duxs12_i3c_configure_get>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e05c      	b.n	8002af6 <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8002a3c:	7d7b      	ldrb	r3, [r7, #21]
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3320      	adds	r3, #32
 8002a48:	f107 0214 	add.w	r2, r7, #20
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fac0 	bl	8003fd4 <lis2duxs12_i3c_configure_set>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e04a      	b.n	8002af6 <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002a60:	2100      	movs	r1, #0
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fbac 	bl	80031c0 <LIS2DUXS12_Set_Mem_Bank>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e040      	b.n	8002af6 <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3320      	adds	r3, #32
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fec4 	bl	8003808 <lis2duxs12_init_set>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e034      	b.n	8002af6 <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0020 	add.w	r0, r3, #32
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002aa4:	f001 fb33 	bl	800410e <lis2duxs12_fifo_mode_set>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	e020      	b.n	8002af6 <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <LIS2DUXS12_Init+0xf0>)
 8002ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	460a      	mov	r2, r1
 8002aca:	801a      	strh	r2, [r3, #0]
 8002acc:	460a      	mov	r2, r1
 8002ace:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3320      	adds	r3, #32
 8002ad4:	f107 0208 	add.w	r2, r7, #8
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ffe2 	bl	8003aa4 <lis2duxs12_mode_set>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e004      	b.n	8002af6 <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	42c80000 	.word	0x42c80000

08002b04 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8ad 	bl	8002c6c <LIS2DUXS12_ACC_Disable>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	e00c      	b.n	8002b38 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3320      	adds	r3, #32
 8002b4c:	f107 020f 	add.w	r2, r7, #15
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fe46 	bl	80037e4 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	2019      	movs	r0, #25
 8002b5e:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3320      	adds	r3, #32
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f960 	bl	8003e3c <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	2019      	movs	r0, #25
 8002b82:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3320      	adds	r3, #32
 8002b9c:	f107 020f 	add.w	r2, r7, #15
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fe1e 	bl	80037e4 <lis2duxs12_device_id_get>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e003      	b.n	8002bbc <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4a06      	ldr	r2, [pc, #24]	@ (8002c1c <LIS2DUXS12_GetCapabilities+0x58>)
 8002c04:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	44480000 	.word	0x44480000

08002c20 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e016      	b.n	8002c64 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c42:	4619      	mov	r1, r3
 8002c44:	eeb0 0a67 	vmov.f32	s0, s15
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fadb 	bl	8003204 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	e004      	b.n	8002c64 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e046      	b.n	8002d10 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f893 	bl	8002db4 <LIS2DUXS12_ACC_GetOutputDataRate>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	e03a      	b.n	8002d10 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8002c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002d18 <LIS2DUXS12_ACC_Disable+0xac>
 8002ca2:	eef4 7a47 	vcmp.f32	s15, s14
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	d10e      	bne.n	8002cca <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8002cac:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002d1c <LIS2DUXS12_ACC_Disable+0xb0>
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f94b 	bl	8002f4c <LIS2DUXS12_ACC_SetOutputDataRate>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e026      	b.n	8002d10 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3320      	adds	r3, #32
 8002cce:	f107 0208 	add.w	r2, r7, #8
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 ffa1 	bl	8003c1c <lis2duxs12_mode_get>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	e014      	b.n	8002d10 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3320      	adds	r3, #32
 8002cee:	f107 0208 	add.w	r2, r7, #8
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fed5 	bl	8003aa4 <lis2duxs12_mode_set>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	e004      	b.n	8002d10 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	44480000 	.word	0x44480000
 8002d1c:	43c80000 	.word	0x43c80000

08002d20 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3320      	adds	r3, #32
 8002d32:	f107 0208 	add.w	r2, r7, #8
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 ff6f 	bl	8003c1c <lis2duxs12_mode_get>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	e026      	b.n	8002d98 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8002d4a:	7a7b      	ldrb	r3, [r7, #9]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d81b      	bhi.n	8002d88 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d71 	.word	0x08002d71
 8002d60:	08002d79 	.word	0x08002d79
 8002d64:	08002d81 	.word	0x08002d81
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8002d6c:	601a      	str	r2, [r3, #0]
      break;
 8002d6e:	e012      	b.n	8002d96 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8002d74:	601a      	str	r2, [r3, #0]
      break;
 8002d76:	e00e      	b.n	8002d96 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002da8 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8002d7c:	601a      	str	r2, [r3, #0]
      break;
 8002d7e:	e00a      	b.n	8002d96 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8002d84:	601a      	str	r2, [r3, #0]
      break;
 8002d86:	e006      	b.n	8002d96 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4a09      	ldr	r2, [pc, #36]	@ (8002db0 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 8002d8c:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	60fb      	str	r3, [r7, #12]
      break;
 8002d94:	bf00      	nop
  }

  return ret;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	3d79db23 	.word	0x3d79db23
 8002da4:	3df9db23 	.word	0x3df9db23
 8002da8:	3e79db23 	.word	0x3e79db23
 8002dac:	3ef9db23 	.word	0x3ef9db23
 8002db0:	bf800000 	.word	0xbf800000

08002db4 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3320      	adds	r3, #32
 8002dc6:	f107 0208 	add.w	r2, r7, #8
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 ff25 	bl	8003c1c <lis2duxs12_mode_get>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	e09b      	b.n	8002f16 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8002dde:	7a3b      	ldrb	r3, [r7, #8]
 8002de0:	2b2f      	cmp	r3, #47	@ 0x2f
 8002de2:	f200 8090 	bhi.w	8002f06 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002de6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002ead 	.word	0x08002ead
 8002df0:	08002eb7 	.word	0x08002eb7
 8002df4:	08002ebf 	.word	0x08002ebf
 8002df8:	08002ed7 	.word	0x08002ed7
 8002dfc:	08002ec7 	.word	0x08002ec7
 8002e00:	08002ecf 	.word	0x08002ecf
 8002e04:	08002ed7 	.word	0x08002ed7
 8002e08:	08002edf 	.word	0x08002edf
 8002e0c:	08002ee7 	.word	0x08002ee7
 8002e10:	08002eef 	.word	0x08002eef
 8002e14:	08002ef7 	.word	0x08002ef7
 8002e18:	08002eff 	.word	0x08002eff
 8002e1c:	08002f07 	.word	0x08002f07
 8002e20:	08002f07 	.word	0x08002f07
 8002e24:	08002f07 	.word	0x08002f07
 8002e28:	08002f07 	.word	0x08002f07
 8002e2c:	08002f07 	.word	0x08002f07
 8002e30:	08002f07 	.word	0x08002f07
 8002e34:	08002f07 	.word	0x08002f07
 8002e38:	08002f07 	.word	0x08002f07
 8002e3c:	08002ec7 	.word	0x08002ec7
 8002e40:	08002ecf 	.word	0x08002ecf
 8002e44:	08002ed7 	.word	0x08002ed7
 8002e48:	08002edf 	.word	0x08002edf
 8002e4c:	08002ee7 	.word	0x08002ee7
 8002e50:	08002eef 	.word	0x08002eef
 8002e54:	08002ef7 	.word	0x08002ef7
 8002e58:	08002eff 	.word	0x08002eff
 8002e5c:	08002f07 	.word	0x08002f07
 8002e60:	08002f07 	.word	0x08002f07
 8002e64:	08002f07 	.word	0x08002f07
 8002e68:	08002f07 	.word	0x08002f07
 8002e6c:	08002f07 	.word	0x08002f07
 8002e70:	08002f07 	.word	0x08002f07
 8002e74:	08002f07 	.word	0x08002f07
 8002e78:	08002f07 	.word	0x08002f07
 8002e7c:	08002f07 	.word	0x08002f07
 8002e80:	08002f07 	.word	0x08002f07
 8002e84:	08002f07 	.word	0x08002f07
 8002e88:	08002f07 	.word	0x08002f07
 8002e8c:	08002f07 	.word	0x08002f07
 8002e90:	08002f07 	.word	0x08002f07
 8002e94:	08002f07 	.word	0x08002f07
 8002e98:	08002f07 	.word	0x08002f07
 8002e9c:	08002f07 	.word	0x08002f07
 8002ea0:	08002f07 	.word	0x08002f07
 8002ea4:	08002ead 	.word	0x08002ead
 8002ea8:	08002ead 	.word	0x08002ead
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
      break;
 8002eb4:	e02e      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8002eba:	601a      	str	r2, [r3, #0]
      break;
 8002ebc:	e02a      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8002ec2:	601a      	str	r2, [r3, #0]
      break;
 8002ec4:	e026      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8002eca:	601a      	str	r2, [r3, #0]
      break;
 8002ecc:	e022      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	4a16      	ldr	r2, [pc, #88]	@ (8002f2c <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8002ed2:	601a      	str	r2, [r3, #0]
      break;
 8002ed4:	e01e      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	@ (8002f30 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8002eda:	601a      	str	r2, [r3, #0]
      break;
 8002edc:	e01a      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002ee2:	601a      	str	r2, [r3, #0]
      break;
 8002ee4:	e016      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4a13      	ldr	r2, [pc, #76]	@ (8002f38 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8002eea:	601a      	str	r2, [r3, #0]
      break;
 8002eec:	e012      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002ef2:	601a      	str	r2, [r3, #0]
      break;
 8002ef4:	e00e      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8002efa:	601a      	str	r2, [r3, #0]
      break;
 8002efc:	e00a      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4a10      	ldr	r2, [pc, #64]	@ (8002f44 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002f02:	601a      	str	r2, [r3, #0]
      break;
 8002f04:	e006      	b.n	8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4a0f      	ldr	r2, [pc, #60]	@ (8002f48 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8002f0a:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	60fb      	str	r3, [r7, #12]
      break;
 8002f12:	bf00      	nop
  }

  return ret;
 8002f14:	68fb      	ldr	r3, [r7, #12]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	3fcccccd 	.word	0x3fcccccd
 8002f24:	40400000 	.word	0x40400000
 8002f28:	40c00000 	.word	0x40c00000
 8002f2c:	41480000 	.word	0x41480000
 8002f30:	41c80000 	.word	0x41c80000
 8002f34:	42480000 	.word	0x42480000
 8002f38:	42c80000 	.word	0x42c80000
 8002f3c:	43480000 	.word	0x43480000
 8002f40:	43c80000 	.word	0x43c80000
 8002f44:	44480000 	.word	0x44480000
 8002f48:	bf800000 	.word	0xbf800000

08002f4c <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8002f58:	2102      	movs	r1, #2
 8002f5a:	ed97 0a00 	vldr	s0, [r7]
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f805 	bl	8002f6e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f937 	bl	8003204 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	e007      	b.n	8002faa <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 faac 	bl	8003500 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8002fa8:	4603      	mov	r3, r0
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3320      	adds	r3, #32
 8002fc6:	f107 0208 	add.w	r2, r7, #8
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fe25 	bl	8003c1c <lis2duxs12_mode_get>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	e027      	b.n	800302e <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8002fde:	7a7b      	ldrb	r3, [r7, #9]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d81b      	bhi.n	800301c <LIS2DUXS12_ACC_GetFullScale+0x68>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003005 	.word	0x08003005
 8002ff4:	0800300d 	.word	0x0800300d
 8002ff8:	08003015 	.word	0x08003015
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
      break;
 8003002:	e013      	b.n	800302c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2204      	movs	r2, #4
 8003008:	601a      	str	r2, [r3, #0]
      break;
 800300a:	e00f      	b.n	800302c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2208      	movs	r2, #8
 8003010:	601a      	str	r2, [r3, #0]
      break;
 8003012:	e00b      	b.n	800302c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2210      	movs	r2, #16
 8003018:	601a      	str	r2, [r3, #0]
      break;
 800301a:	e007      	b.n	800302c <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f04f 32ff 	mov.w	r2, #4294967295
 8003022:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	60fb      	str	r3, [r7, #12]
      break;
 800302a:	bf00      	nop
  }

  return ret;
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop

08003038 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3320      	adds	r3, #32
 8003046:	f107 020c 	add.w	r2, r7, #12
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fde5 	bl	8003c1c <lis2duxs12_mode_get>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	e01f      	b.n	800309e <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b02      	cmp	r3, #2
 8003062:	dd0b      	ble.n	800307c <LIS2DUXS12_ACC_SetFullScale+0x44>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b04      	cmp	r3, #4
 8003068:	dd06      	ble.n	8003078 <LIS2DUXS12_ACC_SetFullScale+0x40>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b08      	cmp	r3, #8
 800306e:	dc01      	bgt.n	8003074 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8003070:	2302      	movs	r3, #2
 8003072:	e004      	b.n	800307e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003074:	2303      	movs	r3, #3
 8003076:	e002      	b.n	800307e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <LIS2DUXS12_ACC_SetFullScale+0x46>
 800307c:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 800307e:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3320      	adds	r3, #32
 8003084:	f107 020c 	add.w	r2, r7, #12
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fd0a 	bl	8003aa4 <lis2duxs12_mode_set>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	e000      	b.n	800309e <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b088      	sub	sp, #32
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3320      	adds	r3, #32
 80030b4:	f107 021c 	add.w	r2, r7, #28
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fdae 	bl	8003c1c <lis2duxs12_mode_get>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e01b      	b.n	8003104 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3320      	adds	r3, #32
 80030d0:	f107 0208 	add.w	r2, r7, #8
 80030d4:	f107 011c 	add.w	r1, r7, #28
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fecf 	bl	8003e7c <lis2duxs12_xl_data_get>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	e00c      	b.n	8003104 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 80030ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 80030f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 80030fa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3320      	adds	r3, #32
 800311a:	f107 021c 	add.w	r2, r7, #28
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fd7b 	bl	8003c1c <lis2duxs12_mode_get>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	e027      	b.n	8003182 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3320      	adds	r3, #32
 8003136:	f107 0208 	add.w	r2, r7, #8
 800313a:	f107 011c 	add.w	r1, r7, #28
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe9c 	bl	8003e7c <lis2duxs12_xl_data_get>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e018      	b.n	8003182 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8003150:	edd7 7a02 	vldr	s15, [r7, #8]
 8003154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003158:	ee17 2a90 	vmov	r2, s15
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8003160:	edd7 7a03 	vldr	s15, [r7, #12]
 8003164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003168:	ee17 2a90 	vmov	r2, s15
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8003170:	edd7 7a04 	vldr	s15, [r7, #16]
 8003174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003178:	ee17 2a90 	vmov	r2, s15
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]
 8003196:	4613      	mov	r3, r2
 8003198:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f103 0020 	add.w	r0, r3, #32
 80031a0:	1cba      	adds	r2, r7, #2
 80031a2:	78f9      	ldrb	r1, [r7, #3]
 80031a4:	2301      	movs	r3, #1
 80031a6:	f000 faa0 	bl	80036ea <lis2duxs12_write_reg>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	e000      	b.n	80031b8 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 80031dc:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3320      	adds	r3, #32
 80031e2:	7afa      	ldrb	r2, [r7, #11]
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 ff6b 	bl	80040c2 <lis2duxs12_mem_bank_set>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003210:	460b      	mov	r3, r1
 8003212:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3320      	adds	r3, #32
 8003218:	f107 0214 	add.w	r2, r7, #20
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fcfc 	bl	8003c1c <lis2duxs12_mode_get>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	e142      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d118      	bne.n	8003268 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 8003236:	edd7 7a02 	vldr	s15, [r7, #8]
 800323a:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80034c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 800323e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	d801      	bhi.n	800324c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8003248:	2301      	movs	r3, #1
 800324a:	e00b      	b.n	8003264 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800324c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003250:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	d801      	bhi.n	8003262 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 800325e:	2302      	movs	r3, #2
 8003260:	e000      	b.n	8003264 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003262:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 8003264:	753b      	strb	r3, [r7, #20]
 8003266:	e0a4      	b.n	80033b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d14f      	bne.n	800330e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 800326e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003272:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	d801      	bhi.n	8003284 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 8003280:	2304      	movs	r3, #4
 8003282:	e042      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003284:	edd7 7a02 	vldr	s15, [r7, #8]
 8003288:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800328c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003294:	d801      	bhi.n	800329a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 8003296:	2305      	movs	r3, #5
 8003298:	e037      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800329a:	edd7 7a02 	vldr	s15, [r7, #8]
 800329e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80032a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	d801      	bhi.n	80032b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 80032ac:	2306      	movs	r3, #6
 80032ae:	e02c      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80032b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	d801      	bhi.n	80032c6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 80032c2:	2307      	movs	r3, #7
 80032c4:	e021      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ca:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80034c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80032ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d6:	d801      	bhi.n	80032dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80032d8:	2308      	movs	r3, #8
 80032da:	e016      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e0:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80034cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	d801      	bhi.n	80032f2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 80032ee:	2309      	movs	r3, #9
 80032f0:	e00b      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f6:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80034d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80032fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d801      	bhi.n	8003308 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003304:	230a      	movs	r3, #10
 8003306:	e000      	b.n	800330a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003308:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 800330a:	753b      	strb	r3, [r7, #20]
 800330c:	e051      	b.n	80033b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d14e      	bne.n	80033b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8003314:	edd7 7a02 	vldr	s15, [r7, #8]
 8003318:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800331c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	d801      	bhi.n	800332a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003326:	2314      	movs	r3, #20
 8003328:	e042      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800332a:	edd7 7a02 	vldr	s15, [r7, #8]
 800332e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d801      	bhi.n	8003340 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800333c:	2315      	movs	r3, #21
 800333e:	e037      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003340:	edd7 7a02 	vldr	s15, [r7, #8]
 8003344:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	d801      	bhi.n	8003356 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003352:	2316      	movs	r3, #22
 8003354:	e02c      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003356:	edd7 7a02 	vldr	s15, [r7, #8]
 800335a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 800335e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	d801      	bhi.n	800336c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003368:	2317      	movs	r3, #23
 800336a:	e021      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800336c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003370:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80034c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8003374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d801      	bhi.n	8003382 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800337e:	2318      	movs	r3, #24
 8003380:	e016      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003382:	edd7 7a02 	vldr	s15, [r7, #8]
 8003386:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80034cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 800338a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	d801      	bhi.n	8003398 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003394:	2319      	movs	r3, #25
 8003396:	e00b      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003398:	edd7 7a02 	vldr	s15, [r7, #8]
 800339c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80034d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80033a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	d801      	bhi.n	80033ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80033aa:	231a      	movs	r3, #26
 80033ac:	e000      	b.n	80033b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80033ae:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 80033b0:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3320      	adds	r3, #32
 80033b6:	f107 0214 	add.w	r2, r7, #20
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fb71 	bl	8003aa4 <lis2duxs12_mode_set>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
 80033cc:	e073      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80033ce:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d05b      	beq.n	800348c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 80033d4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d056      	beq.n	8003488 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 80033da:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d051      	beq.n	8003484 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 80033e0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80033e2:	2b14      	cmp	r3, #20
 80033e4:	d04c      	beq.n	8003480 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 80033e6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d047      	beq.n	800347c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 80033ec:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80033ee:	2b15      	cmp	r3, #21
 80033f0:	d042      	beq.n	8003478 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 80033f2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d03d      	beq.n	8003474 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 80033f8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d038      	beq.n	8003470 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 80033fe:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003400:	2b16      	cmp	r3, #22
 8003402:	d033      	beq.n	800346c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8003404:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003406:	2b07      	cmp	r3, #7
 8003408:	d02e      	beq.n	8003468 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 800340a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 800340c:	2b17      	cmp	r3, #23
 800340e:	d029      	beq.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8003410:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8003412:	2b08      	cmp	r3, #8
 8003414:	d024      	beq.n	8003460 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8003416:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003418:	2b18      	cmp	r3, #24
 800341a:	d01f      	beq.n	800345c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 800341c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800341e:	2b09      	cmp	r3, #9
 8003420:	d01a      	beq.n	8003458 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8003422:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003424:	2b19      	cmp	r3, #25
 8003426:	d015      	beq.n	8003454 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003428:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d010      	beq.n	8003450 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800342e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003430:	2b1a      	cmp	r3, #26
 8003432:	d00b      	beq.n	800344c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 8003434:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003436:	2b0b      	cmp	r3, #11
 8003438:	d006      	beq.n	8003448 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 800343a:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 800343c:	2b1b      	cmp	r3, #27
 800343e:	d101      	bne.n	8003444 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 8003440:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8003442:	e024      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003444:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 8003446:	e022      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003448:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 800344a:	e020      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 800344c:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 800344e:	e01e      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003450:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8003452:	e01c      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003454:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8003456:	e01a      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8003458:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800345a:	e018      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 800345c:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 800345e:	e016      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8003460:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8003462:	e014      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8003464:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8003466:	e012      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003468:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800346a:	e010      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 800346c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800346e:	e00e      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003470:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003472:	e00c      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003476:	e00a      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8003478:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800347a:	e008      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 800347c:	4b1c      	ldr	r3, [pc, #112]	@ (80034f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800347e:	e006      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8003480:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 8003482:	e004      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 8003486:	e002      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 800348a:	e000      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003498:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800349c:	eef4 7a47 	vcmp.f32	s15, s14
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	d102      	bne.n	80034ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e004      	b.n	80034b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	79fa      	ldrb	r2, [r7, #7]
 80034b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	3fcccccd 	.word	0x3fcccccd
 80034c4:	42480000 	.word	0x42480000
 80034c8:	42c80000 	.word	0x42c80000
 80034cc:	43480000 	.word	0x43480000
 80034d0:	43c80000 	.word	0x43c80000
 80034d4:	44480000 	.word	0x44480000
 80034d8:	bf800000 	.word	0xbf800000
 80034dc:	43c80000 	.word	0x43c80000
 80034e0:	43480000 	.word	0x43480000
 80034e4:	42c80000 	.word	0x42c80000
 80034e8:	42480000 	.word	0x42480000
 80034ec:	41c80000 	.word	0x41c80000
 80034f0:	41480000 	.word	0x41480000
 80034f4:	40c00000 	.word	0x40c00000
 80034f8:	40400000 	.word	0x40400000
 80034fc:	3fcccccd 	.word	0x3fcccccd

08003500 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	ed87 0a02 	vstr	s0, [r7, #8]
 800350c:	460b      	mov	r3, r1
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11a      	bne.n	800354c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8003516:	edd7 7a02 	vldr	s15, [r7, #8]
 800351a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800351e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d802      	bhi.n	800352e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003528:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800352c:	e00b      	b.n	8003546 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 800352e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003532:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	d801      	bhi.n	8003544 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8003540:	4b33      	ldr	r3, [pc, #204]	@ (8003610 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 8003542:	e000      	b.n	8003546 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8003544:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	6353      	str	r3, [r2, #52]	@ 0x34
 800354a:	e055      	b.n	80035f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d002      	beq.n	8003558 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d14f      	bne.n	80035f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8003558:	edd7 7a02 	vldr	s15, [r7, #8]
 800355c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003568:	d801      	bhi.n	800356e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 800356a:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 800356c:	e042      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 800356e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003572:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d801      	bhi.n	8003584 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 8003580:	4b26      	ldr	r3, [pc, #152]	@ (800361c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003582:	e037      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 8003584:	edd7 7a02 	vldr	s15, [r7, #8]
 8003588:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800358c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	d801      	bhi.n	800359a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003598:	e02c      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 800359a:	edd7 7a02 	vldr	s15, [r7, #8]
 800359e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003620 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 80035a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035aa:	d801      	bhi.n	80035b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80035ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 80035ae:	e021      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 80035b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003628 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 80035b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c0:	d801      	bhi.n	80035c6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 80035c2:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 80035c4:	e016      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 80035c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003630 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 80035ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	d801      	bhi.n	80035dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 80035d8:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 80035da:	e00b      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 80035dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003638 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 80035e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	d801      	bhi.n	80035f2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 80035ee:	4b13      	ldr	r3, [pc, #76]	@ (800363c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 80035f0:	e000      	b.n	80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	79fa      	ldrb	r2, [r7, #7]
 80035fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40400000 	.word	0x40400000
 8003614:	41c80000 	.word	0x41c80000
 8003618:	40c00000 	.word	0x40c00000
 800361c:	41480000 	.word	0x41480000
 8003620:	42480000 	.word	0x42480000
 8003624:	42480000 	.word	0x42480000
 8003628:	42c80000 	.word	0x42c80000
 800362c:	42c80000 	.word	0x42c80000
 8003630:	43480000 	.word	0x43480000
 8003634:	43480000 	.word	0x43480000
 8003638:	43c80000 	.word	0x43c80000
 800363c:	43c80000 	.word	0x43c80000
 8003640:	44480000 	.word	0x44480000

08003644 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	460b      	mov	r3, r1
 8003652:	72fb      	strb	r3, [r7, #11]
 8003654:	4613      	mov	r3, r2
 8003656:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	695c      	ldr	r4, [r3, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	7b1b      	ldrb	r3, [r3, #12]
 8003664:	4618      	mov	r0, r3
 8003666:	7afb      	ldrb	r3, [r7, #11]
 8003668:	b299      	uxth	r1, r3
 800366a:	893b      	ldrh	r3, [r7, #8]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	47a0      	blx	r4
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}

0800367a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800367a:	b590      	push	{r4, r7, lr}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	461a      	mov	r2, r3
 8003686:	460b      	mov	r3, r1
 8003688:	72fb      	strb	r3, [r7, #11]
 800368a:	4613      	mov	r3, r2
 800368c:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	691c      	ldr	r4, [r3, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	7b1b      	ldrb	r3, [r3, #12]
 800369a:	4618      	mov	r0, r3
 800369c:	7afb      	ldrb	r3, [r7, #11]
 800369e:	b299      	uxth	r1, r3
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	47a0      	blx	r4
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	460b      	mov	r3, r1
 80036be:	72fb      	strb	r3, [r7, #11]
 80036c0:	4613      	mov	r3, r2
 80036c2:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295
 80036ce:	e008      	b.n	80036e2 <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685c      	ldr	r4, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68d8      	ldr	r0, [r3, #12]
 80036d8:	893b      	ldrh	r3, [r7, #8]
 80036da:	7af9      	ldrb	r1, [r7, #11]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	47a0      	blx	r4
 80036e0:	4603      	mov	r3, r0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 80036ea:	b590      	push	{r4, r7, lr}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	461a      	mov	r2, r3
 80036f6:	460b      	mov	r3, r1
 80036f8:	72fb      	strb	r3, [r7, #11]
 80036fa:	4613      	mov	r3, r2
 80036fc:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	e008      	b.n	800371c <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681c      	ldr	r4, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68d8      	ldr	r0, [r3, #12]
 8003712:	893b      	ldrh	r3, [r7, #8]
 8003714:	7af9      	ldrb	r1, [r7, #11]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	47a0      	blx	r4
 800371a:	4603      	mov	r3, r0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 800372e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800373a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003750 <lis2duxs12_from_fs2g_to_mg+0x2c>
 800373e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003742:	eeb0 0a67 	vmov.f32	s0, s15
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	3d79db23 	.word	0x3d79db23

08003754 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 800375e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003780 <lis2duxs12_from_fs4g_to_mg+0x2c>
 800376e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003772:	eeb0 0a67 	vmov.f32	s0, s15
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	3df9db23 	.word	0x3df9db23

08003784 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 800378e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800379a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037b0 <lis2duxs12_from_fs8g_to_mg+0x2c>
 800379e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037a2:	eeb0 0a67 	vmov.f32	s0, s15
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	3e79db23 	.word	0x3e79db23

080037b4 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 80037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ca:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037e0 <lis2duxs12_from_fs16g_to_mg+0x2c>
 80037ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037d2:	eeb0 0a67 	vmov.f32	s0, s15
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	3ef9db23 	.word	0x3ef9db23

080037e4 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 80037ee:	2301      	movs	r3, #1
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	210f      	movs	r1, #15
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff5b 	bl	80036b0 <lis2duxs12_read_reg>
 80037fa:	60f8      	str	r0, [r7, #12]

  return ret;
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 800381c:	f107 0214 	add.w	r2, r7, #20
 8003820:	2301      	movs	r3, #1
 8003822:	2110      	movs	r1, #16
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff43 	bl	80036b0 <lis2duxs12_read_reg>
 800382a:	4602      	mov	r2, r0
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003832:	f107 0210 	add.w	r2, r7, #16
 8003836:	2301      	movs	r3, #1
 8003838:	2113      	movs	r1, #19
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff38 	bl	80036b0 <lis2duxs12_read_reg>
 8003840:	4602      	mov	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4413      	add	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
  switch (val)
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	2b03      	cmp	r3, #3
 800384c:	f200 80ca 	bhi.w	80039e4 <lis2duxs12_init_set+0x1dc>
 8003850:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <lis2duxs12_init_set+0x50>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003959 	.word	0x08003959
 800385c:	08003869 	.word	0x08003869
 8003860:	080038e3 	.word	0x080038e3
 8003864:	0800399f 	.word	0x0800399f
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8003868:	7c3b      	ldrb	r3, [r7, #16]
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003870:	f107 0210 	add.w	r2, r7, #16
 8003874:	2301      	movs	r3, #1
 8003876:	2113      	movs	r1, #19
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff36 	bl	80036ea <lis2duxs12_write_reg>
 800387e:	4602      	mov	r2, r0
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 80bb 	bne.w	8003a04 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800388e:	f107 0210 	add.w	r2, r7, #16
 8003892:	2301      	movs	r3, #1
 8003894:	2113      	movs	r1, #19
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff0a 	bl	80036b0 <lis2duxs12_read_reg>
 800389c:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d113      	bne.n	80038cc <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 80038a4:	7c3b      	ldrb	r3, [r7, #16]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00f      	beq.n	80038d0 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2019      	movs	r0, #25
 80038be:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 80038c0:	7ffb      	ldrb	r3, [r7, #31]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	77fa      	strb	r2, [r7, #31]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d9e1      	bls.n	800388e <lis2duxs12_init_set+0x86>
 80038ca:	e002      	b.n	80038d2 <lis2duxs12_init_set+0xca>
          break;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <lis2duxs12_init_set+0xca>
          break;
 80038d0:	bf00      	nop

      if (cnt >= 5U)
 80038d2:	7ffb      	ldrb	r3, [r7, #31]
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	f240 8097 	bls.w	8003a08 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	61bb      	str	r3, [r7, #24]
      }
      break;
 80038e0:	e092      	b.n	8003a08 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 80038e2:	7d3b      	ldrb	r3, [r7, #20]
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80038ea:	f107 0214 	add.w	r2, r7, #20
 80038ee:	2301      	movs	r3, #1
 80038f0:	2110      	movs	r1, #16
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fef9 	bl	80036ea <lis2duxs12_write_reg>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	4413      	add	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 8082 	bne.w	8003a0c <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f884 	bl	8003a1c <lis2duxs12_status_get>
 8003914:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d113      	bne.n	8003944 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 800391c:	7b3b      	ldrb	r3, [r7, #12]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00f      	beq.n	8003948 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2001      	movs	r0, #1
 8003936:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	77fa      	strb	r2, [r7, #31]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d9e2      	bls.n	8003908 <lis2duxs12_init_set+0x100>
 8003942:	e002      	b.n	800394a <lis2duxs12_init_set+0x142>
          break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <lis2duxs12_init_set+0x142>
          break;
 8003948:	bf00      	nop

      if (cnt >= 5U)
 800394a:	7ffb      	ldrb	r3, [r7, #31]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d95f      	bls.n	8003a10 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003956:	e05b      	b.n	8003a10 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003958:	7c3b      	ldrb	r3, [r7, #16]
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003960:	7c3b      	ldrb	r3, [r7, #16]
 8003962:	f043 0320 	orr.w	r3, r3, #32
 8003966:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003968:	7d3b      	ldrb	r3, [r7, #20]
 800396a:	f043 0310 	orr.w	r3, r3, #16
 800396e:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003970:	f107 0210 	add.w	r2, r7, #16
 8003974:	2301      	movs	r3, #1
 8003976:	2113      	movs	r1, #19
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff feb6 	bl	80036ea <lis2duxs12_write_reg>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	4413      	add	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003986:	f107 0214 	add.w	r2, r7, #20
 800398a:	2301      	movs	r3, #1
 800398c:	2110      	movs	r1, #16
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff feab 	bl	80036ea <lis2duxs12_write_reg>
 8003994:	4602      	mov	r2, r0
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	4413      	add	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      break;
 800399c:	e039      	b.n	8003a12 <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 800399e:	7c3b      	ldrb	r3, [r7, #16]
 80039a0:	f043 0310 	orr.w	r3, r3, #16
 80039a4:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 80039a6:	7c3b      	ldrb	r3, [r7, #16]
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 80039ae:	7d3b      	ldrb	r3, [r7, #20]
 80039b0:	f043 0310 	orr.w	r3, r3, #16
 80039b4:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80039b6:	f107 0210 	add.w	r2, r7, #16
 80039ba:	2301      	movs	r3, #1
 80039bc:	2113      	movs	r1, #19
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe93 	bl	80036ea <lis2duxs12_write_reg>
 80039c4:	4602      	mov	r2, r0
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4413      	add	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80039cc:	f107 0214 	add.w	r2, r7, #20
 80039d0:	2301      	movs	r3, #1
 80039d2:	2110      	movs	r1, #16
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fe88 	bl	80036ea <lis2duxs12_write_reg>
 80039da:	4602      	mov	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4413      	add	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      break;
 80039e2:	e016      	b.n	8003a12 <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 80039e4:	7d3b      	ldrb	r3, [r7, #20]
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80039ec:	f107 0214 	add.w	r2, r7, #20
 80039f0:	2301      	movs	r3, #1
 80039f2:	2110      	movs	r1, #16
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fe78 	bl	80036ea <lis2duxs12_write_reg>
 80039fa:	4602      	mov	r2, r0
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
      break;
 8003a02:	e006      	b.n	8003a12 <lis2duxs12_init_set+0x20a>
        break;
 8003a04:	bf00      	nop
 8003a06:	e004      	b.n	8003a12 <lis2duxs12_init_set+0x20a>
      break;
 8003a08:	bf00      	nop
 8003a0a:	e002      	b.n	8003a12 <lis2duxs12_init_set+0x20a>
        break;
 8003a0c:	bf00      	nop
 8003a0e:	e000      	b.n	8003a12 <lis2duxs12_init_set+0x20a>
      break;
 8003a10:	bf00      	nop
  }
  return ret;
 8003a12:	69bb      	ldr	r3, [r7, #24]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003a26:	f107 0210 	add.w	r2, r7, #16
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	2125      	movs	r1, #37	@ 0x25
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fe3e 	bl	80036b0 <lis2duxs12_read_reg>
 8003a34:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a36:	f107 020c 	add.w	r2, r7, #12
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fe36 	bl	80036b0 <lis2duxs12_read_reg>
 8003a44:	4602      	mov	r2, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003a4c:	f107 0208 	add.w	r2, r7, #8
 8003a50:	2301      	movs	r3, #1
 8003a52:	2113      	movs	r1, #19
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fe2b 	bl	80036b0 <lis2duxs12_read_reg>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003a62:	7b3b      	ldrb	r3, [r7, #12]
 8003a64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a68:	b2d9      	uxtb	r1, r3
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	7813      	ldrb	r3, [r2, #0]
 8003a6e:	f361 0300 	bfi	r3, r1, #0, #1
 8003a72:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003a74:	7a3b      	ldrb	r3, [r7, #8]
 8003a76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a7a:	b2d9      	uxtb	r1, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	7813      	ldrb	r3, [r2, #0]
 8003a80:	f361 0341 	bfi	r3, r1, #1, #1
 8003a84:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8003a86:	7c3b      	ldrb	r3, [r7, #16]
 8003a88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a8c:	b2d9      	uxtb	r1, r3
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	7813      	ldrb	r3, [r2, #0]
 8003a92:	f361 0382 	bfi	r3, r1, #2, #1
 8003a96:	7013      	strb	r3, [r2, #0]

  return ret;
 8003a98:	697b      	ldr	r3, [r7, #20]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003aae:	f107 020c 	add.w	r2, r7, #12
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	2114      	movs	r1, #20
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fdfa 	bl	80036b0 <lis2duxs12_read_reg>
 8003abc:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	7b3b      	ldrb	r3, [r7, #12]
 8003aca:	f362 1307 	bfi	r3, r2, #4, #4
 8003ace:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	7b3b      	ldrb	r3, [r7, #12]
 8003adc:	f362 0301 	bfi	r3, r2, #0, #2
 8003ae0:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d859      	bhi.n	8003b9e <lis2duxs12_mode_set+0xfa>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <lis2duxs12_mode_set+0x4c>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	08003b0d 	.word	0x08003b0d
 8003af8:	08003b0d 	.word	0x08003b0d
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b17 	.word	0x08003b17
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b5f 	.word	0x08003b5f
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003b0c:	7b3b      	ldrb	r3, [r7, #12]
 8003b0e:	f023 030c 	bic.w	r3, r3, #12
 8003b12:	733b      	strb	r3, [r7, #12]
      break;
 8003b14:	e04d      	b.n	8003bb2 <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d003      	beq.n	8003b26 <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	617b      	str	r3, [r7, #20]
          break;
 8003b24:	e004      	b.n	8003b30 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b26:	7b3b      	ldrb	r3, [r7, #12]
 8003b28:	f043 030c 	orr.w	r3, r3, #12
 8003b2c:	733b      	strb	r3, [r7, #12]
          break;
 8003b2e:	bf00      	nop
      }
      break;
 8003b30:	e03f      	b.n	8003bb2 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	789b      	ldrb	r3, [r3, #2]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d005      	beq.n	8003b46 <lis2duxs12_mode_set+0xa2>
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d009      	beq.n	8003b52 <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	617b      	str	r3, [r7, #20]
          break;
 8003b44:	e00a      	b.n	8003b5c <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003b46:	7b3b      	ldrb	r3, [r7, #12]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f362 0383 	bfi	r3, r2, #2, #2
 8003b4e:	733b      	strb	r3, [r7, #12]
          break;
 8003b50:	e004      	b.n	8003b5c <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b52:	7b3b      	ldrb	r3, [r7, #12]
 8003b54:	f043 030c 	orr.w	r3, r3, #12
 8003b58:	733b      	strb	r3, [r7, #12]
          break;
 8003b5a:	bf00      	nop
      }
      break;
 8003b5c:	e029      	b.n	8003bb2 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	789b      	ldrb	r3, [r3, #2]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d015      	beq.n	8003b92 <lis2duxs12_mode_set+0xee>
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	dc03      	bgt.n	8003b72 <lis2duxs12_mode_set+0xce>
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d005      	beq.n	8003b7a <lis2duxs12_mode_set+0xd6>
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d009      	beq.n	8003b86 <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	617b      	str	r3, [r7, #20]
          break;
 8003b78:	e010      	b.n	8003b9c <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8003b7a:	7b3b      	ldrb	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f362 0383 	bfi	r3, r2, #2, #2
 8003b82:	733b      	strb	r3, [r7, #12]
          break;
 8003b84:	e00a      	b.n	8003b9c <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003b86:	7b3b      	ldrb	r3, [r7, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f362 0383 	bfi	r3, r2, #2, #2
 8003b8e:	733b      	strb	r3, [r7, #12]
          break;
 8003b90:	e004      	b.n	8003b9c <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b92:	7b3b      	ldrb	r3, [r7, #12]
 8003b94:	f043 030c 	orr.w	r3, r3, #12
 8003b98:	733b      	strb	r3, [r7, #12]
          break;
 8003b9a:	bf00      	nop
      }
      break;
 8003b9c:	e009      	b.n	8003bb2 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	789b      	ldrb	r3, [r3, #2]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	7b3b      	ldrb	r3, [r7, #12]
 8003baa:	f362 0383 	bfi	r3, r2, #2, #2
 8003bae:	733b      	strb	r3, [r7, #12]
      break;
 8003bb0:	bf00      	nop
  }

  if (ret != 0)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	e02b      	b.n	8003c14 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003bbc:	f107 0210 	add.w	r2, r7, #16
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	2112      	movs	r1, #18
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fd73 	bl	80036b0 <lis2duxs12_read_reg>
 8003bca:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d101      	bne.n	8003bdc <lis2duxs12_mode_set+0x138>
 8003bd8:	2201      	movs	r2, #1
 8003bda:	e000      	b.n	8003bde <lis2duxs12_mode_set+0x13a>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	7c3b      	ldrb	r3, [r7, #16]
 8003be0:	f362 0382 	bfi	r3, r2, #2, #1
 8003be4:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d112      	bne.n	8003c12 <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003bec:	f107 020c 	add.w	r2, r7, #12
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	2114      	movs	r1, #20
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fd78 	bl	80036ea <lis2duxs12_write_reg>
 8003bfa:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003bfc:	f107 0210 	add.w	r2, r7, #16
 8003c00:	2301      	movs	r3, #1
 8003c02:	2112      	movs	r1, #18
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fd70 	bl	80036ea <lis2duxs12_write_reg>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003c12:	697b      	ldr	r3, [r7, #20]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003c26:	f107 020c 	add.w	r2, r7, #12
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	2114      	movs	r1, #20
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fd3e 	bl	80036b0 <lis2duxs12_read_reg>
 8003c34:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003c36:	f107 0210 	add.w	r2, r7, #16
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	2112      	movs	r1, #18
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fd36 	bl	80036b0 <lis2duxs12_read_reg>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	4413      	add	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 8003c4c:	7b3b      	ldrb	r3, [r7, #12]
 8003c4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	f200 809b 	bhi.w	8003d90 <lis2duxs12_mode_get+0x174>
 8003c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c60 <lis2duxs12_mode_get+0x44>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003ca1 	.word	0x08003ca1
 8003c64:	08003ca9 	.word	0x08003ca9
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003cb9 	.word	0x08003cb9
 8003c70:	08003cc1 	.word	0x08003cc1
 8003c74:	08003cd9 	.word	0x08003cd9
 8003c78:	08003cf1 	.word	0x08003cf1
 8003c7c:	08003d09 	.word	0x08003d09
 8003c80:	08003d21 	.word	0x08003d21
 8003c84:	08003d39 	.word	0x08003d39
 8003c88:	08003d51 	.word	0x08003d51
 8003c8c:	08003d69 	.word	0x08003d69
 8003c90:	08003d91 	.word	0x08003d91
 8003c94:	08003d91 	.word	0x08003d91
 8003c98:	08003d81 	.word	0x08003d81
 8003c9c:	08003d89 	.word	0x08003d89
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
      break;
 8003ca6:	e077      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
      break;
 8003cae:	e073      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	701a      	strb	r2, [r3, #0]
      break;
 8003cb6:	e06f      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	701a      	strb	r2, [r3, #0]
      break;
 8003cbe:	e06b      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8003cc0:	7c3b      	ldrb	r3, [r7, #16]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <lis2duxs12_mode_get+0xb4>
 8003ccc:	2214      	movs	r2, #20
 8003cce:	e000      	b.n	8003cd2 <lis2duxs12_mode_get+0xb6>
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e05f      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003cd8:	7c3b      	ldrb	r3, [r7, #16]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <lis2duxs12_mode_get+0xcc>
 8003ce4:	2215      	movs	r2, #21
 8003ce6:	e000      	b.n	8003cea <lis2duxs12_mode_get+0xce>
 8003ce8:	2205      	movs	r2, #5
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	701a      	strb	r2, [r3, #0]
      break;
 8003cee:	e053      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8003cf0:	7c3b      	ldrb	r3, [r7, #16]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <lis2duxs12_mode_get+0xe4>
 8003cfc:	2216      	movs	r2, #22
 8003cfe:	e000      	b.n	8003d02 <lis2duxs12_mode_get+0xe6>
 8003d00:	2206      	movs	r2, #6
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	701a      	strb	r2, [r3, #0]
      break;
 8003d06:	e047      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003d08:	7c3b      	ldrb	r3, [r7, #16]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <lis2duxs12_mode_get+0xfc>
 8003d14:	2217      	movs	r2, #23
 8003d16:	e000      	b.n	8003d1a <lis2duxs12_mode_get+0xfe>
 8003d18:	2207      	movs	r2, #7
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
      break;
 8003d1e:	e03b      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8003d20:	7c3b      	ldrb	r3, [r7, #16]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <lis2duxs12_mode_get+0x114>
 8003d2c:	2218      	movs	r2, #24
 8003d2e:	e000      	b.n	8003d32 <lis2duxs12_mode_get+0x116>
 8003d30:	2208      	movs	r2, #8
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	701a      	strb	r2, [r3, #0]
      break;
 8003d36:	e02f      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8003d38:	7c3b      	ldrb	r3, [r7, #16]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <lis2duxs12_mode_get+0x12c>
 8003d44:	2219      	movs	r2, #25
 8003d46:	e000      	b.n	8003d4a <lis2duxs12_mode_get+0x12e>
 8003d48:	2209      	movs	r2, #9
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	701a      	strb	r2, [r3, #0]
      break;
 8003d4e:	e023      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8003d50:	7c3b      	ldrb	r3, [r7, #16]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <lis2duxs12_mode_get+0x144>
 8003d5c:	221a      	movs	r2, #26
 8003d5e:	e000      	b.n	8003d62 <lis2duxs12_mode_get+0x146>
 8003d60:	220a      	movs	r2, #10
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	701a      	strb	r2, [r3, #0]
      break;
 8003d66:	e017      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8003d68:	7c3b      	ldrb	r3, [r7, #16]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <lis2duxs12_mode_get+0x15c>
 8003d74:	221b      	movs	r2, #27
 8003d76:	e000      	b.n	8003d7a <lis2duxs12_mode_get+0x15e>
 8003d78:	220b      	movs	r2, #11
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	701a      	strb	r2, [r3, #0]
      break;
 8003d7e:	e00b      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	222e      	movs	r2, #46	@ 0x2e
 8003d84:	701a      	strb	r2, [r3, #0]
      break;
 8003d86:	e007      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	222f      	movs	r2, #47	@ 0x2f
 8003d8c:	701a      	strb	r2, [r3, #0]
      break;
 8003d8e:	e003      	b.n	8003d98 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
      break;
 8003d96:	bf00      	nop
  }

  switch (ctrl5.fs)
 8003d98:	7b3b      	ldrb	r3, [r7, #12]
 8003d9a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d81b      	bhi.n	8003ddc <lis2duxs12_mode_get+0x1c0>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <lis2duxs12_mode_get+0x190>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dc5 	.word	0x08003dc5
 8003db4:	08003dcd 	.word	0x08003dcd
 8003db8:	08003dd5 	.word	0x08003dd5
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	705a      	strb	r2, [r3, #1]
      break;
 8003dc2:	e00f      	b.n	8003de4 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	705a      	strb	r2, [r3, #1]
      break;
 8003dca:	e00b      	b.n	8003de4 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	705a      	strb	r2, [r3, #1]
      break;
 8003dd2:	e007      	b.n	8003de4 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	705a      	strb	r2, [r3, #1]
      break;
 8003dda:	e003      	b.n	8003de4 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	705a      	strb	r2, [r3, #1]
      break;
 8003de2:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003de4:	7b3b      	ldrb	r3, [r7, #12]
 8003de6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d81b      	bhi.n	8003e28 <lis2duxs12_mode_get+0x20c>
 8003df0:	a201      	add	r2, pc, #4	@ (adr r2, 8003df8 <lis2duxs12_mode_get+0x1dc>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e11 	.word	0x08003e11
 8003e00:	08003e19 	.word	0x08003e19
 8003e04:	08003e21 	.word	0x08003e21
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	709a      	strb	r2, [r3, #2]
      break;
 8003e0e:	e00f      	b.n	8003e30 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	709a      	strb	r2, [r3, #2]
      break;
 8003e16:	e00b      	b.n	8003e30 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	709a      	strb	r2, [r3, #2]
      break;
 8003e1e:	e007      	b.n	8003e30 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	709a      	strb	r2, [r3, #2]
      break;
 8003e26:	e003      	b.n	8003e30 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	709a      	strb	r2, [r3, #2]
      break;
 8003e2e:	bf00      	nop
  }

  return ret;
 8003e30:	697b      	ldr	r3, [r7, #20]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8003e44:	2300      	movs	r3, #0
 8003e46:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8003e48:	7a3b      	ldrb	r3, [r7, #8]
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8003e50:	f107 0208 	add.w	r2, r7, #8
 8003e54:	2301      	movs	r3, #1
 8003e56:	213e      	movs	r1, #62	@ 0x3e
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fc46 	bl	80036ea <lis2duxs12_write_reg>
 8003e5e:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2019      	movs	r0, #25
 8003e6e:	4798      	blx	r3
  }

  return ret;
 8003e70:	68fb      	ldr	r3, [r7, #12]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b089      	sub	sp, #36	@ 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8003e88:	f107 0210 	add.w	r2, r7, #16
 8003e8c:	2306      	movs	r3, #6
 8003e8e:	2128      	movs	r1, #40	@ 0x28
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fc0d 	bl	80036b0 <lis2duxs12_read_reg>
 8003e96:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e08f      	b.n	8003fc2 <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8003ea2:	7fbb      	ldrb	r3, [r7, #30]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	3320      	adds	r3, #32
 8003ea8:	443b      	add	r3, r7
 8003eaa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	b211      	sxth	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	460a      	mov	r2, r1
 8003ebc:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	7fba      	ldrb	r2, [r7, #30]
 8003ed4:	3220      	adds	r2, #32
 8003ed6:	443a      	add	r2, r7
 8003ed8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003edc:	4413      	add	r3, r2
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
 8003ee2:	b211      	sxth	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	460a      	mov	r2, r1
 8003eee:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003ef0:	7fbb      	ldrb	r3, [r7, #30]
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d856      	bhi.n	8003fac <lis2duxs12_xl_data_get+0x130>
 8003efe:	a201      	add	r2, pc, #4	@ (adr r2, 8003f04 <lis2duxs12_xl_data_get+0x88>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f61 	.word	0x08003f61
 8003f10:	08003f87 	.word	0x08003f87
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003f14:	7ffb      	ldrb	r3, [r7, #31]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f22:	7ffc      	ldrb	r4, [r7, #31]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fbfd 	bl	8003724 <lis2duxs12_from_fs2g_to_mg>
 8003f2a:	eef0 7a40 	vmov.f32	s15, s0
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	00a3      	lsls	r3, r4, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f38:	e040      	b.n	8003fbc <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f48:	7ffc      	ldrb	r4, [r7, #31]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fc02 	bl	8003754 <lis2duxs12_from_fs4g_to_mg>
 8003f50:	eef0 7a40 	vmov.f32	s15, s0
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	00a3      	lsls	r3, r4, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f5e:	e02d      	b.n	8003fbc <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8003f60:	7ffb      	ldrb	r3, [r7, #31]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f6e:	7ffc      	ldrb	r4, [r7, #31]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fc07 	bl	8003784 <lis2duxs12_from_fs8g_to_mg>
 8003f76:	eef0 7a40 	vmov.f32	s15, s0
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	00a3      	lsls	r3, r4, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f84:	e01a      	b.n	8003fbc <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 8003f86:	7ffb      	ldrb	r3, [r7, #31]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f94:	7ffc      	ldrb	r4, [r7, #31]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc0c 	bl	80037b4 <lis2duxs12_from_fs16g_to_mg>
 8003f9c:	eef0 7a40 	vmov.f32	s15, s0
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	00a3      	lsls	r3, r4, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003faa:	e007      	b.n	8003fbc <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
        break;
 8003fba:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	7ffb      	ldrb	r3, [r7, #31]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	f67f af6c 	bls.w	8003ea2 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 8003fca:	69bb      	ldr	r3, [r7, #24]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3724      	adds	r7, #36	@ 0x24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd90      	pop	{r4, r7, pc}

08003fd4 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8003fde:	f107 0208 	add.w	r2, r7, #8
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	2133      	movs	r1, #51	@ 0x33
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fb62 	bl	80036b0 <lis2duxs12_read_reg>
 8003fec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d122      	bne.n	800403a <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	7a3b      	ldrb	r3, [r7, #8]
 8004000:	f362 0301 	bfi	r3, r2, #0, #2
 8004004:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	7a3b      	ldrb	r3, [r7, #8]
 8004012:	f362 1386 	bfi	r3, r2, #6, #1
 8004016:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	7a3b      	ldrb	r3, [r7, #8]
 8004024:	f362 1345 	bfi	r3, r2, #5, #1
 8004028:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800402a:	f107 0208 	add.w	r2, r7, #8
 800402e:	2301      	movs	r3, #1
 8004030:	2133      	movs	r1, #51	@ 0x33
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fb59 	bl	80036ea <lis2duxs12_write_reg>
 8004038:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800404e:	f107 0208 	add.w	r2, r7, #8
 8004052:	2301      	movs	r3, #1
 8004054:	2133      	movs	r1, #51	@ 0x33
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fb2a 	bl	80036b0 <lis2duxs12_read_reg>
 800405c:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 800405e:	7a3b      	ldrb	r3, [r7, #8]
 8004060:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004064:	b2d9      	uxtb	r1, r3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	7853      	ldrb	r3, [r2, #1]
 800406a:	f361 0341 	bfi	r3, r1, #1, #1
 800406e:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8004070:	7a3b      	ldrb	r3, [r7, #8]
 8004072:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004076:	b2d9      	uxtb	r1, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	7853      	ldrb	r3, [r2, #1]
 800407c:	f361 0300 	bfi	r3, r1, #0, #1
 8004080:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d00e      	beq.n	80040a8 <lis2duxs12_i3c_configure_get+0x64>
 800408a:	2b02      	cmp	r3, #2
 800408c:	dc10      	bgt.n	80040b0 <lis2duxs12_i3c_configure_get+0x6c>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <lis2duxs12_i3c_configure_get+0x54>
 8004092:	2b01      	cmp	r3, #1
 8004094:	d004      	beq.n	80040a0 <lis2duxs12_i3c_configure_get+0x5c>
 8004096:	e00b      	b.n	80040b0 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
      break;
 800409e:	e00b      	b.n	80040b8 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e007      	b.n	80040b8 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
      break;
 80040ae:	e003      	b.n	80040b8 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2203      	movs	r2, #3
 80040b4:	701a      	strb	r2, [r3, #0]
      break;
 80040b6:	bf00      	nop
  }

  return ret;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80040ce:	f107 0208 	add.w	r2, r7, #8
 80040d2:	2301      	movs	r3, #1
 80040d4:	213f      	movs	r1, #63	@ 0x3f
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff faea 	bl	80036b0 <lis2duxs12_read_reg>
 80040dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	7a3b      	ldrb	r3, [r7, #8]
 80040ee:	f362 13c7 	bfi	r3, r2, #7, #1
 80040f2:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80040f4:	f107 0208 	add.w	r2, r7, #8
 80040f8:	2301      	movs	r3, #1
 80040fa:	213f      	movs	r1, #63	@ 0x3f
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff faf4 	bl	80036ea <lis2duxs12_write_reg>
 8004102:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b08a      	sub	sp, #40	@ 0x28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800411c:	f107 0220 	add.w	r2, r7, #32
 8004120:	2301      	movs	r3, #1
 8004122:	2113      	movs	r1, #19
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fac3 	bl	80036b0 <lis2duxs12_read_reg>
 800412a:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800412c:	f107 021c 	add.w	r2, r7, #28
 8004130:	2301      	movs	r3, #1
 8004132:	2115      	movs	r1, #21
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fabb 	bl	80036b0 <lis2duxs12_read_reg>
 800413a:	4602      	mov	r2, r0
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	4413      	add	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8004142:	f107 0214 	add.w	r2, r7, #20
 8004146:	2301      	movs	r3, #1
 8004148:	2147      	movs	r1, #71	@ 0x47
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff fab0 	bl	80036b0 <lis2duxs12_read_reg>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	4413      	add	r3, r2
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004158:	f107 0218 	add.w	r2, r7, #24
 800415c:	2301      	movs	r3, #1
 800415e:	2116      	movs	r1, #22
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff faa5 	bl	80036b0 <lis2duxs12_read_reg>
 8004166:	4602      	mov	r2, r0
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	4413      	add	r3, r2
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	f040 808a 	bne.w	800428a <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 8004176:	793b      	ldrb	r3, [r7, #4]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d00e      	beq.n	800419a <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 800417c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004180:	f043 0308 	orr.w	r3, r3, #8
 8004184:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 8004188:	793b      	ldrb	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	b2da      	uxtb	r2, r3
 8004190:	7f3b      	ldrb	r3, [r7, #28]
 8004192:	f362 0302 	bfi	r3, r2, #0, #3
 8004196:	773b      	strb	r3, [r7, #28]
 8004198:	e005      	b.n	80041a6 <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 800419a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800419e:	f023 0308 	bic.w	r3, r3, #8
 80041a2:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 80041a6:	797b      	ldrb	r3, [r7, #5]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	7f3b      	ldrb	r3, [r7, #28]
 80041b0:	f362 1386 	bfi	r3, r2, #6, #1
 80041b4:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	7e3b      	ldrb	r3, [r7, #24]
 80041c0:	f362 13c7 	bfi	r3, r2, #7, #1
 80041c4:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 80041c6:	7a3b      	ldrb	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 80041cc:	7a3b      	ldrb	r3, [r7, #8]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	7d3b      	ldrb	r3, [r7, #20]
 80041d6:	f362 03c4 	bfi	r3, r2, #3, #2
 80041da:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 80041dc:	7a7b      	ldrb	r3, [r7, #9]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	7d3b      	ldrb	r3, [r7, #20]
 80041e6:	f362 0302 	bfi	r3, r2, #0, #3
 80041ea:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	7f3b      	ldrb	r3, [r7, #28]
 80041f6:	f362 13c7 	bfi	r3, r2, #7, #1
 80041fa:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 80041fc:	79bb      	ldrb	r3, [r7, #6]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d014      	beq.n	8004232 <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2da      	uxtb	r2, r3
 800421a:	7f3b      	ldrb	r3, [r7, #28]
 800421c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004220:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8004222:	79bb      	ldrb	r3, [r7, #6]
 8004224:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004228:	b2da      	uxtb	r2, r3
 800422a:	7e3b      	ldrb	r3, [r7, #24]
 800422c:	f362 0306 	bfi	r3, r2, #0, #7
 8004230:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8004232:	f107 0214 	add.w	r2, r7, #20
 8004236:	2301      	movs	r3, #1
 8004238:	2147      	movs	r1, #71	@ 0x47
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fa55 	bl	80036ea <lis2duxs12_write_reg>
 8004240:	4602      	mov	r2, r0
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	4413      	add	r3, r2
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004248:	f107 0218 	add.w	r2, r7, #24
 800424c:	2301      	movs	r3, #1
 800424e:	2116      	movs	r1, #22
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff fa4a 	bl	80036ea <lis2duxs12_write_reg>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	4413      	add	r3, r2
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800425e:	f107 021c 	add.w	r2, r7, #28
 8004262:	2301      	movs	r3, #1
 8004264:	2115      	movs	r1, #21
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fa3f 	bl	80036ea <lis2duxs12_write_reg>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	4413      	add	r3, r2
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8004274:	f107 0220 	add.w	r2, r7, #32
 8004278:	2301      	movs	r3, #1
 800427a:	2113      	movs	r1, #19
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff fa34 	bl	80036ea <lis2duxs12_write_reg>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	4413      	add	r3, r2
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800428c:	4618      	mov	r0, r3
 800428e:	3728      	adds	r7, #40	@ 0x28
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e067      	b.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	7b1a      	ldrb	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a28      	ldr	r2, [pc, #160]	@ (800438c <LIS2MDL_RegisterBusIO+0xf8>)
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a27      	ldr	r2, [pc, #156]	@ (8004390 <LIS2MDL_RegisterBusIO+0xfc>)
 80042f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d103      	bne.n	8004312 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e036      	b.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4798      	blx	r3
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e02c      	b.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d028      	beq.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d123      	bne.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10d      	bne.n	800435c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004340:	2334      	movs	r3, #52	@ 0x34
 8004342:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004344:	7afb      	ldrb	r3, [r7, #11]
 8004346:	461a      	mov	r2, r3
 8004348:	2162      	movs	r1, #98	@ 0x62
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fb1b 	bl	8004986 <LIS2MDL_Write_Reg>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d014      	beq.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	e012      	b.n	8004382 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d101      	bne.n	8004368 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	e00c      	b.n	8004382 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3320      	adds	r3, #32
 800436c:	2101      	movs	r1, #1
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ff79 	bl	8005266 <lis2mdl_i2c_interface_set>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e000      	b.n	8004382 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	080049dd 	.word	0x080049dd
 8004390:	08004a5f 	.word	0x08004a5f

08004394 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d144      	bne.n	800442e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80043a4:	f107 0208 	add.w	r2, r7, #8
 80043a8:	2301      	movs	r3, #1
 80043aa:	2162      	movs	r1, #98	@ 0x62
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb97 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	e06c      	b.n	8004498 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80043be:	f107 020c 	add.w	r2, r7, #12
 80043c2:	2301      	movs	r3, #1
 80043c4:	2160      	movs	r1, #96	@ 0x60
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fb8a 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	e05f      	b.n	8004498 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80043d8:	7a3b      	ldrb	r3, [r7, #8]
 80043da:	f043 0310 	orr.w	r3, r3, #16
 80043de:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80043e0:	7a3b      	ldrb	r3, [r7, #8]
 80043e2:	f023 0302 	bic.w	r3, r3, #2
 80043e6:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80043e8:	7b3b      	ldrb	r3, [r7, #12]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f362 0301 	bfi	r3, r2, #0, #2
 80043f0:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80043f2:	7b3b      	ldrb	r3, [r7, #12]
 80043f4:	f043 030c 	orr.w	r3, r3, #12
 80043f8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80043fa:	f107 0208 	add.w	r2, r7, #8
 80043fe:	2301      	movs	r3, #1
 8004400:	2162      	movs	r1, #98	@ 0x62
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fcab 	bl	8004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e041      	b.n	8004498 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004414:	f107 020c 	add.w	r2, r7, #12
 8004418:	2301      	movs	r3, #1
 800441a:	2160      	movs	r1, #96	@ 0x60
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fc9e 	bl	8004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d032      	beq.n	800448e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
 800442c:	e034      	b.n	8004498 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3320      	adds	r3, #32
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fe71 	bl	800511c <lis2mdl_block_data_update_set>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004440:	f04f 33ff 	mov.w	r3, #4294967295
 8004444:	e028      	b.n	8004498 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3320      	adds	r3, #32
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fde0 	bl	8005012 <lis2mdl_operating_mode_set>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
 800445c:	e01c      	b.n	8004498 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3320      	adds	r3, #32
 8004462:	2103      	movs	r1, #3
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fdfa 	bl	800505e <lis2mdl_data_rate_set>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004470:	f04f 33ff 	mov.w	r3, #4294967295
 8004474:	e010      	b.n	8004498 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3320      	adds	r3, #32
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fecc 	bl	800521a <lis2mdl_self_test_set>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e004      	b.n	8004498 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8a5 	bl	80045f8 <LIS2MDL_MAG_Disable>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	e004      	b.n	80044c4 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d10b      	bne.n	80044f6 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80044de:	2301      	movs	r3, #1
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	214f      	movs	r1, #79	@ 0x4f
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fafb 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00e      	beq.n	800450e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
 80044f4:	e00c      	b.n	8004510 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3320      	adds	r3, #32
 80044fa:	6839      	ldr	r1, [r7, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe7b 	bl	80051f8 <lis2mdl_device_id_get>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	e000      	b.n	8004510 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2232      	movs	r2, #50	@ 0x32
 800454a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <LIS2MDL_GetCapabilities+0x58>)
 8004560:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	42c80000 	.word	0x42c80000

08004574 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e032      	b.n	80045f0 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d11d      	bne.n	80045ce <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004592:	f107 020c 	add.w	r2, r7, #12
 8004596:	2301      	movs	r3, #1
 8004598:	2160      	movs	r1, #96	@ 0x60
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 faa0 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	e021      	b.n	80045f0 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80045ac:	7b3b      	ldrb	r3, [r7, #12]
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045b4:	f107 020c 	add.w	r2, r7, #12
 80045b8:	2301      	movs	r3, #1
 80045ba:	2160      	movs	r1, #96	@ 0x60
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fbce 	bl	8004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	e010      	b.n	80045f0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3320      	adds	r3, #32
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd1c 	bl	8005012 <lis2mdl_operating_mode_set>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295
 80045e4:	e004      	b.n	80045f0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e033      	b.n	8004676 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b03      	cmp	r3, #3
 8004614:	d11e      	bne.n	8004654 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004616:	f107 020c 	add.w	r2, r7, #12
 800461a:	2301      	movs	r3, #1
 800461c:	2160      	movs	r1, #96	@ 0x60
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa5e 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e022      	b.n	8004676 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004630:	7b3b      	ldrb	r3, [r7, #12]
 8004632:	2202      	movs	r2, #2
 8004634:	f362 0301 	bfi	r3, r2, #0, #2
 8004638:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800463a:	f107 020c 	add.w	r2, r7, #12
 800463e:	2301      	movs	r3, #1
 8004640:	2160      	movs	r1, #96	@ 0x60
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fb8b 	bl	8004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	e010      	b.n	8004676 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3320      	adds	r3, #32
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fcd9 	bl	8005012 <lis2mdl_operating_mode_set>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	e004      	b.n	8004676 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800468e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3320      	adds	r3, #32
 80046b2:	f107 020b 	add.w	r2, r7, #11
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fcf7 	bl	80050ac <lis2mdl_data_rate_get>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	e023      	b.n	8004712 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80046ca:	7afb      	ldrb	r3, [r7, #11]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d81b      	bhi.n	8004708 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80046d0:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046f1 	.word	0x080046f1
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	08004701 	.word	0x08004701
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4a0c      	ldr	r2, [pc, #48]	@ (800471c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80046ec:	601a      	str	r2, [r3, #0]
      break;
 80046ee:	e00f      	b.n	8004710 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004720 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80046f4:	601a      	str	r2, [r3, #0]
      break;
 80046f6:	e00b      	b.n	8004710 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80046fc:	601a      	str	r2, [r3, #0]
      break;
 80046fe:	e007      	b.n	8004710 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004704:	601a      	str	r2, [r3, #0]
      break;
 8004706:	e003      	b.n	8004710 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	60fb      	str	r3, [r7, #12]
      break;
 800470e:	bf00      	nop
  }

  return ret;
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	41200000 	.word	0x41200000
 8004720:	41a00000 	.word	0x41a00000
 8004724:	42480000 	.word	0x42480000
 8004728:	42c80000 	.word	0x42c80000

0800472c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004738:	edd7 7a00 	vldr	s15, [r7]
 800473c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004748:	d801      	bhi.n	800474e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800474a:	2300      	movs	r3, #0
 800474c:	e016      	b.n	800477c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800474e:	edd7 7a00 	vldr	s15, [r7]
 8004752:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	d801      	bhi.n	8004764 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004760:	2301      	movs	r3, #1
 8004762:	e00b      	b.n	800477c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004764:	edd7 7a00 	vldr	s15, [r7]
 8004768:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80047f0 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 800476c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d801      	bhi.n	800477a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004776:	2302      	movs	r3, #2
 8004778:	e000      	b.n	800477c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800477a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800477c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d121      	bne.n	80047ca <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004786:	f107 020c 	add.w	r2, r7, #12
 800478a:	2301      	movs	r3, #1
 800478c:	2160      	movs	r1, #96	@ 0x60
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9a6 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	e022      	b.n	80047e6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	7b3b      	ldrb	r3, [r7, #12]
 80047aa:	f362 0383 	bfi	r3, r2, #2, #2
 80047ae:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80047b0:	f107 020c 	add.w	r2, r7, #12
 80047b4:	2301      	movs	r3, #1
 80047b6:	2160      	movs	r1, #96	@ 0x60
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fad0 	bl	8004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00f      	beq.n	80047e4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	e00d      	b.n	80047e6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3320      	adds	r3, #32
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc43 	bl	800505e <lis2mdl_data_rate_set>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	e000      	b.n	80047e6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	42480000 	.word	0x42480000

080047f4 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2232      	movs	r2, #50	@ 0x32
 8004802:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3320      	adds	r3, #32
 8004838:	f107 0208 	add.w	r2, r7, #8
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fc92 	bl	8005168 <lis2mdl_magnetic_raw_get>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	e00c      	b.n	800486a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004850:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004858:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004860:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b088      	sub	sp, #32
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d134      	bne.n	80048f4 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800488a:	f107 0218 	add.w	r2, r7, #24
 800488e:	2306      	movs	r3, #6
 8004890:	2168      	movs	r1, #104	@ 0x68
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f924 	bl	8004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e06c      	b.n	800497e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80048a4:	7e7b      	ldrb	r3, [r7, #25]
 80048a6:	b21b      	sxth	r3, r3
 80048a8:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80048aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	7e3a      	ldrb	r2, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b21b      	sxth	r3, r3
 80048bc:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80048be:	7efb      	ldrb	r3, [r7, #27]
 80048c0:	b21b      	sxth	r3, r3
 80048c2:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80048c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	7eba      	ldrb	r2, [r7, #26]
 80048d0:	4413      	add	r3, r2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	b21b      	sxth	r3, r3
 80048d6:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80048d8:	7f7b      	ldrb	r3, [r7, #29]
 80048da:	b21b      	sxth	r3, r3
 80048dc:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80048de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	7f3a      	ldrb	r2, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	b21b      	sxth	r3, r3
 80048f0:	82bb      	strh	r3, [r7, #20]
 80048f2:	e00d      	b.n	8004910 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3320      	adds	r3, #32
 80048f8:	f107 0210 	add.w	r2, r7, #16
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fc32 	bl	8005168 <lis2mdl_magnetic_raw_get>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	e036      	b.n	800497e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff feb1 	bl	800467e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800491c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004928:	edd7 7a03 	vldr	s15, [r7, #12]
 800492c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004934:	ee17 2a90 	vmov	r2, s15
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800493c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004948:	edd7 7a03 	vldr	s15, [r7, #12]
 800494c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004954:	ee17 2a90 	vmov	r2, s15
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800495c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004968:	edd7 7a03 	vldr	s15, [r7, #12]
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004974:	ee17 2a90 	vmov	r2, s15
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	70fb      	strb	r3, [r7, #3]
 8004992:	4613      	mov	r3, r2
 8004994:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d10b      	bne.n	80049b6 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800499e:	1cba      	adds	r2, r7, #2
 80049a0:	78f9      	ldrb	r1, [r7, #3]
 80049a2:	2301      	movs	r3, #1
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f9da 	bl	8004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	e00e      	b.n	80049d4 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f103 0020 	add.w	r0, r3, #32
 80049bc:	1cba      	adds	r2, r7, #2
 80049be:	78f9      	ldrb	r1, [r7, #3]
 80049c0:	2301      	movs	r3, #1
 80049c2:	f000 fb08 	bl	8004fd6 <lis2mdl_write_reg>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295
 80049d0:	e000      	b.n	80049d4 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	461a      	mov	r2, r3
 80049e8:	460b      	mov	r3, r1
 80049ea:	72fb      	strb	r3, [r7, #11]
 80049ec:	4613      	mov	r3, r2
 80049ee:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10e      	bne.n	8004a1a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	695c      	ldr	r4, [r3, #20]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	7b1b      	ldrb	r3, [r3, #12]
 8004a04:	4618      	mov	r0, r3
 8004a06:	7afb      	ldrb	r3, [r7, #11]
 8004a08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	47a0      	blx	r4
 8004a16:	4603      	mov	r3, r0
 8004a18:	e01d      	b.n	8004a56 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d10b      	bne.n	8004a3a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	695c      	ldr	r4, [r3, #20]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	7b1b      	ldrb	r3, [r3, #12]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	7afb      	ldrb	r3, [r7, #11]
 8004a2e:	b299      	uxth	r1, r3
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	47a0      	blx	r4
 8004a36:	4603      	mov	r3, r0
 8004a38:	e00d      	b.n	8004a56 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	695c      	ldr	r4, [r3, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	893b      	ldrh	r3, [r7, #8]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	47a0      	blx	r4
 8004a54:	4603      	mov	r3, r0
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd90      	pop	{r4, r7, pc}

08004a5e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a5e:	b590      	push	{r4, r7, lr}
 8004a60:	b087      	sub	sp, #28
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	72fb      	strb	r3, [r7, #11]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	691c      	ldr	r4, [r3, #16]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	7b1b      	ldrb	r3, [r3, #12]
 8004a86:	4618      	mov	r0, r3
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	893b      	ldrh	r3, [r7, #8]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	47a0      	blx	r4
 8004a98:	4603      	mov	r3, r0
 8004a9a:	e01d      	b.n	8004ad8 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d10b      	bne.n	8004abc <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	691c      	ldr	r4, [r3, #16]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	7b1b      	ldrb	r3, [r3, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	b299      	uxth	r1, r3
 8004ab2:	893b      	ldrh	r3, [r7, #8]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	47a0      	blx	r4
 8004ab8:	4603      	mov	r3, r0
 8004aba:	e00d      	b.n	8004ad8 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	691c      	ldr	r4, [r3, #16]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	7b1b      	ldrb	r3, [r3, #12]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	4619      	mov	r1, r3
 8004ad0:	893b      	ldrh	r3, [r7, #8]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	47a0      	blx	r4
 8004ad6:	4603      	mov	r3, r0
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}

08004ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	@ 0x30
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	461a      	mov	r2, r3
 8004aec:	460b      	mov	r3, r1
 8004aee:	72fb      	strb	r3, [r7, #11]
 8004af0:	4613      	mov	r3, r2
 8004af2:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004afa:	2340      	movs	r3, #64	@ 0x40
 8004afc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004b06:	233d      	movs	r3, #61	@ 0x3d
 8004b08:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004b0a:	2315      	movs	r3, #21
 8004b0c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004b10:	2316      	movs	r3, #22
 8004b12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004b16:	2317      	movs	r3, #23
 8004b18:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004b1c:	2314      	movs	r3, #20
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004b22:	2344      	movs	r3, #68	@ 0x44
 8004b24:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004b26:	2302      	movs	r3, #2
 8004b28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004b2c:	2339      	movs	r3, #57	@ 0x39
 8004b2e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004b38:	2329      	movs	r3, #41	@ 0x29
 8004b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004b3e:	231e      	movs	r3, #30
 8004b40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004b5c:	2340      	movs	r3, #64	@ 0x40
 8004b5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f103 0020 	add.w	r0, r3, #32
 8004b68:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004b6c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004b70:	2301      	movs	r3, #1
 8004b72:	f000 fa30 	bl	8004fd6 <lis2mdl_write_reg>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	e0e9      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f103 0020 	add.w	r0, r3, #32
 8004b88:	f107 021f 	add.w	r2, r7, #31
 8004b8c:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004b90:	2301      	movs	r3, #1
 8004b92:	f000 fa20 	bl	8004fd6 <lis2mdl_write_reg>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba0:	e0d9      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f103 0020 	add.w	r0, r3, #32
 8004ba8:	f107 020b 	add.w	r2, r7, #11
 8004bac:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f000 fa10 	bl	8004fd6 <lis2mdl_write_reg>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	e0c9      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f103 0020 	add.w	r0, r3, #32
 8004bc8:	f107 021d 	add.w	r2, r7, #29
 8004bcc:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f000 fa00 	bl	8004fd6 <lis2mdl_write_reg>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	e0b9      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f103 0020 	add.w	r0, r3, #32
 8004be8:	f107 021e 	add.w	r2, r7, #30
 8004bec:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f000 f9f0 	bl	8004fd6 <lis2mdl_write_reg>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004c00:	e0a9      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f103 0020 	add.w	r0, r3, #32
 8004c08:	f107 0220 	add.w	r2, r7, #32
 8004c0c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004c10:	2301      	movs	r3, #1
 8004c12:	f000 f9e0 	bl	8004fd6 <lis2mdl_write_reg>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	e099      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f103 0020 	add.w	r0, r3, #32
 8004c28:	f107 021c 	add.w	r2, r7, #28
 8004c2c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c30:	2301      	movs	r3, #1
 8004c32:	f000 f9b2 	bl	8004f9a <lis2mdl_read_reg>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	e089      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004c42:	7f3b      	ldrb	r3, [r7, #28]
 8004c44:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d102      	bne.n	8004c52 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004c50:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f103 0020 	add.w	r0, r3, #32
 8004c58:	f107 021c 	add.w	r2, r7, #28
 8004c5c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c60:	2301      	movs	r3, #1
 8004c62:	f000 f9b8 	bl	8004fd6 <lis2mdl_write_reg>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c70:	e071      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f103 0020 	add.w	r0, r3, #32
 8004c78:	f107 0214 	add.w	r2, r7, #20
 8004c7c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004c80:	2306      	movs	r3, #6
 8004c82:	f000 f98a 	bl	8004f9a <lis2mdl_read_reg>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c90:	e061      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f103 0020 	add.w	r0, r3, #32
 8004c98:	f107 021b 	add.w	r2, r7, #27
 8004c9c:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f000 f97a 	bl	8004f9a <lis2mdl_read_reg>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	e051      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004cb2:	7efa      	ldrb	r2, [r7, #27]
 8004cb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1e6      	bne.n	8004c92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f103 0020 	add.w	r0, r3, #32
 8004cca:	f107 021b 	add.w	r2, r7, #27
 8004cce:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f000 f961 	bl	8004f9a <lis2mdl_read_reg>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	e038      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004ce4:	7efa      	ldrb	r2, [r7, #27]
 8004ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cea:	4013      	ands	r3, r2
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d1e6      	bne.n	8004cc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f103 0020 	add.w	r0, r3, #32
 8004cfc:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004d00:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004d04:	2301      	movs	r3, #1
 8004d06:	f000 f966 	bl	8004fd6 <lis2mdl_write_reg>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	e01f      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f103 0020 	add.w	r0, r3, #32
 8004d1c:	893b      	ldrh	r3, [r7, #8]
 8004d1e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	f000 f939 	bl	8004f9a <lis2mdl_read_reg>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e010      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f103 0020 	add.w	r0, r3, #32
 8004d3a:	f107 0220 	add.w	r2, r7, #32
 8004d3e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004d42:	2301      	movs	r3, #1
 8004d44:	f000 f947 	bl	8004fd6 <lis2mdl_write_reg>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	e000      	b.n	8004d56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3730      	adds	r7, #48	@ 0x30
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08c      	sub	sp, #48	@ 0x30
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	72fb      	strb	r3, [r7, #11]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004d78:	2340      	movs	r3, #64	@ 0x40
 8004d7a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004d84:	233c      	movs	r3, #60	@ 0x3c
 8004d86:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004d88:	2315      	movs	r3, #21
 8004d8a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004d8e:	2316      	movs	r3, #22
 8004d90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004d94:	2317      	movs	r3, #23
 8004d96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004d9e:	2314      	movs	r3, #20
 8004da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004da4:	2344      	movs	r3, #68	@ 0x44
 8004da6:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004da8:	2339      	movs	r3, #57	@ 0x39
 8004daa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004db4:	2329      	movs	r3, #41	@ 0x29
 8004db6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004dba:	231e      	movs	r3, #30
 8004dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004dd2:	2340      	movs	r3, #64	@ 0x40
 8004dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004dd8:	230e      	movs	r3, #14
 8004dda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f103 0020 	add.w	r0, r3, #32
 8004de4:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004de8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004dec:	2301      	movs	r3, #1
 8004dee:	f000 f8f2 	bl	8004fd6 <lis2mdl_write_reg>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfc:	e0c9      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f103 0020 	add.w	r0, r3, #32
 8004e04:	f107 021f 	add.w	r2, r7, #31
 8004e08:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f000 f8e2 	bl	8004fd6 <lis2mdl_write_reg>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	e0b9      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f103 0020 	add.w	r0, r3, #32
 8004e24:	f107 020b 	add.w	r2, r7, #11
 8004e28:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f000 f8d2 	bl	8004fd6 <lis2mdl_write_reg>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	e0a9      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f103 0020 	add.w	r0, r3, #32
 8004e44:	f107 021e 	add.w	r2, r7, #30
 8004e48:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f000 f8c2 	bl	8004fd6 <lis2mdl_write_reg>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	e099      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f103 0020 	add.w	r0, r3, #32
 8004e64:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004e68:	2301      	movs	r3, #1
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	f000 f8b3 	bl	8004fd6 <lis2mdl_write_reg>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	e08a      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f103 0020 	add.w	r0, r3, #32
 8004e82:	f107 021d 	add.w	r2, r7, #29
 8004e86:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f000 f8a3 	bl	8004fd6 <lis2mdl_write_reg>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	e07a      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f103 0020 	add.w	r0, r3, #32
 8004ea2:	f107 0220 	add.w	r2, r7, #32
 8004ea6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f000 f893 	bl	8004fd6 <lis2mdl_write_reg>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	e06a      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f103 0020 	add.w	r0, r3, #32
 8004ec2:	f107 021c 	add.w	r2, r7, #28
 8004ec6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f000 f865 	bl	8004f9a <lis2mdl_read_reg>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	e05a      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004edc:	7f3b      	ldrb	r3, [r7, #28]
 8004ede:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d102      	bne.n	8004eec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004eea:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f103 0020 	add.w	r0, r3, #32
 8004ef2:	f107 021c 	add.w	r2, r7, #28
 8004ef6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004efa:	2301      	movs	r3, #1
 8004efc:	f000 f86b 	bl	8004fd6 <lis2mdl_write_reg>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	e042      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f103 0020 	add.w	r0, r3, #32
 8004f12:	f107 0214 	add.w	r2, r7, #20
 8004f16:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	f000 f83d 	bl	8004f9a <lis2mdl_read_reg>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	e032      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f103 0020 	add.w	r0, r3, #32
 8004f32:	f107 021b 	add.w	r2, r7, #27
 8004f36:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f000 f82d 	bl	8004f9a <lis2mdl_read_reg>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4a:	e022      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004f4c:	7efa      	ldrb	r2, [r7, #27]
 8004f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f52:	4013      	ands	r3, r2
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d1e6      	bne.n	8004f2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f103 0020 	add.w	r0, r3, #32
 8004f64:	f107 021b 	add.w	r2, r7, #27
 8004f68:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f000 f814 	bl	8004f9a <lis2mdl_read_reg>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	e009      	b.n	8004f92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004f7e:	7efa      	ldrb	r2, [r7, #27]
 8004f80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f84:	4013      	ands	r3, r2
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d1e6      	bne.n	8004f5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3730      	adds	r7, #48	@ 0x30
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004f9a:	b590      	push	{r4, r7, lr}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	72fb      	strb	r3, [r7, #11]
 8004faa:	4613      	mov	r3, r2
 8004fac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb8:	e009      	b.n	8004fce <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685c      	ldr	r4, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	68d8      	ldr	r0, [r3, #12]
 8004fc2:	893b      	ldrh	r3, [r7, #8]
 8004fc4:	7af9      	ldrb	r1, [r7, #11]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	47a0      	blx	r4
 8004fca:	6178      	str	r0, [r7, #20]

  return ret;
 8004fcc:	697b      	ldr	r3, [r7, #20]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd90      	pop	{r4, r7, pc}

08004fd6 <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004fd6:	b590      	push	{r4, r7, lr}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	72fb      	strb	r3, [r7, #11]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <lis2mdl_write_reg+0x20>
  {
    return -1;
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	e009      	b.n	800500a <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681c      	ldr	r4, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68d8      	ldr	r0, [r3, #12]
 8004ffe:	893b      	ldrh	r3, [r7, #8]
 8005000:	7af9      	ldrb	r1, [r7, #11]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	47a0      	blx	r4
 8005006:	6178      	str	r0, [r7, #20]

  return ret;
 8005008:	697b      	ldr	r3, [r7, #20]
}
 800500a:	4618      	mov	r0, r3
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd90      	pop	{r4, r7, pc}

08005012 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800501e:	f107 0208 	add.w	r2, r7, #8
 8005022:	2301      	movs	r3, #1
 8005024:	2160      	movs	r1, #96	@ 0x60
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ffb7 	bl	8004f9a <lis2mdl_read_reg>
 800502c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10f      	bne.n	8005054 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	b2da      	uxtb	r2, r3
 800503c:	7a3b      	ldrb	r3, [r7, #8]
 800503e:	f362 0301 	bfi	r3, r2, #0, #2
 8005042:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005044:	f107 0208 	add.w	r2, r7, #8
 8005048:	2301      	movs	r3, #1
 800504a:	2160      	movs	r1, #96	@ 0x60
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffc2 	bl	8004fd6 <lis2mdl_write_reg>
 8005052:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800506a:	f107 0208 	add.w	r2, r7, #8
 800506e:	2301      	movs	r3, #1
 8005070:	2160      	movs	r1, #96	@ 0x60
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff ff91 	bl	8004f9a <lis2mdl_read_reg>
 8005078:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10f      	bne.n	80050a0 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	b2da      	uxtb	r2, r3
 8005088:	7a3b      	ldrb	r3, [r7, #8]
 800508a:	f362 0383 	bfi	r3, r2, #2, #2
 800508e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005090:	f107 0208 	add.w	r2, r7, #8
 8005094:	2301      	movs	r3, #1
 8005096:	2160      	movs	r1, #96	@ 0x60
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff9c 	bl	8004fd6 <lis2mdl_write_reg>
 800509e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80050b6:	f107 0208 	add.w	r2, r7, #8
 80050ba:	2301      	movs	r3, #1
 80050bc:	2160      	movs	r1, #96	@ 0x60
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff6b 	bl	8004f9a <lis2mdl_read_reg>
 80050c4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80050c6:	7a3b      	ldrb	r3, [r7, #8]
 80050c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d81a      	bhi.n	8005108 <lis2mdl_data_rate_get+0x5c>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <lis2mdl_data_rate_get+0x2c>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050f1 	.word	0x080050f1
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
      break;
 80050ee:	e00f      	b.n	8005110 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
      break;
 80050f6:	e00b      	b.n	8005110 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2202      	movs	r2, #2
 80050fc:	701a      	strb	r2, [r3, #0]
      break;
 80050fe:	e007      	b.n	8005110 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2203      	movs	r2, #3
 8005104:	701a      	strb	r2, [r3, #0]
      break;
 8005106:	e003      	b.n	8005110 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
      break;
 800510e:	bf00      	nop
  }

  return ret;
 8005110:	68fb      	ldr	r3, [r7, #12]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop

0800511c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005128:	f107 0208 	add.w	r2, r7, #8
 800512c:	2301      	movs	r3, #1
 800512e:	2162      	movs	r1, #98	@ 0x62
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff32 	bl	8004f9a <lis2mdl_read_reg>
 8005136:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	7a3b      	ldrb	r3, [r7, #8]
 8005148:	f362 1304 	bfi	r3, r2, #4, #1
 800514c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800514e:	f107 0208 	add.w	r2, r7, #8
 8005152:	2301      	movs	r3, #1
 8005154:	2162      	movs	r1, #98	@ 0x62
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ff3d 	bl	8004fd6 <lis2mdl_write_reg>
 800515c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005172:	f107 020c 	add.w	r2, r7, #12
 8005176:	2306      	movs	r3, #6
 8005178:	2168      	movs	r1, #104	@ 0x68
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ff0d 	bl	8004f9a <lis2mdl_read_reg>
 8005180:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005182:	7b7b      	ldrb	r3, [r7, #13]
 8005184:	b21a      	sxth	r2, r3
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005190:	b29b      	uxth	r3, r3
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	7b3a      	ldrb	r2, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	b21a      	sxth	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051a2:	7bfa      	ldrb	r2, [r7, #15]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	3302      	adds	r3, #2
 80051a8:	b212      	sxth	r2, r2
 80051aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	3302      	adds	r3, #2
 80051b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	7bba      	ldrb	r2, [r7, #14]
 80051bc:	4413      	add	r3, r2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	3302      	adds	r3, #2
 80051c4:	b212      	sxth	r2, r2
 80051c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80051c8:	7c7a      	ldrb	r2, [r7, #17]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	3304      	adds	r3, #4
 80051ce:	b212      	sxth	r2, r2
 80051d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	3304      	adds	r3, #4
 80051d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	b29b      	uxth	r3, r3
 80051e0:	7c3a      	ldrb	r2, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	3304      	adds	r3, #4
 80051ea:	b212      	sxth	r2, r2
 80051ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80051ee:	697b      	ldr	r3, [r7, #20]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005202:	2301      	movs	r3, #1
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	214f      	movs	r1, #79	@ 0x4f
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fec6 	bl	8004f9a <lis2mdl_read_reg>
 800520e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005226:	f107 0208 	add.w	r2, r7, #8
 800522a:	2301      	movs	r3, #1
 800522c:	2162      	movs	r1, #98	@ 0x62
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff feb3 	bl	8004f9a <lis2mdl_read_reg>
 8005234:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	7a3b      	ldrb	r3, [r7, #8]
 8005246:	f362 0341 	bfi	r3, r2, #1, #1
 800524a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800524c:	f107 0208 	add.w	r2, r7, #8
 8005250:	2301      	movs	r3, #1
 8005252:	2162      	movs	r1, #98	@ 0x62
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff febe 	bl	8004fd6 <lis2mdl_write_reg>
 800525a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005272:	f107 0208 	add.w	r2, r7, #8
 8005276:	2301      	movs	r3, #1
 8005278:	2162      	movs	r1, #98	@ 0x62
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fe8d 	bl	8004f9a <lis2mdl_read_reg>
 8005280:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	b2da      	uxtb	r2, r3
 8005290:	7a3b      	ldrb	r3, [r7, #8]
 8005292:	f362 1345 	bfi	r3, r2, #5, #1
 8005296:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005298:	f107 0208 	add.w	r2, r7, #8
 800529c:	2301      	movs	r3, #1
 800529e:	2162      	movs	r1, #98	@ 0x62
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fe98 	bl	8004fd6 <lis2mdl_write_reg>
 80052a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e051      	b.n	8005374 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	7b1a      	ldrb	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <LPS22DF_RegisterBusIO+0xcc>)
 800530c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <LPS22DF_RegisterBusIO+0xd0>)
 8005312:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d103      	bne.n	8005332 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 800532a:	f04f 33ff 	mov.w	r3, #4294967295
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	e020      	b.n	8005374 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4798      	blx	r3
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e016      	b.n	8005374 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d112      	bne.n	8005374 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8005358:	2320      	movs	r3, #32
 800535a:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	461a      	mov	r2, r3
 8005360:	210e      	movs	r1, #14
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9f3 	bl	800574e <LPS22DF_Write_Reg>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	08005af1 	.word	0x08005af1
 8005384:	08005b27 	.word	0x08005b27

08005388 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb4c 	bl	8005a38 <LPS22DF_Initialize>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	e004      	b.n	80053b6 <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d111      	bne.n	80053f4 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f882 	bl	80054da <LPS22DF_PRESS_Disable>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	e00d      	b.n	80053fe <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f927 	bl	8005636 <LPS22DF_TEMP_Disable>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295
 80053f2:	e004      	b.n	80053fe <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3320      	adds	r3, #32
 8005414:	f107 020c 	add.w	r2, r7, #12
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fc22 	bl	8005c64 <lps22df_id_get>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e003      	b.n	8005434 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 800542c:	7b3a      	ldrb	r2, [r7, #12]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2200      	movs	r2, #0
 800544a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4a08      	ldr	r2, [pc, #32]	@ (8005490 <LPS22DF_GetCapabilities+0x54>)
 8005470:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	4a06      	ldr	r2, [pc, #24]	@ (8005490 <LPS22DF_GetCapabilities+0x54>)
 8005476:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	43480000 	.word	0x43480000

08005494 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e013      	b.n	80054d2 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f103 0220 	add.w	r2, r3, #32
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3333      	adds	r3, #51	@ 0x33
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f000 fdb2 	bl	8006020 <lps22df_mode_set>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	e004      	b.n	80054d2 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e030      	b.n	8005552 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d126      	bne.n	8005548 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3320      	adds	r3, #32
 80054fe:	f107 020c 	add.w	r2, r7, #12
 8005502:	4611      	mov	r1, r2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fde9 	bl	80060dc <lps22df_mode_get>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	e01d      	b.n	8005552 <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3333      	adds	r3, #51	@ 0x33
 800551a:	461a      	mov	r2, r3
 800551c:	f107 030c 	add.w	r3, r7, #12
 8005520:	8819      	ldrh	r1, [r3, #0]
 8005522:	789b      	ldrb	r3, [r3, #2]
 8005524:	8011      	strh	r1, [r2, #0]
 8005526:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005528:	2300      	movs	r3, #0
 800552a:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3320      	adds	r3, #32
 8005530:	f107 020c 	add.w	r2, r7, #12
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fd72 	bl	8006020 <lps22df_mode_set>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	e004      	b.n	8005552 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f90c 	bl	8005784 <LPS22DF_GetOutputDataRate>
 800556c:	4603      	mov	r3, r0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005588:	2b01      	cmp	r3, #1
 800558a:	d106      	bne.n	800559a <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 800558c:	ed97 0a00 	vldr	s0, [r7]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f961 	bl	8005858 <LPS22DF_SetOutputDataRate_When_Enabled>
 8005596:	4603      	mov	r3, r0
 8005598:	e005      	b.n	80055a6 <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800559a:	ed97 0a00 	vldr	s0, [r7]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9e6 	bl	8005970 <LPS22DF_SetOutputDataRate_When_Disabled>
 80055a4:	4603      	mov	r3, r0
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3320      	adds	r3, #32
 80055bc:	f107 020c 	add.w	r2, r7, #12
 80055c0:	4611      	mov	r1, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fe56 	bl	8006274 <lps22df_pressure_raw_get>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295
 80055d2:	e009      	b.n	80055e8 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fb12 	bl	8005c00 <lps22df_from_lsb_to_hPa>
 80055dc:	eef0 7a40 	vmov.f32	s15, s0
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e013      	b.n	800562e <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f103 0220 	add.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3333      	adds	r3, #51	@ 0x33
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f000 fd04 	bl	8006020 <lps22df_mode_set>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	e004      	b.n	800562e <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	e030      	b.n	80056ae <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005652:	2b00      	cmp	r3, #0
 8005654:	d126      	bne.n	80056a4 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3320      	adds	r3, #32
 800565a:	f107 020c 	add.w	r2, r7, #12
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fd3b 	bl	80060dc <lps22df_mode_get>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 800566c:	f04f 33ff 	mov.w	r3, #4294967295
 8005670:	e01d      	b.n	80056ae <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3333      	adds	r3, #51	@ 0x33
 8005676:	461a      	mov	r2, r3
 8005678:	f107 030c 	add.w	r3, r7, #12
 800567c:	8819      	ldrh	r1, [r3, #0]
 800567e:	789b      	ldrb	r3, [r3, #2]
 8005680:	8011      	strh	r1, [r2, #0]
 8005682:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005684:	2300      	movs	r3, #0
 8005686:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3320      	adds	r3, #32
 800568c:	f107 020c 	add.w	r2, r7, #12
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fcc4 	bl	8006020 <lps22df_mode_set>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 800569e:	f04f 33ff 	mov.w	r3, #4294967295
 80056a2:	e004      	b.n	80056ae <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f85e 	bl	8005784 <LPS22DF_GetOutputDataRate>
 80056c8:	4603      	mov	r3, r0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d106      	bne.n	80056f6 <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80056e8:	ed97 0a00 	vldr	s0, [r7]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8b3 	bl	8005858 <LPS22DF_SetOutputDataRate_When_Enabled>
 80056f2:	4603      	mov	r3, r0
 80056f4:	e005      	b.n	8005702 <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80056f6:	ed97 0a00 	vldr	s0, [r7]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f938 	bl	8005970 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005700:	4603      	mov	r3, r0
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3320      	adds	r3, #32
 8005718:	f107 020e 	add.w	r2, r7, #14
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fdd1 	bl	80062c6 <lps22df_temperature_raw_get>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	e00a      	b.n	8005746 <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 8005730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fa7b 	bl	8005c30 <lps22df_from_lsb_to_celsius>
 800573a:	eef0 7a40 	vmov.f32	s15, s0
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
 800575a:	4613      	mov	r3, r2
 800575c:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f103 0020 	add.w	r0, r3, #32
 8005764:	1cba      	adds	r2, r7, #2
 8005766:	78f9      	ldrb	r1, [r7, #3]
 8005768:	2301      	movs	r3, #1
 800576a:	f000 fa15 	bl	8005b98 <lps22df_write_reg>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 8005774:	f04f 33ff 	mov.w	r3, #4294967295
 8005778:	e000      	b.n	800577c <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3320      	adds	r3, #32
 8005796:	f107 0208 	add.w	r2, r7, #8
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fc9d 	bl	80060dc <lps22df_mode_get>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e044      	b.n	8005838 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 80057ae:	7a3b      	ldrb	r3, [r7, #8]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d83c      	bhi.n	800582e <LPS22DF_GetOutputDataRate+0xaa>
 80057b4:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <LPS22DF_GetOutputDataRate+0x38>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057f5 	.word	0x080057f5
 80057c8:	080057ff 	.word	0x080057ff
 80057cc:	08005807 	.word	0x08005807
 80057d0:	0800580f 	.word	0x0800580f
 80057d4:	08005817 	.word	0x08005817
 80057d8:	0800581f 	.word	0x0800581f
 80057dc:	08005827 	.word	0x08005827
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
      break;
 80057e8:	e025      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80057f0:	601a      	str	r2, [r3, #0]
      break;
 80057f2:	e020      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80057fa:	601a      	str	r2, [r3, #0]
      break;
 80057fc:	e01b      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4a0f      	ldr	r2, [pc, #60]	@ (8005840 <LPS22DF_GetOutputDataRate+0xbc>)
 8005802:	601a      	str	r2, [r3, #0]
      break;
 8005804:	e017      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	4a0e      	ldr	r2, [pc, #56]	@ (8005844 <LPS22DF_GetOutputDataRate+0xc0>)
 800580a:	601a      	str	r2, [r3, #0]
      break;
 800580c:	e013      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4a0d      	ldr	r2, [pc, #52]	@ (8005848 <LPS22DF_GetOutputDataRate+0xc4>)
 8005812:	601a      	str	r2, [r3, #0]
      break;
 8005814:	e00f      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	4a0c      	ldr	r2, [pc, #48]	@ (800584c <LPS22DF_GetOutputDataRate+0xc8>)
 800581a:	601a      	str	r2, [r3, #0]
      break;
 800581c:	e00b      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	4a0b      	ldr	r2, [pc, #44]	@ (8005850 <LPS22DF_GetOutputDataRate+0xcc>)
 8005822:	601a      	str	r2, [r3, #0]
      break;
 8005824:	e007      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <LPS22DF_GetOutputDataRate+0xd0>)
 800582a:	601a      	str	r2, [r3, #0]
      break;
 800582c:	e003      	b.n	8005836 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	60fb      	str	r3, [r7, #12]
      break;
 8005834:	bf00      	nop
  }

  return ret;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	41200000 	.word	0x41200000
 8005844:	41c80000 	.word	0x41c80000
 8005848:	42480000 	.word	0x42480000
 800584c:	42960000 	.word	0x42960000
 8005850:	42c80000 	.word	0x42c80000
 8005854:	43480000 	.word	0x43480000

08005858 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3320      	adds	r3, #32
 8005868:	f107 020c 	add.w	r2, r7, #12
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fc34 	bl	80060dc <lps22df_mode_get>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	e06c      	b.n	800595a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005880:	edd7 7a00 	vldr	s15, [r7]
 8005884:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800588c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005890:	d801      	bhi.n	8005896 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8005892:	2301      	movs	r3, #1
 8005894:	e042      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005896:	edd7 7a00 	vldr	s15, [r7]
 800589a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800589e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a6:	d801      	bhi.n	80058ac <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e037      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058ac:	edd7 7a00 	vldr	s15, [r7]
 80058b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80058b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058bc:	d801      	bhi.n	80058c2 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 80058be:	2303      	movs	r3, #3
 80058c0:	e02c      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058c2:	edd7 7a00 	vldr	s15, [r7]
 80058c6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80058ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	d801      	bhi.n	80058d8 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 80058d4:	2304      	movs	r3, #4
 80058d6:	e021      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058d8:	edd7 7a00 	vldr	s15, [r7]
 80058dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005964 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 80058e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	d801      	bhi.n	80058ee <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e016      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058ee:	edd7 7a00 	vldr	s15, [r7]
 80058f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005968 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 80058f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fe:	d801      	bhi.n	8005904 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8005900:	2306      	movs	r3, #6
 8005902:	e00b      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005904:	edd7 7a00 	vldr	s15, [r7]
 8005908:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800596c <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 800590c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	d801      	bhi.n	800591a <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8005916:	2307      	movs	r3, #7
 8005918:	e000      	b.n	800591c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800591a:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 800591c:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3320      	adds	r3, #32
 8005922:	f107 020c 	add.w	r2, r7, #12
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fb79 	bl	8006020 <lps22df_mode_set>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	e00f      	b.n	800595a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f103 0220 	add.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3333      	adds	r3, #51	@ 0x33
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 fbc8 	bl	80060dc <lps22df_mode_get>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	e000      	b.n	800595a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	42480000 	.word	0x42480000
 8005968:	42960000 	.word	0x42960000
 800596c:	42c80000 	.word	0x42c80000

08005970 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 800597c:	edd7 7a00 	vldr	s15, [r7]
 8005980:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598c:	d801      	bhi.n	8005992 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 800598e:	2301      	movs	r3, #1
 8005990:	e042      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005992:	edd7 7a00 	vldr	s15, [r7]
 8005996:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800599a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a2:	d801      	bhi.n	80059a8 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e037      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059a8:	edd7 7a00 	vldr	s15, [r7]
 80059ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80059b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b8:	d801      	bhi.n	80059be <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 80059ba:	2303      	movs	r3, #3
 80059bc:	e02c      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059be:	edd7 7a00 	vldr	s15, [r7]
 80059c2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80059c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ce:	d801      	bhi.n	80059d4 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 80059d0:	2304      	movs	r3, #4
 80059d2:	e021      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059d4:	edd7 7a00 	vldr	s15, [r7]
 80059d8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005a2c <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 80059dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e4:	d801      	bhi.n	80059ea <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 80059e6:	2305      	movs	r3, #5
 80059e8:	e016      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059ea:	edd7 7a00 	vldr	s15, [r7]
 80059ee:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005a30 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 80059f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fa:	d801      	bhi.n	8005a00 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 80059fc:	2306      	movs	r3, #6
 80059fe:	e00b      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a00:	edd7 7a00 	vldr	s15, [r7]
 8005a04:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005a34 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	d801      	bhi.n	8005a16 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8005a12:	2307      	movs	r3, #7
 8005a14:	e000      	b.n	8005a18 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a16:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	42480000 	.word	0x42480000
 8005a30:	42960000 	.word	0x42960000
 8005a34:	42c80000 	.word	0x42c80000

08005a38 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3320      	adds	r3, #32
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f983 	bl	8005d52 <lps22df_init_set>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295
 8005a56:	e047      	b.n	8005ae8 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d102      	bne.n	8005a66 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8005a60:	2303      	movs	r3, #3
 8005a62:	723b      	strb	r3, [r7, #8]
 8005a64:	e008      	b.n	8005a78 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d102      	bne.n	8005a74 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	723b      	strb	r3, [r7, #8]
 8005a72:	e001      	b.n	8005a78 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8005a74:	2300      	movs	r3, #0
 8005a76:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3320      	adds	r3, #32
 8005a80:	f107 0208 	add.w	r2, r7, #8
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f901 	bl	8005c8e <lps22df_bus_mode_set>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	e027      	b.n	8005ae8 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3320      	adds	r3, #32
 8005aa8:	f107 020c 	add.w	r2, r7, #12
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fab6 	bl	8006020 <lps22df_mode_set>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295
 8005abe:	e013      	b.n	8005ae8 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f103 0220 	add.w	r2, r3, #32
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3333      	adds	r3, #51	@ 0x33
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 fb05 	bl	80060dc <lps22df_mode_get>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	e004      	b.n	8005ae8 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	461a      	mov	r2, r3
 8005afc:	460b      	mov	r3, r1
 8005afe:	72fb      	strb	r3, [r7, #11]
 8005b00:	4613      	mov	r3, r2
 8005b02:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	695c      	ldr	r4, [r3, #20]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	7b1b      	ldrb	r3, [r3, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	b299      	uxth	r1, r3
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	47a0      	blx	r4
 8005b1c:	4603      	mov	r3, r0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}

08005b26 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b087      	sub	sp, #28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	461a      	mov	r2, r3
 8005b32:	460b      	mov	r3, r1
 8005b34:	72fb      	strb	r3, [r7, #11]
 8005b36:	4613      	mov	r3, r2
 8005b38:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	691c      	ldr	r4, [r3, #16]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	7b1b      	ldrb	r3, [r3, #12]
 8005b46:	4618      	mov	r0, r3
 8005b48:	7afb      	ldrb	r3, [r7, #11]
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	893b      	ldrh	r3, [r7, #8]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	47a0      	blx	r4
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	460b      	mov	r3, r1
 8005b6a:	72fb      	strb	r3, [r7, #11]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <lps22df_read_reg+0x20>
  {
    return -1;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	e009      	b.n	8005b90 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685c      	ldr	r4, [r3, #4]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68d8      	ldr	r0, [r3, #12]
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	7af9      	ldrb	r1, [r7, #11]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	47a0      	blx	r4
 8005b8c:	6178      	str	r0, [r7, #20]

  return ret;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd90      	pop	{r4, r7, pc}

08005b98 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	72fb      	strb	r3, [r7, #11]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <lps22df_write_reg+0x20>
  {
    return -1;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	e009      	b.n	8005bcc <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681c      	ldr	r4, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68d8      	ldr	r0, [r3, #12]
 8005bc0:	893b      	ldrh	r3, [r7, #8]
 8005bc2:	7af9      	ldrb	r1, [r7, #11]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	47a0      	blx	r4
 8005bc8:	6178      	str	r0, [r7, #20]

  return ret;
 8005bca:	697b      	ldr	r3, [r7, #20]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd90      	pop	{r4, r7, pc}

08005bd4 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d006      	beq.n	8005bf2 <bytecpy+0x1e>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <bytecpy+0x1e>
  {
    *target = *source;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	701a      	strb	r2, [r3, #0]
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c12:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c2c <lps22df_from_lsb_to_hPa+0x2c>
 8005c16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c1a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	49800000 	.word	0x49800000

08005c30 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8005c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c46:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c60 <lps22df_from_lsb_to_celsius+0x30>
 8005c4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c52:	eeb0 0a67 	vmov.f32	s0, s15
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	42c80000 	.word	0x42c80000

08005c64 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8005c6e:	f107 020b 	add.w	r2, r7, #11
 8005c72:	2301      	movs	r3, #1
 8005c74:	210f      	movs	r1, #15
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff ff70 	bl	8005b5c <lps22df_read_reg>
 8005c7c:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8005c7e:	7afa      	ldrb	r2, [r7, #11]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	701a      	strb	r2, [r3, #0]

  return ret;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005c98:	f107 020c 	add.w	r2, r7, #12
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	210e      	movs	r1, #14
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff5b 	bl	8005b5c <lps22df_read_reg>
 8005ca6:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d124      	bne.n	8005cf8 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	7b3b      	ldrb	r3, [r7, #12]
 8005cbc:	f362 1386 	bfi	r3, r2, #6, #1
 8005cc0:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	7b3b      	ldrb	r3, [r7, #12]
 8005cd0:	f362 13c7 	bfi	r3, r2, #7, #1
 8005cd4:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	7b3b      	ldrb	r3, [r7, #12]
 8005ce2:	f362 1345 	bfi	r3, r2, #5, #1
 8005ce6:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005ce8:	f107 020c 	add.w	r2, r7, #12
 8005cec:	2301      	movs	r3, #1
 8005cee:	210e      	movs	r1, #14
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff51 	bl	8005b98 <lps22df_write_reg>
 8005cf6:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005cfe:	f107 0210 	add.w	r2, r7, #16
 8005d02:	2301      	movs	r3, #1
 8005d04:	2119      	movs	r1, #25
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff ff28 	bl	8005b5c <lps22df_read_reg>
 8005d0c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d119      	bne.n	8005d48 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	7c3b      	ldrb	r3, [r7, #16]
 8005d20:	f362 1345 	bfi	r3, r2, #5, #1
 8005d24:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	7c3b      	ldrb	r3, [r7, #16]
 8005d32:	f362 0301 	bfi	r3, r2, #0, #2
 8005d36:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005d38:	f107 0210 	add.w	r2, r7, #16
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	2119      	movs	r1, #25
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff29 	bl	8005b98 <lps22df_write_reg>
 8005d46:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 8005d48:	697b      	ldr	r3, [r7, #20]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08a      	sub	sp, #40	@ 0x28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005d64:	f107 020c 	add.w	r2, r7, #12
 8005d68:	2302      	movs	r3, #2
 8005d6a:	2111      	movs	r1, #17
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fef5 	bl	8005b5c <lps22df_read_reg>
 8005d72:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 80c8 	bne.w	8005f0c <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8005d7c:	f107 020c 	add.w	r2, r7, #12
 8005d80:	f107 031c 	add.w	r3, r7, #28
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff ff24 	bl	8005bd4 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8005d8c:	f107 030c 	add.w	r3, r7, #12
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	f107 0318 	add.w	r3, r7, #24
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff ff1b 	bl	8005bd4 <bytecpy>

    switch (val)
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d043      	beq.n	8005e2c <lps22df_init_set+0xda>
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	f300 809d 	bgt.w	8005ee4 <lps22df_init_set+0x192>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d078      	beq.n	8005ea0 <lps22df_init_set+0x14e>
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	f040 8098 	bne.w	8005ee4 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8005db4:	7f3b      	ldrb	r3, [r7, #28]
 8005db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dba:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005dbc:	f107 021c 	add.w	r2, r7, #28
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	2111      	movs	r1, #17
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fee7 	bl	8005b98 <lps22df_write_reg>
 8005dca:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 8095 	bne.w	8005efe <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8005dd4:	f107 0214 	add.w	r2, r7, #20
 8005dd8:	2301      	movs	r3, #1
 8005dda:	2124      	movs	r1, #36	@ 0x24
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff febd 	bl	8005b5c <lps22df_read_reg>
 8005de2:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d115      	bne.n	8005e16 <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8005dea:	7d3b      	ldrb	r3, [r7, #20]
 8005dec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d011      	beq.n	8005e1a <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	200a      	movs	r0, #10
 8005e04:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d9df      	bls.n	8005dd4 <lps22df_init_set+0x82>
 8005e14:	e002      	b.n	8005e1c <lps22df_init_set+0xca>
            break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <lps22df_init_set+0xca>
            break;
 8005e1a:	bf00      	nop

        if (cnt >= 5U)
 8005e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d96e      	bls.n	8005f02 <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	623b      	str	r3, [r7, #32]
        }

        break;
 8005e2a:	e06a      	b.n	8005f02 <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005e2c:	7f3b      	ldrb	r3, [r7, #28]
 8005e2e:	f043 0304 	orr.w	r3, r3, #4
 8005e32:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005e34:	f107 021c 	add.w	r2, r7, #28
 8005e38:	2301      	movs	r3, #1
 8005e3a:	2111      	movs	r1, #17
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff feab 	bl	8005b98 <lps22df_write_reg>
 8005e42:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d15d      	bne.n	8005f06 <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8005e4a:	f107 0310 	add.w	r3, r7, #16
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f860 	bl	8005f16 <lps22df_status_get>
 8005e56:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d115      	bne.n	8005e8a <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 8005e5e:	7c3b      	ldrb	r3, [r7, #16]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d011      	beq.n	8005e8e <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2001      	movs	r0, #1
 8005e78:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d9e0      	bls.n	8005e4a <lps22df_init_set+0xf8>
 8005e88:	e002      	b.n	8005e90 <lps22df_init_set+0x13e>
            break;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <lps22df_init_set+0x13e>
            break;
 8005e8e:	bf00      	nop

        if (cnt >= 5U)
 8005e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d938      	bls.n	8005f0a <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9c:	623b      	str	r3, [r7, #32]
        }

        break;
 8005e9e:	e034      	b.n	8005f0a <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8005ea0:	7f3b      	ldrb	r3, [r7, #28]
 8005ea2:	f043 0308 	orr.w	r3, r3, #8
 8005ea6:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8005ea8:	7e3b      	ldrb	r3, [r7, #24]
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8005eb0:	f107 021c 	add.w	r2, r7, #28
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fe8a 	bl	8005bd4 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8005ec0:	f107 0218 	add.w	r2, r7, #24
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	3301      	adds	r3, #1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fe81 	bl	8005bd4 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005ed2:	f107 020c 	add.w	r2, r7, #12
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	2111      	movs	r1, #17
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff fe5c 	bl	8005b98 <lps22df_write_reg>
 8005ee0:	6238      	str	r0, [r7, #32]
        break;
 8005ee2:	e013      	b.n	8005f0c <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005ee4:	7f3b      	ldrb	r3, [r7, #28]
 8005ee6:	f043 0304 	orr.w	r3, r3, #4
 8005eea:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005eec:	f107 021c 	add.w	r2, r7, #28
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	2111      	movs	r1, #17
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fe4f 	bl	8005b98 <lps22df_write_reg>
 8005efa:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8005efc:	e006      	b.n	8005f0c <lps22df_init_set+0x1ba>
          break;
 8005efe:	bf00      	nop
 8005f00:	e004      	b.n	8005f0c <lps22df_init_set+0x1ba>
        break;
 8005f02:	bf00      	nop
 8005f04:	e002      	b.n	8005f0c <lps22df_init_set+0x1ba>
          break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <lps22df_init_set+0x1ba>
        break;
 8005f0a:	bf00      	nop
    }
  }

  return ret;
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3728      	adds	r7, #40	@ 0x28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b088      	sub	sp, #32
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8005f20:	f107 0210 	add.w	r2, r7, #16
 8005f24:	2301      	movs	r3, #1
 8005f26:	2111      	movs	r1, #17
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fe17 	bl	8005b5c <lps22df_read_reg>
 8005f2e:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d107      	bne.n	8005f46 <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8005f36:	f107 0214 	add.w	r2, r7, #20
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	2124      	movs	r1, #36	@ 0x24
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fe0c 	bl	8005b5c <lps22df_read_reg>
 8005f44:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8005f4c:	f107 020c 	add.w	r2, r7, #12
 8005f50:	2301      	movs	r3, #1
 8005f52:	2127      	movs	r1, #39	@ 0x27
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fe01 	bl	8005b5c <lps22df_read_reg>
 8005f5a:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 8005f62:	f107 0218 	add.w	r2, r7, #24
 8005f66:	2301      	movs	r3, #1
 8005f68:	210b      	movs	r1, #11
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fdf6 	bl	8005b5c <lps22df_read_reg>
 8005f70:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 8005f72:	7c3b      	ldrb	r3, [r7, #16]
 8005f74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f78:	b2d9      	uxtb	r1, r3
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	7813      	ldrb	r3, [r2, #0]
 8005f7e:	f361 0300 	bfi	r3, r1, #0, #1
 8005f82:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 8005f84:	7d3b      	ldrb	r3, [r7, #20]
 8005f86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f8a:	b2d9      	uxtb	r1, r3
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	7813      	ldrb	r3, [r2, #0]
 8005f90:	f361 0341 	bfi	r3, r1, #1, #1
 8005f94:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 8005f96:	7b3b      	ldrb	r3, [r7, #12]
 8005f98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f9c:	b2d9      	uxtb	r1, r3
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	7813      	ldrb	r3, [r2, #0]
 8005fa2:	f361 0382 	bfi	r3, r1, #2, #1
 8005fa6:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 8005fa8:	7b3b      	ldrb	r3, [r7, #12]
 8005faa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fae:	b2d9      	uxtb	r1, r3
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	7813      	ldrb	r3, [r2, #0]
 8005fb4:	f361 03c3 	bfi	r3, r1, #3, #1
 8005fb8:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 8005fba:	7b3b      	ldrb	r3, [r7, #12]
 8005fbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fc0:	b2d9      	uxtb	r1, r3
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	7813      	ldrb	r3, [r2, #0]
 8005fc6:	f361 1304 	bfi	r3, r1, #4, #1
 8005fca:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 8005fcc:	7b3b      	ldrb	r3, [r7, #12]
 8005fce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fd2:	b2d9      	uxtb	r1, r3
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	7813      	ldrb	r3, [r2, #0]
 8005fd8:	f361 1345 	bfi	r3, r1, #5, #1
 8005fdc:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 8005fde:	7c3b      	ldrb	r3, [r7, #16]
 8005fe0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	b2d9      	uxtb	r1, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	7813      	ldrb	r3, [r2, #0]
 8005ff4:	f361 1386 	bfi	r3, r1, #6, #1
 8005ff8:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 8005ffa:	7e3b      	ldrb	r3, [r7, #24]
 8005ffc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	b2d9      	uxtb	r1, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	7813      	ldrb	r3, [r2, #0]
 8006010:	f361 13c7 	bfi	r3, r1, #7, #1
 8006014:	7013      	strb	r3, [r2, #0]

  return ret;
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800602a:	f107 0208 	add.w	r2, r7, #8
 800602e:	2302      	movs	r3, #2
 8006030:	2110      	movs	r1, #16
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fd92 	bl	8005b5c <lps22df_read_reg>
 8006038:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d148      	bne.n	80060d2 <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8006040:	f107 0208 	add.w	r2, r7, #8
 8006044:	f107 0310 	add.w	r3, r7, #16
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fdc2 	bl	8005bd4 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	f107 030c 	add.w	r3, r7, #12
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fdb9 	bl	8005bd4 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	b2da      	uxtb	r2, r3
 800606c:	7c3b      	ldrb	r3, [r7, #16]
 800606e:	f362 03c6 	bfi	r3, r2, #3, #4
 8006072:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	b2da      	uxtb	r2, r3
 800607e:	7c3b      	ldrb	r3, [r7, #16]
 8006080:	f362 0302 	bfi	r3, r2, #0, #3
 8006084:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	789b      	ldrb	r3, [r3, #2]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	b2da      	uxtb	r2, r3
 8006090:	7b3b      	ldrb	r3, [r7, #12]
 8006092:	f362 1304 	bfi	r3, r2, #4, #1
 8006096:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8006098:	7b3b      	ldrb	r3, [r7, #12]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 80060a0:	f107 0210 	add.w	r2, r7, #16
 80060a4:	f107 0308 	add.w	r3, r7, #8
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fd92 	bl	8005bd4 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 80060b0:	f107 020c 	add.w	r2, r7, #12
 80060b4:	f107 0308 	add.w	r3, r7, #8
 80060b8:	3301      	adds	r3, #1
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fd89 	bl	8005bd4 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 80060c2:	f107 0208 	add.w	r2, r7, #8
 80060c6:	2302      	movs	r3, #2
 80060c8:	2110      	movs	r1, #16
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fd64 	bl	8005b98 <lps22df_write_reg>
 80060d0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80060d2:	697b      	ldr	r3, [r7, #20]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 80060e6:	f107 0208 	add.w	r2, r7, #8
 80060ea:	2302      	movs	r3, #2
 80060ec:	2110      	movs	r1, #16
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fd34 	bl	8005b5c <lps22df_read_reg>
 80060f4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 80b6 	bne.w	800626a <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80060fe:	f107 0208 	add.w	r2, r7, #8
 8006102:	f107 0310 	add.w	r3, r7, #16
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fd63 	bl	8005bd4 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fd5a 	bl	8005bd4 <bytecpy>

    switch (ctrl_reg1.odr)
 8006120:	7c3b      	ldrb	r3, [r7, #16]
 8006122:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b08      	cmp	r3, #8
 800612a:	d839      	bhi.n	80061a0 <lps22df_mode_get+0xc4>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <lps22df_mode_get+0x58>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006159 	.word	0x08006159
 8006138:	08006161 	.word	0x08006161
 800613c:	08006169 	.word	0x08006169
 8006140:	08006171 	.word	0x08006171
 8006144:	08006179 	.word	0x08006179
 8006148:	08006181 	.word	0x08006181
 800614c:	08006189 	.word	0x08006189
 8006150:	08006191 	.word	0x08006191
 8006154:	08006199 	.word	0x08006199
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
        break;
 800615e:	e023      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
        break;
 8006166:	e01f      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2202      	movs	r2, #2
 800616c:	701a      	strb	r2, [r3, #0]
        break;
 800616e:	e01b      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2203      	movs	r2, #3
 8006174:	701a      	strb	r2, [r3, #0]
        break;
 8006176:	e017      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2204      	movs	r2, #4
 800617c:	701a      	strb	r2, [r3, #0]
        break;
 800617e:	e013      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2205      	movs	r2, #5
 8006184:	701a      	strb	r2, [r3, #0]
        break;
 8006186:	e00f      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2206      	movs	r2, #6
 800618c:	701a      	strb	r2, [r3, #0]
        break;
 800618e:	e00b      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2207      	movs	r2, #7
 8006194:	701a      	strb	r2, [r3, #0]
        break;
 8006196:	e007      	b.n	80061a8 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2208      	movs	r2, #8
 800619c:	701a      	strb	r2, [r3, #0]
        break;
 800619e:	e003      	b.n	80061a8 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
        break;
 80061a6:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 80061a8:	7c3b      	ldrb	r3, [r7, #16]
 80061aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	d833      	bhi.n	800621c <lps22df_mode_get+0x140>
 80061b4:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <lps22df_mode_get+0xe0>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	08006205 	.word	0x08006205
 80061d4:	0800620d 	.word	0x0800620d
 80061d8:	08006215 	.word	0x08006215
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	705a      	strb	r2, [r3, #1]
        break;
 80061e2:	e01f      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2201      	movs	r2, #1
 80061e8:	705a      	strb	r2, [r3, #1]
        break;
 80061ea:	e01b      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2202      	movs	r2, #2
 80061f0:	705a      	strb	r2, [r3, #1]
        break;
 80061f2:	e017      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2203      	movs	r2, #3
 80061f8:	705a      	strb	r2, [r3, #1]
        break;
 80061fa:	e013      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2204      	movs	r2, #4
 8006200:	705a      	strb	r2, [r3, #1]
        break;
 8006202:	e00f      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2205      	movs	r2, #5
 8006208:	705a      	strb	r2, [r3, #1]
        break;
 800620a:	e00b      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2206      	movs	r2, #6
 8006210:	705a      	strb	r2, [r3, #1]
        break;
 8006212:	e007      	b.n	8006224 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2207      	movs	r2, #7
 8006218:	705a      	strb	r2, [r3, #1]
        break;
 800621a:	e003      	b.n	8006224 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	705a      	strb	r2, [r3, #1]
        break;
 8006222:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8006224:	7b3b      	ldrb	r3, [r7, #12]
 8006226:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	7b3a      	ldrb	r2, [r7, #12]
 8006230:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	4313      	orrs	r3, r2
 8006238:	2b03      	cmp	r3, #3
 800623a:	d00e      	beq.n	800625a <lps22df_mode_get+0x17e>
 800623c:	2b03      	cmp	r3, #3
 800623e:	dc10      	bgt.n	8006262 <lps22df_mode_get+0x186>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <lps22df_mode_get+0x16e>
 8006244:	2b01      	cmp	r3, #1
 8006246:	d004      	beq.n	8006252 <lps22df_mode_get+0x176>
 8006248:	e00b      	b.n	8006262 <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	709a      	strb	r2, [r3, #2]
        break;
 8006250:	e00b      	b.n	800626a <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2201      	movs	r2, #1
 8006256:	709a      	strb	r2, [r3, #2]
        break;
 8006258:	e007      	b.n	800626a <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2203      	movs	r2, #3
 800625e:	709a      	strb	r2, [r3, #2]
        break;
 8006260:	e003      	b.n	800626a <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2200      	movs	r2, #0
 8006266:	709a      	strb	r2, [r3, #2]
        break;
 8006268:	bf00      	nop
    }
  }
  return ret;
 800626a:	697b      	ldr	r3, [r7, #20]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 800627e:	f107 0208 	add.w	r2, r7, #8
 8006282:	2303      	movs	r3, #3
 8006284:	2128      	movs	r1, #40	@ 0x28
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fc68 	bl	8005b5c <lps22df_read_reg>
 800628c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800628e:	7abb      	ldrb	r3, [r7, #10]
 8006290:	461a      	mov	r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	7a7a      	ldrb	r2, [r7, #9]
 800629e:	441a      	add	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	7a3a      	ldrb	r2, [r7, #8]
 80062ac:	441a      	add	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	601a      	str	r2, [r3, #0]

  return ret;
 80062bc:	68fb      	ldr	r3, [r7, #12]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 80062d0:	f107 0208 	add.w	r2, r7, #8
 80062d4:	2302      	movs	r3, #2
 80062d6:	212b      	movs	r1, #43	@ 0x2b
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fc3f 	bl	8005b5c <lps22df_read_reg>
 80062de:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80062e0:	7a7b      	ldrb	r3, [r7, #9]
 80062e2:	b21a      	sxth	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	7a3a      	ldrb	r2, [r7, #8]
 80062f6:	4413      	add	r3, r2
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	b21a      	sxth	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	801a      	strh	r2, [r3, #0]

  return ret;
 8006300:	68fb      	ldr	r3, [r7, #12]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8006320:	f04f 33ff 	mov.w	r3, #4294967295
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	e04d      	b.n	80063c4 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	7b1a      	ldrb	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a1b      	ldr	r2, [pc, #108]	@ (80063d0 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8006364:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1a      	ldr	r2, [pc, #104]	@ (80063d4 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 800636a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 800637a:	f04f 33ff 	mov.w	r3, #4294967295
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e020      	b.n	80063c4 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4798      	blx	r3
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 800638e:	f04f 33ff 	mov.w	r3, #4294967295
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e016      	b.n	80063c4 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d112      	bne.n	80063c4 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10d      	bne.n	80063c4 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80063a8:	230c      	movs	r3, #12
 80063aa:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	461a      	mov	r2, r3
 80063b0:	2112      	movs	r1, #18
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fdbe 	bl	8006f34 <LSM6DSO16IS_Write_Reg>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 80063be:	f04f 33ff 	mov.w	r3, #4294967295
 80063c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80063c4:	68fb      	ldr	r3, [r7, #12]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	080073fd 	.word	0x080073fd
 80063d4:	08007433 	.word	0x08007433

080063d8 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fdc1 	bl	8006f6e <LSM6DSO16IS_Set_Mem_Bank>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295
 80063f6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3320      	adds	r3, #32
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fbdc 	bl	8007bbc <lsm6dso16is_auto_increment_set>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 800640a:	f04f 33ff 	mov.w	r3, #4294967295
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3320      	adds	r3, #32
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fbf6 	bl	8007c08 <lsm6dso16is_block_data_update_set>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8006422:	f04f 33ff 	mov.w	r3, #4294967295
 8006426:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2204      	movs	r2, #4
 800642c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3320      	adds	r3, #32
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f910 	bl	800765c <lsm6dso16is_xl_data_rate_set>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3320      	adds	r3, #32
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f8a6 	bl	80075a0 <lsm6dso16is_xl_full_scale_set>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295
 800645e:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2204      	movs	r2, #4
 8006464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3320      	adds	r3, #32
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f001 faa8 	bl	80079c4 <lsm6dso16is_gy_data_rate_set>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 800647a:	f04f 33ff 	mov.w	r3, #4294967295
 800647e:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3320      	adds	r3, #32
 8006484:	2103      	movs	r1, #3
 8006486:	4618      	mov	r0, r3
 8006488:	f001 fa10 	bl	80078ac <lsm6dso16is_gy_full_scale_set>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f890 	bl	80065e2 <LSM6DSO16IS_ACC_Disable>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fad0 	bl	8006a74 <LSM6DSO16IS_GYRO_Disable>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80064da:	f04f 33ff 	mov.w	r3, #4294967295
 80064de:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80064fe:	68fb      	ldr	r3, [r7, #12]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3320      	adds	r3, #32
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f808 	bl	8007532 <lsm6dso16is_device_id_get>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800652e:	68fb      	ldr	r3, [r7, #12]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2201      	movs	r2, #1
 800654c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2200      	movs	r2, #0
 8006552:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006560:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2210      	movs	r2, #16
 8006566:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	4a07      	ldr	r2, [pc, #28]	@ (8006590 <LSM6DSO16IS_GetCapabilities+0x58>)
 8006572:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	4a06      	ldr	r2, [pc, #24]	@ (8006590 <LSM6DSO16IS_GetCapabilities+0x58>)
 8006578:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	45505000 	.word	0x45505000

08006594 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d102      	bne.n	80065b0 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e013      	b.n	80065d8 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f103 0220 	add.w	r2, r3, #32
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f001 f84c 	bl	800765c <lsm6dso16is_xl_data_rate_set>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e01e      	b.n	800663c <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f103 0220 	add.w	r2, r3, #32
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3333      	adds	r3, #51	@ 0x33
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f001 f866 	bl	80076dc <lsm6dso16is_xl_data_rate_get>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006616:	f04f 33ff 	mov.w	r3, #4294967295
 800661a:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3320      	adds	r3, #32
 8006620:	2100      	movs	r1, #0
 8006622:	4618      	mov	r0, r3
 8006624:	f001 f81a 	bl	800765c <lsm6dso16is_xl_data_rate_set>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 800663c:	68fb      	ldr	r3, [r7, #12]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3320      	adds	r3, #32
 800665a:	f107 020b 	add.w	r2, r7, #11
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f000 ffc3 	bl	80075ec <lsm6dso16is_xl_full_scale_get>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295
 8006670:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006672:	7afb      	ldrb	r3, [r7, #11]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d81b      	bhi.n	80066b0 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8006678:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	08006691 	.word	0x08006691
 8006684:	080066a9 	.word	0x080066a9
 8006688:	08006699 	.word	0x08006699
 800668c:	080066a1 	.word	0x080066a1
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4a0c      	ldr	r2, [pc, #48]	@ (80066c4 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8006694:	601a      	str	r2, [r3, #0]
      break;
 8006696:	e00f      	b.n	80066b8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	4a0b      	ldr	r2, [pc, #44]	@ (80066c8 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 800669c:	601a      	str	r2, [r3, #0]
      break;
 800669e:	e00b      	b.n	80066b8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	4a0a      	ldr	r2, [pc, #40]	@ (80066cc <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 80066a4:	601a      	str	r2, [r3, #0]
      break;
 80066a6:	e007      	b.n	80066b8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4a09      	ldr	r2, [pc, #36]	@ (80066d0 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 80066ac:	601a      	str	r2, [r3, #0]
      break;
 80066ae:	e003      	b.n	80066b8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	60fb      	str	r3, [r7, #12]
      break;
 80066b6:	bf00      	nop
  }

  return ret;
 80066b8:	68fb      	ldr	r3, [r7, #12]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	3d79db23 	.word	0x3d79db23
 80066c8:	3df9db23 	.word	0x3df9db23
 80066cc:	3e79db23 	.word	0x3e79db23
 80066d0:	3ef9db23 	.word	0x3ef9db23

080066d4 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3320      	adds	r3, #32
 80066e6:	f107 020b 	add.w	r2, r7, #11
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fff5 	bl	80076dc <lsm6dso16is_xl_data_rate_get>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	2b1b      	cmp	r3, #27
 8006702:	d86c      	bhi.n	80067de <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8006704:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	0800677d 	.word	0x0800677d
 8006710:	0800678f 	.word	0x0800678f
 8006714:	08006797 	.word	0x08006797
 8006718:	0800679f 	.word	0x0800679f
 800671c:	080067a7 	.word	0x080067a7
 8006720:	080067af 	.word	0x080067af
 8006724:	080067b7 	.word	0x080067b7
 8006728:	080067bf 	.word	0x080067bf
 800672c:	080067c7 	.word	0x080067c7
 8006730:	080067cf 	.word	0x080067cf
 8006734:	080067d7 	.word	0x080067d7
 8006738:	080067df 	.word	0x080067df
 800673c:	080067df 	.word	0x080067df
 8006740:	080067df 	.word	0x080067df
 8006744:	080067df 	.word	0x080067df
 8006748:	080067df 	.word	0x080067df
 800674c:	080067df 	.word	0x080067df
 8006750:	0800678f 	.word	0x0800678f
 8006754:	08006797 	.word	0x08006797
 8006758:	0800679f 	.word	0x0800679f
 800675c:	080067a7 	.word	0x080067a7
 8006760:	080067af 	.word	0x080067af
 8006764:	080067b7 	.word	0x080067b7
 8006768:	080067bf 	.word	0x080067bf
 800676c:	080067c7 	.word	0x080067c7
 8006770:	080067cf 	.word	0x080067cf
 8006774:	080067d7 	.word	0x080067d7
 8006778:	08006787 	.word	0x08006787
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
      break;
 8006784:	e02f      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	4a19      	ldr	r2, [pc, #100]	@ (80067f0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 800678a:	601a      	str	r2, [r3, #0]
      break;
 800678c:	e02b      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	4a18      	ldr	r2, [pc, #96]	@ (80067f4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8006792:	601a      	str	r2, [r3, #0]
      break;
 8006794:	e027      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	4a17      	ldr	r2, [pc, #92]	@ (80067f8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 800679a:	601a      	str	r2, [r3, #0]
      break;
 800679c:	e023      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	4a16      	ldr	r2, [pc, #88]	@ (80067fc <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 80067a2:	601a      	str	r2, [r3, #0]
      break;
 80067a4:	e01f      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	4a15      	ldr	r2, [pc, #84]	@ (8006800 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 80067aa:	601a      	str	r2, [r3, #0]
      break;
 80067ac:	e01b      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	4a14      	ldr	r2, [pc, #80]	@ (8006804 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 80067b2:	601a      	str	r2, [r3, #0]
      break;
 80067b4:	e017      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	4a13      	ldr	r2, [pc, #76]	@ (8006808 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 80067ba:	601a      	str	r2, [r3, #0]
      break;
 80067bc:	e013      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	4a12      	ldr	r2, [pc, #72]	@ (800680c <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 80067c2:	601a      	str	r2, [r3, #0]
      break;
 80067c4:	e00f      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	4a11      	ldr	r2, [pc, #68]	@ (8006810 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 80067ca:	601a      	str	r2, [r3, #0]
      break;
 80067cc:	e00b      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	4a10      	ldr	r2, [pc, #64]	@ (8006814 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 80067d2:	601a      	str	r2, [r3, #0]
      break;
 80067d4:	e007      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006818 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 80067da:	601a      	str	r2, [r3, #0]
      break;
 80067dc:	e003      	b.n	80067e6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 80067de:	f04f 33ff 	mov.w	r3, #4294967295
 80067e2:	60fb      	str	r3, [r7, #12]
      break;
 80067e4:	bf00      	nop
  }

  return ret;
 80067e6:	68fb      	ldr	r3, [r7, #12]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	3fcccccd 	.word	0x3fcccccd
 80067f4:	41480000 	.word	0x41480000
 80067f8:	41d00000 	.word	0x41d00000
 80067fc:	42500000 	.word	0x42500000
 8006800:	42d00000 	.word	0x42d00000
 8006804:	43500000 	.word	0x43500000
 8006808:	43d00000 	.word	0x43d00000
 800680c:	44504000 	.word	0x44504000
 8006810:	44d06000 	.word	0x44d06000
 8006814:	45505000 	.word	0x45505000
 8006818:	45d05800 	.word	0x45d05800

0800681c <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800682e:	2b01      	cmp	r3, #1
 8006830:	d106      	bne.n	8006840 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006832:	ed97 0a00 	vldr	s0, [r7]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fbc0 	bl	8006fbc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	e005      	b.n	800684c <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006840:	ed97 0a00 	vldr	s0, [r7]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fc47 	bl	80070d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 800684a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3320      	adds	r3, #32
 800686a:	f107 020b 	add.w	r2, r7, #11
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f000 febb 	bl	80075ec <lsm6dso16is_xl_full_scale_get>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800687c:	f04f 33ff 	mov.w	r3, #4294967295
 8006880:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d81b      	bhi.n	80068c0 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8006888:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068b1 	.word	0x080068b1
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2202      	movs	r2, #2
 80068a4:	601a      	str	r2, [r3, #0]
      break;
 80068a6:	e00f      	b.n	80068c8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2204      	movs	r2, #4
 80068ac:	601a      	str	r2, [r3, #0]
      break;
 80068ae:	e00b      	b.n	80068c8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2208      	movs	r2, #8
 80068b4:	601a      	str	r2, [r3, #0]
      break;
 80068b6:	e007      	b.n	80068c8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2210      	movs	r2, #16
 80068bc:	601a      	str	r2, [r3, #0]
      break;
 80068be:	e003      	b.n	80068c8 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80068c0:	f04f 33ff 	mov.w	r3, #4294967295
 80068c4:	60fb      	str	r3, [r7, #12]
      break;
 80068c6:	bf00      	nop
  }

  return ret;
 80068c8:	68fb      	ldr	r3, [r7, #12]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	dd0b      	ble.n	8006900 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	dd06      	ble.n	80068fc <LSM6DSO16IS_ACC_SetFullScale+0x28>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	dc01      	bgt.n	80068f8 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 80068f4:	2303      	movs	r3, #3
 80068f6:	e004      	b.n	8006902 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e002      	b.n	8006902 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e000      	b.n	8006902 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006900:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8006902:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3320      	adds	r3, #32
 8006908:	7afa      	ldrb	r2, [r7, #11]
 800690a:	4611      	mov	r1, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fe47 	bl	80075a0 <lsm6dso16is_xl_full_scale_set>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006918:	f04f 33ff 	mov.w	r3, #4294967295
 800691c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3320      	adds	r3, #32
 800693a:	f107 020c 	add.w	r2, r7, #12
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f9cf 	bl	8007ce4 <lsm6dso16is_acceleration_raw_get>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800694c:	f04f 33ff 	mov.w	r3, #4294967295
 8006950:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006952:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 800695a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006962:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	809a      	strh	r2, [r3, #4]

  return ret;
 800696a:	697b      	ldr	r3, [r7, #20]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3320      	adds	r3, #32
 800698c:	f107 020c 	add.w	r2, r7, #12
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f001 f9a6 	bl	8007ce4 <lsm6dso16is_acceleration_raw_get>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fe4c 	bl	8006648 <LSM6DSO16IS_ACC_GetSensitivity>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ba:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 80069bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80069cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069d4:	ee17 2a90 	vmov	r2, s15
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 80069dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80069ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f4:	ee17 2a90 	vmov	r2, s15
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 80069fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a14:	ee17 2a90 	vmov	r2, s15
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	609a      	str	r2, [r3, #8]

  return ret;
 8006a1c:	697b      	ldr	r3, [r7, #20]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d102      	bne.n	8006a42 <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e013      	b.n	8006a6a <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f103 0220 	add.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f000 ffb7 	bl	80079c4 <lsm6dso16is_gy_data_rate_set>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a60:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	e01e      	b.n	8006ace <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f103 0220 	add.w	r2, r3, #32
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3334      	adds	r3, #52	@ 0x34
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f000 ffd1 	bl	8007a44 <lsm6dso16is_gy_data_rate_get>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aac:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3320      	adds	r3, #32
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 ff85 	bl	80079c4 <lsm6dso16is_gy_data_rate_set>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac4:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006ace:	68fb      	ldr	r3, [r7, #12]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3320      	adds	r3, #32
 8006aea:	f107 020b 	add.w	r2, r7, #11
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 ff0b 	bl	800790c <lsm6dso16is_gy_full_scale_get>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d839      	bhi.n	8006b7c <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006b08:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b5d 	.word	0x08006b5d
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006b75 	.word	0x08006b75
 8006b20:	08006b7d 	.word	0x08006b7d
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006b7d 	.word	0x08006b7d
 8006b30:	08006b7d 	.word	0x08006b7d
 8006b34:	08006b7d 	.word	0x08006b7d
 8006b38:	08006b7d 	.word	0x08006b7d
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006b7d 	.word	0x08006b7d
 8006b44:	08006b7d 	.word	0x08006b7d
 8006b48:	08006b7d 	.word	0x08006b7d
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006b55 	.word	0x08006b55
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4a0e      	ldr	r2, [pc, #56]	@ (8006b90 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8006b58:	601a      	str	r2, [r3, #0]
      break;
 8006b5a:	e013      	b.n	8006b84 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8006b94 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8006b60:	601a      	str	r2, [r3, #0]
      break;
 8006b62:	e00f      	b.n	8006b84 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	4a0c      	ldr	r2, [pc, #48]	@ (8006b98 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8006b68:	601a      	str	r2, [r3, #0]
      break;
 8006b6a:	e00b      	b.n	8006b84 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8006b9c <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8006b70:	601a      	str	r2, [r3, #0]
      break;
 8006b72:	e007      	b.n	8006b84 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba0 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8006b78:	601a      	str	r2, [r3, #0]
      break;
 8006b7a:	e003      	b.n	8006b84 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b80:	60fb      	str	r3, [r7, #12]
      break;
 8006b82:	bf00      	nop
  }

  return ret;
 8006b84:	68fb      	ldr	r3, [r7, #12]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	408c0000 	.word	0x408c0000
 8006b94:	410c0000 	.word	0x410c0000
 8006b98:	418c0000 	.word	0x418c0000
 8006b9c:	420c0000 	.word	0x420c0000
 8006ba0:	428c0000 	.word	0x428c0000

08006ba4 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3320      	adds	r3, #32
 8006bb6:	f107 020b 	add.w	r2, r7, #11
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 ff41 	bl	8007a44 <lsm6dso16is_gy_data_rate_get>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	2b1a      	cmp	r3, #26
 8006bd2:	d866      	bhi.n	8006ca2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c49 	.word	0x08006c49
 8006be0:	08006c53 	.word	0x08006c53
 8006be4:	08006c5b 	.word	0x08006c5b
 8006be8:	08006c63 	.word	0x08006c63
 8006bec:	08006c6b 	.word	0x08006c6b
 8006bf0:	08006c73 	.word	0x08006c73
 8006bf4:	08006c7b 	.word	0x08006c7b
 8006bf8:	08006c83 	.word	0x08006c83
 8006bfc:	08006c8b 	.word	0x08006c8b
 8006c00:	08006c93 	.word	0x08006c93
 8006c04:	08006c9b 	.word	0x08006c9b
 8006c08:	08006ca3 	.word	0x08006ca3
 8006c0c:	08006ca3 	.word	0x08006ca3
 8006c10:	08006ca3 	.word	0x08006ca3
 8006c14:	08006ca3 	.word	0x08006ca3
 8006c18:	08006ca3 	.word	0x08006ca3
 8006c1c:	08006ca3 	.word	0x08006ca3
 8006c20:	08006c53 	.word	0x08006c53
 8006c24:	08006c5b 	.word	0x08006c5b
 8006c28:	08006c63 	.word	0x08006c63
 8006c2c:	08006c6b 	.word	0x08006c6b
 8006c30:	08006c73 	.word	0x08006c73
 8006c34:	08006c7b 	.word	0x08006c7b
 8006c38:	08006c83 	.word	0x08006c83
 8006c3c:	08006c8b 	.word	0x08006c8b
 8006c40:	08006c93 	.word	0x08006c93
 8006c44:	08006c9b 	.word	0x08006c9b
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
      break;
 8006c50:	e02b      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8006c56:	601a      	str	r2, [r3, #0]
      break;
 8006c58:	e027      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	@ (8006cb8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8006c5e:	601a      	str	r2, [r3, #0]
      break;
 8006c60:	e023      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	@ (8006cbc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8006c66:	601a      	str	r2, [r3, #0]
      break;
 8006c68:	e01f      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	4a14      	ldr	r2, [pc, #80]	@ (8006cc0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8006c6e:	601a      	str	r2, [r3, #0]
      break;
 8006c70:	e01b      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	4a13      	ldr	r2, [pc, #76]	@ (8006cc4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8006c76:	601a      	str	r2, [r3, #0]
      break;
 8006c78:	e017      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	4a12      	ldr	r2, [pc, #72]	@ (8006cc8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8006c7e:	601a      	str	r2, [r3, #0]
      break;
 8006c80:	e013      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	4a11      	ldr	r2, [pc, #68]	@ (8006ccc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8006c86:	601a      	str	r2, [r3, #0]
      break;
 8006c88:	e00f      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	4a10      	ldr	r2, [pc, #64]	@ (8006cd0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8006c8e:	601a      	str	r2, [r3, #0]
      break;
 8006c90:	e00b      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	4a0f      	ldr	r2, [pc, #60]	@ (8006cd4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006c96:	601a      	str	r2, [r3, #0]
      break;
 8006c98:	e007      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8006cd8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8006c9e:	601a      	str	r2, [r3, #0]
      break;
 8006ca0:	e003      	b.n	8006caa <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	60fb      	str	r3, [r7, #12]
      break;
 8006ca8:	bf00      	nop
  }

  return ret;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	41480000 	.word	0x41480000
 8006cb8:	41d00000 	.word	0x41d00000
 8006cbc:	42500000 	.word	0x42500000
 8006cc0:	42d00000 	.word	0x42d00000
 8006cc4:	43500000 	.word	0x43500000
 8006cc8:	43d00000 	.word	0x43d00000
 8006ccc:	44504000 	.word	0x44504000
 8006cd0:	44d06000 	.word	0x44d06000
 8006cd4:	45505000 	.word	0x45505000
 8006cd8:	45d05800 	.word	0x45d05800

08006cdc <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d106      	bne.n	8006d00 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006cf2:	ed97 0a00 	vldr	s0, [r7]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa70 	bl	80071dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	e005      	b.n	8006d0c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006d00:	ed97 0a00 	vldr	s0, [r7]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 faf7 	bl	80072f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8006d0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3320      	adds	r3, #32
 8006d2a:	f107 020b 	add.w	r2, r7, #11
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fdeb 	bl	800790c <lsm6dso16is_gy_full_scale_get>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d83c      	bhi.n	8006dc2 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8006d48:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d9d 	.word	0x08006d9d
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006daf 	.word	0x08006daf
 8006d5c:	08006db9 	.word	0x08006db9
 8006d60:	08006dc3 	.word	0x08006dc3
 8006d64:	08006dc3 	.word	0x08006dc3
 8006d68:	08006dc3 	.word	0x08006dc3
 8006d6c:	08006dc3 	.word	0x08006dc3
 8006d70:	08006dc3 	.word	0x08006dc3
 8006d74:	08006dc3 	.word	0x08006dc3
 8006d78:	08006dc3 	.word	0x08006dc3
 8006d7c:	08006dc3 	.word	0x08006dc3
 8006d80:	08006dc3 	.word	0x08006dc3
 8006d84:	08006dc3 	.word	0x08006dc3
 8006d88:	08006dc3 	.word	0x08006dc3
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006d95 	.word	0x08006d95
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	227d      	movs	r2, #125	@ 0x7d
 8006d98:	601a      	str	r2, [r3, #0]
      break;
 8006d9a:	e016      	b.n	8006dca <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	22fa      	movs	r2, #250	@ 0xfa
 8006da0:	601a      	str	r2, [r3, #0]
      break;
 8006da2:	e012      	b.n	8006dca <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006daa:	601a      	str	r2, [r3, #0]
      break;
 8006dac:	e00d      	b.n	8006dca <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006db4:	601a      	str	r2, [r3, #0]
      break;
 8006db6:	e008      	b.n	8006dca <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006dbe:	601a      	str	r2, [r3, #0]
      break;
 8006dc0:	e003      	b.n	8006dca <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	60fb      	str	r3, [r7, #12]
      break;
 8006dc8:	bf00      	nop
  }

  return ret;
 8006dca:	68fb      	ldr	r3, [r7, #12]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b7d      	cmp	r3, #125	@ 0x7d
 8006de6:	dd12      	ble.n	8006e0e <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2bfa      	cmp	r3, #250	@ 0xfa
 8006dec:	dd0d      	ble.n	8006e0a <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006df4:	dd07      	ble.n	8006e06 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dfc:	dc01      	bgt.n	8006e02 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e006      	b.n	8006e10 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e02:	2303      	movs	r3, #3
 8006e04:	e004      	b.n	8006e10 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e002      	b.n	8006e10 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e000      	b.n	8006e10 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006e0e:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8006e10:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3320      	adds	r3, #32
 8006e16:	7afa      	ldrb	r2, [r7, #11]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fd46 	bl	80078ac <lsm6dso16is_gy_full_scale_set>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3320      	adds	r3, #32
 8006e48:	f107 020c 	add.w	r2, r7, #12
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 ff00 	bl	8007c54 <lsm6dso16is_angular_rate_raw_get>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006e60:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006e68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006e70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	809a      	strh	r2, [r3, #4]

  return ret;
 8006e78:	697b      	ldr	r3, [r7, #20]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3320      	adds	r3, #32
 8006e9a:	f107 020c 	add.w	r2, r7, #12
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fed7 	bl	8007c54 <lsm6dso16is_angular_rate_raw_get>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006eac:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb0:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fe0d 	bl	8006ad8 <LSM6DSO16IS_GYRO_GetSensitivity>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006eca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ee2:	ee17 2a90 	vmov	r2, s15
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006eea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f02:	ee17 2a90 	vmov	r2, s15
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006f0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f22:	ee17 2a90 	vmov	r2, s15
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	609a      	str	r2, [r3, #8]

  return ret;
 8006f2a:	697b      	ldr	r3, [r7, #20]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
 8006f40:	4613      	mov	r3, r2
 8006f42:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f103 0020 	add.w	r0, r3, #32
 8006f4e:	1cba      	adds	r2, r7, #2
 8006f50:	78f9      	ldrb	r1, [r7, #3]
 8006f52:	2301      	movs	r3, #1
 8006f54:	f000 faa6 	bl	80074a4 <lsm6dso16is_write_reg>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d006      	beq.n	8006f92 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d101      	bne.n	8006f8e <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e002      	b.n	8006f94 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006f92:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8006f94:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3320      	adds	r3, #32
 8006f9a:	7afa      	ldrb	r2, [r7, #11]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fa9e 	bl	80074e0 <lsm6dso16is_mem_bank_set>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006fcc:	edd7 7a00 	vldr	s15, [r7]
 8006fd0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	d801      	bhi.n	8006fe2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e058      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006fe2:	edd7 7a00 	vldr	s15, [r7]
 8006fe6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff2:	d801      	bhi.n	8006ff8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e04d      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006ff8:	edd7 7a00 	vldr	s15, [r7]
 8006ffc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80070bc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007008:	d801      	bhi.n	800700e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 800700a:	2303      	movs	r3, #3
 800700c:	e042      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800700e:	edd7 7a00 	vldr	s15, [r7]
 8007012:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80070c0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8007016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800701a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701e:	d801      	bhi.n	8007024 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8007020:	2304      	movs	r3, #4
 8007022:	e037      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007024:	edd7 7a00 	vldr	s15, [r7]
 8007028:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80070c4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 800702c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007034:	d801      	bhi.n	800703a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8007036:	2305      	movs	r3, #5
 8007038:	e02c      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800703a:	edd7 7a00 	vldr	s15, [r7]
 800703e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80070c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8007042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	d801      	bhi.n	8007050 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 800704c:	2306      	movs	r3, #6
 800704e:	e021      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007050:	edd7 7a00 	vldr	s15, [r7]
 8007054:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80070cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800705c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007060:	d801      	bhi.n	8007066 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8007062:	2307      	movs	r3, #7
 8007064:	e016      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007066:	edd7 7a00 	vldr	s15, [r7]
 800706a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80070d0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 800706e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007076:	d801      	bhi.n	800707c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007078:	2308      	movs	r3, #8
 800707a:	e00b      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800707c:	edd7 7a00 	vldr	s15, [r7]
 8007080:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80070d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 8007084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708c:	d801      	bhi.n	8007092 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 800708e:	2309      	movs	r3, #9
 8007090:	e000      	b.n	8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007092:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8007094:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3320      	adds	r3, #32
 800709a:	7afa      	ldrb	r2, [r7, #11]
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fadc 	bl	800765c <lsm6dso16is_xl_data_rate_set>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80070aa:	f04f 33ff 	mov.w	r3, #4294967295
 80070ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80070b0:	68fb      	ldr	r3, [r7, #12]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	42500000 	.word	0x42500000
 80070c0:	42d00000 	.word	0x42d00000
 80070c4:	43500000 	.word	0x43500000
 80070c8:	43d00000 	.word	0x43d00000
 80070cc:	44504000 	.word	0x44504000
 80070d0:	44d06000 	.word	0x44d06000
 80070d4:	45505000 	.word	0x45505000

080070d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 80070e4:	edd7 7a00 	vldr	s15, [r7]
 80070e8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80070ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f4:	d801      	bhi.n	80070fa <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e058      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80070fa:	edd7 7a00 	vldr	s15, [r7]
 80070fe:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710a:	d801      	bhi.n	8007110 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 800710c:	2302      	movs	r3, #2
 800710e:	e04d      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007110:	edd7 7a00 	vldr	s15, [r7]
 8007114:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80071c0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	d801      	bhi.n	8007126 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007122:	2303      	movs	r3, #3
 8007124:	e042      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007126:	edd7 7a00 	vldr	s15, [r7]
 800712a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80071c4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 800712e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007136:	d801      	bhi.n	800713c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007138:	2304      	movs	r3, #4
 800713a:	e037      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800713c:	edd7 7a00 	vldr	s15, [r7]
 8007140:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80071c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8007144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714c:	d801      	bhi.n	8007152 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800714e:	2305      	movs	r3, #5
 8007150:	e02c      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007152:	edd7 7a00 	vldr	s15, [r7]
 8007156:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80071cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800715a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007162:	d801      	bhi.n	8007168 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007164:	2306      	movs	r3, #6
 8007166:	e021      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007168:	edd7 7a00 	vldr	s15, [r7]
 800716c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80071d0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007178:	d801      	bhi.n	800717e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800717a:	2307      	movs	r3, #7
 800717c:	e016      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800717e:	edd7 7a00 	vldr	s15, [r7]
 8007182:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80071d4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8007186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718e:	d801      	bhi.n	8007194 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007190:	2308      	movs	r3, #8
 8007192:	e00b      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007194:	edd7 7a00 	vldr	s15, [r7]
 8007198:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80071d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 800719c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a4:	d801      	bhi.n	80071aa <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80071a6:	2309      	movs	r3, #9
 80071a8:	e000      	b.n	80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071aa:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	42500000 	.word	0x42500000
 80071c4:	42d00000 	.word	0x42d00000
 80071c8:	43500000 	.word	0x43500000
 80071cc:	43d00000 	.word	0x43d00000
 80071d0:	44504000 	.word	0x44504000
 80071d4:	44d06000 	.word	0x44d06000
 80071d8:	45505000 	.word	0x45505000

080071dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80071ec:	edd7 7a00 	vldr	s15, [r7]
 80071f0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80071f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	d801      	bhi.n	8007202 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 80071fe:	2301      	movs	r3, #1
 8007200:	e058      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007202:	edd7 7a00 	vldr	s15, [r7]
 8007206:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800720a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800720e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007212:	d801      	bhi.n	8007218 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8007214:	2302      	movs	r3, #2
 8007216:	e04d      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007218:	edd7 7a00 	vldr	s15, [r7]
 800721c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80072dc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	d801      	bhi.n	800722e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800722a:	2303      	movs	r3, #3
 800722c:	e042      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800722e:	edd7 7a00 	vldr	s15, [r7]
 8007232:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80072e0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723e:	d801      	bhi.n	8007244 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8007240:	2304      	movs	r3, #4
 8007242:	e037      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007244:	edd7 7a00 	vldr	s15, [r7]
 8007248:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80072e4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800724c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	d801      	bhi.n	800725a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8007256:	2305      	movs	r3, #5
 8007258:	e02c      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800725a:	edd7 7a00 	vldr	s15, [r7]
 800725e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80072e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	d801      	bhi.n	8007270 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 800726c:	2306      	movs	r3, #6
 800726e:	e021      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007270:	edd7 7a00 	vldr	s15, [r7]
 8007274:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80072ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800727c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007280:	d801      	bhi.n	8007286 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 8007282:	2307      	movs	r3, #7
 8007284:	e016      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007286:	edd7 7a00 	vldr	s15, [r7]
 800728a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80072f0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800728e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007296:	d801      	bhi.n	800729c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8007298:	2308      	movs	r3, #8
 800729a:	e00b      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800729c:	edd7 7a00 	vldr	s15, [r7]
 80072a0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80072f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80072a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ac:	d801      	bhi.n	80072b2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 80072ae:	2309      	movs	r3, #9
 80072b0:	e000      	b.n	80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072b2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80072b4:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3320      	adds	r3, #32
 80072ba:	7afa      	ldrb	r2, [r7, #11]
 80072bc:	4611      	mov	r1, r2
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fb80 	bl	80079c4 <lsm6dso16is_gy_data_rate_set>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072d0:	68fb      	ldr	r3, [r7, #12]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	42500000 	.word	0x42500000
 80072e0:	42d00000 	.word	0x42d00000
 80072e4:	43500000 	.word	0x43500000
 80072e8:	43d00000 	.word	0x43d00000
 80072ec:	44504000 	.word	0x44504000
 80072f0:	44d06000 	.word	0x44d06000
 80072f4:	45505000 	.word	0x45505000

080072f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8007304:	edd7 7a00 	vldr	s15, [r7]
 8007308:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800730c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d801      	bhi.n	800731a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007316:	2301      	movs	r3, #1
 8007318:	e058      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800731a:	edd7 7a00 	vldr	s15, [r7]
 800731e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732a:	d801      	bhi.n	8007330 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800732c:	2302      	movs	r3, #2
 800732e:	e04d      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007330:	edd7 7a00 	vldr	s15, [r7]
 8007334:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80073e0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	d801      	bhi.n	8007346 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007342:	2303      	movs	r3, #3
 8007344:	e042      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007346:	edd7 7a00 	vldr	s15, [r7]
 800734a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80073e4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800734e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007356:	d801      	bhi.n	800735c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007358:	2304      	movs	r3, #4
 800735a:	e037      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800735c:	edd7 7a00 	vldr	s15, [r7]
 8007360:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80073e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d801      	bhi.n	8007372 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800736e:	2305      	movs	r3, #5
 8007370:	e02c      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007372:	edd7 7a00 	vldr	s15, [r7]
 8007376:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80073ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800737a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007382:	d801      	bhi.n	8007388 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007384:	2306      	movs	r3, #6
 8007386:	e021      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007388:	edd7 7a00 	vldr	s15, [r7]
 800738c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80073f0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	d801      	bhi.n	800739e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800739a:	2307      	movs	r3, #7
 800739c:	e016      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800739e:	edd7 7a00 	vldr	s15, [r7]
 80073a2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80073f4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80073a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	d801      	bhi.n	80073b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80073b0:	2308      	movs	r3, #8
 80073b2:	e00b      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073b4:	edd7 7a00 	vldr	s15, [r7]
 80073b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80073f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80073bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c4:	d801      	bhi.n	80073ca <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80073c6:	2309      	movs	r3, #9
 80073c8:	e000      	b.n	80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073ca:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	42500000 	.word	0x42500000
 80073e4:	42d00000 	.word	0x42d00000
 80073e8:	43500000 	.word	0x43500000
 80073ec:	43d00000 	.word	0x43d00000
 80073f0:	44504000 	.word	0x44504000
 80073f4:	44d06000 	.word	0x44d06000
 80073f8:	45505000 	.word	0x45505000

080073fc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80073fc:	b590      	push	{r4, r7, lr}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	461a      	mov	r2, r3
 8007408:	460b      	mov	r3, r1
 800740a:	72fb      	strb	r3, [r7, #11]
 800740c:	4613      	mov	r3, r2
 800740e:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	695c      	ldr	r4, [r3, #20]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	7b1b      	ldrb	r3, [r3, #12]
 800741c:	4618      	mov	r0, r3
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	b299      	uxth	r1, r3
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	47a0      	blx	r4
 8007428:	4603      	mov	r3, r0
}
 800742a:	4618      	mov	r0, r3
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd90      	pop	{r4, r7, pc}

08007432 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007432:	b590      	push	{r4, r7, lr}
 8007434:	b087      	sub	sp, #28
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	461a      	mov	r2, r3
 800743e:	460b      	mov	r3, r1
 8007440:	72fb      	strb	r3, [r7, #11]
 8007442:	4613      	mov	r3, r2
 8007444:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	691c      	ldr	r4, [r3, #16]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	7b1b      	ldrb	r3, [r3, #12]
 8007452:	4618      	mov	r0, r3
 8007454:	7afb      	ldrb	r3, [r7, #11]
 8007456:	b299      	uxth	r1, r3
 8007458:	893b      	ldrh	r3, [r7, #8]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	47a0      	blx	r4
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd90      	pop	{r4, r7, pc}

08007468 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	461a      	mov	r2, r3
 8007474:	460b      	mov	r3, r1
 8007476:	72fb      	strb	r3, [r7, #11]
 8007478:	4613      	mov	r3, r2
 800747a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	e009      	b.n	800749c <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685c      	ldr	r4, [r3, #4]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68d8      	ldr	r0, [r3, #12]
 8007490:	893b      	ldrh	r3, [r7, #8]
 8007492:	7af9      	ldrb	r1, [r7, #11]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	47a0      	blx	r4
 8007498:	6178      	str	r0, [r7, #20]

  return ret;
 800749a:	697b      	ldr	r3, [r7, #20]
}
 800749c:	4618      	mov	r0, r3
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd90      	pop	{r4, r7, pc}

080074a4 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	461a      	mov	r2, r3
 80074b0:	460b      	mov	r3, r1
 80074b2:	72fb      	strb	r3, [r7, #11]
 80074b4:	4613      	mov	r3, r2
 80074b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	e009      	b.n	80074d8 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681c      	ldr	r4, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68d8      	ldr	r0, [r3, #12]
 80074cc:	893b      	ldrh	r3, [r7, #8]
 80074ce:	7af9      	ldrb	r1, [r7, #11]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	47a0      	blx	r4
 80074d4:	6178      	str	r0, [r7, #20]

  return ret;
 80074d6:	697b      	ldr	r3, [r7, #20]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd90      	pop	{r4, r7, pc}

080074e0 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 80074ec:	2300      	movs	r3, #0
 80074ee:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d101      	bne.n	80074fa <lsm6dso16is_mem_bank_set+0x1a>
 80074f6:	2201      	movs	r2, #1
 80074f8:	e000      	b.n	80074fc <lsm6dso16is_mem_bank_set+0x1c>
 80074fa:	2200      	movs	r2, #0
 80074fc:	7a3b      	ldrb	r3, [r7, #8]
 80074fe:	f362 1386 	bfi	r3, r2, #6, #1
 8007502:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	2b03      	cmp	r3, #3
 8007508:	d101      	bne.n	800750e <lsm6dso16is_mem_bank_set+0x2e>
 800750a:	2201      	movs	r2, #1
 800750c:	e000      	b.n	8007510 <lsm6dso16is_mem_bank_set+0x30>
 800750e:	2200      	movs	r2, #0
 8007510:	7a3b      	ldrb	r3, [r7, #8]
 8007512:	f362 13c7 	bfi	r3, r2, #7, #1
 8007516:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8007518:	f107 0208 	add.w	r2, r7, #8
 800751c:	2301      	movs	r3, #1
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ffbf 	bl	80074a4 <lsm6dso16is_write_reg>
 8007526:	60f8      	str	r0, [r7, #12]

  return ret;
 8007528:	68fb      	ldr	r3, [r7, #12]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 800753c:	2301      	movs	r3, #1
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	210f      	movs	r1, #15
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff ff90 	bl	8007468 <lsm6dso16is_read_reg>
 8007548:	60f8      	str	r0, [r7, #12]

  return ret;
 800754a:	68fb      	ldr	r3, [r7, #12]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007560:	f107 0208 	add.w	r2, r7, #8
 8007564:	2301      	movs	r3, #1
 8007566:	2115      	movs	r1, #21
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff7d 	bl	8007468 <lsm6dso16is_read_reg>
 800756e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	7a3b      	ldrb	r3, [r7, #8]
 8007580:	f362 1304 	bfi	r3, r2, #4, #1
 8007584:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007586:	f107 0208 	add.w	r2, r7, #8
 800758a:	2301      	movs	r3, #1
 800758c:	2115      	movs	r1, #21
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff ff88 	bl	80074a4 <lsm6dso16is_write_reg>
 8007594:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075ac:	f107 0208 	add.w	r2, r7, #8
 80075b0:	2301      	movs	r3, #1
 80075b2:	2110      	movs	r1, #16
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ff57 	bl	8007468 <lsm6dso16is_read_reg>
 80075ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10f      	bne.n	80075e2 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	7a3b      	ldrb	r3, [r7, #8]
 80075cc:	f362 0383 	bfi	r3, r2, #2, #2
 80075d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075d2:	f107 0208 	add.w	r2, r7, #8
 80075d6:	2301      	movs	r3, #1
 80075d8:	2110      	movs	r1, #16
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ff62 	bl	80074a4 <lsm6dso16is_write_reg>
 80075e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075f6:	f107 0208 	add.w	r2, r7, #8
 80075fa:	2301      	movs	r3, #1
 80075fc:	2110      	movs	r1, #16
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff ff32 	bl	8007468 <lsm6dso16is_read_reg>
 8007604:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8007606:	7a3b      	ldrb	r3, [r7, #8]
 8007608:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d81a      	bhi.n	8007648 <lsm6dso16is_xl_full_scale_get+0x5c>
 8007612:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	08007629 	.word	0x08007629
 800761c:	08007641 	.word	0x08007641
 8007620:	08007631 	.word	0x08007631
 8007624:	08007639 	.word	0x08007639
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	e00f      	b.n	8007650 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2202      	movs	r2, #2
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e00b      	b.n	8007650 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2203      	movs	r2, #3
 800763c:	701a      	strb	r2, [r3, #0]
      break;
 800763e:	e007      	b.n	8007650 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2201      	movs	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e003      	b.n	8007650 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	bf00      	nop
  }
  return ret;
 8007650:	68fb      	ldr	r3, [r7, #12]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop

0800765c <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007668:	f107 0208 	add.w	r2, r7, #8
 800766c:	2301      	movs	r3, #1
 800766e:	2110      	movs	r1, #16
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fef9 	bl	8007468 <lsm6dso16is_read_reg>
 8007676:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d128      	bne.n	80076d0 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007688:	2101      	movs	r1, #1
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff ff62 	bl	8007554 <lsm6dso16is_xl_hm_mode_set>
 8007690:	4602      	mov	r2, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e007      	b.n	80076aa <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff ff59 	bl	8007554 <lsm6dso16is_xl_hm_mode_set>
 80076a2:	4602      	mov	r2, r0
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	7a3b      	ldrb	r3, [r7, #8]
 80076b4:	f362 1307 	bfi	r3, r2, #4, #4
 80076b8:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80076ba:	f107 0208 	add.w	r2, r7, #8
 80076be:	2301      	movs	r3, #1
 80076c0:	2110      	movs	r1, #16
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff feee 	bl	80074a4 <lsm6dso16is_write_reg>
 80076c8:	4602      	mov	r2, r0
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80076e6:	f107 0210 	add.w	r2, r7, #16
 80076ea:	2301      	movs	r3, #1
 80076ec:	2110      	movs	r1, #16
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff feba 	bl	8007468 <lsm6dso16is_read_reg>
 80076f4:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80076f6:	f107 020c 	add.w	r2, r7, #12
 80076fa:	2301      	movs	r3, #1
 80076fc:	2115      	movs	r1, #21
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff feb2 	bl	8007468 <lsm6dso16is_read_reg>
 8007704:	4602      	mov	r2, r0
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 800770c:	7b3b      	ldrb	r3, [r7, #12]
 800770e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	7c3a      	ldrb	r2, [r7, #16]
 8007718:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	4313      	orrs	r3, r2
 8007720:	2b1b      	cmp	r3, #27
 8007722:	f200 8093 	bhi.w	800784c <lsm6dso16is_xl_data_rate_get+0x170>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <lsm6dso16is_xl_data_rate_get+0x50>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	0800779d 	.word	0x0800779d
 8007730:	080077a5 	.word	0x080077a5
 8007734:	080077ad 	.word	0x080077ad
 8007738:	080077b5 	.word	0x080077b5
 800773c:	080077bd 	.word	0x080077bd
 8007740:	080077c5 	.word	0x080077c5
 8007744:	080077cd 	.word	0x080077cd
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077dd 	.word	0x080077dd
 8007750:	080077e5 	.word	0x080077e5
 8007754:	080077ed 	.word	0x080077ed
 8007758:	0800784d 	.word	0x0800784d
 800775c:	0800784d 	.word	0x0800784d
 8007760:	0800784d 	.word	0x0800784d
 8007764:	0800784d 	.word	0x0800784d
 8007768:	0800784d 	.word	0x0800784d
 800776c:	0800784d 	.word	0x0800784d
 8007770:	080077f5 	.word	0x080077f5
 8007774:	080077fd 	.word	0x080077fd
 8007778:	08007805 	.word	0x08007805
 800777c:	0800780d 	.word	0x0800780d
 8007780:	08007815 	.word	0x08007815
 8007784:	0800781d 	.word	0x0800781d
 8007788:	08007825 	.word	0x08007825
 800778c:	0800782d 	.word	0x0800782d
 8007790:	08007835 	.word	0x08007835
 8007794:	0800783d 	.word	0x0800783d
 8007798:	08007845 	.word	0x08007845
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e057      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e053      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2202      	movs	r2, #2
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e04f      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2203      	movs	r2, #3
 80077b8:	701a      	strb	r2, [r3, #0]
      break;
 80077ba:	e04b      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2204      	movs	r2, #4
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e047      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2205      	movs	r2, #5
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	e043      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2206      	movs	r2, #6
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e03f      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2207      	movs	r2, #7
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e03b      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2208      	movs	r2, #8
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e037      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2209      	movs	r2, #9
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e033      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	220a      	movs	r2, #10
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e02f      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2211      	movs	r2, #17
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e02b      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2212      	movs	r2, #18
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e027      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2213      	movs	r2, #19
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e023      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2214      	movs	r2, #20
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e01f      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2215      	movs	r2, #21
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	e01b      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2216      	movs	r2, #22
 8007820:	701a      	strb	r2, [r3, #0]
      break;
 8007822:	e017      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2217      	movs	r2, #23
 8007828:	701a      	strb	r2, [r3, #0]
      break;
 800782a:	e013      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2218      	movs	r2, #24
 8007830:	701a      	strb	r2, [r3, #0]
      break;
 8007832:	e00f      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2219      	movs	r2, #25
 8007838:	701a      	strb	r2, [r3, #0]
      break;
 800783a:	e00b      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	221a      	movs	r2, #26
 8007840:	701a      	strb	r2, [r3, #0]
      break;
 8007842:	e007      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	221b      	movs	r2, #27
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e003      	b.n	8007854 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	bf00      	nop
  }

  return ret;
 8007854:	697b      	ldr	r3, [r7, #20]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop

08007860 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800786c:	f107 0208 	add.w	r2, r7, #8
 8007870:	2301      	movs	r3, #1
 8007872:	2116      	movs	r1, #22
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fdf7 	bl	8007468 <lsm6dso16is_read_reg>
 800787a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10f      	bne.n	80078a2 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	7a3b      	ldrb	r3, [r7, #8]
 800788c:	f362 13c7 	bfi	r3, r2, #7, #1
 8007890:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007892:	f107 0208 	add.w	r2, r7, #8
 8007896:	2301      	movs	r3, #1
 8007898:	2116      	movs	r1, #22
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fe02 	bl	80074a4 <lsm6dso16is_write_reg>
 80078a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80078b8:	f107 0208 	add.w	r2, r7, #8
 80078bc:	2301      	movs	r3, #1
 80078be:	2111      	movs	r1, #17
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fdd1 	bl	8007468 <lsm6dso16is_read_reg>
 80078c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d119      	bne.n	8007902 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	7a3b      	ldrb	r3, [r7, #8]
 80078d8:	f362 0383 	bfi	r3, r2, #2, #2
 80078dc:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	7a3b      	ldrb	r3, [r7, #8]
 80078ec:	f362 0341 	bfi	r3, r2, #1, #1
 80078f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80078f2:	f107 0208 	add.w	r2, r7, #8
 80078f6:	2301      	movs	r3, #1
 80078f8:	2111      	movs	r1, #17
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fdd2 	bl	80074a4 <lsm6dso16is_write_reg>
 8007900:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007902:	68fb      	ldr	r3, [r7, #12]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007916:	f107 0208 	add.w	r2, r7, #8
 800791a:	2301      	movs	r3, #1
 800791c:	2111      	movs	r1, #17
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fda2 	bl	8007468 <lsm6dso16is_read_reg>
 8007924:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8007926:	7a3b      	ldrb	r3, [r7, #8]
 8007928:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	7a3a      	ldrb	r2, [r7, #8]
 8007932:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	4313      	orrs	r3, r2
 800793a:	2b10      	cmp	r3, #16
 800793c:	d838      	bhi.n	80079b0 <lsm6dso16is_gy_full_scale_get+0xa4>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <lsm6dso16is_gy_full_scale_get+0x38>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	08007991 	.word	0x08007991
 8007948:	08007999 	.word	0x08007999
 800794c:	080079a1 	.word	0x080079a1
 8007950:	080079a9 	.word	0x080079a9
 8007954:	080079b1 	.word	0x080079b1
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079b1 	.word	0x080079b1
 8007960:	080079b1 	.word	0x080079b1
 8007964:	080079b1 	.word	0x080079b1
 8007968:	080079b1 	.word	0x080079b1
 800796c:	080079b1 	.word	0x080079b1
 8007970:	080079b1 	.word	0x080079b1
 8007974:	080079b1 	.word	0x080079b1
 8007978:	080079b1 	.word	0x080079b1
 800797c:	080079b1 	.word	0x080079b1
 8007980:	080079b1 	.word	0x080079b1
 8007984:	08007989 	.word	0x08007989
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2210      	movs	r2, #16
 800798c:	701a      	strb	r2, [r3, #0]
      break;
 800798e:	e013      	b.n	80079b8 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
      break;
 8007996:	e00f      	b.n	80079b8 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	701a      	strb	r2, [r3, #0]
      break;
 800799e:	e00b      	b.n	80079b8 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
      break;
 80079a6:	e007      	b.n	80079b8 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2203      	movs	r2, #3
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e003      	b.n	80079b8 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2210      	movs	r2, #16
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	bf00      	nop
  }
  return ret;
 80079b8:	68fb      	ldr	r3, [r7, #12]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079d0:	f107 0208 	add.w	r2, r7, #8
 80079d4:	2301      	movs	r3, #1
 80079d6:	2111      	movs	r1, #17
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff fd45 	bl	8007468 <lsm6dso16is_read_reg>
 80079de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d128      	bne.n	8007a38 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	f003 0310 	and.w	r3, r3, #16
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80079f0:	2101      	movs	r1, #1
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ff34 	bl	8007860 <lsm6dso16is_gy_hm_mode_set>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e007      	b.n	8007a12 <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff ff2b 	bl	8007860 <lsm6dso16is_gy_hm_mode_set>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8007a12:	78fb      	ldrb	r3, [r7, #3]
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	7a3b      	ldrb	r3, [r7, #8]
 8007a1c:	f362 1307 	bfi	r3, r2, #4, #4
 8007a20:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	2301      	movs	r3, #1
 8007a28:	2111      	movs	r1, #17
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fd3a 	bl	80074a4 <lsm6dso16is_write_reg>
 8007a30:	4602      	mov	r2, r0
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007a38:	68fb      	ldr	r3, [r7, #12]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a4e:	f107 0210 	add.w	r2, r7, #16
 8007a52:	2301      	movs	r3, #1
 8007a54:	2111      	movs	r1, #17
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fd06 	bl	8007468 <lsm6dso16is_read_reg>
 8007a5c:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007a5e:	f107 020c 	add.w	r2, r7, #12
 8007a62:	2301      	movs	r3, #1
 8007a64:	2116      	movs	r1, #22
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fcfe 	bl	8007468 <lsm6dso16is_read_reg>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	4413      	add	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007a74:	7b3b      	ldrb	r3, [r7, #12]
 8007a76:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	7c3a      	ldrb	r2, [r7, #16]
 8007a80:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	4313      	orrs	r3, r2
 8007a88:	2b1a      	cmp	r3, #26
 8007a8a:	f200 808d 	bhi.w	8007ba8 <lsm6dso16is_gy_data_rate_get+0x164>
 8007a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <lsm6dso16is_gy_data_rate_get+0x50>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007b01 	.word	0x08007b01
 8007a98:	08007b09 	.word	0x08007b09
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b19 	.word	0x08007b19
 8007aa4:	08007b21 	.word	0x08007b21
 8007aa8:	08007b29 	.word	0x08007b29
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b39 	.word	0x08007b39
 8007ab4:	08007b41 	.word	0x08007b41
 8007ab8:	08007b49 	.word	0x08007b49
 8007abc:	08007b51 	.word	0x08007b51
 8007ac0:	08007ba9 	.word	0x08007ba9
 8007ac4:	08007ba9 	.word	0x08007ba9
 8007ac8:	08007ba9 	.word	0x08007ba9
 8007acc:	08007ba9 	.word	0x08007ba9
 8007ad0:	08007ba9 	.word	0x08007ba9
 8007ad4:	08007ba9 	.word	0x08007ba9
 8007ad8:	08007b59 	.word	0x08007b59
 8007adc:	08007b61 	.word	0x08007b61
 8007ae0:	08007b69 	.word	0x08007b69
 8007ae4:	08007b71 	.word	0x08007b71
 8007ae8:	08007b79 	.word	0x08007b79
 8007aec:	08007b81 	.word	0x08007b81
 8007af0:	08007b89 	.word	0x08007b89
 8007af4:	08007b91 	.word	0x08007b91
 8007af8:	08007b99 	.word	0x08007b99
 8007afc:	08007ba1 	.word	0x08007ba1
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e053      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e04f      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2202      	movs	r2, #2
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	e04b      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e047      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2204      	movs	r2, #4
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	e043      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	701a      	strb	r2, [r3, #0]
      break;
 8007b2e:	e03f      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2206      	movs	r2, #6
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e03b      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2207      	movs	r2, #7
 8007b3c:	701a      	strb	r2, [r3, #0]
      break;
 8007b3e:	e037      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2208      	movs	r2, #8
 8007b44:	701a      	strb	r2, [r3, #0]
      break;
 8007b46:	e033      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2209      	movs	r2, #9
 8007b4c:	701a      	strb	r2, [r3, #0]
      break;
 8007b4e:	e02f      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	220a      	movs	r2, #10
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	e02b      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2211      	movs	r2, #17
 8007b5c:	701a      	strb	r2, [r3, #0]
      break;
 8007b5e:	e027      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2212      	movs	r2, #18
 8007b64:	701a      	strb	r2, [r3, #0]
      break;
 8007b66:	e023      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2213      	movs	r2, #19
 8007b6c:	701a      	strb	r2, [r3, #0]
      break;
 8007b6e:	e01f      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2214      	movs	r2, #20
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e01b      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2215      	movs	r2, #21
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e017      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2216      	movs	r2, #22
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e013      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2217      	movs	r2, #23
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e00f      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2218      	movs	r2, #24
 8007b94:	701a      	strb	r2, [r3, #0]
      break;
 8007b96:	e00b      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2219      	movs	r2, #25
 8007b9c:	701a      	strb	r2, [r3, #0]
      break;
 8007b9e:	e007      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	221a      	movs	r2, #26
 8007ba4:	701a      	strb	r2, [r3, #0]
      break;
 8007ba6:	e003      	b.n	8007bb0 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]
      break;
 8007bae:	bf00      	nop
  }

  return ret;
 8007bb0:	697b      	ldr	r3, [r7, #20]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop

08007bbc <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bc8:	f107 0208 	add.w	r2, r7, #8
 8007bcc:	2301      	movs	r3, #1
 8007bce:	2112      	movs	r1, #18
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7ff fc49 	bl	8007468 <lsm6dso16is_read_reg>
 8007bd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10f      	bne.n	8007bfe <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	7a3b      	ldrb	r3, [r7, #8]
 8007be8:	f362 0382 	bfi	r3, r2, #2, #1
 8007bec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bee:	f107 0208 	add.w	r2, r7, #8
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	2112      	movs	r1, #18
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7ff fc54 	bl	80074a4 <lsm6dso16is_write_reg>
 8007bfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c14:	f107 0208 	add.w	r2, r7, #8
 8007c18:	2301      	movs	r3, #1
 8007c1a:	2112      	movs	r1, #18
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fc23 	bl	8007468 <lsm6dso16is_read_reg>
 8007c22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10f      	bne.n	8007c4a <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	7a3b      	ldrb	r3, [r7, #8]
 8007c34:	f362 1386 	bfi	r3, r2, #6, #1
 8007c38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c3a:	f107 0208 	add.w	r2, r7, #8
 8007c3e:	2301      	movs	r3, #1
 8007c40:	2112      	movs	r1, #18
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fc2e 	bl	80074a4 <lsm6dso16is_write_reg>
 8007c48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8007c5e:	f107 020c 	add.w	r2, r7, #12
 8007c62:	2306      	movs	r3, #6
 8007c64:	2122      	movs	r1, #34	@ 0x22
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fbfe 	bl	8007468 <lsm6dso16is_read_reg>
 8007c6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007c6e:	7b7b      	ldrb	r3, [r7, #13]
 8007c70:	b21a      	sxth	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	7b3a      	ldrb	r2, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	b21a      	sxth	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007c8e:	7bfa      	ldrb	r2, [r7, #15]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	3302      	adds	r3, #2
 8007c94:	b212      	sxth	r2, r2
 8007c96:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	7bba      	ldrb	r2, [r7, #14]
 8007ca8:	4413      	add	r3, r2
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	3302      	adds	r3, #2
 8007cb0:	b212      	sxth	r2, r2
 8007cb2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007cb4:	7c7a      	ldrb	r2, [r7, #17]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	b212      	sxth	r2, r2
 8007cbc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	7c3a      	ldrb	r2, [r7, #16]
 8007cce:	4413      	add	r3, r2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	b212      	sxth	r2, r2
 8007cd8:	801a      	strh	r2, [r3, #0]

  return ret;
 8007cda:	697b      	ldr	r3, [r7, #20]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 8007cee:	f107 020c 	add.w	r2, r7, #12
 8007cf2:	2306      	movs	r3, #6
 8007cf4:	2128      	movs	r1, #40	@ 0x28
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fbb6 	bl	8007468 <lsm6dso16is_read_reg>
 8007cfc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007cfe:	7b7b      	ldrb	r3, [r7, #13]
 8007d00:	b21a      	sxth	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	7b3a      	ldrb	r2, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	b21a      	sxth	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007d1e:	7bfa      	ldrb	r2, [r7, #15]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	3302      	adds	r3, #2
 8007d24:	b212      	sxth	r2, r2
 8007d26:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	7bba      	ldrb	r2, [r7, #14]
 8007d38:	4413      	add	r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	3302      	adds	r3, #2
 8007d40:	b212      	sxth	r2, r2
 8007d42:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007d44:	7c7a      	ldrb	r2, [r7, #17]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	b212      	sxth	r2, r2
 8007d4c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	3304      	adds	r3, #4
 8007d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	7c3a      	ldrb	r2, [r7, #16]
 8007d5e:	4413      	add	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3304      	adds	r3, #4
 8007d66:	b212      	sxth	r2, r2
 8007d68:	801a      	strh	r2, [r3, #0]

  return ret;
 8007d6a:	697b      	ldr	r3, [r7, #20]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e05d      	b.n	8007e4c <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	7b1a      	ldrb	r2, [r3, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	695a      	ldr	r2, [r3, #20]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a23      	ldr	r2, [pc, #140]	@ (8007e58 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8007dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a22      	ldr	r2, [pc, #136]	@ (8007e5c <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007dd2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8007dea:	f04f 33ff 	mov.w	r3, #4294967295
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e02c      	b.n	8007e4c <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4798      	blx	r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	e022      	b.n	8007e4c <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d11e      	bne.n	8007e4c <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d119      	bne.n	8007e4c <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007e18:	2304      	movs	r3, #4
 8007e1a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	2112      	movs	r1, #18
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 ff18 	bl	8008c58 <LSM6DSV16X_Write_Reg>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e32:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	461a      	mov	r2, r3
 8007e38:	2103      	movs	r1, #3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 ff0c 	bl	8008c58 <LSM6DSV16X_Write_Reg>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8007e46:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08009199 	.word	0x08009199
 8007e5c:	080091cf 	.word	0x080091cf

08007e60 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8007e68:	2100      	movs	r1, #0
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 ff0f 	bl	8008c8e <LSM6DSV16X_Set_Mem_Bank>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8007e76:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7a:	e070      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3320      	adds	r3, #32
 8007e80:	2101      	movs	r1, #1
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fcfe 	bl	8009884 <lsm6dsv16x_auto_increment_set>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e92:	e064      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3320      	adds	r3, #32
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fd18 	bl	80098d0 <lsm6dsv16x_block_data_update_set>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	e058      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3320      	adds	r3, #32
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 feae 	bl	8009c14 <lsm6dsv16x_fifo_mode_set>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec2:	e04c      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2206      	movs	r2, #6
 8007ec8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3320      	adds	r3, #32
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fa14 	bl	8009300 <lsm6dsv16x_xl_data_rate_set>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8007ede:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee2:	e03c      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3320      	adds	r3, #32
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 fd94 	bl	8009a18 <lsm6dsv16x_xl_full_scale_set>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8007ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8007efa:	e030      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2206      	movs	r2, #6
 8007f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3320      	adds	r3, #32
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fb5a 	bl	80095c4 <lsm6dsv16x_gy_data_rate_set>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8007f16:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1a:	e020      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3320      	adds	r3, #32
 8007f20:	2104      	movs	r1, #4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f001 fcfa 	bl	800991c <lsm6dsv16x_gy_full_scale_set>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f32:	e014      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8007f34:	7b3b      	ldrb	r3, [r7, #12]
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3320      	adds	r3, #32
 8007f40:	7b39      	ldrb	r1, [r7, #12]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fe8c 	bl	8009c60 <lsm6dsv16x_ah_qvar_mode_set>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f52:	e004      	b.n	8007f5e <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f898 	bl	80080a4 <LSM6DSV16X_ACC_Disable>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7e:	e025      	b.n	8007fcc <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fb6a 	bl	800865a <LSM6DSV16X_GYRO_Disable>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f90:	e01c      	b.n	8007fcc <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8007fa2:	7b3b      	ldrb	r3, [r7, #12]
 8007fa4:	f023 0301 	bic.w	r3, r3, #1
 8007fa8:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3320      	adds	r3, #32
 8007fae:	7b39      	ldrb	r1, [r7, #12]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fe55 	bl	8009c60 <lsm6dsv16x_ah_qvar_mode_set>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8007fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc0:	e004      	b.n	8007fcc <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3320      	adds	r3, #32
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 f97a 	bl	80092de <lsm6dsv16x_device_id_get>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff4:	e000      	b.n	8007ff8 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2201      	movs	r2, #1
 8008014:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008028:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2210      	movs	r2, #16
 800802e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2200      	movs	r2, #0
 8008034:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	4a07      	ldr	r2, [pc, #28]	@ (8008058 <LSM6DSV16X_GetCapabilities+0x58>)
 800803a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	4a06      	ldr	r2, [pc, #24]	@ (8008058 <LSM6DSV16X_GetCapabilities+0x58>)
 8008040:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	45f00000 	.word	0x45f00000

0800805c <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e014      	b.n	800809c <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f103 0220 	add.w	r2, r3, #32
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f001 f93d 	bl	8009300 <lsm6dsv16x_xl_data_rate_set>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800808c:	f04f 33ff 	mov.w	r3, #4294967295
 8008090:	e004      	b.n	800809c <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e01f      	b.n	80080fa <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f103 0220 	add.w	r2, r3, #32
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3333      	adds	r3, #51	@ 0x33
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f001 f96c 	bl	80093a4 <lsm6dsv16x_xl_data_rate_get>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80080d2:	f04f 33ff 	mov.w	r3, #4294967295
 80080d6:	e010      	b.n	80080fa <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3320      	adds	r3, #32
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 f90e 	bl	8009300 <lsm6dsv16x_xl_data_rate_set>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
 80080ee:	e004      	b.n	80080fa <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3320      	adds	r3, #32
 8008116:	f107 020b 	add.w	r2, r7, #11
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fca1 	bl	8009a64 <lsm6dsv16x_xl_full_scale_get>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008128:	f04f 33ff 	mov.w	r3, #4294967295
 800812c:	e023      	b.n	8008176 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d81b      	bhi.n	800816c <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8008134:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800814d 	.word	0x0800814d
 8008140:	08008155 	.word	0x08008155
 8008144:	0800815d 	.word	0x0800815d
 8008148:	08008165 	.word	0x08008165
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	4a0c      	ldr	r2, [pc, #48]	@ (8008180 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8008150:	601a      	str	r2, [r3, #0]
      break;
 8008152:	e00f      	b.n	8008174 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	4a0b      	ldr	r2, [pc, #44]	@ (8008184 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8008158:	601a      	str	r2, [r3, #0]
      break;
 800815a:	e00b      	b.n	8008174 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	4a0a      	ldr	r2, [pc, #40]	@ (8008188 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8008160:	601a      	str	r2, [r3, #0]
      break;
 8008162:	e007      	b.n	8008174 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	4a09      	ldr	r2, [pc, #36]	@ (800818c <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8008168:	601a      	str	r2, [r3, #0]
      break;
 800816a:	e003      	b.n	8008174 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	60fb      	str	r3, [r7, #12]
      break;
 8008172:	bf00      	nop
  }

  return ret;
 8008174:	68fb      	ldr	r3, [r7, #12]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	3d79db23 	.word	0x3d79db23
 8008184:	3df9db23 	.word	0x3df9db23
 8008188:	3e79db23 	.word	0x3e79db23
 800818c:	3ef9db23 	.word	0x3ef9db23

08008190 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3320      	adds	r3, #32
 80081a2:	f107 020b 	add.w	r2, r7, #11
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f001 f8fb 	bl	80093a4 <lsm6dsv16x_xl_data_rate_get>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	e0ea      	b.n	8008390 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80081be:	f200 80e2 	bhi.w	8008386 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 80081c2:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	0800827d 	.word	0x0800827d
 80081cc:	08008287 	.word	0x08008287
 80081d0:	0800828f 	.word	0x0800828f
 80081d4:	0800829f 	.word	0x0800829f
 80081d8:	080082b7 	.word	0x080082b7
 80081dc:	080082cf 	.word	0x080082cf
 80081e0:	080082e7 	.word	0x080082e7
 80081e4:	080082ff 	.word	0x080082ff
 80081e8:	08008317 	.word	0x08008317
 80081ec:	0800832f 	.word	0x0800832f
 80081f0:	08008347 	.word	0x08008347
 80081f4:	0800835f 	.word	0x0800835f
 80081f8:	08008377 	.word	0x08008377
 80081fc:	08008387 	.word	0x08008387
 8008200:	08008387 	.word	0x08008387
 8008204:	08008387 	.word	0x08008387
 8008208:	08008387 	.word	0x08008387
 800820c:	08008387 	.word	0x08008387
 8008210:	08008387 	.word	0x08008387
 8008214:	080082a7 	.word	0x080082a7
 8008218:	080082bf 	.word	0x080082bf
 800821c:	080082d7 	.word	0x080082d7
 8008220:	080082ef 	.word	0x080082ef
 8008224:	08008307 	.word	0x08008307
 8008228:	0800831f 	.word	0x0800831f
 800822c:	08008337 	.word	0x08008337
 8008230:	0800834f 	.word	0x0800834f
 8008234:	08008367 	.word	0x08008367
 8008238:	0800837f 	.word	0x0800837f
 800823c:	08008387 	.word	0x08008387
 8008240:	08008387 	.word	0x08008387
 8008244:	08008387 	.word	0x08008387
 8008248:	08008387 	.word	0x08008387
 800824c:	08008387 	.word	0x08008387
 8008250:	08008387 	.word	0x08008387
 8008254:	08008297 	.word	0x08008297
 8008258:	080082af 	.word	0x080082af
 800825c:	080082c7 	.word	0x080082c7
 8008260:	080082df 	.word	0x080082df
 8008264:	080082f7 	.word	0x080082f7
 8008268:	0800830f 	.word	0x0800830f
 800826c:	08008327 	.word	0x08008327
 8008270:	0800833f 	.word	0x0800833f
 8008274:	08008357 	.word	0x08008357
 8008278:	0800836f 	.word	0x0800836f
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
      break;
 8008284:	e083      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	4a43      	ldr	r2, [pc, #268]	@ (8008398 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 800828a:	601a      	str	r2, [r3, #0]
      break;
 800828c:	e07f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	4a42      	ldr	r2, [pc, #264]	@ (800839c <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 8008292:	601a      	str	r2, [r3, #0]
      break;
 8008294:	e07b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	4a41      	ldr	r2, [pc, #260]	@ (80083a0 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 800829a:	601a      	str	r2, [r3, #0]
      break;
 800829c:	e077      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	4a40      	ldr	r2, [pc, #256]	@ (80083a4 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 80082a2:	601a      	str	r2, [r3, #0]
      break;
 80082a4:	e073      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	4a3f      	ldr	r2, [pc, #252]	@ (80083a8 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 80082aa:	601a      	str	r2, [r3, #0]
      break;
 80082ac:	e06f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	4a3e      	ldr	r2, [pc, #248]	@ (80083ac <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 80082b2:	601a      	str	r2, [r3, #0]
      break;
 80082b4:	e06b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	4a3d      	ldr	r2, [pc, #244]	@ (80083b0 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 80082ba:	601a      	str	r2, [r3, #0]
      break;
 80082bc:	e067      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	4a3c      	ldr	r2, [pc, #240]	@ (80083b4 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 80082c2:	601a      	str	r2, [r3, #0]
      break;
 80082c4:	e063      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	4a3b      	ldr	r2, [pc, #236]	@ (80083b8 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 80082ca:	601a      	str	r2, [r3, #0]
      break;
 80082cc:	e05f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	4a3a      	ldr	r2, [pc, #232]	@ (80083bc <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 80082d2:	601a      	str	r2, [r3, #0]
      break;
 80082d4:	e05b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	4a39      	ldr	r2, [pc, #228]	@ (80083c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 80082da:	601a      	str	r2, [r3, #0]
      break;
 80082dc:	e057      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	4a38      	ldr	r2, [pc, #224]	@ (80083c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 80082e2:	601a      	str	r2, [r3, #0]
      break;
 80082e4:	e053      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	4a37      	ldr	r2, [pc, #220]	@ (80083c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 80082ea:	601a      	str	r2, [r3, #0]
      break;
 80082ec:	e04f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	4a36      	ldr	r2, [pc, #216]	@ (80083cc <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 80082f2:	601a      	str	r2, [r3, #0]
      break;
 80082f4:	e04b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	4a35      	ldr	r2, [pc, #212]	@ (80083d0 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 80082fa:	601a      	str	r2, [r3, #0]
      break;
 80082fc:	e047      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	4a34      	ldr	r2, [pc, #208]	@ (80083d4 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 8008302:	601a      	str	r2, [r3, #0]
      break;
 8008304:	e043      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	4a33      	ldr	r2, [pc, #204]	@ (80083d8 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 800830a:	601a      	str	r2, [r3, #0]
      break;
 800830c:	e03f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	4a32      	ldr	r2, [pc, #200]	@ (80083dc <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 8008312:	601a      	str	r2, [r3, #0]
      break;
 8008314:	e03b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	4a31      	ldr	r2, [pc, #196]	@ (80083e0 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 800831a:	601a      	str	r2, [r3, #0]
      break;
 800831c:	e037      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	4a30      	ldr	r2, [pc, #192]	@ (80083e4 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 8008322:	601a      	str	r2, [r3, #0]
      break;
 8008324:	e033      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	4a2f      	ldr	r2, [pc, #188]	@ (80083e8 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 800832a:	601a      	str	r2, [r3, #0]
      break;
 800832c:	e02f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	4a2e      	ldr	r2, [pc, #184]	@ (80083ec <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 8008332:	601a      	str	r2, [r3, #0]
      break;
 8008334:	e02b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	4a2d      	ldr	r2, [pc, #180]	@ (80083f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 800833a:	601a      	str	r2, [r3, #0]
      break;
 800833c:	e027      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	4a2c      	ldr	r2, [pc, #176]	@ (80083f4 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 8008342:	601a      	str	r2, [r3, #0]
      break;
 8008344:	e023      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	4a2b      	ldr	r2, [pc, #172]	@ (80083f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 800834a:	601a      	str	r2, [r3, #0]
      break;
 800834c:	e01f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	4a2a      	ldr	r2, [pc, #168]	@ (80083fc <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 8008352:	601a      	str	r2, [r3, #0]
      break;
 8008354:	e01b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	4a29      	ldr	r2, [pc, #164]	@ (8008400 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 800835a:	601a      	str	r2, [r3, #0]
      break;
 800835c:	e017      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	4a28      	ldr	r2, [pc, #160]	@ (8008404 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 8008362:	601a      	str	r2, [r3, #0]
      break;
 8008364:	e013      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	4a27      	ldr	r2, [pc, #156]	@ (8008408 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 800836a:	601a      	str	r2, [r3, #0]
      break;
 800836c:	e00f      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	4a26      	ldr	r2, [pc, #152]	@ (800840c <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 8008372:	601a      	str	r2, [r3, #0]
      break;
 8008374:	e00b      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	4a25      	ldr	r2, [pc, #148]	@ (8008410 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 800837a:	601a      	str	r2, [r3, #0]
      break;
 800837c:	e007      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	4a24      	ldr	r2, [pc, #144]	@ (8008414 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 8008382:	601a      	str	r2, [r3, #0]
      break;
 8008384:	e003      	b.n	800838e <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	60fb      	str	r3, [r7, #12]
      break;
 800838c:	bf00      	nop
  }

  return ret;
 800838e:	68fb      	ldr	r3, [r7, #12]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	3ff00000 	.word	0x3ff00000
 800839c:	40f00000 	.word	0x40f00000
 80083a0:	41480000 	.word	0x41480000
 80083a4:	41700000 	.word	0x41700000
 80083a8:	417a0000 	.word	0x417a0000
 80083ac:	41c80000 	.word	0x41c80000
 80083b0:	41f00000 	.word	0x41f00000
 80083b4:	41fa0000 	.word	0x41fa0000
 80083b8:	42480000 	.word	0x42480000
 80083bc:	42700000 	.word	0x42700000
 80083c0:	427a0000 	.word	0x427a0000
 80083c4:	42c80000 	.word	0x42c80000
 80083c8:	42f00000 	.word	0x42f00000
 80083cc:	42fa0000 	.word	0x42fa0000
 80083d0:	43480000 	.word	0x43480000
 80083d4:	43700000 	.word	0x43700000
 80083d8:	437a0000 	.word	0x437a0000
 80083dc:	43c80000 	.word	0x43c80000
 80083e0:	43f00000 	.word	0x43f00000
 80083e4:	43fa0000 	.word	0x43fa0000
 80083e8:	44480000 	.word	0x44480000
 80083ec:	44700000 	.word	0x44700000
 80083f0:	447a0000 	.word	0x447a0000
 80083f4:	44c80000 	.word	0x44c80000
 80083f8:	44f00000 	.word	0x44f00000
 80083fc:	44fa0000 	.word	0x44fa0000
 8008400:	45480000 	.word	0x45480000
 8008404:	45700000 	.word	0x45700000
 8008408:	457a0000 	.word	0x457a0000
 800840c:	45c80000 	.word	0x45c80000
 8008410:	45f00000 	.word	0x45f00000
 8008414:	45fa0000 	.word	0x45fa0000

08008418 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800842a:	2b01      	cmp	r3, #1
 800842c:	d106      	bne.n	800843c <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800842e:	ed97 0a00 	vldr	s0, [r7]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fc52 	bl	8008cdc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008438:	4603      	mov	r3, r0
 800843a:	e005      	b.n	8008448 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800843c:	ed97 0a00 	vldr	s0, [r7]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fced 	bl	8008e20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 8008446:	4603      	mov	r3, r0
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3320      	adds	r3, #32
 8008462:	f107 020b 	add.w	r2, r7, #11
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fafb 	bl	8009a64 <lsm6dsv16x_xl_full_scale_get>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008474:	f04f 33ff 	mov.w	r3, #4294967295
 8008478:	e023      	b.n	80084c2 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d81b      	bhi.n	80084b8 <LSM6DSV16X_ACC_GetFullScale+0x68>
 8008480:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	08008499 	.word	0x08008499
 800848c:	080084a1 	.word	0x080084a1
 8008490:	080084a9 	.word	0x080084a9
 8008494:	080084b1 	.word	0x080084b1
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2202      	movs	r2, #2
 800849c:	601a      	str	r2, [r3, #0]
      break;
 800849e:	e00f      	b.n	80084c0 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2204      	movs	r2, #4
 80084a4:	601a      	str	r2, [r3, #0]
      break;
 80084a6:	e00b      	b.n	80084c0 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2208      	movs	r2, #8
 80084ac:	601a      	str	r2, [r3, #0]
      break;
 80084ae:	e007      	b.n	80084c0 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2210      	movs	r2, #16
 80084b4:	601a      	str	r2, [r3, #0]
      break;
 80084b6:	e003      	b.n	80084c0 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295
 80084bc:	60fb      	str	r3, [r7, #12]
      break;
 80084be:	bf00      	nop
  }

  return ret;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop

080084cc <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	dd0b      	ble.n	80084f4 <LSM6DSV16X_ACC_SetFullScale+0x28>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b04      	cmp	r3, #4
 80084e0:	dd06      	ble.n	80084f0 <LSM6DSV16X_ACC_SetFullScale+0x24>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	dc01      	bgt.n	80084ec <LSM6DSV16X_ACC_SetFullScale+0x20>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e004      	b.n	80084f6 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084ec:	2303      	movs	r3, #3
 80084ee:	e002      	b.n	80084f6 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084f4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 80084f6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3320      	adds	r3, #32
 80084fc:	7bfa      	ldrb	r2, [r7, #15]
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fa89 	bl	8009a18 <lsm6dsv16x_xl_full_scale_set>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 800850c:	f04f 33ff 	mov.w	r3, #4294967295
 8008510:	e000      	b.n	8008514 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3320      	adds	r3, #32
 800852a:	f107 0208 	add.w	r2, r7, #8
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f001 fb22 	bl	8009b7a <lsm6dsv16x_acceleration_raw_get>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800853c:	f04f 33ff 	mov.w	r3, #4294967295
 8008540:	e00c      	b.n	800855c <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008542:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800854a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008552:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3320      	adds	r3, #32
 8008578:	f107 0210 	add.w	r2, r7, #16
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f001 fafb 	bl	8009b7a <lsm6dsv16x_acceleration_raw_get>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295
 800858e:	e03c      	b.n	800860a <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008590:	f107 030c 	add.w	r3, r7, #12
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fdb4 	bl	8008104 <LSM6DSV16X_ACC_GetSensitivity>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295
 80085a6:	e030      	b.n	800860a <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80085a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80085b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085c0:	ee17 2a90 	vmov	r2, s15
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80085c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80085d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085e0:	ee17 2a90 	vmov	r2, s15
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80085e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80085f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008600:	ee17 2a90 	vmov	r2, s15
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e014      	b.n	8008652 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f103 0220 	add.w	r2, r3, #32
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f000 ffc4 	bl	80095c4 <lsm6dsv16x_gy_data_rate_set>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8008642:	f04f 33ff 	mov.w	r3, #4294967295
 8008646:	e004      	b.n	8008652 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	e01f      	b.n	80086b0 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f103 0220 	add.w	r2, r3, #32
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3334      	adds	r3, #52	@ 0x34
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f000 fff1 	bl	8009664 <lsm6dsv16x_gy_data_rate_get>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8008688:	f04f 33ff 	mov.w	r3, #4294967295
 800868c:	e010      	b.n	80086b0 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3320      	adds	r3, #32
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f000 ff95 	bl	80095c4 <lsm6dsv16x_gy_data_rate_set>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295
 80086a4:	e004      	b.n	80086b0 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3320      	adds	r3, #32
 80086ca:	f107 020b 	add.w	r2, r7, #11
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f949 	bl	8009968 <lsm6dsv16x_gy_full_scale_get>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295
 80086e0:	e03d      	b.n	800875e <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	2b0c      	cmp	r3, #12
 80086e6:	d835      	bhi.n	8008754 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 80086e8:	a201      	add	r2, pc, #4	@ (adr r2, 80086f0 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008725 	.word	0x08008725
 80086f4:	0800872d 	.word	0x0800872d
 80086f8:	08008735 	.word	0x08008735
 80086fc:	0800873d 	.word	0x0800873d
 8008700:	08008745 	.word	0x08008745
 8008704:	08008755 	.word	0x08008755
 8008708:	08008755 	.word	0x08008755
 800870c:	08008755 	.word	0x08008755
 8008710:	08008755 	.word	0x08008755
 8008714:	08008755 	.word	0x08008755
 8008718:	08008755 	.word	0x08008755
 800871c:	08008755 	.word	0x08008755
 8008720:	0800874d 	.word	0x0800874d
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	4a10      	ldr	r2, [pc, #64]	@ (8008768 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008728:	601a      	str	r2, [r3, #0]
      break;
 800872a:	e017      	b.n	800875c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	4a0f      	ldr	r2, [pc, #60]	@ (800876c <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8008730:	601a      	str	r2, [r3, #0]
      break;
 8008732:	e013      	b.n	800875c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	4a0e      	ldr	r2, [pc, #56]	@ (8008770 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8008738:	601a      	str	r2, [r3, #0]
      break;
 800873a:	e00f      	b.n	800875c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	4a0d      	ldr	r2, [pc, #52]	@ (8008774 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8008740:	601a      	str	r2, [r3, #0]
      break;
 8008742:	e00b      	b.n	800875c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	4a0c      	ldr	r2, [pc, #48]	@ (8008778 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8008748:	601a      	str	r2, [r3, #0]
      break;
 800874a:	e007      	b.n	800875c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	4a0b      	ldr	r2, [pc, #44]	@ (800877c <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008750:	601a      	str	r2, [r3, #0]
      break;
 8008752:	e003      	b.n	800875c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8008754:	f04f 33ff 	mov.w	r3, #4294967295
 8008758:	60fb      	str	r3, [r7, #12]
      break;
 800875a:	bf00      	nop
  }

  return ret;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	408c0000 	.word	0x408c0000
 800876c:	410c0000 	.word	0x410c0000
 8008770:	418c0000 	.word	0x418c0000
 8008774:	420c0000 	.word	0x420c0000
 8008778:	428c0000 	.word	0x428c0000
 800877c:	430c0000 	.word	0x430c0000

08008780 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3320      	adds	r3, #32
 8008792:	f107 020b 	add.w	r2, r7, #11
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f000 ff63 	bl	8009664 <lsm6dsv16x_gy_data_rate_get>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295
 80087a8:	e0ea      	b.n	8008980 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b2c      	cmp	r3, #44	@ 0x2c
 80087ae:	f200 80e2 	bhi.w	8008976 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 80087b2:	a201      	add	r2, pc, #4	@ (adr r2, 80087b8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	0800886d 	.word	0x0800886d
 80087bc:	08008877 	.word	0x08008877
 80087c0:	0800887f 	.word	0x0800887f
 80087c4:	0800888f 	.word	0x0800888f
 80087c8:	080088a7 	.word	0x080088a7
 80087cc:	080088bf 	.word	0x080088bf
 80087d0:	080088d7 	.word	0x080088d7
 80087d4:	080088ef 	.word	0x080088ef
 80087d8:	08008907 	.word	0x08008907
 80087dc:	0800891f 	.word	0x0800891f
 80087e0:	08008937 	.word	0x08008937
 80087e4:	0800894f 	.word	0x0800894f
 80087e8:	08008967 	.word	0x08008967
 80087ec:	08008977 	.word	0x08008977
 80087f0:	08008977 	.word	0x08008977
 80087f4:	08008977 	.word	0x08008977
 80087f8:	08008977 	.word	0x08008977
 80087fc:	08008977 	.word	0x08008977
 8008800:	08008977 	.word	0x08008977
 8008804:	08008897 	.word	0x08008897
 8008808:	080088af 	.word	0x080088af
 800880c:	080088c7 	.word	0x080088c7
 8008810:	080088df 	.word	0x080088df
 8008814:	080088f7 	.word	0x080088f7
 8008818:	0800890f 	.word	0x0800890f
 800881c:	08008927 	.word	0x08008927
 8008820:	0800893f 	.word	0x0800893f
 8008824:	08008957 	.word	0x08008957
 8008828:	0800896f 	.word	0x0800896f
 800882c:	08008977 	.word	0x08008977
 8008830:	08008977 	.word	0x08008977
 8008834:	08008977 	.word	0x08008977
 8008838:	08008977 	.word	0x08008977
 800883c:	08008977 	.word	0x08008977
 8008840:	08008977 	.word	0x08008977
 8008844:	08008887 	.word	0x08008887
 8008848:	0800889f 	.word	0x0800889f
 800884c:	080088b7 	.word	0x080088b7
 8008850:	080088cf 	.word	0x080088cf
 8008854:	080088e7 	.word	0x080088e7
 8008858:	080088ff 	.word	0x080088ff
 800885c:	08008917 	.word	0x08008917
 8008860:	0800892f 	.word	0x0800892f
 8008864:	08008947 	.word	0x08008947
 8008868:	0800895f 	.word	0x0800895f
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
      break;
 8008874:	e083      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	4a43      	ldr	r2, [pc, #268]	@ (8008988 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 800887a:	601a      	str	r2, [r3, #0]
      break;
 800887c:	e07f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	4a42      	ldr	r2, [pc, #264]	@ (800898c <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8008882:	601a      	str	r2, [r3, #0]
      break;
 8008884:	e07b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	4a41      	ldr	r2, [pc, #260]	@ (8008990 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 800888a:	601a      	str	r2, [r3, #0]
      break;
 800888c:	e077      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	4a40      	ldr	r2, [pc, #256]	@ (8008994 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8008892:	601a      	str	r2, [r3, #0]
      break;
 8008894:	e073      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	4a3f      	ldr	r2, [pc, #252]	@ (8008998 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 800889a:	601a      	str	r2, [r3, #0]
      break;
 800889c:	e06f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	4a3e      	ldr	r2, [pc, #248]	@ (800899c <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 80088a2:	601a      	str	r2, [r3, #0]
      break;
 80088a4:	e06b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	4a3d      	ldr	r2, [pc, #244]	@ (80089a0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 80088aa:	601a      	str	r2, [r3, #0]
      break;
 80088ac:	e067      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	4a3c      	ldr	r2, [pc, #240]	@ (80089a4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 80088b2:	601a      	str	r2, [r3, #0]
      break;
 80088b4:	e063      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	4a3b      	ldr	r2, [pc, #236]	@ (80089a8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 80088ba:	601a      	str	r2, [r3, #0]
      break;
 80088bc:	e05f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	4a3a      	ldr	r2, [pc, #232]	@ (80089ac <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 80088c2:	601a      	str	r2, [r3, #0]
      break;
 80088c4:	e05b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	4a39      	ldr	r2, [pc, #228]	@ (80089b0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 80088ca:	601a      	str	r2, [r3, #0]
      break;
 80088cc:	e057      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	4a38      	ldr	r2, [pc, #224]	@ (80089b4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 80088d2:	601a      	str	r2, [r3, #0]
      break;
 80088d4:	e053      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	4a37      	ldr	r2, [pc, #220]	@ (80089b8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 80088da:	601a      	str	r2, [r3, #0]
      break;
 80088dc:	e04f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4a36      	ldr	r2, [pc, #216]	@ (80089bc <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 80088e2:	601a      	str	r2, [r3, #0]
      break;
 80088e4:	e04b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	4a35      	ldr	r2, [pc, #212]	@ (80089c0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 80088ea:	601a      	str	r2, [r3, #0]
      break;
 80088ec:	e047      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	4a34      	ldr	r2, [pc, #208]	@ (80089c4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 80088f2:	601a      	str	r2, [r3, #0]
      break;
 80088f4:	e043      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	4a33      	ldr	r2, [pc, #204]	@ (80089c8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 80088fa:	601a      	str	r2, [r3, #0]
      break;
 80088fc:	e03f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	4a32      	ldr	r2, [pc, #200]	@ (80089cc <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8008902:	601a      	str	r2, [r3, #0]
      break;
 8008904:	e03b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	4a31      	ldr	r2, [pc, #196]	@ (80089d0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 800890a:	601a      	str	r2, [r3, #0]
      break;
 800890c:	e037      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	4a30      	ldr	r2, [pc, #192]	@ (80089d4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8008912:	601a      	str	r2, [r3, #0]
      break;
 8008914:	e033      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	4a2f      	ldr	r2, [pc, #188]	@ (80089d8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 800891a:	601a      	str	r2, [r3, #0]
      break;
 800891c:	e02f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	4a2e      	ldr	r2, [pc, #184]	@ (80089dc <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8008922:	601a      	str	r2, [r3, #0]
      break;
 8008924:	e02b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	4a2d      	ldr	r2, [pc, #180]	@ (80089e0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 800892a:	601a      	str	r2, [r3, #0]
      break;
 800892c:	e027      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	4a2c      	ldr	r2, [pc, #176]	@ (80089e4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 8008932:	601a      	str	r2, [r3, #0]
      break;
 8008934:	e023      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	4a2b      	ldr	r2, [pc, #172]	@ (80089e8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 800893a:	601a      	str	r2, [r3, #0]
      break;
 800893c:	e01f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 8008942:	601a      	str	r2, [r3, #0]
      break;
 8008944:	e01b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	4a29      	ldr	r2, [pc, #164]	@ (80089f0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 800894a:	601a      	str	r2, [r3, #0]
      break;
 800894c:	e017      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	4a28      	ldr	r2, [pc, #160]	@ (80089f4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 8008952:	601a      	str	r2, [r3, #0]
      break;
 8008954:	e013      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	4a27      	ldr	r2, [pc, #156]	@ (80089f8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 800895a:	601a      	str	r2, [r3, #0]
      break;
 800895c:	e00f      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	4a26      	ldr	r2, [pc, #152]	@ (80089fc <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 8008962:	601a      	str	r2, [r3, #0]
      break;
 8008964:	e00b      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	4a25      	ldr	r2, [pc, #148]	@ (8008a00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 800896a:	601a      	str	r2, [r3, #0]
      break;
 800896c:	e007      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	4a24      	ldr	r2, [pc, #144]	@ (8008a04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 8008972:	601a      	str	r2, [r3, #0]
      break;
 8008974:	e003      	b.n	800897e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8008976:	f04f 33ff 	mov.w	r3, #4294967295
 800897a:	60fb      	str	r3, [r7, #12]
      break;
 800897c:	bf00      	nop
  }

  return ret;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	3ff00000 	.word	0x3ff00000
 800898c:	40f00000 	.word	0x40f00000
 8008990:	41480000 	.word	0x41480000
 8008994:	41700000 	.word	0x41700000
 8008998:	417a0000 	.word	0x417a0000
 800899c:	41c80000 	.word	0x41c80000
 80089a0:	41f00000 	.word	0x41f00000
 80089a4:	41fa0000 	.word	0x41fa0000
 80089a8:	42480000 	.word	0x42480000
 80089ac:	42700000 	.word	0x42700000
 80089b0:	427a0000 	.word	0x427a0000
 80089b4:	42c80000 	.word	0x42c80000
 80089b8:	42f00000 	.word	0x42f00000
 80089bc:	42fa0000 	.word	0x42fa0000
 80089c0:	43480000 	.word	0x43480000
 80089c4:	43700000 	.word	0x43700000
 80089c8:	437a0000 	.word	0x437a0000
 80089cc:	43c80000 	.word	0x43c80000
 80089d0:	43f00000 	.word	0x43f00000
 80089d4:	43fa0000 	.word	0x43fa0000
 80089d8:	44480000 	.word	0x44480000
 80089dc:	44700000 	.word	0x44700000
 80089e0:	447a0000 	.word	0x447a0000
 80089e4:	44c80000 	.word	0x44c80000
 80089e8:	44f00000 	.word	0x44f00000
 80089ec:	44fa0000 	.word	0x44fa0000
 80089f0:	45480000 	.word	0x45480000
 80089f4:	45700000 	.word	0x45700000
 80089f8:	457a0000 	.word	0x457a0000
 80089fc:	45c80000 	.word	0x45c80000
 8008a00:	45f00000 	.word	0x45f00000
 8008a04:	45fa0000 	.word	0x45fa0000

08008a08 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d106      	bne.n	8008a2c <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008a1e:	ed97 0a00 	vldr	s0, [r7]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa94 	bl	8008f50 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	e005      	b.n	8008a38 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008a2c:	ed97 0a00 	vldr	s0, [r7]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb23 	bl	800907c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008a36:	4603      	mov	r3, r0
  }
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3320      	adds	r3, #32
 8008a52:	f107 020b 	add.w	r2, r7, #11
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 ff85 	bl	8009968 <lsm6dsv16x_gy_full_scale_get>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	e041      	b.n	8008aee <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	2b0c      	cmp	r3, #12
 8008a6e:	d839      	bhi.n	8008ae4 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008a70:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008aad 	.word	0x08008aad
 8008a7c:	08008ab5 	.word	0x08008ab5
 8008a80:	08008abd 	.word	0x08008abd
 8008a84:	08008ac7 	.word	0x08008ac7
 8008a88:	08008ad1 	.word	0x08008ad1
 8008a8c:	08008ae5 	.word	0x08008ae5
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008ae5 	.word	0x08008ae5
 8008a98:	08008ae5 	.word	0x08008ae5
 8008a9c:	08008ae5 	.word	0x08008ae5
 8008aa0:	08008ae5 	.word	0x08008ae5
 8008aa4:	08008ae5 	.word	0x08008ae5
 8008aa8:	08008adb 	.word	0x08008adb
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	227d      	movs	r2, #125	@ 0x7d
 8008ab0:	601a      	str	r2, [r3, #0]
      break;
 8008ab2:	e01b      	b.n	8008aec <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	22fa      	movs	r2, #250	@ 0xfa
 8008ab8:	601a      	str	r2, [r3, #0]
      break;
 8008aba:	e017      	b.n	8008aec <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008ac2:	601a      	str	r2, [r3, #0]
      break;
 8008ac4:	e012      	b.n	8008aec <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008acc:	601a      	str	r2, [r3, #0]
      break;
 8008ace:	e00d      	b.n	8008aec <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008ad6:	601a      	str	r2, [r3, #0]
      break;
 8008ad8:	e008      	b.n	8008aec <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008ae0:	601a      	str	r2, [r3, #0]
      break;
 8008ae2:	e003      	b.n	8008aec <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae8:	60fb      	str	r3, [r7, #12]
      break;
 8008aea:	bf00      	nop
  }

  return ret;
 8008aec:	68fb      	ldr	r3, [r7, #12]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop

08008af8 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b7d      	cmp	r3, #125	@ 0x7d
 8008b06:	dd18      	ble.n	8008b3a <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2bfa      	cmp	r3, #250	@ 0xfa
 8008b0c:	dd13      	ble.n	8008b36 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008b14:	dd0d      	ble.n	8008b32 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b1c:	dd07      	ble.n	8008b2e <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008b24:	dc01      	bgt.n	8008b2a <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008b26:	2304      	movs	r3, #4
 8008b28:	e008      	b.n	8008b3c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	e006      	b.n	8008b3c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e004      	b.n	8008b3c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b32:	2302      	movs	r3, #2
 8008b34:	e002      	b.n	8008b3c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b3a:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008b3c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3320      	adds	r3, #32
 8008b42:	7bfa      	ldrb	r2, [r7, #15]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fee8 	bl	800991c <lsm6dsv16x_gy_full_scale_set>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295
 8008b56:	e000      	b.n	8008b5a <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3320      	adds	r3, #32
 8008b70:	f107 0208 	add.w	r2, r7, #8
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 ffb2 	bl	8009ae0 <lsm6dsv16x_angular_rate_raw_get>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008b82:	f04f 33ff 	mov.w	r3, #4294967295
 8008b86:	e00c      	b.n	8008ba2 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008b88:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008b90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008b98:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008bb4:	f04f 0300 	mov.w	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3320      	adds	r3, #32
 8008bbe:	f107 0210 	add.w	r2, r7, #16
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 ff8b 	bl	8009ae0 <lsm6dsv16x_angular_rate_raw_get>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	e03c      	b.n	8008c50 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008bd6:	f107 030c 	add.w	r3, r7, #12
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff fd6b 	bl	80086b8 <LSM6DSV16X_GYRO_GetSensitivity>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	e030      	b.n	8008c50 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008bee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8008bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c06:	ee17 2a90 	vmov	r2, s15
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008c0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c26:	ee17 2a90 	vmov	r2, s15
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008c2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c46:	ee17 2a90 	vmov	r2, s15
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
 8008c64:	4613      	mov	r3, r2
 8008c66:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f103 0020 	add.w	r0, r3, #32
 8008c6e:	1cba      	adds	r2, r7, #2
 8008c70:	78f9      	ldrb	r1, [r7, #3]
 8008c72:	2301      	movs	r3, #1
 8008c74:	f000 fae4 	bl	8009240 <lsm6dsv16x_write_reg>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	e000      	b.n	8008c86 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d006      	beq.n	8008cb2 <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d101      	bne.n	8008cae <LSM6DSV16X_Set_Mem_Bank+0x20>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e002      	b.n	8008cb4 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	e000      	b.n	8008cb4 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008cb2:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008cb4:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3320      	adds	r3, #32
 8008cba:	7afa      	ldrb	r2, [r7, #11]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fadc 	bl	800927c <lsm6dsv16x_mem_bank_set>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295
 8008cce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008ce8:	edd7 7a00 	vldr	s15, [r7]
 8008cec:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf8:	d801      	bhi.n	8008cfe <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e06e      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008cfe:	edd7 7a00 	vldr	s15, [r7]
 8008d02:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0e:	d801      	bhi.n	8008d14 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e063      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d14:	edd7 7a00 	vldr	s15, [r7]
 8008d18:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d24:	d801      	bhi.n	8008d2a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008d26:	2303      	movs	r3, #3
 8008d28:	e058      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d2a:	edd7 7a00 	vldr	s15, [r7]
 8008d2e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	d801      	bhi.n	8008d40 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008d3c:	2304      	movs	r3, #4
 8008d3e:	e04d      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d40:	edd7 7a00 	vldr	s15, [r7]
 8008d44:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d50:	d801      	bhi.n	8008d56 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008d52:	2305      	movs	r3, #5
 8008d54:	e042      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d56:	edd7 7a00 	vldr	s15, [r7]
 8008d5a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008e08 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d66:	d801      	bhi.n	8008d6c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008d68:	2306      	movs	r3, #6
 8008d6a:	e037      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d6c:	edd7 7a00 	vldr	s15, [r7]
 8008d70:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008e0c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8008d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7c:	d801      	bhi.n	8008d82 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008d7e:	2307      	movs	r3, #7
 8008d80:	e02c      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d82:	edd7 7a00 	vldr	s15, [r7]
 8008d86:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008e10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8008d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d92:	d801      	bhi.n	8008d98 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008d94:	2308      	movs	r3, #8
 8008d96:	e021      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d98:	edd7 7a00 	vldr	s15, [r7]
 8008d9c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008e14 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da8:	d801      	bhi.n	8008dae <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008daa:	2309      	movs	r3, #9
 8008dac:	e016      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dae:	edd7 7a00 	vldr	s15, [r7]
 8008db2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008e18 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	d801      	bhi.n	8008dc4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008dc0:	230a      	movs	r3, #10
 8008dc2:	e00b      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dc4:	edd7 7a00 	vldr	s15, [r7]
 8008dc8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008e1c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8008dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	d801      	bhi.n	8008dda <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008dd6:	230b      	movs	r3, #11
 8008dd8:	e000      	b.n	8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dda:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008ddc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3320      	adds	r3, #32
 8008de2:	7bfa      	ldrb	r2, [r7, #15]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fa8a 	bl	8009300 <lsm6dsv16x_xl_data_rate_set>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	e000      	b.n	8008dfa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	42700000 	.word	0x42700000
 8008e08:	42f00000 	.word	0x42f00000
 8008e0c:	43700000 	.word	0x43700000
 8008e10:	43f00000 	.word	0x43f00000
 8008e14:	44700000 	.word	0x44700000
 8008e18:	44f00000 	.word	0x44f00000
 8008e1c:	45700000 	.word	0x45700000

08008e20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008e2c:	edd7 7a00 	vldr	s15, [r7]
 8008e30:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	d801      	bhi.n	8008e42 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e06e      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e42:	edd7 7a00 	vldr	s15, [r7]
 8008e46:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e52:	d801      	bhi.n	8008e58 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e063      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e58:	edd7 7a00 	vldr	s15, [r7]
 8008e5c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e68:	d801      	bhi.n	8008e6e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e058      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e6e:	edd7 7a00 	vldr	s15, [r7]
 8008e72:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7e:	d801      	bhi.n	8008e84 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008e80:	2304      	movs	r3, #4
 8008e82:	e04d      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e84:	edd7 7a00 	vldr	s15, [r7]
 8008e88:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008f34 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e94:	d801      	bhi.n	8008e9a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008e96:	2305      	movs	r3, #5
 8008e98:	e042      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e9a:	edd7 7a00 	vldr	s15, [r7]
 8008e9e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008f38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eaa:	d801      	bhi.n	8008eb0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008eac:	2306      	movs	r3, #6
 8008eae:	e037      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008eb0:	edd7 7a00 	vldr	s15, [r7]
 8008eb4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008f3c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec0:	d801      	bhi.n	8008ec6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008ec2:	2307      	movs	r3, #7
 8008ec4:	e02c      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ec6:	edd7 7a00 	vldr	s15, [r7]
 8008eca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008f40 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8008ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed6:	d801      	bhi.n	8008edc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008ed8:	2308      	movs	r3, #8
 8008eda:	e021      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008edc:	edd7 7a00 	vldr	s15, [r7]
 8008ee0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008f44 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8008ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	d801      	bhi.n	8008ef2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008eee:	2309      	movs	r3, #9
 8008ef0:	e016      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ef2:	edd7 7a00 	vldr	s15, [r7]
 8008ef6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008f48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8008efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f02:	d801      	bhi.n	8008f08 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008f04:	230a      	movs	r3, #10
 8008f06:	e00b      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f08:	edd7 7a00 	vldr	s15, [r7]
 8008f0c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008f4c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8008f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f18:	d801      	bhi.n	8008f1e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8008f1a:	230b      	movs	r3, #11
 8008f1c:	e000      	b.n	8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f1e:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	42700000 	.word	0x42700000
 8008f38:	42f00000 	.word	0x42f00000
 8008f3c:	43700000 	.word	0x43700000
 8008f40:	43f00000 	.word	0x43f00000
 8008f44:	44700000 	.word	0x44700000
 8008f48:	44f00000 	.word	0x44f00000
 8008f4c:	45700000 	.word	0x45700000

08008f50 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8008f5c:	edd7 7a00 	vldr	s15, [r7]
 8008f60:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6c:	d801      	bhi.n	8008f72 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e063      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f72:	edd7 7a00 	vldr	s15, [r7]
 8008f76:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f82:	d801      	bhi.n	8008f88 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8008f84:	2303      	movs	r3, #3
 8008f86:	e058      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f88:	edd7 7a00 	vldr	s15, [r7]
 8008f8c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f98:	d801      	bhi.n	8008f9e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8008f9a:	2304      	movs	r3, #4
 8008f9c:	e04d      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f9e:	edd7 7a00 	vldr	s15, [r7]
 8008fa2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009060 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fae:	d801      	bhi.n	8008fb4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008fb0:	2305      	movs	r3, #5
 8008fb2:	e042      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fb4:	edd7 7a00 	vldr	s15, [r7]
 8008fb8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009064 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8008fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc4:	d801      	bhi.n	8008fca <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008fc6:	2306      	movs	r3, #6
 8008fc8:	e037      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fca:	edd7 7a00 	vldr	s15, [r7]
 8008fce:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009068 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8008fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fda:	d801      	bhi.n	8008fe0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008fdc:	2307      	movs	r3, #7
 8008fde:	e02c      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fe0:	edd7 7a00 	vldr	s15, [r7]
 8008fe4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800906c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8008fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff0:	d801      	bhi.n	8008ff6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8008ff2:	2308      	movs	r3, #8
 8008ff4:	e021      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008ff6:	edd7 7a00 	vldr	s15, [r7]
 8008ffa:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009070 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 8008ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009006:	d801      	bhi.n	800900c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009008:	2309      	movs	r3, #9
 800900a:	e016      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800900c:	edd7 7a00 	vldr	s15, [r7]
 8009010:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009074 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8009014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901c:	d801      	bhi.n	8009022 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800901e:	230a      	movs	r3, #10
 8009020:	e00b      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009022:	edd7 7a00 	vldr	s15, [r7]
 8009026:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009078 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800902a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800902e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009032:	d801      	bhi.n	8009038 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8009034:	230b      	movs	r3, #11
 8009036:	e000      	b.n	800903a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009038:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800903a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3320      	adds	r3, #32
 8009040:	7bfa      	ldrb	r2, [r7, #15]
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fabd 	bl	80095c4 <lsm6dsv16x_gy_data_rate_set>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8009050:	f04f 33ff 	mov.w	r3, #4294967295
 8009054:	e000      	b.n	8009058 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	42700000 	.word	0x42700000
 8009064:	42f00000 	.word	0x42f00000
 8009068:	43700000 	.word	0x43700000
 800906c:	43f00000 	.word	0x43f00000
 8009070:	44700000 	.word	0x44700000
 8009074:	44f00000 	.word	0x44f00000
 8009078:	45700000 	.word	0x45700000

0800907c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8009088:	edd7 7a00 	vldr	s15, [r7]
 800908c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	d801      	bhi.n	800909e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800909a:	2302      	movs	r3, #2
 800909c:	e063      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800909e:	edd7 7a00 	vldr	s15, [r7]
 80090a2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80090a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ae:	d801      	bhi.n	80090b4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80090b0:	2303      	movs	r3, #3
 80090b2:	e058      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090b4:	edd7 7a00 	vldr	s15, [r7]
 80090b8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80090bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	d801      	bhi.n	80090ca <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80090c6:	2304      	movs	r3, #4
 80090c8:	e04d      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090ca:	edd7 7a00 	vldr	s15, [r7]
 80090ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800917c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80090d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090da:	d801      	bhi.n	80090e0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80090dc:	2305      	movs	r3, #5
 80090de:	e042      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090e0:	edd7 7a00 	vldr	s15, [r7]
 80090e4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009180 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 80090e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f0:	d801      	bhi.n	80090f6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80090f2:	2306      	movs	r3, #6
 80090f4:	e037      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090f6:	edd7 7a00 	vldr	s15, [r7]
 80090fa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009184 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80090fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009106:	d801      	bhi.n	800910c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009108:	2307      	movs	r3, #7
 800910a:	e02c      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800910c:	edd7 7a00 	vldr	s15, [r7]
 8009110:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009188 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8009114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911c:	d801      	bhi.n	8009122 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800911e:	2308      	movs	r3, #8
 8009120:	e021      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009122:	edd7 7a00 	vldr	s15, [r7]
 8009126:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800918c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800912a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800912e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009132:	d801      	bhi.n	8009138 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009134:	2309      	movs	r3, #9
 8009136:	e016      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009138:	edd7 7a00 	vldr	s15, [r7]
 800913c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009190 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8009140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009148:	d801      	bhi.n	800914e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800914a:	230a      	movs	r3, #10
 800914c:	e00b      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800914e:	edd7 7a00 	vldr	s15, [r7]
 8009152:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8009194 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8009156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915e:	d801      	bhi.n	8009164 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009160:	230b      	movs	r3, #11
 8009162:	e000      	b.n	8009166 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009164:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	42700000 	.word	0x42700000
 8009180:	42f00000 	.word	0x42f00000
 8009184:	43700000 	.word	0x43700000
 8009188:	43f00000 	.word	0x43f00000
 800918c:	44700000 	.word	0x44700000
 8009190:	44f00000 	.word	0x44f00000
 8009194:	45700000 	.word	0x45700000

08009198 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009198:	b590      	push	{r4, r7, lr}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	607a      	str	r2, [r7, #4]
 80091a2:	461a      	mov	r2, r3
 80091a4:	460b      	mov	r3, r1
 80091a6:	72fb      	strb	r3, [r7, #11]
 80091a8:	4613      	mov	r3, r2
 80091aa:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	695c      	ldr	r4, [r3, #20]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	7b1b      	ldrb	r3, [r3, #12]
 80091b8:	4618      	mov	r0, r3
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	b299      	uxth	r1, r3
 80091be:	893b      	ldrh	r3, [r7, #8]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	47a0      	blx	r4
 80091c4:	4603      	mov	r3, r0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd90      	pop	{r4, r7, pc}

080091ce <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80091ce:	b590      	push	{r4, r7, lr}
 80091d0:	b087      	sub	sp, #28
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	461a      	mov	r2, r3
 80091da:	460b      	mov	r3, r1
 80091dc:	72fb      	strb	r3, [r7, #11]
 80091de:	4613      	mov	r3, r2
 80091e0:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	691c      	ldr	r4, [r3, #16]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	7b1b      	ldrb	r3, [r3, #12]
 80091ee:	4618      	mov	r0, r3
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	b299      	uxth	r1, r3
 80091f4:	893b      	ldrh	r3, [r7, #8]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	47a0      	blx	r4
 80091fa:	4603      	mov	r3, r0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd90      	pop	{r4, r7, pc}

08009204 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8009204:	b590      	push	{r4, r7, lr}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	461a      	mov	r2, r3
 8009210:	460b      	mov	r3, r1
 8009212:	72fb      	strb	r3, [r7, #11]
 8009214:	4613      	mov	r3, r2
 8009216:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	e009      	b.n	8009238 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	685c      	ldr	r4, [r3, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68d8      	ldr	r0, [r3, #12]
 800922c:	893b      	ldrh	r3, [r7, #8]
 800922e:	7af9      	ldrb	r1, [r7, #11]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	47a0      	blx	r4
 8009234:	6178      	str	r0, [r7, #20]

  return ret;
 8009236:	697b      	ldr	r3, [r7, #20]
}
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	461a      	mov	r2, r3
 800924c:	460b      	mov	r3, r1
 800924e:	72fb      	strb	r3, [r7, #11]
 8009250:	4613      	mov	r3, r2
 8009252:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d102      	bne.n	8009260 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 800925a:	f04f 33ff 	mov.w	r3, #4294967295
 800925e:	e009      	b.n	8009274 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681c      	ldr	r4, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68d8      	ldr	r0, [r3, #12]
 8009268:	893b      	ldrh	r3, [r7, #8]
 800926a:	7af9      	ldrb	r1, [r7, #11]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	47a0      	blx	r4
 8009270:	6178      	str	r0, [r7, #20]

  return ret;
 8009272:	697b      	ldr	r3, [r7, #20]
}
 8009274:	4618      	mov	r0, r3
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}

0800927c <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8009288:	f107 0208 	add.w	r2, r7, #8
 800928c:	2301      	movs	r3, #1
 800928e:	2101      	movs	r1, #1
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff ffb7 	bl	8009204 <lsm6dsv16x_read_reg>
 8009296:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	e019      	b.n	80092d6 <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	7a3b      	ldrb	r3, [r7, #8]
 80092ae:	f362 1386 	bfi	r3, r2, #6, #1
 80092b2:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	7a3b      	ldrb	r3, [r7, #8]
 80092be:	f362 13c7 	bfi	r3, r2, #7, #1
 80092c2:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80092c4:	f107 0208 	add.w	r2, r7, #8
 80092c8:	2301      	movs	r3, #1
 80092ca:	2101      	movs	r1, #1
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff ffb7 	bl	8009240 <lsm6dsv16x_write_reg>
 80092d2:	60f8      	str	r0, [r7, #12]

  return ret;
 80092d4:	68fb      	ldr	r3, [r7, #12]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80092e8:	2301      	movs	r3, #1
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	210f      	movs	r1, #15
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff ff88 	bl	8009204 <lsm6dsv16x_read_reg>
 80092f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80092f6:	68fb      	ldr	r3, [r7, #12]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800930c:	f107 0210 	add.w	r2, r7, #16
 8009310:	2301      	movs	r3, #1
 8009312:	2110      	movs	r1, #16
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff ff75 	bl	8009204 <lsm6dsv16x_read_reg>
 800931a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	e039      	b.n	800939a <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	b2da      	uxtb	r2, r3
 800932e:	7c3b      	ldrb	r3, [r7, #16]
 8009330:	f362 0303 	bfi	r3, r2, #0, #4
 8009334:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009336:	f107 0210 	add.w	r2, r7, #16
 800933a:	2301      	movs	r3, #1
 800933c:	2110      	movs	r1, #16
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff ff7e 	bl	8009240 <lsm6dsv16x_write_reg>
 8009344:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	e024      	b.n	800939a <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	091b      	lsrs	r3, r3, #4
 8009354:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8009356:	7cfb      	ldrb	r3, [r7, #19]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01d      	beq.n	8009398 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800935c:	f107 020c 	add.w	r2, r7, #12
 8009360:	2301      	movs	r3, #1
 8009362:	2162      	movs	r1, #98	@ 0x62
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff ff4d 	bl	8009204 <lsm6dsv16x_read_reg>
 800936a:	4602      	mov	r2, r0
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	4413      	add	r3, r2
 8009370:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8009372:	7cfb      	ldrb	r3, [r7, #19]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	b2da      	uxtb	r2, r3
 800937a:	7b3b      	ldrb	r3, [r7, #12]
 800937c:	f362 0301 	bfi	r3, r2, #0, #2
 8009380:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009382:	f107 020c 	add.w	r2, r7, #12
 8009386:	2301      	movs	r3, #1
 8009388:	2162      	movs	r1, #98	@ 0x62
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff ff58 	bl	8009240 <lsm6dsv16x_write_reg>
 8009390:	4602      	mov	r2, r0
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	4413      	add	r3, r2
 8009396:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009398:	697b      	ldr	r3, [r7, #20]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80093ae:	f107 0210 	add.w	r2, r7, #16
 80093b2:	2301      	movs	r3, #1
 80093b4:	2110      	movs	r1, #16
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff ff24 	bl	8009204 <lsm6dsv16x_read_reg>
 80093bc:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80093be:	f107 020c 	add.w	r2, r7, #12
 80093c2:	2301      	movs	r3, #1
 80093c4:	2162      	movs	r1, #98	@ 0x62
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff ff1c 	bl	8009204 <lsm6dsv16x_read_reg>
 80093cc:	4602      	mov	r2, r0
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4413      	add	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	e0ed      	b.n	80095ba <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 80093de:	7b3b      	ldrb	r3, [r7, #12]
 80093e0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 80093e8:	7c3b      	ldrb	r3, [r7, #16]
 80093ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b0c      	cmp	r3, #12
 80093f2:	f200 80dd 	bhi.w	80095b0 <lsm6dsv16x_xl_data_rate_get+0x20c>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <lsm6dsv16x_xl_data_rate_get+0x58>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009431 	.word	0x08009431
 8009400:	08009439 	.word	0x08009439
 8009404:	08009441 	.word	0x08009441
 8009408:	08009449 	.word	0x08009449
 800940c:	0800946d 	.word	0x0800946d
 8009410:	08009491 	.word	0x08009491
 8009414:	080094b5 	.word	0x080094b5
 8009418:	080094d9 	.word	0x080094d9
 800941c:	080094fd 	.word	0x080094fd
 8009420:	08009521 	.word	0x08009521
 8009424:	08009545 	.word	0x08009545
 8009428:	08009569 	.word	0x08009569
 800942c:	0800958d 	.word	0x0800958d
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
      break;
 8009436:	e0bf      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2201      	movs	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
      break;
 800943e:	e0bb      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2202      	movs	r2, #2
 8009444:	701a      	strb	r2, [r3, #0]
      break;
 8009446:	e0b7      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009448:	7cfb      	ldrb	r3, [r7, #19]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d005      	beq.n	800945a <lsm6dsv16x_xl_data_rate_get+0xb6>
 800944e:	2b02      	cmp	r3, #2
 8009450:	d007      	beq.n	8009462 <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2203      	movs	r2, #3
 8009456:	701a      	strb	r2, [r3, #0]
          break;
 8009458:	e007      	b.n	800946a <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2213      	movs	r2, #19
 800945e:	701a      	strb	r2, [r3, #0]
          break;
 8009460:	e003      	b.n	800946a <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2223      	movs	r2, #35	@ 0x23
 8009466:	701a      	strb	r2, [r3, #0]
          break;
 8009468:	bf00      	nop
      }
      break;
 800946a:	e0a5      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 800946c:	7cfb      	ldrb	r3, [r7, #19]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d005      	beq.n	800947e <lsm6dsv16x_xl_data_rate_get+0xda>
 8009472:	2b02      	cmp	r3, #2
 8009474:	d007      	beq.n	8009486 <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2204      	movs	r2, #4
 800947a:	701a      	strb	r2, [r3, #0]
          break;
 800947c:	e007      	b.n	800948e <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2214      	movs	r2, #20
 8009482:	701a      	strb	r2, [r3, #0]
          break;
 8009484:	e003      	b.n	800948e <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2224      	movs	r2, #36	@ 0x24
 800948a:	701a      	strb	r2, [r3, #0]
          break;
 800948c:	bf00      	nop
      }
      break;
 800948e:	e093      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009490:	7cfb      	ldrb	r3, [r7, #19]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d005      	beq.n	80094a2 <lsm6dsv16x_xl_data_rate_get+0xfe>
 8009496:	2b02      	cmp	r3, #2
 8009498:	d007      	beq.n	80094aa <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2205      	movs	r2, #5
 800949e:	701a      	strb	r2, [r3, #0]
          break;
 80094a0:	e007      	b.n	80094b2 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2215      	movs	r2, #21
 80094a6:	701a      	strb	r2, [r3, #0]
          break;
 80094a8:	e003      	b.n	80094b2 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2225      	movs	r2, #37	@ 0x25
 80094ae:	701a      	strb	r2, [r3, #0]
          break;
 80094b0:	bf00      	nop
      }
      break;
 80094b2:	e081      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 80094b4:	7cfb      	ldrb	r3, [r7, #19]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d005      	beq.n	80094c6 <lsm6dsv16x_xl_data_rate_get+0x122>
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d007      	beq.n	80094ce <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2206      	movs	r2, #6
 80094c2:	701a      	strb	r2, [r3, #0]
          break;
 80094c4:	e007      	b.n	80094d6 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2216      	movs	r2, #22
 80094ca:	701a      	strb	r2, [r3, #0]
          break;
 80094cc:	e003      	b.n	80094d6 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2226      	movs	r2, #38	@ 0x26
 80094d2:	701a      	strb	r2, [r3, #0]
          break;
 80094d4:	bf00      	nop
      }
      break;
 80094d6:	e06f      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 80094d8:	7cfb      	ldrb	r3, [r7, #19]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d005      	beq.n	80094ea <lsm6dsv16x_xl_data_rate_get+0x146>
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d007      	beq.n	80094f2 <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2207      	movs	r2, #7
 80094e6:	701a      	strb	r2, [r3, #0]
          break;
 80094e8:	e007      	b.n	80094fa <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2217      	movs	r2, #23
 80094ee:	701a      	strb	r2, [r3, #0]
          break;
 80094f0:	e003      	b.n	80094fa <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2227      	movs	r2, #39	@ 0x27
 80094f6:	701a      	strb	r2, [r3, #0]
          break;
 80094f8:	bf00      	nop
      }
      break;
 80094fa:	e05d      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 80094fc:	7cfb      	ldrb	r3, [r7, #19]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d005      	beq.n	800950e <lsm6dsv16x_xl_data_rate_get+0x16a>
 8009502:	2b02      	cmp	r3, #2
 8009504:	d007      	beq.n	8009516 <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2208      	movs	r2, #8
 800950a:	701a      	strb	r2, [r3, #0]
          break;
 800950c:	e007      	b.n	800951e <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2218      	movs	r2, #24
 8009512:	701a      	strb	r2, [r3, #0]
          break;
 8009514:	e003      	b.n	800951e <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2228      	movs	r2, #40	@ 0x28
 800951a:	701a      	strb	r2, [r3, #0]
          break;
 800951c:	bf00      	nop
      }
      break;
 800951e:	e04b      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009520:	7cfb      	ldrb	r3, [r7, #19]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d005      	beq.n	8009532 <lsm6dsv16x_xl_data_rate_get+0x18e>
 8009526:	2b02      	cmp	r3, #2
 8009528:	d007      	beq.n	800953a <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2209      	movs	r2, #9
 800952e:	701a      	strb	r2, [r3, #0]
          break;
 8009530:	e007      	b.n	8009542 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2219      	movs	r2, #25
 8009536:	701a      	strb	r2, [r3, #0]
          break;
 8009538:	e003      	b.n	8009542 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2229      	movs	r2, #41	@ 0x29
 800953e:	701a      	strb	r2, [r3, #0]
          break;
 8009540:	bf00      	nop
      }
      break;
 8009542:	e039      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8009544:	7cfb      	ldrb	r3, [r7, #19]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d005      	beq.n	8009556 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 800954a:	2b02      	cmp	r3, #2
 800954c:	d007      	beq.n	800955e <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	220a      	movs	r2, #10
 8009552:	701a      	strb	r2, [r3, #0]
          break;
 8009554:	e007      	b.n	8009566 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	221a      	movs	r2, #26
 800955a:	701a      	strb	r2, [r3, #0]
          break;
 800955c:	e003      	b.n	8009566 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	222a      	movs	r2, #42	@ 0x2a
 8009562:	701a      	strb	r2, [r3, #0]
          break;
 8009564:	bf00      	nop
      }
      break;
 8009566:	e027      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d005      	beq.n	800957a <lsm6dsv16x_xl_data_rate_get+0x1d6>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d007      	beq.n	8009582 <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	220b      	movs	r2, #11
 8009576:	701a      	strb	r2, [r3, #0]
          break;
 8009578:	e007      	b.n	800958a <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	221b      	movs	r2, #27
 800957e:	701a      	strb	r2, [r3, #0]
          break;
 8009580:	e003      	b.n	800958a <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	222b      	movs	r2, #43	@ 0x2b
 8009586:	701a      	strb	r2, [r3, #0]
          break;
 8009588:	bf00      	nop
      }
      break;
 800958a:	e015      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 800958c:	7cfb      	ldrb	r3, [r7, #19]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d005      	beq.n	800959e <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8009592:	2b02      	cmp	r3, #2
 8009594:	d007      	beq.n	80095a6 <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	220c      	movs	r2, #12
 800959a:	701a      	strb	r2, [r3, #0]
          break;
 800959c:	e007      	b.n	80095ae <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	221c      	movs	r2, #28
 80095a2:	701a      	strb	r2, [r3, #0]
          break;
 80095a4:	e003      	b.n	80095ae <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	222c      	movs	r2, #44	@ 0x2c
 80095aa:	701a      	strb	r2, [r3, #0]
          break;
 80095ac:	bf00      	nop
      }
      break;
 80095ae:	e003      	b.n	80095b8 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]
      break;
 80095b6:	bf00      	nop
  }

  return ret;
 80095b8:	697b      	ldr	r3, [r7, #20]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop

080095c4 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095d0:	f107 0210 	add.w	r2, r7, #16
 80095d4:	2301      	movs	r3, #1
 80095d6:	2111      	movs	r1, #17
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff fe13 	bl	8009204 <lsm6dsv16x_read_reg>
 80095de:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	7c3b      	ldrb	r3, [r7, #16]
 80095ea:	f362 0303 	bfi	r3, r2, #0, #4
 80095ee:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095f0:	f107 0210 	add.w	r2, r7, #16
 80095f4:	2301      	movs	r3, #1
 80095f6:	2111      	movs	r1, #17
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff fe21 	bl	8009240 <lsm6dsv16x_write_reg>
 80095fe:	4602      	mov	r2, r0
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	4413      	add	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	e024      	b.n	800965a <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	091b      	lsrs	r3, r3, #4
 8009614:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8009616:	7cfb      	ldrb	r3, [r7, #19]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01d      	beq.n	8009658 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800961c:	f107 020c 	add.w	r2, r7, #12
 8009620:	2301      	movs	r3, #1
 8009622:	2162      	movs	r1, #98	@ 0x62
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff fded 	bl	8009204 <lsm6dsv16x_read_reg>
 800962a:	4602      	mov	r2, r0
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	4413      	add	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8009632:	7cfb      	ldrb	r3, [r7, #19]
 8009634:	f003 0303 	and.w	r3, r3, #3
 8009638:	b2da      	uxtb	r2, r3
 800963a:	7b3b      	ldrb	r3, [r7, #12]
 800963c:	f362 0301 	bfi	r3, r2, #0, #2
 8009640:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009642:	f107 020c 	add.w	r2, r7, #12
 8009646:	2301      	movs	r3, #1
 8009648:	2162      	movs	r1, #98	@ 0x62
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fdf8 	bl	8009240 <lsm6dsv16x_write_reg>
 8009650:	4602      	mov	r2, r0
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	4413      	add	r3, r2
 8009656:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009658:	697b      	ldr	r3, [r7, #20]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800966e:	f107 0210 	add.w	r2, r7, #16
 8009672:	2301      	movs	r3, #1
 8009674:	2111      	movs	r1, #17
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fdc4 	bl	8009204 <lsm6dsv16x_read_reg>
 800967c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800967e:	f107 020c 	add.w	r2, r7, #12
 8009682:	2301      	movs	r3, #1
 8009684:	2162      	movs	r1, #98	@ 0x62
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fdbc 	bl	8009204 <lsm6dsv16x_read_reg>
 800968c:	4602      	mov	r2, r0
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	e0ed      	b.n	800987a <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 800969e:	7b3b      	ldrb	r3, [r7, #12]
 80096a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 80096a8:	7c3b      	ldrb	r3, [r7, #16]
 80096aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b0c      	cmp	r3, #12
 80096b2:	f200 80dd 	bhi.w	8009870 <lsm6dsv16x_gy_data_rate_get+0x20c>
 80096b6:	a201      	add	r2, pc, #4	@ (adr r2, 80096bc <lsm6dsv16x_gy_data_rate_get+0x58>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	080096f1 	.word	0x080096f1
 80096c0:	080096f9 	.word	0x080096f9
 80096c4:	08009701 	.word	0x08009701
 80096c8:	08009709 	.word	0x08009709
 80096cc:	0800972d 	.word	0x0800972d
 80096d0:	08009751 	.word	0x08009751
 80096d4:	08009775 	.word	0x08009775
 80096d8:	08009799 	.word	0x08009799
 80096dc:	080097bd 	.word	0x080097bd
 80096e0:	080097e1 	.word	0x080097e1
 80096e4:	08009805 	.word	0x08009805
 80096e8:	08009829 	.word	0x08009829
 80096ec:	0800984d 	.word	0x0800984d
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2200      	movs	r2, #0
 80096f4:	701a      	strb	r2, [r3, #0]
      break;
 80096f6:	e0bf      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2201      	movs	r2, #1
 80096fc:	701a      	strb	r2, [r3, #0]
      break;
 80096fe:	e0bb      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2202      	movs	r2, #2
 8009704:	701a      	strb	r2, [r3, #0]
      break;
 8009706:	e0b7      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009708:	7cfb      	ldrb	r3, [r7, #19]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d005      	beq.n	800971a <lsm6dsv16x_gy_data_rate_get+0xb6>
 800970e:	2b02      	cmp	r3, #2
 8009710:	d007      	beq.n	8009722 <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2203      	movs	r2, #3
 8009716:	701a      	strb	r2, [r3, #0]
          break;
 8009718:	e007      	b.n	800972a <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2213      	movs	r2, #19
 800971e:	701a      	strb	r2, [r3, #0]
          break;
 8009720:	e003      	b.n	800972a <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2223      	movs	r2, #35	@ 0x23
 8009726:	701a      	strb	r2, [r3, #0]
          break;
 8009728:	bf00      	nop
      }
      break;
 800972a:	e0a5      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 800972c:	7cfb      	ldrb	r3, [r7, #19]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d005      	beq.n	800973e <lsm6dsv16x_gy_data_rate_get+0xda>
 8009732:	2b02      	cmp	r3, #2
 8009734:	d007      	beq.n	8009746 <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2204      	movs	r2, #4
 800973a:	701a      	strb	r2, [r3, #0]
          break;
 800973c:	e007      	b.n	800974e <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2214      	movs	r2, #20
 8009742:	701a      	strb	r2, [r3, #0]
          break;
 8009744:	e003      	b.n	800974e <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2224      	movs	r2, #36	@ 0x24
 800974a:	701a      	strb	r2, [r3, #0]
          break;
 800974c:	bf00      	nop
      }
      break;
 800974e:	e093      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009750:	7cfb      	ldrb	r3, [r7, #19]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d005      	beq.n	8009762 <lsm6dsv16x_gy_data_rate_get+0xfe>
 8009756:	2b02      	cmp	r3, #2
 8009758:	d007      	beq.n	800976a <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2205      	movs	r2, #5
 800975e:	701a      	strb	r2, [r3, #0]
          break;
 8009760:	e007      	b.n	8009772 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2215      	movs	r2, #21
 8009766:	701a      	strb	r2, [r3, #0]
          break;
 8009768:	e003      	b.n	8009772 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2225      	movs	r2, #37	@ 0x25
 800976e:	701a      	strb	r2, [r3, #0]
          break;
 8009770:	bf00      	nop
      }
      break;
 8009772:	e081      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009774:	7cfb      	ldrb	r3, [r7, #19]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d005      	beq.n	8009786 <lsm6dsv16x_gy_data_rate_get+0x122>
 800977a:	2b02      	cmp	r3, #2
 800977c:	d007      	beq.n	800978e <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2206      	movs	r2, #6
 8009782:	701a      	strb	r2, [r3, #0]
          break;
 8009784:	e007      	b.n	8009796 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2216      	movs	r2, #22
 800978a:	701a      	strb	r2, [r3, #0]
          break;
 800978c:	e003      	b.n	8009796 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2226      	movs	r2, #38	@ 0x26
 8009792:	701a      	strb	r2, [r3, #0]
          break;
 8009794:	bf00      	nop
      }
      break;
 8009796:	e06f      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009798:	7cfb      	ldrb	r3, [r7, #19]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d005      	beq.n	80097aa <lsm6dsv16x_gy_data_rate_get+0x146>
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d007      	beq.n	80097b2 <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2207      	movs	r2, #7
 80097a6:	701a      	strb	r2, [r3, #0]
          break;
 80097a8:	e007      	b.n	80097ba <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2217      	movs	r2, #23
 80097ae:	701a      	strb	r2, [r3, #0]
          break;
 80097b0:	e003      	b.n	80097ba <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2227      	movs	r2, #39	@ 0x27
 80097b6:	701a      	strb	r2, [r3, #0]
          break;
 80097b8:	bf00      	nop
      }
      break;
 80097ba:	e05d      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 80097bc:	7cfb      	ldrb	r3, [r7, #19]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d005      	beq.n	80097ce <lsm6dsv16x_gy_data_rate_get+0x16a>
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d007      	beq.n	80097d6 <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2208      	movs	r2, #8
 80097ca:	701a      	strb	r2, [r3, #0]
          break;
 80097cc:	e007      	b.n	80097de <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2218      	movs	r2, #24
 80097d2:	701a      	strb	r2, [r3, #0]
          break;
 80097d4:	e003      	b.n	80097de <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2228      	movs	r2, #40	@ 0x28
 80097da:	701a      	strb	r2, [r3, #0]
          break;
 80097dc:	bf00      	nop
      }
      break;
 80097de:	e04b      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 80097e0:	7cfb      	ldrb	r3, [r7, #19]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d005      	beq.n	80097f2 <lsm6dsv16x_gy_data_rate_get+0x18e>
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d007      	beq.n	80097fa <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2209      	movs	r2, #9
 80097ee:	701a      	strb	r2, [r3, #0]
          break;
 80097f0:	e007      	b.n	8009802 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2219      	movs	r2, #25
 80097f6:	701a      	strb	r2, [r3, #0]
          break;
 80097f8:	e003      	b.n	8009802 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2229      	movs	r2, #41	@ 0x29
 80097fe:	701a      	strb	r2, [r3, #0]
          break;
 8009800:	bf00      	nop
      }
      break;
 8009802:	e039      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8009804:	7cfb      	ldrb	r3, [r7, #19]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d005      	beq.n	8009816 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d007      	beq.n	800981e <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	220a      	movs	r2, #10
 8009812:	701a      	strb	r2, [r3, #0]
          break;
 8009814:	e007      	b.n	8009826 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	221a      	movs	r2, #26
 800981a:	701a      	strb	r2, [r3, #0]
          break;
 800981c:	e003      	b.n	8009826 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	222a      	movs	r2, #42	@ 0x2a
 8009822:	701a      	strb	r2, [r3, #0]
          break;
 8009824:	bf00      	nop
      }
      break;
 8009826:	e027      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009828:	7cfb      	ldrb	r3, [r7, #19]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d005      	beq.n	800983a <lsm6dsv16x_gy_data_rate_get+0x1d6>
 800982e:	2b02      	cmp	r3, #2
 8009830:	d007      	beq.n	8009842 <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	220b      	movs	r2, #11
 8009836:	701a      	strb	r2, [r3, #0]
          break;
 8009838:	e007      	b.n	800984a <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	221b      	movs	r2, #27
 800983e:	701a      	strb	r2, [r3, #0]
          break;
 8009840:	e003      	b.n	800984a <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	222b      	movs	r2, #43	@ 0x2b
 8009846:	701a      	strb	r2, [r3, #0]
          break;
 8009848:	bf00      	nop
      }
      break;
 800984a:	e015      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 800984c:	7cfb      	ldrb	r3, [r7, #19]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d005      	beq.n	800985e <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8009852:	2b02      	cmp	r3, #2
 8009854:	d007      	beq.n	8009866 <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	220c      	movs	r2, #12
 800985a:	701a      	strb	r2, [r3, #0]
          break;
 800985c:	e007      	b.n	800986e <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	221c      	movs	r2, #28
 8009862:	701a      	strb	r2, [r3, #0]
          break;
 8009864:	e003      	b.n	800986e <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	222c      	movs	r2, #44	@ 0x2c
 800986a:	701a      	strb	r2, [r3, #0]
          break;
 800986c:	bf00      	nop
      }
      break;
 800986e:	e003      	b.n	8009878 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
      break;
 8009876:	bf00      	nop
  }

  return ret;
 8009878:	697b      	ldr	r3, [r7, #20]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop

08009884 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009890:	f107 0208 	add.w	r2, r7, #8
 8009894:	2301      	movs	r3, #1
 8009896:	2112      	movs	r1, #18
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff fcb3 	bl	8009204 <lsm6dsv16x_read_reg>
 800989e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10f      	bne.n	80098c6 <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	7a3b      	ldrb	r3, [r7, #8]
 80098b0:	f362 0382 	bfi	r3, r2, #2, #1
 80098b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80098b6:	f107 0208 	add.w	r2, r7, #8
 80098ba:	2301      	movs	r3, #1
 80098bc:	2112      	movs	r1, #18
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fcbe 	bl	8009240 <lsm6dsv16x_write_reg>
 80098c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80098c6:	68fb      	ldr	r3, [r7, #12]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80098dc:	f107 0208 	add.w	r2, r7, #8
 80098e0:	2301      	movs	r3, #1
 80098e2:	2112      	movs	r1, #18
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff fc8d 	bl	8009204 <lsm6dsv16x_read_reg>
 80098ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10f      	bne.n	8009912 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	7a3b      	ldrb	r3, [r7, #8]
 80098fc:	f362 1386 	bfi	r3, r2, #6, #1
 8009900:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009902:	f107 0208 	add.w	r2, r7, #8
 8009906:	2301      	movs	r3, #1
 8009908:	2112      	movs	r1, #18
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fc98 	bl	8009240 <lsm6dsv16x_write_reg>
 8009910:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009928:	f107 0208 	add.w	r2, r7, #8
 800992c:	2301      	movs	r3, #1
 800992e:	2115      	movs	r1, #21
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff fc67 	bl	8009204 <lsm6dsv16x_read_reg>
 8009936:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10f      	bne.n	800995e <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f003 030f 	and.w	r3, r3, #15
 8009944:	b2da      	uxtb	r2, r3
 8009946:	7a3b      	ldrb	r3, [r7, #8]
 8009948:	f362 0303 	bfi	r3, r2, #0, #4
 800994c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800994e:	f107 0208 	add.w	r2, r7, #8
 8009952:	2301      	movs	r3, #1
 8009954:	2115      	movs	r1, #21
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fc72 	bl	8009240 <lsm6dsv16x_write_reg>
 800995c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009972:	f107 0208 	add.w	r2, r7, #8
 8009976:	2301      	movs	r3, #1
 8009978:	2115      	movs	r1, #21
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fc42 	bl	8009204 <lsm6dsv16x_read_reg>
 8009980:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	e040      	b.n	8009a0e <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 800998c:	7a3b      	ldrb	r3, [r7, #8]
 800998e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b0c      	cmp	r3, #12
 8009996:	d835      	bhi.n	8009a04 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009998:	a201      	add	r2, pc, #4	@ (adr r2, 80099a0 <lsm6dsv16x_gy_full_scale_get+0x38>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	080099d5 	.word	0x080099d5
 80099a4:	080099dd 	.word	0x080099dd
 80099a8:	080099e5 	.word	0x080099e5
 80099ac:	080099ed 	.word	0x080099ed
 80099b0:	080099f5 	.word	0x080099f5
 80099b4:	08009a05 	.word	0x08009a05
 80099b8:	08009a05 	.word	0x08009a05
 80099bc:	08009a05 	.word	0x08009a05
 80099c0:	08009a05 	.word	0x08009a05
 80099c4:	08009a05 	.word	0x08009a05
 80099c8:	08009a05 	.word	0x08009a05
 80099cc:	08009a05 	.word	0x08009a05
 80099d0:	080099fd 	.word	0x080099fd
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	701a      	strb	r2, [r3, #0]
      break;
 80099da:	e017      	b.n	8009a0c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2201      	movs	r2, #1
 80099e0:	701a      	strb	r2, [r3, #0]
      break;
 80099e2:	e013      	b.n	8009a0c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2202      	movs	r2, #2
 80099e8:	701a      	strb	r2, [r3, #0]
      break;
 80099ea:	e00f      	b.n	8009a0c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2203      	movs	r2, #3
 80099f0:	701a      	strb	r2, [r3, #0]
      break;
 80099f2:	e00b      	b.n	8009a0c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2204      	movs	r2, #4
 80099f8:	701a      	strb	r2, [r3, #0]
      break;
 80099fa:	e007      	b.n	8009a0c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	220c      	movs	r2, #12
 8009a00:	701a      	strb	r2, [r3, #0]
      break;
 8009a02:	e003      	b.n	8009a0c <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	bf00      	nop
  }

  return ret;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop

08009a18 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a24:	f107 0208 	add.w	r2, r7, #8
 8009a28:	2301      	movs	r3, #1
 8009a2a:	2117      	movs	r1, #23
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff fbe9 	bl	8009204 <lsm6dsv16x_read_reg>
 8009a32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10f      	bne.n	8009a5a <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	f003 0303 	and.w	r3, r3, #3
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	7a3b      	ldrb	r3, [r7, #8]
 8009a44:	f362 0301 	bfi	r3, r2, #0, #2
 8009a48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a4a:	f107 0208 	add.w	r2, r7, #8
 8009a4e:	2301      	movs	r3, #1
 8009a50:	2117      	movs	r1, #23
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff fbf4 	bl	8009240 <lsm6dsv16x_write_reg>
 8009a58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a6e:	f107 0208 	add.w	r2, r7, #8
 8009a72:	2301      	movs	r3, #1
 8009a74:	2117      	movs	r1, #23
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff fbc4 	bl	8009204 <lsm6dsv16x_read_reg>
 8009a7c:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	e026      	b.n	8009ad6 <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8009a88:	7a3b      	ldrb	r3, [r7, #8]
 8009a8a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d81b      	bhi.n	8009acc <lsm6dsv16x_xl_full_scale_get+0x68>
 8009a94:	a201      	add	r2, pc, #4	@ (adr r2, 8009a9c <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009aad 	.word	0x08009aad
 8009aa0:	08009ab5 	.word	0x08009ab5
 8009aa4:	08009abd 	.word	0x08009abd
 8009aa8:	08009ac5 	.word	0x08009ac5
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
      break;
 8009ab2:	e00f      	b.n	8009ad4 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	701a      	strb	r2, [r3, #0]
      break;
 8009aba:	e00b      	b.n	8009ad4 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	701a      	strb	r2, [r3, #0]
      break;
 8009ac2:	e007      	b.n	8009ad4 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2203      	movs	r2, #3
 8009ac8:	701a      	strb	r2, [r3, #0]
      break;
 8009aca:	e003      	b.n	8009ad4 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
      break;
 8009ad2:	bf00      	nop
  }

  return ret;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop

08009ae0 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009aea:	f107 020c 	add.w	r2, r7, #12
 8009aee:	2306      	movs	r3, #6
 8009af0:	2122      	movs	r1, #34	@ 0x22
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff fb86 	bl	8009204 <lsm6dsv16x_read_reg>
 8009af8:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	e036      	b.n	8009b72 <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009b04:	7b7b      	ldrb	r3, [r7, #13]
 8009b06:	b21a      	sxth	r2, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	7b3a      	ldrb	r2, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	b21a      	sxth	r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009b24:	7bfa      	ldrb	r2, [r7, #15]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	3302      	adds	r3, #2
 8009b2a:	b212      	sxth	r2, r2
 8009b2c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	3302      	adds	r3, #2
 8009b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	7bba      	ldrb	r2, [r7, #14]
 8009b3e:	4413      	add	r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	3302      	adds	r3, #2
 8009b46:	b212      	sxth	r2, r2
 8009b48:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009b4a:	7c7a      	ldrb	r2, [r7, #17]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	b212      	sxth	r2, r2
 8009b52:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	3304      	adds	r3, #4
 8009b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	7c3a      	ldrb	r2, [r7, #16]
 8009b64:	4413      	add	r3, r2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	b212      	sxth	r2, r2
 8009b6e:	801a      	strh	r2, [r3, #0]

  return ret;
 8009b70:	697b      	ldr	r3, [r7, #20]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b086      	sub	sp, #24
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8009b84:	f107 020c 	add.w	r2, r7, #12
 8009b88:	2306      	movs	r3, #6
 8009b8a:	2128      	movs	r1, #40	@ 0x28
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fb39 	bl	8009204 <lsm6dsv16x_read_reg>
 8009b92:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	e036      	b.n	8009c0c <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009b9e:	7b7b      	ldrb	r3, [r7, #13]
 8009ba0:	b21a      	sxth	r2, r3
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	7b3a      	ldrb	r2, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	b21a      	sxth	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009bbe:	7bfa      	ldrb	r2, [r7, #15]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	b212      	sxth	r2, r2
 8009bc6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	3302      	adds	r3, #2
 8009bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	7bba      	ldrb	r2, [r7, #14]
 8009bd8:	4413      	add	r3, r2
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3302      	adds	r3, #2
 8009be0:	b212      	sxth	r2, r2
 8009be2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009be4:	7c7a      	ldrb	r2, [r7, #17]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	3304      	adds	r3, #4
 8009bea:	b212      	sxth	r2, r2
 8009bec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	7c3a      	ldrb	r2, [r7, #16]
 8009bfe:	4413      	add	r3, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	3304      	adds	r3, #4
 8009c06:	b212      	sxth	r2, r2
 8009c08:	801a      	strh	r2, [r3, #0]

  return ret;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009c20:	f107 0208 	add.w	r2, r7, #8
 8009c24:	2301      	movs	r3, #1
 8009c26:	210a      	movs	r1, #10
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff faeb 	bl	8009204 <lsm6dsv16x_read_reg>
 8009c2e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10f      	bne.n	8009c56 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	7a3b      	ldrb	r3, [r7, #8]
 8009c40:	f362 0302 	bfi	r3, r2, #0, #3
 8009c44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009c46:	f107 0208 	add.w	r2, r7, #8
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	210a      	movs	r1, #10
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff faf6 	bl	8009240 <lsm6dsv16x_write_reg>
 8009c54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c56:	68fb      	ldr	r3, [r7, #12]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009c6a:	f107 0208 	add.w	r2, r7, #8
 8009c6e:	2301      	movs	r3, #1
 8009c70:	2116      	movs	r1, #22
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fac6 	bl	8009204 <lsm6dsv16x_read_reg>
 8009c78:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10f      	bne.n	8009ca0 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8009c80:	783b      	ldrb	r3, [r7, #0]
 8009c82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	7a3b      	ldrb	r3, [r7, #8]
 8009c8a:	f362 13c7 	bfi	r3, r2, #7, #1
 8009c8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009c90:	f107 0208 	add.w	r2, r7, #8
 8009c94:	2301      	movs	r3, #1
 8009c96:	2116      	movs	r1, #22
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff fad1 	bl	8009240 <lsm6dsv16x_write_reg>
 8009c9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
	...

08009cac <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e034      	b.n	8009d2e <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	7b1a      	ldrb	r2, [r3, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	695a      	ldr	r2, [r3, #20]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8009d38 <SHT40AD1B_RegisterBusIO+0x8c>)
 8009d00:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a0d      	ldr	r2, [pc, #52]	@ (8009d3c <SHT40AD1B_RegisterBusIO+0x90>)
 8009d06:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	e002      	b.n	8009d2e <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	08009fbd 	.word	0x08009fbd
 8009d3c:	08009ffd 	.word	0x08009ffd

08009d40 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f04f 0200 	mov.w	r2, #0
 8009d4e:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3320      	adds	r3, #32
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fa23 	bl	800a1e8 <sht40ad1b_device_id_get>
 8009da2:	4603      	mov	r3, r0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2201      	movs	r2, #1
 8009dba:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	f04f 0200 	mov.w	r2, #0
 8009dea:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	f04f 0200 	mov.w	r2, #0
 8009df2:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d101      	bne.n	8009e18 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	e004      	b.n	8009e22 <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	e004      	b.n	8009e4e <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f86f 	bl	8009f82 <GetData>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009eae:	e004      	b.n	8009eba <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e004      	b.n	8009ee2 <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	e004      	b.n	8009f0e <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f80f 	bl	8009f82 <GetData>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	e004      	b.n	8009f7a <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3320      	adds	r3, #32
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 f881 	bl	800a09c <sht40ad1b_data_get>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 8009fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa4:	e006      	b.n	8009fb4 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	460b      	mov	r3, r1
 8009fca:	72fb      	strb	r3, [r7, #11]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d109      	bne.n	8009ff0 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	7b12      	ldrb	r2, [r2, #12]
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	893a      	ldrh	r2, [r7, #8]
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4798      	blx	r3
 8009fec:	4603      	mov	r3, r0
 8009fee:	e001      	b.n	8009ff4 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 8009ff0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	607a      	str	r2, [r7, #4]
 800a006:	461a      	mov	r2, r3
 800a008:	460b      	mov	r3, r1
 800a00a:	72fb      	strb	r3, [r7, #11]
 800a00c:	4613      	mov	r3, r2
 800a00e:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	7b12      	ldrb	r2, [r2, #12]
 800a024:	4610      	mov	r0, r2
 800a026:	893a      	ldrh	r2, [r7, #8]
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4798      	blx	r3
 800a02c:	4603      	mov	r3, r0
 800a02e:	e001      	b.n	800a034 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	72fb      	strb	r3, [r7, #11]
 800a04c:	4613      	mov	r3, r2
 800a04e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	685c      	ldr	r4, [r3, #4]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	68d8      	ldr	r0, [r3, #12]
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	7af9      	ldrb	r1, [r7, #11]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	47a0      	blx	r4
 800a060:	6178      	str	r0, [r7, #20]

  return ret;
 800a062:	697b      	ldr	r3, [r7, #20]
}
 800a064:	4618      	mov	r0, r3
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd90      	pop	{r4, r7, pc}

0800a06c <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	461a      	mov	r2, r3
 800a078:	460b      	mov	r3, r1
 800a07a:	72fb      	strb	r3, [r7, #11]
 800a07c:	4613      	mov	r3, r2
 800a07e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681c      	ldr	r4, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	68d8      	ldr	r0, [r3, #12]
 800a088:	893b      	ldrh	r3, [r7, #8]
 800a08a:	7af9      	ldrb	r1, [r7, #11]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	47a0      	blx	r4
 800a090:	6178      	str	r0, [r7, #20]

  return ret;
 800a092:	697b      	ldr	r3, [r7, #20]
}
 800a094:	4618      	mov	r0, r3
 800a096:	371c      	adds	r7, #28
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd90      	pop	{r4, r7, pc}

0800a09c <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800a0a6:	23fd      	movs	r3, #253	@ 0xfd
 800a0a8:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800a0b4:	f107 020f 	add.w	r2, r7, #15
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff ffd5 	bl	800a06c <sht40ad1b_write_reg>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <sht40ad1b_data_get+0x30>
  {
    return 1;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e07d      	b.n	800a1c8 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	200a      	movs	r0, #10
 800a0d2:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800a0d4:	f107 0208 	add.w	r2, r7, #8
 800a0d8:	2306      	movs	r3, #6
 800a0da:	2100      	movs	r1, #0
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff ffad 	bl	800a03c <sht40ad1b_read_reg>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <sht40ad1b_data_get+0x50>
  {
    return 1;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e06d      	b.n	800a1c8 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800a0ec:	7a3b      	ldrb	r3, [r7, #8]
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	7a7a      	ldrb	r2, [r7, #9]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800a0f8:	7abb      	ldrb	r3, [r7, #10]
 800a0fa:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	b29b      	uxth	r3, r3
 800a102:	7b3a      	ldrb	r2, [r7, #12]
 800a104:	4413      	add	r3, r2
 800a106:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800a108:	7b7b      	ldrb	r3, [r7, #13]
 800a10a:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800a10c:	7f7a      	ldrb	r2, [r7, #29]
 800a10e:	f107 0308 	add.w	r3, r7, #8
 800a112:	2102      	movs	r1, #2
 800a114:	4618      	mov	r0, r3
 800a116:	f000 f8b3 	bl	800a280 <crc_check>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <sht40ad1b_data_get+0x88>
  {
    return 1;
 800a120:	2301      	movs	r3, #1
 800a122:	e051      	b.n	800a1c8 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800a124:	7e7a      	ldrb	r2, [r7, #25]
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	3303      	adds	r3, #3
 800a12c:	2102      	movs	r1, #2
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f8a6 	bl	800a280 <crc_check>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <sht40ad1b_data_get+0xa2>
  {
    return 1;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e044      	b.n	800a1c8 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	ee07 3a90 	vmov	s15, r3
 800a144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a148:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a1d0 <sht40ad1b_data_get+0x134>
 800a14c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a150:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a1d4 <sht40ad1b_data_get+0x138>
 800a154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a158:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a1d8 <sht40ad1b_data_get+0x13c>
 800a15c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a160:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800a164:	8b7b      	ldrh	r3, [r7, #26]
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a1dc <sht40ad1b_data_get+0x140>
 800a172:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a176:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a1d4 <sht40ad1b_data_get+0x138>
 800a17a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a17e:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a186:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800a18a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a18e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a1e0 <sht40ad1b_data_get+0x144>
 800a192:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19a:	dd01      	ble.n	800a1a0 <sht40ad1b_data_get+0x104>
 800a19c:	4b11      	ldr	r3, [pc, #68]	@ (800a1e4 <sht40ad1b_data_get+0x148>)
 800a19e:	e00a      	b.n	800a1b6 <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 800a1a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ac:	d502      	bpl.n	800a1b4 <sht40ad1b_data_get+0x118>
 800a1ae:	f04f 0300 	mov.w	r3, #0
 800a1b2:	e000      	b.n	800a1b6 <sht40ad1b_data_get+0x11a>
 800a1b4:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800a1b6:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	601a      	str	r2, [r3, #0]
  return 0;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3720      	adds	r7, #32
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	432f0000 	.word	0x432f0000
 800a1d4:	477fff00 	.word	0x477fff00
 800a1d8:	42340000 	.word	0x42340000
 800a1dc:	42fa0000 	.word	0x42fa0000
 800a1e0:	42c80000 	.word	0x42c80000
 800a1e4:	42c80000 	.word	0x42c80000

0800a1e8 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
  return 0;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800a212:	2331      	movs	r3, #49	@ 0x31
 800a214:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800a216:	23ff      	movs	r3, #255	@ 0xff
 800a218:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800a21a:	2300      	movs	r3, #0
 800a21c:	81bb      	strh	r3, [r7, #12]
 800a21e:	e024      	b.n	800a26a <crc_calculate+0x64>
  {
    crc ^= data[index];
 800a220:	89bb      	ldrh	r3, [r7, #12]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4053      	eors	r3, r2
 800a22c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a22e:	2308      	movs	r3, #8
 800a230:	72fb      	strb	r3, [r7, #11]
 800a232:	e014      	b.n	800a25e <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800a234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da09      	bge.n	800a250 <crc_calculate+0x4a>
 800a23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	b25a      	sxtb	r2, r3
 800a244:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a248:	4053      	eors	r3, r2
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	e002      	b.n	800a256 <crc_calculate+0x50>
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	b2db      	uxtb	r3, r3
 800a256:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	72fb      	strb	r3, [r7, #11]
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e7      	bne.n	800a234 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800a264:	89bb      	ldrh	r3, [r7, #12]
 800a266:	3301      	adds	r3, #1
 800a268:	81bb      	strh	r3, [r7, #12]
 800a26a:	89ba      	ldrh	r2, [r7, #12]
 800a26c:	887b      	ldrh	r3, [r7, #2]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3d6      	bcc.n	800a220 <crc_calculate+0x1a>
    }
  }

  return crc;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	807b      	strh	r3, [r7, #2]
 800a28c:	4613      	mov	r3, r2
 800a28e:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800a290:	887b      	ldrh	r3, [r7, #2]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ffb6 	bl	800a206 <crc_calculate>
 800a29a:	4603      	mov	r3, r0
 800a29c:	461a      	mov	r2, r3
 800a29e:	787b      	ldrb	r3, [r7, #1]
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	bf14      	ite	ne
 800a2a4:	2301      	movne	r3, #1
 800a2a6:	2300      	moveq	r3, #0
 800a2a8:	b2db      	uxtb	r3, r3
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800a2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	e034      	b.n	800a336 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	7b1a      	ldrb	r2, [r3, #12]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	695a      	ldr	r2, [r3, #20]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	699a      	ldr	r2, [r3, #24]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a0e      	ldr	r2, [pc, #56]	@ (800a340 <STTS22H_RegisterBusIO+0x8c>)
 800a308:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a0d      	ldr	r2, [pc, #52]	@ (800a344 <STTS22H_RegisterBusIO+0x90>)
 800a30e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4798      	blx	r3
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	e002      	b.n	800a336 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a336:	68fb      	ldr	r3, [r7, #12]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	0800a751 	.word	0x0800a751
 800a344:	0800a7bf 	.word	0x0800a7bf

0800a348 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a356:	2b00      	cmp	r3, #0
 800a358:	d127      	bne.n	800a3aa <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a360:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3320      	adds	r3, #32
 800a366:	2101      	movs	r1, #1
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 fbad 	bl	800aac8 <stts22h_block_data_update_set>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	e01c      	b.n	800a3b4 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3320      	adds	r3, #32
 800a37e:	2101      	movs	r1, #1
 800a380:	4618      	mov	r0, r3
 800a382:	f000 fbfa 	bl	800ab7a <stts22h_auto_increment_set>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800a38c:	f04f 33ff 	mov.w	r3, #4294967295
 800a390:	e010      	b.n	800a3b4 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3320      	adds	r3, #32
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fa9d 	bl	800a8d8 <stts22h_temp_data_rate_set>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a8:	e004      	b.n	800a3b4 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d108      	bne.n	800a3e0 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f878 	bl	800a4c4 <STTS22H_TEMP_Disable>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a3da:	f04f 33ff 	mov.w	r3, #4294967295
 800a3de:	e004      	b.n	800a3ea <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3320      	adds	r3, #32
 800a400:	f107 020f 	add.w	r2, r7, #15
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fba6 	bl	800ab58 <stts22h_dev_id_get>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a412:	f04f 33ff 	mov.w	r3, #4294967295
 800a416:	e003      	b.n	800a420 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a418:	7bfa      	ldrb	r2, [r7, #15]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2200      	movs	r2, #0
 800a436:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2200      	movs	r2, #0
 800a43c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2201      	movs	r2, #1
 800a442:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2200      	movs	r2, #0
 800a448:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2200      	movs	r2, #0
 800a44e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	4a08      	ldr	r2, [pc, #32]	@ (800a47c <STTS22H_GetCapabilities+0x54>)
 800a45c:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f04f 0200 	mov.w	r2, #0
 800a464:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	f04f 0200 	mov.w	r2, #0
 800a46c:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	43480000 	.word	0x43480000

0800a480 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d101      	bne.n	800a496 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e012      	b.n	800a4bc <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a49c:	eeb0 0a67 	vmov.f32	s0, s15
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f8e9 	bl	800a678 <STTS22H_TEMP_SetOutputDataRate>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b0:	e004      	b.n	800a4bc <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e01c      	b.n	800a514 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3334      	adds	r3, #52	@ 0x34
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f81b 	bl	800a51c <STTS22H_TEMP_GetOutputDataRate>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f0:	e010      	b.n	800a514 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3320      	adds	r3, #32
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 f9ed 	bl	800a8d8 <stts22h_temp_data_rate_set>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a504:	f04f 33ff 	mov.w	r3, #4294967295
 800a508:	e004      	b.n	800a514 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3320      	adds	r3, #32
 800a52e:	f107 020b 	add.w	r2, r7, #11
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fa11 	bl	800a95c <stts22h_temp_data_rate_get>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	e08b      	b.n	800a65e <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	2b32      	cmp	r3, #50	@ 0x32
 800a54a:	f200 8083 	bhi.w	800a654 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a54e:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a621 	.word	0x0800a621
 800a558:	0800a621 	.word	0x0800a621
 800a55c:	0800a635 	.word	0x0800a635
 800a560:	0800a655 	.word	0x0800a655
 800a564:	0800a62b 	.word	0x0800a62b
 800a568:	0800a655 	.word	0x0800a655
 800a56c:	0800a655 	.word	0x0800a655
 800a570:	0800a655 	.word	0x0800a655
 800a574:	0800a655 	.word	0x0800a655
 800a578:	0800a655 	.word	0x0800a655
 800a57c:	0800a655 	.word	0x0800a655
 800a580:	0800a655 	.word	0x0800a655
 800a584:	0800a655 	.word	0x0800a655
 800a588:	0800a655 	.word	0x0800a655
 800a58c:	0800a655 	.word	0x0800a655
 800a590:	0800a655 	.word	0x0800a655
 800a594:	0800a655 	.word	0x0800a655
 800a598:	0800a655 	.word	0x0800a655
 800a59c:	0800a63d 	.word	0x0800a63d
 800a5a0:	0800a655 	.word	0x0800a655
 800a5a4:	0800a655 	.word	0x0800a655
 800a5a8:	0800a655 	.word	0x0800a655
 800a5ac:	0800a655 	.word	0x0800a655
 800a5b0:	0800a655 	.word	0x0800a655
 800a5b4:	0800a655 	.word	0x0800a655
 800a5b8:	0800a655 	.word	0x0800a655
 800a5bc:	0800a655 	.word	0x0800a655
 800a5c0:	0800a655 	.word	0x0800a655
 800a5c4:	0800a655 	.word	0x0800a655
 800a5c8:	0800a655 	.word	0x0800a655
 800a5cc:	0800a655 	.word	0x0800a655
 800a5d0:	0800a655 	.word	0x0800a655
 800a5d4:	0800a655 	.word	0x0800a655
 800a5d8:	0800a655 	.word	0x0800a655
 800a5dc:	0800a645 	.word	0x0800a645
 800a5e0:	0800a655 	.word	0x0800a655
 800a5e4:	0800a655 	.word	0x0800a655
 800a5e8:	0800a655 	.word	0x0800a655
 800a5ec:	0800a655 	.word	0x0800a655
 800a5f0:	0800a655 	.word	0x0800a655
 800a5f4:	0800a655 	.word	0x0800a655
 800a5f8:	0800a655 	.word	0x0800a655
 800a5fc:	0800a655 	.word	0x0800a655
 800a600:	0800a655 	.word	0x0800a655
 800a604:	0800a655 	.word	0x0800a655
 800a608:	0800a655 	.word	0x0800a655
 800a60c:	0800a655 	.word	0x0800a655
 800a610:	0800a655 	.word	0x0800a655
 800a614:	0800a655 	.word	0x0800a655
 800a618:	0800a655 	.word	0x0800a655
 800a61c:	0800a64d 	.word	0x0800a64d
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	f04f 0200 	mov.w	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
      break;
 800a628:	e018      	b.n	800a65c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a630:	601a      	str	r2, [r3, #0]
      break;
 800a632:	e013      	b.n	800a65c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	4a0c      	ldr	r2, [pc, #48]	@ (800a668 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800a638:	601a      	str	r2, [r3, #0]
      break;
 800a63a:	e00f      	b.n	800a65c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	4a0b      	ldr	r2, [pc, #44]	@ (800a66c <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800a640:	601a      	str	r2, [r3, #0]
      break;
 800a642:	e00b      	b.n	800a65c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	4a0a      	ldr	r2, [pc, #40]	@ (800a670 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800a648:	601a      	str	r2, [r3, #0]
      break;
 800a64a:	e007      	b.n	800a65c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	4a09      	ldr	r2, [pc, #36]	@ (800a674 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800a650:	601a      	str	r2, [r3, #0]
      break;
 800a652:	e003      	b.n	800a65c <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	60fb      	str	r3, [r7, #12]
      break;
 800a65a:	bf00      	nop
  }

  return ret;
 800a65c:	68fb      	ldr	r3, [r7, #12]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	41c80000 	.word	0x41c80000
 800a66c:	42480000 	.word	0x42480000
 800a670:	42c80000 	.word	0x42c80000
 800a674:	43480000 	.word	0x43480000

0800a678 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800a684:	edd7 7a00 	vldr	s15, [r7]
 800a688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a68c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a694:	d801      	bhi.n	800a69a <STTS22H_TEMP_SetOutputDataRate+0x22>
 800a696:	2304      	movs	r3, #4
 800a698:	e021      	b.n	800a6de <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a69a:	edd7 7a00 	vldr	s15, [r7]
 800a69e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800a6a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6aa:	d801      	bhi.n	800a6b0 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e016      	b.n	800a6de <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6b0:	edd7 7a00 	vldr	s15, [r7]
 800a6b4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a704 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800a6b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c0:	d801      	bhi.n	800a6c6 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800a6c2:	2312      	movs	r3, #18
 800a6c4:	e00b      	b.n	800a6de <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6c6:	edd7 7a00 	vldr	s15, [r7]
 800a6ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a708 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800a6ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d6:	d801      	bhi.n	800a6dc <STTS22H_TEMP_SetOutputDataRate+0x64>
 800a6d8:	2322      	movs	r3, #34	@ 0x22
 800a6da:	e000      	b.n	800a6de <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6dc:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800a6de:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3320      	adds	r3, #32
 800a6e4:	7bfa      	ldrb	r2, [r7, #15]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 f8f5 	bl	800a8d8 <stts22h_temp_data_rate_set>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f8:	e000      	b.n	800a6fc <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	42480000 	.word	0x42480000
 800a708:	42c80000 	.word	0x42c80000

0800a70c <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3320      	adds	r3, #32
 800a71a:	f107 020e 	add.w	r2, r7, #14
 800a71e:	4611      	mov	r1, r2
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f9f7 	bl	800ab14 <stts22h_temperature_raw_get>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295
 800a730:	e00a      	b.n	800a748 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800a732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f8b4 	bl	800a8a4 <stts22h_from_lsb_to_celsius>
 800a73c:	eef0 7a40 	vmov.f32	s15, s0
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a750:	b590      	push	{r4, r7, lr}
 800a752:	b089      	sub	sp, #36	@ 0x24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	461a      	mov	r2, r3
 800a75c:	460b      	mov	r3, r1
 800a75e:	72fb      	strb	r3, [r7, #11]
 800a760:	4613      	mov	r3, r2
 800a762:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11f      	bne.n	800a7b4 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a774:	2300      	movs	r3, #0
 800a776:	83fb      	strh	r3, [r7, #30]
 800a778:	e018      	b.n	800a7ac <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	695c      	ldr	r4, [r3, #20]
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	7b1b      	ldrb	r3, [r3, #12]
 800a782:	4618      	mov	r0, r3
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	b29a      	uxth	r2, r3
 800a788:	8bfb      	ldrh	r3, [r7, #30]
 800a78a:	4413      	add	r3, r2
 800a78c:	b299      	uxth	r1, r3
 800a78e:	8bfb      	ldrh	r3, [r7, #30]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	441a      	add	r2, r3
 800a794:	2301      	movs	r3, #1
 800a796:	47a0      	blx	r4
 800a798:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	e007      	b.n	800a7b6 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a7a6:	8bfb      	ldrh	r3, [r7, #30]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	83fb      	strh	r3, [r7, #30]
 800a7ac:	8bfa      	ldrh	r2, [r7, #30]
 800a7ae:	893b      	ldrh	r3, [r7, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d3e2      	bcc.n	800a77a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3724      	adds	r7, #36	@ 0x24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd90      	pop	{r4, r7, pc}

0800a7be <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a7be:	b590      	push	{r4, r7, lr}
 800a7c0:	b089      	sub	sp, #36	@ 0x24
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	72fb      	strb	r3, [r7, #11]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d11f      	bne.n	800a822 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	83fb      	strh	r3, [r7, #30]
 800a7e6:	e018      	b.n	800a81a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	691c      	ldr	r4, [r3, #16]
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	7b1b      	ldrb	r3, [r3, #12]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	7afb      	ldrb	r3, [r7, #11]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	8bfb      	ldrh	r3, [r7, #30]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	b299      	uxth	r1, r3
 800a7fc:	8bfb      	ldrh	r3, [r7, #30]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	441a      	add	r2, r3
 800a802:	2301      	movs	r3, #1
 800a804:	47a0      	blx	r4
 800a806:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a80e:	f04f 33ff 	mov.w	r3, #4294967295
 800a812:	e007      	b.n	800a824 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a814:	8bfb      	ldrh	r3, [r7, #30]
 800a816:	3301      	adds	r3, #1
 800a818:	83fb      	strh	r3, [r7, #30]
 800a81a:	8bfa      	ldrh	r2, [r7, #30]
 800a81c:	893b      	ldrh	r3, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d3e2      	bcc.n	800a7e8 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a822:	69bb      	ldr	r3, [r7, #24]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3724      	adds	r7, #36	@ 0x24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd90      	pop	{r4, r7, pc}

0800a82c <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	461a      	mov	r2, r3
 800a838:	460b      	mov	r3, r1
 800a83a:	72fb      	strb	r3, [r7, #11]
 800a83c:	4613      	mov	r3, r2
 800a83e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <stts22h_read_reg+0x20>
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
 800a84a:	e009      	b.n	800a860 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685c      	ldr	r4, [r3, #4]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	68d8      	ldr	r0, [r3, #12]
 800a854:	893b      	ldrh	r3, [r7, #8]
 800a856:	7af9      	ldrb	r1, [r7, #11]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	47a0      	blx	r4
 800a85c:	6178      	str	r0, [r7, #20]

  return ret;
 800a85e:	697b      	ldr	r3, [r7, #20]
}
 800a860:	4618      	mov	r0, r3
 800a862:	371c      	adds	r7, #28
 800a864:	46bd      	mov	sp, r7
 800a866:	bd90      	pop	{r4, r7, pc}

0800a868 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800a868:	b590      	push	{r4, r7, lr}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	607a      	str	r2, [r7, #4]
 800a872:	461a      	mov	r2, r3
 800a874:	460b      	mov	r3, r1
 800a876:	72fb      	strb	r3, [r7, #11]
 800a878:	4613      	mov	r3, r2
 800a87a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d102      	bne.n	800a888 <stts22h_write_reg+0x20>
 800a882:	f04f 33ff 	mov.w	r3, #4294967295
 800a886:	e009      	b.n	800a89c <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681c      	ldr	r4, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	68d8      	ldr	r0, [r3, #12]
 800a890:	893b      	ldrh	r3, [r7, #8]
 800a892:	7af9      	ldrb	r1, [r7, #11]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	47a0      	blx	r4
 800a898:	6178      	str	r0, [r7, #20]

  return ret;
 800a89a:	697b      	ldr	r3, [r7, #20]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd90      	pop	{r4, r7, pc}

0800a8a4 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800a8ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ba:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a8d4 <stts22h_from_lsb_to_celsius+0x30>
 800a8be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8c2:	eef0 7a66 	vmov.f32	s15, s13
}
 800a8c6:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	42c80000 	.word	0x42c80000

0800a8d8 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a8e4:	f107 0208 	add.w	r2, r7, #8
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	2104      	movs	r1, #4
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff9d 	bl	800a82c <stts22h_read_reg>
 800a8f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d12a      	bne.n	800a950 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	b2da      	uxtb	r2, r3
 800a902:	7a3b      	ldrb	r3, [r7, #8]
 800a904:	f362 0300 	bfi	r3, r2, #0, #1
 800a908:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	b2da      	uxtb	r2, r3
 800a914:	7a3b      	ldrb	r3, [r7, #8]
 800a916:	f362 0382 	bfi	r3, r2, #2, #1
 800a91a:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800a91c:	78fb      	ldrb	r3, [r7, #3]
 800a91e:	089b      	lsrs	r3, r3, #2
 800a920:	f003 0301 	and.w	r3, r3, #1
 800a924:	b2da      	uxtb	r2, r3
 800a926:	7a3b      	ldrb	r3, [r7, #8]
 800a928:	f362 13c7 	bfi	r3, r2, #7, #1
 800a92c:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800a92e:	78fb      	ldrb	r3, [r7, #3]
 800a930:	091b      	lsrs	r3, r3, #4
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	b2da      	uxtb	r2, r3
 800a938:	7a3b      	ldrb	r3, [r7, #8]
 800a93a:	f362 1305 	bfi	r3, r2, #4, #2
 800a93e:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a940:	f107 0208 	add.w	r2, r7, #8
 800a944:	2301      	movs	r3, #1
 800a946:	2104      	movs	r1, #4
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff ff8d 	bl	800a868 <stts22h_write_reg>
 800a94e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a950:	68fb      	ldr	r3, [r7, #12]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800a966:	f107 0208 	add.w	r2, r7, #8
 800a96a:	2301      	movs	r3, #1
 800a96c:	2104      	movs	r1, #4
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff5c 	bl	800a82c <stts22h_read_reg>
 800a974:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a976:	7a3b      	ldrb	r3, [r7, #8]
 800a978:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	461a      	mov	r2, r3
 800a980:	7a3b      	ldrb	r3, [r7, #8]
 800a982:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a986:	b2db      	uxtb	r3, r3
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	431a      	orrs	r2, r3
 800a98c:	7a3b      	ldrb	r3, [r7, #8]
 800a98e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800a998:	7a3b      	ldrb	r3, [r7, #8]
 800a99a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	011b      	lsls	r3, r3, #4
                                                 2) |
 800a9a2:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a9a4:	2b32      	cmp	r3, #50	@ 0x32
 800a9a6:	f200 8085 	bhi.w	800aab4 <stts22h_temp_data_rate_get+0x158>
 800a9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b0 <stts22h_temp_data_rate_get+0x54>)
 800a9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b0:	0800aa7d 	.word	0x0800aa7d
 800a9b4:	0800aa85 	.word	0x0800aa85
 800a9b8:	0800aa95 	.word	0x0800aa95
 800a9bc:	0800aab5 	.word	0x0800aab5
 800a9c0:	0800aa8d 	.word	0x0800aa8d
 800a9c4:	0800aab5 	.word	0x0800aab5
 800a9c8:	0800aab5 	.word	0x0800aab5
 800a9cc:	0800aab5 	.word	0x0800aab5
 800a9d0:	0800aab5 	.word	0x0800aab5
 800a9d4:	0800aab5 	.word	0x0800aab5
 800a9d8:	0800aab5 	.word	0x0800aab5
 800a9dc:	0800aab5 	.word	0x0800aab5
 800a9e0:	0800aab5 	.word	0x0800aab5
 800a9e4:	0800aab5 	.word	0x0800aab5
 800a9e8:	0800aab5 	.word	0x0800aab5
 800a9ec:	0800aab5 	.word	0x0800aab5
 800a9f0:	0800aab5 	.word	0x0800aab5
 800a9f4:	0800aab5 	.word	0x0800aab5
 800a9f8:	0800aa9d 	.word	0x0800aa9d
 800a9fc:	0800aab5 	.word	0x0800aab5
 800aa00:	0800aab5 	.word	0x0800aab5
 800aa04:	0800aab5 	.word	0x0800aab5
 800aa08:	0800aab5 	.word	0x0800aab5
 800aa0c:	0800aab5 	.word	0x0800aab5
 800aa10:	0800aab5 	.word	0x0800aab5
 800aa14:	0800aab5 	.word	0x0800aab5
 800aa18:	0800aab5 	.word	0x0800aab5
 800aa1c:	0800aab5 	.word	0x0800aab5
 800aa20:	0800aab5 	.word	0x0800aab5
 800aa24:	0800aab5 	.word	0x0800aab5
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aab5 	.word	0x0800aab5
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aab5 	.word	0x0800aab5
 800aa38:	0800aaa5 	.word	0x0800aaa5
 800aa3c:	0800aab5 	.word	0x0800aab5
 800aa40:	0800aab5 	.word	0x0800aab5
 800aa44:	0800aab5 	.word	0x0800aab5
 800aa48:	0800aab5 	.word	0x0800aab5
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aab5 	.word	0x0800aab5
 800aa54:	0800aab5 	.word	0x0800aab5
 800aa58:	0800aab5 	.word	0x0800aab5
 800aa5c:	0800aab5 	.word	0x0800aab5
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aab5 	.word	0x0800aab5
 800aa6c:	0800aab5 	.word	0x0800aab5
 800aa70:	0800aab5 	.word	0x0800aab5
 800aa74:	0800aab5 	.word	0x0800aab5
 800aa78:	0800aaad 	.word	0x0800aaad
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	701a      	strb	r2, [r3, #0]
      break;
 800aa82:	e01b      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2201      	movs	r2, #1
 800aa88:	701a      	strb	r2, [r3, #0]
      break;
 800aa8a:	e017      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	701a      	strb	r2, [r3, #0]
      break;
 800aa92:	e013      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2202      	movs	r2, #2
 800aa98:	701a      	strb	r2, [r3, #0]
      break;
 800aa9a:	e00f      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2212      	movs	r2, #18
 800aaa0:	701a      	strb	r2, [r3, #0]
      break;
 800aaa2:	e00b      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2222      	movs	r2, #34	@ 0x22
 800aaa8:	701a      	strb	r2, [r3, #0]
      break;
 800aaaa:	e007      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2232      	movs	r2, #50	@ 0x32
 800aab0:	701a      	strb	r2, [r3, #0]
      break;
 800aab2:	e003      	b.n	800aabc <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
      break;
 800aaba:	bf00      	nop
  }

  return ret;
 800aabc:	68fb      	ldr	r3, [r7, #12]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop

0800aac8 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aad4:	f107 0208 	add.w	r2, r7, #8
 800aad8:	2301      	movs	r3, #1
 800aada:	2104      	movs	r1, #4
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fea5 	bl	800a82c <stts22h_read_reg>
 800aae2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10f      	bne.n	800ab0a <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	7a3b      	ldrb	r3, [r7, #8]
 800aaf4:	f362 1386 	bfi	r3, r2, #6, #1
 800aaf8:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aafa:	f107 0208 	add.w	r2, r7, #8
 800aafe:	2301      	movs	r3, #1
 800ab00:	2104      	movs	r1, #4
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff feb0 	bl	800a868 <stts22h_write_reg>
 800ab08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800ab1e:	f107 0208 	add.w	r2, r7, #8
 800ab22:	2302      	movs	r3, #2
 800ab24:	2106      	movs	r1, #6
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fe80 	bl	800a82c <stts22h_read_reg>
 800ab2c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ab2e:	7a7b      	ldrb	r3, [r7, #9]
 800ab30:	b21a      	sxth	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	7a3a      	ldrb	r2, [r7, #8]
 800ab44:	4413      	add	r3, r2
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	b21a      	sxth	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	801a      	strh	r2, [r3, #0]

  return ret;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800ab62:	2301      	movs	r3, #1
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	2101      	movs	r1, #1
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff fe5f 	bl	800a82c <stts22h_read_reg>
 800ab6e:	60f8      	str	r0, [r7, #12]

  return ret;
 800ab70:	68fb      	ldr	r3, [r7, #12]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ab86:	f107 0208 	add.w	r2, r7, #8
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	2104      	movs	r1, #4
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff fe4c 	bl	800a82c <stts22h_read_reg>
 800ab94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10f      	bne.n	800abbc <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	7a3b      	ldrb	r3, [r7, #8]
 800aba6:	f362 03c3 	bfi	r3, r2, #3, #1
 800abaa:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800abac:	f107 0208 	add.w	r2, r7, #8
 800abb0:	2301      	movs	r3, #1
 800abb2:	2104      	movs	r1, #4
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff fe57 	bl	800a868 <stts22h_write_reg>
 800abba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abbc:	68fb      	ldr	r3, [r7, #12]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08c      	sub	sp, #48	@ 0x30
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d07c      	beq.n	800acde <IKS4A1_ENV_SENSOR_Init+0x116>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	f200 80b2 	bhi.w	800ad50 <IKS4A1_ENV_SENSOR_Init+0x188>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <IKS4A1_ENV_SENSOR_Init+0x32>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d039      	beq.n	800ac6c <IKS4A1_ENV_SENSOR_Init+0xa4>
 800abf8:	e0aa      	b.n	800ad50 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800abfa:	6838      	ldr	r0, [r7, #0]
 800abfc:	f000 f9ca 	bl	800af94 <STTS22H_0_Probe>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800ac06:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0a:	e0df      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ac0c:	4a71      	ldr	r2, [pc, #452]	@ (800add4 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	4970      	ldr	r1, [pc, #448]	@ (800add8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac1e:	f107 0108 	add.w	r1, r7, #8
 800ac22:	4610      	mov	r0, r2
 800ac24:	4798      	blx	r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ac2c:	f06f 0306 	mvn.w	r3, #6
 800ac30:	e0cc      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ac32:	7a3b      	ldrb	r3, [r7, #8]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d103      	bne.n	800ac40 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ac40:	7abb      	ldrb	r3, [r7, #10]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d103      	bne.n	800ac4e <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	f043 0304 	orr.w	r3, r3, #4
 800ac4c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ac4e:	7a7b      	ldrb	r3, [r7, #9]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d103      	bne.n	800ac5c <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	f043 0302 	orr.w	r3, r3, #2
 800ac5a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ac5c:	7afb      	ldrb	r3, [r7, #11]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d17a      	bne.n	800ad58 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	f043 0308 	orr.w	r3, r3, #8
 800ac68:	623b      	str	r3, [r7, #32]
      }
      break;
 800ac6a:	e075      	b.n	800ad58 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800ac6c:	6838      	ldr	r0, [r7, #0]
 800ac6e:	f000 fa47 	bl	800b100 <LPS22DF_0_Probe>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800ac78:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7c:	e0a6      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ac7e:	4a55      	ldr	r2, [pc, #340]	@ (800add4 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	4953      	ldr	r1, [pc, #332]	@ (800add8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac90:	f107 0108 	add.w	r1, r7, #8
 800ac94:	4610      	mov	r0, r2
 800ac96:	4798      	blx	r3
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ac9e:	f06f 0306 	mvn.w	r3, #6
 800aca2:	e093      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800aca4:	7a3b      	ldrb	r3, [r7, #8]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d103      	bne.n	800acb2 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	f043 0301 	orr.w	r3, r3, #1
 800acb0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800acb2:	7abb      	ldrb	r3, [r7, #10]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d103      	bne.n	800acc0 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	f043 0304 	orr.w	r3, r3, #4
 800acbe:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800acc0:	7a7b      	ldrb	r3, [r7, #9]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d103      	bne.n	800acce <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	f043 0302 	orr.w	r3, r3, #2
 800accc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800acce:	7afb      	ldrb	r3, [r7, #11]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d143      	bne.n	800ad5c <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	f043 0308 	orr.w	r3, r3, #8
 800acda:	623b      	str	r3, [r7, #32]
      }
      break;
 800acdc:	e03e      	b.n	800ad5c <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800acde:	6838      	ldr	r0, [r7, #0]
 800ace0:	f000 fade 	bl	800b2a0 <SHT40AD1B_0_Probe>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800acea:	f04f 33ff 	mov.w	r3, #4294967295
 800acee:	e06d      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800acf0:	4a38      	ldr	r2, [pc, #224]	@ (800add4 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	4937      	ldr	r1, [pc, #220]	@ (800add8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad02:	f107 0108 	add.w	r1, r7, #8
 800ad06:	4610      	mov	r0, r2
 800ad08:	4798      	blx	r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad10:	f06f 0306 	mvn.w	r3, #6
 800ad14:	e05a      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad16:	7a3b      	ldrb	r3, [r7, #8]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d103      	bne.n	800ad24 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	f043 0301 	orr.w	r3, r3, #1
 800ad22:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad24:	7abb      	ldrb	r3, [r7, #10]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d103      	bne.n	800ad32 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	f043 0304 	orr.w	r3, r3, #4
 800ad30:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad32:	7a7b      	ldrb	r3, [r7, #9]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d103      	bne.n	800ad40 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	f043 0302 	orr.w	r3, r3, #2
 800ad3e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d10c      	bne.n	800ad60 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	f043 0308 	orr.w	r3, r3, #8
 800ad4c:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad4e:	e007      	b.n	800ad60 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ad50:	f06f 0301 	mvn.w	r3, #1
 800ad54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ad56:	e004      	b.n	800ad62 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad58:	bf00      	nop
 800ad5a:	e002      	b.n	800ad62 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad60:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800ad62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6a:	e02f      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad70:	e028      	b.n	800adc4 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	4013      	ands	r3, r2
 800ad78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d11c      	bne.n	800adb8 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800ad7e:	6a3a      	ldr	r2, [r7, #32]
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	4013      	ands	r3, r2
 800ad84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d116      	bne.n	800adb8 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800ad8a:	4a14      	ldr	r2, [pc, #80]	@ (800addc <IKS4A1_ENV_SENSOR_Init+0x214>)
 800ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad92:	4913      	ldr	r1, [pc, #76]	@ (800ade0 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	0092      	lsls	r2, r2, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	490d      	ldr	r1, [pc, #52]	@ (800add8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ada8:	4610      	mov	r0, r2
 800adaa:	4798      	blx	r3
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800adb2:	f06f 0304 	mvn.w	r3, #4
 800adb6:	e009      	b.n	800adcc <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800adb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	3301      	adds	r3, #1
 800adc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800adc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d9d3      	bls.n	800ad72 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800adca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3730      	adds	r7, #48	@ 0x30
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	20000964 	.word	0x20000964
 800add8:	20000928 	.word	0x20000928
 800addc:	200001b0 	.word	0x200001b0
 800ade0:	20000934 	.word	0x20000934

0800ade4 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d903      	bls.n	800adfc <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800adf4:	f06f 0301 	mvn.w	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	e014      	b.n	800ae26 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800adfc:	4a0c      	ldr	r2, [pc, #48]	@ (800ae30 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	490b      	ldr	r1, [pc, #44]	@ (800ae34 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	4610      	mov	r0, r2
 800ae12:	4798      	blx	r3
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae1a:	f06f 0306 	mvn.w	r3, #6
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	e001      	b.n	800ae26 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae26:	68fb      	ldr	r3, [r7, #12]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20000964 	.word	0x20000964
 800ae34:	20000928 	.word	0x20000928

0800ae38 <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d903      	bls.n	800ae50 <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae48:	f06f 0301 	mvn.w	r3, #1
 800ae4c:	60fb      	str	r3, [r7, #12]
 800ae4e:	e014      	b.n	800ae7a <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800ae50:	4a0c      	ldr	r2, [pc, #48]	@ (800ae84 <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	490b      	ldr	r1, [pc, #44]	@ (800ae88 <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae6e:	f06f 0306 	mvn.w	r3, #6
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	e001      	b.n	800ae7a <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20000964 	.word	0x20000964
 800ae88:	20000928 	.word	0x20000928

0800ae8c <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d903      	bls.n	800aea6 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae9e:	f06f 0301 	mvn.w	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e027      	b.n	800aef6 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aea6:	4a16      	ldr	r2, [pc, #88]	@ (800af00 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d11b      	bne.n	800aef0 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800aeb8:	4a12      	ldr	r2, [pc, #72]	@ (800af04 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec0:	4911      	ldr	r1, [pc, #68]	@ (800af08 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	0092      	lsls	r2, r2, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	490f      	ldr	r1, [pc, #60]	@ (800af0c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4610      	mov	r0, r2
 800aeda:	4798      	blx	r3
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d003      	beq.n	800aeea <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aee2:	f06f 0304 	mvn.w	r3, #4
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e005      	b.n	800aef6 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e002      	b.n	800aef6 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800aef0:	f06f 0301 	mvn.w	r3, #1
 800aef4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800aef6:	697b      	ldr	r3, [r7, #20]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20000970 	.word	0x20000970
 800af04:	200001b0 	.word	0x200001b0
 800af08:	20000934 	.word	0x20000934
 800af0c:	20000928 	.word	0x20000928

0800af10 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d903      	bls.n	800af2a <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af22:	f06f 0301 	mvn.w	r3, #1
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	e027      	b.n	800af7a <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800af2a:	4a16      	ldr	r2, [pc, #88]	@ (800af84 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	4013      	ands	r3, r2
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d11b      	bne.n	800af74 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800af3c:	4a12      	ldr	r2, [pc, #72]	@ (800af88 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af44:	4911      	ldr	r1, [pc, #68]	@ (800af8c <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	0092      	lsls	r2, r2, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	490f      	ldr	r1, [pc, #60]	@ (800af90 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af66:	f06f 0304 	mvn.w	r3, #4
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e005      	b.n	800af7a <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
 800af72:	e002      	b.n	800af7a <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af74:	f06f 0301 	mvn.w	r3, #1
 800af78:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800af7a:	697b      	ldr	r3, [r7, #20]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20000970 	.word	0x20000970
 800af88:	200001b0 	.word	0x200001b0
 800af8c:	20000934 	.word	0x20000934
 800af90:	20000928 	.word	0x20000928

0800af94 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b092      	sub	sp, #72	@ 0x48
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800afa0:	2300      	movs	r3, #0
 800afa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800afa4:	2371      	movs	r3, #113	@ 0x71
 800afa6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800afaa:	4b47      	ldr	r3, [pc, #284]	@ (800b0c8 <STTS22H_0_Probe+0x134>)
 800afac:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800afae:	4b47      	ldr	r3, [pc, #284]	@ (800b0cc <STTS22H_0_Probe+0x138>)
 800afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800afb2:	4b47      	ldr	r3, [pc, #284]	@ (800b0d0 <STTS22H_0_Probe+0x13c>)
 800afb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800afb6:	4b47      	ldr	r3, [pc, #284]	@ (800b0d4 <STTS22H_0_Probe+0x140>)
 800afb8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800afba:	4b47      	ldr	r3, [pc, #284]	@ (800b0d8 <STTS22H_0_Probe+0x144>)
 800afbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800afbe:	4b47      	ldr	r3, [pc, #284]	@ (800b0dc <STTS22H_0_Probe+0x148>)
 800afc0:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800afc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afc6:	4619      	mov	r1, r3
 800afc8:	4845      	ldr	r0, [pc, #276]	@ (800b0e0 <STTS22H_0_Probe+0x14c>)
 800afca:	f7ff f973 	bl	800a2b4 <STTS22H_RegisterBusIO>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afd4:	f06f 0306 	mvn.w	r3, #6
 800afd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800afda:	e06f      	b.n	800b0bc <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800afdc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800afe0:	4619      	mov	r1, r3
 800afe2:	483f      	ldr	r0, [pc, #252]	@ (800b0e0 <STTS22H_0_Probe+0x14c>)
 800afe4:	f7ff fa05 	bl	800a3f2 <STTS22H_ReadID>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afee:	f06f 0306 	mvn.w	r3, #6
 800aff2:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff4:	e062      	b.n	800b0bc <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800aff6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800affa:	2ba0      	cmp	r3, #160	@ 0xa0
 800affc:	d003      	beq.n	800b006 <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800affe:	f06f 0306 	mvn.w	r3, #6
 800b002:	647b      	str	r3, [r7, #68]	@ 0x44
 800b004:	e05a      	b.n	800b0bc <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800b006:	f107 0308 	add.w	r3, r7, #8
 800b00a:	4619      	mov	r1, r3
 800b00c:	4834      	ldr	r0, [pc, #208]	@ (800b0e0 <STTS22H_0_Probe+0x14c>)
 800b00e:	f7ff fa0b 	bl	800a428 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b012:	7a3b      	ldrb	r3, [r7, #8]
 800b014:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b016:	7a7b      	ldrb	r3, [r7, #9]
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b01c:	7abb      	ldrb	r3, [r7, #10]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b028:	4a2e      	ldr	r2, [pc, #184]	@ (800b0e4 <STTS22H_0_Probe+0x150>)
 800b02a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b02c:	4b2e      	ldr	r3, [pc, #184]	@ (800b0e8 <STTS22H_0_Probe+0x154>)
 800b02e:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e0 <STTS22H_0_Probe+0x14c>)
 800b030:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b032:	4b2e      	ldr	r3, [pc, #184]	@ (800b0ec <STTS22H_0_Probe+0x158>)
 800b034:	4a2e      	ldr	r2, [pc, #184]	@ (800b0f0 <STTS22H_0_Probe+0x15c>)
 800b036:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d11d      	bne.n	800b07a <STTS22H_0_Probe+0xe6>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	d018      	beq.n	800b07a <STTS22H_0_Probe+0xe6>
 800b048:	7a3b      	ldrb	r3, [r7, #8]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d115      	bne.n	800b07a <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b04e:	4b29      	ldr	r3, [pc, #164]	@ (800b0f4 <STTS22H_0_Probe+0x160>)
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	4a29      	ldr	r2, [pc, #164]	@ (800b0f8 <STTS22H_0_Probe+0x164>)
 800b054:	4929      	ldr	r1, [pc, #164]	@ (800b0fc <STTS22H_0_Probe+0x168>)
 800b056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b05a:	4b24      	ldr	r3, [pc, #144]	@ (800b0ec <STTS22H_0_Probe+0x158>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a21      	ldr	r2, [pc, #132]	@ (800b0e8 <STTS22H_0_Probe+0x154>)
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d003      	beq.n	800b076 <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b06e:	f06f 0304 	mvn.w	r3, #4
 800b072:	647b      	str	r3, [r7, #68]	@ 0x44
 800b074:	e001      	b.n	800b07a <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b076:	2300      	movs	r3, #0
 800b078:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d107      	bne.n	800b090 <STTS22H_0_Probe+0xfc>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f003 0304 	and.w	r3, r3, #4
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b08a:	f06f 0304 	mvn.w	r3, #4
 800b08e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b092:	2b00      	cmp	r3, #0
 800b094:	d107      	bne.n	800b0a6 <STTS22H_0_Probe+0x112>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0a0:	f06f 0304 	mvn.w	r3, #4
 800b0a4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d107      	bne.n	800b0bc <STTS22H_0_Probe+0x128>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0b6:	f06f 0304 	mvn.w	r3, #4
 800b0ba:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3748      	adds	r7, #72	@ 0x48
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	080023e1 	.word	0x080023e1
 800b0cc:	08002445 	.word	0x08002445
 800b0d0:	080024f9 	.word	0x080024f9
 800b0d4:	08002495 	.word	0x08002495
 800b0d8:	08002605 	.word	0x08002605
 800b0dc:	0800c331 	.word	0x0800c331
 800b0e0:	2000097c 	.word	0x2000097c
 800b0e4:	20000970 	.word	0x20000970
 800b0e8:	20000928 	.word	0x20000928
 800b0ec:	20000964 	.word	0x20000964
 800b0f0:	2000018c 	.word	0x2000018c
 800b0f4:	200001b0 	.word	0x200001b0
 800b0f8:	20000934 	.word	0x20000934
 800b0fc:	2000019c 	.word	0x2000019c

0800b100 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b092      	sub	sp, #72	@ 0x48
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b108:	2300      	movs	r3, #0
 800b10a:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b10c:	2300      	movs	r3, #0
 800b10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b110:	23bb      	movs	r3, #187	@ 0xbb
 800b112:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b116:	4b53      	ldr	r3, [pc, #332]	@ (800b264 <LPS22DF_0_Probe+0x164>)
 800b118:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b11a:	4b53      	ldr	r3, [pc, #332]	@ (800b268 <LPS22DF_0_Probe+0x168>)
 800b11c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b11e:	4b53      	ldr	r3, [pc, #332]	@ (800b26c <LPS22DF_0_Probe+0x16c>)
 800b120:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b122:	4b53      	ldr	r3, [pc, #332]	@ (800b270 <LPS22DF_0_Probe+0x170>)
 800b124:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b126:	4b53      	ldr	r3, [pc, #332]	@ (800b274 <LPS22DF_0_Probe+0x174>)
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b12a:	4b53      	ldr	r3, [pc, #332]	@ (800b278 <LPS22DF_0_Probe+0x178>)
 800b12c:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b12e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b132:	4619      	mov	r1, r3
 800b134:	4851      	ldr	r0, [pc, #324]	@ (800b27c <LPS22DF_0_Probe+0x17c>)
 800b136:	f7fa f8bd 	bl	80052b4 <LPS22DF_RegisterBusIO>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b140:	f06f 0306 	mvn.w	r3, #6
 800b144:	647b      	str	r3, [r7, #68]	@ 0x44
 800b146:	e087      	b.n	800b258 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b148:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b14c:	4619      	mov	r1, r3
 800b14e:	484b      	ldr	r0, [pc, #300]	@ (800b27c <LPS22DF_0_Probe+0x17c>)
 800b150:	f7fa f959 	bl	8005406 <LPS22DF_ReadID>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b15a:	f06f 0306 	mvn.w	r3, #6
 800b15e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b160:	e07a      	b.n	800b258 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b162:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b166:	2bb4      	cmp	r3, #180	@ 0xb4
 800b168:	d003      	beq.n	800b172 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b16a:	f06f 0306 	mvn.w	r3, #6
 800b16e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b170:	e072      	b.n	800b258 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	4619      	mov	r1, r3
 800b178:	4840      	ldr	r0, [pc, #256]	@ (800b27c <LPS22DF_0_Probe+0x17c>)
 800b17a:	f7fa f95f 	bl	800543c <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b17e:	7a3b      	ldrb	r3, [r7, #8]
 800b180:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b182:	7a7b      	ldrb	r3, [r7, #9]
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b188:	7abb      	ldrb	r3, [r7, #10]
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	00db      	lsls	r3, r3, #3
 800b192:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b194:	4a3a      	ldr	r2, [pc, #232]	@ (800b280 <LPS22DF_0_Probe+0x180>)
 800b196:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b198:	4b3a      	ldr	r3, [pc, #232]	@ (800b284 <LPS22DF_0_Probe+0x184>)
 800b19a:	4a38      	ldr	r2, [pc, #224]	@ (800b27c <LPS22DF_0_Probe+0x17c>)
 800b19c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b19e:	4b3a      	ldr	r3, [pc, #232]	@ (800b288 <LPS22DF_0_Probe+0x188>)
 800b1a0:	4a3a      	ldr	r2, [pc, #232]	@ (800b28c <LPS22DF_0_Probe+0x18c>)
 800b1a2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d11e      	bne.n	800b1e8 <LPS22DF_0_Probe+0xe8>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d019      	beq.n	800b1e8 <LPS22DF_0_Probe+0xe8>
 800b1b4:	7a3b      	ldrb	r3, [r7, #8]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d116      	bne.n	800b1e8 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b1ba:	4b35      	ldr	r3, [pc, #212]	@ (800b290 <LPS22DF_0_Probe+0x190>)
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	4a35      	ldr	r2, [pc, #212]	@ (800b294 <LPS22DF_0_Probe+0x194>)
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4935      	ldr	r1, [pc, #212]	@ (800b298 <LPS22DF_0_Probe+0x198>)
 800b1c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b1c8:	4b2f      	ldr	r3, [pc, #188]	@ (800b288 <LPS22DF_0_Probe+0x188>)
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a2d      	ldr	r2, [pc, #180]	@ (800b284 <LPS22DF_0_Probe+0x184>)
 800b1d0:	6852      	ldr	r2, [r2, #4]
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4798      	blx	r3
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1dc:	f06f 0304 	mvn.w	r3, #4
 800b1e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1e2:	e001      	b.n	800b1e8 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b1e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d11e      	bne.n	800b22c <LPS22DF_0_Probe+0x12c>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f003 0302 	and.w	r3, r3, #2
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d019      	beq.n	800b22c <LPS22DF_0_Probe+0x12c>
 800b1f8:	7a7b      	ldrb	r3, [r7, #9]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d116      	bne.n	800b22c <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b1fe:	4b24      	ldr	r3, [pc, #144]	@ (800b290 <LPS22DF_0_Probe+0x190>)
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	4a24      	ldr	r2, [pc, #144]	@ (800b294 <LPS22DF_0_Probe+0x194>)
 800b204:	3304      	adds	r3, #4
 800b206:	4925      	ldr	r1, [pc, #148]	@ (800b29c <LPS22DF_0_Probe+0x19c>)
 800b208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b20c:	4b1e      	ldr	r3, [pc, #120]	@ (800b288 <LPS22DF_0_Probe+0x188>)
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a1c      	ldr	r2, [pc, #112]	@ (800b284 <LPS22DF_0_Probe+0x184>)
 800b214:	6852      	ldr	r2, [r2, #4]
 800b216:	4610      	mov	r0, r2
 800b218:	4798      	blx	r3
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b220:	f06f 0304 	mvn.w	r3, #4
 800b224:	647b      	str	r3, [r7, #68]	@ 0x44
 800b226:	e001      	b.n	800b22c <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b228:	2300      	movs	r3, #0
 800b22a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b22c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d107      	bne.n	800b242 <LPS22DF_0_Probe+0x142>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b23c:	f06f 0304 	mvn.w	r3, #4
 800b240:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b244:	2b00      	cmp	r3, #0
 800b246:	d107      	bne.n	800b258 <LPS22DF_0_Probe+0x158>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f003 0308 	and.w	r3, r3, #8
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b252:	f06f 0304 	mvn.w	r3, #4
 800b256:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3748      	adds	r7, #72	@ 0x48
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	080023e1 	.word	0x080023e1
 800b268:	08002445 	.word	0x08002445
 800b26c:	080024f9 	.word	0x080024f9
 800b270:	08002495 	.word	0x08002495
 800b274:	08002605 	.word	0x08002605
 800b278:	0800c331 	.word	0x0800c331
 800b27c:	200009b4 	.word	0x200009b4
 800b280:	20000970 	.word	0x20000970
 800b284:	20000928 	.word	0x20000928
 800b288:	20000964 	.word	0x20000964
 800b28c:	2000006c 	.word	0x2000006c
 800b290:	200001b0 	.word	0x200001b0
 800b294:	20000934 	.word	0x20000934
 800b298:	20000090 	.word	0x20000090
 800b29c:	2000007c 	.word	0x2000007c

0800b2a0 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b092      	sub	sp, #72	@ 0x48
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b2b0:	2389      	movs	r3, #137	@ 0x89
 800b2b2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b2b6:	4b53      	ldr	r3, [pc, #332]	@ (800b404 <SHT40AD1B_0_Probe+0x164>)
 800b2b8:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b2ba:	4b53      	ldr	r3, [pc, #332]	@ (800b408 <SHT40AD1B_0_Probe+0x168>)
 800b2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b2be:	4b53      	ldr	r3, [pc, #332]	@ (800b40c <SHT40AD1B_0_Probe+0x16c>)
 800b2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b2c2:	4b53      	ldr	r3, [pc, #332]	@ (800b410 <SHT40AD1B_0_Probe+0x170>)
 800b2c4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b2c6:	4b53      	ldr	r3, [pc, #332]	@ (800b414 <SHT40AD1B_0_Probe+0x174>)
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b2ca:	4b53      	ldr	r3, [pc, #332]	@ (800b418 <SHT40AD1B_0_Probe+0x178>)
 800b2cc:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b2ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4851      	ldr	r0, [pc, #324]	@ (800b41c <SHT40AD1B_0_Probe+0x17c>)
 800b2d6:	f7fe fce9 	bl	8009cac <SHT40AD1B_RegisterBusIO>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2e0:	f06f 0306 	mvn.w	r3, #6
 800b2e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2e6:	e087      	b.n	800b3f8 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b2e8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	484b      	ldr	r0, [pc, #300]	@ (800b41c <SHT40AD1B_0_Probe+0x17c>)
 800b2f0:	f7fe fd4c 	bl	8009d8c <SHT40AD1B_ReadID>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2fa:	f06f 0306 	mvn.w	r3, #6
 800b2fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b300:	e07a      	b.n	800b3f8 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b302:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b30a:	f06f 0306 	mvn.w	r3, #6
 800b30e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b310:	e072      	b.n	800b3f8 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b312:	f107 0308 	add.w	r3, r7, #8
 800b316:	4619      	mov	r1, r3
 800b318:	4840      	ldr	r0, [pc, #256]	@ (800b41c <SHT40AD1B_0_Probe+0x17c>)
 800b31a:	f7fe fd47 	bl	8009dac <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b31e:	7a3b      	ldrb	r3, [r7, #8]
 800b320:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b322:	7a7b      	ldrb	r3, [r7, #9]
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b328:	7abb      	ldrb	r3, [r7, #10]
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b32e:	7afb      	ldrb	r3, [r7, #11]
 800b330:	00db      	lsls	r3, r3, #3
 800b332:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b334:	4a3a      	ldr	r2, [pc, #232]	@ (800b420 <SHT40AD1B_0_Probe+0x180>)
 800b336:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b338:	4b3a      	ldr	r3, [pc, #232]	@ (800b424 <SHT40AD1B_0_Probe+0x184>)
 800b33a:	4a38      	ldr	r2, [pc, #224]	@ (800b41c <SHT40AD1B_0_Probe+0x17c>)
 800b33c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b33e:	4b3a      	ldr	r3, [pc, #232]	@ (800b428 <SHT40AD1B_0_Probe+0x188>)
 800b340:	4a3a      	ldr	r2, [pc, #232]	@ (800b42c <SHT40AD1B_0_Probe+0x18c>)
 800b342:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b346:	2b00      	cmp	r3, #0
 800b348:	d11e      	bne.n	800b388 <SHT40AD1B_0_Probe+0xe8>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	d019      	beq.n	800b388 <SHT40AD1B_0_Probe+0xe8>
 800b354:	7a3b      	ldrb	r3, [r7, #8]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d116      	bne.n	800b388 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b35a:	4b35      	ldr	r3, [pc, #212]	@ (800b430 <SHT40AD1B_0_Probe+0x190>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4a35      	ldr	r2, [pc, #212]	@ (800b434 <SHT40AD1B_0_Probe+0x194>)
 800b360:	3308      	adds	r3, #8
 800b362:	4935      	ldr	r1, [pc, #212]	@ (800b438 <SHT40AD1B_0_Probe+0x198>)
 800b364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b368:	4b2f      	ldr	r3, [pc, #188]	@ (800b428 <SHT40AD1B_0_Probe+0x188>)
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a2d      	ldr	r2, [pc, #180]	@ (800b424 <SHT40AD1B_0_Probe+0x184>)
 800b370:	6892      	ldr	r2, [r2, #8]
 800b372:	4610      	mov	r0, r2
 800b374:	4798      	blx	r3
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d003      	beq.n	800b384 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b37c:	f06f 0304 	mvn.w	r3, #4
 800b380:	647b      	str	r3, [r7, #68]	@ 0x44
 800b382:	e001      	b.n	800b388 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b384:	2300      	movs	r3, #0
 800b386:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d11e      	bne.n	800b3cc <SHT40AD1B_0_Probe+0x12c>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d019      	beq.n	800b3cc <SHT40AD1B_0_Probe+0x12c>
 800b398:	7abb      	ldrb	r3, [r7, #10]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d116      	bne.n	800b3cc <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b39e:	4b24      	ldr	r3, [pc, #144]	@ (800b430 <SHT40AD1B_0_Probe+0x190>)
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	4a24      	ldr	r2, [pc, #144]	@ (800b434 <SHT40AD1B_0_Probe+0x194>)
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	4925      	ldr	r1, [pc, #148]	@ (800b43c <SHT40AD1B_0_Probe+0x19c>)
 800b3a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b3ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b428 <SHT40AD1B_0_Probe+0x188>)
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b424 <SHT40AD1B_0_Probe+0x184>)
 800b3b4:	6892      	ldr	r2, [r2, #8]
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	4798      	blx	r3
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3c0:	f06f 0304 	mvn.w	r3, #4
 800b3c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3c6:	e001      	b.n	800b3cc <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d107      	bne.n	800b3e2 <SHT40AD1B_0_Probe+0x142>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f003 0302 	and.w	r3, r3, #2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3dc:	f06f 0304 	mvn.w	r3, #4
 800b3e0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d107      	bne.n	800b3f8 <SHT40AD1B_0_Probe+0x158>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f003 0308 	and.w	r3, r3, #8
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3f2:	f06f 0304 	mvn.w	r3, #4
 800b3f6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b3f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3748      	adds	r7, #72	@ 0x48
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	080023e1 	.word	0x080023e1
 800b408:	08002445 	.word	0x08002445
 800b40c:	080025b1 	.word	0x080025b1
 800b410:	0800255d 	.word	0x0800255d
 800b414:	08002605 	.word	0x08002605
 800b418:	0800c331 	.word	0x0800c331
 800b41c:	200009ec 	.word	0x200009ec
 800b420:	20000970 	.word	0x20000970
 800b424:	20000928 	.word	0x20000928
 800b428:	20000964 	.word	0x20000964
 800b42c:	20000154 	.word	0x20000154
 800b430:	200001b0 	.word	0x200001b0
 800b434:	20000934 	.word	0x20000934
 800b438:	20000178 	.word	0x20000178
 800b43c:	20000164 	.word	0x20000164

0800b440 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	@ 0x38
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b44e:	2301      	movs	r3, #1
 800b450:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b03      	cmp	r3, #3
 800b45a:	f200 80d4 	bhi.w	800b606 <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b45e:	a201      	add	r2, pc, #4	@ (adr r2, 800b464 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b475 	.word	0x0800b475
 800b468:	0800b4db 	.word	0x0800b4db
 800b46c:	0800b53f 	.word	0x0800b53f
 800b470:	0800b5a3 	.word	0x0800b5a3
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b474:	6838      	ldr	r0, [r7, #0]
 800b476:	f000 fa35 	bl	800b8e4 <LIS2MDL_0_Probe>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b480:	f04f 33ff 	mov.w	r3, #4294967295
 800b484:	e101      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b486:	4a83      	ldr	r2, [pc, #524]	@ (800b694 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	4981      	ldr	r1, [pc, #516]	@ (800b698 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b498:	f107 010c 	add.w	r1, r7, #12
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b4a6:	f06f 0306 	mvn.w	r3, #6
 800b4aa:	e0ee      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b4ac:	7b3b      	ldrb	r3, [r7, #12]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d103      	bne.n	800b4ba <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	f043 0302 	orr.w	r3, r3, #2
 800b4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b4ba:	7b7b      	ldrb	r3, [r7, #13]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d103      	bne.n	800b4c8 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	f043 0301 	orr.w	r3, r3, #1
 800b4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	f040 809f 	bne.w	800b60e <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	f043 0304 	orr.w	r3, r3, #4
 800b4d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b4d8:	e099      	b.n	800b60e <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b4da:	6838      	ldr	r0, [r7, #0]
 800b4dc:	f000 faaa 	bl	800ba34 <LSM6DSV16X_0_Probe>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ea:	e0ce      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b4ec:	4a69      	ldr	r2, [pc, #420]	@ (800b694 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	4968      	ldr	r1, [pc, #416]	@ (800b698 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4fe:	f107 010c 	add.w	r1, r7, #12
 800b502:	4610      	mov	r0, r2
 800b504:	4798      	blx	r3
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b50c:	f06f 0306 	mvn.w	r3, #6
 800b510:	e0bb      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b512:	7b3b      	ldrb	r3, [r7, #12]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d103      	bne.n	800b520 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51a:	f043 0302 	orr.w	r3, r3, #2
 800b51e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b520:	7b7b      	ldrb	r3, [r7, #13]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d103      	bne.n	800b52e <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b528:	f043 0301 	orr.w	r3, r3, #1
 800b52c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d16e      	bne.n	800b612 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b536:	f043 0304 	orr.w	r3, r3, #4
 800b53a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b53c:	e069      	b.n	800b612 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b53e:	6838      	ldr	r0, [r7, #0]
 800b540:	f000 fb44 	bl	800bbcc <LIS2DUXS12_0_Probe>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
 800b54e:	e09c      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b550:	4a50      	ldr	r2, [pc, #320]	@ (800b694 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	494f      	ldr	r1, [pc, #316]	@ (800b698 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b562:	f107 010c 	add.w	r1, r7, #12
 800b566:	4610      	mov	r0, r2
 800b568:	4798      	blx	r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b570:	f06f 0306 	mvn.w	r3, #6
 800b574:	e089      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b576:	7b3b      	ldrb	r3, [r7, #12]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d103      	bne.n	800b584 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	f043 0302 	orr.w	r3, r3, #2
 800b582:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b584:	7b7b      	ldrb	r3, [r7, #13]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d103      	bne.n	800b592 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58c:	f043 0301 	orr.w	r3, r3, #1
 800b590:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d13e      	bne.n	800b616 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59a:	f043 0304 	orr.w	r3, r3, #4
 800b59e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b5a0:	e039      	b.n	800b616 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b5a2:	6838      	ldr	r0, [r7, #0]
 800b5a4:	f000 fbc8 	bl	800bd38 <LSM6DSO16IS_0_Probe>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b2:	e06a      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b5b4:	4a37      	ldr	r2, [pc, #220]	@ (800b694 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	4936      	ldr	r1, [pc, #216]	@ (800b698 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5c6:	f107 010c 	add.w	r1, r7, #12
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	4798      	blx	r3
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b5d4:	f06f 0306 	mvn.w	r3, #6
 800b5d8:	e057      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b5da:	7b3b      	ldrb	r3, [r7, #12]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d103      	bne.n	800b5e8 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e2:	f043 0302 	orr.w	r3, r3, #2
 800b5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b5e8:	7b7b      	ldrb	r3, [r7, #13]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d103      	bne.n	800b5f6 <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f0:	f043 0301 	orr.w	r3, r3, #1
 800b5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d10e      	bne.n	800b61a <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fe:	f043 0304 	orr.w	r3, r3, #4
 800b602:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b604:	e009      	b.n	800b61a <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b606:	f06f 0301 	mvn.w	r3, #1
 800b60a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b60c:	e006      	b.n	800b61c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b60e:	bf00      	nop
 800b610:	e004      	b.n	800b61c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b612:	bf00      	nop
 800b614:	e002      	b.n	800b61c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b616:	bf00      	nop
 800b618:	e000      	b.n	800b61c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b61a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b624:	e031      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b626:	2300      	movs	r3, #0
 800b628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b62a:	e02a      	b.n	800b682 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b630:	4013      	ands	r3, r2
 800b632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b634:	429a      	cmp	r2, r3
 800b636:	d11e      	bne.n	800b676 <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63c:	4013      	ands	r3, r2
 800b63e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b640:	429a      	cmp	r2, r3
 800b642:	d118      	bne.n	800b676 <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b644:	4a15      	ldr	r2, [pc, #84]	@ (800b69c <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b648:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b64c:	4814      	ldr	r0, [pc, #80]	@ (800b6a0 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	4613      	mov	r3, r2
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	4413      	add	r3, r2
 800b656:	440b      	add	r3, r1
 800b658:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	490e      	ldr	r1, [pc, #56]	@ (800b698 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b666:	4610      	mov	r0, r2
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b670:	f06f 0304 	mvn.w	r3, #4
 800b674:	e009      	b.n	800b68a <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67e:	3301      	adds	r3, #1
 800b680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b684:	2b02      	cmp	r3, #2
 800b686:	d9d1      	bls.n	800b62c <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3738      	adds	r7, #56	@ 0x38
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000a70 	.word	0x20000a70
 800b698:	20000a30 	.word	0x20000a30
 800b69c:	200001f0 	.word	0x200001f0
 800b6a0:	20000a40 	.word	0x20000a40

0800b6a4 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d903      	bls.n	800b6bc <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b6b4:	f06f 0301 	mvn.w	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e014      	b.n	800b6e6 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b6bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f0 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	490b      	ldr	r1, [pc, #44]	@ (800b6f4 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4798      	blx	r3
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6da:	f06f 0306 	mvn.w	r3, #6
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e001      	b.n	800b6e6 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000a70 	.word	0x20000a70
 800b6f4:	20000a30 	.word	0x20000a30

0800b6f8 <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b03      	cmp	r3, #3
 800b706:	d903      	bls.n	800b710 <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b708:	f06f 0301 	mvn.w	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
 800b70e:	e014      	b.n	800b73a <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800b710:	4a0c      	ldr	r2, [pc, #48]	@ (800b744 <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	490b      	ldr	r1, [pc, #44]	@ (800b748 <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	4610      	mov	r0, r2
 800b726:	4798      	blx	r3
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b72e:	f06f 0306 	mvn.w	r3, #6
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e001      	b.n	800b73a <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b736:	2300      	movs	r3, #0
 800b738:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b73a:	68fb      	ldr	r3, [r7, #12]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20000a70 	.word	0x20000a70
 800b748:	20000a30 	.word	0x20000a30

0800b74c <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d903      	bls.n	800b766 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b75e:	f06f 0301 	mvn.w	r3, #1
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	e029      	b.n	800b7ba <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b766:	4a17      	ldr	r2, [pc, #92]	@ (800b7c4 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4013      	ands	r3, r2
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	429a      	cmp	r2, r3
 800b776:	d11d      	bne.n	800b7b4 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b778:	4a13      	ldr	r2, [pc, #76]	@ (800b7c8 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b780:	4812      	ldr	r0, [pc, #72]	@ (800b7cc <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4613      	mov	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	4413      	add	r3, r2
 800b78a:	440b      	add	r3, r1
 800b78c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	490f      	ldr	r1, [pc, #60]	@ (800b7d0 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b79a:	6879      	ldr	r1, [r7, #4]
 800b79c:	4610      	mov	r0, r2
 800b79e:	4798      	blx	r3
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7a6:	f06f 0304 	mvn.w	r3, #4
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	e005      	b.n	800b7ba <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e002      	b.n	800b7ba <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b7b4:	f06f 0301 	mvn.w	r3, #1
 800b7b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b7ba:	697b      	ldr	r3, [r7, #20]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20000a80 	.word	0x20000a80
 800b7c8:	200001f0 	.word	0x200001f0
 800b7cc:	20000a40 	.word	0x20000a40
 800b7d0:	20000a30 	.word	0x20000a30

0800b7d4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d903      	bls.n	800b7ee <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7e6:	f06f 0301 	mvn.w	r3, #1
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	e029      	b.n	800b842 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b7ee:	4a17      	ldr	r2, [pc, #92]	@ (800b84c <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d11d      	bne.n	800b83c <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b800:	4a13      	ldr	r2, [pc, #76]	@ (800b850 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b808:	4812      	ldr	r0, [pc, #72]	@ (800b854 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	4613      	mov	r3, r2
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	4413      	add	r3, r2
 800b812:	440b      	add	r3, r1
 800b814:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	490f      	ldr	r1, [pc, #60]	@ (800b858 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b82e:	f06f 0304 	mvn.w	r3, #4
 800b832:	617b      	str	r3, [r7, #20]
 800b834:	e005      	b.n	800b842 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	e002      	b.n	800b842 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b83c:	f06f 0301 	mvn.w	r3, #1
 800b840:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b842:	697b      	ldr	r3, [r7, #20]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	20000a80 	.word	0x20000a80
 800b850:	200001f0 	.word	0x200001f0
 800b854:	20000a40 	.word	0x20000a40
 800b858:	20000a30 	.word	0x20000a30

0800b85c <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d903      	bls.n	800b876 <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b86e:	f06f 0301 	mvn.w	r3, #1
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	e029      	b.n	800b8ca <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b876:	4a17      	ldr	r2, [pc, #92]	@ (800b8d4 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	4013      	ands	r3, r2
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	429a      	cmp	r2, r3
 800b886:	d11d      	bne.n	800b8c4 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800b888:	4a13      	ldr	r2, [pc, #76]	@ (800b8d8 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b890:	4812      	ldr	r0, [pc, #72]	@ (800b8dc <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4613      	mov	r3, r2
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	4413      	add	r3, r2
 800b89a:	440b      	add	r3, r1
 800b89c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	490f      	ldr	r1, [pc, #60]	@ (800b8e0 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d003      	beq.n	800b8be <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8b6:	f06f 0304 	mvn.w	r3, #4
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	e005      	b.n	800b8ca <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e002      	b.n	800b8ca <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b8c4:	f06f 0301 	mvn.w	r3, #1
 800b8c8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b8ca:	697b      	ldr	r3, [r7, #20]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20000a80 	.word	0x20000a80
 800b8d8:	200001f0 	.word	0x200001f0
 800b8dc:	20000a40 	.word	0x20000a40
 800b8e0:	20000a30 	.word	0x20000a30

0800b8e4 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b094      	sub	sp, #80	@ 0x50
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b8f4:	233d      	movs	r3, #61	@ 0x3d
 800b8f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b8fa:	4b40      	ldr	r3, [pc, #256]	@ (800b9fc <LIS2MDL_0_Probe+0x118>)
 800b8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b8fe:	4b40      	ldr	r3, [pc, #256]	@ (800ba00 <LIS2MDL_0_Probe+0x11c>)
 800b900:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b902:	4b40      	ldr	r3, [pc, #256]	@ (800ba04 <LIS2MDL_0_Probe+0x120>)
 800b904:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b906:	4b40      	ldr	r3, [pc, #256]	@ (800ba08 <LIS2MDL_0_Probe+0x124>)
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b90a:	4b40      	ldr	r3, [pc, #256]	@ (800ba0c <LIS2MDL_0_Probe+0x128>)
 800b90c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b90e:	4b40      	ldr	r3, [pc, #256]	@ (800ba10 <LIS2MDL_0_Probe+0x12c>)
 800b910:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b916:	4619      	mov	r1, r3
 800b918:	483e      	ldr	r0, [pc, #248]	@ (800ba14 <LIS2MDL_0_Probe+0x130>)
 800b91a:	f7f8 fcbb 	bl	8004294 <LIS2MDL_RegisterBusIO>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b924:	f06f 0306 	mvn.w	r3, #6
 800b928:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b92a:	e061      	b.n	800b9f0 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b92c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b930:	4619      	mov	r1, r3
 800b932:	4838      	ldr	r0, [pc, #224]	@ (800ba14 <LIS2MDL_0_Probe+0x130>)
 800b934:	f7f8 fdca 	bl	80044cc <LIS2MDL_ReadID>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b93e:	f06f 0306 	mvn.w	r3, #6
 800b942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b944:	e054      	b.n	800b9f0 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800b946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b94a:	2b40      	cmp	r3, #64	@ 0x40
 800b94c:	d003      	beq.n	800b956 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b94e:	f06f 0306 	mvn.w	r3, #6
 800b952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b954:	e04c      	b.n	800b9f0 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	4619      	mov	r1, r3
 800b95c:	482d      	ldr	r0, [pc, #180]	@ (800ba14 <LIS2MDL_0_Probe+0x130>)
 800b95e:	f7f8 fddb 	bl	8004518 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b962:	7b7b      	ldrb	r3, [r7, #13]
 800b964:	461a      	mov	r2, r3
 800b966:	7b3b      	ldrb	r3, [r7, #12]
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	431a      	orrs	r2, r3
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4313      	orrs	r3, r2
 800b972:	4a29      	ldr	r2, [pc, #164]	@ (800ba18 <LIS2MDL_0_Probe+0x134>)
 800b974:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800b976:	4b29      	ldr	r3, [pc, #164]	@ (800ba1c <LIS2MDL_0_Probe+0x138>)
 800b978:	4a26      	ldr	r2, [pc, #152]	@ (800ba14 <LIS2MDL_0_Probe+0x130>)
 800b97a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800b97c:	4b28      	ldr	r3, [pc, #160]	@ (800ba20 <LIS2MDL_0_Probe+0x13c>)
 800b97e:	4a29      	ldr	r2, [pc, #164]	@ (800ba24 <LIS2MDL_0_Probe+0x140>)
 800b980:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11d      	bne.n	800b9c4 <LIS2MDL_0_Probe+0xe0>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f003 0304 	and.w	r3, r3, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d018      	beq.n	800b9c4 <LIS2MDL_0_Probe+0xe0>
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d115      	bne.n	800b9c4 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b998:	4b23      	ldr	r3, [pc, #140]	@ (800ba28 <LIS2MDL_0_Probe+0x144>)
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	4a23      	ldr	r2, [pc, #140]	@ (800ba2c <LIS2MDL_0_Probe+0x148>)
 800b99e:	4924      	ldr	r1, [pc, #144]	@ (800ba30 <LIS2MDL_0_Probe+0x14c>)
 800b9a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800b9a4:	4b1e      	ldr	r3, [pc, #120]	@ (800ba20 <LIS2MDL_0_Probe+0x13c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a1c      	ldr	r2, [pc, #112]	@ (800ba1c <LIS2MDL_0_Probe+0x138>)
 800b9ac:	6812      	ldr	r2, [r2, #0]
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4798      	blx	r3
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9b8:	f06f 0304 	mvn.w	r3, #4
 800b9bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9be:	e001      	b.n	800b9c4 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b9c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d107      	bne.n	800b9da <LIS2MDL_0_Probe+0xf6>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f003 0302 	and.w	r3, r3, #2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9d4:	f06f 0304 	mvn.w	r3, #4
 800b9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d107      	bne.n	800b9f0 <LIS2MDL_0_Probe+0x10c>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9ea:	f06f 0304 	mvn.w	r3, #4
 800b9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3750      	adds	r7, #80	@ 0x50
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	080023e1 	.word	0x080023e1
 800ba00:	08002445 	.word	0x08002445
 800ba04:	080024f9 	.word	0x080024f9
 800ba08:	08002495 	.word	0x08002495
 800ba0c:	08002605 	.word	0x08002605
 800ba10:	0800c331 	.word	0x0800c331
 800ba14:	20000a90 	.word	0x20000a90
 800ba18:	20000a80 	.word	0x20000a80
 800ba1c:	20000a30 	.word	0x20000a30
 800ba20:	20000a70 	.word	0x20000a70
 800ba24:	20000038 	.word	0x20000038
 800ba28:	200001f0 	.word	0x200001f0
 800ba2c:	20000a40 	.word	0x20000a40
 800ba30:	20000048 	.word	0x20000048

0800ba34 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b094      	sub	sp, #80	@ 0x50
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800ba40:	2300      	movs	r3, #0
 800ba42:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800ba44:	23d7      	movs	r3, #215	@ 0xd7
 800ba46:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ba4a:	4b51      	ldr	r3, [pc, #324]	@ (800bb90 <LSM6DSV16X_0_Probe+0x15c>)
 800ba4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ba4e:	4b51      	ldr	r3, [pc, #324]	@ (800bb94 <LSM6DSV16X_0_Probe+0x160>)
 800ba50:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ba52:	4b51      	ldr	r3, [pc, #324]	@ (800bb98 <LSM6DSV16X_0_Probe+0x164>)
 800ba54:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ba56:	4b51      	ldr	r3, [pc, #324]	@ (800bb9c <LSM6DSV16X_0_Probe+0x168>)
 800ba58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ba5a:	4b51      	ldr	r3, [pc, #324]	@ (800bba0 <LSM6DSV16X_0_Probe+0x16c>)
 800ba5c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800ba5e:	4b51      	ldr	r3, [pc, #324]	@ (800bba4 <LSM6DSV16X_0_Probe+0x170>)
 800ba60:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800ba62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba66:	4619      	mov	r1, r3
 800ba68:	484f      	ldr	r0, [pc, #316]	@ (800bba8 <LSM6DSV16X_0_Probe+0x174>)
 800ba6a:	f7fc f983 	bl	8007d74 <LSM6DSV16X_RegisterBusIO>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba74:	f06f 0306 	mvn.w	r3, #6
 800ba78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba7a:	e084      	b.n	800bb86 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	484a      	ldr	r0, [pc, #296]	@ (800bba8 <LSM6DSV16X_0_Probe+0x174>)
 800ba80:	f7fd f905 	bl	8008c8e <LSM6DSV16X_Set_Mem_Bank>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba8a:	f06f 0306 	mvn.w	r3, #6
 800ba8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba90:	e079      	b.n	800bb86 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800ba92:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ba96:	4619      	mov	r1, r3
 800ba98:	4843      	ldr	r0, [pc, #268]	@ (800bba8 <LSM6DSV16X_0_Probe+0x174>)
 800ba9a:	f7fc fa9b 	bl	8007fd4 <LSM6DSV16X_ReadID>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800baa4:	f06f 0306 	mvn.w	r3, #6
 800baa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baaa:	e06c      	b.n	800bb86 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800baac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bab0:	2b70      	cmp	r3, #112	@ 0x70
 800bab2:	d003      	beq.n	800babc <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bab4:	f06f 0306 	mvn.w	r3, #6
 800bab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baba:	e064      	b.n	800bb86 <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800babc:	f107 030c 	add.w	r3, r7, #12
 800bac0:	4619      	mov	r1, r3
 800bac2:	4839      	ldr	r0, [pc, #228]	@ (800bba8 <LSM6DSV16X_0_Probe+0x174>)
 800bac4:	f7fc fa9c 	bl	8008000 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bac8:	7b7b      	ldrb	r3, [r7, #13]
 800baca:	461a      	mov	r2, r3
 800bacc:	7b3b      	ldrb	r3, [r7, #12]
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	431a      	orrs	r2, r3
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4313      	orrs	r3, r2
 800bad8:	4a34      	ldr	r2, [pc, #208]	@ (800bbac <LSM6DSV16X_0_Probe+0x178>)
 800bada:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800badc:	4b34      	ldr	r3, [pc, #208]	@ (800bbb0 <LSM6DSV16X_0_Probe+0x17c>)
 800bade:	4a32      	ldr	r2, [pc, #200]	@ (800bba8 <LSM6DSV16X_0_Probe+0x174>)
 800bae0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800bae2:	4b34      	ldr	r3, [pc, #208]	@ (800bbb4 <LSM6DSV16X_0_Probe+0x180>)
 800bae4:	4a34      	ldr	r2, [pc, #208]	@ (800bbb8 <LSM6DSV16X_0_Probe+0x184>)
 800bae6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baea:	2b00      	cmp	r3, #0
 800baec:	d11e      	bne.n	800bb2c <LSM6DSV16X_0_Probe+0xf8>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d019      	beq.n	800bb2c <LSM6DSV16X_0_Probe+0xf8>
 800baf8:	7b7b      	ldrb	r3, [r7, #13]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d116      	bne.n	800bb2c <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bafe:	4b2f      	ldr	r3, [pc, #188]	@ (800bbbc <LSM6DSV16X_0_Probe+0x188>)
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	4a2f      	ldr	r2, [pc, #188]	@ (800bbc0 <LSM6DSV16X_0_Probe+0x18c>)
 800bb04:	3303      	adds	r3, #3
 800bb06:	492f      	ldr	r1, [pc, #188]	@ (800bbc4 <LSM6DSV16X_0_Probe+0x190>)
 800bb08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bb0c:	4b29      	ldr	r3, [pc, #164]	@ (800bbb4 <LSM6DSV16X_0_Probe+0x180>)
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a27      	ldr	r2, [pc, #156]	@ (800bbb0 <LSM6DSV16X_0_Probe+0x17c>)
 800bb14:	6852      	ldr	r2, [r2, #4]
 800bb16:	4610      	mov	r0, r2
 800bb18:	4798      	blx	r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb20:	f06f 0304 	mvn.w	r3, #4
 800bb24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb26:	e001      	b.n	800bb2c <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bb2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d11e      	bne.n	800bb70 <LSM6DSV16X_0_Probe+0x13c>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f003 0302 	and.w	r3, r3, #2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d019      	beq.n	800bb70 <LSM6DSV16X_0_Probe+0x13c>
 800bb3c:	7b3b      	ldrb	r3, [r7, #12]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d116      	bne.n	800bb70 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bb42:	4b1e      	ldr	r3, [pc, #120]	@ (800bbbc <LSM6DSV16X_0_Probe+0x188>)
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	4a1e      	ldr	r2, [pc, #120]	@ (800bbc0 <LSM6DSV16X_0_Probe+0x18c>)
 800bb48:	3303      	adds	r3, #3
 800bb4a:	491f      	ldr	r1, [pc, #124]	@ (800bbc8 <LSM6DSV16X_0_Probe+0x194>)
 800bb4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bb50:	4b18      	ldr	r3, [pc, #96]	@ (800bbb4 <LSM6DSV16X_0_Probe+0x180>)
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a16      	ldr	r2, [pc, #88]	@ (800bbb0 <LSM6DSV16X_0_Probe+0x17c>)
 800bb58:	6852      	ldr	r2, [r2, #4]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4798      	blx	r3
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb64:	f06f 0304 	mvn.w	r3, #4
 800bb68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb6a:	e001      	b.n	800bb70 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bb70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <LSM6DSV16X_0_Probe+0x152>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb80:	f06f 0304 	mvn.w	r3, #4
 800bb84:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bb86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3750      	adds	r7, #80	@ 0x50
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	080023e1 	.word	0x080023e1
 800bb94:	08002445 	.word	0x08002445
 800bb98:	080024f9 	.word	0x080024f9
 800bb9c:	08002495 	.word	0x08002495
 800bba0:	08002605 	.word	0x08002605
 800bba4:	0800c331 	.word	0x0800c331
 800bba8:	20000ac4 	.word	0x20000ac4
 800bbac:	20000a80 	.word	0x20000a80
 800bbb0:	20000a30 	.word	0x20000a30
 800bbb4:	20000a70 	.word	0x20000a70
 800bbb8:	200000fc 	.word	0x200000fc
 800bbbc:	200001f0 	.word	0x200001f0
 800bbc0:	20000a40 	.word	0x20000a40
 800bbc4:	20000130 	.word	0x20000130
 800bbc8:	2000010c 	.word	0x2000010c

0800bbcc <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b094      	sub	sp, #80	@ 0x50
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800bbd8:	2300      	movs	r3, #0
 800bbda:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800bbdc:	2333      	movs	r3, #51	@ 0x33
 800bbde:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bbe2:	4b47      	ldr	r3, [pc, #284]	@ (800bd00 <LIS2DUXS12_0_Probe+0x134>)
 800bbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bbe6:	4b47      	ldr	r3, [pc, #284]	@ (800bd04 <LIS2DUXS12_0_Probe+0x138>)
 800bbe8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bbea:	4b47      	ldr	r3, [pc, #284]	@ (800bd08 <LIS2DUXS12_0_Probe+0x13c>)
 800bbec:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bbee:	4b47      	ldr	r3, [pc, #284]	@ (800bd0c <LIS2DUXS12_0_Probe+0x140>)
 800bbf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bbf2:	4b47      	ldr	r3, [pc, #284]	@ (800bd10 <LIS2DUXS12_0_Probe+0x144>)
 800bbf4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bbf6:	4b47      	ldr	r3, [pc, #284]	@ (800bd14 <LIS2DUXS12_0_Probe+0x148>)
 800bbf8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800bbfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4845      	ldr	r0, [pc, #276]	@ (800bd18 <LIS2DUXS12_0_Probe+0x14c>)
 800bc02:	f7f6 fe65 	bl	80028d0 <LIS2DUXS12_RegisterBusIO>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc0c:	f06f 0306 	mvn.w	r3, #6
 800bc10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc12:	e070      	b.n	800bcf6 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800bc14:	2100      	movs	r1, #0
 800bc16:	4840      	ldr	r0, [pc, #256]	@ (800bd18 <LIS2DUXS12_0_Probe+0x14c>)
 800bc18:	f7f7 fad2 	bl	80031c0 <LIS2DUXS12_Set_Mem_Bank>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc22:	f06f 0306 	mvn.w	r3, #6
 800bc26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc28:	e065      	b.n	800bcf6 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800bc2a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bc2e:	4619      	mov	r1, r3
 800bc30:	4839      	ldr	r0, [pc, #228]	@ (800bd18 <LIS2DUXS12_0_Probe+0x14c>)
 800bc32:	f7f6 ffac 	bl	8002b8e <LIS2DUXS12_ReadID>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc3c:	f06f 0306 	mvn.w	r3, #6
 800bc40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc42:	e058      	b.n	800bcf6 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800bc44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc48:	2b47      	cmp	r3, #71	@ 0x47
 800bc4a:	d003      	beq.n	800bc54 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc4c:	f06f 0306 	mvn.w	r3, #6
 800bc50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc52:	e050      	b.n	800bcf6 <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	4619      	mov	r1, r3
 800bc5a:	482f      	ldr	r0, [pc, #188]	@ (800bd18 <LIS2DUXS12_0_Probe+0x14c>)
 800bc5c:	f7f6 ffb2 	bl	8002bc4 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bc60:	7b7b      	ldrb	r3, [r7, #13]
 800bc62:	461a      	mov	r2, r3
 800bc64:	7b3b      	ldrb	r3, [r7, #12]
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	431a      	orrs	r2, r3
 800bc6a:	7bbb      	ldrb	r3, [r7, #14]
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	4a2a      	ldr	r2, [pc, #168]	@ (800bd1c <LIS2DUXS12_0_Probe+0x150>)
 800bc72:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800bc74:	4b2a      	ldr	r3, [pc, #168]	@ (800bd20 <LIS2DUXS12_0_Probe+0x154>)
 800bc76:	4a28      	ldr	r2, [pc, #160]	@ (800bd18 <LIS2DUXS12_0_Probe+0x14c>)
 800bc78:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800bc7a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd24 <LIS2DUXS12_0_Probe+0x158>)
 800bc7c:	4a2a      	ldr	r2, [pc, #168]	@ (800bd28 <LIS2DUXS12_0_Probe+0x15c>)
 800bc7e:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bc80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <LIS2DUXS12_0_Probe+0xd0>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <LIS2DUXS12_0_Probe+0xd0>
 800bc90:	7b7b      	ldrb	r3, [r7, #13]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d102      	bne.n	800bc9c <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc96:	f06f 0304 	mvn.w	r3, #4
 800bc9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d11e      	bne.n	800bce0 <LIS2DUXS12_0_Probe+0x114>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d019      	beq.n	800bce0 <LIS2DUXS12_0_Probe+0x114>
 800bcac:	7b3b      	ldrb	r3, [r7, #12]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d116      	bne.n	800bce0 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bcb2:	4b1e      	ldr	r3, [pc, #120]	@ (800bd2c <LIS2DUXS12_0_Probe+0x160>)
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	4a1e      	ldr	r2, [pc, #120]	@ (800bd30 <LIS2DUXS12_0_Probe+0x164>)
 800bcb8:	3306      	adds	r3, #6
 800bcba:	491e      	ldr	r1, [pc, #120]	@ (800bd34 <LIS2DUXS12_0_Probe+0x168>)
 800bcbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800bcc0:	4b18      	ldr	r3, [pc, #96]	@ (800bd24 <LIS2DUXS12_0_Probe+0x158>)
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a16      	ldr	r2, [pc, #88]	@ (800bd20 <LIS2DUXS12_0_Probe+0x154>)
 800bcc8:	6892      	ldr	r2, [r2, #8]
 800bcca:	4610      	mov	r0, r2
 800bccc:	4798      	blx	r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcd4:	f06f 0304 	mvn.w	r3, #4
 800bcd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcda:	e001      	b.n	800bce0 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <LIS2DUXS12_0_Probe+0x12a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcf0:	f06f 0304 	mvn.w	r3, #4
 800bcf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3750      	adds	r7, #80	@ 0x50
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	080023e1 	.word	0x080023e1
 800bd04:	08002445 	.word	0x08002445
 800bd08:	080024f9 	.word	0x080024f9
 800bd0c:	08002495 	.word	0x08002495
 800bd10:	08002605 	.word	0x08002605
 800bd14:	0800c331 	.word	0x0800c331
 800bd18:	20000afc 	.word	0x20000afc
 800bd1c:	20000a80 	.word	0x20000a80
 800bd20:	20000a30 	.word	0x20000a30
 800bd24:	20000a70 	.word	0x20000a70
 800bd28:	20000004 	.word	0x20000004
 800bd2c:	200001f0 	.word	0x200001f0
 800bd30:	20000a40 	.word	0x20000a40
 800bd34:	20000014 	.word	0x20000014

0800bd38 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b094      	sub	sp, #80	@ 0x50
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800bd40:	2300      	movs	r3, #0
 800bd42:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800bd44:	2300      	movs	r3, #0
 800bd46:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800bd48:	23d5      	movs	r3, #213	@ 0xd5
 800bd4a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bd4e:	4b51      	ldr	r3, [pc, #324]	@ (800be94 <LSM6DSO16IS_0_Probe+0x15c>)
 800bd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bd52:	4b51      	ldr	r3, [pc, #324]	@ (800be98 <LSM6DSO16IS_0_Probe+0x160>)
 800bd54:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bd56:	4b51      	ldr	r3, [pc, #324]	@ (800be9c <LSM6DSO16IS_0_Probe+0x164>)
 800bd58:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bd5a:	4b51      	ldr	r3, [pc, #324]	@ (800bea0 <LSM6DSO16IS_0_Probe+0x168>)
 800bd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bd5e:	4b51      	ldr	r3, [pc, #324]	@ (800bea4 <LSM6DSO16IS_0_Probe+0x16c>)
 800bd60:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bd62:	4b51      	ldr	r3, [pc, #324]	@ (800bea8 <LSM6DSO16IS_0_Probe+0x170>)
 800bd64:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800bd66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	484f      	ldr	r0, [pc, #316]	@ (800beac <LSM6DSO16IS_0_Probe+0x174>)
 800bd6e:	f7fa facd 	bl	800630c <LSM6DSO16IS_RegisterBusIO>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd78:	f06f 0306 	mvn.w	r3, #6
 800bd7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd7e:	e084      	b.n	800be8a <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800bd80:	2100      	movs	r1, #0
 800bd82:	484a      	ldr	r0, [pc, #296]	@ (800beac <LSM6DSO16IS_0_Probe+0x174>)
 800bd84:	f7fb f8f3 	bl	8006f6e <LSM6DSO16IS_Set_Mem_Bank>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd8e:	f06f 0306 	mvn.w	r3, #6
 800bd92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd94:	e079      	b.n	800be8a <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800bd96:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4843      	ldr	r0, [pc, #268]	@ (800beac <LSM6DSO16IS_0_Probe+0x174>)
 800bd9e:	f7fa fbb3 	bl	8006508 <LSM6DSO16IS_ReadID>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bda8:	f06f 0306 	mvn.w	r3, #6
 800bdac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdae:	e06c      	b.n	800be8a <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800bdb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdb4:	2b22      	cmp	r3, #34	@ 0x22
 800bdb6:	d003      	beq.n	800bdc0 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bdb8:	f06f 0306 	mvn.w	r3, #6
 800bdbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdbe:	e064      	b.n	800be8a <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800bdc0:	f107 030c 	add.w	r3, r7, #12
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4839      	ldr	r0, [pc, #228]	@ (800beac <LSM6DSO16IS_0_Probe+0x174>)
 800bdc8:	f7fa fbb6 	bl	8006538 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bdcc:	7b7b      	ldrb	r3, [r7, #13]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	7b3b      	ldrb	r3, [r7, #12]
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4313      	orrs	r3, r2
 800bddc:	4a34      	ldr	r2, [pc, #208]	@ (800beb0 <LSM6DSO16IS_0_Probe+0x178>)
 800bdde:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800bde0:	4b34      	ldr	r3, [pc, #208]	@ (800beb4 <LSM6DSO16IS_0_Probe+0x17c>)
 800bde2:	4a32      	ldr	r2, [pc, #200]	@ (800beac <LSM6DSO16IS_0_Probe+0x174>)
 800bde4:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800bde6:	4b34      	ldr	r3, [pc, #208]	@ (800beb8 <LSM6DSO16IS_0_Probe+0x180>)
 800bde8:	4a34      	ldr	r2, [pc, #208]	@ (800bebc <LSM6DSO16IS_0_Probe+0x184>)
 800bdea:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bdec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d11e      	bne.n	800be30 <LSM6DSO16IS_0_Probe+0xf8>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f003 0301 	and.w	r3, r3, #1
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d019      	beq.n	800be30 <LSM6DSO16IS_0_Probe+0xf8>
 800bdfc:	7b7b      	ldrb	r3, [r7, #13]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d116      	bne.n	800be30 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be02:	4b2f      	ldr	r3, [pc, #188]	@ (800bec0 <LSM6DSO16IS_0_Probe+0x188>)
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	4a2f      	ldr	r2, [pc, #188]	@ (800bec4 <LSM6DSO16IS_0_Probe+0x18c>)
 800be08:	3309      	adds	r3, #9
 800be0a:	492f      	ldr	r1, [pc, #188]	@ (800bec8 <LSM6DSO16IS_0_Probe+0x190>)
 800be0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800be10:	4b29      	ldr	r3, [pc, #164]	@ (800beb8 <LSM6DSO16IS_0_Probe+0x180>)
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a27      	ldr	r2, [pc, #156]	@ (800beb4 <LSM6DSO16IS_0_Probe+0x17c>)
 800be18:	68d2      	ldr	r2, [r2, #12]
 800be1a:	4610      	mov	r0, r2
 800be1c:	4798      	blx	r3
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d003      	beq.n	800be2c <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be24:	f06f 0304 	mvn.w	r3, #4
 800be28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2a:	e001      	b.n	800be30 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be2c:	2300      	movs	r3, #0
 800be2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800be30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be32:	2b00      	cmp	r3, #0
 800be34:	d11e      	bne.n	800be74 <LSM6DSO16IS_0_Probe+0x13c>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d019      	beq.n	800be74 <LSM6DSO16IS_0_Probe+0x13c>
 800be40:	7b3b      	ldrb	r3, [r7, #12]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d116      	bne.n	800be74 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be46:	4b1e      	ldr	r3, [pc, #120]	@ (800bec0 <LSM6DSO16IS_0_Probe+0x188>)
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	4a1e      	ldr	r2, [pc, #120]	@ (800bec4 <LSM6DSO16IS_0_Probe+0x18c>)
 800be4c:	3309      	adds	r3, #9
 800be4e:	491f      	ldr	r1, [pc, #124]	@ (800becc <LSM6DSO16IS_0_Probe+0x194>)
 800be50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800be54:	4b18      	ldr	r3, [pc, #96]	@ (800beb8 <LSM6DSO16IS_0_Probe+0x180>)
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a16      	ldr	r2, [pc, #88]	@ (800beb4 <LSM6DSO16IS_0_Probe+0x17c>)
 800be5c:	68d2      	ldr	r2, [r2, #12]
 800be5e:	4610      	mov	r0, r2
 800be60:	4798      	blx	r3
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be68:	f06f 0304 	mvn.w	r3, #4
 800be6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be6e:	e001      	b.n	800be74 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be70:	2300      	movs	r3, #0
 800be72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800be74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d107      	bne.n	800be8a <LSM6DSO16IS_0_Probe+0x152>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800be84:	f06f 0304 	mvn.w	r3, #4
 800be88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800be8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3750      	adds	r7, #80	@ 0x50
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	080023e1 	.word	0x080023e1
 800be98:	08002445 	.word	0x08002445
 800be9c:	080024f9 	.word	0x080024f9
 800bea0:	08002495 	.word	0x08002495
 800bea4:	08002605 	.word	0x08002605
 800bea8:	0800c331 	.word	0x0800c331
 800beac:	20000b38 	.word	0x20000b38
 800beb0:	20000a80 	.word	0x20000a80
 800beb4:	20000a30 	.word	0x20000a30
 800beb8:	20000a70 	.word	0x20000a70
 800bebc:	200000a4 	.word	0x200000a4
 800bec0:	200001f0 	.word	0x200001f0
 800bec4:	20000a40 	.word	0x20000a40
 800bec8:	200000d8 	.word	0x200000d8
 800becc:	200000b4 	.word	0x200000b4

0800bed0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	4a04      	ldr	r2, [pc, #16]	@ (800bef0 <BSP_LED_Init+0x20>)
 800bede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	080177bc 	.word	0x080177bc

0800bef4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800befa:	2300      	movs	r3, #0
 800befc:	60bb      	str	r3, [r7, #8]
 800befe:	4b1c      	ldr	r3, [pc, #112]	@ (800bf70 <LED_USER_GPIO_Init+0x7c>)
 800bf00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf02:	4a1b      	ldr	r2, [pc, #108]	@ (800bf70 <LED_USER_GPIO_Init+0x7c>)
 800bf04:	f043 0302 	orr.w	r3, r3, #2
 800bf08:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf0a:	4b19      	ldr	r3, [pc, #100]	@ (800bf70 <LED_USER_GPIO_Init+0x7c>)
 800bf0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	60bb      	str	r3, [r7, #8]
 800bf14:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf16:	f107 030c 	add.w	r3, r7, #12
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	605a      	str	r2, [r3, #4]
 800bf20:	609a      	str	r2, [r3, #8]
 800bf22:	60da      	str	r2, [r3, #12]
 800bf24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf26:	2300      	movs	r3, #0
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	4b11      	ldr	r3, [pc, #68]	@ (800bf70 <LED_USER_GPIO_Init+0x7c>)
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf2e:	4a10      	ldr	r2, [pc, #64]	@ (800bf70 <LED_USER_GPIO_Init+0x7c>)
 800bf30:	f043 0302 	orr.w	r3, r3, #2
 800bf34:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf36:	4b0e      	ldr	r3, [pc, #56]	@ (800bf70 <LED_USER_GPIO_Init+0x7c>)
 800bf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3a:	f003 0302 	and.w	r3, r3, #2
 800bf3e:	607b      	str	r3, [r7, #4]
 800bf40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800bf42:	2200      	movs	r2, #0
 800bf44:	2101      	movs	r1, #1
 800bf46:	480b      	ldr	r0, [pc, #44]	@ (800bf74 <LED_USER_GPIO_Init+0x80>)
 800bf48:	f000 fdd6 	bl	800caf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf50:	2301      	movs	r3, #1
 800bf52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800bf5c:	f107 030c 	add.w	r3, r7, #12
 800bf60:	4619      	mov	r1, r3
 800bf62:	4804      	ldr	r0, [pc, #16]	@ (800bf74 <LED_USER_GPIO_Init+0x80>)
 800bf64:	f000 fb48 	bl	800c5f8 <HAL_GPIO_Init>

}
 800bf68:	bf00      	nop
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	40023800 	.word	0x40023800
 800bf74:	40020400 	.word	0x40020400

0800bf78 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	460a      	mov	r2, r1
 800bf82:	71fb      	strb	r3, [r7, #7]
 800bf84:	4613      	mov	r3, r2
 800bf86:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800bf8c:	79fb      	ldrb	r3, [r7, #7]
 800bf8e:	4a1f      	ldr	r2, [pc, #124]	@ (800c00c <BSP_PB_Init+0x94>)
 800bf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf94:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800bf96:	79bb      	ldrb	r3, [r7, #6]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d132      	bne.n	800c002 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800bf9c:	79fb      	ldrb	r3, [r7, #7]
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	4a1b      	ldr	r2, [pc, #108]	@ (800c010 <BSP_PB_Init+0x98>)
 800bfa2:	441a      	add	r2, r3
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	491b      	ldr	r1, [pc, #108]	@ (800c014 <BSP_PB_Init+0x9c>)
 800bfa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f000 fb0d 	bl	800c5ce <HAL_EXTI_GetHandle>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bfba:	f06f 0303 	mvn.w	r3, #3
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	e01f      	b.n	800c002 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	4a12      	ldr	r2, [pc, #72]	@ (800c010 <BSP_PB_Init+0x98>)
 800bfc8:	1898      	adds	r0, r3, r2
 800bfca:	79fb      	ldrb	r3, [r7, #7]
 800bfcc:	4a12      	ldr	r2, [pc, #72]	@ (800c018 <BSP_PB_Init+0xa0>)
 800bfce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	f000 fae0 	bl	800c59a <HAL_EXTI_RegisterCallback>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bfe0:	f06f 0303 	mvn.w	r3, #3
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e00c      	b.n	800c002 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800bfe8:	2028      	movs	r0, #40	@ 0x28
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	4a0b      	ldr	r2, [pc, #44]	@ (800c01c <BSP_PB_Init+0xa4>)
 800bfee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff2:	2200      	movs	r2, #0
 800bff4:	4619      	mov	r1, r3
 800bff6:	f000 fa9a 	bl	800c52e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800bffa:	2328      	movs	r3, #40	@ 0x28
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fab2 	bl	800c566 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800c002:	68fb      	ldr	r3, [r7, #12]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	080177c0 	.word	0x080177c0
 800c010:	20000214 	.word	0x20000214
 800c014:	080177c4 	.word	0x080177c4
 800c018:	080177c8 	.word	0x080177c8
 800c01c:	080177cc 	.word	0x080177cc

0800c020 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	4a09      	ldr	r2, [pc, #36]	@ (800c054 <BSP_PB_GetState+0x34>)
 800c02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c032:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c036:	4611      	mov	r1, r2
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fd45 	bl	800cac8 <HAL_GPIO_ReadPin>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	bf0c      	ite	eq
 800c044:	2301      	moveq	r3, #1
 800c046:	2300      	movne	r3, #0
 800c048:	b2db      	uxtb	r3, r3
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20000210 	.word	0x20000210

0800c058 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c05c:	2000      	movs	r0, #0
 800c05e:	f004 fc5f 	bl	8010920 <BSP_PB_Callback>
}
 800c062:	bf00      	nop
 800c064:	bd80      	pop	{r7, pc}
	...

0800c068 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c06e:	2300      	movs	r3, #0
 800c070:	60bb      	str	r3, [r7, #8]
 800c072:	4b1a      	ldr	r3, [pc, #104]	@ (800c0dc <BUTTON_USER_GPIO_Init+0x74>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c076:	4a19      	ldr	r2, [pc, #100]	@ (800c0dc <BUTTON_USER_GPIO_Init+0x74>)
 800c078:	f043 0304 	orr.w	r3, r3, #4
 800c07c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c07e:	4b17      	ldr	r3, [pc, #92]	@ (800c0dc <BUTTON_USER_GPIO_Init+0x74>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c082:	f003 0304 	and.w	r3, r3, #4
 800c086:	60bb      	str	r3, [r7, #8]
 800c088:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c08a:	f107 030c 	add.w	r3, r7, #12
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	605a      	str	r2, [r3, #4]
 800c094:	609a      	str	r2, [r3, #8]
 800c096:	60da      	str	r2, [r3, #12]
 800c098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c09a:	2300      	movs	r3, #0
 800c09c:	607b      	str	r3, [r7, #4]
 800c09e:	4b0f      	ldr	r3, [pc, #60]	@ (800c0dc <BUTTON_USER_GPIO_Init+0x74>)
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a2:	4a0e      	ldr	r2, [pc, #56]	@ (800c0dc <BUTTON_USER_GPIO_Init+0x74>)
 800c0a4:	f043 0304 	orr.w	r3, r3, #4
 800c0a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c0dc <BUTTON_USER_GPIO_Init+0x74>)
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ae:	f003 0304 	and.w	r3, r3, #4
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c0b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c0bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c0c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c0c6:	f107 030c 	add.w	r3, r7, #12
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4804      	ldr	r0, [pc, #16]	@ (800c0e0 <BUTTON_USER_GPIO_Init+0x78>)
 800c0ce:	f000 fa93 	bl	800c5f8 <HAL_GPIO_Init>

}
 800c0d2:	bf00      	nop
 800c0d4:	3720      	adds	r7, #32
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	40023800 	.word	0x40023800
 800c0e0:	40020800 	.word	0x40020800

0800c0e4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d903      	bls.n	800c100 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c0f8:	f06f 0301 	mvn.w	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
 800c0fe:	e025      	b.n	800c14c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	79fa      	ldrb	r2, [r7, #7]
 800c104:	4914      	ldr	r1, [pc, #80]	@ (800c158 <BSP_COM_Init+0x74>)
 800c106:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c10a:	4814      	ldr	r0, [pc, #80]	@ (800c15c <BSP_COM_Init+0x78>)
 800c10c:	4613      	mov	r3, r2
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	4413      	add	r3, r2
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	4403      	add	r3, r0
 800c116:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	4613      	mov	r3, r2
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	4413      	add	r3, r2
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	4a0e      	ldr	r2, [pc, #56]	@ (800c15c <BSP_COM_Init+0x78>)
 800c124:	4413      	add	r3, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f848 	bl	800c1bc <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c12c:	79fa      	ldrb	r2, [r7, #7]
 800c12e:	4613      	mov	r3, r2
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	4413      	add	r3, r2
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	4a09      	ldr	r2, [pc, #36]	@ (800c15c <BSP_COM_Init+0x78>)
 800c138:	4413      	add	r3, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 f810 	bl	800c160 <MX_USART2_UART_Init>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c146:	f06f 0303 	mvn.w	r3, #3
 800c14a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c14c:	68fb      	ldr	r3, [r7, #12]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	2000021c 	.word	0x2000021c
 800c15c:	20000b70 	.word	0x20000b70

0800c160 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a12      	ldr	r2, [pc, #72]	@ (800c1b8 <MX_USART2_UART_Init+0x58>)
 800c170:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c178:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	220c      	movs	r2, #12
 800c190:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f003 fee4 	bl	800ff6c <HAL_UART_Init>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	40004400 	.word	0x40004400

0800c1bc <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08a      	sub	sp, #40	@ 0x28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	613b      	str	r3, [r7, #16]
 800c1c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c244 <USART2_MspInit+0x88>)
 800c1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c244 <USART2_MspInit+0x88>)
 800c1ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1d2:	6413      	str	r3, [r2, #64]	@ 0x40
 800c1d4:	4b1b      	ldr	r3, [pc, #108]	@ (800c244 <USART2_MspInit+0x88>)
 800c1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1dc:	613b      	str	r3, [r7, #16]
 800c1de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	4b17      	ldr	r3, [pc, #92]	@ (800c244 <USART2_MspInit+0x88>)
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e8:	4a16      	ldr	r2, [pc, #88]	@ (800c244 <USART2_MspInit+0x88>)
 800c1ea:	f043 0301 	orr.w	r3, r3, #1
 800c1ee:	6313      	str	r3, [r2, #48]	@ 0x30
 800c1f0:	4b14      	ldr	r3, [pc, #80]	@ (800c244 <USART2_MspInit+0x88>)
 800c1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c200:	2302      	movs	r3, #2
 800c202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c204:	2300      	movs	r3, #0
 800c206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c208:	2300      	movs	r3, #0
 800c20a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c20c:	2307      	movs	r3, #7
 800c20e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c210:	f107 0314 	add.w	r3, r7, #20
 800c214:	4619      	mov	r1, r3
 800c216:	480c      	ldr	r0, [pc, #48]	@ (800c248 <USART2_MspInit+0x8c>)
 800c218:	f000 f9ee 	bl	800c5f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c21c:	2308      	movs	r3, #8
 800c21e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c220:	2302      	movs	r3, #2
 800c222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c224:	2300      	movs	r3, #0
 800c226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c228:	2300      	movs	r3, #0
 800c22a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c22c:	2307      	movs	r3, #7
 800c22e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c230:	f107 0314 	add.w	r3, r7, #20
 800c234:	4619      	mov	r1, r3
 800c236:	4804      	ldr	r0, [pc, #16]	@ (800c248 <USART2_MspInit+0x8c>)
 800c238:	f000 f9de 	bl	800c5f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c23c:	bf00      	nop
 800c23e:	3728      	adds	r7, #40	@ 0x28
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	40023800 	.word	0x40023800
 800c248:	40020000 	.word	0x40020000

0800c24c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c250:	4b0e      	ldr	r3, [pc, #56]	@ (800c28c <HAL_Init+0x40>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a0d      	ldr	r2, [pc, #52]	@ (800c28c <HAL_Init+0x40>)
 800c256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c25a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c25c:	4b0b      	ldr	r3, [pc, #44]	@ (800c28c <HAL_Init+0x40>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a0a      	ldr	r2, [pc, #40]	@ (800c28c <HAL_Init+0x40>)
 800c262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c268:	4b08      	ldr	r3, [pc, #32]	@ (800c28c <HAL_Init+0x40>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a07      	ldr	r2, [pc, #28]	@ (800c28c <HAL_Init+0x40>)
 800c26e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c274:	2003      	movs	r0, #3
 800c276:	f000 f94f 	bl	800c518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c27a:	2000      	movs	r0, #0
 800c27c:	f000 f808 	bl	800c290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c280:	f7f5 ffca 	bl	8002218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	40023c00 	.word	0x40023c00

0800c290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c298:	4b12      	ldr	r3, [pc, #72]	@ (800c2e4 <HAL_InitTick+0x54>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	4b12      	ldr	r3, [pc, #72]	@ (800c2e8 <HAL_InitTick+0x58>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f967 	bl	800c582 <HAL_SYSTICK_Config>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e00e      	b.n	800c2dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b0f      	cmp	r3, #15
 800c2c2:	d80a      	bhi.n	800c2da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	f000 f92f 	bl	800c52e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c2d0:	4a06      	ldr	r2, [pc, #24]	@ (800c2ec <HAL_InitTick+0x5c>)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e000      	b.n	800c2dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20000000 	.word	0x20000000
 800c2e8:	20000224 	.word	0x20000224
 800c2ec:	20000220 	.word	0x20000220

0800c2f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c2f4:	4b06      	ldr	r3, [pc, #24]	@ (800c310 <HAL_IncTick+0x20>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4b06      	ldr	r3, [pc, #24]	@ (800c314 <HAL_IncTick+0x24>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4413      	add	r3, r2
 800c300:	4a04      	ldr	r2, [pc, #16]	@ (800c314 <HAL_IncTick+0x24>)
 800c302:	6013      	str	r3, [r2, #0]
}
 800c304:	bf00      	nop
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	20000224 	.word	0x20000224
 800c314:	20000bb8 	.word	0x20000bb8

0800c318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
  return uwTick;
 800c31c:	4b03      	ldr	r3, [pc, #12]	@ (800c32c <HAL_GetTick+0x14>)
 800c31e:	681b      	ldr	r3, [r3, #0]
}
 800c320:	4618      	mov	r0, r3
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	20000bb8 	.word	0x20000bb8

0800c330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c338:	f7ff ffee 	bl	800c318 <HAL_GetTick>
 800c33c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c348:	d005      	beq.n	800c356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c34a:	4b0a      	ldr	r3, [pc, #40]	@ (800c374 <HAL_Delay+0x44>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c356:	bf00      	nop
 800c358:	f7ff ffde 	bl	800c318 <HAL_GetTick>
 800c35c:	4602      	mov	r2, r0
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	429a      	cmp	r2, r3
 800c366:	d8f7      	bhi.n	800c358 <HAL_Delay+0x28>
  {
  }
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000224 	.word	0x20000224

0800c378 <__NVIC_SetPriorityGrouping>:
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c388:	4b0c      	ldr	r3, [pc, #48]	@ (800c3bc <__NVIC_SetPriorityGrouping+0x44>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c394:	4013      	ands	r3, r2
 800c396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c3a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c3a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c3aa:	4a04      	ldr	r2, [pc, #16]	@ (800c3bc <__NVIC_SetPriorityGrouping+0x44>)
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	60d3      	str	r3, [r2, #12]
}
 800c3b0:	bf00      	nop
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	e000ed00 	.word	0xe000ed00

0800c3c0 <__NVIC_GetPriorityGrouping>:
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c3c4:	4b04      	ldr	r3, [pc, #16]	@ (800c3d8 <__NVIC_GetPriorityGrouping+0x18>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	0a1b      	lsrs	r3, r3, #8
 800c3ca:	f003 0307 	and.w	r3, r3, #7
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	e000ed00 	.word	0xe000ed00

0800c3dc <__NVIC_EnableIRQ>:
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	db0b      	blt.n	800c406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	f003 021f 	and.w	r2, r3, #31
 800c3f4:	4907      	ldr	r1, [pc, #28]	@ (800c414 <__NVIC_EnableIRQ+0x38>)
 800c3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3fa:	095b      	lsrs	r3, r3, #5
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	fa00 f202 	lsl.w	r2, r0, r2
 800c402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	e000e100 	.word	0xe000e100

0800c418 <__NVIC_SetPriority>:
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	6039      	str	r1, [r7, #0]
 800c422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	db0a      	blt.n	800c442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	490c      	ldr	r1, [pc, #48]	@ (800c464 <__NVIC_SetPriority+0x4c>)
 800c432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c436:	0112      	lsls	r2, r2, #4
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	440b      	add	r3, r1
 800c43c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c440:	e00a      	b.n	800c458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	b2da      	uxtb	r2, r3
 800c446:	4908      	ldr	r1, [pc, #32]	@ (800c468 <__NVIC_SetPriority+0x50>)
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	f003 030f 	and.w	r3, r3, #15
 800c44e:	3b04      	subs	r3, #4
 800c450:	0112      	lsls	r2, r2, #4
 800c452:	b2d2      	uxtb	r2, r2
 800c454:	440b      	add	r3, r1
 800c456:	761a      	strb	r2, [r3, #24]
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	e000e100 	.word	0xe000e100
 800c468:	e000ed00 	.word	0xe000ed00

0800c46c <NVIC_EncodePriority>:
{
 800c46c:	b480      	push	{r7}
 800c46e:	b089      	sub	sp, #36	@ 0x24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	f1c3 0307 	rsb	r3, r3, #7
 800c486:	2b04      	cmp	r3, #4
 800c488:	bf28      	it	cs
 800c48a:	2304      	movcs	r3, #4
 800c48c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	3304      	adds	r3, #4
 800c492:	2b06      	cmp	r3, #6
 800c494:	d902      	bls.n	800c49c <NVIC_EncodePriority+0x30>
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	3b03      	subs	r3, #3
 800c49a:	e000      	b.n	800c49e <NVIC_EncodePriority+0x32>
 800c49c:	2300      	movs	r3, #0
 800c49e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4aa:	43da      	mvns	r2, r3
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	401a      	ands	r2, r3
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4b4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c4be:	43d9      	mvns	r1, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4c4:	4313      	orrs	r3, r2
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3724      	adds	r7, #36	@ 0x24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
	...

0800c4d4 <SysTick_Config>:
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4e4:	d301      	bcc.n	800c4ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e00f      	b.n	800c50a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c4ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c514 <SysTick_Config+0x40>)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c4f2:	210f      	movs	r1, #15
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	f7ff ff8e 	bl	800c418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c4fc:	4b05      	ldr	r3, [pc, #20]	@ (800c514 <SysTick_Config+0x40>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c502:	4b04      	ldr	r3, [pc, #16]	@ (800c514 <SysTick_Config+0x40>)
 800c504:	2207      	movs	r2, #7
 800c506:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	e000e010 	.word	0xe000e010

0800c518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ff29 	bl	800c378 <__NVIC_SetPriorityGrouping>
}
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c52e:	b580      	push	{r7, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af00      	add	r7, sp, #0
 800c534:	4603      	mov	r3, r0
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
 800c53a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c540:	f7ff ff3e 	bl	800c3c0 <__NVIC_GetPriorityGrouping>
 800c544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	68b9      	ldr	r1, [r7, #8]
 800c54a:	6978      	ldr	r0, [r7, #20]
 800c54c:	f7ff ff8e 	bl	800c46c <NVIC_EncodePriority>
 800c550:	4602      	mov	r2, r0
 800c552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff ff5d 	bl	800c418 <__NVIC_SetPriority>
}
 800c55e:	bf00      	nop
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b082      	sub	sp, #8
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	4603      	mov	r3, r0
 800c56e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c574:	4618      	mov	r0, r3
 800c576:	f7ff ff31 	bl	800c3dc <__NVIC_EnableIRQ>
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff ffa2 	bl	800c4d4 <SysTick_Config>
 800c590:	4603      	mov	r3, r0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800c59a:	b480      	push	{r7}
 800c59c:	b087      	sub	sp, #28
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	607a      	str	r2, [r7, #4]
 800c5a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d103      	bne.n	800c5ba <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	605a      	str	r2, [r3, #4]
      break;
 800c5b8:	e002      	b.n	800c5c0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c5be:	bf00      	nop
  }

  return status;
 800c5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b083      	sub	sp, #12
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e003      	b.n	800c5ea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
  }
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b089      	sub	sp, #36	@ 0x24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c60e:	2300      	movs	r3, #0
 800c610:	61fb      	str	r3, [r7, #28]
 800c612:	e159      	b.n	800c8c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c614:	2201      	movs	r2, #1
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	fa02 f303 	lsl.w	r3, r2, r3
 800c61c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	4013      	ands	r3, r2
 800c626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	f040 8148 	bne.w	800c8c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	f003 0303 	and.w	r3, r3, #3
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d005      	beq.n	800c64a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c646:	2b02      	cmp	r3, #2
 800c648:	d130      	bne.n	800c6ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	2203      	movs	r2, #3
 800c656:	fa02 f303 	lsl.w	r3, r2, r3
 800c65a:	43db      	mvns	r3, r3
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	4013      	ands	r3, r2
 800c660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	68da      	ldr	r2, [r3, #12]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	fa02 f303 	lsl.w	r3, r2, r3
 800c66e:	69ba      	ldr	r2, [r7, #24]
 800c670:	4313      	orrs	r3, r2
 800c672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	69ba      	ldr	r2, [r7, #24]
 800c678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c680:	2201      	movs	r2, #1
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	fa02 f303 	lsl.w	r3, r2, r3
 800c688:	43db      	mvns	r3, r3
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	4013      	ands	r3, r2
 800c68e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	091b      	lsrs	r3, r3, #4
 800c696:	f003 0201 	and.w	r2, r3, #1
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	69ba      	ldr	r2, [r7, #24]
 800c6aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	2b03      	cmp	r3, #3
 800c6b6:	d017      	beq.n	800c6e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	005b      	lsls	r3, r3, #1
 800c6c2:	2203      	movs	r2, #3
 800c6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c8:	43db      	mvns	r3, r3
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d123      	bne.n	800c73c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	08da      	lsrs	r2, r3, #3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3208      	adds	r2, #8
 800c6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	f003 0307 	and.w	r3, r3, #7
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	220f      	movs	r2, #15
 800c70c:	fa02 f303 	lsl.w	r3, r2, r3
 800c710:	43db      	mvns	r3, r3
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	4013      	ands	r3, r2
 800c716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	691a      	ldr	r2, [r3, #16]
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f003 0307 	and.w	r3, r3, #7
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	fa02 f303 	lsl.w	r3, r2, r3
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	08da      	lsrs	r2, r3, #3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3208      	adds	r2, #8
 800c736:	69b9      	ldr	r1, [r7, #24]
 800c738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	2203      	movs	r2, #3
 800c748:	fa02 f303 	lsl.w	r3, r2, r3
 800c74c:	43db      	mvns	r3, r3
 800c74e:	69ba      	ldr	r2, [r7, #24]
 800c750:	4013      	ands	r3, r2
 800c752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	f003 0203 	and.w	r2, r3, #3
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	fa02 f303 	lsl.w	r3, r2, r3
 800c764:	69ba      	ldr	r2, [r7, #24]
 800c766:	4313      	orrs	r3, r2
 800c768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 80a2 	beq.w	800c8c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c77e:	2300      	movs	r3, #0
 800c780:	60fb      	str	r3, [r7, #12]
 800c782:	4b57      	ldr	r3, [pc, #348]	@ (800c8e0 <HAL_GPIO_Init+0x2e8>)
 800c784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c786:	4a56      	ldr	r2, [pc, #344]	@ (800c8e0 <HAL_GPIO_Init+0x2e8>)
 800c788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c78c:	6453      	str	r3, [r2, #68]	@ 0x44
 800c78e:	4b54      	ldr	r3, [pc, #336]	@ (800c8e0 <HAL_GPIO_Init+0x2e8>)
 800c790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c79a:	4a52      	ldr	r2, [pc, #328]	@ (800c8e4 <HAL_GPIO_Init+0x2ec>)
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	089b      	lsrs	r3, r3, #2
 800c7a0:	3302      	adds	r3, #2
 800c7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f003 0303 	and.w	r3, r3, #3
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	220f      	movs	r2, #15
 800c7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b6:	43db      	mvns	r3, r3
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a49      	ldr	r2, [pc, #292]	@ (800c8e8 <HAL_GPIO_Init+0x2f0>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d019      	beq.n	800c7fa <HAL_GPIO_Init+0x202>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a48      	ldr	r2, [pc, #288]	@ (800c8ec <HAL_GPIO_Init+0x2f4>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d013      	beq.n	800c7f6 <HAL_GPIO_Init+0x1fe>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a47      	ldr	r2, [pc, #284]	@ (800c8f0 <HAL_GPIO_Init+0x2f8>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d00d      	beq.n	800c7f2 <HAL_GPIO_Init+0x1fa>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a46      	ldr	r2, [pc, #280]	@ (800c8f4 <HAL_GPIO_Init+0x2fc>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d007      	beq.n	800c7ee <HAL_GPIO_Init+0x1f6>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a45      	ldr	r2, [pc, #276]	@ (800c8f8 <HAL_GPIO_Init+0x300>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d101      	bne.n	800c7ea <HAL_GPIO_Init+0x1f2>
 800c7e6:	2304      	movs	r3, #4
 800c7e8:	e008      	b.n	800c7fc <HAL_GPIO_Init+0x204>
 800c7ea:	2307      	movs	r3, #7
 800c7ec:	e006      	b.n	800c7fc <HAL_GPIO_Init+0x204>
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e004      	b.n	800c7fc <HAL_GPIO_Init+0x204>
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	e002      	b.n	800c7fc <HAL_GPIO_Init+0x204>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <HAL_GPIO_Init+0x204>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	69fa      	ldr	r2, [r7, #28]
 800c7fe:	f002 0203 	and.w	r2, r2, #3
 800c802:	0092      	lsls	r2, r2, #2
 800c804:	4093      	lsls	r3, r2
 800c806:	69ba      	ldr	r2, [r7, #24]
 800c808:	4313      	orrs	r3, r2
 800c80a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c80c:	4935      	ldr	r1, [pc, #212]	@ (800c8e4 <HAL_GPIO_Init+0x2ec>)
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	089b      	lsrs	r3, r3, #2
 800c812:	3302      	adds	r3, #2
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c81a:	4b38      	ldr	r3, [pc, #224]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	43db      	mvns	r3, r3
 800c824:	69ba      	ldr	r2, [r7, #24]
 800c826:	4013      	ands	r3, r2
 800c828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c83e:	4a2f      	ldr	r2, [pc, #188]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c844:	4b2d      	ldr	r3, [pc, #180]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	43db      	mvns	r3, r3
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	4013      	ands	r3, r2
 800c852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	4313      	orrs	r3, r2
 800c866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c868:	4a24      	ldr	r2, [pc, #144]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c86e:	4b23      	ldr	r3, [pc, #140]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	43db      	mvns	r3, r3
 800c878:	69ba      	ldr	r2, [r7, #24]
 800c87a:	4013      	ands	r3, r2
 800c87c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c88a:	69ba      	ldr	r2, [r7, #24]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	4313      	orrs	r3, r2
 800c890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c892:	4a1a      	ldr	r2, [pc, #104]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c898:	4b18      	ldr	r3, [pc, #96]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	43db      	mvns	r3, r3
 800c8a2:	69ba      	ldr	r2, [r7, #24]
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d003      	beq.n	800c8bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c8b4:	69ba      	ldr	r2, [r7, #24]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c8bc:	4a0f      	ldr	r2, [pc, #60]	@ (800c8fc <HAL_GPIO_Init+0x304>)
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	61fb      	str	r3, [r7, #28]
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	2b0f      	cmp	r3, #15
 800c8cc:	f67f aea2 	bls.w	800c614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	3724      	adds	r7, #36	@ 0x24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	40023800 	.word	0x40023800
 800c8e4:	40013800 	.word	0x40013800
 800c8e8:	40020000 	.word	0x40020000
 800c8ec:	40020400 	.word	0x40020400
 800c8f0:	40020800 	.word	0x40020800
 800c8f4:	40020c00 	.word	0x40020c00
 800c8f8:	40021000 	.word	0x40021000
 800c8fc:	40013c00 	.word	0x40013c00

0800c900 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c90a:	2300      	movs	r3, #0
 800c90c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c912:	2300      	movs	r3, #0
 800c914:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	e0bb      	b.n	800ca94 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c91c:	2201      	movs	r2, #1
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	fa02 f303 	lsl.w	r3, r2, r3
 800c924:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	4013      	ands	r3, r2
 800c92c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	429a      	cmp	r2, r3
 800c934:	f040 80ab 	bne.w	800ca8e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c938:	4a5c      	ldr	r2, [pc, #368]	@ (800caac <HAL_GPIO_DeInit+0x1ac>)
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	089b      	lsrs	r3, r3, #2
 800c93e:	3302      	adds	r3, #2
 800c940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c944:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f003 0303 	and.w	r3, r3, #3
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	220f      	movs	r2, #15
 800c950:	fa02 f303 	lsl.w	r3, r2, r3
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	4013      	ands	r3, r2
 800c958:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a54      	ldr	r2, [pc, #336]	@ (800cab0 <HAL_GPIO_DeInit+0x1b0>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d019      	beq.n	800c996 <HAL_GPIO_DeInit+0x96>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a53      	ldr	r2, [pc, #332]	@ (800cab4 <HAL_GPIO_DeInit+0x1b4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d013      	beq.n	800c992 <HAL_GPIO_DeInit+0x92>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a52      	ldr	r2, [pc, #328]	@ (800cab8 <HAL_GPIO_DeInit+0x1b8>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d00d      	beq.n	800c98e <HAL_GPIO_DeInit+0x8e>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a51      	ldr	r2, [pc, #324]	@ (800cabc <HAL_GPIO_DeInit+0x1bc>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d007      	beq.n	800c98a <HAL_GPIO_DeInit+0x8a>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a50      	ldr	r2, [pc, #320]	@ (800cac0 <HAL_GPIO_DeInit+0x1c0>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d101      	bne.n	800c986 <HAL_GPIO_DeInit+0x86>
 800c982:	2304      	movs	r3, #4
 800c984:	e008      	b.n	800c998 <HAL_GPIO_DeInit+0x98>
 800c986:	2307      	movs	r3, #7
 800c988:	e006      	b.n	800c998 <HAL_GPIO_DeInit+0x98>
 800c98a:	2303      	movs	r3, #3
 800c98c:	e004      	b.n	800c998 <HAL_GPIO_DeInit+0x98>
 800c98e:	2302      	movs	r3, #2
 800c990:	e002      	b.n	800c998 <HAL_GPIO_DeInit+0x98>
 800c992:	2301      	movs	r3, #1
 800c994:	e000      	b.n	800c998 <HAL_GPIO_DeInit+0x98>
 800c996:	2300      	movs	r3, #0
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	f002 0203 	and.w	r2, r2, #3
 800c99e:	0092      	lsls	r2, r2, #2
 800c9a0:	4093      	lsls	r3, r2
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d132      	bne.n	800ca0e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c9a8:	4b46      	ldr	r3, [pc, #280]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	43db      	mvns	r3, r3
 800c9b0:	4944      	ldr	r1, [pc, #272]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c9b6:	4b43      	ldr	r3, [pc, #268]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	43db      	mvns	r3, r3
 800c9be:	4941      	ldr	r1, [pc, #260]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c9c4:	4b3f      	ldr	r3, [pc, #252]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9c6:	68da      	ldr	r2, [r3, #12]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	43db      	mvns	r3, r3
 800c9cc:	493d      	ldr	r1, [pc, #244]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c9d2:	4b3c      	ldr	r3, [pc, #240]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	43db      	mvns	r3, r3
 800c9da:	493a      	ldr	r1, [pc, #232]	@ (800cac4 <HAL_GPIO_DeInit+0x1c4>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	220f      	movs	r2, #15
 800c9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c9f0:	4a2e      	ldr	r2, [pc, #184]	@ (800caac <HAL_GPIO_DeInit+0x1ac>)
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	089b      	lsrs	r3, r3, #2
 800c9f6:	3302      	adds	r3, #2
 800c9f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	43da      	mvns	r2, r3
 800ca00:	482a      	ldr	r0, [pc, #168]	@ (800caac <HAL_GPIO_DeInit+0x1ac>)
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	089b      	lsrs	r3, r3, #2
 800ca06:	400a      	ands	r2, r1
 800ca08:	3302      	adds	r3, #2
 800ca0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	2103      	movs	r1, #3
 800ca18:	fa01 f303 	lsl.w	r3, r1, r3
 800ca1c:	43db      	mvns	r3, r3
 800ca1e:	401a      	ands	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	08da      	lsrs	r2, r3, #3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3208      	adds	r2, #8
 800ca2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f003 0307 	and.w	r3, r3, #7
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	220f      	movs	r2, #15
 800ca3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3e:	43db      	mvns	r3, r3
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	08d2      	lsrs	r2, r2, #3
 800ca44:	4019      	ands	r1, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3208      	adds	r2, #8
 800ca4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	2103      	movs	r1, #3
 800ca58:	fa01 f303 	lsl.w	r3, r1, r3
 800ca5c:	43db      	mvns	r3, r3
 800ca5e:	401a      	ands	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	2101      	movs	r1, #1
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca70:	43db      	mvns	r3, r3
 800ca72:	401a      	ands	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	005b      	lsls	r3, r3, #1
 800ca80:	2103      	movs	r1, #3
 800ca82:	fa01 f303 	lsl.w	r3, r1, r3
 800ca86:	43db      	mvns	r3, r3
 800ca88:	401a      	ands	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	3301      	adds	r3, #1
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2b0f      	cmp	r3, #15
 800ca98:	f67f af40 	bls.w	800c91c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	bf00      	nop
 800caa0:	371c      	adds	r7, #28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	40013800 	.word	0x40013800
 800cab0:	40020000 	.word	0x40020000
 800cab4:	40020400 	.word	0x40020400
 800cab8:	40020800 	.word	0x40020800
 800cabc:	40020c00 	.word	0x40020c00
 800cac0:	40021000 	.word	0x40021000
 800cac4:	40013c00 	.word	0x40013c00

0800cac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	460b      	mov	r3, r1
 800cad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	691a      	ldr	r2, [r3, #16]
 800cad8:	887b      	ldrh	r3, [r7, #2]
 800cada:	4013      	ands	r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cae0:	2301      	movs	r3, #1
 800cae2:	73fb      	strb	r3, [r7, #15]
 800cae4:	e001      	b.n	800caea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800caea:	7bfb      	ldrb	r3, [r7, #15]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	807b      	strh	r3, [r7, #2]
 800cb04:	4613      	mov	r3, r2
 800cb06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cb08:	787b      	ldrb	r3, [r7, #1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d003      	beq.n	800cb16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cb0e:	887a      	ldrh	r2, [r7, #2]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cb14:	e003      	b.n	800cb1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cb16:	887b      	ldrh	r3, [r7, #2]
 800cb18:	041a      	lsls	r2, r3, #16
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	619a      	str	r2, [r3, #24]
}
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
	...

0800cb2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d101      	bne.n	800cb3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e12b      	b.n	800cd96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f95d 	bl	800ce12 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2224      	movs	r2, #36	@ 0x24
 800cb5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f022 0201 	bic.w	r2, r2, #1
 800cb6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cb7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cb8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cb90:	f002 f93e 	bl	800ee10 <HAL_RCC_GetPCLK1Freq>
 800cb94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	4a81      	ldr	r2, [pc, #516]	@ (800cda0 <HAL_I2C_Init+0x274>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d807      	bhi.n	800cbb0 <HAL_I2C_Init+0x84>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	4a80      	ldr	r2, [pc, #512]	@ (800cda4 <HAL_I2C_Init+0x278>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	bf94      	ite	ls
 800cba8:	2301      	movls	r3, #1
 800cbaa:	2300      	movhi	r3, #0
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	e006      	b.n	800cbbe <HAL_I2C_Init+0x92>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4a7d      	ldr	r2, [pc, #500]	@ (800cda8 <HAL_I2C_Init+0x27c>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	bf94      	ite	ls
 800cbb8:	2301      	movls	r3, #1
 800cbba:	2300      	movhi	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e0e7      	b.n	800cd96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4a78      	ldr	r2, [pc, #480]	@ (800cdac <HAL_I2C_Init+0x280>)
 800cbca:	fba2 2303 	umull	r2, r3, r2, r3
 800cbce:	0c9b      	lsrs	r3, r3, #18
 800cbd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	4a6a      	ldr	r2, [pc, #424]	@ (800cda0 <HAL_I2C_Init+0x274>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d802      	bhi.n	800cc00 <HAL_I2C_Init+0xd4>
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	e009      	b.n	800cc14 <HAL_I2C_Init+0xe8>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cc06:	fb02 f303 	mul.w	r3, r2, r3
 800cc0a:	4a69      	ldr	r2, [pc, #420]	@ (800cdb0 <HAL_I2C_Init+0x284>)
 800cc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc10:	099b      	lsrs	r3, r3, #6
 800cc12:	3301      	adds	r3, #1
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	6812      	ldr	r2, [r2, #0]
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800cc26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	495c      	ldr	r1, [pc, #368]	@ (800cda0 <HAL_I2C_Init+0x274>)
 800cc30:	428b      	cmp	r3, r1
 800cc32:	d819      	bhi.n	800cc68 <HAL_I2C_Init+0x13c>
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	1e59      	subs	r1, r3, #1
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800cc42:	1c59      	adds	r1, r3, #1
 800cc44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cc48:	400b      	ands	r3, r1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <HAL_I2C_Init+0x138>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	1e59      	subs	r1, r3, #1
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	fbb1 f3f3 	udiv	r3, r1, r3
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc62:	e051      	b.n	800cd08 <HAL_I2C_Init+0x1dc>
 800cc64:	2304      	movs	r3, #4
 800cc66:	e04f      	b.n	800cd08 <HAL_I2C_Init+0x1dc>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d111      	bne.n	800cc94 <HAL_I2C_Init+0x168>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	1e58      	subs	r0, r3, #1
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6859      	ldr	r1, [r3, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	440b      	add	r3, r1
 800cc7e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc82:	3301      	adds	r3, #1
 800cc84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bf0c      	ite	eq
 800cc8c:	2301      	moveq	r3, #1
 800cc8e:	2300      	movne	r3, #0
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	e012      	b.n	800ccba <HAL_I2C_Init+0x18e>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	1e58      	subs	r0, r3, #1
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6859      	ldr	r1, [r3, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	440b      	add	r3, r1
 800cca2:	0099      	lsls	r1, r3, #2
 800cca4:	440b      	add	r3, r1
 800cca6:	fbb0 f3f3 	udiv	r3, r0, r3
 800ccaa:	3301      	adds	r3, #1
 800ccac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	bf0c      	ite	eq
 800ccb4:	2301      	moveq	r3, #1
 800ccb6:	2300      	movne	r3, #0
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <HAL_I2C_Init+0x196>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e022      	b.n	800cd08 <HAL_I2C_Init+0x1dc>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10e      	bne.n	800cce8 <HAL_I2C_Init+0x1bc>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	1e58      	subs	r0, r3, #1
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6859      	ldr	r1, [r3, #4]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	440b      	add	r3, r1
 800ccd8:	fbb0 f3f3 	udiv	r3, r0, r3
 800ccdc:	3301      	adds	r3, #1
 800ccde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cce6:	e00f      	b.n	800cd08 <HAL_I2C_Init+0x1dc>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	1e58      	subs	r0, r3, #1
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6859      	ldr	r1, [r3, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	440b      	add	r3, r1
 800ccf6:	0099      	lsls	r1, r3, #2
 800ccf8:	440b      	add	r3, r1
 800ccfa:	fbb0 f3f3 	udiv	r3, r0, r3
 800ccfe:	3301      	adds	r3, #1
 800cd00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	6809      	ldr	r1, [r1, #0]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	69da      	ldr	r2, [r3, #28]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800cd36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	6911      	ldr	r1, [r2, #16]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	68d2      	ldr	r2, [r2, #12]
 800cd42:	4311      	orrs	r1, r2
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	6812      	ldr	r2, [r2, #0]
 800cd48:	430b      	orrs	r3, r1
 800cd4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	695a      	ldr	r2, [r3, #20]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	430a      	orrs	r2, r1
 800cd66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f042 0201 	orr.w	r2, r2, #1
 800cd76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2220      	movs	r2, #32
 800cd82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	000186a0 	.word	0x000186a0
 800cda4:	001e847f 	.word	0x001e847f
 800cda8:	003d08ff 	.word	0x003d08ff
 800cdac:	431bde83 	.word	0x431bde83
 800cdb0:	10624dd3 	.word	0x10624dd3

0800cdb4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e021      	b.n	800ce0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2224      	movs	r2, #36	@ 0x24
 800cdca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f022 0201 	bic.w	r2, r2, #1
 800cddc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f821 	bl	800ce26 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b083      	sub	sp, #12
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800ce1a:	bf00      	nop
 800ce1c:	370c      	adds	r7, #12
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
	...

0800ce3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	607a      	str	r2, [r7, #4]
 800ce46:	461a      	mov	r2, r3
 800ce48:	460b      	mov	r3, r1
 800ce4a:	817b      	strh	r3, [r7, #10]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ce50:	f7ff fa62 	bl	800c318 <HAL_GetTick>
 800ce54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b20      	cmp	r3, #32
 800ce60:	f040 80e0 	bne.w	800d024 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	2319      	movs	r3, #25
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	4970      	ldr	r1, [pc, #448]	@ (800d030 <HAL_I2C_Master_Transmit+0x1f4>)
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f001 f928 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e0d3      	b.n	800d026 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d101      	bne.n	800ce8c <HAL_I2C_Master_Transmit+0x50>
 800ce88:	2302      	movs	r3, #2
 800ce8a:	e0cc      	b.n	800d026 <HAL_I2C_Master_Transmit+0x1ea>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d007      	beq.n	800ceb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f042 0201 	orr.w	r2, r2, #1
 800ceb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cec0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2221      	movs	r2, #33	@ 0x21
 800cec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2210      	movs	r2, #16
 800cece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	893a      	ldrh	r2, [r7, #8]
 800cee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	4a50      	ldr	r2, [pc, #320]	@ (800d034 <HAL_I2C_Master_Transmit+0x1f8>)
 800cef2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cef4:	8979      	ldrh	r1, [r7, #10]
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a3a      	ldr	r2, [r7, #32]
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f000 fe14 	bl	800db28 <I2C_MasterRequestWrite>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e08d      	b.n	800d026 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	613b      	str	r3, [r7, #16]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	613b      	str	r3, [r7, #16]
 800cf1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800cf20:	e066      	b.n	800cff0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	6a39      	ldr	r1, [r7, #32]
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f001 f9e6 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00d      	beq.n	800cf4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf36:	2b04      	cmp	r3, #4
 800cf38:	d107      	bne.n	800cf4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e06b      	b.n	800d026 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf52:	781a      	ldrb	r2, [r3, #0]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf76:	3b01      	subs	r3, #1
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	f003 0304 	and.w	r3, r3, #4
 800cf88:	2b04      	cmp	r3, #4
 800cf8a:	d11b      	bne.n	800cfc4 <HAL_I2C_Master_Transmit+0x188>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d017      	beq.n	800cfc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf98:	781a      	ldrb	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	6a39      	ldr	r1, [r7, #32]
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f001 f9dd 	bl	800e388 <I2C_WaitOnBTFFlagUntilTimeout>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00d      	beq.n	800cff0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfd8:	2b04      	cmp	r3, #4
 800cfda:	d107      	bne.n	800cfec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cfea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e01a      	b.n	800d026 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d194      	bne.n	800cf22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2220      	movs	r2, #32
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	e000      	b.n	800d026 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d024:	2302      	movs	r3, #2
  }
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	00100002 	.word	0x00100002
 800d034:	ffff0000 	.word	0xffff0000

0800d038 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	@ 0x30
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	461a      	mov	r2, r3
 800d044:	460b      	mov	r3, r1
 800d046:	817b      	strh	r3, [r7, #10]
 800d048:	4613      	mov	r3, r2
 800d04a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d04c:	f7ff f964 	bl	800c318 <HAL_GetTick>
 800d050:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b20      	cmp	r3, #32
 800d05c:	f040 8217 	bne.w	800d48e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	2319      	movs	r3, #25
 800d066:	2201      	movs	r2, #1
 800d068:	497c      	ldr	r1, [pc, #496]	@ (800d25c <HAL_I2C_Master_Receive+0x224>)
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f001 f82a 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d076:	2302      	movs	r3, #2
 800d078:	e20a      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d080:	2b01      	cmp	r3, #1
 800d082:	d101      	bne.n	800d088 <HAL_I2C_Master_Receive+0x50>
 800d084:	2302      	movs	r3, #2
 800d086:	e203      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d007      	beq.n	800d0ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f042 0201 	orr.w	r2, r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d0bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2222      	movs	r2, #34	@ 0x22
 800d0c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2210      	movs	r2, #16
 800d0ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	893a      	ldrh	r2, [r7, #8]
 800d0de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	4a5c      	ldr	r2, [pc, #368]	@ (800d260 <HAL_I2C_Master_Receive+0x228>)
 800d0ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d0f0:	8979      	ldrh	r1, [r7, #10]
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 fd98 	bl	800dc2c <I2C_MasterRequestRead>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e1c4      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d113      	bne.n	800d136 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d10e:	2300      	movs	r3, #0
 800d110:	623b      	str	r3, [r7, #32]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	695b      	ldr	r3, [r3, #20]
 800d118:	623b      	str	r3, [r7, #32]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	623b      	str	r3, [r7, #32]
 800d122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e198      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d11b      	bne.n	800d176 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d14c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d14e:	2300      	movs	r3, #0
 800d150:	61fb      	str	r3, [r7, #28]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	61fb      	str	r3, [r7, #28]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	61fb      	str	r3, [r7, #28]
 800d162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	e178      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d11b      	bne.n	800d1b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d18c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d19c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61bb      	str	r3, [r7, #24]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	695b      	ldr	r3, [r3, #20]
 800d1a8:	61bb      	str	r3, [r7, #24]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	61bb      	str	r3, [r7, #24]
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	e158      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d1c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	695b      	ldr	r3, [r3, #20]
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	617b      	str	r3, [r7, #20]
 800d1da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d1dc:	e144      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	f200 80f1 	bhi.w	800d3ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d123      	bne.n	800d238 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f001 f90f 	bl	800e418 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e145      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691a      	ldr	r2, [r3, #16]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d20e:	b2d2      	uxtb	r2, r2
 800d210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d220:	3b01      	subs	r3, #1
 800d222:	b29a      	uxth	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	3b01      	subs	r3, #1
 800d230:	b29a      	uxth	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d236:	e117      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d14e      	bne.n	800d2de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d246:	2200      	movs	r2, #0
 800d248:	4906      	ldr	r1, [pc, #24]	@ (800d264 <HAL_I2C_Master_Receive+0x22c>)
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 ff3a 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d008      	beq.n	800d268 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e11a      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
 800d25a:	bf00      	nop
 800d25c:	00100002 	.word	0x00100002
 800d260:	ffff0000 	.word	0xffff0000
 800d264:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	691a      	ldr	r2, [r3, #16]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d294:	3b01      	subs	r3, #1
 800d296:	b29a      	uxth	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	691a      	ldr	r2, [r3, #16]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b4:	b2d2      	uxtb	r2, r2
 800d2b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2bc:	1c5a      	adds	r2, r3, #1
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d2dc:	e0c4      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	496c      	ldr	r1, [pc, #432]	@ (800d498 <HAL_I2C_Master_Receive+0x460>)
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f000 feeb 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e0cb      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d312:	b2d2      	uxtb	r2, r2
 800d314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d324:	3b01      	subs	r3, #1
 800d326:	b29a      	uxth	r2, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d330:	b29b      	uxth	r3, r3
 800d332:	3b01      	subs	r3, #1
 800d334:	b29a      	uxth	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d340:	2200      	movs	r2, #0
 800d342:	4955      	ldr	r1, [pc, #340]	@ (800d498 <HAL_I2C_Master_Receive+0x460>)
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 febd 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e09d      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	691a      	ldr	r2, [r3, #16]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d36e:	b2d2      	uxtb	r2, r2
 800d370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d380:	3b01      	subs	r3, #1
 800d382:	b29a      	uxth	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	3b01      	subs	r3, #1
 800d390:	b29a      	uxth	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	691a      	ldr	r2, [r3, #16]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a0:	b2d2      	uxtb	r2, r2
 800d3a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3b2:	3b01      	subs	r3, #1
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d3c8:	e04e      	b.n	800d468 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f001 f822 	bl	800e418 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e058      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	691a      	ldr	r2, [r3, #16]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e8:	b2d2      	uxtb	r2, r2
 800d3ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d406:	b29b      	uxth	r3, r3
 800d408:	3b01      	subs	r3, #1
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	f003 0304 	and.w	r3, r3, #4
 800d41a:	2b04      	cmp	r3, #4
 800d41c:	d124      	bne.n	800d468 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d422:	2b03      	cmp	r3, #3
 800d424:	d107      	bne.n	800d436 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d434:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	691a      	ldr	r2, [r3, #16]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d440:	b2d2      	uxtb	r2, r2
 800d442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d452:	3b01      	subs	r3, #1
 800d454:	b29a      	uxth	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d45e:	b29b      	uxth	r3, r3
 800d460:	3b01      	subs	r3, #1
 800d462:	b29a      	uxth	r2, r3
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f47f aeb6 	bne.w	800d1de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2220      	movs	r2, #32
 800d476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e000      	b.n	800d490 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800d48e:	2302      	movs	r3, #2
  }
}
 800d490:	4618      	mov	r0, r3
 800d492:	3728      	adds	r7, #40	@ 0x28
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	00010004 	.word	0x00010004

0800d49c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af02      	add	r7, sp, #8
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	817b      	strh	r3, [r7, #10]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	813b      	strh	r3, [r7, #8]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d4b6:	f7fe ff2f 	bl	800c318 <HAL_GetTick>
 800d4ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b20      	cmp	r3, #32
 800d4c6:	f040 80d9 	bne.w	800d67c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	2319      	movs	r3, #25
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	496d      	ldr	r1, [pc, #436]	@ (800d688 <HAL_I2C_Mem_Write+0x1ec>)
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 fdf5 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	e0cc      	b.n	800d67e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d101      	bne.n	800d4f2 <HAL_I2C_Mem_Write+0x56>
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e0c5      	b.n	800d67e <HAL_I2C_Mem_Write+0x1e2>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b01      	cmp	r3, #1
 800d506:	d007      	beq.n	800d518 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f042 0201 	orr.w	r2, r2, #1
 800d516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2221      	movs	r2, #33	@ 0x21
 800d52c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2240      	movs	r2, #64	@ 0x40
 800d534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a3a      	ldr	r2, [r7, #32]
 800d542:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d548:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d54e:	b29a      	uxth	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4a4d      	ldr	r2, [pc, #308]	@ (800d68c <HAL_I2C_Mem_Write+0x1f0>)
 800d558:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d55a:	88f8      	ldrh	r0, [r7, #6]
 800d55c:	893a      	ldrh	r2, [r7, #8]
 800d55e:	8979      	ldrh	r1, [r7, #10]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	9301      	str	r3, [sp, #4]
 800d564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	4603      	mov	r3, r0
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f000 fc2c 	bl	800ddc8 <I2C_RequestMemoryWrite>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d052      	beq.n	800d61c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d576:	2301      	movs	r3, #1
 800d578:	e081      	b.n	800d67e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f000 feba 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00d      	beq.n	800d5a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d58e:	2b04      	cmp	r3, #4
 800d590:	d107      	bne.n	800d5a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e06b      	b.n	800d67e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5aa:	781a      	ldrb	r2, [r3, #0]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b04      	cmp	r3, #4
 800d5e2:	d11b      	bne.n	800d61c <HAL_I2C_Mem_Write+0x180>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d017      	beq.n	800d61c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f0:	781a      	ldrb	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d606:	3b01      	subs	r3, #1
 800d608:	b29a      	uxth	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d612:	b29b      	uxth	r3, r3
 800d614:	3b01      	subs	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1aa      	bne.n	800d57a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 fead 	bl	800e388 <I2C_WaitOnBTFFlagUntilTimeout>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00d      	beq.n	800d650 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d638:	2b04      	cmp	r3, #4
 800d63a:	d107      	bne.n	800d64c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d64a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e016      	b.n	800d67e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d65e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2220      	movs	r2, #32
 800d664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	e000      	b.n	800d67e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d67c:	2302      	movs	r3, #2
  }
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	00100002 	.word	0x00100002
 800d68c:	ffff0000 	.word	0xffff0000

0800d690 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b08c      	sub	sp, #48	@ 0x30
 800d694:	af02      	add	r7, sp, #8
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	4608      	mov	r0, r1
 800d69a:	4611      	mov	r1, r2
 800d69c:	461a      	mov	r2, r3
 800d69e:	4603      	mov	r3, r0
 800d6a0:	817b      	strh	r3, [r7, #10]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	813b      	strh	r3, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d6aa:	f7fe fe35 	bl	800c318 <HAL_GetTick>
 800d6ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b20      	cmp	r3, #32
 800d6ba:	f040 8214 	bne.w	800dae6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	2319      	movs	r3, #25
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	497b      	ldr	r1, [pc, #492]	@ (800d8b4 <HAL_I2C_Mem_Read+0x224>)
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 fcfb 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e207      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d101      	bne.n	800d6e6 <HAL_I2C_Mem_Read+0x56>
 800d6e2:	2302      	movs	r3, #2
 800d6e4:	e200      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d007      	beq.n	800d70c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f042 0201 	orr.w	r2, r2, #1
 800d70a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d71a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2222      	movs	r2, #34	@ 0x22
 800d720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2240      	movs	r2, #64	@ 0x40
 800d728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d736:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d73c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d742:	b29a      	uxth	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4a5b      	ldr	r2, [pc, #364]	@ (800d8b8 <HAL_I2C_Mem_Read+0x228>)
 800d74c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d74e:	88f8      	ldrh	r0, [r7, #6]
 800d750:	893a      	ldrh	r2, [r7, #8]
 800d752:	8979      	ldrh	r1, [r7, #10]
 800d754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	4603      	mov	r3, r0
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fbc8 	bl	800def4 <I2C_RequestMemoryRead>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e1bc      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d772:	2b00      	cmp	r3, #0
 800d774:	d113      	bne.n	800d79e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d776:	2300      	movs	r3, #0
 800d778:	623b      	str	r3, [r7, #32]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	623b      	str	r3, [r7, #32]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	699b      	ldr	r3, [r3, #24]
 800d788:	623b      	str	r3, [r7, #32]
 800d78a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d79a:	601a      	str	r2, [r3, #0]
 800d79c:	e190      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d11b      	bne.n	800d7de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	61fb      	str	r3, [r7, #28]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	61fb      	str	r3, [r7, #28]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	61fb      	str	r3, [r7, #28]
 800d7ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	e170      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d11b      	bne.n	800d81e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d806:	2300      	movs	r3, #0
 800d808:	61bb      	str	r3, [r7, #24]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	61bb      	str	r3, [r7, #24]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	61bb      	str	r3, [r7, #24]
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	e150      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	695b      	ldr	r3, [r3, #20]
 800d828:	617b      	str	r3, [r7, #20]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	699b      	ldr	r3, [r3, #24]
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d834:	e144      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	f200 80f1 	bhi.w	800da22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d844:	2b01      	cmp	r3, #1
 800d846:	d123      	bne.n	800d890 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d84a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 fde3 	bl	800e418 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e145      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	691a      	ldr	r2, [r3, #16]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d866:	b2d2      	uxtb	r2, r2
 800d868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d878:	3b01      	subs	r3, #1
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d884:	b29b      	uxth	r3, r3
 800d886:	3b01      	subs	r3, #1
 800d888:	b29a      	uxth	r2, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d88e:	e117      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d894:	2b02      	cmp	r3, #2
 800d896:	d14e      	bne.n	800d936 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4906      	ldr	r1, [pc, #24]	@ (800d8bc <HAL_I2C_Mem_Read+0x22c>)
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f000 fc0e 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d008      	beq.n	800d8c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e11a      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
 800d8b2:	bf00      	nop
 800d8b4:	00100002 	.word	0x00100002
 800d8b8:	ffff0000 	.word	0xffff0000
 800d8bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	691a      	ldr	r2, [r3, #16]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	691a      	ldr	r2, [r3, #16]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d90c:	b2d2      	uxtb	r2, r2
 800d90e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d914:	1c5a      	adds	r2, r3, #1
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d91e:	3b01      	subs	r3, #1
 800d920:	b29a      	uxth	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	3b01      	subs	r3, #1
 800d92e:	b29a      	uxth	r2, r3
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d934:	e0c4      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93c:	2200      	movs	r2, #0
 800d93e:	496c      	ldr	r1, [pc, #432]	@ (800daf0 <HAL_I2C_Mem_Read+0x460>)
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 fbbf 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e0cb      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d95e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	691a      	ldr	r2, [r3, #16]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d97c:	3b01      	subs	r3, #1
 800d97e:	b29a      	uxth	r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d988:	b29b      	uxth	r3, r3
 800d98a:	3b01      	subs	r3, #1
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d998:	2200      	movs	r2, #0
 800d99a:	4955      	ldr	r1, [pc, #340]	@ (800daf0 <HAL_I2C_Mem_Read+0x460>)
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 fb91 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e09d      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	691a      	ldr	r2, [r3, #16]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c6:	b2d2      	uxtb	r2, r2
 800d9c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ce:	1c5a      	adds	r2, r3, #1
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	691a      	ldr	r2, [r3, #16]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f8:	b2d2      	uxtb	r2, r2
 800d9fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da0a:	3b01      	subs	r3, #1
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da16:	b29b      	uxth	r3, r3
 800da18:	3b01      	subs	r3, #1
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da20:	e04e      	b.n	800dac0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fcf6 	bl	800e418 <I2C_WaitOnRXNEFlagUntilTimeout>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e058      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	691a      	ldr	r2, [r3, #16]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da40:	b2d2      	uxtb	r2, r2
 800da42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da48:	1c5a      	adds	r2, r3, #1
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da52:	3b01      	subs	r3, #1
 800da54:	b29a      	uxth	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da5e:	b29b      	uxth	r3, r3
 800da60:	3b01      	subs	r3, #1
 800da62:	b29a      	uxth	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	695b      	ldr	r3, [r3, #20]
 800da6e:	f003 0304 	and.w	r3, r3, #4
 800da72:	2b04      	cmp	r3, #4
 800da74:	d124      	bne.n	800dac0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d107      	bne.n	800da8e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	691a      	ldr	r2, [r3, #16]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da98:	b2d2      	uxtb	r2, r2
 800da9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daaa:	3b01      	subs	r3, #1
 800daac:	b29a      	uxth	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	3b01      	subs	r3, #1
 800daba:	b29a      	uxth	r2, r3
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f47f aeb6 	bne.w	800d836 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2220      	movs	r2, #32
 800dace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	e000      	b.n	800dae8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800dae6:	2302      	movs	r3, #2
  }
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3728      	adds	r7, #40	@ 0x28
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	00010004 	.word	0x00010004

0800daf4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db02:	b2db      	uxtb	r3, r3
}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b088      	sub	sp, #32
 800db2c:	af02      	add	r7, sp, #8
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	607a      	str	r2, [r7, #4]
 800db32:	603b      	str	r3, [r7, #0]
 800db34:	460b      	mov	r3, r1
 800db36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2b08      	cmp	r3, #8
 800db42:	d006      	beq.n	800db52 <I2C_MasterRequestWrite+0x2a>
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d003      	beq.n	800db52 <I2C_MasterRequestWrite+0x2a>
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800db50:	d108      	bne.n	800db64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	e00b      	b.n	800db7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db68:	2b12      	cmp	r3, #18
 800db6a:	d107      	bne.n	800db7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800db7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f000 fa9b 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00d      	beq.n	800dbb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dba2:	d103      	bne.n	800dbac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dbaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e035      	b.n	800dc1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dbb8:	d108      	bne.n	800dbcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dbba:	897b      	ldrh	r3, [r7, #10]
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800dbc8:	611a      	str	r2, [r3, #16]
 800dbca:	e01b      	b.n	800dc04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dbcc:	897b      	ldrh	r3, [r7, #10]
 800dbce:	11db      	asrs	r3, r3, #7
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 0306 	and.w	r3, r3, #6
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	f063 030f 	orn	r3, r3, #15
 800dbdc:	b2da      	uxtb	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	490e      	ldr	r1, [pc, #56]	@ (800dc24 <I2C_MasterRequestWrite+0xfc>)
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f000 fae4 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d001      	beq.n	800dbfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e010      	b.n	800dc1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800dbfa:	897b      	ldrh	r3, [r7, #10]
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	4907      	ldr	r1, [pc, #28]	@ (800dc28 <I2C_MasterRequestWrite+0x100>)
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f000 fad4 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e000      	b.n	800dc1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3718      	adds	r7, #24
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	00010008 	.word	0x00010008
 800dc28:	00010002 	.word	0x00010002

0800dc2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	607a      	str	r2, [r7, #4]
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dc50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	2b08      	cmp	r3, #8
 800dc56:	d006      	beq.n	800dc66 <I2C_MasterRequestRead+0x3a>
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d003      	beq.n	800dc66 <I2C_MasterRequestRead+0x3a>
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dc64:	d108      	bne.n	800dc78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	e00b      	b.n	800dc90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc7c:	2b11      	cmp	r3, #17
 800dc7e:	d107      	bne.n	800dc90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 fa11 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00d      	beq.n	800dcc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dcb6:	d103      	bne.n	800dcc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	e079      	b.n	800ddb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	691b      	ldr	r3, [r3, #16]
 800dcc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dccc:	d108      	bne.n	800dce0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dcce:	897b      	ldrh	r3, [r7, #10]
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	f043 0301 	orr.w	r3, r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	611a      	str	r2, [r3, #16]
 800dcde:	e05f      	b.n	800dda0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dce0:	897b      	ldrh	r3, [r7, #10]
 800dce2:	11db      	asrs	r3, r3, #7
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	f003 0306 	and.w	r3, r3, #6
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f063 030f 	orn	r3, r3, #15
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	4930      	ldr	r1, [pc, #192]	@ (800ddc0 <I2C_MasterRequestRead+0x194>)
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f000 fa5a 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e054      	b.n	800ddb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800dd0e:	897b      	ldrh	r3, [r7, #10]
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	4929      	ldr	r1, [pc, #164]	@ (800ddc4 <I2C_MasterRequestRead+0x198>)
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f000 fa4a 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e044      	b.n	800ddb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd2e:	2300      	movs	r3, #0
 800dd30:	613b      	str	r3, [r7, #16]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	613b      	str	r3, [r7, #16]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	613b      	str	r3, [r7, #16]
 800dd42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dd52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 f9af 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d00d      	beq.n	800dd88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd7a:	d103      	bne.n	800dd84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd82:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800dd84:	2303      	movs	r3, #3
 800dd86:	e017      	b.n	800ddb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800dd88:	897b      	ldrh	r3, [r7, #10]
 800dd8a:	11db      	asrs	r3, r3, #7
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	f003 0306 	and.w	r3, r3, #6
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	f063 030e 	orn	r3, r3, #14
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	4907      	ldr	r1, [pc, #28]	@ (800ddc4 <I2C_MasterRequestRead+0x198>)
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 fa06 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e000      	b.n	800ddb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	00010008 	.word	0x00010008
 800ddc4:	00010002 	.word	0x00010002

0800ddc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	817b      	strh	r3, [r7, #10]
 800ddda:	460b      	mov	r3, r1
 800dddc:	813b      	strh	r3, [r7, #8]
 800ddde:	4613      	mov	r3, r2
 800dde0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ddf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f000 f960 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00d      	beq.n	800de26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de18:	d103      	bne.n	800de22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800de22:	2303      	movs	r3, #3
 800de24:	e05f      	b.n	800dee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800de26:	897b      	ldrh	r3, [r7, #10]
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	461a      	mov	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800de34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800de36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de38:	6a3a      	ldr	r2, [r7, #32]
 800de3a:	492d      	ldr	r1, [pc, #180]	@ (800def0 <I2C_RequestMemoryWrite+0x128>)
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 f9bb 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	e04c      	b.n	800dee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de64:	6a39      	ldr	r1, [r7, #32]
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 fa46 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00d      	beq.n	800de8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de76:	2b04      	cmp	r3, #4
 800de78:	d107      	bne.n	800de8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	e02b      	b.n	800dee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d105      	bne.n	800dea0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800de94:	893b      	ldrh	r3, [r7, #8]
 800de96:	b2da      	uxtb	r2, r3
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	611a      	str	r2, [r3, #16]
 800de9e:	e021      	b.n	800dee4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800dea0:	893b      	ldrh	r3, [r7, #8]
 800dea2:	0a1b      	lsrs	r3, r3, #8
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800deae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb0:	6a39      	ldr	r1, [r7, #32]
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 fa20 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00d      	beq.n	800deda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d107      	bne.n	800ded6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ded4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e005      	b.n	800dee6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800deda:	893b      	ldrh	r3, [r7, #8]
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3718      	adds	r7, #24
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	00010002 	.word	0x00010002

0800def4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af02      	add	r7, sp, #8
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	4608      	mov	r0, r1
 800defe:	4611      	mov	r1, r2
 800df00:	461a      	mov	r2, r3
 800df02:	4603      	mov	r3, r0
 800df04:	817b      	strh	r3, [r7, #10]
 800df06:	460b      	mov	r3, r1
 800df08:	813b      	strh	r3, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800df1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800df2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	2200      	movs	r2, #0
 800df36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f000 f8c2 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00d      	beq.n	800df62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df54:	d103      	bne.n	800df5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	e0aa      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800df62:	897b      	ldrh	r3, [r7, #10]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	461a      	mov	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800df70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800df72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df74:	6a3a      	ldr	r2, [r7, #32]
 800df76:	4952      	ldr	r1, [pc, #328]	@ (800e0c0 <I2C_RequestMemoryRead+0x1cc>)
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 f91d 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800df84:	2301      	movs	r3, #1
 800df86:	e097      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df88:	2300      	movs	r3, #0
 800df8a:	617b      	str	r3, [r7, #20]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	617b      	str	r3, [r7, #20]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	617b      	str	r3, [r7, #20]
 800df9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfa0:	6a39      	ldr	r1, [r7, #32]
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f000 f9a8 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00d      	beq.n	800dfca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfb2:	2b04      	cmp	r3, #4
 800dfb4:	d107      	bne.n	800dfc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e076      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dfca:	88fb      	ldrh	r3, [r7, #6]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d105      	bne.n	800dfdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dfd0:	893b      	ldrh	r3, [r7, #8]
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	611a      	str	r2, [r3, #16]
 800dfda:	e021      	b.n	800e020 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800dfdc:	893b      	ldrh	r3, [r7, #8]
 800dfde:	0a1b      	lsrs	r3, r3, #8
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dfea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfec:	6a39      	ldr	r1, [r7, #32]
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f000 f982 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00d      	beq.n	800e016 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dffe:	2b04      	cmp	r3, #4
 800e000:	d107      	bne.n	800e012 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e050      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e016:	893b      	ldrh	r3, [r7, #8]
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e022:	6a39      	ldr	r1, [r7, #32]
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 f967 	bl	800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d00d      	beq.n	800e04c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e034:	2b04      	cmp	r3, #4
 800e036:	d107      	bne.n	800e048 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e046:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e048:	2301      	movs	r3, #1
 800e04a:	e035      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e05a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	6a3b      	ldr	r3, [r7, #32]
 800e062:	2200      	movs	r2, #0
 800e064:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 f82b 	bl	800e0c4 <I2C_WaitOnFlagUntilTimeout>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00d      	beq.n	800e090 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e082:	d103      	bne.n	800e08c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e08a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e08c:	2303      	movs	r3, #3
 800e08e:	e013      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e090:	897b      	ldrh	r3, [r7, #10]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	6a3a      	ldr	r2, [r7, #32]
 800e0a4:	4906      	ldr	r1, [pc, #24]	@ (800e0c0 <I2C_RequestMemoryRead+0x1cc>)
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 f886 	bl	800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e000      	b.n	800e0b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	00010002 	.word	0x00010002

0800e0c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e0d4:	e048      	b.n	800e168 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0dc:	d044      	beq.n	800e168 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0de:	f7fe f91b 	bl	800c318 <HAL_GetTick>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d302      	bcc.n	800e0f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d139      	bne.n	800e168 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	0c1b      	lsrs	r3, r3, #16
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d10d      	bne.n	800e11a <I2C_WaitOnFlagUntilTimeout+0x56>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	43da      	mvns	r2, r3
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	4013      	ands	r3, r2
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	bf0c      	ite	eq
 800e110:	2301      	moveq	r3, #1
 800e112:	2300      	movne	r3, #0
 800e114:	b2db      	uxtb	r3, r3
 800e116:	461a      	mov	r2, r3
 800e118:	e00c      	b.n	800e134 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	43da      	mvns	r2, r3
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	4013      	ands	r3, r2
 800e126:	b29b      	uxth	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bf0c      	ite	eq
 800e12c:	2301      	moveq	r3, #1
 800e12e:	2300      	movne	r3, #0
 800e130:	b2db      	uxtb	r3, r3
 800e132:	461a      	mov	r2, r3
 800e134:	79fb      	ldrb	r3, [r7, #7]
 800e136:	429a      	cmp	r2, r3
 800e138:	d116      	bne.n	800e168 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2220      	movs	r2, #32
 800e144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e154:	f043 0220 	orr.w	r2, r3, #32
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e164:	2301      	movs	r3, #1
 800e166:	e023      	b.n	800e1b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	0c1b      	lsrs	r3, r3, #16
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d10d      	bne.n	800e18e <I2C_WaitOnFlagUntilTimeout+0xca>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	695b      	ldr	r3, [r3, #20]
 800e178:	43da      	mvns	r2, r3
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	4013      	ands	r3, r2
 800e17e:	b29b      	uxth	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	bf0c      	ite	eq
 800e184:	2301      	moveq	r3, #1
 800e186:	2300      	movne	r3, #0
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	461a      	mov	r2, r3
 800e18c:	e00c      	b.n	800e1a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	699b      	ldr	r3, [r3, #24]
 800e194:	43da      	mvns	r2, r3
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	4013      	ands	r3, r2
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	bf0c      	ite	eq
 800e1a0:	2301      	moveq	r3, #1
 800e1a2:	2300      	movne	r3, #0
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d093      	beq.n	800e0d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e1c6:	e071      	b.n	800e2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	695b      	ldr	r3, [r3, #20]
 800e1ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1d6:	d123      	bne.n	800e220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e1f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2220      	movs	r2, #32
 800e1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e20c:	f043 0204 	orr.w	r2, r3, #4
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	e067      	b.n	800e2f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e226:	d041      	beq.n	800e2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e228:	f7fe f876 	bl	800c318 <HAL_GetTick>
 800e22c:	4602      	mov	r2, r0
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	429a      	cmp	r2, r3
 800e236:	d302      	bcc.n	800e23e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d136      	bne.n	800e2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	0c1b      	lsrs	r3, r3, #16
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b01      	cmp	r3, #1
 800e246:	d10c      	bne.n	800e262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	43da      	mvns	r2, r3
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	4013      	ands	r3, r2
 800e254:	b29b      	uxth	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	bf14      	ite	ne
 800e25a:	2301      	movne	r3, #1
 800e25c:	2300      	moveq	r3, #0
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	e00b      	b.n	800e27a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	43da      	mvns	r2, r3
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	4013      	ands	r3, r2
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	bf14      	ite	ne
 800e274:	2301      	movne	r3, #1
 800e276:	2300      	moveq	r3, #0
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d016      	beq.n	800e2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2220      	movs	r2, #32
 800e288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e298:	f043 0220 	orr.w	r2, r3, #32
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e021      	b.n	800e2f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	0c1b      	lsrs	r3, r3, #16
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d10c      	bne.n	800e2d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	43da      	mvns	r2, r3
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	bf14      	ite	ne
 800e2c8:	2301      	movne	r3, #1
 800e2ca:	2300      	moveq	r3, #0
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	e00b      	b.n	800e2e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	43da      	mvns	r2, r3
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	4013      	ands	r3, r2
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bf14      	ite	ne
 800e2e2:	2301      	movne	r3, #1
 800e2e4:	2300      	moveq	r3, #0
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f47f af6d 	bne.w	800e1c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e304:	e034      	b.n	800e370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 f8e3 	bl	800e4d2 <I2C_IsAcknowledgeFailed>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	e034      	b.n	800e380 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e31c:	d028      	beq.n	800e370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e31e:	f7fd fffb 	bl	800c318 <HAL_GetTick>
 800e322:	4602      	mov	r2, r0
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d302      	bcc.n	800e334 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d11d      	bne.n	800e370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	695b      	ldr	r3, [r3, #20]
 800e33a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e33e:	2b80      	cmp	r3, #128	@ 0x80
 800e340:	d016      	beq.n	800e370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2220      	movs	r2, #32
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e35c:	f043 0220 	orr.w	r2, r3, #32
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e007      	b.n	800e380 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	695b      	ldr	r3, [r3, #20]
 800e376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e37a:	2b80      	cmp	r3, #128	@ 0x80
 800e37c:	d1c3      	bne.n	800e306 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e394:	e034      	b.n	800e400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f000 f89b 	bl	800e4d2 <I2C_IsAcknowledgeFailed>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e034      	b.n	800e410 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ac:	d028      	beq.n	800e400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3ae:	f7fd ffb3 	bl	800c318 <HAL_GetTick>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	68ba      	ldr	r2, [r7, #8]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d302      	bcc.n	800e3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d11d      	bne.n	800e400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	f003 0304 	and.w	r3, r3, #4
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	d016      	beq.n	800e400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2220      	movs	r2, #32
 800e3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ec:	f043 0220 	orr.w	r2, r3, #32
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e007      	b.n	800e410 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	f003 0304 	and.w	r3, r3, #4
 800e40a:	2b04      	cmp	r3, #4
 800e40c:	d1c3      	bne.n	800e396 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e424:	e049      	b.n	800e4ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	f003 0310 	and.w	r3, r3, #16
 800e430:	2b10      	cmp	r3, #16
 800e432:	d119      	bne.n	800e468 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f06f 0210 	mvn.w	r2, #16
 800e43c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2220      	movs	r2, #32
 800e448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	e030      	b.n	800e4ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e468:	f7fd ff56 	bl	800c318 <HAL_GetTick>
 800e46c:	4602      	mov	r2, r0
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	429a      	cmp	r2, r3
 800e476:	d302      	bcc.n	800e47e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d11d      	bne.n	800e4ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e488:	2b40      	cmp	r3, #64	@ 0x40
 800e48a:	d016      	beq.n	800e4ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2200      	movs	r2, #0
 800e490:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2220      	movs	r2, #32
 800e496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a6:	f043 0220 	orr.w	r2, r3, #32
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e007      	b.n	800e4ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	695b      	ldr	r3, [r3, #20]
 800e4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c4:	2b40      	cmp	r3, #64	@ 0x40
 800e4c6:	d1ae      	bne.n	800e426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b083      	sub	sp, #12
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	695b      	ldr	r3, [r3, #20]
 800e4e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4e8:	d11b      	bne.n	800e522 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e4f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2220      	movs	r2, #32
 800e4fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e50e:	f043 0204 	orr.w	r2, r3, #4
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	e000      	b.n	800e524 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d101      	bne.n	800e542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	e267      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d075      	beq.n	800e63a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e54e:	4b88      	ldr	r3, [pc, #544]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	f003 030c 	and.w	r3, r3, #12
 800e556:	2b04      	cmp	r3, #4
 800e558:	d00c      	beq.n	800e574 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e55a:	4b85      	ldr	r3, [pc, #532]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e562:	2b08      	cmp	r3, #8
 800e564:	d112      	bne.n	800e58c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e566:	4b82      	ldr	r3, [pc, #520]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e56e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e572:	d10b      	bne.n	800e58c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e574:	4b7e      	ldr	r3, [pc, #504]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d05b      	beq.n	800e638 <HAL_RCC_OscConfig+0x108>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d157      	bne.n	800e638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	e242      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e594:	d106      	bne.n	800e5a4 <HAL_RCC_OscConfig+0x74>
 800e596:	4b76      	ldr	r3, [pc, #472]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a75      	ldr	r2, [pc, #468]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e59c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	e01d      	b.n	800e5e0 <HAL_RCC_OscConfig+0xb0>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e5ac:	d10c      	bne.n	800e5c8 <HAL_RCC_OscConfig+0x98>
 800e5ae:	4b70      	ldr	r3, [pc, #448]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a6f      	ldr	r2, [pc, #444]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	4b6d      	ldr	r3, [pc, #436]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a6c      	ldr	r2, [pc, #432]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e5c4:	6013      	str	r3, [r2, #0]
 800e5c6:	e00b      	b.n	800e5e0 <HAL_RCC_OscConfig+0xb0>
 800e5c8:	4b69      	ldr	r3, [pc, #420]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a68      	ldr	r2, [pc, #416]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	4b66      	ldr	r3, [pc, #408]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a65      	ldr	r2, [pc, #404]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e5da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e5de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d013      	beq.n	800e610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e5e8:	f7fd fe96 	bl	800c318 <HAL_GetTick>
 800e5ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e5ee:	e008      	b.n	800e602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e5f0:	f7fd fe92 	bl	800c318 <HAL_GetTick>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	2b64      	cmp	r3, #100	@ 0x64
 800e5fc:	d901      	bls.n	800e602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e5fe:	2303      	movs	r3, #3
 800e600:	e207      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e602:	4b5b      	ldr	r3, [pc, #364]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d0f0      	beq.n	800e5f0 <HAL_RCC_OscConfig+0xc0>
 800e60e:	e014      	b.n	800e63a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e610:	f7fd fe82 	bl	800c318 <HAL_GetTick>
 800e614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e616:	e008      	b.n	800e62a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e618:	f7fd fe7e 	bl	800c318 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	2b64      	cmp	r3, #100	@ 0x64
 800e624:	d901      	bls.n	800e62a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e626:	2303      	movs	r3, #3
 800e628:	e1f3      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e62a:	4b51      	ldr	r3, [pc, #324]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1f0      	bne.n	800e618 <HAL_RCC_OscConfig+0xe8>
 800e636:	e000      	b.n	800e63a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d063      	beq.n	800e70e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e646:	4b4a      	ldr	r3, [pc, #296]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	f003 030c 	and.w	r3, r3, #12
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00b      	beq.n	800e66a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e652:	4b47      	ldr	r3, [pc, #284]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e65a:	2b08      	cmp	r3, #8
 800e65c:	d11c      	bne.n	800e698 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e65e:	4b44      	ldr	r3, [pc, #272]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d116      	bne.n	800e698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e66a:	4b41      	ldr	r3, [pc, #260]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f003 0302 	and.w	r3, r3, #2
 800e672:	2b00      	cmp	r3, #0
 800e674:	d005      	beq.n	800e682 <HAL_RCC_OscConfig+0x152>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d001      	beq.n	800e682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e1c7      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e682:	4b3b      	ldr	r3, [pc, #236]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	4937      	ldr	r1, [pc, #220]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e692:	4313      	orrs	r3, r2
 800e694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e696:	e03a      	b.n	800e70e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d020      	beq.n	800e6e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e6a0:	4b34      	ldr	r3, [pc, #208]	@ (800e774 <HAL_RCC_OscConfig+0x244>)
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6a6:	f7fd fe37 	bl	800c318 <HAL_GetTick>
 800e6aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e6ac:	e008      	b.n	800e6c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e6ae:	f7fd fe33 	bl	800c318 <HAL_GetTick>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d901      	bls.n	800e6c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e6bc:	2303      	movs	r3, #3
 800e6be:	e1a8      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e6c0:	4b2b      	ldr	r3, [pc, #172]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 0302 	and.w	r3, r3, #2
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0f0      	beq.n	800e6ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e6cc:	4b28      	ldr	r3, [pc, #160]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	00db      	lsls	r3, r3, #3
 800e6da:	4925      	ldr	r1, [pc, #148]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	600b      	str	r3, [r1, #0]
 800e6e0:	e015      	b.n	800e70e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e6e2:	4b24      	ldr	r3, [pc, #144]	@ (800e774 <HAL_RCC_OscConfig+0x244>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6e8:	f7fd fe16 	bl	800c318 <HAL_GetTick>
 800e6ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e6ee:	e008      	b.n	800e702 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e6f0:	f7fd fe12 	bl	800c318 <HAL_GetTick>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d901      	bls.n	800e702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e6fe:	2303      	movs	r3, #3
 800e700:	e187      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e702:	4b1b      	ldr	r3, [pc, #108]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f003 0302 	and.w	r3, r3, #2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1f0      	bne.n	800e6f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f003 0308 	and.w	r3, r3, #8
 800e716:	2b00      	cmp	r3, #0
 800e718:	d036      	beq.n	800e788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	695b      	ldr	r3, [r3, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d016      	beq.n	800e750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e722:	4b15      	ldr	r3, [pc, #84]	@ (800e778 <HAL_RCC_OscConfig+0x248>)
 800e724:	2201      	movs	r2, #1
 800e726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e728:	f7fd fdf6 	bl	800c318 <HAL_GetTick>
 800e72c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e72e:	e008      	b.n	800e742 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e730:	f7fd fdf2 	bl	800c318 <HAL_GetTick>
 800e734:	4602      	mov	r2, r0
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	2b02      	cmp	r3, #2
 800e73c:	d901      	bls.n	800e742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e73e:	2303      	movs	r3, #3
 800e740:	e167      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e742:	4b0b      	ldr	r3, [pc, #44]	@ (800e770 <HAL_RCC_OscConfig+0x240>)
 800e744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e746:	f003 0302 	and.w	r3, r3, #2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d0f0      	beq.n	800e730 <HAL_RCC_OscConfig+0x200>
 800e74e:	e01b      	b.n	800e788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e750:	4b09      	ldr	r3, [pc, #36]	@ (800e778 <HAL_RCC_OscConfig+0x248>)
 800e752:	2200      	movs	r2, #0
 800e754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e756:	f7fd fddf 	bl	800c318 <HAL_GetTick>
 800e75a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e75c:	e00e      	b.n	800e77c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e75e:	f7fd fddb 	bl	800c318 <HAL_GetTick>
 800e762:	4602      	mov	r2, r0
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	2b02      	cmp	r3, #2
 800e76a:	d907      	bls.n	800e77c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e150      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
 800e770:	40023800 	.word	0x40023800
 800e774:	42470000 	.word	0x42470000
 800e778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e77c:	4b88      	ldr	r3, [pc, #544]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e77e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e780:	f003 0302 	and.w	r3, r3, #2
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1ea      	bne.n	800e75e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 0304 	and.w	r3, r3, #4
 800e790:	2b00      	cmp	r3, #0
 800e792:	f000 8097 	beq.w	800e8c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e796:	2300      	movs	r3, #0
 800e798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e79a:	4b81      	ldr	r3, [pc, #516]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e79e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10f      	bne.n	800e7c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	60bb      	str	r3, [r7, #8]
 800e7aa:	4b7d      	ldr	r3, [pc, #500]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ae:	4a7c      	ldr	r2, [pc, #496]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e7b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e7b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800e7b6:	4b7a      	ldr	r3, [pc, #488]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e7be:	60bb      	str	r3, [r7, #8]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e7c6:	4b77      	ldr	r3, [pc, #476]	@ (800e9a4 <HAL_RCC_OscConfig+0x474>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d118      	bne.n	800e804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e7d2:	4b74      	ldr	r3, [pc, #464]	@ (800e9a4 <HAL_RCC_OscConfig+0x474>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a73      	ldr	r2, [pc, #460]	@ (800e9a4 <HAL_RCC_OscConfig+0x474>)
 800e7d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e7dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e7de:	f7fd fd9b 	bl	800c318 <HAL_GetTick>
 800e7e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e7e4:	e008      	b.n	800e7f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e7e6:	f7fd fd97 	bl	800c318 <HAL_GetTick>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d901      	bls.n	800e7f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e7f4:	2303      	movs	r3, #3
 800e7f6:	e10c      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e7f8:	4b6a      	ldr	r3, [pc, #424]	@ (800e9a4 <HAL_RCC_OscConfig+0x474>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e800:	2b00      	cmp	r3, #0
 800e802:	d0f0      	beq.n	800e7e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d106      	bne.n	800e81a <HAL_RCC_OscConfig+0x2ea>
 800e80c:	4b64      	ldr	r3, [pc, #400]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e80e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e810:	4a63      	ldr	r2, [pc, #396]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e812:	f043 0301 	orr.w	r3, r3, #1
 800e816:	6713      	str	r3, [r2, #112]	@ 0x70
 800e818:	e01c      	b.n	800e854 <HAL_RCC_OscConfig+0x324>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d10c      	bne.n	800e83c <HAL_RCC_OscConfig+0x30c>
 800e822:	4b5f      	ldr	r3, [pc, #380]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e826:	4a5e      	ldr	r2, [pc, #376]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e828:	f043 0304 	orr.w	r3, r3, #4
 800e82c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e82e:	4b5c      	ldr	r3, [pc, #368]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e832:	4a5b      	ldr	r2, [pc, #364]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e834:	f043 0301 	orr.w	r3, r3, #1
 800e838:	6713      	str	r3, [r2, #112]	@ 0x70
 800e83a:	e00b      	b.n	800e854 <HAL_RCC_OscConfig+0x324>
 800e83c:	4b58      	ldr	r3, [pc, #352]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e83e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e840:	4a57      	ldr	r2, [pc, #348]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e842:	f023 0301 	bic.w	r3, r3, #1
 800e846:	6713      	str	r3, [r2, #112]	@ 0x70
 800e848:	4b55      	ldr	r3, [pc, #340]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e84a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e84c:	4a54      	ldr	r2, [pc, #336]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e84e:	f023 0304 	bic.w	r3, r3, #4
 800e852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d015      	beq.n	800e888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e85c:	f7fd fd5c 	bl	800c318 <HAL_GetTick>
 800e860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e862:	e00a      	b.n	800e87a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e864:	f7fd fd58 	bl	800c318 <HAL_GetTick>
 800e868:	4602      	mov	r2, r0
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e872:	4293      	cmp	r3, r2
 800e874:	d901      	bls.n	800e87a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e876:	2303      	movs	r3, #3
 800e878:	e0cb      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e87a:	4b49      	ldr	r3, [pc, #292]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e87e:	f003 0302 	and.w	r3, r3, #2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d0ee      	beq.n	800e864 <HAL_RCC_OscConfig+0x334>
 800e886:	e014      	b.n	800e8b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e888:	f7fd fd46 	bl	800c318 <HAL_GetTick>
 800e88c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e88e:	e00a      	b.n	800e8a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e890:	f7fd fd42 	bl	800c318 <HAL_GetTick>
 800e894:	4602      	mov	r2, r0
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d901      	bls.n	800e8a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	e0b5      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e8a6:	4b3e      	ldr	r3, [pc, #248]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e8a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8aa:	f003 0302 	and.w	r3, r3, #2
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1ee      	bne.n	800e890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e8b2:	7dfb      	ldrb	r3, [r7, #23]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d105      	bne.n	800e8c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e8b8:	4b39      	ldr	r3, [pc, #228]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8bc:	4a38      	ldr	r2, [pc, #224]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e8be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e8c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 80a1 	beq.w	800ea10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e8ce:	4b34      	ldr	r3, [pc, #208]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	f003 030c 	and.w	r3, r3, #12
 800e8d6:	2b08      	cmp	r3, #8
 800e8d8:	d05c      	beq.n	800e994 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d141      	bne.n	800e966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e8e2:	4b31      	ldr	r3, [pc, #196]	@ (800e9a8 <HAL_RCC_OscConfig+0x478>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e8e8:	f7fd fd16 	bl	800c318 <HAL_GetTick>
 800e8ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8ee:	e008      	b.n	800e902 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e8f0:	f7fd fd12 	bl	800c318 <HAL_GetTick>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	2b02      	cmp	r3, #2
 800e8fc:	d901      	bls.n	800e902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e8fe:	2303      	movs	r3, #3
 800e900:	e087      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e902:	4b27      	ldr	r3, [pc, #156]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1f0      	bne.n	800e8f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	69da      	ldr	r2, [r3, #28]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	431a      	orrs	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91c:	019b      	lsls	r3, r3, #6
 800e91e:	431a      	orrs	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e924:	085b      	lsrs	r3, r3, #1
 800e926:	3b01      	subs	r3, #1
 800e928:	041b      	lsls	r3, r3, #16
 800e92a:	431a      	orrs	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e930:	061b      	lsls	r3, r3, #24
 800e932:	491b      	ldr	r1, [pc, #108]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e934:	4313      	orrs	r3, r2
 800e936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e938:	4b1b      	ldr	r3, [pc, #108]	@ (800e9a8 <HAL_RCC_OscConfig+0x478>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e93e:	f7fd fceb 	bl	800c318 <HAL_GetTick>
 800e942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e944:	e008      	b.n	800e958 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e946:	f7fd fce7 	bl	800c318 <HAL_GetTick>
 800e94a:	4602      	mov	r2, r0
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	2b02      	cmp	r3, #2
 800e952:	d901      	bls.n	800e958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e954:	2303      	movs	r3, #3
 800e956:	e05c      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e958:	4b11      	ldr	r3, [pc, #68]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0f0      	beq.n	800e946 <HAL_RCC_OscConfig+0x416>
 800e964:	e054      	b.n	800ea10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e966:	4b10      	ldr	r3, [pc, #64]	@ (800e9a8 <HAL_RCC_OscConfig+0x478>)
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e96c:	f7fd fcd4 	bl	800c318 <HAL_GetTick>
 800e970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e972:	e008      	b.n	800e986 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e974:	f7fd fcd0 	bl	800c318 <HAL_GetTick>
 800e978:	4602      	mov	r2, r0
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d901      	bls.n	800e986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e982:	2303      	movs	r3, #3
 800e984:	e045      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e986:	4b06      	ldr	r3, [pc, #24]	@ (800e9a0 <HAL_RCC_OscConfig+0x470>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1f0      	bne.n	800e974 <HAL_RCC_OscConfig+0x444>
 800e992:	e03d      	b.n	800ea10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d107      	bne.n	800e9ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e038      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
 800e9a0:	40023800 	.word	0x40023800
 800e9a4:	40007000 	.word	0x40007000
 800e9a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e9ac:	4b1b      	ldr	r3, [pc, #108]	@ (800ea1c <HAL_RCC_OscConfig+0x4ec>)
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	699b      	ldr	r3, [r3, #24]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d028      	beq.n	800ea0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d121      	bne.n	800ea0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d11a      	bne.n	800ea0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e9dc:	4013      	ands	r3, r2
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e9e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d111      	bne.n	800ea0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9f2:	085b      	lsrs	r3, r3, #1
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d107      	bne.n	800ea0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d001      	beq.n	800ea10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e000      	b.n	800ea12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	40023800 	.word	0x40023800

0800ea20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d101      	bne.n	800ea34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	e0cc      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ea34:	4b68      	ldr	r3, [pc, #416]	@ (800ebd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 0307 	and.w	r3, r3, #7
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d90c      	bls.n	800ea5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea42:	4b65      	ldr	r3, [pc, #404]	@ (800ebd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	b2d2      	uxtb	r2, r2
 800ea48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea4a:	4b63      	ldr	r3, [pc, #396]	@ (800ebd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f003 0307 	and.w	r3, r3, #7
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d001      	beq.n	800ea5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e0b8      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f003 0302 	and.w	r3, r3, #2
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d020      	beq.n	800eaaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 0304 	and.w	r3, r3, #4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d005      	beq.n	800ea80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ea74:	4b59      	ldr	r3, [pc, #356]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	4a58      	ldr	r2, [pc, #352]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800ea7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ea7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f003 0308 	and.w	r3, r3, #8
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d005      	beq.n	800ea98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ea8c:	4b53      	ldr	r3, [pc, #332]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	4a52      	ldr	r2, [pc, #328]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800ea92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ea96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ea98:	4b50      	ldr	r3, [pc, #320]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	494d      	ldr	r1, [pc, #308]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d044      	beq.n	800eb40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d107      	bne.n	800eace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eabe:	4b47      	ldr	r3, [pc, #284]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d119      	bne.n	800eafe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	e07f      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d003      	beq.n	800eade <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eada:	2b03      	cmp	r3, #3
 800eadc:	d107      	bne.n	800eaee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eade:	4b3f      	ldr	r3, [pc, #252]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d109      	bne.n	800eafe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e06f      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eaee:	4b3b      	ldr	r3, [pc, #236]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f003 0302 	and.w	r3, r3, #2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e067      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eafe:	4b37      	ldr	r3, [pc, #220]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	f023 0203 	bic.w	r2, r3, #3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	4934      	ldr	r1, [pc, #208]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800eb10:	f7fd fc02 	bl	800c318 <HAL_GetTick>
 800eb14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb16:	e00a      	b.n	800eb2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eb18:	f7fd fbfe 	bl	800c318 <HAL_GetTick>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d901      	bls.n	800eb2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	e04f      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb2e:	4b2b      	ldr	r3, [pc, #172]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	f003 020c 	and.w	r2, r3, #12
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d1eb      	bne.n	800eb18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eb40:	4b25      	ldr	r3, [pc, #148]	@ (800ebd8 <HAL_RCC_ClockConfig+0x1b8>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f003 0307 	and.w	r3, r3, #7
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d20c      	bcs.n	800eb68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb4e:	4b22      	ldr	r3, [pc, #136]	@ (800ebd8 <HAL_RCC_ClockConfig+0x1b8>)
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	b2d2      	uxtb	r2, r2
 800eb54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb56:	4b20      	ldr	r3, [pc, #128]	@ (800ebd8 <HAL_RCC_ClockConfig+0x1b8>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d001      	beq.n	800eb68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800eb64:	2301      	movs	r3, #1
 800eb66:	e032      	b.n	800ebce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f003 0304 	and.w	r3, r3, #4
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d008      	beq.n	800eb86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eb74:	4b19      	ldr	r3, [pc, #100]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	4916      	ldr	r1, [pc, #88]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eb82:	4313      	orrs	r3, r2
 800eb84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f003 0308 	and.w	r3, r3, #8
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d009      	beq.n	800eba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eb92:	4b12      	ldr	r3, [pc, #72]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	691b      	ldr	r3, [r3, #16]
 800eb9e:	00db      	lsls	r3, r3, #3
 800eba0:	490e      	ldr	r1, [pc, #56]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800eba2:	4313      	orrs	r3, r2
 800eba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800eba6:	f000 f821 	bl	800ebec <HAL_RCC_GetSysClockFreq>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4b0b      	ldr	r3, [pc, #44]	@ (800ebdc <HAL_RCC_ClockConfig+0x1bc>)
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	091b      	lsrs	r3, r3, #4
 800ebb2:	f003 030f 	and.w	r3, r3, #15
 800ebb6:	490a      	ldr	r1, [pc, #40]	@ (800ebe0 <HAL_RCC_ClockConfig+0x1c0>)
 800ebb8:	5ccb      	ldrb	r3, [r1, r3]
 800ebba:	fa22 f303 	lsr.w	r3, r2, r3
 800ebbe:	4a09      	ldr	r2, [pc, #36]	@ (800ebe4 <HAL_RCC_ClockConfig+0x1c4>)
 800ebc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ebc2:	4b09      	ldr	r3, [pc, #36]	@ (800ebe8 <HAL_RCC_ClockConfig+0x1c8>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fd fb62 	bl	800c290 <HAL_InitTick>

  return HAL_OK;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	40023c00 	.word	0x40023c00
 800ebdc:	40023800 	.word	0x40023800
 800ebe0:	080177a4 	.word	0x080177a4
 800ebe4:	20000000 	.word	0x20000000
 800ebe8:	20000220 	.word	0x20000220

0800ebec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ebec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebf0:	b094      	sub	sp, #80	@ 0x50
 800ebf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec04:	4b79      	ldr	r3, [pc, #484]	@ (800edec <HAL_RCC_GetSysClockFreq+0x200>)
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	f003 030c 	and.w	r3, r3, #12
 800ec0c:	2b08      	cmp	r3, #8
 800ec0e:	d00d      	beq.n	800ec2c <HAL_RCC_GetSysClockFreq+0x40>
 800ec10:	2b08      	cmp	r3, #8
 800ec12:	f200 80e1 	bhi.w	800edd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d002      	beq.n	800ec20 <HAL_RCC_GetSysClockFreq+0x34>
 800ec1a:	2b04      	cmp	r3, #4
 800ec1c:	d003      	beq.n	800ec26 <HAL_RCC_GetSysClockFreq+0x3a>
 800ec1e:	e0db      	b.n	800edd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ec20:	4b73      	ldr	r3, [pc, #460]	@ (800edf0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ec22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ec24:	e0db      	b.n	800edde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ec26:	4b73      	ldr	r3, [pc, #460]	@ (800edf4 <HAL_RCC_GetSysClockFreq+0x208>)
 800ec28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ec2a:	e0d8      	b.n	800edde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec2c:	4b6f      	ldr	r3, [pc, #444]	@ (800edec <HAL_RCC_GetSysClockFreq+0x200>)
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ec36:	4b6d      	ldr	r3, [pc, #436]	@ (800edec <HAL_RCC_GetSysClockFreq+0x200>)
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d063      	beq.n	800ed0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec42:	4b6a      	ldr	r3, [pc, #424]	@ (800edec <HAL_RCC_GetSysClockFreq+0x200>)
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	099b      	lsrs	r3, r3, #6
 800ec48:	2200      	movs	r2, #0
 800ec4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ec4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec56:	2300      	movs	r3, #0
 800ec58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	f04f 0100 	mov.w	r1, #0
 800ec6a:	0159      	lsls	r1, r3, #5
 800ec6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ec70:	0150      	lsls	r0, r2, #5
 800ec72:	4602      	mov	r2, r0
 800ec74:	460b      	mov	r3, r1
 800ec76:	4621      	mov	r1, r4
 800ec78:	1a51      	subs	r1, r2, r1
 800ec7a:	6139      	str	r1, [r7, #16]
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	eb63 0301 	sbc.w	r3, r3, r1
 800ec82:	617b      	str	r3, [r7, #20]
 800ec84:	f04f 0200 	mov.w	r2, #0
 800ec88:	f04f 0300 	mov.w	r3, #0
 800ec8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ec90:	4659      	mov	r1, fp
 800ec92:	018b      	lsls	r3, r1, #6
 800ec94:	4651      	mov	r1, sl
 800ec96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ec9a:	4651      	mov	r1, sl
 800ec9c:	018a      	lsls	r2, r1, #6
 800ec9e:	4651      	mov	r1, sl
 800eca0:	ebb2 0801 	subs.w	r8, r2, r1
 800eca4:	4659      	mov	r1, fp
 800eca6:	eb63 0901 	sbc.w	r9, r3, r1
 800ecaa:	f04f 0200 	mov.w	r2, #0
 800ecae:	f04f 0300 	mov.w	r3, #0
 800ecb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ecb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ecba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ecbe:	4690      	mov	r8, r2
 800ecc0:	4699      	mov	r9, r3
 800ecc2:	4623      	mov	r3, r4
 800ecc4:	eb18 0303 	adds.w	r3, r8, r3
 800ecc8:	60bb      	str	r3, [r7, #8]
 800ecca:	462b      	mov	r3, r5
 800eccc:	eb49 0303 	adc.w	r3, r9, r3
 800ecd0:	60fb      	str	r3, [r7, #12]
 800ecd2:	f04f 0200 	mov.w	r2, #0
 800ecd6:	f04f 0300 	mov.w	r3, #0
 800ecda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ecde:	4629      	mov	r1, r5
 800ece0:	024b      	lsls	r3, r1, #9
 800ece2:	4621      	mov	r1, r4
 800ece4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ece8:	4621      	mov	r1, r4
 800ecea:	024a      	lsls	r2, r1, #9
 800ecec:	4610      	mov	r0, r2
 800ecee:	4619      	mov	r1, r3
 800ecf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ecf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ecfc:	f7f1 ffbc 	bl	8000c78 <__aeabi_uldivmod>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4613      	mov	r3, r2
 800ed06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed08:	e058      	b.n	800edbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed0a:	4b38      	ldr	r3, [pc, #224]	@ (800edec <HAL_RCC_GetSysClockFreq+0x200>)
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	099b      	lsrs	r3, r3, #6
 800ed10:	2200      	movs	r2, #0
 800ed12:	4618      	mov	r0, r3
 800ed14:	4611      	mov	r1, r2
 800ed16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ed1a:	623b      	str	r3, [r7, #32]
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ed24:	4642      	mov	r2, r8
 800ed26:	464b      	mov	r3, r9
 800ed28:	f04f 0000 	mov.w	r0, #0
 800ed2c:	f04f 0100 	mov.w	r1, #0
 800ed30:	0159      	lsls	r1, r3, #5
 800ed32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ed36:	0150      	lsls	r0, r2, #5
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4641      	mov	r1, r8
 800ed3e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ed42:	4649      	mov	r1, r9
 800ed44:	eb63 0b01 	sbc.w	fp, r3, r1
 800ed48:	f04f 0200 	mov.w	r2, #0
 800ed4c:	f04f 0300 	mov.w	r3, #0
 800ed50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ed54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ed58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ed5c:	ebb2 040a 	subs.w	r4, r2, sl
 800ed60:	eb63 050b 	sbc.w	r5, r3, fp
 800ed64:	f04f 0200 	mov.w	r2, #0
 800ed68:	f04f 0300 	mov.w	r3, #0
 800ed6c:	00eb      	lsls	r3, r5, #3
 800ed6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ed72:	00e2      	lsls	r2, r4, #3
 800ed74:	4614      	mov	r4, r2
 800ed76:	461d      	mov	r5, r3
 800ed78:	4643      	mov	r3, r8
 800ed7a:	18e3      	adds	r3, r4, r3
 800ed7c:	603b      	str	r3, [r7, #0]
 800ed7e:	464b      	mov	r3, r9
 800ed80:	eb45 0303 	adc.w	r3, r5, r3
 800ed84:	607b      	str	r3, [r7, #4]
 800ed86:	f04f 0200 	mov.w	r2, #0
 800ed8a:	f04f 0300 	mov.w	r3, #0
 800ed8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ed92:	4629      	mov	r1, r5
 800ed94:	028b      	lsls	r3, r1, #10
 800ed96:	4621      	mov	r1, r4
 800ed98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	028a      	lsls	r2, r1, #10
 800eda0:	4610      	mov	r0, r2
 800eda2:	4619      	mov	r1, r3
 800eda4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eda6:	2200      	movs	r2, #0
 800eda8:	61bb      	str	r3, [r7, #24]
 800edaa:	61fa      	str	r2, [r7, #28]
 800edac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800edb0:	f7f1 ff62 	bl	8000c78 <__aeabi_uldivmod>
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4613      	mov	r3, r2
 800edba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800edbc:	4b0b      	ldr	r3, [pc, #44]	@ (800edec <HAL_RCC_GetSysClockFreq+0x200>)
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	0c1b      	lsrs	r3, r3, #16
 800edc2:	f003 0303 	and.w	r3, r3, #3
 800edc6:	3301      	adds	r3, #1
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800edcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800edce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800edd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800edd6:	e002      	b.n	800edde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800edd8:	4b05      	ldr	r3, [pc, #20]	@ (800edf0 <HAL_RCC_GetSysClockFreq+0x204>)
 800edda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800eddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800edde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3750      	adds	r7, #80	@ 0x50
 800ede4:	46bd      	mov	sp, r7
 800ede6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800edea:	bf00      	nop
 800edec:	40023800 	.word	0x40023800
 800edf0:	00f42400 	.word	0x00f42400
 800edf4:	007a1200 	.word	0x007a1200

0800edf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800edf8:	b480      	push	{r7}
 800edfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800edfc:	4b03      	ldr	r3, [pc, #12]	@ (800ee0c <HAL_RCC_GetHCLKFreq+0x14>)
 800edfe:	681b      	ldr	r3, [r3, #0]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	20000000 	.word	0x20000000

0800ee10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ee14:	f7ff fff0 	bl	800edf8 <HAL_RCC_GetHCLKFreq>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	4b05      	ldr	r3, [pc, #20]	@ (800ee30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	0a9b      	lsrs	r3, r3, #10
 800ee20:	f003 0307 	and.w	r3, r3, #7
 800ee24:	4903      	ldr	r1, [pc, #12]	@ (800ee34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ee26:	5ccb      	ldrb	r3, [r1, r3]
 800ee28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	40023800 	.word	0x40023800
 800ee34:	080177b4 	.word	0x080177b4

0800ee38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ee3c:	f7ff ffdc 	bl	800edf8 <HAL_RCC_GetHCLKFreq>
 800ee40:	4602      	mov	r2, r0
 800ee42:	4b05      	ldr	r3, [pc, #20]	@ (800ee58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	0b5b      	lsrs	r3, r3, #13
 800ee48:	f003 0307 	and.w	r3, r3, #7
 800ee4c:	4903      	ldr	r1, [pc, #12]	@ (800ee5c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee4e:	5ccb      	ldrb	r3, [r1, r3]
 800ee50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	40023800 	.word	0x40023800
 800ee5c:	080177b4 	.word	0x080177b4

0800ee60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d101      	bne.n	800ee72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e07b      	b.n	800ef6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d108      	bne.n	800ee8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee82:	d009      	beq.n	800ee98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	61da      	str	r2, [r3, #28]
 800ee8a:	e005      	b.n	800ee98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d106      	bne.n	800eeb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7f3 f9d8 	bl	8002268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2202      	movs	r2, #2
 800eebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eece:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800eee0:	431a      	orrs	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eeea:	431a      	orrs	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	f003 0302 	and.w	r3, r3, #2
 800eef4:	431a      	orrs	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	f003 0301 	and.w	r3, r3, #1
 800eefe:	431a      	orrs	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	699b      	ldr	r3, [r3, #24]
 800ef04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	69db      	ldr	r3, [r3, #28]
 800ef0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef12:	431a      	orrs	r2, r3
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6a1b      	ldr	r3, [r3, #32]
 800ef18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef1c:	ea42 0103 	orr.w	r1, r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	430a      	orrs	r2, r1
 800ef2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	699b      	ldr	r3, [r3, #24]
 800ef34:	0c1b      	lsrs	r3, r3, #16
 800ef36:	f003 0104 	and.w	r1, r3, #4
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef3e:	f003 0210 	and.w	r2, r3, #16
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	430a      	orrs	r2, r1
 800ef48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	69da      	ldr	r2, [r3, #28]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ef58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2201      	movs	r2, #1
 800ef64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b088      	sub	sp, #32
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	60b9      	str	r1, [r7, #8]
 800ef7c:	603b      	str	r3, [r7, #0]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef82:	f7fd f9c9 	bl	800c318 <HAL_GetTick>
 800ef86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800ef88:	88fb      	ldrh	r3, [r7, #6]
 800ef8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d001      	beq.n	800ef9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800ef98:	2302      	movs	r3, #2
 800ef9a:	e12a      	b.n	800f1f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <HAL_SPI_Transmit+0x36>
 800efa2:	88fb      	ldrh	r3, [r7, #6]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d101      	bne.n	800efac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e122      	b.n	800f1f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d101      	bne.n	800efba <HAL_SPI_Transmit+0x48>
 800efb6:	2302      	movs	r3, #2
 800efb8:	e11b      	b.n	800f1f2 <HAL_SPI_Transmit+0x280>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2201      	movs	r2, #1
 800efbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2203      	movs	r2, #3
 800efc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2200      	movs	r2, #0
 800efce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	88fa      	ldrh	r2, [r7, #6]
 800efda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	88fa      	ldrh	r2, [r7, #6]
 800efe0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2200      	movs	r2, #0
 800efe6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2200      	movs	r2, #0
 800efec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2200      	movs	r2, #0
 800eff8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2200      	movs	r2, #0
 800effe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f008:	d10f      	bne.n	800f02a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f034:	2b40      	cmp	r3, #64	@ 0x40
 800f036:	d007      	beq.n	800f048 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f050:	d152      	bne.n	800f0f8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <HAL_SPI_Transmit+0xee>
 800f05a:	8b7b      	ldrh	r3, [r7, #26]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d145      	bne.n	800f0ec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f064:	881a      	ldrh	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f070:	1c9a      	adds	r2, r3, #2
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	3b01      	subs	r3, #1
 800f07e:	b29a      	uxth	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f084:	e032      	b.n	800f0ec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	f003 0302 	and.w	r3, r3, #2
 800f090:	2b02      	cmp	r3, #2
 800f092:	d112      	bne.n	800f0ba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f098:	881a      	ldrh	r2, [r3, #0]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0a4:	1c9a      	adds	r2, r3, #2
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f0b8:	e018      	b.n	800f0ec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0ba:	f7fd f92d 	bl	800c318 <HAL_GetTick>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d803      	bhi.n	800f0d2 <HAL_SPI_Transmit+0x160>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d0:	d102      	bne.n	800f0d8 <HAL_SPI_Transmit+0x166>
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	e082      	b.n	800f1f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1c7      	bne.n	800f086 <HAL_SPI_Transmit+0x114>
 800f0f6:	e053      	b.n	800f1a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <HAL_SPI_Transmit+0x194>
 800f100:	8b7b      	ldrh	r3, [r7, #26]
 800f102:	2b01      	cmp	r3, #1
 800f104:	d147      	bne.n	800f196 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	330c      	adds	r3, #12
 800f110:	7812      	ldrb	r2, [r2, #0]
 800f112:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f118:	1c5a      	adds	r2, r3, #1
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f122:	b29b      	uxth	r3, r3
 800f124:	3b01      	subs	r3, #1
 800f126:	b29a      	uxth	r2, r3
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f12c:	e033      	b.n	800f196 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	f003 0302 	and.w	r3, r3, #2
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d113      	bne.n	800f164 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	330c      	adds	r3, #12
 800f146:	7812      	ldrb	r2, [r2, #0]
 800f148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f158:	b29b      	uxth	r3, r3
 800f15a:	3b01      	subs	r3, #1
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f162:	e018      	b.n	800f196 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f164:	f7fd f8d8 	bl	800c318 <HAL_GetTick>
 800f168:	4602      	mov	r2, r0
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	683a      	ldr	r2, [r7, #0]
 800f170:	429a      	cmp	r2, r3
 800f172:	d803      	bhi.n	800f17c <HAL_SPI_Transmit+0x20a>
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f17a:	d102      	bne.n	800f182 <HAL_SPI_Transmit+0x210>
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d109      	bne.n	800f196 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2201      	movs	r2, #1
 800f186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f192:	2303      	movs	r3, #3
 800f194:	e02d      	b.n	800f1f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1c6      	bne.n	800f12e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 fa59 	bl	800f65c <SPI_EndRxTxTransaction>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2220      	movs	r2, #32
 800f1b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10a      	bne.n	800f1d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f1be:	2300      	movs	r3, #0
 800f1c0:	617b      	str	r3, [r7, #20]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	617b      	str	r3, [r7, #20]
 800f1d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e000      	b.n	800f1f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f1f0:	2300      	movs	r3, #0
  }
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3720      	adds	r7, #32
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b08a      	sub	sp, #40	@ 0x28
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	60f8      	str	r0, [r7, #12]
 800f202:	60b9      	str	r1, [r7, #8]
 800f204:	607a      	str	r2, [r7, #4]
 800f206:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f208:	2301      	movs	r3, #1
 800f20a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f20c:	f7fd f884 	bl	800c318 <HAL_GetTick>
 800f210:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f218:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f220:	887b      	ldrh	r3, [r7, #2]
 800f222:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f224:	7ffb      	ldrb	r3, [r7, #31]
 800f226:	2b01      	cmp	r3, #1
 800f228:	d00c      	beq.n	800f244 <HAL_SPI_TransmitReceive+0x4a>
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f230:	d106      	bne.n	800f240 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d102      	bne.n	800f240 <HAL_SPI_TransmitReceive+0x46>
 800f23a:	7ffb      	ldrb	r3, [r7, #31]
 800f23c:	2b04      	cmp	r3, #4
 800f23e:	d001      	beq.n	800f244 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f240:	2302      	movs	r3, #2
 800f242:	e17f      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d005      	beq.n	800f256 <HAL_SPI_TransmitReceive+0x5c>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d002      	beq.n	800f256 <HAL_SPI_TransmitReceive+0x5c>
 800f250:	887b      	ldrh	r3, [r7, #2]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d101      	bne.n	800f25a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f256:	2301      	movs	r3, #1
 800f258:	e174      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f260:	2b01      	cmp	r3, #1
 800f262:	d101      	bne.n	800f268 <HAL_SPI_TransmitReceive+0x6e>
 800f264:	2302      	movs	r3, #2
 800f266:	e16d      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d003      	beq.n	800f284 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2205      	movs	r2, #5
 800f280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2200      	movs	r2, #0
 800f288:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	887a      	ldrh	r2, [r7, #2]
 800f294:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	887a      	ldrh	r2, [r7, #2]
 800f29a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	68ba      	ldr	r2, [r7, #8]
 800f2a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	887a      	ldrh	r2, [r7, #2]
 800f2a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	887a      	ldrh	r2, [r7, #2]
 800f2ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2c4:	2b40      	cmp	r3, #64	@ 0x40
 800f2c6:	d007      	beq.n	800f2d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f2d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2e0:	d17e      	bne.n	800f3e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <HAL_SPI_TransmitReceive+0xf6>
 800f2ea:	8afb      	ldrh	r3, [r7, #22]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d16c      	bne.n	800f3ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2f4:	881a      	ldrh	r2, [r3, #0]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f300:	1c9a      	adds	r2, r3, #2
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	3b01      	subs	r3, #1
 800f30e:	b29a      	uxth	r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f314:	e059      	b.n	800f3ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	f003 0302 	and.w	r3, r3, #2
 800f320:	2b02      	cmp	r3, #2
 800f322:	d11b      	bne.n	800f35c <HAL_SPI_TransmitReceive+0x162>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f328:	b29b      	uxth	r3, r3
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d016      	beq.n	800f35c <HAL_SPI_TransmitReceive+0x162>
 800f32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f330:	2b01      	cmp	r3, #1
 800f332:	d113      	bne.n	800f35c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f338:	881a      	ldrh	r2, [r3, #0]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f344:	1c9a      	adds	r2, r3, #2
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f34e:	b29b      	uxth	r3, r3
 800f350:	3b01      	subs	r3, #1
 800f352:	b29a      	uxth	r2, r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f358:	2300      	movs	r3, #0
 800f35a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	f003 0301 	and.w	r3, r3, #1
 800f366:	2b01      	cmp	r3, #1
 800f368:	d119      	bne.n	800f39e <HAL_SPI_TransmitReceive+0x1a4>
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f36e:	b29b      	uxth	r3, r3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d014      	beq.n	800f39e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68da      	ldr	r2, [r3, #12]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f37e:	b292      	uxth	r2, r2
 800f380:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f386:	1c9a      	adds	r2, r3, #2
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f390:	b29b      	uxth	r3, r3
 800f392:	3b01      	subs	r3, #1
 800f394:	b29a      	uxth	r2, r3
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f39a:	2301      	movs	r3, #1
 800f39c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f39e:	f7fc ffbb 	bl	800c318 <HAL_GetTick>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	1ad3      	subs	r3, r2, r3
 800f3a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d80d      	bhi.n	800f3ca <HAL_SPI_TransmitReceive+0x1d0>
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b4:	d009      	beq.n	800f3ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	e0bc      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d1a0      	bne.n	800f316 <HAL_SPI_TransmitReceive+0x11c>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d19b      	bne.n	800f316 <HAL_SPI_TransmitReceive+0x11c>
 800f3de:	e082      	b.n	800f4e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <HAL_SPI_TransmitReceive+0x1f4>
 800f3e8:	8afb      	ldrh	r3, [r7, #22]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d171      	bne.n	800f4d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	330c      	adds	r3, #12
 800f3f8:	7812      	ldrb	r2, [r2, #0]
 800f3fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	3b01      	subs	r3, #1
 800f40e:	b29a      	uxth	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f414:	e05d      	b.n	800f4d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	f003 0302 	and.w	r3, r3, #2
 800f420:	2b02      	cmp	r3, #2
 800f422:	d11c      	bne.n	800f45e <HAL_SPI_TransmitReceive+0x264>
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f428:	b29b      	uxth	r3, r3
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d017      	beq.n	800f45e <HAL_SPI_TransmitReceive+0x264>
 800f42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f430:	2b01      	cmp	r3, #1
 800f432:	d114      	bne.n	800f45e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	330c      	adds	r3, #12
 800f43e:	7812      	ldrb	r2, [r2, #0]
 800f440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f450:	b29b      	uxth	r3, r3
 800f452:	3b01      	subs	r3, #1
 800f454:	b29a      	uxth	r2, r3
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f45a:	2300      	movs	r3, #0
 800f45c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d119      	bne.n	800f4a0 <HAL_SPI_TransmitReceive+0x2a6>
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f470:	b29b      	uxth	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d014      	beq.n	800f4a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	68da      	ldr	r2, [r3, #12]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f492:	b29b      	uxth	r3, r3
 800f494:	3b01      	subs	r3, #1
 800f496:	b29a      	uxth	r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f49c:	2301      	movs	r3, #1
 800f49e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f4a0:	f7fc ff3a 	bl	800c318 <HAL_GetTick>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d803      	bhi.n	800f4b8 <HAL_SPI_TransmitReceive+0x2be>
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b6:	d102      	bne.n	800f4be <HAL_SPI_TransmitReceive+0x2c4>
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d109      	bne.n	800f4d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f4ce:	2303      	movs	r3, #3
 800f4d0:	e038      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d19c      	bne.n	800f416 <HAL_SPI_TransmitReceive+0x21c>
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d197      	bne.n	800f416 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f4e6:	6a3a      	ldr	r2, [r7, #32]
 800f4e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f000 f8b6 	bl	800f65c <SPI_EndRxTxTransaction>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d008      	beq.n	800f508 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2220      	movs	r2, #32
 800f4fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f504:	2301      	movs	r3, #1
 800f506:	e01d      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10a      	bne.n	800f526 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f510:	2300      	movs	r3, #0
 800f512:	613b      	str	r3, [r7, #16]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	613b      	str	r3, [r7, #16]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	613b      	str	r3, [r7, #16]
 800f524:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2201      	movs	r2, #1
 800f52a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2200      	movs	r2, #0
 800f532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	e000      	b.n	800f544 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f542:	2300      	movs	r3, #0
  }
}
 800f544:	4618      	mov	r0, r3
 800f546:	3728      	adds	r7, #40	@ 0x28
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	4613      	mov	r3, r2
 800f55a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f55c:	f7fc fedc 	bl	800c318 <HAL_GetTick>
 800f560:	4602      	mov	r2, r0
 800f562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f564:	1a9b      	subs	r3, r3, r2
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	4413      	add	r3, r2
 800f56a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f56c:	f7fc fed4 	bl	800c318 <HAL_GetTick>
 800f570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f572:	4b39      	ldr	r3, [pc, #228]	@ (800f658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	015b      	lsls	r3, r3, #5
 800f578:	0d1b      	lsrs	r3, r3, #20
 800f57a:	69fa      	ldr	r2, [r7, #28]
 800f57c:	fb02 f303 	mul.w	r3, r2, r3
 800f580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f582:	e055      	b.n	800f630 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58a:	d051      	beq.n	800f630 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f58c:	f7fc fec4 	bl	800c318 <HAL_GetTick>
 800f590:	4602      	mov	r2, r0
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	69fa      	ldr	r2, [r7, #28]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d902      	bls.n	800f5a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d13d      	bne.n	800f61e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	685a      	ldr	r2, [r3, #4]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f5b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f5ba:	d111      	bne.n	800f5e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5c4:	d004      	beq.n	800f5d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5ce:	d107      	bne.n	800f5e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f5e8:	d10f      	bne.n	800f60a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2201      	movs	r2, #1
 800f60e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2200      	movs	r2, #0
 800f616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e018      	b.n	800f650 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d102      	bne.n	800f62a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800f624:	2300      	movs	r3, #0
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	e002      	b.n	800f630 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	3b01      	subs	r3, #1
 800f62e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	689a      	ldr	r2, [r3, #8]
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	4013      	ands	r3, r2
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	bf0c      	ite	eq
 800f640:	2301      	moveq	r3, #1
 800f642:	2300      	movne	r3, #0
 800f644:	b2db      	uxtb	r3, r3
 800f646:	461a      	mov	r2, r3
 800f648:	79fb      	ldrb	r3, [r7, #7]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d19a      	bne.n	800f584 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3720      	adds	r7, #32
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	20000000 	.word	0x20000000

0800f65c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b088      	sub	sp, #32
 800f660:	af02      	add	r7, sp, #8
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2201      	movs	r2, #1
 800f670:	2102      	movs	r1, #2
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f7ff ff6a 	bl	800f54c <SPI_WaitFlagStateUntilTimeout>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d007      	beq.n	800f68e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f682:	f043 0220 	orr.w	r2, r3, #32
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800f68a:	2303      	movs	r3, #3
 800f68c:	e032      	b.n	800f6f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f68e:	4b1b      	ldr	r3, [pc, #108]	@ (800f6fc <SPI_EndRxTxTransaction+0xa0>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a1b      	ldr	r2, [pc, #108]	@ (800f700 <SPI_EndRxTxTransaction+0xa4>)
 800f694:	fba2 2303 	umull	r2, r3, r2, r3
 800f698:	0d5b      	lsrs	r3, r3, #21
 800f69a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f69e:	fb02 f303 	mul.w	r3, r2, r3
 800f6a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f6ac:	d112      	bne.n	800f6d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	2180      	movs	r1, #128	@ 0x80
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f7ff ff47 	bl	800f54c <SPI_WaitFlagStateUntilTimeout>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d016      	beq.n	800f6f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6c8:	f043 0220 	orr.w	r2, r3, #32
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f6d0:	2303      	movs	r3, #3
 800f6d2:	e00f      	b.n	800f6f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6ea:	2b80      	cmp	r3, #128	@ 0x80
 800f6ec:	d0f2      	beq.n	800f6d4 <SPI_EndRxTxTransaction+0x78>
 800f6ee:	e000      	b.n	800f6f2 <SPI_EndRxTxTransaction+0x96>
        break;
 800f6f0:	bf00      	nop
  }

  return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3718      	adds	r7, #24
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	20000000 	.word	0x20000000
 800f700:	165e9f81 	.word	0x165e9f81

0800f704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d101      	bne.n	800f716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	e041      	b.n	800f79a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7f2 fde4 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3304      	adds	r3, #4
 800f740:	4619      	mov	r1, r3
 800f742:	4610      	mov	r0, r2
 800f744:	f000 fa70 	bl	800fc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2201      	movs	r2, #1
 800f774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2201      	movs	r2, #1
 800f77c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d001      	beq.n	800f7bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	e044      	b.n	800f846 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2202      	movs	r2, #2
 800f7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68da      	ldr	r2, [r3, #12]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f042 0201 	orr.w	r2, r2, #1
 800f7d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800f854 <HAL_TIM_Base_Start_IT+0xb0>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d018      	beq.n	800f810 <HAL_TIM_Base_Start_IT+0x6c>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7e6:	d013      	beq.n	800f810 <HAL_TIM_Base_Start_IT+0x6c>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a1a      	ldr	r2, [pc, #104]	@ (800f858 <HAL_TIM_Base_Start_IT+0xb4>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d00e      	beq.n	800f810 <HAL_TIM_Base_Start_IT+0x6c>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a19      	ldr	r2, [pc, #100]	@ (800f85c <HAL_TIM_Base_Start_IT+0xb8>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d009      	beq.n	800f810 <HAL_TIM_Base_Start_IT+0x6c>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a17      	ldr	r2, [pc, #92]	@ (800f860 <HAL_TIM_Base_Start_IT+0xbc>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d004      	beq.n	800f810 <HAL_TIM_Base_Start_IT+0x6c>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a16      	ldr	r2, [pc, #88]	@ (800f864 <HAL_TIM_Base_Start_IT+0xc0>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d111      	bne.n	800f834 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2b06      	cmp	r3, #6
 800f820:	d010      	beq.n	800f844 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f042 0201 	orr.w	r2, r2, #1
 800f830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f832:	e007      	b.n	800f844 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f042 0201 	orr.w	r2, r2, #1
 800f842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f844:	2300      	movs	r3, #0
}
 800f846:	4618      	mov	r0, r3
 800f848:	3714      	adds	r7, #20
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	40010000 	.word	0x40010000
 800f858:	40000400 	.word	0x40000400
 800f85c:	40000800 	.word	0x40000800
 800f860:	40000c00 	.word	0x40000c00
 800f864:	40014000 	.word	0x40014000

0800f868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	691b      	ldr	r3, [r3, #16]
 800f87e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	f003 0302 	and.w	r3, r3, #2
 800f886:	2b00      	cmp	r3, #0
 800f888:	d020      	beq.n	800f8cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f003 0302 	and.w	r3, r3, #2
 800f890:	2b00      	cmp	r3, #0
 800f892:	d01b      	beq.n	800f8cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f06f 0202 	mvn.w	r2, #2
 800f89c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	699b      	ldr	r3, [r3, #24]
 800f8aa:	f003 0303 	and.w	r3, r3, #3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d003      	beq.n	800f8ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 f999 	bl	800fbea <HAL_TIM_IC_CaptureCallback>
 800f8b8:	e005      	b.n	800f8c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 f98b 	bl	800fbd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f99c 	bl	800fbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	f003 0304 	and.w	r3, r3, #4
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d020      	beq.n	800f918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f003 0304 	and.w	r3, r3, #4
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d01b      	beq.n	800f918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f06f 0204 	mvn.w	r2, #4
 800f8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2202      	movs	r2, #2
 800f8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	699b      	ldr	r3, [r3, #24]
 800f8f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d003      	beq.n	800f906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 f973 	bl	800fbea <HAL_TIM_IC_CaptureCallback>
 800f904:	e005      	b.n	800f912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 f965 	bl	800fbd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 f976 	bl	800fbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f003 0308 	and.w	r3, r3, #8
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d020      	beq.n	800f964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f003 0308 	and.w	r3, r3, #8
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d01b      	beq.n	800f964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f06f 0208 	mvn.w	r2, #8
 800f934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2204      	movs	r2, #4
 800f93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	f003 0303 	and.w	r3, r3, #3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d003      	beq.n	800f952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f94d 	bl	800fbea <HAL_TIM_IC_CaptureCallback>
 800f950:	e005      	b.n	800f95e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f93f 	bl	800fbd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f950 	bl	800fbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	f003 0310 	and.w	r3, r3, #16
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d020      	beq.n	800f9b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f003 0310 	and.w	r3, r3, #16
 800f974:	2b00      	cmp	r3, #0
 800f976:	d01b      	beq.n	800f9b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f06f 0210 	mvn.w	r2, #16
 800f980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2208      	movs	r2, #8
 800f986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	69db      	ldr	r3, [r3, #28]
 800f98e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f992:	2b00      	cmp	r3, #0
 800f994:	d003      	beq.n	800f99e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f927 	bl	800fbea <HAL_TIM_IC_CaptureCallback>
 800f99c:	e005      	b.n	800f9aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f919 	bl	800fbd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 f92a 	bl	800fbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	f003 0301 	and.w	r3, r3, #1
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00c      	beq.n	800f9d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f003 0301 	and.w	r3, r3, #1
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d007      	beq.n	800f9d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f06f 0201 	mvn.w	r2, #1
 800f9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7f1 fd38 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00c      	beq.n	800f9f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d007      	beq.n	800f9f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fab0 	bl	800ff58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d00c      	beq.n	800fa1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d007      	beq.n	800fa1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fa14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 f8fb 	bl	800fc12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	f003 0320 	and.w	r3, r3, #32
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00c      	beq.n	800fa40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f003 0320 	and.w	r3, r3, #32
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d007      	beq.n	800fa40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f06f 0220 	mvn.w	r2, #32
 800fa38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 fa82 	bl	800ff44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa40:	bf00      	nop
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fa52:	2300      	movs	r3, #0
 800fa54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d101      	bne.n	800fa64 <HAL_TIM_ConfigClockSource+0x1c>
 800fa60:	2302      	movs	r3, #2
 800fa62:	e0b4      	b.n	800fbce <HAL_TIM_ConfigClockSource+0x186>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2201      	movs	r2, #1
 800fa68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2202      	movs	r2, #2
 800fa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fa82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fa8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa9c:	d03e      	beq.n	800fb1c <HAL_TIM_ConfigClockSource+0xd4>
 800fa9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800faa2:	f200 8087 	bhi.w	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800faa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800faaa:	f000 8086 	beq.w	800fbba <HAL_TIM_ConfigClockSource+0x172>
 800faae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fab2:	d87f      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fab4:	2b70      	cmp	r3, #112	@ 0x70
 800fab6:	d01a      	beq.n	800faee <HAL_TIM_ConfigClockSource+0xa6>
 800fab8:	2b70      	cmp	r3, #112	@ 0x70
 800faba:	d87b      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fabc:	2b60      	cmp	r3, #96	@ 0x60
 800fabe:	d050      	beq.n	800fb62 <HAL_TIM_ConfigClockSource+0x11a>
 800fac0:	2b60      	cmp	r3, #96	@ 0x60
 800fac2:	d877      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fac4:	2b50      	cmp	r3, #80	@ 0x50
 800fac6:	d03c      	beq.n	800fb42 <HAL_TIM_ConfigClockSource+0xfa>
 800fac8:	2b50      	cmp	r3, #80	@ 0x50
 800faca:	d873      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800facc:	2b40      	cmp	r3, #64	@ 0x40
 800face:	d058      	beq.n	800fb82 <HAL_TIM_ConfigClockSource+0x13a>
 800fad0:	2b40      	cmp	r3, #64	@ 0x40
 800fad2:	d86f      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fad4:	2b30      	cmp	r3, #48	@ 0x30
 800fad6:	d064      	beq.n	800fba2 <HAL_TIM_ConfigClockSource+0x15a>
 800fad8:	2b30      	cmp	r3, #48	@ 0x30
 800fada:	d86b      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fadc:	2b20      	cmp	r3, #32
 800fade:	d060      	beq.n	800fba2 <HAL_TIM_ConfigClockSource+0x15a>
 800fae0:	2b20      	cmp	r3, #32
 800fae2:	d867      	bhi.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d05c      	beq.n	800fba2 <HAL_TIM_ConfigClockSource+0x15a>
 800fae8:	2b10      	cmp	r3, #16
 800faea:	d05a      	beq.n	800fba2 <HAL_TIM_ConfigClockSource+0x15a>
 800faec:	e062      	b.n	800fbb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fafe:	f000 f993 	bl	800fe28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fb10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	68ba      	ldr	r2, [r7, #8]
 800fb18:	609a      	str	r2, [r3, #8]
      break;
 800fb1a:	e04f      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb2c:	f000 f97c 	bl	800fe28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	689a      	ldr	r2, [r3, #8]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fb3e:	609a      	str	r2, [r3, #8]
      break;
 800fb40:	e03c      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f000 f8f0 	bl	800fd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2150      	movs	r1, #80	@ 0x50
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f000 f949 	bl	800fdf2 <TIM_ITRx_SetConfig>
      break;
 800fb60:	e02c      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb6e:	461a      	mov	r2, r3
 800fb70:	f000 f90f 	bl	800fd92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2160      	movs	r1, #96	@ 0x60
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 f939 	bl	800fdf2 <TIM_ITRx_SetConfig>
      break;
 800fb80:	e01c      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb8e:	461a      	mov	r2, r3
 800fb90:	f000 f8d0 	bl	800fd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2140      	movs	r1, #64	@ 0x40
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f929 	bl	800fdf2 <TIM_ITRx_SetConfig>
      break;
 800fba0:	e00c      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4610      	mov	r0, r2
 800fbae:	f000 f920 	bl	800fdf2 <TIM_ITRx_SetConfig>
      break;
 800fbb2:	e003      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	73fb      	strb	r3, [r7, #15]
      break;
 800fbb8:	e000      	b.n	800fbbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fbba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b083      	sub	sp, #12
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fbde:	bf00      	nop
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fbea:	b480      	push	{r7}
 800fbec:	b083      	sub	sp, #12
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fbf2:	bf00      	nop
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fc06:	bf00      	nop
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b083      	sub	sp, #12
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc1a:	bf00      	nop
 800fc1c:	370c      	adds	r7, #12
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
	...

0800fc28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	4a37      	ldr	r2, [pc, #220]	@ (800fd18 <TIM_Base_SetConfig+0xf0>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d00f      	beq.n	800fc60 <TIM_Base_SetConfig+0x38>
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc46:	d00b      	beq.n	800fc60 <TIM_Base_SetConfig+0x38>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	4a34      	ldr	r2, [pc, #208]	@ (800fd1c <TIM_Base_SetConfig+0xf4>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d007      	beq.n	800fc60 <TIM_Base_SetConfig+0x38>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4a33      	ldr	r2, [pc, #204]	@ (800fd20 <TIM_Base_SetConfig+0xf8>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d003      	beq.n	800fc60 <TIM_Base_SetConfig+0x38>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4a32      	ldr	r2, [pc, #200]	@ (800fd24 <TIM_Base_SetConfig+0xfc>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d108      	bne.n	800fc72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a28      	ldr	r2, [pc, #160]	@ (800fd18 <TIM_Base_SetConfig+0xf0>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d01b      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc80:	d017      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a25      	ldr	r2, [pc, #148]	@ (800fd1c <TIM_Base_SetConfig+0xf4>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d013      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a24      	ldr	r2, [pc, #144]	@ (800fd20 <TIM_Base_SetConfig+0xf8>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d00f      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4a23      	ldr	r2, [pc, #140]	@ (800fd24 <TIM_Base_SetConfig+0xfc>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d00b      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a22      	ldr	r2, [pc, #136]	@ (800fd28 <TIM_Base_SetConfig+0x100>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d007      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a21      	ldr	r2, [pc, #132]	@ (800fd2c <TIM_Base_SetConfig+0x104>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d003      	beq.n	800fcb2 <TIM_Base_SetConfig+0x8a>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a20      	ldr	r2, [pc, #128]	@ (800fd30 <TIM_Base_SetConfig+0x108>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d108      	bne.n	800fcc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fcb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	695b      	ldr	r3, [r3, #20]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	689a      	ldr	r2, [r3, #8]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4a0c      	ldr	r2, [pc, #48]	@ (800fd18 <TIM_Base_SetConfig+0xf0>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d103      	bne.n	800fcf2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	691a      	ldr	r2, [r3, #16]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f043 0204 	orr.w	r2, r3, #4
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2201      	movs	r2, #1
 800fd02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	601a      	str	r2, [r3, #0]
}
 800fd0a:	bf00      	nop
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	40010000 	.word	0x40010000
 800fd1c:	40000400 	.word	0x40000400
 800fd20:	40000800 	.word	0x40000800
 800fd24:	40000c00 	.word	0x40000c00
 800fd28:	40014000 	.word	0x40014000
 800fd2c:	40014400 	.word	0x40014400
 800fd30:	40014800 	.word	0x40014800

0800fd34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b087      	sub	sp, #28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	6a1b      	ldr	r3, [r3, #32]
 800fd44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	f023 0201 	bic.w	r2, r3, #1
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	699b      	ldr	r3, [r3, #24]
 800fd56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fd5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	011b      	lsls	r3, r3, #4
 800fd64:	693a      	ldr	r2, [r7, #16]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	f023 030a 	bic.w	r3, r3, #10
 800fd70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	4313      	orrs	r3, r2
 800fd78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	693a      	ldr	r2, [r7, #16]
 800fd7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	621a      	str	r2, [r3, #32]
}
 800fd86:	bf00      	nop
 800fd88:	371c      	adds	r7, #28
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr

0800fd92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd92:	b480      	push	{r7}
 800fd94:	b087      	sub	sp, #28
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	60f8      	str	r0, [r7, #12]
 800fd9a:	60b9      	str	r1, [r7, #8]
 800fd9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	6a1b      	ldr	r3, [r3, #32]
 800fda2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6a1b      	ldr	r3, [r3, #32]
 800fda8:	f023 0210 	bic.w	r2, r3, #16
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	699b      	ldr	r3, [r3, #24]
 800fdb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fdbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	031b      	lsls	r3, r3, #12
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fdce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	011b      	lsls	r3, r3, #4
 800fdd4:	697a      	ldr	r2, [r7, #20]
 800fdd6:	4313      	orrs	r3, r2
 800fdd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	693a      	ldr	r2, [r7, #16]
 800fdde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	697a      	ldr	r2, [r7, #20]
 800fde4:	621a      	str	r2, [r3, #32]
}
 800fde6:	bf00      	nop
 800fde8:	371c      	adds	r7, #28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fdf2:	b480      	push	{r7}
 800fdf4:	b085      	sub	sp, #20
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe0a:	683a      	ldr	r2, [r7, #0]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	f043 0307 	orr.w	r3, r3, #7
 800fe14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	609a      	str	r2, [r3, #8]
}
 800fe1c:	bf00      	nop
 800fe1e:	3714      	adds	r7, #20
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b087      	sub	sp, #28
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	60b9      	str	r1, [r7, #8]
 800fe32:	607a      	str	r2, [r7, #4]
 800fe34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	021a      	lsls	r2, r3, #8
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	431a      	orrs	r2, r3
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	609a      	str	r2, [r3, #8]
}
 800fe5c:	bf00      	nop
 800fe5e:	371c      	adds	r7, #28
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d101      	bne.n	800fe80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	e050      	b.n	800ff22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68fa      	ldr	r2, [r7, #12]
 800feae:	4313      	orrs	r3, r2
 800feb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4a1c      	ldr	r2, [pc, #112]	@ (800ff30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d018      	beq.n	800fef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fecc:	d013      	beq.n	800fef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4a18      	ldr	r2, [pc, #96]	@ (800ff34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d00e      	beq.n	800fef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a16      	ldr	r2, [pc, #88]	@ (800ff38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d009      	beq.n	800fef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a15      	ldr	r2, [pc, #84]	@ (800ff3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d004      	beq.n	800fef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a13      	ldr	r2, [pc, #76]	@ (800ff40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d10c      	bne.n	800ff10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fefc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	4313      	orrs	r3, r2
 800ff06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3714      	adds	r7, #20
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	40010000 	.word	0x40010000
 800ff34:	40000400 	.word	0x40000400
 800ff38:	40000800 	.word	0x40000800
 800ff3c:	40000c00 	.word	0x40000c00
 800ff40:	40014000 	.word	0x40014000

0800ff44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d101      	bne.n	800ff7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e042      	b.n	8010004 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d106      	bne.n	800ff98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f83a 	bl	801000c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2224      	movs	r2, #36	@ 0x24
 800ff9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68da      	ldr	r2, [r3, #12]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ffae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f835 	bl	8010020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	691a      	ldr	r2, [r3, #16]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ffc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	695a      	ldr	r2, [r3, #20]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ffd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	68da      	ldr	r2, [r3, #12]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ffe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2220      	movs	r2, #32
 800fff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2220      	movs	r2, #32
 800fff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010024:	b0c0      	sub	sp, #256	@ 0x100
 8010026:	af00      	add	r7, sp, #0
 8010028:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801002c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	691b      	ldr	r3, [r3, #16]
 8010034:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801003c:	68d9      	ldr	r1, [r3, #12]
 801003e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	ea40 0301 	orr.w	r3, r0, r1
 8010048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801004a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801004e:	689a      	ldr	r2, [r3, #8]
 8010050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010054:	691b      	ldr	r3, [r3, #16]
 8010056:	431a      	orrs	r2, r3
 8010058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	431a      	orrs	r2, r3
 8010060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010064:	69db      	ldr	r3, [r3, #28]
 8010066:	4313      	orrs	r3, r2
 8010068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801006c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010078:	f021 010c 	bic.w	r1, r1, #12
 801007c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010086:	430b      	orrs	r3, r1
 8010088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801008a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	695b      	ldr	r3, [r3, #20]
 8010092:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801009a:	6999      	ldr	r1, [r3, #24]
 801009c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	ea40 0301 	orr.w	r3, r0, r1
 80100a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80100a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	4b8f      	ldr	r3, [pc, #572]	@ (80102ec <UART_SetConfig+0x2cc>)
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d005      	beq.n	80100c0 <UART_SetConfig+0xa0>
 80100b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	4b8d      	ldr	r3, [pc, #564]	@ (80102f0 <UART_SetConfig+0x2d0>)
 80100bc:	429a      	cmp	r2, r3
 80100be:	d104      	bne.n	80100ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80100c0:	f7fe feba 	bl	800ee38 <HAL_RCC_GetPCLK2Freq>
 80100c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80100c8:	e003      	b.n	80100d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80100ca:	f7fe fea1 	bl	800ee10 <HAL_RCC_GetPCLK1Freq>
 80100ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100dc:	f040 810c 	bne.w	80102f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80100e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80100e4:	2200      	movs	r2, #0
 80100e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80100ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80100ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80100f2:	4622      	mov	r2, r4
 80100f4:	462b      	mov	r3, r5
 80100f6:	1891      	adds	r1, r2, r2
 80100f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80100fa:	415b      	adcs	r3, r3
 80100fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80100fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010102:	4621      	mov	r1, r4
 8010104:	eb12 0801 	adds.w	r8, r2, r1
 8010108:	4629      	mov	r1, r5
 801010a:	eb43 0901 	adc.w	r9, r3, r1
 801010e:	f04f 0200 	mov.w	r2, #0
 8010112:	f04f 0300 	mov.w	r3, #0
 8010116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801011a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801011e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010122:	4690      	mov	r8, r2
 8010124:	4699      	mov	r9, r3
 8010126:	4623      	mov	r3, r4
 8010128:	eb18 0303 	adds.w	r3, r8, r3
 801012c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010130:	462b      	mov	r3, r5
 8010132:	eb49 0303 	adc.w	r3, r9, r3
 8010136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801013a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010146:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801014a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801014e:	460b      	mov	r3, r1
 8010150:	18db      	adds	r3, r3, r3
 8010152:	653b      	str	r3, [r7, #80]	@ 0x50
 8010154:	4613      	mov	r3, r2
 8010156:	eb42 0303 	adc.w	r3, r2, r3
 801015a:	657b      	str	r3, [r7, #84]	@ 0x54
 801015c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010164:	f7f0 fd88 	bl	8000c78 <__aeabi_uldivmod>
 8010168:	4602      	mov	r2, r0
 801016a:	460b      	mov	r3, r1
 801016c:	4b61      	ldr	r3, [pc, #388]	@ (80102f4 <UART_SetConfig+0x2d4>)
 801016e:	fba3 2302 	umull	r2, r3, r3, r2
 8010172:	095b      	lsrs	r3, r3, #5
 8010174:	011c      	lsls	r4, r3, #4
 8010176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801017a:	2200      	movs	r2, #0
 801017c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010180:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010188:	4642      	mov	r2, r8
 801018a:	464b      	mov	r3, r9
 801018c:	1891      	adds	r1, r2, r2
 801018e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010190:	415b      	adcs	r3, r3
 8010192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010198:	4641      	mov	r1, r8
 801019a:	eb12 0a01 	adds.w	sl, r2, r1
 801019e:	4649      	mov	r1, r9
 80101a0:	eb43 0b01 	adc.w	fp, r3, r1
 80101a4:	f04f 0200 	mov.w	r2, #0
 80101a8:	f04f 0300 	mov.w	r3, #0
 80101ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80101b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80101b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101b8:	4692      	mov	sl, r2
 80101ba:	469b      	mov	fp, r3
 80101bc:	4643      	mov	r3, r8
 80101be:	eb1a 0303 	adds.w	r3, sl, r3
 80101c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80101c6:	464b      	mov	r3, r9
 80101c8:	eb4b 0303 	adc.w	r3, fp, r3
 80101cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80101d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80101dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80101e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80101e4:	460b      	mov	r3, r1
 80101e6:	18db      	adds	r3, r3, r3
 80101e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80101ea:	4613      	mov	r3, r2
 80101ec:	eb42 0303 	adc.w	r3, r2, r3
 80101f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80101f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80101f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80101fa:	f7f0 fd3d 	bl	8000c78 <__aeabi_uldivmod>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4611      	mov	r1, r2
 8010204:	4b3b      	ldr	r3, [pc, #236]	@ (80102f4 <UART_SetConfig+0x2d4>)
 8010206:	fba3 2301 	umull	r2, r3, r3, r1
 801020a:	095b      	lsrs	r3, r3, #5
 801020c:	2264      	movs	r2, #100	@ 0x64
 801020e:	fb02 f303 	mul.w	r3, r2, r3
 8010212:	1acb      	subs	r3, r1, r3
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801021a:	4b36      	ldr	r3, [pc, #216]	@ (80102f4 <UART_SetConfig+0x2d4>)
 801021c:	fba3 2302 	umull	r2, r3, r3, r2
 8010220:	095b      	lsrs	r3, r3, #5
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010228:	441c      	add	r4, r3
 801022a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801022e:	2200      	movs	r2, #0
 8010230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010234:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801023c:	4642      	mov	r2, r8
 801023e:	464b      	mov	r3, r9
 8010240:	1891      	adds	r1, r2, r2
 8010242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010244:	415b      	adcs	r3, r3
 8010246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801024c:	4641      	mov	r1, r8
 801024e:	1851      	adds	r1, r2, r1
 8010250:	6339      	str	r1, [r7, #48]	@ 0x30
 8010252:	4649      	mov	r1, r9
 8010254:	414b      	adcs	r3, r1
 8010256:	637b      	str	r3, [r7, #52]	@ 0x34
 8010258:	f04f 0200 	mov.w	r2, #0
 801025c:	f04f 0300 	mov.w	r3, #0
 8010260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010264:	4659      	mov	r1, fp
 8010266:	00cb      	lsls	r3, r1, #3
 8010268:	4651      	mov	r1, sl
 801026a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801026e:	4651      	mov	r1, sl
 8010270:	00ca      	lsls	r2, r1, #3
 8010272:	4610      	mov	r0, r2
 8010274:	4619      	mov	r1, r3
 8010276:	4603      	mov	r3, r0
 8010278:	4642      	mov	r2, r8
 801027a:	189b      	adds	r3, r3, r2
 801027c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010280:	464b      	mov	r3, r9
 8010282:	460a      	mov	r2, r1
 8010284:	eb42 0303 	adc.w	r3, r2, r3
 8010288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801028c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801029c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80102a0:	460b      	mov	r3, r1
 80102a2:	18db      	adds	r3, r3, r3
 80102a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102a6:	4613      	mov	r3, r2
 80102a8:	eb42 0303 	adc.w	r3, r2, r3
 80102ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80102ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80102b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80102b6:	f7f0 fcdf 	bl	8000c78 <__aeabi_uldivmod>
 80102ba:	4602      	mov	r2, r0
 80102bc:	460b      	mov	r3, r1
 80102be:	4b0d      	ldr	r3, [pc, #52]	@ (80102f4 <UART_SetConfig+0x2d4>)
 80102c0:	fba3 1302 	umull	r1, r3, r3, r2
 80102c4:	095b      	lsrs	r3, r3, #5
 80102c6:	2164      	movs	r1, #100	@ 0x64
 80102c8:	fb01 f303 	mul.w	r3, r1, r3
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	3332      	adds	r3, #50	@ 0x32
 80102d2:	4a08      	ldr	r2, [pc, #32]	@ (80102f4 <UART_SetConfig+0x2d4>)
 80102d4:	fba2 2303 	umull	r2, r3, r2, r3
 80102d8:	095b      	lsrs	r3, r3, #5
 80102da:	f003 0207 	and.w	r2, r3, #7
 80102de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4422      	add	r2, r4
 80102e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80102e8:	e106      	b.n	80104f8 <UART_SetConfig+0x4d8>
 80102ea:	bf00      	nop
 80102ec:	40011000 	.word	0x40011000
 80102f0:	40011400 	.word	0x40011400
 80102f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80102f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102fc:	2200      	movs	r2, #0
 80102fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010302:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801030a:	4642      	mov	r2, r8
 801030c:	464b      	mov	r3, r9
 801030e:	1891      	adds	r1, r2, r2
 8010310:	6239      	str	r1, [r7, #32]
 8010312:	415b      	adcs	r3, r3
 8010314:	627b      	str	r3, [r7, #36]	@ 0x24
 8010316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801031a:	4641      	mov	r1, r8
 801031c:	1854      	adds	r4, r2, r1
 801031e:	4649      	mov	r1, r9
 8010320:	eb43 0501 	adc.w	r5, r3, r1
 8010324:	f04f 0200 	mov.w	r2, #0
 8010328:	f04f 0300 	mov.w	r3, #0
 801032c:	00eb      	lsls	r3, r5, #3
 801032e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010332:	00e2      	lsls	r2, r4, #3
 8010334:	4614      	mov	r4, r2
 8010336:	461d      	mov	r5, r3
 8010338:	4643      	mov	r3, r8
 801033a:	18e3      	adds	r3, r4, r3
 801033c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010340:	464b      	mov	r3, r9
 8010342:	eb45 0303 	adc.w	r3, r5, r3
 8010346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801034a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801035a:	f04f 0200 	mov.w	r2, #0
 801035e:	f04f 0300 	mov.w	r3, #0
 8010362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010366:	4629      	mov	r1, r5
 8010368:	008b      	lsls	r3, r1, #2
 801036a:	4621      	mov	r1, r4
 801036c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010370:	4621      	mov	r1, r4
 8010372:	008a      	lsls	r2, r1, #2
 8010374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010378:	f7f0 fc7e 	bl	8000c78 <__aeabi_uldivmod>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	4b60      	ldr	r3, [pc, #384]	@ (8010504 <UART_SetConfig+0x4e4>)
 8010382:	fba3 2302 	umull	r2, r3, r3, r2
 8010386:	095b      	lsrs	r3, r3, #5
 8010388:	011c      	lsls	r4, r3, #4
 801038a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801038e:	2200      	movs	r2, #0
 8010390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801039c:	4642      	mov	r2, r8
 801039e:	464b      	mov	r3, r9
 80103a0:	1891      	adds	r1, r2, r2
 80103a2:	61b9      	str	r1, [r7, #24]
 80103a4:	415b      	adcs	r3, r3
 80103a6:	61fb      	str	r3, [r7, #28]
 80103a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80103ac:	4641      	mov	r1, r8
 80103ae:	1851      	adds	r1, r2, r1
 80103b0:	6139      	str	r1, [r7, #16]
 80103b2:	4649      	mov	r1, r9
 80103b4:	414b      	adcs	r3, r1
 80103b6:	617b      	str	r3, [r7, #20]
 80103b8:	f04f 0200 	mov.w	r2, #0
 80103bc:	f04f 0300 	mov.w	r3, #0
 80103c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80103c4:	4659      	mov	r1, fp
 80103c6:	00cb      	lsls	r3, r1, #3
 80103c8:	4651      	mov	r1, sl
 80103ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80103ce:	4651      	mov	r1, sl
 80103d0:	00ca      	lsls	r2, r1, #3
 80103d2:	4610      	mov	r0, r2
 80103d4:	4619      	mov	r1, r3
 80103d6:	4603      	mov	r3, r0
 80103d8:	4642      	mov	r2, r8
 80103da:	189b      	adds	r3, r3, r2
 80103dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80103e0:	464b      	mov	r3, r9
 80103e2:	460a      	mov	r2, r1
 80103e4:	eb42 0303 	adc.w	r3, r2, r3
 80103e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80103ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80103f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80103f8:	f04f 0200 	mov.w	r2, #0
 80103fc:	f04f 0300 	mov.w	r3, #0
 8010400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010404:	4649      	mov	r1, r9
 8010406:	008b      	lsls	r3, r1, #2
 8010408:	4641      	mov	r1, r8
 801040a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801040e:	4641      	mov	r1, r8
 8010410:	008a      	lsls	r2, r1, #2
 8010412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010416:	f7f0 fc2f 	bl	8000c78 <__aeabi_uldivmod>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	4611      	mov	r1, r2
 8010420:	4b38      	ldr	r3, [pc, #224]	@ (8010504 <UART_SetConfig+0x4e4>)
 8010422:	fba3 2301 	umull	r2, r3, r3, r1
 8010426:	095b      	lsrs	r3, r3, #5
 8010428:	2264      	movs	r2, #100	@ 0x64
 801042a:	fb02 f303 	mul.w	r3, r2, r3
 801042e:	1acb      	subs	r3, r1, r3
 8010430:	011b      	lsls	r3, r3, #4
 8010432:	3332      	adds	r3, #50	@ 0x32
 8010434:	4a33      	ldr	r2, [pc, #204]	@ (8010504 <UART_SetConfig+0x4e4>)
 8010436:	fba2 2303 	umull	r2, r3, r2, r3
 801043a:	095b      	lsrs	r3, r3, #5
 801043c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010440:	441c      	add	r4, r3
 8010442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010446:	2200      	movs	r2, #0
 8010448:	673b      	str	r3, [r7, #112]	@ 0x70
 801044a:	677a      	str	r2, [r7, #116]	@ 0x74
 801044c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010450:	4642      	mov	r2, r8
 8010452:	464b      	mov	r3, r9
 8010454:	1891      	adds	r1, r2, r2
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	415b      	adcs	r3, r3
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010460:	4641      	mov	r1, r8
 8010462:	1851      	adds	r1, r2, r1
 8010464:	6039      	str	r1, [r7, #0]
 8010466:	4649      	mov	r1, r9
 8010468:	414b      	adcs	r3, r1
 801046a:	607b      	str	r3, [r7, #4]
 801046c:	f04f 0200 	mov.w	r2, #0
 8010470:	f04f 0300 	mov.w	r3, #0
 8010474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010478:	4659      	mov	r1, fp
 801047a:	00cb      	lsls	r3, r1, #3
 801047c:	4651      	mov	r1, sl
 801047e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010482:	4651      	mov	r1, sl
 8010484:	00ca      	lsls	r2, r1, #3
 8010486:	4610      	mov	r0, r2
 8010488:	4619      	mov	r1, r3
 801048a:	4603      	mov	r3, r0
 801048c:	4642      	mov	r2, r8
 801048e:	189b      	adds	r3, r3, r2
 8010490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010492:	464b      	mov	r3, r9
 8010494:	460a      	mov	r2, r1
 8010496:	eb42 0303 	adc.w	r3, r2, r3
 801049a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801049c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80104a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80104a8:	f04f 0200 	mov.w	r2, #0
 80104ac:	f04f 0300 	mov.w	r3, #0
 80104b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80104b4:	4649      	mov	r1, r9
 80104b6:	008b      	lsls	r3, r1, #2
 80104b8:	4641      	mov	r1, r8
 80104ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80104be:	4641      	mov	r1, r8
 80104c0:	008a      	lsls	r2, r1, #2
 80104c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80104c6:	f7f0 fbd7 	bl	8000c78 <__aeabi_uldivmod>
 80104ca:	4602      	mov	r2, r0
 80104cc:	460b      	mov	r3, r1
 80104ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010504 <UART_SetConfig+0x4e4>)
 80104d0:	fba3 1302 	umull	r1, r3, r3, r2
 80104d4:	095b      	lsrs	r3, r3, #5
 80104d6:	2164      	movs	r1, #100	@ 0x64
 80104d8:	fb01 f303 	mul.w	r3, r1, r3
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	011b      	lsls	r3, r3, #4
 80104e0:	3332      	adds	r3, #50	@ 0x32
 80104e2:	4a08      	ldr	r2, [pc, #32]	@ (8010504 <UART_SetConfig+0x4e4>)
 80104e4:	fba2 2303 	umull	r2, r3, r2, r3
 80104e8:	095b      	lsrs	r3, r3, #5
 80104ea:	f003 020f 	and.w	r2, r3, #15
 80104ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4422      	add	r2, r4
 80104f6:	609a      	str	r2, [r3, #8]
}
 80104f8:	bf00      	nop
 80104fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80104fe:	46bd      	mov	sp, r7
 8010500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010504:	51eb851f 	.word	0x51eb851f

08010508 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010508:	b480      	push	{r7}
 801050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801050c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801050e:	4618      	mov	r0, r3
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 801051c:	f000 f808 	bl	8010530 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8010520:	bf00      	nop
 8010522:	bd80      	pop	{r7, pc}

08010524 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 8010528:	f000 fa0a 	bl	8010940 <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 801052c:	bf00      	nop
 801052e:	bd80      	pop	{r7, pc}

08010530 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 8010530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010532:	b089      	sub	sp, #36	@ 0x24
 8010534:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8010536:	2000      	movs	r0, #0
 8010538:	f7fb fcca 	bl	800bed0 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 801053c:	2101      	movs	r1, #1
 801053e:	2000      	movs	r0, #0
 8010540:	f7fb fd1a 	bl	800bf78 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8010544:	2000      	movs	r0, #0
 8010546:	f7fb fd6b 	bl	800c020 <BSP_PB_GetState>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	bf0c      	ite	eq
 8010550:	2301      	moveq	r3, #1
 8010552:	2300      	movne	r3, #0
 8010554:	b2db      	uxtb	r3, r3
 8010556:	461a      	mov	r2, r3
 8010558:	4b84      	ldr	r3, [pc, #528]	@ (801076c <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 801055a:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 801055c:	2000      	movs	r0, #0
 801055e:	f7fb fdc1 	bl	800c0e4 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8010562:	4a83      	ldr	r2, [pc, #524]	@ (8010770 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 8010564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010568:	4882      	ldr	r0, [pc, #520]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801056a:	f004 fd49 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 801056e:	4981      	ldr	r1, [pc, #516]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010570:	4881      	ldr	r0, [pc, #516]	@ (8010778 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010572:	f004 fcd5 	bl	8014f20 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 8010576:	2103      	movs	r1, #3
 8010578:	2001      	movs	r0, #1
 801057a:	f7fa ff61 	bl	800b440 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 801057e:	2103      	movs	r1, #3
 8010580:	2003      	movs	r0, #3
 8010582:	f7fa ff5d 	bl	800b440 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 8010586:	2102      	movs	r1, #2
 8010588:	2002      	movs	r0, #2
 801058a:	f7fa ff59 	bl	800b440 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 801058e:	2104      	movs	r1, #4
 8010590:	2000      	movs	r0, #0
 8010592:	f7fa ff55 	bl	800b440 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010596:	2300      	movs	r3, #0
 8010598:	81fb      	strh	r3, [r7, #14]
 801059a:	e0d4      	b.n	8010746 <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 801059c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80105a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80105a4:	4613      	mov	r3, r2
 80105a6:	00db      	lsls	r3, r3, #3
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	4a73      	ldr	r2, [pc, #460]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80105ae:	4413      	add	r3, r2
 80105b0:	4619      	mov	r1, r3
 80105b2:	f7fb f877 	bl	800b6a4 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80105b6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80105ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80105be:	486f      	ldr	r0, [pc, #444]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80105c0:	4613      	mov	r3, r2
 80105c2:	00db      	lsls	r3, r3, #3
 80105c4:	1a9b      	subs	r3, r3, r2
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	4403      	add	r3, r0
 80105ca:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80105cc:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80105ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80105d2:	486a      	ldr	r0, [pc, #424]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80105d4:	4613      	mov	r3, r2
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	1a9b      	subs	r3, r3, r2
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	4403      	add	r3, r0
 80105de:	3301      	adds	r3, #1
 80105e0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80105e2:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80105e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80105e8:	4864      	ldr	r0, [pc, #400]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80105ea:	4613      	mov	r3, r2
 80105ec:	00db      	lsls	r3, r3, #3
 80105ee:	1a9b      	subs	r3, r3, r2
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	4403      	add	r3, r0
 80105f4:	3302      	adds	r3, #2
 80105f6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80105f8:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80105fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80105fe:	485f      	ldr	r0, [pc, #380]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010600:	4613      	mov	r3, r2
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	1a9b      	subs	r3, r3, r2
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	4403      	add	r3, r0
 801060a:	3303      	adds	r3, #3
 801060c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801060e:	9303      	str	r3, [sp, #12]
 8010610:	9602      	str	r6, [sp, #8]
 8010612:	9501      	str	r5, [sp, #4]
 8010614:	9400      	str	r4, [sp, #0]
 8010616:	460b      	mov	r3, r1
 8010618:	4a59      	ldr	r2, [pc, #356]	@ (8010780 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 801061a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801061e:	4855      	ldr	r0, [pc, #340]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010620:	f004 fcee 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 8010624:	4953      	ldr	r1, [pc, #332]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010626:	4854      	ldr	r0, [pc, #336]	@ (8010778 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010628:	f004 fc7a 	bl	8014f20 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 801062c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010630:	4952      	ldr	r1, [pc, #328]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010632:	4613      	mov	r3, r2
 8010634:	00db      	lsls	r3, r3, #3
 8010636:	1a9b      	subs	r3, r3, r2
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	440b      	add	r3, r1
 801063c:	3314      	adds	r3, #20
 801063e:	edd3 7a00 	vldr	s15, [r3]
 8010642:	463b      	mov	r3, r7
 8010644:	2103      	movs	r1, #3
 8010646:	4618      	mov	r0, r3
 8010648:	eeb0 0a67 	vmov.f32	s0, s15
 801064c:	f000 fa20 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010654:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010656:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010658:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801065c:	4947      	ldr	r1, [pc, #284]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801065e:	4613      	mov	r3, r2
 8010660:	00db      	lsls	r3, r3, #3
 8010662:	1a9b      	subs	r3, r3, r2
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	440b      	add	r3, r1
 8010668:	3308      	adds	r3, #8
 801066a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 801066c:	9301      	str	r3, [sp, #4]
 801066e:	9000      	str	r0, [sp, #0]
 8010670:	4623      	mov	r3, r4
 8010672:	4a44      	ldr	r2, [pc, #272]	@ (8010784 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 8010674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010678:	483e      	ldr	r0, [pc, #248]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801067a:	f004 fcc1 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 801067e:	493d      	ldr	r1, [pc, #244]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010680:	483d      	ldr	r0, [pc, #244]	@ (8010778 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010682:	f004 fc4d 	bl	8014f20 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8010686:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801068a:	493c      	ldr	r1, [pc, #240]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801068c:	4613      	mov	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	440b      	add	r3, r1
 8010696:	3310      	adds	r3, #16
 8010698:	edd3 7a00 	vldr	s15, [r3]
 801069c:	463b      	mov	r3, r7
 801069e:	2103      	movs	r1, #3
 80106a0:	4618      	mov	r0, r3
 80106a2:	eeb0 0a67 	vmov.f32	s0, s15
 80106a6:	f000 f9f3 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80106ae:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80106b0:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80106b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80106b6:	4931      	ldr	r1, [pc, #196]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80106b8:	4613      	mov	r3, r2
 80106ba:	00db      	lsls	r3, r3, #3
 80106bc:	1a9b      	subs	r3, r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	440b      	add	r3, r1
 80106c2:	3304      	adds	r3, #4
 80106c4:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80106c6:	9301      	str	r3, [sp, #4]
 80106c8:	9000      	str	r0, [sp, #0]
 80106ca:	4623      	mov	r3, r4
 80106cc:	4a2e      	ldr	r2, [pc, #184]	@ (8010788 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 80106ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80106d2:	4828      	ldr	r0, [pc, #160]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80106d4:	f004 fc94 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 80106d8:	4926      	ldr	r1, [pc, #152]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80106da:	4827      	ldr	r0, [pc, #156]	@ (8010778 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80106dc:	f004 fc20 	bl	8014f20 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 80106e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80106e4:	4925      	ldr	r1, [pc, #148]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80106e6:	4613      	mov	r3, r2
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	1a9b      	subs	r3, r3, r2
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	440b      	add	r3, r1
 80106f0:	3318      	adds	r3, #24
 80106f2:	edd3 7a00 	vldr	s15, [r3]
 80106f6:	463b      	mov	r3, r7
 80106f8:	2103      	movs	r1, #3
 80106fa:	4618      	mov	r0, r3
 80106fc:	eeb0 0a67 	vmov.f32	s0, s15
 8010700:	f000 f9c6 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010708:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 801070a:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 801070c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010710:	491a      	ldr	r1, [pc, #104]	@ (801077c <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010712:	4613      	mov	r3, r2
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	1a9b      	subs	r3, r3, r2
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	440b      	add	r3, r1
 801071c:	330c      	adds	r3, #12
 801071e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010720:	9301      	str	r3, [sp, #4]
 8010722:	9000      	str	r0, [sp, #0]
 8010724:	4623      	mov	r3, r4
 8010726:	4a19      	ldr	r2, [pc, #100]	@ (801078c <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 8010728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801072c:	4811      	ldr	r0, [pc, #68]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801072e:	f004 fc67 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 8010732:	4910      	ldr	r1, [pc, #64]	@ (8010774 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010734:	4810      	ldr	r0, [pc, #64]	@ (8010778 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010736:	f004 fbf3 	bl	8014f20 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801073a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801073e:	b29b      	uxth	r3, r3
 8010740:	3301      	adds	r3, #1
 8010742:	b29b      	uxth	r3, r3
 8010744:	81fb      	strh	r3, [r7, #14]
 8010746:	89fb      	ldrh	r3, [r7, #14]
 8010748:	2b03      	cmp	r3, #3
 801074a:	f67f af27 	bls.w	801059c <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 801074e:	2105      	movs	r1, #5
 8010750:	2002      	movs	r0, #2
 8010752:	f7fa fa39 	bl	800abc8 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8010756:	2103      	movs	r1, #3
 8010758:	2001      	movs	r0, #1
 801075a:	f7fa fa35 	bl	800abc8 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 801075e:	2101      	movs	r1, #1
 8010760:	2000      	movs	r0, #0
 8010762:	f7fa fa31 	bl	800abc8 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010766:	2300      	movs	r3, #0
 8010768:	81fb      	strh	r3, [r7, #14]
 801076a:	e0c2      	b.n	80108f2 <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 801076c:	20000d78 	.word	0x20000d78
 8010770:	080172d8 	.word	0x080172d8
 8010774:	20000c78 	.word	0x20000c78
 8010778:	08017328 	.word	0x08017328
 801077c:	20000bc0 	.word	0x20000bc0
 8010780:	0801732c 	.word	0x0801732c
 8010784:	080173a0 	.word	0x080173a0
 8010788:	080173cc 	.word	0x080173cc
 801078c:	080173fc 	.word	0x080173fc
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8010790:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010794:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010798:	4613      	mov	r3, r2
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	4413      	add	r3, r2
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	4a58      	ldr	r2, [pc, #352]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80107a2:	4413      	add	r3, r2
 80107a4:	4619      	mov	r1, r3
 80107a6:	f7fa fb1d 	bl	800ade4 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80107aa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80107ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80107b2:	4854      	ldr	r0, [pc, #336]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80107b4:	4613      	mov	r3, r2
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	4413      	add	r3, r2
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	4403      	add	r3, r0
 80107be:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80107c0:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80107c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80107c6:	484f      	ldr	r0, [pc, #316]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80107c8:	4613      	mov	r3, r2
 80107ca:	005b      	lsls	r3, r3, #1
 80107cc:	4413      	add	r3, r2
 80107ce:	00db      	lsls	r3, r3, #3
 80107d0:	4403      	add	r3, r0
 80107d2:	3301      	adds	r3, #1
 80107d4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80107d6:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80107d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80107dc:	4849      	ldr	r0, [pc, #292]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80107de:	4613      	mov	r3, r2
 80107e0:	005b      	lsls	r3, r3, #1
 80107e2:	4413      	add	r3, r2
 80107e4:	00db      	lsls	r3, r3, #3
 80107e6:	4403      	add	r3, r0
 80107e8:	3302      	adds	r3, #2
 80107ea:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80107ec:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80107ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80107f2:	4844      	ldr	r0, [pc, #272]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80107f4:	4613      	mov	r3, r2
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	4413      	add	r3, r2
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	4403      	add	r3, r0
 80107fe:	3304      	adds	r3, #4
 8010800:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	9602      	str	r6, [sp, #8]
 8010806:	9501      	str	r5, [sp, #4]
 8010808:	9400      	str	r4, [sp, #0]
 801080a:	460b      	mov	r3, r1
 801080c:	4a3e      	ldr	r2, [pc, #248]	@ (8010908 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 801080e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010812:	483e      	ldr	r0, [pc, #248]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010814:	f004 fbf4 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 8010818:	493c      	ldr	r1, [pc, #240]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801081a:	483d      	ldr	r0, [pc, #244]	@ (8010910 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 801081c:	f004 fb80 	bl	8014f20 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8010820:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010824:	4937      	ldr	r1, [pc, #220]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010826:	4613      	mov	r3, r2
 8010828:	005b      	lsls	r3, r3, #1
 801082a:	4413      	add	r3, r2
 801082c:	00db      	lsls	r3, r3, #3
 801082e:	440b      	add	r3, r1
 8010830:	330c      	adds	r3, #12
 8010832:	edd3 7a00 	vldr	s15, [r3]
 8010836:	463b      	mov	r3, r7
 8010838:	2103      	movs	r1, #3
 801083a:	4618      	mov	r0, r3
 801083c:	eeb0 0a67 	vmov.f32	s0, s15
 8010840:	f000 f926 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010848:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	4613      	mov	r3, r2
 801084e:	4a31      	ldr	r2, [pc, #196]	@ (8010914 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8010850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010854:	482d      	ldr	r0, [pc, #180]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010856:	f004 fbd3 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 801085a:	492c      	ldr	r1, [pc, #176]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801085c:	482c      	ldr	r0, [pc, #176]	@ (8010910 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 801085e:	f004 fb5f 	bl	8014f20 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8010862:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010866:	4927      	ldr	r1, [pc, #156]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010868:	4613      	mov	r3, r2
 801086a:	005b      	lsls	r3, r3, #1
 801086c:	4413      	add	r3, r2
 801086e:	00db      	lsls	r3, r3, #3
 8010870:	440b      	add	r3, r1
 8010872:	3310      	adds	r3, #16
 8010874:	edd3 7a00 	vldr	s15, [r3]
 8010878:	463b      	mov	r3, r7
 801087a:	2103      	movs	r1, #3
 801087c:	4618      	mov	r0, r3
 801087e:	eeb0 0a67 	vmov.f32	s0, s15
 8010882:	f000 f905 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 801088a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	4613      	mov	r3, r2
 8010890:	4a21      	ldr	r2, [pc, #132]	@ (8010918 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 8010892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010896:	481d      	ldr	r0, [pc, #116]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010898:	f004 fbb2 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 801089c:	491b      	ldr	r1, [pc, #108]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801089e:	481c      	ldr	r0, [pc, #112]	@ (8010910 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80108a0:	f004 fb3e 	bl	8014f20 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 80108a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80108a8:	4916      	ldr	r1, [pc, #88]	@ (8010904 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80108aa:	4613      	mov	r3, r2
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	4413      	add	r3, r2
 80108b0:	00db      	lsls	r3, r3, #3
 80108b2:	440b      	add	r3, r1
 80108b4:	3308      	adds	r3, #8
 80108b6:	edd3 7a00 	vldr	s15, [r3]
 80108ba:	463b      	mov	r3, r7
 80108bc:	2103      	movs	r1, #3
 80108be:	4618      	mov	r0, r3
 80108c0:	eeb0 0a67 	vmov.f32	s0, s15
 80108c4:	f000 f8e4 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	461a      	mov	r2, r3
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	4613      	mov	r3, r2
 80108d2:	4a12      	ldr	r2, [pc, #72]	@ (801091c <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 80108d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80108d8:	480c      	ldr	r0, [pc, #48]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80108da:	f004 fb91 	bl	8015000 <sniprintf>
    printf("%s", dataOut);
 80108de:	490b      	ldr	r1, [pc, #44]	@ (801090c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80108e0:	480b      	ldr	r0, [pc, #44]	@ (8010910 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80108e2:	f004 fb1d 	bl	8014f20 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80108e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	3301      	adds	r3, #1
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	81fb      	strh	r3, [r7, #14]
 80108f2:	89fb      	ldrh	r3, [r7, #14]
 80108f4:	2b02      	cmp	r3, #2
 80108f6:	f67f af4b 	bls.w	8010790 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 80108fa:	bf00      	nop
 80108fc:	bf00      	nop
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010904:	20000c30 	.word	0x20000c30
 8010908:	08017428 	.word	0x08017428
 801090c:	20000c78 	.word	0x20000c78
 8010910:	08017328 	.word	0x08017328
 8010914:	0801749c 	.word	0x0801749c
 8010918:	080174b8 	.word	0x080174b8
 801091c:	080174d8 	.word	0x080174d8

08010920 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 801092a:	4b04      	ldr	r3, [pc, #16]	@ (801093c <BSP_PB_Callback+0x1c>)
 801092c:	2201      	movs	r2, #1
 801092e:	701a      	strb	r2, [r3, #0]
}
 8010930:	bf00      	nop
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	20000bbc 	.word	0x20000bbc

08010940 <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 8010946:	4b4a      	ldr	r3, [pc, #296]	@ (8010a70 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	b2db      	uxtb	r3, r3
 801094c:	2b00      	cmp	r3, #0
 801094e:	d013      	beq.n	8010978 <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 8010950:	2032      	movs	r0, #50	@ 0x32
 8010952:	f7fb fced 	bl	800c330 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 8010956:	bf00      	nop
 8010958:	2000      	movs	r0, #0
 801095a:	f7fb fb61 	bl	800c020 <BSP_PB_GetState>
 801095e:	4602      	mov	r2, r0
 8010960:	4b44      	ldr	r3, [pc, #272]	@ (8010a74 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	429a      	cmp	r2, r3
 8010966:	d0f7      	beq.n	8010958 <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8010968:	2032      	movs	r0, #50	@ 0x32
 801096a:	f7fb fce1 	bl	800c330 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 801096e:	4b40      	ldr	r3, [pc, #256]	@ (8010a70 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8010970:	2200      	movs	r2, #0
 8010972:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 8010974:	f7ff fddc 	bl	8010530 <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8010978:	4a3f      	ldr	r2, [pc, #252]	@ (8010a78 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 801097a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801097e:	483f      	ldr	r0, [pc, #252]	@ (8010a7c <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8010980:	f004 fb3e 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 8010984:	493d      	ldr	r1, [pc, #244]	@ (8010a7c <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8010986:	483e      	ldr	r0, [pc, #248]	@ (8010a80 <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 8010988:	f004 faca 	bl	8014f20 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801098c:	2300      	movs	r3, #0
 801098e:	607b      	str	r3, [r7, #4]
 8010990:	e02e      	b.n	80109f0 <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 8010992:	493c      	ldr	r1, [pc, #240]	@ (8010a84 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	4613      	mov	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	1a9b      	subs	r3, r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	440b      	add	r3, r1
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 f8f1 	bl	8010b90 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 80109ae:	4935      	ldr	r1, [pc, #212]	@ (8010a84 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	4613      	mov	r3, r2
 80109b4:	00db      	lsls	r3, r3, #3
 80109b6:	1a9b      	subs	r3, r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	440b      	add	r3, r1
 80109bc:	3301      	adds	r3, #1
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d003      	beq.n	80109cc <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 f9a2 	bl	8010d10 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 80109cc:	492d      	ldr	r1, [pc, #180]	@ (8010a84 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	4613      	mov	r3, r2
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	1a9b      	subs	r3, r3, r2
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	440b      	add	r3, r1
 80109da:	3302      	adds	r3, #2
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d003      	beq.n	80109ea <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f000 fa53 	bl	8010e90 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	3301      	adds	r3, #1
 80109ee:	607b      	str	r3, [r7, #4]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b03      	cmp	r3, #3
 80109f4:	d9cd      	bls.n	8010992 <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80109f6:	2300      	movs	r3, #0
 80109f8:	607b      	str	r3, [r7, #4]
 80109fa:	e02e      	b.n	8010a5a <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 80109fc:	4922      	ldr	r1, [pc, #136]	@ (8010a88 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4613      	mov	r3, r2
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	4413      	add	r3, r2
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	440b      	add	r3, r1
 8010a0a:	3302      	adds	r3, #2
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d003      	beq.n	8010a1a <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 fc43 	bl	80112a0 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 8010a1a:	491b      	ldr	r1, [pc, #108]	@ (8010a88 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	005b      	lsls	r3, r3, #1
 8010a22:	4413      	add	r3, r2
 8010a24:	00db      	lsls	r3, r3, #3
 8010a26:	440b      	add	r3, r1
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d003      	beq.n	8010a36 <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 faed 	bl	8011010 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 8010a36:	4914      	ldr	r1, [pc, #80]	@ (8010a88 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	00db      	lsls	r3, r3, #3
 8010a42:	440b      	add	r3, r1
 8010a44:	3301      	adds	r3, #1
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f000 fb86 	bl	8011160 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	3301      	adds	r3, #1
 8010a58:	607b      	str	r3, [r7, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	d9cd      	bls.n	80109fc <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 8010a60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010a64:	f7fb fc64 	bl	800c330 <HAL_Delay>
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	20000bbc 	.word	0x20000bbc
 8010a74:	20000d78 	.word	0x20000d78
 8010a78:	080172d8 	.word	0x080172d8
 8010a7c:	20000c78 	.word	0x20000c78
 8010a80:	08017328 	.word	0x08017328
 8010a84:	20000bc0 	.word	0x20000bc0
 8010a88:	20000c30 	.word	0x20000c30
 8010a8c:	00000000 	.word	0x00000000

08010a90 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8010a90:	b5b0      	push	{r4, r5, r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	ed87 0a03 	vstr	s0, [r7, #12]
 8010a9a:	60b8      	str	r0, [r7, #8]
 8010a9c:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 8010a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8010aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aaa:	db03      	blt.n	8010ab4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	701a      	strb	r2, [r3, #0]
 8010ab2:	e008      	b.n	8010ac6 <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	701a      	strb	r2, [r3, #0]
    in = -in;
 8010aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8010abe:	eef1 7a67 	vneg.f32	s15, s15
 8010ac2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f7ef fd44 	bl	8000554 <__aeabi_i2d>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	ec43 2b11 	vmov	d1, r2, r3
 8010ad4:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8010b88 <floatToInt+0xf8>
 8010ad8:	f005 fa2a 	bl	8015f30 <pow>
 8010adc:	ec53 2b10 	vmov	r2, r3, d0
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	f7f0 f878 	bl	8000bd8 <__aeabi_d2f>
 8010ae8:	ee06 0a90 	vmov	s13, r0
 8010aec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8010af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010afc:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8010b00:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b08:	ee17 2a90 	vmov	r2, s15
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	ee07 3a90 	vmov	s15, r3
 8010b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8010b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b24:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f7ef fd25 	bl	8000578 <__aeabi_f2d>
 8010b2e:	4604      	mov	r4, r0
 8010b30:	460d      	mov	r5, r1
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ef fd0e 	bl	8000554 <__aeabi_i2d>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	ec43 2b11 	vmov	d1, r2, r3
 8010b40:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8010b88 <floatToInt+0xf8>
 8010b44:	f005 f9f4 	bl	8015f30 <pow>
 8010b48:	ec53 2b10 	vmov	r2, r3, d0
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	4629      	mov	r1, r5
 8010b50:	f7ef fd6a 	bl	8000628 <__aeabi_dmul>
 8010b54:	4602      	mov	r2, r0
 8010b56:	460b      	mov	r3, r1
 8010b58:	ec43 2b17 	vmov	d7, r2, r3
 8010b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8010b60:	eef0 0a67 	vmov.f32	s1, s15
 8010b64:	f005 fa60 	bl	8016028 <trunc>
 8010b68:	ec53 2b10 	vmov	r2, r3, d0
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	4619      	mov	r1, r3
 8010b70:	f7f0 f80a 	bl	8000b88 <__aeabi_d2iz>
 8010b74:	4603      	mov	r3, r0
 8010b76:	461a      	mov	r2, r3
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	609a      	str	r2, [r3, #8]
}
 8010b7c:	bf00      	nop
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bdb0      	pop	{r4, r5, r7, pc}
 8010b84:	f3af 8000 	nop.w
 8010b88:	00000000 	.word	0x00000000
 8010b8c:	40240000 	.word	0x40240000

08010b90 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 8010b90:	b5b0      	push	{r4, r5, r7, lr}
 8010b92:	b092      	sub	sp, #72	@ 0x48
 8010b94:	af06      	add	r7, sp, #24
 8010b96:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a51      	ldr	r2, [pc, #324]	@ (8010ce0 <Accelero_Sensor_Handler+0x150>)
 8010b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ba0:	4850      	ldr	r0, [pc, #320]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010ba2:	f004 fa2d 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 8010ba6:	494f      	ldr	r1, [pc, #316]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010ba8:	484f      	ldr	r0, [pc, #316]	@ (8010ce8 <Accelero_Sensor_Handler+0x158>)
 8010baa:	f004 f9b9 	bl	8014f20 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8010bae:	f107 031c 	add.w	r3, r7, #28
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	2102      	movs	r1, #2
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7fa fdc8 	bl	800b74c <IKS4A1_MOTION_SENSOR_GetAxes>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d007      	beq.n	8010bd2 <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4a49      	ldr	r2, [pc, #292]	@ (8010cec <Accelero_Sensor_Handler+0x15c>)
 8010bc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010bca:	4846      	ldr	r0, [pc, #280]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010bcc:	f004 fa18 	bl	8015000 <sniprintf>
 8010bd0:	e011      	b.n	8010bf6 <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010bd2:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8010bd4:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010bd6:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8010bd8:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010bda:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8010bdc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010bde:	9404      	str	r4, [sp, #16]
 8010be0:	9003      	str	r0, [sp, #12]
 8010be2:	9102      	str	r1, [sp, #8]
 8010be4:	9201      	str	r2, [sp, #4]
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	462b      	mov	r3, r5
 8010bea:	4a41      	ldr	r2, [pc, #260]	@ (8010cf0 <Accelero_Sensor_Handler+0x160>)
 8010bec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010bf0:	483c      	ldr	r0, [pc, #240]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010bf2:	f004 fa05 	bl	8015000 <sniprintf>
  }

  printf("%s", dataOut);
 8010bf6:	493b      	ldr	r1, [pc, #236]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010bf8:	483b      	ldr	r0, [pc, #236]	@ (8010ce8 <Accelero_Sensor_Handler+0x158>)
 8010bfa:	f004 f991 	bl	8014f20 <iprintf>

  if (verbose == 1)
 8010bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8010cf4 <Accelero_Sensor_Handler+0x164>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d168      	bne.n	8010cd8 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8010c06:	f107 030f 	add.w	r3, r7, #15
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7fa fd73 	bl	800b6f8 <IKS4A1_MOTION_SENSOR_ReadID>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d007      	beq.n	8010c28 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4a37      	ldr	r2, [pc, #220]	@ (8010cf8 <Accelero_Sensor_Handler+0x168>)
 8010c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c20:	4830      	ldr	r0, [pc, #192]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010c22:	f004 f9ed 	bl	8015000 <sniprintf>
 8010c26:	e008      	b.n	8010c3a <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	7bfa      	ldrb	r2, [r7, #15]
 8010c2c:	9200      	str	r2, [sp, #0]
 8010c2e:	4a33      	ldr	r2, [pc, #204]	@ (8010cfc <Accelero_Sensor_Handler+0x16c>)
 8010c30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c34:	482b      	ldr	r0, [pc, #172]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010c36:	f004 f9e3 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010c3a:	492a      	ldr	r1, [pc, #168]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010c3c:	482a      	ldr	r0, [pc, #168]	@ (8010ce8 <Accelero_Sensor_Handler+0x158>)
 8010c3e:	f004 f96f 	bl	8014f20 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8010c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010c46:	461a      	mov	r2, r3
 8010c48:	2102      	movs	r1, #2
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7fa fdc2 	bl	800b7d4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d007      	beq.n	8010c66 <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4a29      	ldr	r2, [pc, #164]	@ (8010d00 <Accelero_Sensor_Handler+0x170>)
 8010c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c5e:	4821      	ldr	r0, [pc, #132]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010c60:	f004 f9ce 	bl	8015000 <sniprintf>
 8010c64:	e014      	b.n	8010c90 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8010c66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010c6a:	f107 0310 	add.w	r3, r7, #16
 8010c6e:	2103      	movs	r1, #3
 8010c70:	4618      	mov	r0, r3
 8010c72:	eeb0 0a67 	vmov.f32	s0, s15
 8010c76:	f7ff ff0b 	bl	8010a90 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8010c7e:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010c80:	9101      	str	r1, [sp, #4]
 8010c82:	9200      	str	r2, [sp, #0]
 8010c84:	4a1f      	ldr	r2, [pc, #124]	@ (8010d04 <Accelero_Sensor_Handler+0x174>)
 8010c86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c8a:	4816      	ldr	r0, [pc, #88]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010c8c:	f004 f9b8 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010c90:	4914      	ldr	r1, [pc, #80]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010c92:	4815      	ldr	r0, [pc, #84]	@ (8010ce8 <Accelero_Sensor_Handler+0x158>)
 8010c94:	f004 f944 	bl	8014f20 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8010c98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	2102      	movs	r1, #2
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7fa fddb 	bl	800b85c <IKS4A1_MOTION_SENSOR_GetFullScale>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d007      	beq.n	8010cbc <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	4a16      	ldr	r2, [pc, #88]	@ (8010d08 <Accelero_Sensor_Handler+0x178>)
 8010cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cb4:	480b      	ldr	r0, [pc, #44]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010cb6:	f004 f9a3 	bl	8015000 <sniprintf>
 8010cba:	e009      	b.n	8010cd0 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc0:	9300      	str	r3, [sp, #0]
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	4a11      	ldr	r2, [pc, #68]	@ (8010d0c <Accelero_Sensor_Handler+0x17c>)
 8010cc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cca:	4806      	ldr	r0, [pc, #24]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010ccc:	f004 f998 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010cd0:	4904      	ldr	r1, [pc, #16]	@ (8010ce4 <Accelero_Sensor_Handler+0x154>)
 8010cd2:	4805      	ldr	r0, [pc, #20]	@ (8010ce8 <Accelero_Sensor_Handler+0x158>)
 8010cd4:	f004 f924 	bl	8014f20 <iprintf>
  }
}
 8010cd8:	bf00      	nop
 8010cda:	3730      	adds	r7, #48	@ 0x30
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bdb0      	pop	{r4, r5, r7, pc}
 8010ce0:	080174f4 	.word	0x080174f4
 8010ce4:	20000c78 	.word	0x20000c78
 8010ce8:	08017328 	.word	0x08017328
 8010cec:	08017514 	.word	0x08017514
 8010cf0:	08017528 	.word	0x08017528
 8010cf4:	20000225 	.word	0x20000225
 8010cf8:	08017558 	.word	0x08017558
 8010cfc:	0801756c 	.word	0x0801756c
 8010d00:	08017580 	.word	0x08017580
 8010d04:	08017594 	.word	0x08017594
 8010d08:	080175ac 	.word	0x080175ac
 8010d0c:	080175bc 	.word	0x080175bc

08010d10 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 8010d10:	b5b0      	push	{r4, r5, r7, lr}
 8010d12:	b092      	sub	sp, #72	@ 0x48
 8010d14:	af06      	add	r7, sp, #24
 8010d16:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	4a51      	ldr	r2, [pc, #324]	@ (8010e60 <Gyro_Sensor_Handler+0x150>)
 8010d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d20:	4850      	ldr	r0, [pc, #320]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010d22:	f004 f96d 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 8010d26:	494f      	ldr	r1, [pc, #316]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010d28:	484f      	ldr	r0, [pc, #316]	@ (8010e68 <Gyro_Sensor_Handler+0x158>)
 8010d2a:	f004 f8f9 	bl	8014f20 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8010d2e:	f107 031c 	add.w	r3, r7, #28
 8010d32:	461a      	mov	r2, r3
 8010d34:	2101      	movs	r1, #1
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f7fa fd08 	bl	800b74c <IKS4A1_MOTION_SENSOR_GetAxes>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d007      	beq.n	8010d52 <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4a49      	ldr	r2, [pc, #292]	@ (8010e6c <Gyro_Sensor_Handler+0x15c>)
 8010d46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d4a:	4846      	ldr	r0, [pc, #280]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010d4c:	f004 f958 	bl	8015000 <sniprintf>
 8010d50:	e011      	b.n	8010d76 <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010d52:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8010d54:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010d56:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8010d58:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010d5a:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8010d5c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010d5e:	9404      	str	r4, [sp, #16]
 8010d60:	9003      	str	r0, [sp, #12]
 8010d62:	9102      	str	r1, [sp, #8]
 8010d64:	9201      	str	r2, [sp, #4]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	462b      	mov	r3, r5
 8010d6a:	4a41      	ldr	r2, [pc, #260]	@ (8010e70 <Gyro_Sensor_Handler+0x160>)
 8010d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d70:	483c      	ldr	r0, [pc, #240]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010d72:	f004 f945 	bl	8015000 <sniprintf>
  }

  printf("%s", dataOut);
 8010d76:	493b      	ldr	r1, [pc, #236]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010d78:	483b      	ldr	r0, [pc, #236]	@ (8010e68 <Gyro_Sensor_Handler+0x158>)
 8010d7a:	f004 f8d1 	bl	8014f20 <iprintf>

  if (verbose == 1)
 8010d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8010e74 <Gyro_Sensor_Handler+0x164>)
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d168      	bne.n	8010e58 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8010d86:	f107 030f 	add.w	r3, r7, #15
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fa fcb3 	bl	800b6f8 <IKS4A1_MOTION_SENSOR_ReadID>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d007      	beq.n	8010da8 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a37      	ldr	r2, [pc, #220]	@ (8010e78 <Gyro_Sensor_Handler+0x168>)
 8010d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010da0:	4830      	ldr	r0, [pc, #192]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010da2:	f004 f92d 	bl	8015000 <sniprintf>
 8010da6:	e008      	b.n	8010dba <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	7bfa      	ldrb	r2, [r7, #15]
 8010dac:	9200      	str	r2, [sp, #0]
 8010dae:	4a33      	ldr	r2, [pc, #204]	@ (8010e7c <Gyro_Sensor_Handler+0x16c>)
 8010db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010db4:	482b      	ldr	r0, [pc, #172]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010db6:	f004 f923 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010dba:	492a      	ldr	r1, [pc, #168]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010dbc:	482a      	ldr	r0, [pc, #168]	@ (8010e68 <Gyro_Sensor_Handler+0x158>)
 8010dbe:	f004 f8af 	bl	8014f20 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8010dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	2101      	movs	r1, #1
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7fa fd02 	bl	800b7d4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d007      	beq.n	8010de6 <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	4a29      	ldr	r2, [pc, #164]	@ (8010e80 <Gyro_Sensor_Handler+0x170>)
 8010dda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010dde:	4821      	ldr	r0, [pc, #132]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010de0:	f004 f90e 	bl	8015000 <sniprintf>
 8010de4:	e014      	b.n	8010e10 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8010de6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010dea:	f107 0310 	add.w	r3, r7, #16
 8010dee:	2103      	movs	r1, #3
 8010df0:	4618      	mov	r0, r3
 8010df2:	eeb0 0a67 	vmov.f32	s0, s15
 8010df6:	f7ff fe4b 	bl	8010a90 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8010dfe:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010e00:	9101      	str	r1, [sp, #4]
 8010e02:	9200      	str	r2, [sp, #0]
 8010e04:	4a1f      	ldr	r2, [pc, #124]	@ (8010e84 <Gyro_Sensor_Handler+0x174>)
 8010e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e0a:	4816      	ldr	r0, [pc, #88]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010e0c:	f004 f8f8 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010e10:	4914      	ldr	r1, [pc, #80]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010e12:	4815      	ldr	r0, [pc, #84]	@ (8010e68 <Gyro_Sensor_Handler+0x158>)
 8010e14:	f004 f884 	bl	8014f20 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 8010e18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	2101      	movs	r1, #1
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7fa fd1b 	bl	800b85c <IKS4A1_MOTION_SENSOR_GetFullScale>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d007      	beq.n	8010e3c <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4a16      	ldr	r2, [pc, #88]	@ (8010e88 <Gyro_Sensor_Handler+0x178>)
 8010e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e34:	480b      	ldr	r0, [pc, #44]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010e36:	f004 f8e3 	bl	8015000 <sniprintf>
 8010e3a:	e009      	b.n	8010e50 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	4613      	mov	r3, r2
 8010e44:	4a11      	ldr	r2, [pc, #68]	@ (8010e8c <Gyro_Sensor_Handler+0x17c>)
 8010e46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e4a:	4806      	ldr	r0, [pc, #24]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010e4c:	f004 f8d8 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010e50:	4904      	ldr	r1, [pc, #16]	@ (8010e64 <Gyro_Sensor_Handler+0x154>)
 8010e52:	4805      	ldr	r0, [pc, #20]	@ (8010e68 <Gyro_Sensor_Handler+0x158>)
 8010e54:	f004 f864 	bl	8014f20 <iprintf>
  }
}
 8010e58:	bf00      	nop
 8010e5a:	3730      	adds	r7, #48	@ 0x30
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8010e60:	080174f4 	.word	0x080174f4
 8010e64:	20000c78 	.word	0x20000c78
 8010e68:	08017328 	.word	0x08017328
 8010e6c:	080175cc 	.word	0x080175cc
 8010e70:	080175e0 	.word	0x080175e0
 8010e74:	20000225 	.word	0x20000225
 8010e78:	08017558 	.word	0x08017558
 8010e7c:	0801756c 	.word	0x0801756c
 8010e80:	08017580 	.word	0x08017580
 8010e84:	08017594 	.word	0x08017594
 8010e88:	080175ac 	.word	0x080175ac
 8010e8c:	08017610 	.word	0x08017610

08010e90 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8010e90:	b5b0      	push	{r4, r5, r7, lr}
 8010e92:	b092      	sub	sp, #72	@ 0x48
 8010e94:	af06      	add	r7, sp, #24
 8010e96:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4a51      	ldr	r2, [pc, #324]	@ (8010fe0 <Magneto_Sensor_Handler+0x150>)
 8010e9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ea0:	4850      	ldr	r0, [pc, #320]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010ea2:	f004 f8ad 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 8010ea6:	494f      	ldr	r1, [pc, #316]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010ea8:	484f      	ldr	r0, [pc, #316]	@ (8010fe8 <Magneto_Sensor_Handler+0x158>)
 8010eaa:	f004 f839 	bl	8014f20 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8010eae:	f107 031c 	add.w	r3, r7, #28
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	2104      	movs	r1, #4
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7fa fc48 	bl	800b74c <IKS4A1_MOTION_SENSOR_GetAxes>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d007      	beq.n	8010ed2 <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4a49      	ldr	r2, [pc, #292]	@ (8010fec <Magneto_Sensor_Handler+0x15c>)
 8010ec6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010eca:	4846      	ldr	r0, [pc, #280]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010ecc:	f004 f898 	bl	8015000 <sniprintf>
 8010ed0:	e011      	b.n	8010ef6 <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010ed2:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8010ed4:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010ed6:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8010ed8:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010eda:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8010edc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010ede:	9404      	str	r4, [sp, #16]
 8010ee0:	9003      	str	r0, [sp, #12]
 8010ee2:	9102      	str	r1, [sp, #8]
 8010ee4:	9201      	str	r2, [sp, #4]
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	462b      	mov	r3, r5
 8010eea:	4a41      	ldr	r2, [pc, #260]	@ (8010ff0 <Magneto_Sensor_Handler+0x160>)
 8010eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ef0:	483c      	ldr	r0, [pc, #240]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010ef2:	f004 f885 	bl	8015000 <sniprintf>
  }

  printf("%s", dataOut);
 8010ef6:	493b      	ldr	r1, [pc, #236]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010ef8:	483b      	ldr	r0, [pc, #236]	@ (8010fe8 <Magneto_Sensor_Handler+0x158>)
 8010efa:	f004 f811 	bl	8014f20 <iprintf>

  if (verbose == 1)
 8010efe:	4b3d      	ldr	r3, [pc, #244]	@ (8010ff4 <Magneto_Sensor_Handler+0x164>)
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d168      	bne.n	8010fd8 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8010f06:	f107 030f 	add.w	r3, r7, #15
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7fa fbf3 	bl	800b6f8 <IKS4A1_MOTION_SENSOR_ReadID>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d007      	beq.n	8010f28 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a37      	ldr	r2, [pc, #220]	@ (8010ff8 <Magneto_Sensor_Handler+0x168>)
 8010f1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f20:	4830      	ldr	r0, [pc, #192]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010f22:	f004 f86d 	bl	8015000 <sniprintf>
 8010f26:	e008      	b.n	8010f3a <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	7bfa      	ldrb	r2, [r7, #15]
 8010f2c:	9200      	str	r2, [sp, #0]
 8010f2e:	4a33      	ldr	r2, [pc, #204]	@ (8010ffc <Magneto_Sensor_Handler+0x16c>)
 8010f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f34:	482b      	ldr	r0, [pc, #172]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010f36:	f004 f863 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010f3a:	492a      	ldr	r1, [pc, #168]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010f3c:	482a      	ldr	r0, [pc, #168]	@ (8010fe8 <Magneto_Sensor_Handler+0x158>)
 8010f3e:	f003 ffef 	bl	8014f20 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 8010f42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010f46:	461a      	mov	r2, r3
 8010f48:	2104      	movs	r1, #4
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7fa fc42 	bl	800b7d4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d007      	beq.n	8010f66 <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4a29      	ldr	r2, [pc, #164]	@ (8011000 <Magneto_Sensor_Handler+0x170>)
 8010f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f5e:	4821      	ldr	r0, [pc, #132]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010f60:	f004 f84e 	bl	8015000 <sniprintf>
 8010f64:	e014      	b.n	8010f90 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8010f66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010f6a:	f107 0310 	add.w	r3, r7, #16
 8010f6e:	2103      	movs	r1, #3
 8010f70:	4618      	mov	r0, r3
 8010f72:	eeb0 0a67 	vmov.f32	s0, s15
 8010f76:	f7ff fd8b 	bl	8010a90 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8010f7e:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010f80:	9101      	str	r1, [sp, #4]
 8010f82:	9200      	str	r2, [sp, #0]
 8010f84:	4a1f      	ldr	r2, [pc, #124]	@ (8011004 <Magneto_Sensor_Handler+0x174>)
 8010f86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f8a:	4816      	ldr	r0, [pc, #88]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010f8c:	f004 f838 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010f90:	4914      	ldr	r1, [pc, #80]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010f92:	4815      	ldr	r0, [pc, #84]	@ (8010fe8 <Magneto_Sensor_Handler+0x158>)
 8010f94:	f003 ffc4 	bl	8014f20 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8010f98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	2104      	movs	r1, #4
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7fa fc5b 	bl	800b85c <IKS4A1_MOTION_SENSOR_GetFullScale>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d007      	beq.n	8010fbc <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4a16      	ldr	r2, [pc, #88]	@ (8011008 <Magneto_Sensor_Handler+0x178>)
 8010fb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010fb4:	480b      	ldr	r0, [pc, #44]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010fb6:	f004 f823 	bl	8015000 <sniprintf>
 8010fba:	e009      	b.n	8010fd0 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	4a11      	ldr	r2, [pc, #68]	@ (801100c <Magneto_Sensor_Handler+0x17c>)
 8010fc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010fca:	4806      	ldr	r0, [pc, #24]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010fcc:	f004 f818 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8010fd0:	4904      	ldr	r1, [pc, #16]	@ (8010fe4 <Magneto_Sensor_Handler+0x154>)
 8010fd2:	4805      	ldr	r0, [pc, #20]	@ (8010fe8 <Magneto_Sensor_Handler+0x158>)
 8010fd4:	f003 ffa4 	bl	8014f20 <iprintf>
  }
}
 8010fd8:	bf00      	nop
 8010fda:	3730      	adds	r7, #48	@ 0x30
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bdb0      	pop	{r4, r5, r7, pc}
 8010fe0:	080174f4 	.word	0x080174f4
 8010fe4:	20000c78 	.word	0x20000c78
 8010fe8:	08017328 	.word	0x08017328
 8010fec:	08017624 	.word	0x08017624
 8010ff0:	08017638 	.word	0x08017638
 8010ff4:	20000225 	.word	0x20000225
 8010ff8:	08017558 	.word	0x08017558
 8010ffc:	0801756c 	.word	0x0801756c
 8011000:	08017580 	.word	0x08017580
 8011004:	08017594 	.word	0x08017594
 8011008:	080175ac 	.word	0x080175ac
 801100c:	08017668 	.word	0x08017668

08011010 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b08c      	sub	sp, #48	@ 0x30
 8011014:	af04      	add	r7, sp, #16
 8011016:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	4a47      	ldr	r2, [pc, #284]	@ (8011138 <Temp_Sensor_Handler+0x128>)
 801101c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011020:	4846      	ldr	r0, [pc, #280]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 8011022:	f003 ffed 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 8011026:	4945      	ldr	r1, [pc, #276]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 8011028:	4845      	ldr	r0, [pc, #276]	@ (8011140 <Temp_Sensor_Handler+0x130>)
 801102a:	f003 ff79 	bl	8014f20 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 801102e:	f107 0318 	add.w	r3, r7, #24
 8011032:	461a      	mov	r2, r3
 8011034:	2101      	movs	r1, #1
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f7f9 ff6a 	bl	800af10 <IKS4A1_ENV_SENSOR_GetValue>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d007      	beq.n	8011052 <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4a3f      	ldr	r2, [pc, #252]	@ (8011144 <Temp_Sensor_Handler+0x134>)
 8011046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801104a:	483c      	ldr	r0, [pc, #240]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 801104c:	f003 ffd8 	bl	8015000 <sniprintf>
 8011050:	e01d      	b.n	801108e <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 8011052:	edd7 7a06 	vldr	s15, [r7, #24]
 8011056:	f107 030c 	add.w	r3, r7, #12
 801105a:	2102      	movs	r1, #2
 801105c:	4618      	mov	r0, r3
 801105e:	eeb0 0a67 	vmov.f32	s0, s15
 8011062:	f7ff fd15 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <Temp_Sensor_Handler+0x64>
 8011070:	232d      	movs	r3, #45	@ 0x2d
 8011072:	e000      	b.n	8011076 <Temp_Sensor_Handler+0x66>
 8011074:	232b      	movs	r3, #43	@ 0x2b
 8011076:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 8011078:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 801107a:	9002      	str	r0, [sp, #8]
 801107c:	9101      	str	r1, [sp, #4]
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	4613      	mov	r3, r2
 8011082:	4a31      	ldr	r2, [pc, #196]	@ (8011148 <Temp_Sensor_Handler+0x138>)
 8011084:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011088:	482c      	ldr	r0, [pc, #176]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 801108a:	f003 ffb9 	bl	8015000 <sniprintf>
  }

  printf("%s", dataOut);
 801108e:	492b      	ldr	r1, [pc, #172]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 8011090:	482b      	ldr	r0, [pc, #172]	@ (8011140 <Temp_Sensor_Handler+0x130>)
 8011092:	f003 ff45 	bl	8014f20 <iprintf>

  if (verbose == 1)
 8011096:	4b2d      	ldr	r3, [pc, #180]	@ (801114c <Temp_Sensor_Handler+0x13c>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	2b01      	cmp	r3, #1
 801109c:	d148      	bne.n	8011130 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 801109e:	f107 030b 	add.w	r3, r7, #11
 80110a2:	4619      	mov	r1, r3
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7f9 fec7 	bl	800ae38 <IKS4A1_ENV_SENSOR_ReadID>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a27      	ldr	r2, [pc, #156]	@ (8011150 <Temp_Sensor_Handler+0x140>)
 80110b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110b8:	4820      	ldr	r0, [pc, #128]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 80110ba:	f003 ffa1 	bl	8015000 <sniprintf>
 80110be:	e008      	b.n	80110d2 <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	7afa      	ldrb	r2, [r7, #11]
 80110c4:	9200      	str	r2, [sp, #0]
 80110c6:	4a23      	ldr	r2, [pc, #140]	@ (8011154 <Temp_Sensor_Handler+0x144>)
 80110c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110cc:	481b      	ldr	r0, [pc, #108]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 80110ce:	f003 ff97 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 80110d2:	491a      	ldr	r1, [pc, #104]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 80110d4:	481a      	ldr	r0, [pc, #104]	@ (8011140 <Temp_Sensor_Handler+0x130>)
 80110d6:	f003 ff23 	bl	8014f20 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 80110da:	f107 031c 	add.w	r3, r7, #28
 80110de:	461a      	mov	r2, r3
 80110e0:	2101      	movs	r1, #1
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7f9 fed2 	bl	800ae8c <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d007      	beq.n	80110fe <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4a19      	ldr	r2, [pc, #100]	@ (8011158 <Temp_Sensor_Handler+0x148>)
 80110f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110f6:	4811      	ldr	r0, [pc, #68]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 80110f8:	f003 ff82 	bl	8015000 <sniprintf>
 80110fc:	e014      	b.n	8011128 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80110fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8011102:	f107 030c 	add.w	r3, r7, #12
 8011106:	2103      	movs	r1, #3
 8011108:	4618      	mov	r0, r3
 801110a:	eeb0 0a67 	vmov.f32	s0, s15
 801110e:	f7ff fcbf 	bl	8010a90 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8011116:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011118:	9101      	str	r1, [sp, #4]
 801111a:	9200      	str	r2, [sp, #0]
 801111c:	4a0f      	ldr	r2, [pc, #60]	@ (801115c <Temp_Sensor_Handler+0x14c>)
 801111e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011122:	4806      	ldr	r0, [pc, #24]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 8011124:	f003 ff6c 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8011128:	4904      	ldr	r1, [pc, #16]	@ (801113c <Temp_Sensor_Handler+0x12c>)
 801112a:	4805      	ldr	r0, [pc, #20]	@ (8011140 <Temp_Sensor_Handler+0x130>)
 801112c:	f003 fef8 	bl	8014f20 <iprintf>
  }
}
 8011130:	bf00      	nop
 8011132:	3720      	adds	r7, #32
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	0801767c 	.word	0x0801767c
 801113c:	20000c78 	.word	0x20000c78
 8011140:	08017328 	.word	0x08017328
 8011144:	080176a0 	.word	0x080176a0
 8011148:	080176b4 	.word	0x080176b4
 801114c:	20000225 	.word	0x20000225
 8011150:	08017558 	.word	0x08017558
 8011154:	0801756c 	.word	0x0801756c
 8011158:	080176d4 	.word	0x080176d4
 801115c:	08017594 	.word	0x08017594

08011160 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b08a      	sub	sp, #40	@ 0x28
 8011164:	af02      	add	r7, sp, #8
 8011166:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a43      	ldr	r2, [pc, #268]	@ (8011278 <Press_Sensor_Handler+0x118>)
 801116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011170:	4842      	ldr	r0, [pc, #264]	@ (801127c <Press_Sensor_Handler+0x11c>)
 8011172:	f003 ff45 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 8011176:	4941      	ldr	r1, [pc, #260]	@ (801127c <Press_Sensor_Handler+0x11c>)
 8011178:	4841      	ldr	r0, [pc, #260]	@ (8011280 <Press_Sensor_Handler+0x120>)
 801117a:	f003 fed1 	bl	8014f20 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 801117e:	f107 0318 	add.w	r3, r7, #24
 8011182:	461a      	mov	r2, r3
 8011184:	2102      	movs	r1, #2
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7f9 fec2 	bl	800af10 <IKS4A1_ENV_SENSOR_GetValue>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d007      	beq.n	80111a2 <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a3b      	ldr	r2, [pc, #236]	@ (8011284 <Press_Sensor_Handler+0x124>)
 8011196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801119a:	4838      	ldr	r0, [pc, #224]	@ (801127c <Press_Sensor_Handler+0x11c>)
 801119c:	f003 ff30 	bl	8015000 <sniprintf>
 80111a0:	e014      	b.n	80111cc <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 80111a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80111a6:	f107 030c 	add.w	r3, r7, #12
 80111aa:	2102      	movs	r1, #2
 80111ac:	4618      	mov	r0, r3
 80111ae:	eeb0 0a67 	vmov.f32	s0, s15
 80111b2:	f7ff fc6d 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 80111ba:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 80111bc:	9101      	str	r1, [sp, #4]
 80111be:	9200      	str	r2, [sp, #0]
 80111c0:	4a31      	ldr	r2, [pc, #196]	@ (8011288 <Press_Sensor_Handler+0x128>)
 80111c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111c6:	482d      	ldr	r0, [pc, #180]	@ (801127c <Press_Sensor_Handler+0x11c>)
 80111c8:	f003 ff1a 	bl	8015000 <sniprintf>
  }

  printf("%s", dataOut);
 80111cc:	492b      	ldr	r1, [pc, #172]	@ (801127c <Press_Sensor_Handler+0x11c>)
 80111ce:	482c      	ldr	r0, [pc, #176]	@ (8011280 <Press_Sensor_Handler+0x120>)
 80111d0:	f003 fea6 	bl	8014f20 <iprintf>

  if (verbose == 1)
 80111d4:	4b2d      	ldr	r3, [pc, #180]	@ (801128c <Press_Sensor_Handler+0x12c>)
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d148      	bne.n	801126e <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 80111dc:	f107 030b 	add.w	r3, r7, #11
 80111e0:	4619      	mov	r1, r3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7f9 fe28 	bl	800ae38 <IKS4A1_ENV_SENSOR_ReadID>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d007      	beq.n	80111fe <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4a27      	ldr	r2, [pc, #156]	@ (8011290 <Press_Sensor_Handler+0x130>)
 80111f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111f6:	4821      	ldr	r0, [pc, #132]	@ (801127c <Press_Sensor_Handler+0x11c>)
 80111f8:	f003 ff02 	bl	8015000 <sniprintf>
 80111fc:	e008      	b.n	8011210 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	7afa      	ldrb	r2, [r7, #11]
 8011202:	9200      	str	r2, [sp, #0]
 8011204:	4a23      	ldr	r2, [pc, #140]	@ (8011294 <Press_Sensor_Handler+0x134>)
 8011206:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801120a:	481c      	ldr	r0, [pc, #112]	@ (801127c <Press_Sensor_Handler+0x11c>)
 801120c:	f003 fef8 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8011210:	491a      	ldr	r1, [pc, #104]	@ (801127c <Press_Sensor_Handler+0x11c>)
 8011212:	481b      	ldr	r0, [pc, #108]	@ (8011280 <Press_Sensor_Handler+0x120>)
 8011214:	f003 fe84 	bl	8014f20 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 8011218:	f107 031c 	add.w	r3, r7, #28
 801121c:	461a      	mov	r2, r3
 801121e:	2102      	movs	r1, #2
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7f9 fe33 	bl	800ae8c <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d007      	beq.n	801123c <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	4a1a      	ldr	r2, [pc, #104]	@ (8011298 <Press_Sensor_Handler+0x138>)
 8011230:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011234:	4811      	ldr	r0, [pc, #68]	@ (801127c <Press_Sensor_Handler+0x11c>)
 8011236:	f003 fee3 	bl	8015000 <sniprintf>
 801123a:	e014      	b.n	8011266 <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8011240:	f107 030c 	add.w	r3, r7, #12
 8011244:	2103      	movs	r1, #3
 8011246:	4618      	mov	r0, r3
 8011248:	eeb0 0a67 	vmov.f32	s0, s15
 801124c:	f7ff fc20 	bl	8010a90 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8011254:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011256:	9101      	str	r1, [sp, #4]
 8011258:	9200      	str	r2, [sp, #0]
 801125a:	4a10      	ldr	r2, [pc, #64]	@ (801129c <Press_Sensor_Handler+0x13c>)
 801125c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011260:	4806      	ldr	r0, [pc, #24]	@ (801127c <Press_Sensor_Handler+0x11c>)
 8011262:	f003 fecd 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8011266:	4905      	ldr	r1, [pc, #20]	@ (801127c <Press_Sensor_Handler+0x11c>)
 8011268:	4805      	ldr	r0, [pc, #20]	@ (8011280 <Press_Sensor_Handler+0x120>)
 801126a:	f003 fe59 	bl	8014f20 <iprintf>
  }
}
 801126e:	bf00      	nop
 8011270:	3720      	adds	r7, #32
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	0801767c 	.word	0x0801767c
 801127c:	20000c78 	.word	0x20000c78
 8011280:	08017328 	.word	0x08017328
 8011284:	080176e8 	.word	0x080176e8
 8011288:	08017700 	.word	0x08017700
 801128c:	20000225 	.word	0x20000225
 8011290:	08017558 	.word	0x08017558
 8011294:	0801756c 	.word	0x0801756c
 8011298:	080176d4 	.word	0x080176d4
 801129c:	08017594 	.word	0x08017594

080112a0 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08a      	sub	sp, #40	@ 0x28
 80112a4:	af02      	add	r7, sp, #8
 80112a6:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4a43      	ldr	r2, [pc, #268]	@ (80113b8 <Hum_Sensor_Handler+0x118>)
 80112ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112b0:	4842      	ldr	r0, [pc, #264]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 80112b2:	f003 fea5 	bl	8015000 <sniprintf>
  printf("%s", dataOut);
 80112b6:	4941      	ldr	r1, [pc, #260]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 80112b8:	4841      	ldr	r0, [pc, #260]	@ (80113c0 <Hum_Sensor_Handler+0x120>)
 80112ba:	f003 fe31 	bl	8014f20 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 80112be:	f107 0318 	add.w	r3, r7, #24
 80112c2:	461a      	mov	r2, r3
 80112c4:	2104      	movs	r1, #4
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7f9 fe22 	bl	800af10 <IKS4A1_ENV_SENSOR_GetValue>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d007      	beq.n	80112e2 <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4a3b      	ldr	r2, [pc, #236]	@ (80113c4 <Hum_Sensor_Handler+0x124>)
 80112d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112da:	4838      	ldr	r0, [pc, #224]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 80112dc:	f003 fe90 	bl	8015000 <sniprintf>
 80112e0:	e014      	b.n	801130c <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 80112e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80112e6:	f107 030c 	add.w	r3, r7, #12
 80112ea:	2102      	movs	r1, #2
 80112ec:	4618      	mov	r0, r3
 80112ee:	eeb0 0a67 	vmov.f32	s0, s15
 80112f2:	f7ff fbcd 	bl	8010a90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 80112fa:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 80112fc:	9101      	str	r1, [sp, #4]
 80112fe:	9200      	str	r2, [sp, #0]
 8011300:	4a31      	ldr	r2, [pc, #196]	@ (80113c8 <Hum_Sensor_Handler+0x128>)
 8011302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011306:	482d      	ldr	r0, [pc, #180]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 8011308:	f003 fe7a 	bl	8015000 <sniprintf>
  }

  printf("%s", dataOut);
 801130c:	492b      	ldr	r1, [pc, #172]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 801130e:	482c      	ldr	r0, [pc, #176]	@ (80113c0 <Hum_Sensor_Handler+0x120>)
 8011310:	f003 fe06 	bl	8014f20 <iprintf>

  if (verbose == 1)
 8011314:	4b2d      	ldr	r3, [pc, #180]	@ (80113cc <Hum_Sensor_Handler+0x12c>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	2b01      	cmp	r3, #1
 801131a:	d148      	bne.n	80113ae <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 801131c:	f107 030b 	add.w	r3, r7, #11
 8011320:	4619      	mov	r1, r3
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7f9 fd88 	bl	800ae38 <IKS4A1_ENV_SENSOR_ReadID>
 8011328:	4603      	mov	r3, r0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d007      	beq.n	801133e <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a27      	ldr	r2, [pc, #156]	@ (80113d0 <Hum_Sensor_Handler+0x130>)
 8011332:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011336:	4821      	ldr	r0, [pc, #132]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 8011338:	f003 fe62 	bl	8015000 <sniprintf>
 801133c:	e008      	b.n	8011350 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	7afa      	ldrb	r2, [r7, #11]
 8011342:	9200      	str	r2, [sp, #0]
 8011344:	4a23      	ldr	r2, [pc, #140]	@ (80113d4 <Hum_Sensor_Handler+0x134>)
 8011346:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801134a:	481c      	ldr	r0, [pc, #112]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 801134c:	f003 fe58 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 8011350:	491a      	ldr	r1, [pc, #104]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 8011352:	481b      	ldr	r0, [pc, #108]	@ (80113c0 <Hum_Sensor_Handler+0x120>)
 8011354:	f003 fde4 	bl	8014f20 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 8011358:	f107 031c 	add.w	r3, r7, #28
 801135c:	461a      	mov	r2, r3
 801135e:	2104      	movs	r1, #4
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7f9 fd93 	bl	800ae8c <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d007      	beq.n	801137c <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4a1a      	ldr	r2, [pc, #104]	@ (80113d8 <Hum_Sensor_Handler+0x138>)
 8011370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011374:	4811      	ldr	r0, [pc, #68]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 8011376:	f003 fe43 	bl	8015000 <sniprintf>
 801137a:	e014      	b.n	80113a6 <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801137c:	edd7 7a07 	vldr	s15, [r7, #28]
 8011380:	f107 030c 	add.w	r3, r7, #12
 8011384:	2103      	movs	r1, #3
 8011386:	4618      	mov	r0, r3
 8011388:	eeb0 0a67 	vmov.f32	s0, s15
 801138c:	f7ff fb80 	bl	8010a90 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8011394:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011396:	9101      	str	r1, [sp, #4]
 8011398:	9200      	str	r2, [sp, #0]
 801139a:	4a10      	ldr	r2, [pc, #64]	@ (80113dc <Hum_Sensor_Handler+0x13c>)
 801139c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113a0:	4806      	ldr	r0, [pc, #24]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 80113a2:	f003 fe2d 	bl	8015000 <sniprintf>
    }

    printf("%s", dataOut);
 80113a6:	4905      	ldr	r1, [pc, #20]	@ (80113bc <Hum_Sensor_Handler+0x11c>)
 80113a8:	4805      	ldr	r0, [pc, #20]	@ (80113c0 <Hum_Sensor_Handler+0x120>)
 80113aa:	f003 fdb9 	bl	8014f20 <iprintf>
  }
}
 80113ae:	bf00      	nop
 80113b0:	3720      	adds	r7, #32
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	0801767c 	.word	0x0801767c
 80113bc:	20000c78 	.word	0x20000c78
 80113c0:	08017328 	.word	0x08017328
 80113c4:	0801771c 	.word	0x0801771c
 80113c8:	08017730 	.word	0x08017730
 80113cc:	20000225 	.word	0x20000225
 80113d0:	08017558 	.word	0x08017558
 80113d4:	0801756c 	.word	0x0801756c
 80113d8:	080176d4 	.word	0x080176d4
 80113dc:	08017594 	.word	0x08017594

080113e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80113ea:	79fb      	ldrb	r3, [r7, #7]
 80113ec:	4a08      	ldr	r2, [pc, #32]	@ (8011410 <disk_status+0x30>)
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	79fa      	ldrb	r2, [r7, #7]
 80113f8:	4905      	ldr	r1, [pc, #20]	@ (8011410 <disk_status+0x30>)
 80113fa:	440a      	add	r2, r1
 80113fc:	7a12      	ldrb	r2, [r2, #8]
 80113fe:	4610      	mov	r0, r2
 8011400:	4798      	blx	r3
 8011402:	4603      	mov	r3, r0
 8011404:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011406:	7bfb      	ldrb	r3, [r7, #15]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	20000da4 	.word	0x20000da4

08011414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	4603      	mov	r3, r0
 801141c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	4a0e      	ldr	r2, [pc, #56]	@ (8011460 <disk_initialize+0x4c>)
 8011426:	5cd3      	ldrb	r3, [r2, r3]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d114      	bne.n	8011456 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	4a0c      	ldr	r2, [pc, #48]	@ (8011460 <disk_initialize+0x4c>)
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	4413      	add	r3, r2
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	79fa      	ldrb	r2, [r7, #7]
 801143a:	4909      	ldr	r1, [pc, #36]	@ (8011460 <disk_initialize+0x4c>)
 801143c:	440a      	add	r2, r1
 801143e:	7a12      	ldrb	r2, [r2, #8]
 8011440:	4610      	mov	r0, r2
 8011442:	4798      	blx	r3
 8011444:	4603      	mov	r3, r0
 8011446:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011448:	7bfb      	ldrb	r3, [r7, #15]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d103      	bne.n	8011456 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801144e:	79fb      	ldrb	r3, [r7, #7]
 8011450:	4a03      	ldr	r2, [pc, #12]	@ (8011460 <disk_initialize+0x4c>)
 8011452:	2101      	movs	r1, #1
 8011454:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8011456:	7bfb      	ldrb	r3, [r7, #15]
}
 8011458:	4618      	mov	r0, r3
 801145a:	3710      	adds	r7, #16
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	20000da4 	.word	0x20000da4

08011464 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011464:	b590      	push	{r4, r7, lr}
 8011466:	b087      	sub	sp, #28
 8011468:	af00      	add	r7, sp, #0
 801146a:	60b9      	str	r1, [r7, #8]
 801146c:	607a      	str	r2, [r7, #4]
 801146e:	603b      	str	r3, [r7, #0]
 8011470:	4603      	mov	r3, r0
 8011472:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011474:	7bfb      	ldrb	r3, [r7, #15]
 8011476:	4a0a      	ldr	r2, [pc, #40]	@ (80114a0 <disk_read+0x3c>)
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4413      	add	r3, r2
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	689c      	ldr	r4, [r3, #8]
 8011480:	7bfb      	ldrb	r3, [r7, #15]
 8011482:	4a07      	ldr	r2, [pc, #28]	@ (80114a0 <disk_read+0x3c>)
 8011484:	4413      	add	r3, r2
 8011486:	7a18      	ldrb	r0, [r3, #8]
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	68b9      	ldr	r1, [r7, #8]
 801148e:	47a0      	blx	r4
 8011490:	4603      	mov	r3, r0
 8011492:	75fb      	strb	r3, [r7, #23]
  return res;
 8011494:	7dfb      	ldrb	r3, [r7, #23]
}
 8011496:	4618      	mov	r0, r3
 8011498:	371c      	adds	r7, #28
 801149a:	46bd      	mov	sp, r7
 801149c:	bd90      	pop	{r4, r7, pc}
 801149e:	bf00      	nop
 80114a0:	20000da4 	.word	0x20000da4

080114a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80114a4:	b590      	push	{r4, r7, lr}
 80114a6:	b087      	sub	sp, #28
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60b9      	str	r1, [r7, #8]
 80114ac:	607a      	str	r2, [r7, #4]
 80114ae:	603b      	str	r3, [r7, #0]
 80114b0:	4603      	mov	r3, r0
 80114b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	4a0a      	ldr	r2, [pc, #40]	@ (80114e0 <disk_write+0x3c>)
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	4413      	add	r3, r2
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	68dc      	ldr	r4, [r3, #12]
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
 80114c2:	4a07      	ldr	r2, [pc, #28]	@ (80114e0 <disk_write+0x3c>)
 80114c4:	4413      	add	r3, r2
 80114c6:	7a18      	ldrb	r0, [r3, #8]
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	68b9      	ldr	r1, [r7, #8]
 80114ce:	47a0      	blx	r4
 80114d0:	4603      	mov	r3, r0
 80114d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80114d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	371c      	adds	r7, #28
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd90      	pop	{r4, r7, pc}
 80114de:	bf00      	nop
 80114e0:	20000da4 	.word	0x20000da4

080114e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	603a      	str	r2, [r7, #0]
 80114ee:	71fb      	strb	r3, [r7, #7]
 80114f0:	460b      	mov	r3, r1
 80114f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	4a09      	ldr	r2, [pc, #36]	@ (801151c <disk_ioctl+0x38>)
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	4413      	add	r3, r2
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	79fa      	ldrb	r2, [r7, #7]
 8011502:	4906      	ldr	r1, [pc, #24]	@ (801151c <disk_ioctl+0x38>)
 8011504:	440a      	add	r2, r1
 8011506:	7a10      	ldrb	r0, [r2, #8]
 8011508:	79b9      	ldrb	r1, [r7, #6]
 801150a:	683a      	ldr	r2, [r7, #0]
 801150c:	4798      	blx	r3
 801150e:	4603      	mov	r3, r0
 8011510:	73fb      	strb	r3, [r7, #15]
  return res;
 8011512:	7bfb      	ldrb	r3, [r7, #15]
}
 8011514:	4618      	mov	r0, r3
 8011516:	3710      	adds	r7, #16
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	20000da4 	.word	0x20000da4

08011520 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011520:	b480      	push	{r7}
 8011522:	b085      	sub	sp, #20
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	3301      	adds	r3, #1
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011534:	021b      	lsls	r3, r3, #8
 8011536:	b21a      	sxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	b21b      	sxth	r3, r3
 801153e:	4313      	orrs	r3, r2
 8011540:	b21b      	sxth	r3, r3
 8011542:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011544:	89fb      	ldrh	r3, [r7, #14]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3714      	adds	r7, #20
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr

08011552 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011552:	b480      	push	{r7}
 8011554:	b085      	sub	sp, #20
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	3303      	adds	r3, #3
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	021b      	lsls	r3, r3, #8
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	3202      	adds	r2, #2
 801156a:	7812      	ldrb	r2, [r2, #0]
 801156c:	4313      	orrs	r3, r2
 801156e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	021b      	lsls	r3, r3, #8
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	3201      	adds	r2, #1
 8011578:	7812      	ldrb	r2, [r2, #0]
 801157a:	4313      	orrs	r3, r2
 801157c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	021b      	lsls	r3, r3, #8
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	7812      	ldrb	r2, [r2, #0]
 8011586:	4313      	orrs	r3, r2
 8011588:	60fb      	str	r3, [r7, #12]
	return rv;
 801158a:	68fb      	ldr	r3, [r7, #12]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3714      	adds	r7, #20
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	460b      	mov	r3, r1
 80115a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	607a      	str	r2, [r7, #4]
 80115aa:	887a      	ldrh	r2, [r7, #2]
 80115ac:	b2d2      	uxtb	r2, r2
 80115ae:	701a      	strb	r2, [r3, #0]
 80115b0:	887b      	ldrh	r3, [r7, #2]
 80115b2:	0a1b      	lsrs	r3, r3, #8
 80115b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	1c5a      	adds	r2, r3, #1
 80115ba:	607a      	str	r2, [r7, #4]
 80115bc:	887a      	ldrh	r2, [r7, #2]
 80115be:	b2d2      	uxtb	r2, r2
 80115c0:	701a      	strb	r2, [r3, #0]
}
 80115c2:	bf00      	nop
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr

080115ce <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80115ce:	b480      	push	{r7}
 80115d0:	b083      	sub	sp, #12
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
 80115d6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	607a      	str	r2, [r7, #4]
 80115de:	683a      	ldr	r2, [r7, #0]
 80115e0:	b2d2      	uxtb	r2, r2
 80115e2:	701a      	strb	r2, [r3, #0]
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	0a1b      	lsrs	r3, r3, #8
 80115e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	1c5a      	adds	r2, r3, #1
 80115ee:	607a      	str	r2, [r7, #4]
 80115f0:	683a      	ldr	r2, [r7, #0]
 80115f2:	b2d2      	uxtb	r2, r2
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	0a1b      	lsrs	r3, r3, #8
 80115fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	1c5a      	adds	r2, r3, #1
 8011600:	607a      	str	r2, [r7, #4]
 8011602:	683a      	ldr	r2, [r7, #0]
 8011604:	b2d2      	uxtb	r2, r2
 8011606:	701a      	strb	r2, [r3, #0]
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	0a1b      	lsrs	r3, r3, #8
 801160c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	607a      	str	r2, [r7, #4]
 8011614:	683a      	ldr	r2, [r7, #0]
 8011616:	b2d2      	uxtb	r2, r2
 8011618:	701a      	strb	r2, [r3, #0]
}
 801161a:	bf00      	nop
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr

08011626 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011626:	b480      	push	{r7}
 8011628:	b087      	sub	sp, #28
 801162a:	af00      	add	r7, sp, #0
 801162c:	60f8      	str	r0, [r7, #12]
 801162e:	60b9      	str	r1, [r7, #8]
 8011630:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00d      	beq.n	801165c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011640:	693a      	ldr	r2, [r7, #16]
 8011642:	1c53      	adds	r3, r2, #1
 8011644:	613b      	str	r3, [r7, #16]
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	1c59      	adds	r1, r3, #1
 801164a:	6179      	str	r1, [r7, #20]
 801164c:	7812      	ldrb	r2, [r2, #0]
 801164e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	3b01      	subs	r3, #1
 8011654:	607b      	str	r3, [r7, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1f1      	bne.n	8011640 <mem_cpy+0x1a>
	}
}
 801165c:	bf00      	nop
 801165e:	371c      	adds	r7, #28
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011668:	b480      	push	{r7}
 801166a:	b087      	sub	sp, #28
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	1c5a      	adds	r2, r3, #1
 801167c:	617a      	str	r2, [r7, #20]
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	b2d2      	uxtb	r2, r2
 8011682:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	3b01      	subs	r3, #1
 8011688:	607b      	str	r3, [r7, #4]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1f3      	bne.n	8011678 <mem_set+0x10>
}
 8011690:	bf00      	nop
 8011692:	bf00      	nop
 8011694:	371c      	adds	r7, #28
 8011696:	46bd      	mov	sp, r7
 8011698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169c:	4770      	bx	lr

0801169e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801169e:	b480      	push	{r7}
 80116a0:	b089      	sub	sp, #36	@ 0x24
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	60f8      	str	r0, [r7, #12]
 80116a6:	60b9      	str	r1, [r7, #8]
 80116a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	61fb      	str	r3, [r7, #28]
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80116b6:	69fb      	ldr	r3, [r7, #28]
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	61fa      	str	r2, [r7, #28]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	4619      	mov	r1, r3
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	1c5a      	adds	r2, r3, #1
 80116c4:	61ba      	str	r2, [r7, #24]
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	1acb      	subs	r3, r1, r3
 80116ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	3b01      	subs	r3, #1
 80116d0:	607b      	str	r3, [r7, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d002      	beq.n	80116de <mem_cmp+0x40>
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d0eb      	beq.n	80116b6 <mem_cmp+0x18>

	return r;
 80116de:	697b      	ldr	r3, [r7, #20]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3724      	adds	r7, #36	@ 0x24
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80116f6:	e002      	b.n	80116fe <chk_chr+0x12>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3301      	adds	r3, #1
 80116fc:	607b      	str	r3, [r7, #4]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d005      	beq.n	8011712 <chk_chr+0x26>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	461a      	mov	r2, r3
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	4293      	cmp	r3, r2
 8011710:	d1f2      	bne.n	80116f8 <chk_chr+0xc>
	return *str;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	781b      	ldrb	r3, [r3, #0]
}
 8011716:	4618      	mov	r0, r3
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr
	...

08011724 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801172e:	2300      	movs	r3, #0
 8011730:	60bb      	str	r3, [r7, #8]
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	60fb      	str	r3, [r7, #12]
 8011736:	e029      	b.n	801178c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011738:	4a27      	ldr	r2, [pc, #156]	@ (80117d8 <chk_lock+0xb4>)
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	011b      	lsls	r3, r3, #4
 801173e:	4413      	add	r3, r2
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d01d      	beq.n	8011782 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011746:	4a24      	ldr	r2, [pc, #144]	@ (80117d8 <chk_lock+0xb4>)
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	011b      	lsls	r3, r3, #4
 801174c:	4413      	add	r3, r2
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	429a      	cmp	r2, r3
 8011756:	d116      	bne.n	8011786 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011758:	4a1f      	ldr	r2, [pc, #124]	@ (80117d8 <chk_lock+0xb4>)
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	011b      	lsls	r3, r3, #4
 801175e:	4413      	add	r3, r2
 8011760:	3304      	adds	r3, #4
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011768:	429a      	cmp	r2, r3
 801176a:	d10c      	bne.n	8011786 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801176c:	4a1a      	ldr	r2, [pc, #104]	@ (80117d8 <chk_lock+0xb4>)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	011b      	lsls	r3, r3, #4
 8011772:	4413      	add	r3, r2
 8011774:	3308      	adds	r3, #8
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801177c:	429a      	cmp	r2, r3
 801177e:	d102      	bne.n	8011786 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011780:	e007      	b.n	8011792 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011782:	2301      	movs	r3, #1
 8011784:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	3301      	adds	r3, #1
 801178a:	60fb      	str	r3, [r7, #12]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2b01      	cmp	r3, #1
 8011790:	d9d2      	bls.n	8011738 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2b02      	cmp	r3, #2
 8011796:	d109      	bne.n	80117ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d102      	bne.n	80117a4 <chk_lock+0x80>
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2b02      	cmp	r3, #2
 80117a2:	d101      	bne.n	80117a8 <chk_lock+0x84>
 80117a4:	2300      	movs	r3, #0
 80117a6:	e010      	b.n	80117ca <chk_lock+0xa6>
 80117a8:	2312      	movs	r3, #18
 80117aa:	e00e      	b.n	80117ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d108      	bne.n	80117c4 <chk_lock+0xa0>
 80117b2:	4a09      	ldr	r2, [pc, #36]	@ (80117d8 <chk_lock+0xb4>)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	011b      	lsls	r3, r3, #4
 80117b8:	4413      	add	r3, r2
 80117ba:	330c      	adds	r3, #12
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117c2:	d101      	bne.n	80117c8 <chk_lock+0xa4>
 80117c4:	2310      	movs	r3, #16
 80117c6:	e000      	b.n	80117ca <chk_lock+0xa6>
 80117c8:	2300      	movs	r3, #0
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3714      	adds	r7, #20
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	20000d84 	.word	0x20000d84

080117dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117e2:	2300      	movs	r3, #0
 80117e4:	607b      	str	r3, [r7, #4]
 80117e6:	e002      	b.n	80117ee <enq_lock+0x12>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	3301      	adds	r3, #1
 80117ec:	607b      	str	r3, [r7, #4]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d806      	bhi.n	8011802 <enq_lock+0x26>
 80117f4:	4a09      	ldr	r2, [pc, #36]	@ (801181c <enq_lock+0x40>)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	011b      	lsls	r3, r3, #4
 80117fa:	4413      	add	r3, r2
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1f2      	bne.n	80117e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2b02      	cmp	r3, #2
 8011806:	bf14      	ite	ne
 8011808:	2301      	movne	r3, #1
 801180a:	2300      	moveq	r3, #0
 801180c:	b2db      	uxtb	r3, r3
}
 801180e:	4618      	mov	r0, r3
 8011810:	370c      	adds	r7, #12
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	20000d84 	.word	0x20000d84

08011820 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801182a:	2300      	movs	r3, #0
 801182c:	60fb      	str	r3, [r7, #12]
 801182e:	e01f      	b.n	8011870 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011830:	4a41      	ldr	r2, [pc, #260]	@ (8011938 <inc_lock+0x118>)
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	011b      	lsls	r3, r3, #4
 8011836:	4413      	add	r3, r2
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	429a      	cmp	r2, r3
 8011840:	d113      	bne.n	801186a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011842:	4a3d      	ldr	r2, [pc, #244]	@ (8011938 <inc_lock+0x118>)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	011b      	lsls	r3, r3, #4
 8011848:	4413      	add	r3, r2
 801184a:	3304      	adds	r3, #4
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011852:	429a      	cmp	r2, r3
 8011854:	d109      	bne.n	801186a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011856:	4a38      	ldr	r2, [pc, #224]	@ (8011938 <inc_lock+0x118>)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	011b      	lsls	r3, r3, #4
 801185c:	4413      	add	r3, r2
 801185e:	3308      	adds	r3, #8
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011866:	429a      	cmp	r2, r3
 8011868:	d006      	beq.n	8011878 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	3301      	adds	r3, #1
 801186e:	60fb      	str	r3, [r7, #12]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b01      	cmp	r3, #1
 8011874:	d9dc      	bls.n	8011830 <inc_lock+0x10>
 8011876:	e000      	b.n	801187a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011878:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b02      	cmp	r3, #2
 801187e:	d132      	bne.n	80118e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011880:	2300      	movs	r3, #0
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	e002      	b.n	801188c <inc_lock+0x6c>
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	3301      	adds	r3, #1
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	2b01      	cmp	r3, #1
 8011890:	d806      	bhi.n	80118a0 <inc_lock+0x80>
 8011892:	4a29      	ldr	r2, [pc, #164]	@ (8011938 <inc_lock+0x118>)
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	011b      	lsls	r3, r3, #4
 8011898:	4413      	add	r3, r2
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1f2      	bne.n	8011886 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d101      	bne.n	80118aa <inc_lock+0x8a>
 80118a6:	2300      	movs	r3, #0
 80118a8:	e040      	b.n	801192c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	4922      	ldr	r1, [pc, #136]	@ (8011938 <inc_lock+0x118>)
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	011b      	lsls	r3, r3, #4
 80118b4:	440b      	add	r3, r1
 80118b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	689a      	ldr	r2, [r3, #8]
 80118bc:	491e      	ldr	r1, [pc, #120]	@ (8011938 <inc_lock+0x118>)
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	011b      	lsls	r3, r3, #4
 80118c2:	440b      	add	r3, r1
 80118c4:	3304      	adds	r3, #4
 80118c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	695a      	ldr	r2, [r3, #20]
 80118cc:	491a      	ldr	r1, [pc, #104]	@ (8011938 <inc_lock+0x118>)
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	011b      	lsls	r3, r3, #4
 80118d2:	440b      	add	r3, r1
 80118d4:	3308      	adds	r3, #8
 80118d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80118d8:	4a17      	ldr	r2, [pc, #92]	@ (8011938 <inc_lock+0x118>)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	011b      	lsls	r3, r3, #4
 80118de:	4413      	add	r3, r2
 80118e0:	330c      	adds	r3, #12
 80118e2:	2200      	movs	r2, #0
 80118e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d009      	beq.n	8011900 <inc_lock+0xe0>
 80118ec:	4a12      	ldr	r2, [pc, #72]	@ (8011938 <inc_lock+0x118>)
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	011b      	lsls	r3, r3, #4
 80118f2:	4413      	add	r3, r2
 80118f4:	330c      	adds	r3, #12
 80118f6:	881b      	ldrh	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d001      	beq.n	8011900 <inc_lock+0xe0>
 80118fc:	2300      	movs	r3, #0
 80118fe:	e015      	b.n	801192c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d108      	bne.n	8011918 <inc_lock+0xf8>
 8011906:	4a0c      	ldr	r2, [pc, #48]	@ (8011938 <inc_lock+0x118>)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	011b      	lsls	r3, r3, #4
 801190c:	4413      	add	r3, r2
 801190e:	330c      	adds	r3, #12
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	3301      	adds	r3, #1
 8011914:	b29a      	uxth	r2, r3
 8011916:	e001      	b.n	801191c <inc_lock+0xfc>
 8011918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801191c:	4906      	ldr	r1, [pc, #24]	@ (8011938 <inc_lock+0x118>)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	011b      	lsls	r3, r3, #4
 8011922:	440b      	add	r3, r1
 8011924:	330c      	adds	r3, #12
 8011926:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	3301      	adds	r3, #1
}
 801192c:	4618      	mov	r0, r3
 801192e:	3714      	adds	r7, #20
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr
 8011938:	20000d84 	.word	0x20000d84

0801193c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	3b01      	subs	r3, #1
 8011948:	607b      	str	r3, [r7, #4]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2b01      	cmp	r3, #1
 801194e:	d825      	bhi.n	801199c <dec_lock+0x60>
		n = Files[i].ctr;
 8011950:	4a17      	ldr	r2, [pc, #92]	@ (80119b0 <dec_lock+0x74>)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	011b      	lsls	r3, r3, #4
 8011956:	4413      	add	r3, r2
 8011958:	330c      	adds	r3, #12
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801195e:	89fb      	ldrh	r3, [r7, #14]
 8011960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011964:	d101      	bne.n	801196a <dec_lock+0x2e>
 8011966:	2300      	movs	r3, #0
 8011968:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801196a:	89fb      	ldrh	r3, [r7, #14]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d002      	beq.n	8011976 <dec_lock+0x3a>
 8011970:	89fb      	ldrh	r3, [r7, #14]
 8011972:	3b01      	subs	r3, #1
 8011974:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011976:	4a0e      	ldr	r2, [pc, #56]	@ (80119b0 <dec_lock+0x74>)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	011b      	lsls	r3, r3, #4
 801197c:	4413      	add	r3, r2
 801197e:	330c      	adds	r3, #12
 8011980:	89fa      	ldrh	r2, [r7, #14]
 8011982:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011984:	89fb      	ldrh	r3, [r7, #14]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d105      	bne.n	8011996 <dec_lock+0x5a>
 801198a:	4a09      	ldr	r2, [pc, #36]	@ (80119b0 <dec_lock+0x74>)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	011b      	lsls	r3, r3, #4
 8011990:	4413      	add	r3, r2
 8011992:	2200      	movs	r2, #0
 8011994:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011996:	2300      	movs	r3, #0
 8011998:	737b      	strb	r3, [r7, #13]
 801199a:	e001      	b.n	80119a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801199c:	2302      	movs	r3, #2
 801199e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80119a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3714      	adds	r7, #20
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	20000d84 	.word	0x20000d84

080119b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80119bc:	2300      	movs	r3, #0
 80119be:	60fb      	str	r3, [r7, #12]
 80119c0:	e010      	b.n	80119e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80119c2:	4a0d      	ldr	r2, [pc, #52]	@ (80119f8 <clear_lock+0x44>)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	011b      	lsls	r3, r3, #4
 80119c8:	4413      	add	r3, r2
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d105      	bne.n	80119de <clear_lock+0x2a>
 80119d2:	4a09      	ldr	r2, [pc, #36]	@ (80119f8 <clear_lock+0x44>)
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	011b      	lsls	r3, r3, #4
 80119d8:	4413      	add	r3, r2
 80119da:	2200      	movs	r2, #0
 80119dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	3301      	adds	r3, #1
 80119e2:	60fb      	str	r3, [r7, #12]
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d9eb      	bls.n	80119c2 <clear_lock+0xe>
	}
}
 80119ea:	bf00      	nop
 80119ec:	bf00      	nop
 80119ee:	3714      	adds	r7, #20
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr
 80119f8:	20000d84 	.word	0x20000d84

080119fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011a04:	2300      	movs	r3, #0
 8011a06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	78db      	ldrb	r3, [r3, #3]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d034      	beq.n	8011a7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	7858      	ldrb	r0, [r3, #1]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011a20:	2301      	movs	r3, #1
 8011a22:	697a      	ldr	r2, [r7, #20]
 8011a24:	f7ff fd3e 	bl	80114a4 <disk_write>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d002      	beq.n	8011a34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	73fb      	strb	r3, [r7, #15]
 8011a32:	e022      	b.n	8011a7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	1ad2      	subs	r2, r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	69db      	ldr	r3, [r3, #28]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d217      	bcs.n	8011a7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	789b      	ldrb	r3, [r3, #2]
 8011a4e:	613b      	str	r3, [r7, #16]
 8011a50:	e010      	b.n	8011a74 <sync_window+0x78>
					wsect += fs->fsize;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	69db      	ldr	r3, [r3, #28]
 8011a56:	697a      	ldr	r2, [r7, #20]
 8011a58:	4413      	add	r3, r2
 8011a5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	7858      	ldrb	r0, [r3, #1]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011a66:	2301      	movs	r3, #1
 8011a68:	697a      	ldr	r2, [r7, #20]
 8011a6a:	f7ff fd1b 	bl	80114a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	613b      	str	r3, [r7, #16]
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d8eb      	bhi.n	8011a52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3718      	adds	r7, #24
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}

08011a84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a96:	683a      	ldr	r2, [r7, #0]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d01b      	beq.n	8011ad4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f7ff ffad 	bl	80119fc <sync_window>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011aa6:	7bfb      	ldrb	r3, [r7, #15]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d113      	bne.n	8011ad4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	7858      	ldrb	r0, [r3, #1]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	683a      	ldr	r2, [r7, #0]
 8011aba:	f7ff fcd3 	bl	8011464 <disk_read>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d004      	beq.n	8011ace <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8011ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
	...

08011ae0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7ff ff87 	bl	80119fc <sync_window>
 8011aee:	4603      	mov	r3, r0
 8011af0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011af2:	7bfb      	ldrb	r3, [r7, #15]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d158      	bne.n	8011baa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	2b03      	cmp	r3, #3
 8011afe:	d148      	bne.n	8011b92 <sync_fs+0xb2>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	791b      	ldrb	r3, [r3, #4]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d144      	bne.n	8011b92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3334      	adds	r3, #52	@ 0x34
 8011b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b10:	2100      	movs	r1, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7ff fda8 	bl	8011668 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	3334      	adds	r3, #52	@ 0x34
 8011b1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011b20:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7ff fd37 	bl	8011598 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	3334      	adds	r3, #52	@ 0x34
 8011b2e:	4921      	ldr	r1, [pc, #132]	@ (8011bb4 <sync_fs+0xd4>)
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff fd4c 	bl	80115ce <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	3334      	adds	r3, #52	@ 0x34
 8011b3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011b3e:	491e      	ldr	r1, [pc, #120]	@ (8011bb8 <sync_fs+0xd8>)
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7ff fd44 	bl	80115ce <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	3334      	adds	r3, #52	@ 0x34
 8011b4a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	695b      	ldr	r3, [r3, #20]
 8011b52:	4619      	mov	r1, r3
 8011b54:	4610      	mov	r0, r2
 8011b56:	f7ff fd3a 	bl	80115ce <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	3334      	adds	r3, #52	@ 0x34
 8011b5e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	691b      	ldr	r3, [r3, #16]
 8011b66:	4619      	mov	r1, r3
 8011b68:	4610      	mov	r0, r2
 8011b6a:	f7ff fd30 	bl	80115ce <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a1b      	ldr	r3, [r3, #32]
 8011b72:	1c5a      	adds	r2, r3, #1
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	7858      	ldrb	r0, [r3, #1]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b86:	2301      	movs	r3, #1
 8011b88:	f7ff fc8c 	bl	80114a4 <disk_write>
			fs->fsi_flag = 0;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	785b      	ldrb	r3, [r3, #1]
 8011b96:	2200      	movs	r2, #0
 8011b98:	2100      	movs	r1, #0
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7ff fca2 	bl	80114e4 <disk_ioctl>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <sync_fs+0xca>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3710      	adds	r7, #16
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	41615252 	.word	0x41615252
 8011bb8:	61417272 	.word	0x61417272

08011bbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	3b02      	subs	r3, #2
 8011bca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	699b      	ldr	r3, [r3, #24]
 8011bd0:	3b02      	subs	r3, #2
 8011bd2:	683a      	ldr	r2, [r7, #0]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d301      	bcc.n	8011bdc <clust2sect+0x20>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	e008      	b.n	8011bee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	895b      	ldrh	r3, [r3, #10]
 8011be0:	461a      	mov	r2, r3
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	fb03 f202 	mul.w	r2, r3, r2
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bec:	4413      	add	r3, r2
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b086      	sub	sp, #24
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d904      	bls.n	8011c1a <get_fat+0x20>
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	699b      	ldr	r3, [r3, #24]
 8011c14:	683a      	ldr	r2, [r7, #0]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d302      	bcc.n	8011c20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	617b      	str	r3, [r7, #20]
 8011c1e:	e08e      	b.n	8011d3e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011c20:	f04f 33ff 	mov.w	r3, #4294967295
 8011c24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	2b03      	cmp	r3, #3
 8011c2c:	d061      	beq.n	8011cf2 <get_fat+0xf8>
 8011c2e:	2b03      	cmp	r3, #3
 8011c30:	dc7b      	bgt.n	8011d2a <get_fat+0x130>
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d002      	beq.n	8011c3c <get_fat+0x42>
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d041      	beq.n	8011cbe <get_fat+0xc4>
 8011c3a:	e076      	b.n	8011d2a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	085b      	lsrs	r3, r3, #1
 8011c44:	68fa      	ldr	r2, [r7, #12]
 8011c46:	4413      	add	r3, r2
 8011c48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	0a5b      	lsrs	r3, r3, #9
 8011c52:	4413      	add	r3, r2
 8011c54:	4619      	mov	r1, r3
 8011c56:	6938      	ldr	r0, [r7, #16]
 8011c58:	f7ff ff14 	bl	8011a84 <move_window>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d166      	bne.n	8011d30 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	60fa      	str	r2, [r7, #12]
 8011c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c6c:	693a      	ldr	r2, [r7, #16]
 8011c6e:	4413      	add	r3, r2
 8011c70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011c74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	0a5b      	lsrs	r3, r3, #9
 8011c7e:	4413      	add	r3, r2
 8011c80:	4619      	mov	r1, r3
 8011c82:	6938      	ldr	r0, [r7, #16]
 8011c84:	f7ff fefe 	bl	8011a84 <move_window>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d152      	bne.n	8011d34 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c94:	693a      	ldr	r2, [r7, #16]
 8011c96:	4413      	add	r3, r2
 8011c98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011c9c:	021b      	lsls	r3, r3, #8
 8011c9e:	68ba      	ldr	r2, [r7, #8]
 8011ca0:	4313      	orrs	r3, r2
 8011ca2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	f003 0301 	and.w	r3, r3, #1
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d002      	beq.n	8011cb4 <get_fat+0xba>
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	091b      	lsrs	r3, r3, #4
 8011cb2:	e002      	b.n	8011cba <get_fat+0xc0>
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011cba:	617b      	str	r3, [r7, #20]
			break;
 8011cbc:	e03f      	b.n	8011d3e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	0a1b      	lsrs	r3, r3, #8
 8011cc6:	4413      	add	r3, r2
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6938      	ldr	r0, [r7, #16]
 8011ccc:	f7ff feda 	bl	8011a84 <move_window>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d130      	bne.n	8011d38 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	005b      	lsls	r3, r3, #1
 8011ce0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011ce4:	4413      	add	r3, r2
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7ff fc1a 	bl	8011520 <ld_word>
 8011cec:	4603      	mov	r3, r0
 8011cee:	617b      	str	r3, [r7, #20]
			break;
 8011cf0:	e025      	b.n	8011d3e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	09db      	lsrs	r3, r3, #7
 8011cfa:	4413      	add	r3, r2
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	6938      	ldr	r0, [r7, #16]
 8011d00:	f7ff fec0 	bl	8011a84 <move_window>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d118      	bne.n	8011d3c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011d18:	4413      	add	r3, r2
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7ff fc19 	bl	8011552 <ld_dword>
 8011d20:	4603      	mov	r3, r0
 8011d22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011d26:	617b      	str	r3, [r7, #20]
			break;
 8011d28:	e009      	b.n	8011d3e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	e006      	b.n	8011d3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d30:	bf00      	nop
 8011d32:	e004      	b.n	8011d3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d34:	bf00      	nop
 8011d36:	e002      	b.n	8011d3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d38:	bf00      	nop
 8011d3a:	e000      	b.n	8011d3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d3c:	bf00      	nop
		}
	}

	return val;
 8011d3e:	697b      	ldr	r3, [r7, #20]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3718      	adds	r7, #24
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011d48:	b590      	push	{r4, r7, lr}
 8011d4a:	b089      	sub	sp, #36	@ 0x24
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	60f8      	str	r0, [r7, #12]
 8011d50:	60b9      	str	r1, [r7, #8]
 8011d52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011d54:	2302      	movs	r3, #2
 8011d56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	f240 80d9 	bls.w	8011f12 <put_fat+0x1ca>
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	699b      	ldr	r3, [r3, #24]
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	f080 80d3 	bcs.w	8011f12 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	f000 8096 	beq.w	8011ea2 <put_fat+0x15a>
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	f300 80cb 	bgt.w	8011f12 <put_fat+0x1ca>
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d002      	beq.n	8011d86 <put_fat+0x3e>
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	d06e      	beq.n	8011e62 <put_fat+0x11a>
 8011d84:	e0c5      	b.n	8011f12 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	61bb      	str	r3, [r7, #24]
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	085b      	lsrs	r3, r3, #1
 8011d8e:	69ba      	ldr	r2, [r7, #24]
 8011d90:	4413      	add	r3, r2
 8011d92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	0a5b      	lsrs	r3, r3, #9
 8011d9c:	4413      	add	r3, r2
 8011d9e:	4619      	mov	r1, r3
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f7ff fe6f 	bl	8011a84 <move_window>
 8011da6:	4603      	mov	r3, r0
 8011da8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011daa:	7ffb      	ldrb	r3, [r7, #31]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f040 80a9 	bne.w	8011f04 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	1c59      	adds	r1, r3, #1
 8011dbc:	61b9      	str	r1, [r7, #24]
 8011dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dc2:	4413      	add	r3, r2
 8011dc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	f003 0301 	and.w	r3, r3, #1
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00d      	beq.n	8011dec <put_fat+0xa4>
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	b25b      	sxtb	r3, r3
 8011dd6:	f003 030f 	and.w	r3, r3, #15
 8011dda:	b25a      	sxtb	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	b25b      	sxtb	r3, r3
 8011de0:	011b      	lsls	r3, r3, #4
 8011de2:	b25b      	sxtb	r3, r3
 8011de4:	4313      	orrs	r3, r2
 8011de6:	b25b      	sxtb	r3, r3
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	e001      	b.n	8011df0 <put_fat+0xa8>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	b2db      	uxtb	r3, r3
 8011df0:	697a      	ldr	r2, [r7, #20]
 8011df2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2201      	movs	r2, #1
 8011df8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	0a5b      	lsrs	r3, r3, #9
 8011e02:	4413      	add	r3, r2
 8011e04:	4619      	mov	r1, r3
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f7ff fe3c 	bl	8011a84 <move_window>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e10:	7ffb      	ldrb	r3, [r7, #31]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d178      	bne.n	8011f08 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e22:	4413      	add	r3, r2
 8011e24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	f003 0301 	and.w	r3, r3, #1
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d003      	beq.n	8011e38 <put_fat+0xf0>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	091b      	lsrs	r3, r3, #4
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	e00e      	b.n	8011e56 <put_fat+0x10e>
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	b25b      	sxtb	r3, r3
 8011e3e:	f023 030f 	bic.w	r3, r3, #15
 8011e42:	b25a      	sxtb	r2, r3
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	0a1b      	lsrs	r3, r3, #8
 8011e48:	b25b      	sxtb	r3, r3
 8011e4a:	f003 030f 	and.w	r3, r3, #15
 8011e4e:	b25b      	sxtb	r3, r3
 8011e50:	4313      	orrs	r3, r2
 8011e52:	b25b      	sxtb	r3, r3
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	70da      	strb	r2, [r3, #3]
			break;
 8011e60:	e057      	b.n	8011f12 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	0a1b      	lsrs	r3, r3, #8
 8011e6a:	4413      	add	r3, r2
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f7ff fe08 	bl	8011a84 <move_window>
 8011e74:	4603      	mov	r3, r0
 8011e76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e78:	7ffb      	ldrb	r3, [r7, #31]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d146      	bne.n	8011f0c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011e8c:	4413      	add	r3, r2
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	b292      	uxth	r2, r2
 8011e92:	4611      	mov	r1, r2
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ff fb7f 	bl	8011598 <st_word>
			fs->wflag = 1;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	70da      	strb	r2, [r3, #3]
			break;
 8011ea0:	e037      	b.n	8011f12 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	09db      	lsrs	r3, r3, #7
 8011eaa:	4413      	add	r3, r2
 8011eac:	4619      	mov	r1, r3
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f7ff fde8 	bl	8011a84 <move_window>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011eb8:	7ffb      	ldrb	r3, [r7, #31]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d128      	bne.n	8011f10 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011ed2:	4413      	add	r3, r2
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ff fb3c 	bl	8011552 <ld_dword>
 8011eda:	4603      	mov	r3, r0
 8011edc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011ee0:	4323      	orrs	r3, r4
 8011ee2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	009b      	lsls	r3, r3, #2
 8011eee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011ef2:	4413      	add	r3, r2
 8011ef4:	6879      	ldr	r1, [r7, #4]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7ff fb69 	bl	80115ce <st_dword>
			fs->wflag = 1;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2201      	movs	r2, #1
 8011f00:	70da      	strb	r2, [r3, #3]
			break;
 8011f02:	e006      	b.n	8011f12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011f04:	bf00      	nop
 8011f06:	e004      	b.n	8011f12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011f08:	bf00      	nop
 8011f0a:	e002      	b.n	8011f12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011f0c:	bf00      	nop
 8011f0e:	e000      	b.n	8011f12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011f10:	bf00      	nop
		}
	}
	return res;
 8011f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3724      	adds	r7, #36	@ 0x24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd90      	pop	{r4, r7, pc}

08011f1c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b088      	sub	sp, #32
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d904      	bls.n	8011f42 <remove_chain+0x26>
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	699b      	ldr	r3, [r3, #24]
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d301      	bcc.n	8011f46 <remove_chain+0x2a>
 8011f42:	2302      	movs	r3, #2
 8011f44:	e04b      	b.n	8011fde <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00c      	beq.n	8011f66 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f50:	6879      	ldr	r1, [r7, #4]
 8011f52:	69b8      	ldr	r0, [r7, #24]
 8011f54:	f7ff fef8 	bl	8011d48 <put_fat>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011f5c:	7ffb      	ldrb	r3, [r7, #31]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d001      	beq.n	8011f66 <remove_chain+0x4a>
 8011f62:	7ffb      	ldrb	r3, [r7, #31]
 8011f64:	e03b      	b.n	8011fde <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011f66:	68b9      	ldr	r1, [r7, #8]
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f7ff fe46 	bl	8011bfa <get_fat>
 8011f6e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d031      	beq.n	8011fda <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d101      	bne.n	8011f80 <remove_chain+0x64>
 8011f7c:	2302      	movs	r3, #2
 8011f7e:	e02e      	b.n	8011fde <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f86:	d101      	bne.n	8011f8c <remove_chain+0x70>
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e028      	b.n	8011fde <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	68b9      	ldr	r1, [r7, #8]
 8011f90:	69b8      	ldr	r0, [r7, #24]
 8011f92:	f7ff fed9 	bl	8011d48 <put_fat>
 8011f96:	4603      	mov	r3, r0
 8011f98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011f9a:	7ffb      	ldrb	r3, [r7, #31]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d001      	beq.n	8011fa4 <remove_chain+0x88>
 8011fa0:	7ffb      	ldrb	r3, [r7, #31]
 8011fa2:	e01c      	b.n	8011fde <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	695a      	ldr	r2, [r3, #20]
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	699b      	ldr	r3, [r3, #24]
 8011fac:	3b02      	subs	r3, #2
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d20b      	bcs.n	8011fca <remove_chain+0xae>
			fs->free_clst++;
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	695b      	ldr	r3, [r3, #20]
 8011fb6:	1c5a      	adds	r2, r3, #1
 8011fb8:	69bb      	ldr	r3, [r7, #24]
 8011fba:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	791b      	ldrb	r3, [r3, #4]
 8011fc0:	f043 0301 	orr.w	r3, r3, #1
 8011fc4:	b2da      	uxtb	r2, r3
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	699b      	ldr	r3, [r3, #24]
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d3c6      	bcc.n	8011f66 <remove_chain+0x4a>
 8011fd8:	e000      	b.n	8011fdc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011fda:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3720      	adds	r7, #32
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011fe6:	b580      	push	{r7, lr}
 8011fe8:	b088      	sub	sp, #32
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d10d      	bne.n	8012018 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012002:	69bb      	ldr	r3, [r7, #24]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d004      	beq.n	8012012 <create_chain+0x2c>
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	699b      	ldr	r3, [r3, #24]
 801200c:	69ba      	ldr	r2, [r7, #24]
 801200e:	429a      	cmp	r2, r3
 8012010:	d31b      	bcc.n	801204a <create_chain+0x64>
 8012012:	2301      	movs	r3, #1
 8012014:	61bb      	str	r3, [r7, #24]
 8012016:	e018      	b.n	801204a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012018:	6839      	ldr	r1, [r7, #0]
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f7ff fded 	bl	8011bfa <get_fat>
 8012020:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b01      	cmp	r3, #1
 8012026:	d801      	bhi.n	801202c <create_chain+0x46>
 8012028:	2301      	movs	r3, #1
 801202a:	e070      	b.n	801210e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012032:	d101      	bne.n	8012038 <create_chain+0x52>
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	e06a      	b.n	801210e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	699b      	ldr	r3, [r3, #24]
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	429a      	cmp	r2, r3
 8012040:	d201      	bcs.n	8012046 <create_chain+0x60>
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	e063      	b.n	801210e <create_chain+0x128>
		scl = clst;
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	3301      	adds	r3, #1
 8012052:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	699b      	ldr	r3, [r3, #24]
 8012058:	69fa      	ldr	r2, [r7, #28]
 801205a:	429a      	cmp	r2, r3
 801205c:	d307      	bcc.n	801206e <create_chain+0x88>
				ncl = 2;
 801205e:	2302      	movs	r3, #2
 8012060:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012062:	69fa      	ldr	r2, [r7, #28]
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	429a      	cmp	r2, r3
 8012068:	d901      	bls.n	801206e <create_chain+0x88>
 801206a:	2300      	movs	r3, #0
 801206c:	e04f      	b.n	801210e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801206e:	69f9      	ldr	r1, [r7, #28]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7ff fdc2 	bl	8011bfa <get_fat>
 8012076:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d00e      	beq.n	801209c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d003      	beq.n	801208c <create_chain+0xa6>
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801208a:	d101      	bne.n	8012090 <create_chain+0xaa>
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	e03e      	b.n	801210e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012090:	69fa      	ldr	r2, [r7, #28]
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	429a      	cmp	r2, r3
 8012096:	d1da      	bne.n	801204e <create_chain+0x68>
 8012098:	2300      	movs	r3, #0
 801209a:	e038      	b.n	801210e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801209c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801209e:	f04f 32ff 	mov.w	r2, #4294967295
 80120a2:	69f9      	ldr	r1, [r7, #28]
 80120a4:	6938      	ldr	r0, [r7, #16]
 80120a6:	f7ff fe4f 	bl	8011d48 <put_fat>
 80120aa:	4603      	mov	r3, r0
 80120ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80120ae:	7dfb      	ldrb	r3, [r7, #23]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d109      	bne.n	80120c8 <create_chain+0xe2>
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d006      	beq.n	80120c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80120ba:	69fa      	ldr	r2, [r7, #28]
 80120bc:	6839      	ldr	r1, [r7, #0]
 80120be:	6938      	ldr	r0, [r7, #16]
 80120c0:	f7ff fe42 	bl	8011d48 <put_fat>
 80120c4:	4603      	mov	r3, r0
 80120c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80120c8:	7dfb      	ldrb	r3, [r7, #23]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d116      	bne.n	80120fc <create_chain+0x116>
		fs->last_clst = ncl;
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	69fa      	ldr	r2, [r7, #28]
 80120d2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	695a      	ldr	r2, [r3, #20]
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	699b      	ldr	r3, [r3, #24]
 80120dc:	3b02      	subs	r3, #2
 80120de:	429a      	cmp	r2, r3
 80120e0:	d804      	bhi.n	80120ec <create_chain+0x106>
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	695b      	ldr	r3, [r3, #20]
 80120e6:	1e5a      	subs	r2, r3, #1
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	791b      	ldrb	r3, [r3, #4]
 80120f0:	f043 0301 	orr.w	r3, r3, #1
 80120f4:	b2da      	uxtb	r2, r3
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	711a      	strb	r2, [r3, #4]
 80120fa:	e007      	b.n	801210c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80120fc:	7dfb      	ldrb	r3, [r7, #23]
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d102      	bne.n	8012108 <create_chain+0x122>
 8012102:	f04f 33ff 	mov.w	r3, #4294967295
 8012106:	e000      	b.n	801210a <create_chain+0x124>
 8012108:	2301      	movs	r3, #1
 801210a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801210c:	69fb      	ldr	r3, [r7, #28]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3720      	adds	r7, #32
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012116:	b480      	push	{r7}
 8012118:	b087      	sub	sp, #28
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
 801211e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801212a:	3304      	adds	r3, #4
 801212c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	0a5b      	lsrs	r3, r3, #9
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	8952      	ldrh	r2, [r2, #10]
 8012136:	fbb3 f3f2 	udiv	r3, r3, r2
 801213a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	1d1a      	adds	r2, r3, #4
 8012140:	613a      	str	r2, [r7, #16]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d101      	bne.n	8012150 <clmt_clust+0x3a>
 801214c:	2300      	movs	r3, #0
 801214e:	e010      	b.n	8012172 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	429a      	cmp	r2, r3
 8012156:	d307      	bcc.n	8012168 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012158:	697a      	ldr	r2, [r7, #20]
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	617b      	str	r3, [r7, #20]
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	3304      	adds	r3, #4
 8012164:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012166:	e7e9      	b.n	801213c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012168:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	4413      	add	r3, r2
}
 8012172:	4618      	mov	r0, r3
 8012174:	371c      	adds	r7, #28
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b086      	sub	sp, #24
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012194:	d204      	bcs.n	80121a0 <dir_sdi+0x22>
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	f003 031f 	and.w	r3, r3, #31
 801219c:	2b00      	cmp	r3, #0
 801219e:	d001      	beq.n	80121a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80121a0:	2302      	movs	r3, #2
 80121a2:	e063      	b.n	801226c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	683a      	ldr	r2, [r7, #0]
 80121a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	689b      	ldr	r3, [r3, #8]
 80121ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d106      	bne.n	80121c4 <dir_sdi+0x46>
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	2b02      	cmp	r3, #2
 80121bc:	d902      	bls.n	80121c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d10c      	bne.n	80121e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	095b      	lsrs	r3, r3, #5
 80121ce:	693a      	ldr	r2, [r7, #16]
 80121d0:	8912      	ldrh	r2, [r2, #8]
 80121d2:	4293      	cmp	r3, r2
 80121d4:	d301      	bcc.n	80121da <dir_sdi+0x5c>
 80121d6:	2302      	movs	r3, #2
 80121d8:	e048      	b.n	801226c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	61da      	str	r2, [r3, #28]
 80121e2:	e029      	b.n	8012238 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	895b      	ldrh	r3, [r3, #10]
 80121e8:	025b      	lsls	r3, r3, #9
 80121ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80121ec:	e019      	b.n	8012222 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6979      	ldr	r1, [r7, #20]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7ff fd01 	bl	8011bfa <get_fat>
 80121f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012200:	d101      	bne.n	8012206 <dir_sdi+0x88>
 8012202:	2301      	movs	r3, #1
 8012204:	e032      	b.n	801226c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	2b01      	cmp	r3, #1
 801220a:	d904      	bls.n	8012216 <dir_sdi+0x98>
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	699b      	ldr	r3, [r3, #24]
 8012210:	697a      	ldr	r2, [r7, #20]
 8012212:	429a      	cmp	r2, r3
 8012214:	d301      	bcc.n	801221a <dir_sdi+0x9c>
 8012216:	2302      	movs	r3, #2
 8012218:	e028      	b.n	801226c <dir_sdi+0xee>
			ofs -= csz;
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012222:	683a      	ldr	r2, [r7, #0]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	429a      	cmp	r2, r3
 8012228:	d2e1      	bcs.n	80121ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801222a:	6979      	ldr	r1, [r7, #20]
 801222c:	6938      	ldr	r0, [r7, #16]
 801222e:	f7ff fcc5 	bl	8011bbc <clust2sect>
 8012232:	4602      	mov	r2, r0
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	697a      	ldr	r2, [r7, #20]
 801223c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	69db      	ldr	r3, [r3, #28]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d101      	bne.n	801224a <dir_sdi+0xcc>
 8012246:	2302      	movs	r3, #2
 8012248:	e010      	b.n	801226c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	69da      	ldr	r2, [r3, #28]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	0a5b      	lsrs	r3, r3, #9
 8012252:	441a      	add	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012264:	441a      	add	r2, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801226a:	2300      	movs	r3, #0
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b086      	sub	sp, #24
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	695b      	ldr	r3, [r3, #20]
 8012288:	3320      	adds	r3, #32
 801228a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	69db      	ldr	r3, [r3, #28]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d003      	beq.n	801229c <dir_next+0x28>
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801229a:	d301      	bcc.n	80122a0 <dir_next+0x2c>
 801229c:	2304      	movs	r3, #4
 801229e:	e0aa      	b.n	80123f6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	f040 8098 	bne.w	80123dc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	1c5a      	adds	r2, r3, #1
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	699b      	ldr	r3, [r3, #24]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10b      	bne.n	80122d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	095b      	lsrs	r3, r3, #5
 80122c2:	68fa      	ldr	r2, [r7, #12]
 80122c4:	8912      	ldrh	r2, [r2, #8]
 80122c6:	4293      	cmp	r3, r2
 80122c8:	f0c0 8088 	bcc.w	80123dc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	61da      	str	r2, [r3, #28]
 80122d2:	2304      	movs	r3, #4
 80122d4:	e08f      	b.n	80123f6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	0a5b      	lsrs	r3, r3, #9
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	8952      	ldrh	r2, [r2, #10]
 80122de:	3a01      	subs	r2, #1
 80122e0:	4013      	ands	r3, r2
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d17a      	bne.n	80123dc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	699b      	ldr	r3, [r3, #24]
 80122ec:	4619      	mov	r1, r3
 80122ee:	4610      	mov	r0, r2
 80122f0:	f7ff fc83 	bl	8011bfa <get_fat>
 80122f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	d801      	bhi.n	8012300 <dir_next+0x8c>
 80122fc:	2302      	movs	r3, #2
 80122fe:	e07a      	b.n	80123f6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012306:	d101      	bne.n	801230c <dir_next+0x98>
 8012308:	2301      	movs	r3, #1
 801230a:	e074      	b.n	80123f6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	699b      	ldr	r3, [r3, #24]
 8012310:	697a      	ldr	r2, [r7, #20]
 8012312:	429a      	cmp	r2, r3
 8012314:	d358      	bcc.n	80123c8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d104      	bne.n	8012326 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	61da      	str	r2, [r3, #28]
 8012322:	2304      	movs	r3, #4
 8012324:	e067      	b.n	80123f6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	699b      	ldr	r3, [r3, #24]
 801232c:	4619      	mov	r1, r3
 801232e:	4610      	mov	r0, r2
 8012330:	f7ff fe59 	bl	8011fe6 <create_chain>
 8012334:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <dir_next+0xcc>
 801233c:	2307      	movs	r3, #7
 801233e:	e05a      	b.n	80123f6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	2b01      	cmp	r3, #1
 8012344:	d101      	bne.n	801234a <dir_next+0xd6>
 8012346:	2302      	movs	r3, #2
 8012348:	e055      	b.n	80123f6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012350:	d101      	bne.n	8012356 <dir_next+0xe2>
 8012352:	2301      	movs	r3, #1
 8012354:	e04f      	b.n	80123f6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012356:	68f8      	ldr	r0, [r7, #12]
 8012358:	f7ff fb50 	bl	80119fc <sync_window>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	d001      	beq.n	8012366 <dir_next+0xf2>
 8012362:	2301      	movs	r3, #1
 8012364:	e047      	b.n	80123f6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	3334      	adds	r3, #52	@ 0x34
 801236a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801236e:	2100      	movs	r1, #0
 8012370:	4618      	mov	r0, r3
 8012372:	f7ff f979 	bl	8011668 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012376:	2300      	movs	r3, #0
 8012378:	613b      	str	r3, [r7, #16]
 801237a:	6979      	ldr	r1, [r7, #20]
 801237c:	68f8      	ldr	r0, [r7, #12]
 801237e:	f7ff fc1d 	bl	8011bbc <clust2sect>
 8012382:	4602      	mov	r2, r0
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	631a      	str	r2, [r3, #48]	@ 0x30
 8012388:	e012      	b.n	80123b0 <dir_next+0x13c>
						fs->wflag = 1;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2201      	movs	r2, #1
 801238e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f7ff fb33 	bl	80119fc <sync_window>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <dir_next+0x12c>
 801239c:	2301      	movs	r3, #1
 801239e:	e02a      	b.n	80123f6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	3301      	adds	r3, #1
 80123a4:	613b      	str	r3, [r7, #16]
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	895b      	ldrh	r3, [r3, #10]
 80123b4:	461a      	mov	r2, r3
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d3e6      	bcc.n	801238a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	1ad2      	subs	r2, r2, r3
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	697a      	ldr	r2, [r7, #20]
 80123cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80123ce:	6979      	ldr	r1, [r7, #20]
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f7ff fbf3 	bl	8011bbc <clust2sect>
 80123d6:	4602      	mov	r2, r0
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	68ba      	ldr	r2, [r7, #8]
 80123e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123ee:	441a      	add	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3718      	adds	r7, #24
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b086      	sub	sp, #24
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
 8012406:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801240e:	2100      	movs	r1, #0
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7ff feb4 	bl	801217e <dir_sdi>
 8012416:	4603      	mov	r3, r0
 8012418:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801241a:	7dfb      	ldrb	r3, [r7, #23]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d12b      	bne.n	8012478 <dir_alloc+0x7a>
		n = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	69db      	ldr	r3, [r3, #28]
 8012428:	4619      	mov	r1, r3
 801242a:	68f8      	ldr	r0, [r7, #12]
 801242c:	f7ff fb2a 	bl	8011a84 <move_window>
 8012430:	4603      	mov	r3, r0
 8012432:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012434:	7dfb      	ldrb	r3, [r7, #23]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d11d      	bne.n	8012476 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6a1b      	ldr	r3, [r3, #32]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	2be5      	cmp	r3, #229	@ 0xe5
 8012442:	d004      	beq.n	801244e <dir_alloc+0x50>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6a1b      	ldr	r3, [r3, #32]
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d107      	bne.n	801245e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	3301      	adds	r3, #1
 8012452:	613b      	str	r3, [r7, #16]
 8012454:	693a      	ldr	r2, [r7, #16]
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	429a      	cmp	r2, r3
 801245a:	d102      	bne.n	8012462 <dir_alloc+0x64>
 801245c:	e00c      	b.n	8012478 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801245e:	2300      	movs	r3, #0
 8012460:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012462:	2101      	movs	r1, #1
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f7ff ff05 	bl	8012274 <dir_next>
 801246a:	4603      	mov	r3, r0
 801246c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801246e:	7dfb      	ldrb	r3, [r7, #23]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d0d7      	beq.n	8012424 <dir_alloc+0x26>
 8012474:	e000      	b.n	8012478 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012476:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012478:	7dfb      	ldrb	r3, [r7, #23]
 801247a:	2b04      	cmp	r3, #4
 801247c:	d101      	bne.n	8012482 <dir_alloc+0x84>
 801247e:	2307      	movs	r3, #7
 8012480:	75fb      	strb	r3, [r7, #23]
	return res;
 8012482:	7dfb      	ldrb	r3, [r7, #23]
}
 8012484:	4618      	mov	r0, r3
 8012486:	3718      	adds	r7, #24
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	331a      	adds	r3, #26
 801249a:	4618      	mov	r0, r3
 801249c:	f7ff f840 	bl	8011520 <ld_word>
 80124a0:	4603      	mov	r3, r0
 80124a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b03      	cmp	r3, #3
 80124aa:	d109      	bne.n	80124c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	3314      	adds	r3, #20
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7ff f835 	bl	8011520 <ld_word>
 80124b6:	4603      	mov	r3, r0
 80124b8:	041b      	lsls	r3, r3, #16
 80124ba:	68fa      	ldr	r2, [r7, #12]
 80124bc:	4313      	orrs	r3, r2
 80124be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80124c0:	68fb      	ldr	r3, [r7, #12]
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3710      	adds	r7, #16
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b084      	sub	sp, #16
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	60f8      	str	r0, [r7, #12]
 80124d2:	60b9      	str	r1, [r7, #8]
 80124d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	331a      	adds	r3, #26
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	b292      	uxth	r2, r2
 80124de:	4611      	mov	r1, r2
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7ff f859 	bl	8011598 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	2b03      	cmp	r3, #3
 80124ec:	d109      	bne.n	8012502 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	f103 0214 	add.w	r2, r3, #20
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	0c1b      	lsrs	r3, r3, #16
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	4619      	mov	r1, r3
 80124fc:	4610      	mov	r0, r2
 80124fe:	f7ff f84b 	bl	8011598 <st_word>
	}
}
 8012502:	bf00      	nop
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
	...

0801250c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801250c:	b590      	push	{r4, r7, lr}
 801250e:	b087      	sub	sp, #28
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	331a      	adds	r3, #26
 801251a:	4618      	mov	r0, r3
 801251c:	f7ff f800 	bl	8011520 <ld_word>
 8012520:	4603      	mov	r3, r0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <cmp_lfn+0x1e>
 8012526:	2300      	movs	r3, #0
 8012528:	e059      	b.n	80125de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012532:	1e5a      	subs	r2, r3, #1
 8012534:	4613      	mov	r3, r2
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	4413      	add	r3, r2
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	4413      	add	r3, r2
 801253e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012540:	2301      	movs	r3, #1
 8012542:	81fb      	strh	r3, [r7, #14]
 8012544:	2300      	movs	r3, #0
 8012546:	613b      	str	r3, [r7, #16]
 8012548:	e033      	b.n	80125b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801254a:	4a27      	ldr	r2, [pc, #156]	@ (80125e8 <cmp_lfn+0xdc>)
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	4413      	add	r3, r2
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	461a      	mov	r2, r3
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	4413      	add	r3, r2
 8012558:	4618      	mov	r0, r3
 801255a:	f7fe ffe1 	bl	8011520 <ld_word>
 801255e:	4603      	mov	r3, r0
 8012560:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012562:	89fb      	ldrh	r3, [r7, #14]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d01a      	beq.n	801259e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	2bfe      	cmp	r3, #254	@ 0xfe
 801256c:	d812      	bhi.n	8012594 <cmp_lfn+0x88>
 801256e:	89bb      	ldrh	r3, [r7, #12]
 8012570:	4618      	mov	r0, r3
 8012572:	f002 fab3 	bl	8014adc <ff_wtoupper>
 8012576:	4603      	mov	r3, r0
 8012578:	461c      	mov	r4, r3
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	1c5a      	adds	r2, r3, #1
 801257e:	617a      	str	r2, [r7, #20]
 8012580:	005b      	lsls	r3, r3, #1
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	4413      	add	r3, r2
 8012586:	881b      	ldrh	r3, [r3, #0]
 8012588:	4618      	mov	r0, r3
 801258a:	f002 faa7 	bl	8014adc <ff_wtoupper>
 801258e:	4603      	mov	r3, r0
 8012590:	429c      	cmp	r4, r3
 8012592:	d001      	beq.n	8012598 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012594:	2300      	movs	r3, #0
 8012596:	e022      	b.n	80125de <cmp_lfn+0xd2>
			}
			wc = uc;
 8012598:	89bb      	ldrh	r3, [r7, #12]
 801259a:	81fb      	strh	r3, [r7, #14]
 801259c:	e006      	b.n	80125ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801259e:	89bb      	ldrh	r3, [r7, #12]
 80125a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d001      	beq.n	80125ac <cmp_lfn+0xa0>
 80125a8:	2300      	movs	r3, #0
 80125aa:	e018      	b.n	80125de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	3301      	adds	r3, #1
 80125b0:	613b      	str	r3, [r7, #16]
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	2b0c      	cmp	r3, #12
 80125b6:	d9c8      	bls.n	801254a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00b      	beq.n	80125dc <cmp_lfn+0xd0>
 80125c4:	89fb      	ldrh	r3, [r7, #14]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d008      	beq.n	80125dc <cmp_lfn+0xd0>
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	005b      	lsls	r3, r3, #1
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d001      	beq.n	80125dc <cmp_lfn+0xd0>
 80125d8:	2300      	movs	r3, #0
 80125da:	e000      	b.n	80125de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80125dc:	2301      	movs	r3, #1
}
 80125de:	4618      	mov	r0, r3
 80125e0:	371c      	adds	r7, #28
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd90      	pop	{r4, r7, pc}
 80125e6:	bf00      	nop
 80125e8:	08017850 	.word	0x08017850

080125ec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	331a      	adds	r3, #26
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fe ff90 	bl	8011520 <ld_word>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d001      	beq.n	801260a <pick_lfn+0x1e>
 8012606:	2300      	movs	r3, #0
 8012608:	e04d      	b.n	80126a6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012612:	1e5a      	subs	r2, r3, #1
 8012614:	4613      	mov	r3, r2
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	4413      	add	r3, r2
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	4413      	add	r3, r2
 801261e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012620:	2301      	movs	r3, #1
 8012622:	81fb      	strh	r3, [r7, #14]
 8012624:	2300      	movs	r3, #0
 8012626:	613b      	str	r3, [r7, #16]
 8012628:	e028      	b.n	801267c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801262a:	4a21      	ldr	r2, [pc, #132]	@ (80126b0 <pick_lfn+0xc4>)
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	4413      	add	r3, r2
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	461a      	mov	r2, r3
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	4413      	add	r3, r2
 8012638:	4618      	mov	r0, r3
 801263a:	f7fe ff71 	bl	8011520 <ld_word>
 801263e:	4603      	mov	r3, r0
 8012640:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012642:	89fb      	ldrh	r3, [r7, #14]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00f      	beq.n	8012668 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	2bfe      	cmp	r3, #254	@ 0xfe
 801264c:	d901      	bls.n	8012652 <pick_lfn+0x66>
 801264e:	2300      	movs	r3, #0
 8012650:	e029      	b.n	80126a6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012652:	89bb      	ldrh	r3, [r7, #12]
 8012654:	81fb      	strh	r3, [r7, #14]
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	1c5a      	adds	r2, r3, #1
 801265a:	617a      	str	r2, [r7, #20]
 801265c:	005b      	lsls	r3, r3, #1
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	4413      	add	r3, r2
 8012662:	89fa      	ldrh	r2, [r7, #14]
 8012664:	801a      	strh	r2, [r3, #0]
 8012666:	e006      	b.n	8012676 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012668:	89bb      	ldrh	r3, [r7, #12]
 801266a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801266e:	4293      	cmp	r3, r2
 8012670:	d001      	beq.n	8012676 <pick_lfn+0x8a>
 8012672:	2300      	movs	r3, #0
 8012674:	e017      	b.n	80126a6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	3301      	adds	r3, #1
 801267a:	613b      	str	r3, [r7, #16]
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	2b0c      	cmp	r3, #12
 8012680:	d9d3      	bls.n	801262a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801268a:	2b00      	cmp	r3, #0
 801268c:	d00a      	beq.n	80126a4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	2bfe      	cmp	r3, #254	@ 0xfe
 8012692:	d901      	bls.n	8012698 <pick_lfn+0xac>
 8012694:	2300      	movs	r3, #0
 8012696:	e006      	b.n	80126a6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	005b      	lsls	r3, r3, #1
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	4413      	add	r3, r2
 80126a0:	2200      	movs	r2, #0
 80126a2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80126a4:	2301      	movs	r3, #1
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	08017850 	.word	0x08017850

080126b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b088      	sub	sp, #32
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	4611      	mov	r1, r2
 80126c0:	461a      	mov	r2, r3
 80126c2:	460b      	mov	r3, r1
 80126c4:	71fb      	strb	r3, [r7, #7]
 80126c6:	4613      	mov	r3, r2
 80126c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	330d      	adds	r3, #13
 80126ce:	79ba      	ldrb	r2, [r7, #6]
 80126d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	330b      	adds	r3, #11
 80126d6:	220f      	movs	r2, #15
 80126d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	330c      	adds	r3, #12
 80126de:	2200      	movs	r2, #0
 80126e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	331a      	adds	r3, #26
 80126e6:	2100      	movs	r1, #0
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fe ff55 	bl	8011598 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	1e5a      	subs	r2, r3, #1
 80126f2:	4613      	mov	r3, r2
 80126f4:	005b      	lsls	r3, r3, #1
 80126f6:	4413      	add	r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	4413      	add	r3, r2
 80126fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80126fe:	2300      	movs	r3, #0
 8012700:	82fb      	strh	r3, [r7, #22]
 8012702:	2300      	movs	r3, #0
 8012704:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012706:	8afb      	ldrh	r3, [r7, #22]
 8012708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801270c:	4293      	cmp	r3, r2
 801270e:	d007      	beq.n	8012720 <put_lfn+0x6c>
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	1c5a      	adds	r2, r3, #1
 8012714:	61fa      	str	r2, [r7, #28]
 8012716:	005b      	lsls	r3, r3, #1
 8012718:	68fa      	ldr	r2, [r7, #12]
 801271a:	4413      	add	r3, r2
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012720:	4a17      	ldr	r2, [pc, #92]	@ (8012780 <put_lfn+0xcc>)
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	4413      	add	r3, r2
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	461a      	mov	r2, r3
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	4413      	add	r3, r2
 801272e:	8afa      	ldrh	r2, [r7, #22]
 8012730:	4611      	mov	r1, r2
 8012732:	4618      	mov	r0, r3
 8012734:	f7fe ff30 	bl	8011598 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012738:	8afb      	ldrh	r3, [r7, #22]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d102      	bne.n	8012744 <put_lfn+0x90>
 801273e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012742:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	3301      	adds	r3, #1
 8012748:	61bb      	str	r3, [r7, #24]
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	2b0c      	cmp	r3, #12
 801274e:	d9da      	bls.n	8012706 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012750:	8afb      	ldrh	r3, [r7, #22]
 8012752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012756:	4293      	cmp	r3, r2
 8012758:	d006      	beq.n	8012768 <put_lfn+0xb4>
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	005b      	lsls	r3, r3, #1
 801275e:	68fa      	ldr	r2, [r7, #12]
 8012760:	4413      	add	r3, r2
 8012762:	881b      	ldrh	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d103      	bne.n	8012770 <put_lfn+0xbc>
 8012768:	79fb      	ldrb	r3, [r7, #7]
 801276a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801276e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	79fa      	ldrb	r2, [r7, #7]
 8012774:	701a      	strb	r2, [r3, #0]
}
 8012776:	bf00      	nop
 8012778:	3720      	adds	r7, #32
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	08017850 	.word	0x08017850

08012784 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b08c      	sub	sp, #48	@ 0x30
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
 8012790:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012792:	220b      	movs	r2, #11
 8012794:	68b9      	ldr	r1, [r7, #8]
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	f7fe ff45 	bl	8011626 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	2b05      	cmp	r3, #5
 80127a0:	d92b      	bls.n	80127fa <gen_numname+0x76>
		sr = seq;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80127a6:	e022      	b.n	80127ee <gen_numname+0x6a>
			wc = *lfn++;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	1c9a      	adds	r2, r3, #2
 80127ac:	607a      	str	r2, [r7, #4]
 80127ae:	881b      	ldrh	r3, [r3, #0]
 80127b0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80127b2:	2300      	movs	r3, #0
 80127b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80127b6:	e017      	b.n	80127e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	005a      	lsls	r2, r3, #1
 80127bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127be:	f003 0301 	and.w	r3, r3, #1
 80127c2:	4413      	add	r3, r2
 80127c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80127c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127c8:	085b      	lsrs	r3, r3, #1
 80127ca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d005      	beq.n	80127e2 <gen_numname+0x5e>
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80127dc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80127e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80127e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e4:	3301      	adds	r3, #1
 80127e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80127e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ea:	2b0f      	cmp	r3, #15
 80127ec:	d9e4      	bls.n	80127b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1d8      	bne.n	80127a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80127fa:	2307      	movs	r3, #7
 80127fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f003 030f 	and.w	r3, r3, #15
 8012806:	b2db      	uxtb	r3, r3
 8012808:	3330      	adds	r3, #48	@ 0x30
 801280a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801280e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012812:	2b39      	cmp	r3, #57	@ 0x39
 8012814:	d904      	bls.n	8012820 <gen_numname+0x9c>
 8012816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801281a:	3307      	adds	r3, #7
 801281c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012822:	1e5a      	subs	r2, r3, #1
 8012824:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012826:	3330      	adds	r3, #48	@ 0x30
 8012828:	443b      	add	r3, r7
 801282a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801282e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	091b      	lsrs	r3, r3, #4
 8012836:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1df      	bne.n	80127fe <gen_numname+0x7a>
	ns[i] = '~';
 801283e:	f107 0214 	add.w	r2, r7, #20
 8012842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012844:	4413      	add	r3, r2
 8012846:	227e      	movs	r2, #126	@ 0x7e
 8012848:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801284a:	2300      	movs	r3, #0
 801284c:	627b      	str	r3, [r7, #36]	@ 0x24
 801284e:	e002      	b.n	8012856 <gen_numname+0xd2>
 8012850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012852:	3301      	adds	r3, #1
 8012854:	627b      	str	r3, [r7, #36]	@ 0x24
 8012856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801285a:	429a      	cmp	r2, r3
 801285c:	d205      	bcs.n	801286a <gen_numname+0xe6>
 801285e:	68fa      	ldr	r2, [r7, #12]
 8012860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012862:	4413      	add	r3, r2
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	2b20      	cmp	r3, #32
 8012868:	d1f2      	bne.n	8012850 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801286c:	2b07      	cmp	r3, #7
 801286e:	d807      	bhi.n	8012880 <gen_numname+0xfc>
 8012870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012872:	1c5a      	adds	r2, r3, #1
 8012874:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012876:	3330      	adds	r3, #48	@ 0x30
 8012878:	443b      	add	r3, r7
 801287a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801287e:	e000      	b.n	8012882 <gen_numname+0xfe>
 8012880:	2120      	movs	r1, #32
 8012882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	627a      	str	r2, [r7, #36]	@ 0x24
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	4413      	add	r3, r2
 801288c:	460a      	mov	r2, r1
 801288e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012892:	2b07      	cmp	r3, #7
 8012894:	d9e9      	bls.n	801286a <gen_numname+0xe6>
}
 8012896:	bf00      	nop
 8012898:	bf00      	nop
 801289a:	3730      	adds	r7, #48	@ 0x30
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80128a8:	2300      	movs	r3, #0
 80128aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80128ac:	230b      	movs	r3, #11
 80128ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	b2da      	uxtb	r2, r3
 80128b4:	0852      	lsrs	r2, r2, #1
 80128b6:	01db      	lsls	r3, r3, #7
 80128b8:	4313      	orrs	r3, r2
 80128ba:	b2da      	uxtb	r2, r3
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	1c59      	adds	r1, r3, #1
 80128c0:	6079      	str	r1, [r7, #4]
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	4413      	add	r3, r2
 80128c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	3b01      	subs	r3, #1
 80128cc:	60bb      	str	r3, [r7, #8]
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d1ed      	bne.n	80128b0 <sum_sfn+0x10>
	return sum;
 80128d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3714      	adds	r7, #20
 80128da:	46bd      	mov	sp, r7
 80128dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e0:	4770      	bx	lr

080128e2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b086      	sub	sp, #24
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
 80128ea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80128ec:	2304      	movs	r3, #4
 80128ee:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80128f6:	23ff      	movs	r3, #255	@ 0xff
 80128f8:	757b      	strb	r3, [r7, #21]
 80128fa:	23ff      	movs	r3, #255	@ 0xff
 80128fc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80128fe:	e081      	b.n	8012a04 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	69db      	ldr	r3, [r3, #28]
 8012904:	4619      	mov	r1, r3
 8012906:	6938      	ldr	r0, [r7, #16]
 8012908:	f7ff f8bc 	bl	8011a84 <move_window>
 801290c:	4603      	mov	r3, r0
 801290e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012910:	7dfb      	ldrb	r3, [r7, #23]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d17c      	bne.n	8012a10 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6a1b      	ldr	r3, [r3, #32]
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801291e:	7dbb      	ldrb	r3, [r7, #22]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d102      	bne.n	801292a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012924:	2304      	movs	r3, #4
 8012926:	75fb      	strb	r3, [r7, #23]
 8012928:	e077      	b.n	8012a1a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6a1b      	ldr	r3, [r3, #32]
 801292e:	330b      	adds	r3, #11
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012936:	73fb      	strb	r3, [r7, #15]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	7bfa      	ldrb	r2, [r7, #15]
 801293c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801293e:	7dbb      	ldrb	r3, [r7, #22]
 8012940:	2be5      	cmp	r3, #229	@ 0xe5
 8012942:	d00e      	beq.n	8012962 <dir_read+0x80>
 8012944:	7dbb      	ldrb	r3, [r7, #22]
 8012946:	2b2e      	cmp	r3, #46	@ 0x2e
 8012948:	d00b      	beq.n	8012962 <dir_read+0x80>
 801294a:	7bfb      	ldrb	r3, [r7, #15]
 801294c:	f023 0320 	bic.w	r3, r3, #32
 8012950:	2b08      	cmp	r3, #8
 8012952:	bf0c      	ite	eq
 8012954:	2301      	moveq	r3, #1
 8012956:	2300      	movne	r3, #0
 8012958:	b2db      	uxtb	r3, r3
 801295a:	461a      	mov	r2, r3
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	4293      	cmp	r3, r2
 8012960:	d002      	beq.n	8012968 <dir_read+0x86>
				ord = 0xFF;
 8012962:	23ff      	movs	r3, #255	@ 0xff
 8012964:	757b      	strb	r3, [r7, #21]
 8012966:	e044      	b.n	80129f2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012968:	7bfb      	ldrb	r3, [r7, #15]
 801296a:	2b0f      	cmp	r3, #15
 801296c:	d12f      	bne.n	80129ce <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801296e:	7dbb      	ldrb	r3, [r7, #22]
 8012970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00d      	beq.n	8012994 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a1b      	ldr	r3, [r3, #32]
 801297c:	7b5b      	ldrb	r3, [r3, #13]
 801297e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012980:	7dbb      	ldrb	r3, [r7, #22]
 8012982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012986:	75bb      	strb	r3, [r7, #22]
 8012988:	7dbb      	ldrb	r3, [r7, #22]
 801298a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	695a      	ldr	r2, [r3, #20]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012994:	7dba      	ldrb	r2, [r7, #22]
 8012996:	7d7b      	ldrb	r3, [r7, #21]
 8012998:	429a      	cmp	r2, r3
 801299a:	d115      	bne.n	80129c8 <dir_read+0xe6>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6a1b      	ldr	r3, [r3, #32]
 80129a0:	330d      	adds	r3, #13
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	7d3a      	ldrb	r2, [r7, #20]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d10e      	bne.n	80129c8 <dir_read+0xe6>
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	68da      	ldr	r2, [r3, #12]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6a1b      	ldr	r3, [r3, #32]
 80129b2:	4619      	mov	r1, r3
 80129b4:	4610      	mov	r0, r2
 80129b6:	f7ff fe19 	bl	80125ec <pick_lfn>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d003      	beq.n	80129c8 <dir_read+0xe6>
 80129c0:	7d7b      	ldrb	r3, [r7, #21]
 80129c2:	3b01      	subs	r3, #1
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	e000      	b.n	80129ca <dir_read+0xe8>
 80129c8:	23ff      	movs	r3, #255	@ 0xff
 80129ca:	757b      	strb	r3, [r7, #21]
 80129cc:	e011      	b.n	80129f2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80129ce:	7d7b      	ldrb	r3, [r7, #21]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d109      	bne.n	80129e8 <dir_read+0x106>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6a1b      	ldr	r3, [r3, #32]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff ff61 	bl	80128a0 <sum_sfn>
 80129de:	4603      	mov	r3, r0
 80129e0:	461a      	mov	r2, r3
 80129e2:	7d3b      	ldrb	r3, [r7, #20]
 80129e4:	4293      	cmp	r3, r2
 80129e6:	d015      	beq.n	8012a14 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f04f 32ff 	mov.w	r2, #4294967295
 80129ee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80129f0:	e010      	b.n	8012a14 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80129f2:	2100      	movs	r1, #0
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7ff fc3d 	bl	8012274 <dir_next>
 80129fa:	4603      	mov	r3, r0
 80129fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80129fe:	7dfb      	ldrb	r3, [r7, #23]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d109      	bne.n	8012a18 <dir_read+0x136>
	while (dp->sect) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	69db      	ldr	r3, [r3, #28]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	f47f af79 	bne.w	8012900 <dir_read+0x1e>
 8012a0e:	e004      	b.n	8012a1a <dir_read+0x138>
		if (res != FR_OK) break;
 8012a10:	bf00      	nop
 8012a12:	e002      	b.n	8012a1a <dir_read+0x138>
					break;
 8012a14:	bf00      	nop
 8012a16:	e000      	b.n	8012a1a <dir_read+0x138>
		if (res != FR_OK) break;
 8012a18:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012a1a:	7dfb      	ldrb	r3, [r7, #23]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d002      	beq.n	8012a26 <dir_read+0x144>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	61da      	str	r2, [r3, #28]
	return res;
 8012a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3718      	adds	r7, #24
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012a3e:	2100      	movs	r1, #0
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff fb9c 	bl	801217e <dir_sdi>
 8012a46:	4603      	mov	r3, r0
 8012a48:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d001      	beq.n	8012a54 <dir_find+0x24>
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	e0a9      	b.n	8012ba8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012a54:	23ff      	movs	r3, #255	@ 0xff
 8012a56:	753b      	strb	r3, [r7, #20]
 8012a58:	7d3b      	ldrb	r3, [r7, #20]
 8012a5a:	757b      	strb	r3, [r7, #21]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a62:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	69db      	ldr	r3, [r3, #28]
 8012a68:	4619      	mov	r1, r3
 8012a6a:	6938      	ldr	r0, [r7, #16]
 8012a6c:	f7ff f80a 	bl	8011a84 <move_window>
 8012a70:	4603      	mov	r3, r0
 8012a72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a74:	7dfb      	ldrb	r3, [r7, #23]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f040 8090 	bne.w	8012b9c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6a1b      	ldr	r3, [r3, #32]
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012a84:	7dbb      	ldrb	r3, [r7, #22]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d102      	bne.n	8012a90 <dir_find+0x60>
 8012a8a:	2304      	movs	r3, #4
 8012a8c:	75fb      	strb	r3, [r7, #23]
 8012a8e:	e08a      	b.n	8012ba6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6a1b      	ldr	r3, [r3, #32]
 8012a94:	330b      	adds	r3, #11
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012a9c:	73fb      	strb	r3, [r7, #15]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	7bfa      	ldrb	r2, [r7, #15]
 8012aa2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012aa4:	7dbb      	ldrb	r3, [r7, #22]
 8012aa6:	2be5      	cmp	r3, #229	@ 0xe5
 8012aa8:	d007      	beq.n	8012aba <dir_find+0x8a>
 8012aaa:	7bfb      	ldrb	r3, [r7, #15]
 8012aac:	f003 0308 	and.w	r3, r3, #8
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d009      	beq.n	8012ac8 <dir_find+0x98>
 8012ab4:	7bfb      	ldrb	r3, [r7, #15]
 8012ab6:	2b0f      	cmp	r3, #15
 8012ab8:	d006      	beq.n	8012ac8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012aba:	23ff      	movs	r3, #255	@ 0xff
 8012abc:	757b      	strb	r3, [r7, #21]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac4:	631a      	str	r2, [r3, #48]	@ 0x30
 8012ac6:	e05e      	b.n	8012b86 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012ac8:	7bfb      	ldrb	r3, [r7, #15]
 8012aca:	2b0f      	cmp	r3, #15
 8012acc:	d136      	bne.n	8012b3c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d154      	bne.n	8012b86 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012adc:	7dbb      	ldrb	r3, [r7, #22]
 8012ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d00d      	beq.n	8012b02 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6a1b      	ldr	r3, [r3, #32]
 8012aea:	7b5b      	ldrb	r3, [r3, #13]
 8012aec:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012aee:	7dbb      	ldrb	r3, [r7, #22]
 8012af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012af4:	75bb      	strb	r3, [r7, #22]
 8012af6:	7dbb      	ldrb	r3, [r7, #22]
 8012af8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	695a      	ldr	r2, [r3, #20]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012b02:	7dba      	ldrb	r2, [r7, #22]
 8012b04:	7d7b      	ldrb	r3, [r7, #21]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d115      	bne.n	8012b36 <dir_find+0x106>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6a1b      	ldr	r3, [r3, #32]
 8012b0e:	330d      	adds	r3, #13
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	7d3a      	ldrb	r2, [r7, #20]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d10e      	bne.n	8012b36 <dir_find+0x106>
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	68da      	ldr	r2, [r3, #12]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6a1b      	ldr	r3, [r3, #32]
 8012b20:	4619      	mov	r1, r3
 8012b22:	4610      	mov	r0, r2
 8012b24:	f7ff fcf2 	bl	801250c <cmp_lfn>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d003      	beq.n	8012b36 <dir_find+0x106>
 8012b2e:	7d7b      	ldrb	r3, [r7, #21]
 8012b30:	3b01      	subs	r3, #1
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	e000      	b.n	8012b38 <dir_find+0x108>
 8012b36:	23ff      	movs	r3, #255	@ 0xff
 8012b38:	757b      	strb	r3, [r7, #21]
 8012b3a:	e024      	b.n	8012b86 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012b3c:	7d7b      	ldrb	r3, [r7, #21]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d109      	bne.n	8012b56 <dir_find+0x126>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6a1b      	ldr	r3, [r3, #32]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff feaa 	bl	80128a0 <sum_sfn>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	461a      	mov	r2, r3
 8012b50:	7d3b      	ldrb	r3, [r7, #20]
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d024      	beq.n	8012ba0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10a      	bne.n	8012b7a <dir_find+0x14a>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6a18      	ldr	r0, [r3, #32]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	3324      	adds	r3, #36	@ 0x24
 8012b6c:	220b      	movs	r2, #11
 8012b6e:	4619      	mov	r1, r3
 8012b70:	f7fe fd95 	bl	801169e <mem_cmp>
 8012b74:	4603      	mov	r3, r0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d014      	beq.n	8012ba4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012b7a:	23ff      	movs	r3, #255	@ 0xff
 8012b7c:	757b      	strb	r3, [r7, #21]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f04f 32ff 	mov.w	r2, #4294967295
 8012b84:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012b86:	2100      	movs	r1, #0
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f7ff fb73 	bl	8012274 <dir_next>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012b92:	7dfb      	ldrb	r3, [r7, #23]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f43f af65 	beq.w	8012a64 <dir_find+0x34>
 8012b9a:	e004      	b.n	8012ba6 <dir_find+0x176>
		if (res != FR_OK) break;
 8012b9c:	bf00      	nop
 8012b9e:	e002      	b.n	8012ba6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012ba0:	bf00      	nop
 8012ba2:	e000      	b.n	8012ba6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012ba4:	bf00      	nop

	return res;
 8012ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3718      	adds	r7, #24
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b08c      	sub	sp, #48	@ 0x30
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012bc4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d001      	beq.n	8012bd0 <dir_register+0x20>
 8012bcc:	2306      	movs	r3, #6
 8012bce:	e0e0      	b.n	8012d92 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bd4:	e002      	b.n	8012bdc <dir_register+0x2c>
 8012bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd8:	3301      	adds	r3, #1
 8012bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	68da      	ldr	r2, [r3, #12]
 8012be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be2:	005b      	lsls	r3, r3, #1
 8012be4:	4413      	add	r3, r2
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d1f4      	bne.n	8012bd6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012bf2:	f107 030c 	add.w	r3, r7, #12
 8012bf6:	220c      	movs	r2, #12
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fe fd14 	bl	8011626 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012bfe:	7dfb      	ldrb	r3, [r7, #23]
 8012c00:	f003 0301 	and.w	r3, r3, #1
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d032      	beq.n	8012c6e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2240      	movs	r2, #64	@ 0x40
 8012c0c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012c10:	2301      	movs	r3, #1
 8012c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c14:	e016      	b.n	8012c44 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	68da      	ldr	r2, [r3, #12]
 8012c20:	f107 010c 	add.w	r1, r7, #12
 8012c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c26:	f7ff fdad 	bl	8012784 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff ff00 	bl	8012a30 <dir_find>
 8012c30:	4603      	mov	r3, r0
 8012c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8012c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c40:	3301      	adds	r3, #1
 8012c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c46:	2b63      	cmp	r3, #99	@ 0x63
 8012c48:	d9e5      	bls.n	8012c16 <dir_register+0x66>
 8012c4a:	e000      	b.n	8012c4e <dir_register+0x9e>
			if (res != FR_OK) break;
 8012c4c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c50:	2b64      	cmp	r3, #100	@ 0x64
 8012c52:	d101      	bne.n	8012c58 <dir_register+0xa8>
 8012c54:	2307      	movs	r3, #7
 8012c56:	e09c      	b.n	8012d92 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012c58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c5c:	2b04      	cmp	r3, #4
 8012c5e:	d002      	beq.n	8012c66 <dir_register+0xb6>
 8012c60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c64:	e095      	b.n	8012d92 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012c66:	7dfa      	ldrb	r2, [r7, #23]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012c6e:	7dfb      	ldrb	r3, [r7, #23]
 8012c70:	f003 0302 	and.w	r3, r3, #2
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d007      	beq.n	8012c88 <dir_register+0xd8>
 8012c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c7a:	330c      	adds	r3, #12
 8012c7c:	4a47      	ldr	r2, [pc, #284]	@ (8012d9c <dir_register+0x1ec>)
 8012c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8012c82:	089b      	lsrs	r3, r3, #2
 8012c84:	3301      	adds	r3, #1
 8012c86:	e000      	b.n	8012c8a <dir_register+0xda>
 8012c88:	2301      	movs	r3, #1
 8012c8a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012c8c:	6a39      	ldr	r1, [r7, #32]
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7ff fbb5 	bl	80123fe <dir_alloc>
 8012c94:	4603      	mov	r3, r0
 8012c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d148      	bne.n	8012d34 <dir_register+0x184>
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	3b01      	subs	r3, #1
 8012ca6:	623b      	str	r3, [r7, #32]
 8012ca8:	6a3b      	ldr	r3, [r7, #32]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d042      	beq.n	8012d34 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	695a      	ldr	r2, [r3, #20]
 8012cb2:	6a3b      	ldr	r3, [r7, #32]
 8012cb4:	015b      	lsls	r3, r3, #5
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	4619      	mov	r1, r3
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7ff fa5f 	bl	801217e <dir_sdi>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d132      	bne.n	8012d34 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	3324      	adds	r3, #36	@ 0x24
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7ff fde4 	bl	80128a0 <sum_sfn>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	69db      	ldr	r3, [r3, #28]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	69f8      	ldr	r0, [r7, #28]
 8012ce4:	f7fe fece 	bl	8011a84 <move_window>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8012cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d11d      	bne.n	8012d32 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	68d8      	ldr	r0, [r3, #12]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6a19      	ldr	r1, [r3, #32]
 8012cfe:	6a3b      	ldr	r3, [r7, #32]
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	7efb      	ldrb	r3, [r7, #27]
 8012d04:	f7ff fcd6 	bl	80126b4 <put_lfn>
				fs->wflag = 1;
 8012d08:	69fb      	ldr	r3, [r7, #28]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012d0e:	2100      	movs	r1, #0
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7ff faaf 	bl	8012274 <dir_next>
 8012d16:	4603      	mov	r3, r0
 8012d18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8012d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d107      	bne.n	8012d34 <dir_register+0x184>
 8012d24:	6a3b      	ldr	r3, [r7, #32]
 8012d26:	3b01      	subs	r3, #1
 8012d28:	623b      	str	r3, [r7, #32]
 8012d2a:	6a3b      	ldr	r3, [r7, #32]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d1d5      	bne.n	8012cdc <dir_register+0x12c>
 8012d30:	e000      	b.n	8012d34 <dir_register+0x184>
				if (res != FR_OK) break;
 8012d32:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012d34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d128      	bne.n	8012d8e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	69db      	ldr	r3, [r3, #28]
 8012d40:	4619      	mov	r1, r3
 8012d42:	69f8      	ldr	r0, [r7, #28]
 8012d44:	f7fe fe9e 	bl	8011a84 <move_window>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d11b      	bne.n	8012d8e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6a1b      	ldr	r3, [r3, #32]
 8012d5a:	2220      	movs	r2, #32
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fc82 	bl	8011668 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6a18      	ldr	r0, [r3, #32]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	3324      	adds	r3, #36	@ 0x24
 8012d6c:	220b      	movs	r2, #11
 8012d6e:	4619      	mov	r1, r3
 8012d70:	f7fe fc59 	bl	8011626 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6a1b      	ldr	r3, [r3, #32]
 8012d7e:	330c      	adds	r3, #12
 8012d80:	f002 0218 	and.w	r2, r2, #24
 8012d84:	b2d2      	uxtb	r2, r2
 8012d86:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3730      	adds	r7, #48	@ 0x30
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	4ec4ec4f 	.word	0x4ec4ec4f

08012da0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b088      	sub	sp, #32
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	2200      	movs	r2, #0
 8012db4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	69db      	ldr	r3, [r3, #28]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 80ca 	beq.w	8012f54 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dc8:	d032      	beq.n	8012e30 <get_fileinfo+0x90>
			i = j = 0;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	61bb      	str	r3, [r7, #24]
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012dd2:	e01b      	b.n	8012e0c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012dd4:	89fb      	ldrh	r3, [r7, #14]
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f001 fe43 	bl	8014a64 <ff_convert>
 8012dde:	4603      	mov	r3, r0
 8012de0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012de2:	89fb      	ldrh	r3, [r7, #14]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d102      	bne.n	8012dee <get_fileinfo+0x4e>
 8012de8:	2300      	movs	r3, #0
 8012dea:	61fb      	str	r3, [r7, #28]
 8012dec:	e01a      	b.n	8012e24 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	2bfe      	cmp	r3, #254	@ 0xfe
 8012df2:	d902      	bls.n	8012dfa <get_fileinfo+0x5a>
 8012df4:	2300      	movs	r3, #0
 8012df6:	61fb      	str	r3, [r7, #28]
 8012df8:	e014      	b.n	8012e24 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012dfa:	69fb      	ldr	r3, [r7, #28]
 8012dfc:	1c5a      	adds	r2, r3, #1
 8012dfe:	61fa      	str	r2, [r7, #28]
 8012e00:	89fa      	ldrh	r2, [r7, #14]
 8012e02:	b2d1      	uxtb	r1, r2
 8012e04:	683a      	ldr	r2, [r7, #0]
 8012e06:	4413      	add	r3, r2
 8012e08:	460a      	mov	r2, r1
 8012e0a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	68da      	ldr	r2, [r3, #12]
 8012e10:	69bb      	ldr	r3, [r7, #24]
 8012e12:	1c59      	adds	r1, r3, #1
 8012e14:	61b9      	str	r1, [r7, #24]
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	4413      	add	r3, r2
 8012e1a:	881b      	ldrh	r3, [r3, #0]
 8012e1c:	81fb      	strh	r3, [r7, #14]
 8012e1e:	89fb      	ldrh	r3, [r7, #14]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d1d7      	bne.n	8012dd4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012e24:	683a      	ldr	r2, [r7, #0]
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	4413      	add	r3, r2
 8012e2a:	3316      	adds	r3, #22
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012e30:	2300      	movs	r3, #0
 8012e32:	61bb      	str	r3, [r7, #24]
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012e38:	683a      	ldr	r2, [r7, #0]
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	3316      	adds	r3, #22
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012e44:	e04d      	b.n	8012ee2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6a1a      	ldr	r2, [r3, #32]
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	1c59      	adds	r1, r3, #1
 8012e4e:	61f9      	str	r1, [r7, #28]
 8012e50:	4413      	add	r3, r2
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012e56:	7dfb      	ldrb	r3, [r7, #23]
 8012e58:	2b20      	cmp	r3, #32
 8012e5a:	d041      	beq.n	8012ee0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
 8012e5e:	2b05      	cmp	r3, #5
 8012e60:	d101      	bne.n	8012e66 <get_fileinfo+0xc6>
 8012e62:	23e5      	movs	r3, #229	@ 0xe5
 8012e64:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	2b09      	cmp	r3, #9
 8012e6a:	d10f      	bne.n	8012e8c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8012e6c:	89bb      	ldrh	r3, [r7, #12]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d105      	bne.n	8012e7e <get_fileinfo+0xde>
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	4413      	add	r3, r2
 8012e78:	3316      	adds	r3, #22
 8012e7a:	222e      	movs	r2, #46	@ 0x2e
 8012e7c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	1c5a      	adds	r2, r3, #1
 8012e82:	61ba      	str	r2, [r7, #24]
 8012e84:	683a      	ldr	r2, [r7, #0]
 8012e86:	4413      	add	r3, r2
 8012e88:	222e      	movs	r2, #46	@ 0x2e
 8012e8a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	4413      	add	r3, r2
 8012e92:	3309      	adds	r3, #9
 8012e94:	7dfa      	ldrb	r2, [r7, #23]
 8012e96:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8012e98:	89bb      	ldrh	r3, [r7, #12]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d11c      	bne.n	8012ed8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012e9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ea0:	2b40      	cmp	r3, #64	@ 0x40
 8012ea2:	d913      	bls.n	8012ecc <get_fileinfo+0x12c>
 8012ea4:	7dfb      	ldrb	r3, [r7, #23]
 8012ea6:	2b5a      	cmp	r3, #90	@ 0x5a
 8012ea8:	d810      	bhi.n	8012ecc <get_fileinfo+0x12c>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6a1b      	ldr	r3, [r3, #32]
 8012eae:	330c      	adds	r3, #12
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	2b08      	cmp	r3, #8
 8012eb8:	d901      	bls.n	8012ebe <get_fileinfo+0x11e>
 8012eba:	2310      	movs	r3, #16
 8012ebc:	e000      	b.n	8012ec0 <get_fileinfo+0x120>
 8012ebe:	2308      	movs	r3, #8
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d002      	beq.n	8012ecc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8012ec6:	7dfb      	ldrb	r3, [r7, #23]
 8012ec8:	3320      	adds	r3, #32
 8012eca:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8012ecc:	683a      	ldr	r2, [r7, #0]
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	3316      	adds	r3, #22
 8012ed4:	7dfa      	ldrb	r2, [r7, #23]
 8012ed6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	3301      	adds	r3, #1
 8012edc:	61bb      	str	r3, [r7, #24]
 8012ede:	e000      	b.n	8012ee2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8012ee0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	2b0a      	cmp	r3, #10
 8012ee6:	d9ae      	bls.n	8012e46 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8012ee8:	89bb      	ldrh	r3, [r7, #12]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d10d      	bne.n	8012f0a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8012eee:	683a      	ldr	r2, [r7, #0]
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	3316      	adds	r3, #22
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6a1b      	ldr	r3, [r3, #32]
 8012efe:	330c      	adds	r3, #12
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d101      	bne.n	8012f0a <get_fileinfo+0x16a>
 8012f06:	2300      	movs	r3, #0
 8012f08:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012f0a:	683a      	ldr	r2, [r7, #0]
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	4413      	add	r3, r2
 8012f10:	3309      	adds	r3, #9
 8012f12:	2200      	movs	r2, #0
 8012f14:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6a1b      	ldr	r3, [r3, #32]
 8012f1a:	7ada      	ldrb	r2, [r3, #11]
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6a1b      	ldr	r3, [r3, #32]
 8012f24:	331c      	adds	r3, #28
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe fb13 	bl	8011552 <ld_dword>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6a1b      	ldr	r3, [r3, #32]
 8012f36:	3316      	adds	r3, #22
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7fe fb0a 	bl	8011552 <ld_dword>
 8012f3e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	b29a      	uxth	r2, r3
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	80da      	strh	r2, [r3, #6]
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	0c1b      	lsrs	r3, r3, #16
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	809a      	strh	r2, [r3, #4]
 8012f52:	e000      	b.n	8012f56 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012f54:	bf00      	nop
}
 8012f56:	3720      	adds	r7, #32
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b08a      	sub	sp, #40	@ 0x28
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	613b      	str	r3, [r7, #16]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	68db      	ldr	r3, [r3, #12]
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	2300      	movs	r3, #0
 8012f76:	617b      	str	r3, [r7, #20]
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	61ba      	str	r2, [r7, #24]
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	4413      	add	r3, r2
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012f8c:	2b1f      	cmp	r3, #31
 8012f8e:	d940      	bls.n	8013012 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012f90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012f92:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f94:	d006      	beq.n	8012fa4 <create_name+0x48>
 8012f96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012f98:	2b5c      	cmp	r3, #92	@ 0x5c
 8012f9a:	d110      	bne.n	8012fbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012f9c:	e002      	b.n	8012fa4 <create_name+0x48>
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	61bb      	str	r3, [r7, #24]
 8012fa4:	693a      	ldr	r2, [r7, #16]
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	4413      	add	r3, r2
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2b2f      	cmp	r3, #47	@ 0x2f
 8012fae:	d0f6      	beq.n	8012f9e <create_name+0x42>
 8012fb0:	693a      	ldr	r2, [r7, #16]
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	2b5c      	cmp	r3, #92	@ 0x5c
 8012fba:	d0f0      	beq.n	8012f9e <create_name+0x42>
			break;
 8012fbc:	e02a      	b.n	8013014 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8012fc2:	d901      	bls.n	8012fc8 <create_name+0x6c>
 8012fc4:	2306      	movs	r3, #6
 8012fc6:	e17d      	b.n	80132c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012fc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fd0:	2101      	movs	r1, #1
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f001 fd46 	bl	8014a64 <ff_convert>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d101      	bne.n	8012fe6 <create_name+0x8a>
 8012fe2:	2306      	movs	r3, #6
 8012fe4:	e16e      	b.n	80132c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8012fea:	d809      	bhi.n	8013000 <create_name+0xa4>
 8012fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fee:	4619      	mov	r1, r3
 8012ff0:	488d      	ldr	r0, [pc, #564]	@ (8013228 <create_name+0x2cc>)
 8012ff2:	f7fe fb7b 	bl	80116ec <chk_chr>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d001      	beq.n	8013000 <create_name+0xa4>
 8012ffc:	2306      	movs	r3, #6
 8012ffe:	e161      	b.n	80132c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	1c5a      	adds	r2, r3, #1
 8013004:	617a      	str	r2, [r7, #20]
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	68fa      	ldr	r2, [r7, #12]
 801300a:	4413      	add	r3, r2
 801300c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801300e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013010:	e7b4      	b.n	8012f7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013012:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013014:	693a      	ldr	r2, [r7, #16]
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	441a      	add	r2, r3
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801301e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013020:	2b1f      	cmp	r3, #31
 8013022:	d801      	bhi.n	8013028 <create_name+0xcc>
 8013024:	2304      	movs	r3, #4
 8013026:	e000      	b.n	801302a <create_name+0xce>
 8013028:	2300      	movs	r3, #0
 801302a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801302e:	e011      	b.n	8013054 <create_name+0xf8>
		w = lfn[di - 1];
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013036:	3b01      	subs	r3, #1
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	68fa      	ldr	r2, [r7, #12]
 801303c:	4413      	add	r3, r2
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013044:	2b20      	cmp	r3, #32
 8013046:	d002      	beq.n	801304e <create_name+0xf2>
 8013048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801304a:	2b2e      	cmp	r3, #46	@ 0x2e
 801304c:	d106      	bne.n	801305c <create_name+0x100>
		di--;
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	3b01      	subs	r3, #1
 8013052:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1ea      	bne.n	8013030 <create_name+0xd4>
 801305a:	e000      	b.n	801305e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801305c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	005b      	lsls	r3, r3, #1
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	4413      	add	r3, r2
 8013066:	2200      	movs	r2, #0
 8013068:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <create_name+0x118>
 8013070:	2306      	movs	r3, #6
 8013072:	e127      	b.n	80132c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	3324      	adds	r3, #36	@ 0x24
 8013078:	220b      	movs	r2, #11
 801307a:	2120      	movs	r1, #32
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe faf3 	bl	8011668 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013082:	2300      	movs	r3, #0
 8013084:	61bb      	str	r3, [r7, #24]
 8013086:	e002      	b.n	801308e <create_name+0x132>
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	3301      	adds	r3, #1
 801308c:	61bb      	str	r3, [r7, #24]
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	4413      	add	r3, r2
 8013096:	881b      	ldrh	r3, [r3, #0]
 8013098:	2b20      	cmp	r3, #32
 801309a:	d0f5      	beq.n	8013088 <create_name+0x12c>
 801309c:	69bb      	ldr	r3, [r7, #24]
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	4413      	add	r3, r2
 80130a4:	881b      	ldrh	r3, [r3, #0]
 80130a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80130a8:	d0ee      	beq.n	8013088 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d009      	beq.n	80130c4 <create_name+0x168>
 80130b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130b4:	f043 0303 	orr.w	r3, r3, #3
 80130b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80130bc:	e002      	b.n	80130c4 <create_name+0x168>
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	3b01      	subs	r3, #1
 80130c2:	617b      	str	r3, [r7, #20]
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d009      	beq.n	80130de <create_name+0x182>
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80130d0:	3b01      	subs	r3, #1
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	68fa      	ldr	r2, [r7, #12]
 80130d6:	4413      	add	r3, r2
 80130d8:	881b      	ldrh	r3, [r3, #0]
 80130da:	2b2e      	cmp	r3, #46	@ 0x2e
 80130dc:	d1ef      	bne.n	80130be <create_name+0x162>

	i = b = 0; ni = 8;
 80130de:	2300      	movs	r3, #0
 80130e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80130e4:	2300      	movs	r3, #0
 80130e6:	623b      	str	r3, [r7, #32]
 80130e8:	2308      	movs	r3, #8
 80130ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	1c5a      	adds	r2, r3, #1
 80130f0:	61ba      	str	r2, [r7, #24]
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	68fa      	ldr	r2, [r7, #12]
 80130f6:	4413      	add	r3, r2
 80130f8:	881b      	ldrh	r3, [r3, #0]
 80130fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80130fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f000 8090 	beq.w	8013224 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013104:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013106:	2b20      	cmp	r3, #32
 8013108:	d006      	beq.n	8013118 <create_name+0x1bc>
 801310a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801310c:	2b2e      	cmp	r3, #46	@ 0x2e
 801310e:	d10a      	bne.n	8013126 <create_name+0x1ca>
 8013110:	69ba      	ldr	r2, [r7, #24]
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	429a      	cmp	r2, r3
 8013116:	d006      	beq.n	8013126 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801311c:	f043 0303 	orr.w	r3, r3, #3
 8013120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013124:	e07d      	b.n	8013222 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013126:	6a3a      	ldr	r2, [r7, #32]
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	429a      	cmp	r2, r3
 801312c:	d203      	bcs.n	8013136 <create_name+0x1da>
 801312e:	69ba      	ldr	r2, [r7, #24]
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	429a      	cmp	r2, r3
 8013134:	d123      	bne.n	801317e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	2b0b      	cmp	r3, #11
 801313a:	d106      	bne.n	801314a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801313c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013140:	f043 0303 	orr.w	r3, r3, #3
 8013144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013148:	e075      	b.n	8013236 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801314a:	69ba      	ldr	r2, [r7, #24]
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	429a      	cmp	r2, r3
 8013150:	d005      	beq.n	801315e <create_name+0x202>
 8013152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013156:	f043 0303 	orr.w	r3, r3, #3
 801315a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801315e:	69ba      	ldr	r2, [r7, #24]
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	429a      	cmp	r2, r3
 8013164:	d866      	bhi.n	8013234 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	61bb      	str	r3, [r7, #24]
 801316a:	2308      	movs	r3, #8
 801316c:	623b      	str	r3, [r7, #32]
 801316e:	230b      	movs	r3, #11
 8013170:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801317c:	e051      	b.n	8013222 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801317e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013180:	2b7f      	cmp	r3, #127	@ 0x7f
 8013182:	d914      	bls.n	80131ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013186:	2100      	movs	r1, #0
 8013188:	4618      	mov	r0, r3
 801318a:	f001 fc6b 	bl	8014a64 <ff_convert>
 801318e:	4603      	mov	r3, r0
 8013190:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013194:	2b00      	cmp	r3, #0
 8013196:	d004      	beq.n	80131a2 <create_name+0x246>
 8013198:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801319a:	3b80      	subs	r3, #128	@ 0x80
 801319c:	4a23      	ldr	r2, [pc, #140]	@ (801322c <create_name+0x2d0>)
 801319e:	5cd3      	ldrb	r3, [r2, r3]
 80131a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80131a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131a6:	f043 0302 	orr.w	r3, r3, #2
 80131aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80131ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d007      	beq.n	80131c4 <create_name+0x268>
 80131b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131b6:	4619      	mov	r1, r3
 80131b8:	481d      	ldr	r0, [pc, #116]	@ (8013230 <create_name+0x2d4>)
 80131ba:	f7fe fa97 	bl	80116ec <chk_chr>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d008      	beq.n	80131d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80131c4:	235f      	movs	r3, #95	@ 0x5f
 80131c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80131c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131cc:	f043 0303 	orr.w	r3, r3, #3
 80131d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80131d4:	e01b      	b.n	801320e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80131d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131d8:	2b40      	cmp	r3, #64	@ 0x40
 80131da:	d909      	bls.n	80131f0 <create_name+0x294>
 80131dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131de:	2b5a      	cmp	r3, #90	@ 0x5a
 80131e0:	d806      	bhi.n	80131f0 <create_name+0x294>
					b |= 2;
 80131e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80131e6:	f043 0302 	orr.w	r3, r3, #2
 80131ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80131ee:	e00e      	b.n	801320e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80131f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131f2:	2b60      	cmp	r3, #96	@ 0x60
 80131f4:	d90b      	bls.n	801320e <create_name+0x2b2>
 80131f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131f8:	2b7a      	cmp	r3, #122	@ 0x7a
 80131fa:	d808      	bhi.n	801320e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80131fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013200:	f043 0301 	orr.w	r3, r3, #1
 8013204:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013208:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801320a:	3b20      	subs	r3, #32
 801320c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801320e:	6a3b      	ldr	r3, [r7, #32]
 8013210:	1c5a      	adds	r2, r3, #1
 8013212:	623a      	str	r2, [r7, #32]
 8013214:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013216:	b2d1      	uxtb	r1, r2
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	4413      	add	r3, r2
 801321c:	460a      	mov	r2, r1
 801321e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013222:	e763      	b.n	80130ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013224:	bf00      	nop
 8013226:	e006      	b.n	8013236 <create_name+0x2da>
 8013228:	08017748 	.word	0x08017748
 801322c:	080177d0 	.word	0x080177d0
 8013230:	08017754 	.word	0x08017754
			if (si > di) break;			/* No extension */
 8013234:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801323c:	2be5      	cmp	r3, #229	@ 0xe5
 801323e:	d103      	bne.n	8013248 <create_name+0x2ec>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2205      	movs	r2, #5
 8013244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	2b08      	cmp	r3, #8
 801324c:	d104      	bne.n	8013258 <create_name+0x2fc>
 801324e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013258:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801325c:	f003 030c 	and.w	r3, r3, #12
 8013260:	2b0c      	cmp	r3, #12
 8013262:	d005      	beq.n	8013270 <create_name+0x314>
 8013264:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013268:	f003 0303 	and.w	r3, r3, #3
 801326c:	2b03      	cmp	r3, #3
 801326e:	d105      	bne.n	801327c <create_name+0x320>
 8013270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013274:	f043 0302 	orr.w	r3, r3, #2
 8013278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801327c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013280:	f003 0302 	and.w	r3, r3, #2
 8013284:	2b00      	cmp	r3, #0
 8013286:	d117      	bne.n	80132b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801328c:	f003 0303 	and.w	r3, r3, #3
 8013290:	2b01      	cmp	r3, #1
 8013292:	d105      	bne.n	80132a0 <create_name+0x344>
 8013294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013298:	f043 0310 	orr.w	r3, r3, #16
 801329c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80132a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80132a4:	f003 030c 	and.w	r3, r3, #12
 80132a8:	2b04      	cmp	r3, #4
 80132aa:	d105      	bne.n	80132b8 <create_name+0x35c>
 80132ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132b0:	f043 0308 	orr.w	r3, r3, #8
 80132b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80132be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80132c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3728      	adds	r7, #40	@ 0x28
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80132e0:	e002      	b.n	80132e8 <follow_path+0x1c>
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	3301      	adds	r3, #1
 80132e6:	603b      	str	r3, [r7, #0]
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80132ee:	d0f8      	beq.n	80132e2 <follow_path+0x16>
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80132f6:	d0f4      	beq.n	80132e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	2200      	movs	r2, #0
 80132fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	2b1f      	cmp	r3, #31
 8013304:	d80a      	bhi.n	801331c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2280      	movs	r2, #128	@ 0x80
 801330a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801330e:	2100      	movs	r1, #0
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7fe ff34 	bl	801217e <dir_sdi>
 8013316:	4603      	mov	r3, r0
 8013318:	75fb      	strb	r3, [r7, #23]
 801331a:	e043      	b.n	80133a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801331c:	463b      	mov	r3, r7
 801331e:	4619      	mov	r1, r3
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7ff fe1b 	bl	8012f5c <create_name>
 8013326:	4603      	mov	r3, r0
 8013328:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801332a:	7dfb      	ldrb	r3, [r7, #23]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d134      	bne.n	801339a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7ff fb7d 	bl	8012a30 <dir_find>
 8013336:	4603      	mov	r3, r0
 8013338:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013340:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013342:	7dfb      	ldrb	r3, [r7, #23]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d00a      	beq.n	801335e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013348:	7dfb      	ldrb	r3, [r7, #23]
 801334a:	2b04      	cmp	r3, #4
 801334c:	d127      	bne.n	801339e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801334e:	7afb      	ldrb	r3, [r7, #11]
 8013350:	f003 0304 	and.w	r3, r3, #4
 8013354:	2b00      	cmp	r3, #0
 8013356:	d122      	bne.n	801339e <follow_path+0xd2>
 8013358:	2305      	movs	r3, #5
 801335a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801335c:	e01f      	b.n	801339e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801335e:	7afb      	ldrb	r3, [r7, #11]
 8013360:	f003 0304 	and.w	r3, r3, #4
 8013364:	2b00      	cmp	r3, #0
 8013366:	d11c      	bne.n	80133a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	799b      	ldrb	r3, [r3, #6]
 801336c:	f003 0310 	and.w	r3, r3, #16
 8013370:	2b00      	cmp	r3, #0
 8013372:	d102      	bne.n	801337a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013374:	2305      	movs	r3, #5
 8013376:	75fb      	strb	r3, [r7, #23]
 8013378:	e014      	b.n	80133a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	695b      	ldr	r3, [r3, #20]
 8013384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013388:	4413      	add	r3, r2
 801338a:	4619      	mov	r1, r3
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	f7ff f87d 	bl	801248c <ld_clust>
 8013392:	4602      	mov	r2, r0
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013398:	e7c0      	b.n	801331c <follow_path+0x50>
			if (res != FR_OK) break;
 801339a:	bf00      	nop
 801339c:	e002      	b.n	80133a4 <follow_path+0xd8>
				break;
 801339e:	bf00      	nop
 80133a0:	e000      	b.n	80133a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80133a2:	bf00      	nop
			}
		}
	}

	return res;
 80133a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3718      	adds	r7, #24
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80133ae:	b480      	push	{r7}
 80133b0:	b087      	sub	sp, #28
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80133b6:	f04f 33ff 	mov.w	r3, #4294967295
 80133ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d031      	beq.n	8013428 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	617b      	str	r3, [r7, #20]
 80133ca:	e002      	b.n	80133d2 <get_ldnumber+0x24>
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	3301      	adds	r3, #1
 80133d0:	617b      	str	r3, [r7, #20]
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	2b1f      	cmp	r3, #31
 80133d8:	d903      	bls.n	80133e2 <get_ldnumber+0x34>
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	2b3a      	cmp	r3, #58	@ 0x3a
 80133e0:	d1f4      	bne.n	80133cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	2b3a      	cmp	r3, #58	@ 0x3a
 80133e8:	d11c      	bne.n	8013424 <get_ldnumber+0x76>
			tp = *path;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	60fa      	str	r2, [r7, #12]
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	3b30      	subs	r3, #48	@ 0x30
 80133fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	2b09      	cmp	r3, #9
 8013400:	d80e      	bhi.n	8013420 <get_ldnumber+0x72>
 8013402:	68fa      	ldr	r2, [r7, #12]
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	429a      	cmp	r2, r3
 8013408:	d10a      	bne.n	8013420 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d107      	bne.n	8013420 <get_ldnumber+0x72>
					vol = (int)i;
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	3301      	adds	r3, #1
 8013418:	617b      	str	r3, [r7, #20]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	697a      	ldr	r2, [r7, #20]
 801341e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	e002      	b.n	801342a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013424:	2300      	movs	r3, #0
 8013426:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013428:	693b      	ldr	r3, [r7, #16]
}
 801342a:	4618      	mov	r0, r3
 801342c:	371c      	adds	r7, #28
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr
	...

08013438 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	70da      	strb	r2, [r3, #3]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f04f 32ff 	mov.w	r2, #4294967295
 801344e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013450:	6839      	ldr	r1, [r7, #0]
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f7fe fb16 	bl	8011a84 <move_window>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d001      	beq.n	8013462 <check_fs+0x2a>
 801345e:	2304      	movs	r3, #4
 8013460:	e038      	b.n	80134d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	3334      	adds	r3, #52	@ 0x34
 8013466:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801346a:	4618      	mov	r0, r3
 801346c:	f7fe f858 	bl	8011520 <ld_word>
 8013470:	4603      	mov	r3, r0
 8013472:	461a      	mov	r2, r3
 8013474:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013478:	429a      	cmp	r2, r3
 801347a:	d001      	beq.n	8013480 <check_fs+0x48>
 801347c:	2303      	movs	r3, #3
 801347e:	e029      	b.n	80134d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013486:	2be9      	cmp	r3, #233	@ 0xe9
 8013488:	d009      	beq.n	801349e <check_fs+0x66>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013490:	2beb      	cmp	r3, #235	@ 0xeb
 8013492:	d11e      	bne.n	80134d2 <check_fs+0x9a>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801349a:	2b90      	cmp	r3, #144	@ 0x90
 801349c:	d119      	bne.n	80134d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	3334      	adds	r3, #52	@ 0x34
 80134a2:	3336      	adds	r3, #54	@ 0x36
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7fe f854 	bl	8011552 <ld_dword>
 80134aa:	4603      	mov	r3, r0
 80134ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80134b0:	4a0a      	ldr	r2, [pc, #40]	@ (80134dc <check_fs+0xa4>)
 80134b2:	4293      	cmp	r3, r2
 80134b4:	d101      	bne.n	80134ba <check_fs+0x82>
 80134b6:	2300      	movs	r3, #0
 80134b8:	e00c      	b.n	80134d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	3334      	adds	r3, #52	@ 0x34
 80134be:	3352      	adds	r3, #82	@ 0x52
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fe f846 	bl	8011552 <ld_dword>
 80134c6:	4603      	mov	r3, r0
 80134c8:	4a05      	ldr	r2, [pc, #20]	@ (80134e0 <check_fs+0xa8>)
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d101      	bne.n	80134d2 <check_fs+0x9a>
 80134ce:	2300      	movs	r3, #0
 80134d0:	e000      	b.n	80134d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80134d2:	2302      	movs	r3, #2
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3708      	adds	r7, #8
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	00544146 	.word	0x00544146
 80134e0:	33544146 	.word	0x33544146

080134e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b096      	sub	sp, #88	@ 0x58
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	4613      	mov	r3, r2
 80134f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2200      	movs	r2, #0
 80134f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f7ff ff58 	bl	80133ae <get_ldnumber>
 80134fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013502:	2b00      	cmp	r3, #0
 8013504:	da01      	bge.n	801350a <find_volume+0x26>
 8013506:	230b      	movs	r3, #11
 8013508:	e22d      	b.n	8013966 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801350a:	4aa1      	ldr	r2, [pc, #644]	@ (8013790 <find_volume+0x2ac>)
 801350c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013512:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013516:	2b00      	cmp	r3, #0
 8013518:	d101      	bne.n	801351e <find_volume+0x3a>
 801351a:	230c      	movs	r3, #12
 801351c:	e223      	b.n	8013966 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013522:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013524:	79fb      	ldrb	r3, [r7, #7]
 8013526:	f023 0301 	bic.w	r3, r3, #1
 801352a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d01a      	beq.n	801356a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013536:	785b      	ldrb	r3, [r3, #1]
 8013538:	4618      	mov	r0, r3
 801353a:	f7fd ff51 	bl	80113e0 <disk_status>
 801353e:	4603      	mov	r3, r0
 8013540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013548:	f003 0301 	and.w	r3, r3, #1
 801354c:	2b00      	cmp	r3, #0
 801354e:	d10c      	bne.n	801356a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013550:	79fb      	ldrb	r3, [r7, #7]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d007      	beq.n	8013566 <find_volume+0x82>
 8013556:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801355a:	f003 0304 	and.w	r3, r3, #4
 801355e:	2b00      	cmp	r3, #0
 8013560:	d001      	beq.n	8013566 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013562:	230a      	movs	r3, #10
 8013564:	e1ff      	b.n	8013966 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013566:	2300      	movs	r3, #0
 8013568:	e1fd      	b.n	8013966 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801356c:	2200      	movs	r2, #0
 801356e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013572:	b2da      	uxtb	r2, r3
 8013574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013576:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801357a:	785b      	ldrb	r3, [r3, #1]
 801357c:	4618      	mov	r0, r3
 801357e:	f7fd ff49 	bl	8011414 <disk_initialize>
 8013582:	4603      	mov	r3, r0
 8013584:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013588:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801358c:	f003 0301 	and.w	r3, r3, #1
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013594:	2303      	movs	r3, #3
 8013596:	e1e6      	b.n	8013966 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013598:	79fb      	ldrb	r3, [r7, #7]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d007      	beq.n	80135ae <find_volume+0xca>
 801359e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80135a2:	f003 0304 	and.w	r3, r3, #4
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d001      	beq.n	80135ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80135aa:	230a      	movs	r3, #10
 80135ac:	e1db      	b.n	8013966 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80135b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80135b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80135b6:	f7ff ff3f 	bl	8013438 <check_fs>
 80135ba:	4603      	mov	r3, r0
 80135bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80135c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80135c4:	2b02      	cmp	r3, #2
 80135c6:	d149      	bne.n	801365c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80135c8:	2300      	movs	r3, #0
 80135ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80135cc:	e01e      	b.n	801360c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80135ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80135d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80135d6:	011b      	lsls	r3, r3, #4
 80135d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80135dc:	4413      	add	r3, r2
 80135de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80135e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e2:	3304      	adds	r3, #4
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d006      	beq.n	80135f8 <find_volume+0x114>
 80135ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135ec:	3308      	adds	r3, #8
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7fd ffaf 	bl	8011552 <ld_dword>
 80135f4:	4602      	mov	r2, r0
 80135f6:	e000      	b.n	80135fa <find_volume+0x116>
 80135f8:	2200      	movs	r2, #0
 80135fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	3358      	adds	r3, #88	@ 0x58
 8013600:	443b      	add	r3, r7
 8013602:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013608:	3301      	adds	r3, #1
 801360a:	643b      	str	r3, [r7, #64]	@ 0x40
 801360c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801360e:	2b03      	cmp	r3, #3
 8013610:	d9dd      	bls.n	80135ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013612:	2300      	movs	r3, #0
 8013614:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <find_volume+0x13e>
 801361c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801361e:	3b01      	subs	r3, #1
 8013620:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	3358      	adds	r3, #88	@ 0x58
 8013628:	443b      	add	r3, r7
 801362a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801362e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013632:	2b00      	cmp	r3, #0
 8013634:	d005      	beq.n	8013642 <find_volume+0x15e>
 8013636:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013638:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801363a:	f7ff fefd 	bl	8013438 <check_fs>
 801363e:	4603      	mov	r3, r0
 8013640:	e000      	b.n	8013644 <find_volume+0x160>
 8013642:	2303      	movs	r3, #3
 8013644:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013648:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801364c:	2b01      	cmp	r3, #1
 801364e:	d905      	bls.n	801365c <find_volume+0x178>
 8013650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013652:	3301      	adds	r3, #1
 8013654:	643b      	str	r3, [r7, #64]	@ 0x40
 8013656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013658:	2b03      	cmp	r3, #3
 801365a:	d9e2      	bls.n	8013622 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801365c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013660:	2b04      	cmp	r3, #4
 8013662:	d101      	bne.n	8013668 <find_volume+0x184>
 8013664:	2301      	movs	r3, #1
 8013666:	e17e      	b.n	8013966 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801366c:	2b01      	cmp	r3, #1
 801366e:	d901      	bls.n	8013674 <find_volume+0x190>
 8013670:	230d      	movs	r3, #13
 8013672:	e178      	b.n	8013966 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013676:	3334      	adds	r3, #52	@ 0x34
 8013678:	330b      	adds	r3, #11
 801367a:	4618      	mov	r0, r3
 801367c:	f7fd ff50 	bl	8011520 <ld_word>
 8013680:	4603      	mov	r3, r0
 8013682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013686:	d001      	beq.n	801368c <find_volume+0x1a8>
 8013688:	230d      	movs	r3, #13
 801368a:	e16c      	b.n	8013966 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801368c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801368e:	3334      	adds	r3, #52	@ 0x34
 8013690:	3316      	adds	r3, #22
 8013692:	4618      	mov	r0, r3
 8013694:	f7fd ff44 	bl	8011520 <ld_word>
 8013698:	4603      	mov	r3, r0
 801369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801369c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d106      	bne.n	80136b0 <find_volume+0x1cc>
 80136a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136a4:	3334      	adds	r3, #52	@ 0x34
 80136a6:	3324      	adds	r3, #36	@ 0x24
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7fd ff52 	bl	8011552 <ld_dword>
 80136ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80136b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80136b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80136b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80136bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80136c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c2:	789b      	ldrb	r3, [r3, #2]
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d005      	beq.n	80136d4 <find_volume+0x1f0>
 80136c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ca:	789b      	ldrb	r3, [r3, #2]
 80136cc:	2b02      	cmp	r3, #2
 80136ce:	d001      	beq.n	80136d4 <find_volume+0x1f0>
 80136d0:	230d      	movs	r3, #13
 80136d2:	e148      	b.n	8013966 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80136d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d6:	789b      	ldrb	r3, [r3, #2]
 80136d8:	461a      	mov	r2, r3
 80136da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136dc:	fb02 f303 	mul.w	r3, r2, r3
 80136e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80136e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80136e8:	461a      	mov	r2, r3
 80136ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80136ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136f0:	895b      	ldrh	r3, [r3, #10]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d008      	beq.n	8013708 <find_volume+0x224>
 80136f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136f8:	895b      	ldrh	r3, [r3, #10]
 80136fa:	461a      	mov	r2, r3
 80136fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136fe:	895b      	ldrh	r3, [r3, #10]
 8013700:	3b01      	subs	r3, #1
 8013702:	4013      	ands	r3, r2
 8013704:	2b00      	cmp	r3, #0
 8013706:	d001      	beq.n	801370c <find_volume+0x228>
 8013708:	230d      	movs	r3, #13
 801370a:	e12c      	b.n	8013966 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801370e:	3334      	adds	r3, #52	@ 0x34
 8013710:	3311      	adds	r3, #17
 8013712:	4618      	mov	r0, r3
 8013714:	f7fd ff04 	bl	8011520 <ld_word>
 8013718:	4603      	mov	r3, r0
 801371a:	461a      	mov	r2, r3
 801371c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801371e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013722:	891b      	ldrh	r3, [r3, #8]
 8013724:	f003 030f 	and.w	r3, r3, #15
 8013728:	b29b      	uxth	r3, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	d001      	beq.n	8013732 <find_volume+0x24e>
 801372e:	230d      	movs	r3, #13
 8013730:	e119      	b.n	8013966 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013734:	3334      	adds	r3, #52	@ 0x34
 8013736:	3313      	adds	r3, #19
 8013738:	4618      	mov	r0, r3
 801373a:	f7fd fef1 	bl	8011520 <ld_word>
 801373e:	4603      	mov	r3, r0
 8013740:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <find_volume+0x272>
 8013748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374a:	3334      	adds	r3, #52	@ 0x34
 801374c:	3320      	adds	r3, #32
 801374e:	4618      	mov	r0, r3
 8013750:	f7fd feff 	bl	8011552 <ld_dword>
 8013754:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013758:	3334      	adds	r3, #52	@ 0x34
 801375a:	330e      	adds	r3, #14
 801375c:	4618      	mov	r0, r3
 801375e:	f7fd fedf 	bl	8011520 <ld_word>
 8013762:	4603      	mov	r3, r0
 8013764:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013766:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013768:	2b00      	cmp	r3, #0
 801376a:	d101      	bne.n	8013770 <find_volume+0x28c>
 801376c:	230d      	movs	r3, #13
 801376e:	e0fa      	b.n	8013966 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013770:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013774:	4413      	add	r3, r2
 8013776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013778:	8912      	ldrh	r2, [r2, #8]
 801377a:	0912      	lsrs	r2, r2, #4
 801377c:	b292      	uxth	r2, r2
 801377e:	4413      	add	r3, r2
 8013780:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013786:	429a      	cmp	r2, r3
 8013788:	d204      	bcs.n	8013794 <find_volume+0x2b0>
 801378a:	230d      	movs	r3, #13
 801378c:	e0eb      	b.n	8013966 <find_volume+0x482>
 801378e:	bf00      	nop
 8013790:	20000d7c 	.word	0x20000d7c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801379c:	8952      	ldrh	r2, [r2, #10]
 801379e:	fbb3 f3f2 	udiv	r3, r3, r2
 80137a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80137a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d101      	bne.n	80137ae <find_volume+0x2ca>
 80137aa:	230d      	movs	r3, #13
 80137ac:	e0db      	b.n	8013966 <find_volume+0x482>
		fmt = FS_FAT32;
 80137ae:	2303      	movs	r3, #3
 80137b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80137b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d802      	bhi.n	80137c4 <find_volume+0x2e0>
 80137be:	2302      	movs	r3, #2
 80137c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80137c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d802      	bhi.n	80137d4 <find_volume+0x2f0>
 80137ce:	2301      	movs	r3, #1
 80137d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80137d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d6:	1c9a      	adds	r2, r3, #2
 80137d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137da:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80137dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80137e0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80137e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80137e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137e6:	441a      	add	r2, r3
 80137e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ea:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80137ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80137ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137f0:	441a      	add	r2, r3
 80137f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80137f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	d11e      	bne.n	801383c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80137fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013800:	3334      	adds	r3, #52	@ 0x34
 8013802:	332a      	adds	r3, #42	@ 0x2a
 8013804:	4618      	mov	r0, r3
 8013806:	f7fd fe8b 	bl	8011520 <ld_word>
 801380a:	4603      	mov	r3, r0
 801380c:	2b00      	cmp	r3, #0
 801380e:	d001      	beq.n	8013814 <find_volume+0x330>
 8013810:	230d      	movs	r3, #13
 8013812:	e0a8      	b.n	8013966 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013816:	891b      	ldrh	r3, [r3, #8]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d001      	beq.n	8013820 <find_volume+0x33c>
 801381c:	230d      	movs	r3, #13
 801381e:	e0a2      	b.n	8013966 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013822:	3334      	adds	r3, #52	@ 0x34
 8013824:	332c      	adds	r3, #44	@ 0x2c
 8013826:	4618      	mov	r0, r3
 8013828:	f7fd fe93 	bl	8011552 <ld_dword>
 801382c:	4602      	mov	r2, r0
 801382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013830:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013834:	699b      	ldr	r3, [r3, #24]
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	647b      	str	r3, [r7, #68]	@ 0x44
 801383a:	e01f      	b.n	801387c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801383c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801383e:	891b      	ldrh	r3, [r3, #8]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d101      	bne.n	8013848 <find_volume+0x364>
 8013844:	230d      	movs	r3, #13
 8013846:	e08e      	b.n	8013966 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801384a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801384c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801384e:	441a      	add	r2, r3
 8013850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013852:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013854:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013858:	2b02      	cmp	r3, #2
 801385a:	d103      	bne.n	8013864 <find_volume+0x380>
 801385c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	005b      	lsls	r3, r3, #1
 8013862:	e00a      	b.n	801387a <find_volume+0x396>
 8013864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013866:	699a      	ldr	r2, [r3, #24]
 8013868:	4613      	mov	r3, r2
 801386a:	005b      	lsls	r3, r3, #1
 801386c:	4413      	add	r3, r2
 801386e:	085a      	lsrs	r2, r3, #1
 8013870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	f003 0301 	and.w	r3, r3, #1
 8013878:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801387a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801387c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801387e:	69da      	ldr	r2, [r3, #28]
 8013880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013882:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8013886:	0a5b      	lsrs	r3, r3, #9
 8013888:	429a      	cmp	r2, r3
 801388a:	d201      	bcs.n	8013890 <find_volume+0x3ac>
 801388c:	230d      	movs	r3, #13
 801388e:	e06a      	b.n	8013966 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013892:	f04f 32ff 	mov.w	r2, #4294967295
 8013896:	615a      	str	r2, [r3, #20]
 8013898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389a:	695a      	ldr	r2, [r3, #20]
 801389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80138a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138a2:	2280      	movs	r2, #128	@ 0x80
 80138a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80138a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138aa:	2b03      	cmp	r3, #3
 80138ac:	d149      	bne.n	8013942 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80138ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b0:	3334      	adds	r3, #52	@ 0x34
 80138b2:	3330      	adds	r3, #48	@ 0x30
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7fd fe33 	bl	8011520 <ld_word>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d140      	bne.n	8013942 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80138c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138c2:	3301      	adds	r3, #1
 80138c4:	4619      	mov	r1, r3
 80138c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80138c8:	f7fe f8dc 	bl	8011a84 <move_window>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d137      	bne.n	8013942 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80138d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d4:	2200      	movs	r2, #0
 80138d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80138d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138da:	3334      	adds	r3, #52	@ 0x34
 80138dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fd fe1d 	bl	8011520 <ld_word>
 80138e6:	4603      	mov	r3, r0
 80138e8:	461a      	mov	r2, r3
 80138ea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d127      	bne.n	8013942 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80138f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f4:	3334      	adds	r3, #52	@ 0x34
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fd fe2b 	bl	8011552 <ld_dword>
 80138fc:	4603      	mov	r3, r0
 80138fe:	4a1c      	ldr	r2, [pc, #112]	@ (8013970 <find_volume+0x48c>)
 8013900:	4293      	cmp	r3, r2
 8013902:	d11e      	bne.n	8013942 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013906:	3334      	adds	r3, #52	@ 0x34
 8013908:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801390c:	4618      	mov	r0, r3
 801390e:	f7fd fe20 	bl	8011552 <ld_dword>
 8013912:	4603      	mov	r3, r0
 8013914:	4a17      	ldr	r2, [pc, #92]	@ (8013974 <find_volume+0x490>)
 8013916:	4293      	cmp	r3, r2
 8013918:	d113      	bne.n	8013942 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391c:	3334      	adds	r3, #52	@ 0x34
 801391e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013922:	4618      	mov	r0, r3
 8013924:	f7fd fe15 	bl	8011552 <ld_dword>
 8013928:	4602      	mov	r2, r0
 801392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801392c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013930:	3334      	adds	r3, #52	@ 0x34
 8013932:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013936:	4618      	mov	r0, r3
 8013938:	f7fd fe0b 	bl	8011552 <ld_dword>
 801393c:	4602      	mov	r2, r0
 801393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013940:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013944:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013948:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801394a:	4b0b      	ldr	r3, [pc, #44]	@ (8013978 <find_volume+0x494>)
 801394c:	881b      	ldrh	r3, [r3, #0]
 801394e:	3301      	adds	r3, #1
 8013950:	b29a      	uxth	r2, r3
 8013952:	4b09      	ldr	r3, [pc, #36]	@ (8013978 <find_volume+0x494>)
 8013954:	801a      	strh	r2, [r3, #0]
 8013956:	4b08      	ldr	r3, [pc, #32]	@ (8013978 <find_volume+0x494>)
 8013958:	881a      	ldrh	r2, [r3, #0]
 801395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801395e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013960:	f7fe f828 	bl	80119b4 <clear_lock>
#endif
	return FR_OK;
 8013964:	2300      	movs	r3, #0
}
 8013966:	4618      	mov	r0, r3
 8013968:	3758      	adds	r7, #88	@ 0x58
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	41615252 	.word	0x41615252
 8013974:	61417272 	.word	0x61417272
 8013978:	20000d80 	.word	0x20000d80

0801397c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b084      	sub	sp, #16
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013986:	2309      	movs	r3, #9
 8013988:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d01c      	beq.n	80139ca <validate+0x4e>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d018      	beq.n	80139ca <validate+0x4e>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d013      	beq.n	80139ca <validate+0x4e>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	889a      	ldrh	r2, [r3, #4]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	88db      	ldrh	r3, [r3, #6]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d10c      	bne.n	80139ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	4618      	mov	r0, r3
 80139b8:	f7fd fd12 	bl	80113e0 <disk_status>
 80139bc:	4603      	mov	r3, r0
 80139be:	f003 0301 	and.w	r3, r3, #1
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d101      	bne.n	80139ca <validate+0x4e>
			res = FR_OK;
 80139c6:	2300      	movs	r3, #0
 80139c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80139ca:	7bfb      	ldrb	r3, [r7, #15]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d102      	bne.n	80139d6 <validate+0x5a>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	e000      	b.n	80139d8 <validate+0x5c>
 80139d6:	2300      	movs	r3, #0
 80139d8:	683a      	ldr	r2, [r7, #0]
 80139da:	6013      	str	r3, [r2, #0]
	return res;
 80139dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3710      	adds	r7, #16
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
	...

080139e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b088      	sub	sp, #32
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	4613      	mov	r3, r2
 80139f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80139fa:	f107 0310 	add.w	r3, r7, #16
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7ff fcd5 	bl	80133ae <get_ldnumber>
 8013a04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	da01      	bge.n	8013a10 <f_mount+0x28>
 8013a0c:	230b      	movs	r3, #11
 8013a0e:	e02b      	b.n	8013a68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013a10:	4a17      	ldr	r2, [pc, #92]	@ (8013a70 <f_mount+0x88>)
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d005      	beq.n	8013a2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013a20:	69b8      	ldr	r0, [r7, #24]
 8013a22:	f7fd ffc7 	bl	80119b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d002      	beq.n	8013a38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2200      	movs	r2, #0
 8013a36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	490d      	ldr	r1, [pc, #52]	@ (8013a70 <f_mount+0x88>)
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d002      	beq.n	8013a4e <f_mount+0x66>
 8013a48:	79fb      	ldrb	r3, [r7, #7]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d001      	beq.n	8013a52 <f_mount+0x6a>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	e00a      	b.n	8013a68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013a52:	f107 010c 	add.w	r1, r7, #12
 8013a56:	f107 0308 	add.w	r3, r7, #8
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7ff fd41 	bl	80134e4 <find_volume>
 8013a62:	4603      	mov	r3, r0
 8013a64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3720      	adds	r7, #32
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	20000d7c 	.word	0x20000d7c

08013a74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b09a      	sub	sp, #104	@ 0x68
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	4613      	mov	r3, r2
 8013a80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d101      	bne.n	8013a8c <f_open+0x18>
 8013a88:	2309      	movs	r3, #9
 8013a8a:	e1b9      	b.n	8013e00 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013a8c:	79fb      	ldrb	r3, [r7, #7]
 8013a8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013a94:	79fa      	ldrb	r2, [r7, #7]
 8013a96:	f107 0110 	add.w	r1, r7, #16
 8013a9a:	f107 0308 	add.w	r3, r7, #8
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7ff fd20 	bl	80134e4 <find_volume>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8013aaa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f040 819d 	bne.w	8013dee <f_open+0x37a>
		dj.obj.fs = fs;
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8013ab8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013abc:	f001 f898 	bl	8014bf0 <ff_memalloc>
 8013ac0:	65b8      	str	r0, [r7, #88]	@ 0x58
 8013ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d101      	bne.n	8013acc <f_open+0x58>
 8013ac8:	2311      	movs	r3, #17
 8013aca:	e199      	b.n	8013e00 <f_open+0x38c>
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013ad0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ad2:	68ba      	ldr	r2, [r7, #8]
 8013ad4:	f107 0314 	add.w	r3, r7, #20
 8013ad8:	4611      	mov	r1, r2
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7ff fbf6 	bl	80132cc <follow_path>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013ae6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d118      	bne.n	8013b20 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013aee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013af2:	b25b      	sxtb	r3, r3
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	da03      	bge.n	8013b00 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8013af8:	2306      	movs	r3, #6
 8013afa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013afe:	e00f      	b.n	8013b20 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013b00:	79fb      	ldrb	r3, [r7, #7]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	bf8c      	ite	hi
 8013b06:	2301      	movhi	r3, #1
 8013b08:	2300      	movls	r3, #0
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	f107 0314 	add.w	r3, r7, #20
 8013b12:	4611      	mov	r1, r2
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fd fe05 	bl	8011724 <chk_lock>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013b20:	79fb      	ldrb	r3, [r7, #7]
 8013b22:	f003 031c 	and.w	r3, r3, #28
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d07f      	beq.n	8013c2a <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8013b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d017      	beq.n	8013b62 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013b32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013b36:	2b04      	cmp	r3, #4
 8013b38:	d10e      	bne.n	8013b58 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013b3a:	f7fd fe4f 	bl	80117dc <enq_lock>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d006      	beq.n	8013b52 <f_open+0xde>
 8013b44:	f107 0314 	add.w	r3, r7, #20
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7ff f831 	bl	8012bb0 <dir_register>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	e000      	b.n	8013b54 <f_open+0xe0>
 8013b52:	2312      	movs	r3, #18
 8013b54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013b58:	79fb      	ldrb	r3, [r7, #7]
 8013b5a:	f043 0308 	orr.w	r3, r3, #8
 8013b5e:	71fb      	strb	r3, [r7, #7]
 8013b60:	e010      	b.n	8013b84 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013b62:	7ebb      	ldrb	r3, [r7, #26]
 8013b64:	f003 0311 	and.w	r3, r3, #17
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d003      	beq.n	8013b74 <f_open+0x100>
					res = FR_DENIED;
 8013b6c:	2307      	movs	r3, #7
 8013b6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013b72:	e007      	b.n	8013b84 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013b74:	79fb      	ldrb	r3, [r7, #7]
 8013b76:	f003 0304 	and.w	r3, r3, #4
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d002      	beq.n	8013b84 <f_open+0x110>
 8013b7e:	2308      	movs	r3, #8
 8013b80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013b84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d168      	bne.n	8013c5e <f_open+0x1ea>
 8013b8c:	79fb      	ldrb	r3, [r7, #7]
 8013b8e:	f003 0308 	and.w	r3, r3, #8
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d063      	beq.n	8013c5e <f_open+0x1ea>
				dw = GET_FATTIME();
 8013b96:	f7fc fcb7 	bl	8010508 <get_fattime>
 8013b9a:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b9e:	330e      	adds	r3, #14
 8013ba0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7fd fd13 	bl	80115ce <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013baa:	3316      	adds	r3, #22
 8013bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fd fd0d 	bl	80115ce <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bb6:	330b      	adds	r3, #11
 8013bb8:	2220      	movs	r2, #32
 8013bba:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bc0:	4611      	mov	r1, r2
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fe fc62 	bl	801248c <ld_clust>
 8013bc8:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013bce:	2200      	movs	r2, #0
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fe fc7a 	bl	80124ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bd8:	331c      	adds	r3, #28
 8013bda:	2100      	movs	r1, #0
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fd fcf6 	bl	80115ce <st_dword>
					fs->wflag = 1;
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	2201      	movs	r2, #1
 8013be6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d037      	beq.n	8013c5e <f_open+0x1ea>
						dw = fs->winsect;
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bf2:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8013bf4:	f107 0314 	add.w	r3, r7, #20
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fe f98d 	bl	8011f1c <remove_chain>
 8013c02:	4603      	mov	r3, r0
 8013c04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013c08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d126      	bne.n	8013c5e <f_open+0x1ea>
							res = move_window(fs, dw);
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fd ff35 	bl	8011a84 <move_window>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013c24:	3a01      	subs	r2, #1
 8013c26:	611a      	str	r2, [r3, #16]
 8013c28:	e019      	b.n	8013c5e <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013c2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d115      	bne.n	8013c5e <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013c32:	7ebb      	ldrb	r3, [r7, #26]
 8013c34:	f003 0310 	and.w	r3, r3, #16
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d003      	beq.n	8013c44 <f_open+0x1d0>
					res = FR_NO_FILE;
 8013c3c:	2304      	movs	r3, #4
 8013c3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013c42:	e00c      	b.n	8013c5e <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013c44:	79fb      	ldrb	r3, [r7, #7]
 8013c46:	f003 0302 	and.w	r3, r3, #2
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d007      	beq.n	8013c5e <f_open+0x1ea>
 8013c4e:	7ebb      	ldrb	r3, [r7, #26]
 8013c50:	f003 0301 	and.w	r3, r3, #1
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d002      	beq.n	8013c5e <f_open+0x1ea>
						res = FR_DENIED;
 8013c58:	2307      	movs	r3, #7
 8013c5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013c5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d126      	bne.n	8013cb4 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013c66:	79fb      	ldrb	r3, [r7, #7]
 8013c68:	f003 0308 	and.w	r3, r3, #8
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d003      	beq.n	8013c78 <f_open+0x204>
				mode |= FA_MODIFIED;
 8013c70:	79fb      	ldrb	r3, [r7, #7]
 8013c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c76:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013c80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013c86:	79fb      	ldrb	r3, [r7, #7]
 8013c88:	2b01      	cmp	r3, #1
 8013c8a:	bf8c      	ite	hi
 8013c8c:	2301      	movhi	r3, #1
 8013c8e:	2300      	movls	r3, #0
 8013c90:	b2db      	uxtb	r3, r3
 8013c92:	461a      	mov	r2, r3
 8013c94:	f107 0314 	add.w	r3, r7, #20
 8013c98:	4611      	mov	r1, r2
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7fd fdc0 	bl	8011820 <inc_lock>
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	691b      	ldr	r3, [r3, #16]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d102      	bne.n	8013cb4 <f_open+0x240>
 8013cae:	2302      	movs	r3, #2
 8013cb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013cb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f040 8095 	bne.w	8013de8 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fe fbe1 	bl	801248c <ld_clust>
 8013cca:	4602      	mov	r2, r0
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cd2:	331c      	adds	r3, #28
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fd fc3c 	bl	8011552 <ld_dword>
 8013cda:	4602      	mov	r2, r0
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013ce6:	693a      	ldr	r2, [r7, #16]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	88da      	ldrh	r2, [r3, #6]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	79fa      	ldrb	r2, [r7, #7]
 8013cf8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	2200      	movs	r2, #0
 8013d04:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	3330      	adds	r3, #48	@ 0x30
 8013d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d14:	2100      	movs	r1, #0
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7fd fca6 	bl	8011668 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013d1c:	79fb      	ldrb	r3, [r7, #7]
 8013d1e:	f003 0320 	and.w	r3, r3, #32
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d060      	beq.n	8013de8 <f_open+0x374>
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d05c      	beq.n	8013de8 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	68da      	ldr	r2, [r3, #12]
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	895b      	ldrh	r3, [r3, #10]
 8013d3a:	025b      	lsls	r3, r3, #9
 8013d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	689b      	ldr	r3, [r3, #8]
 8013d42:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	68db      	ldr	r3, [r3, #12]
 8013d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d4a:	e016      	b.n	8013d7a <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7fd ff52 	bl	8011bfa <get_fat>
 8013d56:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013d58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d802      	bhi.n	8013d64 <f_open+0x2f0>
 8013d5e:	2302      	movs	r3, #2
 8013d60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013d64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6a:	d102      	bne.n	8013d72 <f_open+0x2fe>
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013d72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d103      	bne.n	8013d8a <f_open+0x316>
 8013d82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d8e0      	bhi.n	8013d4c <f_open+0x2d8>
				}
				fp->clust = clst;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013d8e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013d90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d127      	bne.n	8013de8 <f_open+0x374>
 8013d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d022      	beq.n	8013de8 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fd ff08 	bl	8011bbc <clust2sect>
 8013dac:	64b8      	str	r0, [r7, #72]	@ 0x48
 8013dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d103      	bne.n	8013dbc <f_open+0x348>
						res = FR_INT_ERR;
 8013db4:	2302      	movs	r3, #2
 8013db6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013dba:	e015      	b.n	8013de8 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dbe:	0a5a      	lsrs	r2, r3, #9
 8013dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dc2:	441a      	add	r2, r3
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	7858      	ldrb	r0, [r3, #1]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	6a1a      	ldr	r2, [r3, #32]
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	f7fd fb44 	bl	8011464 <disk_read>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d002      	beq.n	8013de8 <f_open+0x374>
 8013de2:	2301      	movs	r3, #1
 8013de4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013de8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013dea:	f000 ff0d 	bl	8014c08 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013dee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d002      	beq.n	8013dfc <f_open+0x388>
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013dfc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3768      	adds	r7, #104	@ 0x68
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08c      	sub	sp, #48	@ 0x30
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	607a      	str	r2, [r7, #4]
 8013e14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f107 0210 	add.w	r2, r7, #16
 8013e26:	4611      	mov	r1, r2
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7ff fda7 	bl	801397c <validate>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013e34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d107      	bne.n	8013e4c <f_write+0x44>
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	7d5b      	ldrb	r3, [r3, #21]
 8013e40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d002      	beq.n	8013e52 <f_write+0x4a>
 8013e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e50:	e14b      	b.n	80140ea <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	7d1b      	ldrb	r3, [r3, #20]
 8013e56:	f003 0302 	and.w	r3, r3, #2
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d101      	bne.n	8013e62 <f_write+0x5a>
 8013e5e:	2307      	movs	r3, #7
 8013e60:	e143      	b.n	80140ea <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	699a      	ldr	r2, [r3, #24]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	441a      	add	r2, r3
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	699b      	ldr	r3, [r3, #24]
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	f080 812d 	bcs.w	80140ce <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	699b      	ldr	r3, [r3, #24]
 8013e78:	43db      	mvns	r3, r3
 8013e7a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013e7c:	e127      	b.n	80140ce <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	699b      	ldr	r3, [r3, #24]
 8013e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	f040 80e3 	bne.w	8014052 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	699b      	ldr	r3, [r3, #24]
 8013e90:	0a5b      	lsrs	r3, r3, #9
 8013e92:	693a      	ldr	r2, [r7, #16]
 8013e94:	8952      	ldrh	r2, [r2, #10]
 8013e96:	3a01      	subs	r2, #1
 8013e98:	4013      	ands	r3, r2
 8013e9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d143      	bne.n	8013f2a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	699b      	ldr	r3, [r3, #24]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d10c      	bne.n	8013ec4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	689b      	ldr	r3, [r3, #8]
 8013eae:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d11a      	bne.n	8013eec <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2100      	movs	r1, #0
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fe f893 	bl	8011fe6 <create_chain>
 8013ec0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013ec2:	e013      	b.n	8013eec <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d007      	beq.n	8013edc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	699b      	ldr	r3, [r3, #24]
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f7fe f91f 	bl	8012116 <clmt_clust>
 8013ed8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013eda:	e007      	b.n	8013eec <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013edc:	68fa      	ldr	r2, [r7, #12]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	69db      	ldr	r3, [r3, #28]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	f7fe f87e 	bl	8011fe6 <create_chain>
 8013eea:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	f000 80f2 	beq.w	80140d8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ef6:	2b01      	cmp	r3, #1
 8013ef8:	d104      	bne.n	8013f04 <f_write+0xfc>
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2202      	movs	r2, #2
 8013efe:	755a      	strb	r2, [r3, #21]
 8013f00:	2302      	movs	r3, #2
 8013f02:	e0f2      	b.n	80140ea <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f0a:	d104      	bne.n	8013f16 <f_write+0x10e>
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2201      	movs	r2, #1
 8013f10:	755a      	strb	r2, [r3, #21]
 8013f12:	2301      	movs	r3, #1
 8013f14:	e0e9      	b.n	80140ea <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	689b      	ldr	r3, [r3, #8]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d102      	bne.n	8013f2a <f_write+0x122>
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	7d1b      	ldrb	r3, [r3, #20]
 8013f2e:	b25b      	sxtb	r3, r3
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	da18      	bge.n	8013f66 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	7858      	ldrb	r0, [r3, #1]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6a1a      	ldr	r2, [r3, #32]
 8013f42:	2301      	movs	r3, #1
 8013f44:	f7fd faae 	bl	80114a4 <disk_write>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d004      	beq.n	8013f58 <f_write+0x150>
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2201      	movs	r2, #1
 8013f52:	755a      	strb	r2, [r3, #21]
 8013f54:	2301      	movs	r3, #1
 8013f56:	e0c8      	b.n	80140ea <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	7d1b      	ldrb	r3, [r3, #20]
 8013f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f60:	b2da      	uxtb	r2, r3
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013f66:	693a      	ldr	r2, [r7, #16]
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	69db      	ldr	r3, [r3, #28]
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	4610      	mov	r0, r2
 8013f70:	f7fd fe24 	bl	8011bbc <clust2sect>
 8013f74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d104      	bne.n	8013f86 <f_write+0x17e>
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2202      	movs	r2, #2
 8013f80:	755a      	strb	r2, [r3, #21]
 8013f82:	2302      	movs	r3, #2
 8013f84:	e0b1      	b.n	80140ea <f_write+0x2e2>
			sect += csect;
 8013f86:	697a      	ldr	r2, [r7, #20]
 8013f88:	69bb      	ldr	r3, [r7, #24]
 8013f8a:	4413      	add	r3, r2
 8013f8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	0a5b      	lsrs	r3, r3, #9
 8013f92:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013f94:	6a3b      	ldr	r3, [r7, #32]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d03c      	beq.n	8014014 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013f9a:	69ba      	ldr	r2, [r7, #24]
 8013f9c:	6a3b      	ldr	r3, [r7, #32]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	693a      	ldr	r2, [r7, #16]
 8013fa2:	8952      	ldrh	r2, [r2, #10]
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d905      	bls.n	8013fb4 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	895b      	ldrh	r3, [r3, #10]
 8013fac:	461a      	mov	r2, r3
 8013fae:	69bb      	ldr	r3, [r7, #24]
 8013fb0:	1ad3      	subs	r3, r2, r3
 8013fb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	7858      	ldrb	r0, [r3, #1]
 8013fb8:	6a3b      	ldr	r3, [r7, #32]
 8013fba:	697a      	ldr	r2, [r7, #20]
 8013fbc:	69f9      	ldr	r1, [r7, #28]
 8013fbe:	f7fd fa71 	bl	80114a4 <disk_write>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d004      	beq.n	8013fd2 <f_write+0x1ca>
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2201      	movs	r2, #1
 8013fcc:	755a      	strb	r2, [r3, #21]
 8013fce:	2301      	movs	r3, #1
 8013fd0:	e08b      	b.n	80140ea <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6a1a      	ldr	r2, [r3, #32]
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	1ad3      	subs	r3, r2, r3
 8013fda:	6a3a      	ldr	r2, [r7, #32]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d915      	bls.n	801400c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6a1a      	ldr	r2, [r3, #32]
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	025b      	lsls	r3, r3, #9
 8013ff0:	69fa      	ldr	r2, [r7, #28]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	f7fd fb14 	bl	8011626 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	7d1b      	ldrb	r3, [r3, #20]
 8014002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014006:	b2da      	uxtb	r2, r3
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801400c:	6a3b      	ldr	r3, [r7, #32]
 801400e:	025b      	lsls	r3, r3, #9
 8014010:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014012:	e03f      	b.n	8014094 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	6a1b      	ldr	r3, [r3, #32]
 8014018:	697a      	ldr	r2, [r7, #20]
 801401a:	429a      	cmp	r2, r3
 801401c:	d016      	beq.n	801404c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	699a      	ldr	r2, [r3, #24]
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014026:	429a      	cmp	r2, r3
 8014028:	d210      	bcs.n	801404c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	7858      	ldrb	r0, [r3, #1]
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014034:	2301      	movs	r3, #1
 8014036:	697a      	ldr	r2, [r7, #20]
 8014038:	f7fd fa14 	bl	8011464 <disk_read>
 801403c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801403e:	2b00      	cmp	r3, #0
 8014040:	d004      	beq.n	801404c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	2201      	movs	r2, #1
 8014046:	755a      	strb	r2, [r3, #21]
 8014048:	2301      	movs	r3, #1
 801404a:	e04e      	b.n	80140ea <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	697a      	ldr	r2, [r7, #20]
 8014050:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	699b      	ldr	r3, [r3, #24]
 8014056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801405a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801405e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	429a      	cmp	r2, r3
 8014066:	d901      	bls.n	801406c <f_write+0x264>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	699b      	ldr	r3, [r3, #24]
 8014076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801407a:	4413      	add	r3, r2
 801407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801407e:	69f9      	ldr	r1, [r7, #28]
 8014080:	4618      	mov	r0, r3
 8014082:	f7fd fad0 	bl	8011626 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	7d1b      	ldrb	r3, [r3, #20]
 801408a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801408e:	b2da      	uxtb	r2, r3
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014094:	69fa      	ldr	r2, [r7, #28]
 8014096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014098:	4413      	add	r3, r2
 801409a:	61fb      	str	r3, [r7, #28]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	699a      	ldr	r2, [r3, #24]
 80140a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a2:	441a      	add	r2, r3
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	619a      	str	r2, [r3, #24]
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	68da      	ldr	r2, [r3, #12]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	699b      	ldr	r3, [r3, #24]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	bf38      	it	cc
 80140b4:	461a      	movcc	r2, r3
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	60da      	str	r2, [r3, #12]
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c0:	441a      	add	r2, r3
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	601a      	str	r2, [r3, #0]
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f47f aed4 	bne.w	8013e7e <f_write+0x76>
 80140d6:	e000      	b.n	80140da <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80140d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	7d1b      	ldrb	r3, [r3, #20]
 80140de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140e2:	b2da      	uxtb	r2, r3
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80140e8:	2300      	movs	r3, #0
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	3730      	adds	r7, #48	@ 0x30
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}

080140f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80140f2:	b580      	push	{r7, lr}
 80140f4:	b086      	sub	sp, #24
 80140f6:	af00      	add	r7, sp, #0
 80140f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f107 0208 	add.w	r2, r7, #8
 8014100:	4611      	mov	r1, r2
 8014102:	4618      	mov	r0, r3
 8014104:	f7ff fc3a 	bl	801397c <validate>
 8014108:	4603      	mov	r3, r0
 801410a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801410c:	7dfb      	ldrb	r3, [r7, #23]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d168      	bne.n	80141e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	7d1b      	ldrb	r3, [r3, #20]
 8014116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801411a:	2b00      	cmp	r3, #0
 801411c:	d062      	beq.n	80141e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	7d1b      	ldrb	r3, [r3, #20]
 8014122:	b25b      	sxtb	r3, r3
 8014124:	2b00      	cmp	r3, #0
 8014126:	da15      	bge.n	8014154 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	7858      	ldrb	r0, [r3, #1]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a1a      	ldr	r2, [r3, #32]
 8014136:	2301      	movs	r3, #1
 8014138:	f7fd f9b4 	bl	80114a4 <disk_write>
 801413c:	4603      	mov	r3, r0
 801413e:	2b00      	cmp	r3, #0
 8014140:	d001      	beq.n	8014146 <f_sync+0x54>
 8014142:	2301      	movs	r3, #1
 8014144:	e04f      	b.n	80141e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	7d1b      	ldrb	r3, [r3, #20]
 801414a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801414e:	b2da      	uxtb	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014154:	f7fc f9d8 	bl	8010508 <get_fattime>
 8014158:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014160:	4619      	mov	r1, r3
 8014162:	4610      	mov	r0, r2
 8014164:	f7fd fc8e 	bl	8011a84 <move_window>
 8014168:	4603      	mov	r3, r0
 801416a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801416c:	7dfb      	ldrb	r3, [r7, #23]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d138      	bne.n	80141e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014176:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	330b      	adds	r3, #11
 801417c:	781a      	ldrb	r2, [r3, #0]
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	330b      	adds	r3, #11
 8014182:	f042 0220 	orr.w	r2, r2, #32
 8014186:	b2d2      	uxtb	r2, r2
 8014188:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6818      	ldr	r0, [r3, #0]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	461a      	mov	r2, r3
 8014194:	68f9      	ldr	r1, [r7, #12]
 8014196:	f7fe f998 	bl	80124ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	f103 021c 	add.w	r2, r3, #28
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	68db      	ldr	r3, [r3, #12]
 80141a4:	4619      	mov	r1, r3
 80141a6:	4610      	mov	r0, r2
 80141a8:	f7fd fa11 	bl	80115ce <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	3316      	adds	r3, #22
 80141b0:	6939      	ldr	r1, [r7, #16]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fd fa0b 	bl	80115ce <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	3312      	adds	r3, #18
 80141bc:	2100      	movs	r1, #0
 80141be:	4618      	mov	r0, r3
 80141c0:	f7fd f9ea 	bl	8011598 <st_word>
					fs->wflag = 1;
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	2201      	movs	r2, #1
 80141c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fd fc87 	bl	8011ae0 <sync_fs>
 80141d2:	4603      	mov	r3, r0
 80141d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	7d1b      	ldrb	r3, [r3, #20]
 80141da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80141de:	b2da      	uxtb	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80141e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3718      	adds	r7, #24
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}

080141ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80141ee:	b580      	push	{r7, lr}
 80141f0:	b084      	sub	sp, #16
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff ff7b 	bl	80140f2 <f_sync>
 80141fc:	4603      	mov	r3, r0
 80141fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014200:	7bfb      	ldrb	r3, [r7, #15]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d118      	bne.n	8014238 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f107 0208 	add.w	r2, r7, #8
 801420c:	4611      	mov	r1, r2
 801420e:	4618      	mov	r0, r3
 8014210:	f7ff fbb4 	bl	801397c <validate>
 8014214:	4603      	mov	r3, r0
 8014216:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014218:	7bfb      	ldrb	r3, [r7, #15]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d10c      	bne.n	8014238 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	691b      	ldr	r3, [r3, #16]
 8014222:	4618      	mov	r0, r3
 8014224:	f7fd fb8a 	bl	801193c <dec_lock>
 8014228:	4603      	mov	r3, r0
 801422a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801422c:	7bfb      	ldrb	r3, [r7, #15]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d102      	bne.n	8014238 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	2200      	movs	r2, #0
 8014236:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014238:	7bfb      	ldrb	r3, [r7, #15]
}
 801423a:	4618      	mov	r0, r3
 801423c:	3710      	adds	r7, #16
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014242:	b580      	push	{r7, lr}
 8014244:	b090      	sub	sp, #64	@ 0x40
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
 801424a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f107 0208 	add.w	r2, r7, #8
 8014252:	4611      	mov	r1, r2
 8014254:	4618      	mov	r0, r3
 8014256:	f7ff fb91 	bl	801397c <validate>
 801425a:	4603      	mov	r3, r0
 801425c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014260:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014264:	2b00      	cmp	r3, #0
 8014266:	d103      	bne.n	8014270 <f_lseek+0x2e>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	7d5b      	ldrb	r3, [r3, #21]
 801426c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014270:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014274:	2b00      	cmp	r3, #0
 8014276:	d002      	beq.n	801427e <f_lseek+0x3c>
 8014278:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801427c:	e1e6      	b.n	801464c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014282:	2b00      	cmp	r3, #0
 8014284:	f000 80d1 	beq.w	801442a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801428e:	d15a      	bne.n	8014346 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014294:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014298:	1d1a      	adds	r2, r3, #4
 801429a:	627a      	str	r2, [r7, #36]	@ 0x24
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	617b      	str	r3, [r7, #20]
 80142a0:	2302      	movs	r3, #2
 80142a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	689b      	ldr	r3, [r3, #8]
 80142a8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80142aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d03a      	beq.n	8014326 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80142b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142b2:	613b      	str	r3, [r7, #16]
 80142b4:	2300      	movs	r3, #0
 80142b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ba:	3302      	adds	r3, #2
 80142bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80142be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142c0:	60fb      	str	r3, [r7, #12]
 80142c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c4:	3301      	adds	r3, #1
 80142c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7fd fc94 	bl	8011bfa <get_fat>
 80142d2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80142d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	d804      	bhi.n	80142e4 <f_lseek+0xa2>
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2202      	movs	r2, #2
 80142de:	755a      	strb	r2, [r3, #21]
 80142e0:	2302      	movs	r3, #2
 80142e2:	e1b3      	b.n	801464c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ea:	d104      	bne.n	80142f6 <f_lseek+0xb4>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2201      	movs	r2, #1
 80142f0:	755a      	strb	r2, [r3, #21]
 80142f2:	2301      	movs	r3, #1
 80142f4:	e1aa      	b.n	801464c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	3301      	adds	r3, #1
 80142fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d0de      	beq.n	80142be <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	429a      	cmp	r2, r3
 8014306:	d809      	bhi.n	801431c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801430a:	1d1a      	adds	r2, r3, #4
 801430c:	627a      	str	r2, [r7, #36]	@ 0x24
 801430e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014310:	601a      	str	r2, [r3, #0]
 8014312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014314:	1d1a      	adds	r2, r3, #4
 8014316:	627a      	str	r2, [r7, #36]	@ 0x24
 8014318:	693a      	ldr	r2, [r7, #16]
 801431a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	699b      	ldr	r3, [r3, #24]
 8014320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014322:	429a      	cmp	r2, r3
 8014324:	d3c4      	bcc.n	80142b0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801432a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801432c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801432e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014330:	697b      	ldr	r3, [r7, #20]
 8014332:	429a      	cmp	r2, r3
 8014334:	d803      	bhi.n	801433e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014338:	2200      	movs	r2, #0
 801433a:	601a      	str	r2, [r3, #0]
 801433c:	e184      	b.n	8014648 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801433e:	2311      	movs	r3, #17
 8014340:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014344:	e180      	b.n	8014648 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	68db      	ldr	r3, [r3, #12]
 801434a:	683a      	ldr	r2, [r7, #0]
 801434c:	429a      	cmp	r2, r3
 801434e:	d902      	bls.n	8014356 <f_lseek+0x114>
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	683a      	ldr	r2, [r7, #0]
 801435a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	f000 8172 	beq.w	8014648 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	3b01      	subs	r3, #1
 8014368:	4619      	mov	r1, r3
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7fd fed3 	bl	8012116 <clmt_clust>
 8014370:	4602      	mov	r2, r0
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014376:	68ba      	ldr	r2, [r7, #8]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	69db      	ldr	r3, [r3, #28]
 801437c:	4619      	mov	r1, r3
 801437e:	4610      	mov	r0, r2
 8014380:	f7fd fc1c 	bl	8011bbc <clust2sect>
 8014384:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d104      	bne.n	8014396 <f_lseek+0x154>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2202      	movs	r2, #2
 8014390:	755a      	strb	r2, [r3, #21]
 8014392:	2302      	movs	r3, #2
 8014394:	e15a      	b.n	801464c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	3b01      	subs	r3, #1
 801439a:	0a5b      	lsrs	r3, r3, #9
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	8952      	ldrh	r2, [r2, #10]
 80143a0:	3a01      	subs	r2, #1
 80143a2:	4013      	ands	r3, r2
 80143a4:	69ba      	ldr	r2, [r7, #24]
 80143a6:	4413      	add	r3, r2
 80143a8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	699b      	ldr	r3, [r3, #24]
 80143ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f000 8148 	beq.w	8014648 <f_lseek+0x406>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6a1b      	ldr	r3, [r3, #32]
 80143bc:	69ba      	ldr	r2, [r7, #24]
 80143be:	429a      	cmp	r2, r3
 80143c0:	f000 8142 	beq.w	8014648 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	7d1b      	ldrb	r3, [r3, #20]
 80143c8:	b25b      	sxtb	r3, r3
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	da18      	bge.n	8014400 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	7858      	ldrb	r0, [r3, #1]
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6a1a      	ldr	r2, [r3, #32]
 80143dc:	2301      	movs	r3, #1
 80143de:	f7fd f861 	bl	80114a4 <disk_write>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d004      	beq.n	80143f2 <f_lseek+0x1b0>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2201      	movs	r2, #1
 80143ec:	755a      	strb	r2, [r3, #21]
 80143ee:	2301      	movs	r3, #1
 80143f0:	e12c      	b.n	801464c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	7d1b      	ldrb	r3, [r3, #20]
 80143f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	7858      	ldrb	r0, [r3, #1]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801440a:	2301      	movs	r3, #1
 801440c:	69ba      	ldr	r2, [r7, #24]
 801440e:	f7fd f829 	bl	8011464 <disk_read>
 8014412:	4603      	mov	r3, r0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d004      	beq.n	8014422 <f_lseek+0x1e0>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2201      	movs	r2, #1
 801441c:	755a      	strb	r2, [r3, #21]
 801441e:	2301      	movs	r3, #1
 8014420:	e114      	b.n	801464c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	69ba      	ldr	r2, [r7, #24]
 8014426:	621a      	str	r2, [r3, #32]
 8014428:	e10e      	b.n	8014648 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	683a      	ldr	r2, [r7, #0]
 8014430:	429a      	cmp	r2, r3
 8014432:	d908      	bls.n	8014446 <f_lseek+0x204>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	7d1b      	ldrb	r3, [r3, #20]
 8014438:	f003 0302 	and.w	r3, r3, #2
 801443c:	2b00      	cmp	r3, #0
 801443e:	d102      	bne.n	8014446 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801444c:	2300      	movs	r3, #0
 801444e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014454:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	f000 80a7 	beq.w	80145ac <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	895b      	ldrh	r3, [r3, #10]
 8014462:	025b      	lsls	r3, r3, #9
 8014464:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014466:	6a3b      	ldr	r3, [r7, #32]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d01b      	beq.n	80144a4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	1e5a      	subs	r2, r3, #1
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	fbb2 f2f3 	udiv	r2, r2, r3
 8014476:	6a3b      	ldr	r3, [r7, #32]
 8014478:	1e59      	subs	r1, r3, #1
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014480:	429a      	cmp	r2, r3
 8014482:	d30f      	bcc.n	80144a4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014484:	6a3b      	ldr	r3, [r7, #32]
 8014486:	1e5a      	subs	r2, r3, #1
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	425b      	negs	r3, r3
 801448c:	401a      	ands	r2, r3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	699b      	ldr	r3, [r3, #24]
 8014496:	683a      	ldr	r2, [r7, #0]
 8014498:	1ad3      	subs	r3, r2, r3
 801449a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	69db      	ldr	r3, [r3, #28]
 80144a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80144a2:	e022      	b.n	80144ea <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	689b      	ldr	r3, [r3, #8]
 80144a8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80144aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d119      	bne.n	80144e4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2100      	movs	r1, #0
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fd fd96 	bl	8011fe6 <create_chain>
 80144ba:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80144bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d104      	bne.n	80144cc <f_lseek+0x28a>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2202      	movs	r2, #2
 80144c6:	755a      	strb	r2, [r3, #21]
 80144c8:	2302      	movs	r3, #2
 80144ca:	e0bf      	b.n	801464c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144d2:	d104      	bne.n	80144de <f_lseek+0x29c>
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2201      	movs	r2, #1
 80144d8:	755a      	strb	r2, [r3, #21]
 80144da:	2301      	movs	r3, #1
 80144dc:	e0b6      	b.n	801464c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144e2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144e8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80144ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d05d      	beq.n	80145ac <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80144f0:	e03a      	b.n	8014568 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	603b      	str	r3, [r7, #0]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	699a      	ldr	r2, [r3, #24]
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	441a      	add	r2, r3
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	7d1b      	ldrb	r3, [r3, #20]
 801450a:	f003 0302 	and.w	r3, r3, #2
 801450e:	2b00      	cmp	r3, #0
 8014510:	d00b      	beq.n	801452a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014516:	4618      	mov	r0, r3
 8014518:	f7fd fd65 	bl	8011fe6 <create_chain>
 801451c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014520:	2b00      	cmp	r3, #0
 8014522:	d108      	bne.n	8014536 <f_lseek+0x2f4>
							ofs = 0; break;
 8014524:	2300      	movs	r3, #0
 8014526:	603b      	str	r3, [r7, #0]
 8014528:	e022      	b.n	8014570 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801452e:	4618      	mov	r0, r3
 8014530:	f7fd fb63 	bl	8011bfa <get_fat>
 8014534:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801453c:	d104      	bne.n	8014548 <f_lseek+0x306>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	755a      	strb	r2, [r3, #21]
 8014544:	2301      	movs	r3, #1
 8014546:	e081      	b.n	801464c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454a:	2b01      	cmp	r3, #1
 801454c:	d904      	bls.n	8014558 <f_lseek+0x316>
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	699b      	ldr	r3, [r3, #24]
 8014552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014554:	429a      	cmp	r2, r3
 8014556:	d304      	bcc.n	8014562 <f_lseek+0x320>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2202      	movs	r2, #2
 801455c:	755a      	strb	r2, [r3, #21]
 801455e:	2302      	movs	r3, #2
 8014560:	e074      	b.n	801464c <f_lseek+0x40a>
					fp->clust = clst;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014566:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014568:	683a      	ldr	r2, [r7, #0]
 801456a:	69fb      	ldr	r3, [r7, #28]
 801456c:	429a      	cmp	r2, r3
 801456e:	d8c0      	bhi.n	80144f2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	699a      	ldr	r2, [r3, #24]
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	441a      	add	r2, r3
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014582:	2b00      	cmp	r3, #0
 8014584:	d012      	beq.n	80145ac <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801458a:	4618      	mov	r0, r3
 801458c:	f7fd fb16 	bl	8011bbc <clust2sect>
 8014590:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014594:	2b00      	cmp	r3, #0
 8014596:	d104      	bne.n	80145a2 <f_lseek+0x360>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2202      	movs	r2, #2
 801459c:	755a      	strb	r2, [r3, #21]
 801459e:	2302      	movs	r3, #2
 80145a0:	e054      	b.n	801464c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	0a5b      	lsrs	r3, r3, #9
 80145a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80145a8:	4413      	add	r3, r2
 80145aa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	699a      	ldr	r2, [r3, #24]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	68db      	ldr	r3, [r3, #12]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d90a      	bls.n	80145ce <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	699a      	ldr	r2, [r3, #24]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	7d1b      	ldrb	r3, [r3, #20]
 80145c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	699b      	ldr	r3, [r3, #24]
 80145d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d036      	beq.n	8014648 <f_lseek+0x406>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6a1b      	ldr	r3, [r3, #32]
 80145de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d031      	beq.n	8014648 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	7d1b      	ldrb	r3, [r3, #20]
 80145e8:	b25b      	sxtb	r3, r3
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	da18      	bge.n	8014620 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	7858      	ldrb	r0, [r3, #1]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6a1a      	ldr	r2, [r3, #32]
 80145fc:	2301      	movs	r3, #1
 80145fe:	f7fc ff51 	bl	80114a4 <disk_write>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d004      	beq.n	8014612 <f_lseek+0x3d0>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2201      	movs	r2, #1
 801460c:	755a      	strb	r2, [r3, #21]
 801460e:	2301      	movs	r3, #1
 8014610:	e01c      	b.n	801464c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	7d1b      	ldrb	r3, [r3, #20]
 8014616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801461a:	b2da      	uxtb	r2, r3
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	7858      	ldrb	r0, [r3, #1]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801462a:	2301      	movs	r3, #1
 801462c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801462e:	f7fc ff19 	bl	8011464 <disk_read>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d004      	beq.n	8014642 <f_lseek+0x400>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2201      	movs	r2, #1
 801463c:	755a      	strb	r2, [r3, #21]
 801463e:	2301      	movs	r3, #1
 8014640:	e004      	b.n	801464c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014646:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014648:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801464c:	4618      	mov	r0, r3
 801464e:	3740      	adds	r7, #64	@ 0x40
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d101      	bne.n	8014668 <f_opendir+0x14>
 8014664:	2309      	movs	r3, #9
 8014666:	e074      	b.n	8014752 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801466c:	f107 0108 	add.w	r1, r7, #8
 8014670:	463b      	mov	r3, r7
 8014672:	2200      	movs	r2, #0
 8014674:	4618      	mov	r0, r3
 8014676:	f7fe ff35 	bl	80134e4 <find_volume>
 801467a:	4603      	mov	r3, r0
 801467c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801467e:	7dfb      	ldrb	r3, [r7, #23]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d15f      	bne.n	8014744 <f_opendir+0xf0>
		obj->fs = fs;
 8014684:	68ba      	ldr	r2, [r7, #8]
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 801468a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801468e:	f000 faaf 	bl	8014bf0 <ff_memalloc>
 8014692:	60f8      	str	r0, [r7, #12]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d101      	bne.n	801469e <f_opendir+0x4a>
 801469a:	2311      	movs	r3, #17
 801469c:	e059      	b.n	8014752 <f_opendir+0xfe>
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	68fa      	ldr	r2, [r7, #12]
 80146a2:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	4619      	mov	r1, r3
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7fe fe0f 	bl	80132cc <follow_path>
 80146ae:	4603      	mov	r3, r0
 80146b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80146b2:	7dfb      	ldrb	r3, [r7, #23]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d13d      	bne.n	8014734 <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80146be:	b25b      	sxtb	r3, r3
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	db12      	blt.n	80146ea <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	799b      	ldrb	r3, [r3, #6]
 80146c8:	f003 0310 	and.w	r3, r3, #16
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d00a      	beq.n	80146e6 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80146d0:	68ba      	ldr	r2, [r7, #8]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a1b      	ldr	r3, [r3, #32]
 80146d6:	4619      	mov	r1, r3
 80146d8:	4610      	mov	r0, r2
 80146da:	f7fd fed7 	bl	801248c <ld_clust>
 80146de:	4602      	mov	r2, r0
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	609a      	str	r2, [r3, #8]
 80146e4:	e001      	b.n	80146ea <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80146e6:	2305      	movs	r3, #5
 80146e8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80146ea:	7dfb      	ldrb	r3, [r7, #23]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d121      	bne.n	8014734 <f_opendir+0xe0>
				obj->id = fs->id;
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	88da      	ldrh	r2, [r3, #6]
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80146f8:	2100      	movs	r1, #0
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f7fd fd3f 	bl	801217e <dir_sdi>
 8014700:	4603      	mov	r3, r0
 8014702:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014704:	7dfb      	ldrb	r3, [r7, #23]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d114      	bne.n	8014734 <f_opendir+0xe0>
					if (obj->sclust) {
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	689b      	ldr	r3, [r3, #8]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d00d      	beq.n	801472e <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014712:	2100      	movs	r1, #0
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7fd f883 	bl	8011820 <inc_lock>
 801471a:	4602      	mov	r2, r0
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	691b      	ldr	r3, [r3, #16]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d105      	bne.n	8014734 <f_opendir+0xe0>
 8014728:	2312      	movs	r3, #18
 801472a:	75fb      	strb	r3, [r7, #23]
 801472c:	e002      	b.n	8014734 <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	2200      	movs	r2, #0
 8014732:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8014734:	68f8      	ldr	r0, [r7, #12]
 8014736:	f000 fa67 	bl	8014c08 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801473a:	7dfb      	ldrb	r3, [r7, #23]
 801473c:	2b04      	cmp	r3, #4
 801473e:	d101      	bne.n	8014744 <f_opendir+0xf0>
 8014740:	2305      	movs	r3, #5
 8014742:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014744:	7dfb      	ldrb	r3, [r7, #23]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d002      	beq.n	8014750 <f_opendir+0xfc>
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	2200      	movs	r2, #0
 801474e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014750:	7dfb      	ldrb	r3, [r7, #23]
}
 8014752:	4618      	mov	r0, r3
 8014754:	3718      	adds	r7, #24
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}

0801475a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801475a:	b580      	push	{r7, lr}
 801475c:	b084      	sub	sp, #16
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f107 0208 	add.w	r2, r7, #8
 8014768:	4611      	mov	r1, r2
 801476a:	4618      	mov	r0, r3
 801476c:	f7ff f906 	bl	801397c <validate>
 8014770:	4603      	mov	r3, r0
 8014772:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014774:	7bfb      	ldrb	r3, [r7, #15]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d110      	bne.n	801479c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	691b      	ldr	r3, [r3, #16]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d006      	beq.n	8014790 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	691b      	ldr	r3, [r3, #16]
 8014786:	4618      	mov	r0, r3
 8014788:	f7fd f8d8 	bl	801193c <dec_lock>
 801478c:	4603      	mov	r3, r0
 801478e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014790:	7bfb      	ldrb	r3, [r7, #15]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d102      	bne.n	801479c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2200      	movs	r2, #0
 801479a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801479c:	7bfb      	ldrb	r3, [r7, #15]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b086      	sub	sp, #24
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
 80147ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f107 020c 	add.w	r2, r7, #12
 80147b6:	4611      	mov	r1, r2
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7ff f8df 	bl	801397c <validate>
 80147be:	4603      	mov	r3, r0
 80147c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80147c2:	7dfb      	ldrb	r3, [r7, #23]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d136      	bne.n	8014836 <f_readdir+0x90>
		if (!fno) {
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d106      	bne.n	80147dc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80147ce:	2100      	movs	r1, #0
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7fd fcd4 	bl	801217e <dir_sdi>
 80147d6:	4603      	mov	r3, r0
 80147d8:	75fb      	strb	r3, [r7, #23]
 80147da:	e02c      	b.n	8014836 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 80147dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80147e0:	f000 fa06 	bl	8014bf0 <ff_memalloc>
 80147e4:	6138      	str	r0, [r7, #16]
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d101      	bne.n	80147f0 <f_readdir+0x4a>
 80147ec:	2311      	movs	r3, #17
 80147ee:	e023      	b.n	8014838 <f_readdir+0x92>
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	693a      	ldr	r2, [r7, #16]
 80147f4:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 80147f6:	2100      	movs	r1, #0
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f7fe f872 	bl	80128e2 <dir_read>
 80147fe:	4603      	mov	r3, r0
 8014800:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014802:	7dfb      	ldrb	r3, [r7, #23]
 8014804:	2b04      	cmp	r3, #4
 8014806:	d101      	bne.n	801480c <f_readdir+0x66>
 8014808:	2300      	movs	r3, #0
 801480a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 801480c:	7dfb      	ldrb	r3, [r7, #23]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d10e      	bne.n	8014830 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014812:	6839      	ldr	r1, [r7, #0]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7fe fac3 	bl	8012da0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801481a:	2100      	movs	r1, #0
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f7fd fd29 	bl	8012274 <dir_next>
 8014822:	4603      	mov	r3, r0
 8014824:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014826:	7dfb      	ldrb	r3, [r7, #23]
 8014828:	2b04      	cmp	r3, #4
 801482a:	d101      	bne.n	8014830 <f_readdir+0x8a>
 801482c:	2300      	movs	r3, #0
 801482e:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8014830:	6938      	ldr	r0, [r7, #16]
 8014832:	f000 f9e9 	bl	8014c08 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8014836:	7dfb      	ldrb	r3, [r7, #23]
}
 8014838:	4618      	mov	r0, r3
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b092      	sub	sp, #72	@ 0x48
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801484c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8014850:	f107 030c 	add.w	r3, r7, #12
 8014854:	2200      	movs	r2, #0
 8014856:	4618      	mov	r0, r3
 8014858:	f7fe fe44 	bl	80134e4 <find_volume>
 801485c:	4603      	mov	r3, r0
 801485e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8014862:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014866:	2b00      	cmp	r3, #0
 8014868:	f040 8099 	bne.w	801499e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801486c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8014872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014874:	695a      	ldr	r2, [r3, #20]
 8014876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014878:	699b      	ldr	r3, [r3, #24]
 801487a:	3b02      	subs	r3, #2
 801487c:	429a      	cmp	r2, r3
 801487e:	d804      	bhi.n	801488a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8014880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014882:	695a      	ldr	r2, [r3, #20]
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	601a      	str	r2, [r3, #0]
 8014888:	e089      	b.n	801499e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801488a:	2300      	movs	r3, #0
 801488c:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d128      	bne.n	80148e8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8014896:	2302      	movs	r3, #2
 8014898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801489c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801489e:	f107 0314 	add.w	r3, r7, #20
 80148a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7fd f9a8 	bl	8011bfa <get_fat>
 80148aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80148ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148b2:	d103      	bne.n	80148bc <f_getfree+0x7c>
 80148b4:	2301      	movs	r3, #1
 80148b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80148ba:	e063      	b.n	8014984 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80148bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d103      	bne.n	80148ca <f_getfree+0x8a>
 80148c2:	2302      	movs	r3, #2
 80148c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80148c8:	e05c      	b.n	8014984 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80148ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d102      	bne.n	80148d6 <f_getfree+0x96>
 80148d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80148d2:	3301      	adds	r3, #1
 80148d4:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80148d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80148d8:	3301      	adds	r3, #1
 80148da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80148dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148de:	699b      	ldr	r3, [r3, #24]
 80148e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d3db      	bcc.n	801489e <f_getfree+0x5e>
 80148e6:	e04d      	b.n	8014984 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80148e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ea:	699b      	ldr	r3, [r3, #24]
 80148ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80148ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148f2:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80148f4:	2300      	movs	r3, #0
 80148f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80148f8:	2300      	movs	r3, #0
 80148fa:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80148fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d113      	bne.n	801492a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8014902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014906:	1c5a      	adds	r2, r3, #1
 8014908:	63ba      	str	r2, [r7, #56]	@ 0x38
 801490a:	4619      	mov	r1, r3
 801490c:	f7fd f8ba 	bl	8011a84 <move_window>
 8014910:	4603      	mov	r3, r0
 8014912:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8014916:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801491a:	2b00      	cmp	r3, #0
 801491c:	d131      	bne.n	8014982 <f_getfree+0x142>
							p = fs->win;
 801491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014920:	3334      	adds	r3, #52	@ 0x34
 8014922:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8014924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014928:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	2b02      	cmp	r3, #2
 8014930:	d10f      	bne.n	8014952 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8014932:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014934:	f7fc fdf4 	bl	8011520 <ld_word>
 8014938:	4603      	mov	r3, r0
 801493a:	2b00      	cmp	r3, #0
 801493c:	d102      	bne.n	8014944 <f_getfree+0x104>
 801493e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014940:	3301      	adds	r3, #1
 8014942:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8014944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014946:	3302      	adds	r3, #2
 8014948:	633b      	str	r3, [r7, #48]	@ 0x30
 801494a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801494c:	3b02      	subs	r3, #2
 801494e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014950:	e010      	b.n	8014974 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8014952:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014954:	f7fc fdfd 	bl	8011552 <ld_dword>
 8014958:	4603      	mov	r3, r0
 801495a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801495e:	2b00      	cmp	r3, #0
 8014960:	d102      	bne.n	8014968 <f_getfree+0x128>
 8014962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014964:	3301      	adds	r3, #1
 8014966:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8014968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801496a:	3304      	adds	r3, #4
 801496c:	633b      	str	r3, [r7, #48]	@ 0x30
 801496e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014970:	3b04      	subs	r3, #4
 8014972:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8014974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014976:	3b01      	subs	r3, #1
 8014978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801497c:	2b00      	cmp	r3, #0
 801497e:	d1bd      	bne.n	80148fc <f_getfree+0xbc>
 8014980:	e000      	b.n	8014984 <f_getfree+0x144>
							if (res != FR_OK) break;
 8014982:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014988:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801498c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801498e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8014990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014992:	791a      	ldrb	r2, [r3, #4]
 8014994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014996:	f042 0201 	orr.w	r2, r2, #1
 801499a:	b2d2      	uxtb	r2, r2
 801499c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801499e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3748      	adds	r7, #72	@ 0x48
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
	...

080149ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b087      	sub	sp, #28
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	4613      	mov	r3, r2
 80149b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80149ba:	2301      	movs	r3, #1
 80149bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80149be:	2300      	movs	r3, #0
 80149c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80149c2:	4b1f      	ldr	r3, [pc, #124]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149c4:	7a5b      	ldrb	r3, [r3, #9]
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d131      	bne.n	8014a30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80149cc:	4b1c      	ldr	r3, [pc, #112]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149ce:	7a5b      	ldrb	r3, [r3, #9]
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	461a      	mov	r2, r3
 80149d4:	4b1a      	ldr	r3, [pc, #104]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149d6:	2100      	movs	r1, #0
 80149d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80149da:	4b19      	ldr	r3, [pc, #100]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149dc:	7a5b      	ldrb	r3, [r3, #9]
 80149de:	b2db      	uxtb	r3, r3
 80149e0:	4a17      	ldr	r2, [pc, #92]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	4413      	add	r3, r2
 80149e6:	68fa      	ldr	r2, [r7, #12]
 80149e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80149ea:	4b15      	ldr	r3, [pc, #84]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149ec:	7a5b      	ldrb	r3, [r3, #9]
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	461a      	mov	r2, r3
 80149f2:	4b13      	ldr	r3, [pc, #76]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149f4:	4413      	add	r3, r2
 80149f6:	79fa      	ldrb	r2, [r7, #7]
 80149f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80149fa:	4b11      	ldr	r3, [pc, #68]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 80149fc:	7a5b      	ldrb	r3, [r3, #9]
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	1c5a      	adds	r2, r3, #1
 8014a02:	b2d1      	uxtb	r1, r2
 8014a04:	4a0e      	ldr	r2, [pc, #56]	@ (8014a40 <FATFS_LinkDriverEx+0x94>)
 8014a06:	7251      	strb	r1, [r2, #9]
 8014a08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014a0a:	7dbb      	ldrb	r3, [r7, #22]
 8014a0c:	3330      	adds	r3, #48	@ 0x30
 8014a0e:	b2da      	uxtb	r2, r3
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	3301      	adds	r3, #1
 8014a18:	223a      	movs	r2, #58	@ 0x3a
 8014a1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	3302      	adds	r3, #2
 8014a20:	222f      	movs	r2, #47	@ 0x2f
 8014a22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	3303      	adds	r3, #3
 8014a28:	2200      	movs	r2, #0
 8014a2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	371c      	adds	r7, #28
 8014a36:	46bd      	mov	sp, r7
 8014a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3c:	4770      	bx	lr
 8014a3e:	bf00      	nop
 8014a40:	20000da4 	.word	0x20000da4

08014a44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014a4e:	2200      	movs	r2, #0
 8014a50:	6839      	ldr	r1, [r7, #0]
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f7ff ffaa 	bl	80149ac <FATFS_LinkDriverEx>
 8014a58:	4603      	mov	r3, r0
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3708      	adds	r7, #8
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
	...

08014a64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014a64:	b480      	push	{r7}
 8014a66:	b085      	sub	sp, #20
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	6039      	str	r1, [r7, #0]
 8014a6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014a70:	88fb      	ldrh	r3, [r7, #6]
 8014a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a74:	d802      	bhi.n	8014a7c <ff_convert+0x18>
		c = chr;
 8014a76:	88fb      	ldrh	r3, [r7, #6]
 8014a78:	81fb      	strh	r3, [r7, #14]
 8014a7a:	e025      	b.n	8014ac8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d00b      	beq.n	8014a9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014a82:	88fb      	ldrh	r3, [r7, #6]
 8014a84:	2bff      	cmp	r3, #255	@ 0xff
 8014a86:	d805      	bhi.n	8014a94 <ff_convert+0x30>
 8014a88:	88fb      	ldrh	r3, [r7, #6]
 8014a8a:	3b80      	subs	r3, #128	@ 0x80
 8014a8c:	4a12      	ldr	r2, [pc, #72]	@ (8014ad8 <ff_convert+0x74>)
 8014a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a92:	e000      	b.n	8014a96 <ff_convert+0x32>
 8014a94:	2300      	movs	r3, #0
 8014a96:	81fb      	strh	r3, [r7, #14]
 8014a98:	e016      	b.n	8014ac8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	81fb      	strh	r3, [r7, #14]
 8014a9e:	e009      	b.n	8014ab4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014aa0:	89fb      	ldrh	r3, [r7, #14]
 8014aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8014ad8 <ff_convert+0x74>)
 8014aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014aa8:	88fa      	ldrh	r2, [r7, #6]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d006      	beq.n	8014abc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014aae:	89fb      	ldrh	r3, [r7, #14]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	81fb      	strh	r3, [r7, #14]
 8014ab4:	89fb      	ldrh	r3, [r7, #14]
 8014ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8014ab8:	d9f2      	bls.n	8014aa0 <ff_convert+0x3c>
 8014aba:	e000      	b.n	8014abe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014abc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014abe:	89fb      	ldrh	r3, [r7, #14]
 8014ac0:	3380      	adds	r3, #128	@ 0x80
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3714      	adds	r7, #20
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad4:	4770      	bx	lr
 8014ad6:	bf00      	nop
 8014ad8:	08017860 	.word	0x08017860

08014adc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b087      	sub	sp, #28
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014ae6:	88fb      	ldrh	r3, [r7, #6]
 8014ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014aec:	d201      	bcs.n	8014af2 <ff_wtoupper+0x16>
 8014aee:	4b3e      	ldr	r3, [pc, #248]	@ (8014be8 <ff_wtoupper+0x10c>)
 8014af0:	e000      	b.n	8014af4 <ff_wtoupper+0x18>
 8014af2:	4b3e      	ldr	r3, [pc, #248]	@ (8014bec <ff_wtoupper+0x110>)
 8014af4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	1c9a      	adds	r2, r3, #2
 8014afa:	617a      	str	r2, [r7, #20]
 8014afc:	881b      	ldrh	r3, [r3, #0]
 8014afe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014b00:	8a7b      	ldrh	r3, [r7, #18]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d068      	beq.n	8014bd8 <ff_wtoupper+0xfc>
 8014b06:	88fa      	ldrh	r2, [r7, #6]
 8014b08:	8a7b      	ldrh	r3, [r7, #18]
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d364      	bcc.n	8014bd8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	1c9a      	adds	r2, r3, #2
 8014b12:	617a      	str	r2, [r7, #20]
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	823b      	strh	r3, [r7, #16]
 8014b18:	8a3b      	ldrh	r3, [r7, #16]
 8014b1a:	0a1b      	lsrs	r3, r3, #8
 8014b1c:	81fb      	strh	r3, [r7, #14]
 8014b1e:	8a3b      	ldrh	r3, [r7, #16]
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014b24:	88fa      	ldrh	r2, [r7, #6]
 8014b26:	8a79      	ldrh	r1, [r7, #18]
 8014b28:	8a3b      	ldrh	r3, [r7, #16]
 8014b2a:	440b      	add	r3, r1
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	da49      	bge.n	8014bc4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014b30:	89fb      	ldrh	r3, [r7, #14]
 8014b32:	2b08      	cmp	r3, #8
 8014b34:	d84f      	bhi.n	8014bd6 <ff_wtoupper+0xfa>
 8014b36:	a201      	add	r2, pc, #4	@ (adr r2, 8014b3c <ff_wtoupper+0x60>)
 8014b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b3c:	08014b61 	.word	0x08014b61
 8014b40:	08014b73 	.word	0x08014b73
 8014b44:	08014b89 	.word	0x08014b89
 8014b48:	08014b91 	.word	0x08014b91
 8014b4c:	08014b99 	.word	0x08014b99
 8014b50:	08014ba1 	.word	0x08014ba1
 8014b54:	08014ba9 	.word	0x08014ba9
 8014b58:	08014bb1 	.word	0x08014bb1
 8014b5c:	08014bb9 	.word	0x08014bb9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014b60:	88fa      	ldrh	r2, [r7, #6]
 8014b62:	8a7b      	ldrh	r3, [r7, #18]
 8014b64:	1ad3      	subs	r3, r2, r3
 8014b66:	005b      	lsls	r3, r3, #1
 8014b68:	697a      	ldr	r2, [r7, #20]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	80fb      	strh	r3, [r7, #6]
 8014b70:	e027      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014b72:	88fa      	ldrh	r2, [r7, #6]
 8014b74:	8a7b      	ldrh	r3, [r7, #18]
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	f003 0301 	and.w	r3, r3, #1
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	88fa      	ldrh	r2, [r7, #6]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	80fb      	strh	r3, [r7, #6]
 8014b86:	e01c      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014b88:	88fb      	ldrh	r3, [r7, #6]
 8014b8a:	3b10      	subs	r3, #16
 8014b8c:	80fb      	strh	r3, [r7, #6]
 8014b8e:	e018      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014b90:	88fb      	ldrh	r3, [r7, #6]
 8014b92:	3b20      	subs	r3, #32
 8014b94:	80fb      	strh	r3, [r7, #6]
 8014b96:	e014      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014b98:	88fb      	ldrh	r3, [r7, #6]
 8014b9a:	3b30      	subs	r3, #48	@ 0x30
 8014b9c:	80fb      	strh	r3, [r7, #6]
 8014b9e:	e010      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014ba0:	88fb      	ldrh	r3, [r7, #6]
 8014ba2:	3b1a      	subs	r3, #26
 8014ba4:	80fb      	strh	r3, [r7, #6]
 8014ba6:	e00c      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014ba8:	88fb      	ldrh	r3, [r7, #6]
 8014baa:	3308      	adds	r3, #8
 8014bac:	80fb      	strh	r3, [r7, #6]
 8014bae:	e008      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014bb0:	88fb      	ldrh	r3, [r7, #6]
 8014bb2:	3b50      	subs	r3, #80	@ 0x50
 8014bb4:	80fb      	strh	r3, [r7, #6]
 8014bb6:	e004      	b.n	8014bc2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014bb8:	88fb      	ldrh	r3, [r7, #6]
 8014bba:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8014bbe:	80fb      	strh	r3, [r7, #6]
 8014bc0:	bf00      	nop
			}
			break;
 8014bc2:	e008      	b.n	8014bd6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014bc4:	89fb      	ldrh	r3, [r7, #14]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d195      	bne.n	8014af6 <ff_wtoupper+0x1a>
 8014bca:	8a3b      	ldrh	r3, [r7, #16]
 8014bcc:	005b      	lsls	r3, r3, #1
 8014bce:	697a      	ldr	r2, [r7, #20]
 8014bd0:	4413      	add	r3, r2
 8014bd2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014bd4:	e78f      	b.n	8014af6 <ff_wtoupper+0x1a>
			break;
 8014bd6:	bf00      	nop
	}

	return chr;
 8014bd8:	88fb      	ldrh	r3, [r7, #6]
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	371c      	adds	r7, #28
 8014bde:	46bd      	mov	sp, r7
 8014be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be4:	4770      	bx	lr
 8014be6:	bf00      	nop
 8014be8:	08017960 	.word	0x08017960
 8014bec:	08017b54 	.word	0x08017b54

08014bf0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 f811 	bl	8014c20 <malloc>
 8014bfe:	4603      	mov	r3, r0
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f000 f80d 	bl	8014c30 <free>
}
 8014c16:	bf00      	nop
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
	...

08014c20 <malloc>:
 8014c20:	4b02      	ldr	r3, [pc, #8]	@ (8014c2c <malloc+0xc>)
 8014c22:	4601      	mov	r1, r0
 8014c24:	6818      	ldr	r0, [r3, #0]
 8014c26:	f000 b82d 	b.w	8014c84 <_malloc_r>
 8014c2a:	bf00      	nop
 8014c2c:	20000234 	.word	0x20000234

08014c30 <free>:
 8014c30:	4b02      	ldr	r3, [pc, #8]	@ (8014c3c <free+0xc>)
 8014c32:	4601      	mov	r1, r0
 8014c34:	6818      	ldr	r0, [r3, #0]
 8014c36:	f000 bb7d 	b.w	8015334 <_free_r>
 8014c3a:	bf00      	nop
 8014c3c:	20000234 	.word	0x20000234

08014c40 <sbrk_aligned>:
 8014c40:	b570      	push	{r4, r5, r6, lr}
 8014c42:	4e0f      	ldr	r6, [pc, #60]	@ (8014c80 <sbrk_aligned+0x40>)
 8014c44:	460c      	mov	r4, r1
 8014c46:	6831      	ldr	r1, [r6, #0]
 8014c48:	4605      	mov	r5, r0
 8014c4a:	b911      	cbnz	r1, 8014c52 <sbrk_aligned+0x12>
 8014c4c:	f000 fb22 	bl	8015294 <_sbrk_r>
 8014c50:	6030      	str	r0, [r6, #0]
 8014c52:	4621      	mov	r1, r4
 8014c54:	4628      	mov	r0, r5
 8014c56:	f000 fb1d 	bl	8015294 <_sbrk_r>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d103      	bne.n	8014c66 <sbrk_aligned+0x26>
 8014c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8014c62:	4620      	mov	r0, r4
 8014c64:	bd70      	pop	{r4, r5, r6, pc}
 8014c66:	1cc4      	adds	r4, r0, #3
 8014c68:	f024 0403 	bic.w	r4, r4, #3
 8014c6c:	42a0      	cmp	r0, r4
 8014c6e:	d0f8      	beq.n	8014c62 <sbrk_aligned+0x22>
 8014c70:	1a21      	subs	r1, r4, r0
 8014c72:	4628      	mov	r0, r5
 8014c74:	f000 fb0e 	bl	8015294 <_sbrk_r>
 8014c78:	3001      	adds	r0, #1
 8014c7a:	d1f2      	bne.n	8014c62 <sbrk_aligned+0x22>
 8014c7c:	e7ef      	b.n	8014c5e <sbrk_aligned+0x1e>
 8014c7e:	bf00      	nop
 8014c80:	20000db0 	.word	0x20000db0

08014c84 <_malloc_r>:
 8014c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c88:	1ccd      	adds	r5, r1, #3
 8014c8a:	f025 0503 	bic.w	r5, r5, #3
 8014c8e:	3508      	adds	r5, #8
 8014c90:	2d0c      	cmp	r5, #12
 8014c92:	bf38      	it	cc
 8014c94:	250c      	movcc	r5, #12
 8014c96:	2d00      	cmp	r5, #0
 8014c98:	4606      	mov	r6, r0
 8014c9a:	db01      	blt.n	8014ca0 <_malloc_r+0x1c>
 8014c9c:	42a9      	cmp	r1, r5
 8014c9e:	d904      	bls.n	8014caa <_malloc_r+0x26>
 8014ca0:	230c      	movs	r3, #12
 8014ca2:	6033      	str	r3, [r6, #0]
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d80 <_malloc_r+0xfc>
 8014cae:	f000 f869 	bl	8014d84 <__malloc_lock>
 8014cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8014cb6:	461c      	mov	r4, r3
 8014cb8:	bb44      	cbnz	r4, 8014d0c <_malloc_r+0x88>
 8014cba:	4629      	mov	r1, r5
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	f7ff ffbf 	bl	8014c40 <sbrk_aligned>
 8014cc2:	1c43      	adds	r3, r0, #1
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	d158      	bne.n	8014d7a <_malloc_r+0xf6>
 8014cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8014ccc:	4627      	mov	r7, r4
 8014cce:	2f00      	cmp	r7, #0
 8014cd0:	d143      	bne.n	8014d5a <_malloc_r+0xd6>
 8014cd2:	2c00      	cmp	r4, #0
 8014cd4:	d04b      	beq.n	8014d6e <_malloc_r+0xea>
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	4639      	mov	r1, r7
 8014cda:	4630      	mov	r0, r6
 8014cdc:	eb04 0903 	add.w	r9, r4, r3
 8014ce0:	f000 fad8 	bl	8015294 <_sbrk_r>
 8014ce4:	4581      	cmp	r9, r0
 8014ce6:	d142      	bne.n	8014d6e <_malloc_r+0xea>
 8014ce8:	6821      	ldr	r1, [r4, #0]
 8014cea:	1a6d      	subs	r5, r5, r1
 8014cec:	4629      	mov	r1, r5
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f7ff ffa6 	bl	8014c40 <sbrk_aligned>
 8014cf4:	3001      	adds	r0, #1
 8014cf6:	d03a      	beq.n	8014d6e <_malloc_r+0xea>
 8014cf8:	6823      	ldr	r3, [r4, #0]
 8014cfa:	442b      	add	r3, r5
 8014cfc:	6023      	str	r3, [r4, #0]
 8014cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8014d02:	685a      	ldr	r2, [r3, #4]
 8014d04:	bb62      	cbnz	r2, 8014d60 <_malloc_r+0xdc>
 8014d06:	f8c8 7000 	str.w	r7, [r8]
 8014d0a:	e00f      	b.n	8014d2c <_malloc_r+0xa8>
 8014d0c:	6822      	ldr	r2, [r4, #0]
 8014d0e:	1b52      	subs	r2, r2, r5
 8014d10:	d420      	bmi.n	8014d54 <_malloc_r+0xd0>
 8014d12:	2a0b      	cmp	r2, #11
 8014d14:	d917      	bls.n	8014d46 <_malloc_r+0xc2>
 8014d16:	1961      	adds	r1, r4, r5
 8014d18:	42a3      	cmp	r3, r4
 8014d1a:	6025      	str	r5, [r4, #0]
 8014d1c:	bf18      	it	ne
 8014d1e:	6059      	strne	r1, [r3, #4]
 8014d20:	6863      	ldr	r3, [r4, #4]
 8014d22:	bf08      	it	eq
 8014d24:	f8c8 1000 	streq.w	r1, [r8]
 8014d28:	5162      	str	r2, [r4, r5]
 8014d2a:	604b      	str	r3, [r1, #4]
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	f000 f82f 	bl	8014d90 <__malloc_unlock>
 8014d32:	f104 000b 	add.w	r0, r4, #11
 8014d36:	1d23      	adds	r3, r4, #4
 8014d38:	f020 0007 	bic.w	r0, r0, #7
 8014d3c:	1ac2      	subs	r2, r0, r3
 8014d3e:	bf1c      	itt	ne
 8014d40:	1a1b      	subne	r3, r3, r0
 8014d42:	50a3      	strne	r3, [r4, r2]
 8014d44:	e7af      	b.n	8014ca6 <_malloc_r+0x22>
 8014d46:	6862      	ldr	r2, [r4, #4]
 8014d48:	42a3      	cmp	r3, r4
 8014d4a:	bf0c      	ite	eq
 8014d4c:	f8c8 2000 	streq.w	r2, [r8]
 8014d50:	605a      	strne	r2, [r3, #4]
 8014d52:	e7eb      	b.n	8014d2c <_malloc_r+0xa8>
 8014d54:	4623      	mov	r3, r4
 8014d56:	6864      	ldr	r4, [r4, #4]
 8014d58:	e7ae      	b.n	8014cb8 <_malloc_r+0x34>
 8014d5a:	463c      	mov	r4, r7
 8014d5c:	687f      	ldr	r7, [r7, #4]
 8014d5e:	e7b6      	b.n	8014cce <_malloc_r+0x4a>
 8014d60:	461a      	mov	r2, r3
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	42a3      	cmp	r3, r4
 8014d66:	d1fb      	bne.n	8014d60 <_malloc_r+0xdc>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	6053      	str	r3, [r2, #4]
 8014d6c:	e7de      	b.n	8014d2c <_malloc_r+0xa8>
 8014d6e:	230c      	movs	r3, #12
 8014d70:	6033      	str	r3, [r6, #0]
 8014d72:	4630      	mov	r0, r6
 8014d74:	f000 f80c 	bl	8014d90 <__malloc_unlock>
 8014d78:	e794      	b.n	8014ca4 <_malloc_r+0x20>
 8014d7a:	6005      	str	r5, [r0, #0]
 8014d7c:	e7d6      	b.n	8014d2c <_malloc_r+0xa8>
 8014d7e:	bf00      	nop
 8014d80:	20000db4 	.word	0x20000db4

08014d84 <__malloc_lock>:
 8014d84:	4801      	ldr	r0, [pc, #4]	@ (8014d8c <__malloc_lock+0x8>)
 8014d86:	f000 bad2 	b.w	801532e <__retarget_lock_acquire_recursive>
 8014d8a:	bf00      	nop
 8014d8c:	20000ef8 	.word	0x20000ef8

08014d90 <__malloc_unlock>:
 8014d90:	4801      	ldr	r0, [pc, #4]	@ (8014d98 <__malloc_unlock+0x8>)
 8014d92:	f000 bacd 	b.w	8015330 <__retarget_lock_release_recursive>
 8014d96:	bf00      	nop
 8014d98:	20000ef8 	.word	0x20000ef8

08014d9c <std>:
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	b510      	push	{r4, lr}
 8014da0:	4604      	mov	r4, r0
 8014da2:	e9c0 3300 	strd	r3, r3, [r0]
 8014da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014daa:	6083      	str	r3, [r0, #8]
 8014dac:	8181      	strh	r1, [r0, #12]
 8014dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8014db0:	81c2      	strh	r2, [r0, #14]
 8014db2:	6183      	str	r3, [r0, #24]
 8014db4:	4619      	mov	r1, r3
 8014db6:	2208      	movs	r2, #8
 8014db8:	305c      	adds	r0, #92	@ 0x5c
 8014dba:	f000 fa2f 	bl	801521c <memset>
 8014dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8014df4 <std+0x58>)
 8014dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8014dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8014df8 <std+0x5c>)
 8014dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8014dfc <std+0x60>)
 8014dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014dca:	4b0d      	ldr	r3, [pc, #52]	@ (8014e00 <std+0x64>)
 8014dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8014dce:	4b0d      	ldr	r3, [pc, #52]	@ (8014e04 <std+0x68>)
 8014dd0:	6224      	str	r4, [r4, #32]
 8014dd2:	429c      	cmp	r4, r3
 8014dd4:	d006      	beq.n	8014de4 <std+0x48>
 8014dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014dda:	4294      	cmp	r4, r2
 8014ddc:	d002      	beq.n	8014de4 <std+0x48>
 8014dde:	33d0      	adds	r3, #208	@ 0xd0
 8014de0:	429c      	cmp	r4, r3
 8014de2:	d105      	bne.n	8014df0 <std+0x54>
 8014de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dec:	f000 ba9e 	b.w	801532c <__retarget_lock_init_recursive>
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	bf00      	nop
 8014df4:	0801506d 	.word	0x0801506d
 8014df8:	0801508f 	.word	0x0801508f
 8014dfc:	080150c7 	.word	0x080150c7
 8014e00:	080150eb 	.word	0x080150eb
 8014e04:	20000db8 	.word	0x20000db8

08014e08 <stdio_exit_handler>:
 8014e08:	4a02      	ldr	r2, [pc, #8]	@ (8014e14 <stdio_exit_handler+0xc>)
 8014e0a:	4903      	ldr	r1, [pc, #12]	@ (8014e18 <stdio_exit_handler+0x10>)
 8014e0c:	4803      	ldr	r0, [pc, #12]	@ (8014e1c <stdio_exit_handler+0x14>)
 8014e0e:	f000 b869 	b.w	8014ee4 <_fwalk_sglue>
 8014e12:	bf00      	nop
 8014e14:	20000228 	.word	0x20000228
 8014e18:	08015d1d 	.word	0x08015d1d
 8014e1c:	20000238 	.word	0x20000238

08014e20 <cleanup_stdio>:
 8014e20:	6841      	ldr	r1, [r0, #4]
 8014e22:	4b0c      	ldr	r3, [pc, #48]	@ (8014e54 <cleanup_stdio+0x34>)
 8014e24:	4299      	cmp	r1, r3
 8014e26:	b510      	push	{r4, lr}
 8014e28:	4604      	mov	r4, r0
 8014e2a:	d001      	beq.n	8014e30 <cleanup_stdio+0x10>
 8014e2c:	f000 ff76 	bl	8015d1c <_fflush_r>
 8014e30:	68a1      	ldr	r1, [r4, #8]
 8014e32:	4b09      	ldr	r3, [pc, #36]	@ (8014e58 <cleanup_stdio+0x38>)
 8014e34:	4299      	cmp	r1, r3
 8014e36:	d002      	beq.n	8014e3e <cleanup_stdio+0x1e>
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f000 ff6f 	bl	8015d1c <_fflush_r>
 8014e3e:	68e1      	ldr	r1, [r4, #12]
 8014e40:	4b06      	ldr	r3, [pc, #24]	@ (8014e5c <cleanup_stdio+0x3c>)
 8014e42:	4299      	cmp	r1, r3
 8014e44:	d004      	beq.n	8014e50 <cleanup_stdio+0x30>
 8014e46:	4620      	mov	r0, r4
 8014e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e4c:	f000 bf66 	b.w	8015d1c <_fflush_r>
 8014e50:	bd10      	pop	{r4, pc}
 8014e52:	bf00      	nop
 8014e54:	20000db8 	.word	0x20000db8
 8014e58:	20000e20 	.word	0x20000e20
 8014e5c:	20000e88 	.word	0x20000e88

08014e60 <global_stdio_init.part.0>:
 8014e60:	b510      	push	{r4, lr}
 8014e62:	4b0b      	ldr	r3, [pc, #44]	@ (8014e90 <global_stdio_init.part.0+0x30>)
 8014e64:	4c0b      	ldr	r4, [pc, #44]	@ (8014e94 <global_stdio_init.part.0+0x34>)
 8014e66:	4a0c      	ldr	r2, [pc, #48]	@ (8014e98 <global_stdio_init.part.0+0x38>)
 8014e68:	601a      	str	r2, [r3, #0]
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	2104      	movs	r1, #4
 8014e70:	f7ff ff94 	bl	8014d9c <std>
 8014e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014e78:	2201      	movs	r2, #1
 8014e7a:	2109      	movs	r1, #9
 8014e7c:	f7ff ff8e 	bl	8014d9c <std>
 8014e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014e84:	2202      	movs	r2, #2
 8014e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e8a:	2112      	movs	r1, #18
 8014e8c:	f7ff bf86 	b.w	8014d9c <std>
 8014e90:	20000ef0 	.word	0x20000ef0
 8014e94:	20000db8 	.word	0x20000db8
 8014e98:	08014e09 	.word	0x08014e09

08014e9c <__sfp_lock_acquire>:
 8014e9c:	4801      	ldr	r0, [pc, #4]	@ (8014ea4 <__sfp_lock_acquire+0x8>)
 8014e9e:	f000 ba46 	b.w	801532e <__retarget_lock_acquire_recursive>
 8014ea2:	bf00      	nop
 8014ea4:	20000ef9 	.word	0x20000ef9

08014ea8 <__sfp_lock_release>:
 8014ea8:	4801      	ldr	r0, [pc, #4]	@ (8014eb0 <__sfp_lock_release+0x8>)
 8014eaa:	f000 ba41 	b.w	8015330 <__retarget_lock_release_recursive>
 8014eae:	bf00      	nop
 8014eb0:	20000ef9 	.word	0x20000ef9

08014eb4 <__sinit>:
 8014eb4:	b510      	push	{r4, lr}
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	f7ff fff0 	bl	8014e9c <__sfp_lock_acquire>
 8014ebc:	6a23      	ldr	r3, [r4, #32]
 8014ebe:	b11b      	cbz	r3, 8014ec8 <__sinit+0x14>
 8014ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ec4:	f7ff bff0 	b.w	8014ea8 <__sfp_lock_release>
 8014ec8:	4b04      	ldr	r3, [pc, #16]	@ (8014edc <__sinit+0x28>)
 8014eca:	6223      	str	r3, [r4, #32]
 8014ecc:	4b04      	ldr	r3, [pc, #16]	@ (8014ee0 <__sinit+0x2c>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d1f5      	bne.n	8014ec0 <__sinit+0xc>
 8014ed4:	f7ff ffc4 	bl	8014e60 <global_stdio_init.part.0>
 8014ed8:	e7f2      	b.n	8014ec0 <__sinit+0xc>
 8014eda:	bf00      	nop
 8014edc:	08014e21 	.word	0x08014e21
 8014ee0:	20000ef0 	.word	0x20000ef0

08014ee4 <_fwalk_sglue>:
 8014ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ee8:	4607      	mov	r7, r0
 8014eea:	4688      	mov	r8, r1
 8014eec:	4614      	mov	r4, r2
 8014eee:	2600      	movs	r6, #0
 8014ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8014ef8:	d505      	bpl.n	8014f06 <_fwalk_sglue+0x22>
 8014efa:	6824      	ldr	r4, [r4, #0]
 8014efc:	2c00      	cmp	r4, #0
 8014efe:	d1f7      	bne.n	8014ef0 <_fwalk_sglue+0xc>
 8014f00:	4630      	mov	r0, r6
 8014f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f06:	89ab      	ldrh	r3, [r5, #12]
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d907      	bls.n	8014f1c <_fwalk_sglue+0x38>
 8014f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f10:	3301      	adds	r3, #1
 8014f12:	d003      	beq.n	8014f1c <_fwalk_sglue+0x38>
 8014f14:	4629      	mov	r1, r5
 8014f16:	4638      	mov	r0, r7
 8014f18:	47c0      	blx	r8
 8014f1a:	4306      	orrs	r6, r0
 8014f1c:	3568      	adds	r5, #104	@ 0x68
 8014f1e:	e7e9      	b.n	8014ef4 <_fwalk_sglue+0x10>

08014f20 <iprintf>:
 8014f20:	b40f      	push	{r0, r1, r2, r3}
 8014f22:	b507      	push	{r0, r1, r2, lr}
 8014f24:	4906      	ldr	r1, [pc, #24]	@ (8014f40 <iprintf+0x20>)
 8014f26:	ab04      	add	r3, sp, #16
 8014f28:	6808      	ldr	r0, [r1, #0]
 8014f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f2e:	6881      	ldr	r1, [r0, #8]
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	f000 fbcb 	bl	80156cc <_vfiprintf_r>
 8014f36:	b003      	add	sp, #12
 8014f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f3c:	b004      	add	sp, #16
 8014f3e:	4770      	bx	lr
 8014f40:	20000234 	.word	0x20000234

08014f44 <_puts_r>:
 8014f44:	6a03      	ldr	r3, [r0, #32]
 8014f46:	b570      	push	{r4, r5, r6, lr}
 8014f48:	6884      	ldr	r4, [r0, #8]
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	460e      	mov	r6, r1
 8014f4e:	b90b      	cbnz	r3, 8014f54 <_puts_r+0x10>
 8014f50:	f7ff ffb0 	bl	8014eb4 <__sinit>
 8014f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f56:	07db      	lsls	r3, r3, #31
 8014f58:	d405      	bmi.n	8014f66 <_puts_r+0x22>
 8014f5a:	89a3      	ldrh	r3, [r4, #12]
 8014f5c:	0598      	lsls	r0, r3, #22
 8014f5e:	d402      	bmi.n	8014f66 <_puts_r+0x22>
 8014f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f62:	f000 f9e4 	bl	801532e <__retarget_lock_acquire_recursive>
 8014f66:	89a3      	ldrh	r3, [r4, #12]
 8014f68:	0719      	lsls	r1, r3, #28
 8014f6a:	d502      	bpl.n	8014f72 <_puts_r+0x2e>
 8014f6c:	6923      	ldr	r3, [r4, #16]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d135      	bne.n	8014fde <_puts_r+0x9a>
 8014f72:	4621      	mov	r1, r4
 8014f74:	4628      	mov	r0, r5
 8014f76:	f000 f8fb 	bl	8015170 <__swsetup_r>
 8014f7a:	b380      	cbz	r0, 8014fde <_puts_r+0x9a>
 8014f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8014f80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f82:	07da      	lsls	r2, r3, #31
 8014f84:	d405      	bmi.n	8014f92 <_puts_r+0x4e>
 8014f86:	89a3      	ldrh	r3, [r4, #12]
 8014f88:	059b      	lsls	r3, r3, #22
 8014f8a:	d402      	bmi.n	8014f92 <_puts_r+0x4e>
 8014f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f8e:	f000 f9cf 	bl	8015330 <__retarget_lock_release_recursive>
 8014f92:	4628      	mov	r0, r5
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	da04      	bge.n	8014fa4 <_puts_r+0x60>
 8014f9a:	69a2      	ldr	r2, [r4, #24]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	dc17      	bgt.n	8014fd0 <_puts_r+0x8c>
 8014fa0:	290a      	cmp	r1, #10
 8014fa2:	d015      	beq.n	8014fd0 <_puts_r+0x8c>
 8014fa4:	6823      	ldr	r3, [r4, #0]
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	6022      	str	r2, [r4, #0]
 8014faa:	7019      	strb	r1, [r3, #0]
 8014fac:	68a3      	ldr	r3, [r4, #8]
 8014fae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014fb2:	3b01      	subs	r3, #1
 8014fb4:	60a3      	str	r3, [r4, #8]
 8014fb6:	2900      	cmp	r1, #0
 8014fb8:	d1ed      	bne.n	8014f96 <_puts_r+0x52>
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	da11      	bge.n	8014fe2 <_puts_r+0x9e>
 8014fbe:	4622      	mov	r2, r4
 8014fc0:	210a      	movs	r1, #10
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	f000 f895 	bl	80150f2 <__swbuf_r>
 8014fc8:	3001      	adds	r0, #1
 8014fca:	d0d7      	beq.n	8014f7c <_puts_r+0x38>
 8014fcc:	250a      	movs	r5, #10
 8014fce:	e7d7      	b.n	8014f80 <_puts_r+0x3c>
 8014fd0:	4622      	mov	r2, r4
 8014fd2:	4628      	mov	r0, r5
 8014fd4:	f000 f88d 	bl	80150f2 <__swbuf_r>
 8014fd8:	3001      	adds	r0, #1
 8014fda:	d1e7      	bne.n	8014fac <_puts_r+0x68>
 8014fdc:	e7ce      	b.n	8014f7c <_puts_r+0x38>
 8014fde:	3e01      	subs	r6, #1
 8014fe0:	e7e4      	b.n	8014fac <_puts_r+0x68>
 8014fe2:	6823      	ldr	r3, [r4, #0]
 8014fe4:	1c5a      	adds	r2, r3, #1
 8014fe6:	6022      	str	r2, [r4, #0]
 8014fe8:	220a      	movs	r2, #10
 8014fea:	701a      	strb	r2, [r3, #0]
 8014fec:	e7ee      	b.n	8014fcc <_puts_r+0x88>
	...

08014ff0 <puts>:
 8014ff0:	4b02      	ldr	r3, [pc, #8]	@ (8014ffc <puts+0xc>)
 8014ff2:	4601      	mov	r1, r0
 8014ff4:	6818      	ldr	r0, [r3, #0]
 8014ff6:	f7ff bfa5 	b.w	8014f44 <_puts_r>
 8014ffa:	bf00      	nop
 8014ffc:	20000234 	.word	0x20000234

08015000 <sniprintf>:
 8015000:	b40c      	push	{r2, r3}
 8015002:	b530      	push	{r4, r5, lr}
 8015004:	4b18      	ldr	r3, [pc, #96]	@ (8015068 <sniprintf+0x68>)
 8015006:	1e0c      	subs	r4, r1, #0
 8015008:	681d      	ldr	r5, [r3, #0]
 801500a:	b09d      	sub	sp, #116	@ 0x74
 801500c:	da08      	bge.n	8015020 <sniprintf+0x20>
 801500e:	238b      	movs	r3, #139	@ 0x8b
 8015010:	602b      	str	r3, [r5, #0]
 8015012:	f04f 30ff 	mov.w	r0, #4294967295
 8015016:	b01d      	add	sp, #116	@ 0x74
 8015018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801501c:	b002      	add	sp, #8
 801501e:	4770      	bx	lr
 8015020:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015024:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015028:	f04f 0300 	mov.w	r3, #0
 801502c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801502e:	bf14      	ite	ne
 8015030:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015034:	4623      	moveq	r3, r4
 8015036:	9304      	str	r3, [sp, #16]
 8015038:	9307      	str	r3, [sp, #28]
 801503a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801503e:	9002      	str	r0, [sp, #8]
 8015040:	9006      	str	r0, [sp, #24]
 8015042:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015046:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015048:	ab21      	add	r3, sp, #132	@ 0x84
 801504a:	a902      	add	r1, sp, #8
 801504c:	4628      	mov	r0, r5
 801504e:	9301      	str	r3, [sp, #4]
 8015050:	f000 fa16 	bl	8015480 <_svfiprintf_r>
 8015054:	1c43      	adds	r3, r0, #1
 8015056:	bfbc      	itt	lt
 8015058:	238b      	movlt	r3, #139	@ 0x8b
 801505a:	602b      	strlt	r3, [r5, #0]
 801505c:	2c00      	cmp	r4, #0
 801505e:	d0da      	beq.n	8015016 <sniprintf+0x16>
 8015060:	9b02      	ldr	r3, [sp, #8]
 8015062:	2200      	movs	r2, #0
 8015064:	701a      	strb	r2, [r3, #0]
 8015066:	e7d6      	b.n	8015016 <sniprintf+0x16>
 8015068:	20000234 	.word	0x20000234

0801506c <__sread>:
 801506c:	b510      	push	{r4, lr}
 801506e:	460c      	mov	r4, r1
 8015070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015074:	f000 f8fc 	bl	8015270 <_read_r>
 8015078:	2800      	cmp	r0, #0
 801507a:	bfab      	itete	ge
 801507c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801507e:	89a3      	ldrhlt	r3, [r4, #12]
 8015080:	181b      	addge	r3, r3, r0
 8015082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015086:	bfac      	ite	ge
 8015088:	6563      	strge	r3, [r4, #84]	@ 0x54
 801508a:	81a3      	strhlt	r3, [r4, #12]
 801508c:	bd10      	pop	{r4, pc}

0801508e <__swrite>:
 801508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015092:	461f      	mov	r7, r3
 8015094:	898b      	ldrh	r3, [r1, #12]
 8015096:	05db      	lsls	r3, r3, #23
 8015098:	4605      	mov	r5, r0
 801509a:	460c      	mov	r4, r1
 801509c:	4616      	mov	r6, r2
 801509e:	d505      	bpl.n	80150ac <__swrite+0x1e>
 80150a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150a4:	2302      	movs	r3, #2
 80150a6:	2200      	movs	r2, #0
 80150a8:	f000 f8d0 	bl	801524c <_lseek_r>
 80150ac:	89a3      	ldrh	r3, [r4, #12]
 80150ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80150b6:	81a3      	strh	r3, [r4, #12]
 80150b8:	4632      	mov	r2, r6
 80150ba:	463b      	mov	r3, r7
 80150bc:	4628      	mov	r0, r5
 80150be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c2:	f000 b8f7 	b.w	80152b4 <_write_r>

080150c6 <__sseek>:
 80150c6:	b510      	push	{r4, lr}
 80150c8:	460c      	mov	r4, r1
 80150ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ce:	f000 f8bd 	bl	801524c <_lseek_r>
 80150d2:	1c43      	adds	r3, r0, #1
 80150d4:	89a3      	ldrh	r3, [r4, #12]
 80150d6:	bf15      	itete	ne
 80150d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80150da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80150de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80150e2:	81a3      	strheq	r3, [r4, #12]
 80150e4:	bf18      	it	ne
 80150e6:	81a3      	strhne	r3, [r4, #12]
 80150e8:	bd10      	pop	{r4, pc}

080150ea <__sclose>:
 80150ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ee:	f000 b89d 	b.w	801522c <_close_r>

080150f2 <__swbuf_r>:
 80150f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150f4:	460e      	mov	r6, r1
 80150f6:	4614      	mov	r4, r2
 80150f8:	4605      	mov	r5, r0
 80150fa:	b118      	cbz	r0, 8015104 <__swbuf_r+0x12>
 80150fc:	6a03      	ldr	r3, [r0, #32]
 80150fe:	b90b      	cbnz	r3, 8015104 <__swbuf_r+0x12>
 8015100:	f7ff fed8 	bl	8014eb4 <__sinit>
 8015104:	69a3      	ldr	r3, [r4, #24]
 8015106:	60a3      	str	r3, [r4, #8]
 8015108:	89a3      	ldrh	r3, [r4, #12]
 801510a:	071a      	lsls	r2, r3, #28
 801510c:	d501      	bpl.n	8015112 <__swbuf_r+0x20>
 801510e:	6923      	ldr	r3, [r4, #16]
 8015110:	b943      	cbnz	r3, 8015124 <__swbuf_r+0x32>
 8015112:	4621      	mov	r1, r4
 8015114:	4628      	mov	r0, r5
 8015116:	f000 f82b 	bl	8015170 <__swsetup_r>
 801511a:	b118      	cbz	r0, 8015124 <__swbuf_r+0x32>
 801511c:	f04f 37ff 	mov.w	r7, #4294967295
 8015120:	4638      	mov	r0, r7
 8015122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015124:	6823      	ldr	r3, [r4, #0]
 8015126:	6922      	ldr	r2, [r4, #16]
 8015128:	1a98      	subs	r0, r3, r2
 801512a:	6963      	ldr	r3, [r4, #20]
 801512c:	b2f6      	uxtb	r6, r6
 801512e:	4283      	cmp	r3, r0
 8015130:	4637      	mov	r7, r6
 8015132:	dc05      	bgt.n	8015140 <__swbuf_r+0x4e>
 8015134:	4621      	mov	r1, r4
 8015136:	4628      	mov	r0, r5
 8015138:	f000 fdf0 	bl	8015d1c <_fflush_r>
 801513c:	2800      	cmp	r0, #0
 801513e:	d1ed      	bne.n	801511c <__swbuf_r+0x2a>
 8015140:	68a3      	ldr	r3, [r4, #8]
 8015142:	3b01      	subs	r3, #1
 8015144:	60a3      	str	r3, [r4, #8]
 8015146:	6823      	ldr	r3, [r4, #0]
 8015148:	1c5a      	adds	r2, r3, #1
 801514a:	6022      	str	r2, [r4, #0]
 801514c:	701e      	strb	r6, [r3, #0]
 801514e:	6962      	ldr	r2, [r4, #20]
 8015150:	1c43      	adds	r3, r0, #1
 8015152:	429a      	cmp	r2, r3
 8015154:	d004      	beq.n	8015160 <__swbuf_r+0x6e>
 8015156:	89a3      	ldrh	r3, [r4, #12]
 8015158:	07db      	lsls	r3, r3, #31
 801515a:	d5e1      	bpl.n	8015120 <__swbuf_r+0x2e>
 801515c:	2e0a      	cmp	r6, #10
 801515e:	d1df      	bne.n	8015120 <__swbuf_r+0x2e>
 8015160:	4621      	mov	r1, r4
 8015162:	4628      	mov	r0, r5
 8015164:	f000 fdda 	bl	8015d1c <_fflush_r>
 8015168:	2800      	cmp	r0, #0
 801516a:	d0d9      	beq.n	8015120 <__swbuf_r+0x2e>
 801516c:	e7d6      	b.n	801511c <__swbuf_r+0x2a>
	...

08015170 <__swsetup_r>:
 8015170:	b538      	push	{r3, r4, r5, lr}
 8015172:	4b29      	ldr	r3, [pc, #164]	@ (8015218 <__swsetup_r+0xa8>)
 8015174:	4605      	mov	r5, r0
 8015176:	6818      	ldr	r0, [r3, #0]
 8015178:	460c      	mov	r4, r1
 801517a:	b118      	cbz	r0, 8015184 <__swsetup_r+0x14>
 801517c:	6a03      	ldr	r3, [r0, #32]
 801517e:	b90b      	cbnz	r3, 8015184 <__swsetup_r+0x14>
 8015180:	f7ff fe98 	bl	8014eb4 <__sinit>
 8015184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015188:	0719      	lsls	r1, r3, #28
 801518a:	d422      	bmi.n	80151d2 <__swsetup_r+0x62>
 801518c:	06da      	lsls	r2, r3, #27
 801518e:	d407      	bmi.n	80151a0 <__swsetup_r+0x30>
 8015190:	2209      	movs	r2, #9
 8015192:	602a      	str	r2, [r5, #0]
 8015194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015198:	81a3      	strh	r3, [r4, #12]
 801519a:	f04f 30ff 	mov.w	r0, #4294967295
 801519e:	e033      	b.n	8015208 <__swsetup_r+0x98>
 80151a0:	0758      	lsls	r0, r3, #29
 80151a2:	d512      	bpl.n	80151ca <__swsetup_r+0x5a>
 80151a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80151a6:	b141      	cbz	r1, 80151ba <__swsetup_r+0x4a>
 80151a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80151ac:	4299      	cmp	r1, r3
 80151ae:	d002      	beq.n	80151b6 <__swsetup_r+0x46>
 80151b0:	4628      	mov	r0, r5
 80151b2:	f000 f8bf 	bl	8015334 <_free_r>
 80151b6:	2300      	movs	r3, #0
 80151b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80151ba:	89a3      	ldrh	r3, [r4, #12]
 80151bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80151c0:	81a3      	strh	r3, [r4, #12]
 80151c2:	2300      	movs	r3, #0
 80151c4:	6063      	str	r3, [r4, #4]
 80151c6:	6923      	ldr	r3, [r4, #16]
 80151c8:	6023      	str	r3, [r4, #0]
 80151ca:	89a3      	ldrh	r3, [r4, #12]
 80151cc:	f043 0308 	orr.w	r3, r3, #8
 80151d0:	81a3      	strh	r3, [r4, #12]
 80151d2:	6923      	ldr	r3, [r4, #16]
 80151d4:	b94b      	cbnz	r3, 80151ea <__swsetup_r+0x7a>
 80151d6:	89a3      	ldrh	r3, [r4, #12]
 80151d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80151dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80151e0:	d003      	beq.n	80151ea <__swsetup_r+0x7a>
 80151e2:	4621      	mov	r1, r4
 80151e4:	4628      	mov	r0, r5
 80151e6:	f000 fde7 	bl	8015db8 <__smakebuf_r>
 80151ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151ee:	f013 0201 	ands.w	r2, r3, #1
 80151f2:	d00a      	beq.n	801520a <__swsetup_r+0x9a>
 80151f4:	2200      	movs	r2, #0
 80151f6:	60a2      	str	r2, [r4, #8]
 80151f8:	6962      	ldr	r2, [r4, #20]
 80151fa:	4252      	negs	r2, r2
 80151fc:	61a2      	str	r2, [r4, #24]
 80151fe:	6922      	ldr	r2, [r4, #16]
 8015200:	b942      	cbnz	r2, 8015214 <__swsetup_r+0xa4>
 8015202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015206:	d1c5      	bne.n	8015194 <__swsetup_r+0x24>
 8015208:	bd38      	pop	{r3, r4, r5, pc}
 801520a:	0799      	lsls	r1, r3, #30
 801520c:	bf58      	it	pl
 801520e:	6962      	ldrpl	r2, [r4, #20]
 8015210:	60a2      	str	r2, [r4, #8]
 8015212:	e7f4      	b.n	80151fe <__swsetup_r+0x8e>
 8015214:	2000      	movs	r0, #0
 8015216:	e7f7      	b.n	8015208 <__swsetup_r+0x98>
 8015218:	20000234 	.word	0x20000234

0801521c <memset>:
 801521c:	4402      	add	r2, r0
 801521e:	4603      	mov	r3, r0
 8015220:	4293      	cmp	r3, r2
 8015222:	d100      	bne.n	8015226 <memset+0xa>
 8015224:	4770      	bx	lr
 8015226:	f803 1b01 	strb.w	r1, [r3], #1
 801522a:	e7f9      	b.n	8015220 <memset+0x4>

0801522c <_close_r>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4d06      	ldr	r5, [pc, #24]	@ (8015248 <_close_r+0x1c>)
 8015230:	2300      	movs	r3, #0
 8015232:	4604      	mov	r4, r0
 8015234:	4608      	mov	r0, r1
 8015236:	602b      	str	r3, [r5, #0]
 8015238:	f7ed faa3 	bl	8002782 <_close>
 801523c:	1c43      	adds	r3, r0, #1
 801523e:	d102      	bne.n	8015246 <_close_r+0x1a>
 8015240:	682b      	ldr	r3, [r5, #0]
 8015242:	b103      	cbz	r3, 8015246 <_close_r+0x1a>
 8015244:	6023      	str	r3, [r4, #0]
 8015246:	bd38      	pop	{r3, r4, r5, pc}
 8015248:	20000ef4 	.word	0x20000ef4

0801524c <_lseek_r>:
 801524c:	b538      	push	{r3, r4, r5, lr}
 801524e:	4d07      	ldr	r5, [pc, #28]	@ (801526c <_lseek_r+0x20>)
 8015250:	4604      	mov	r4, r0
 8015252:	4608      	mov	r0, r1
 8015254:	4611      	mov	r1, r2
 8015256:	2200      	movs	r2, #0
 8015258:	602a      	str	r2, [r5, #0]
 801525a:	461a      	mov	r2, r3
 801525c:	f7ed fab8 	bl	80027d0 <_lseek>
 8015260:	1c43      	adds	r3, r0, #1
 8015262:	d102      	bne.n	801526a <_lseek_r+0x1e>
 8015264:	682b      	ldr	r3, [r5, #0]
 8015266:	b103      	cbz	r3, 801526a <_lseek_r+0x1e>
 8015268:	6023      	str	r3, [r4, #0]
 801526a:	bd38      	pop	{r3, r4, r5, pc}
 801526c:	20000ef4 	.word	0x20000ef4

08015270 <_read_r>:
 8015270:	b538      	push	{r3, r4, r5, lr}
 8015272:	4d07      	ldr	r5, [pc, #28]	@ (8015290 <_read_r+0x20>)
 8015274:	4604      	mov	r4, r0
 8015276:	4608      	mov	r0, r1
 8015278:	4611      	mov	r1, r2
 801527a:	2200      	movs	r2, #0
 801527c:	602a      	str	r2, [r5, #0]
 801527e:	461a      	mov	r2, r3
 8015280:	f7ed fa62 	bl	8002748 <_read>
 8015284:	1c43      	adds	r3, r0, #1
 8015286:	d102      	bne.n	801528e <_read_r+0x1e>
 8015288:	682b      	ldr	r3, [r5, #0]
 801528a:	b103      	cbz	r3, 801528e <_read_r+0x1e>
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	bd38      	pop	{r3, r4, r5, pc}
 8015290:	20000ef4 	.word	0x20000ef4

08015294 <_sbrk_r>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	4d06      	ldr	r5, [pc, #24]	@ (80152b0 <_sbrk_r+0x1c>)
 8015298:	2300      	movs	r3, #0
 801529a:	4604      	mov	r4, r0
 801529c:	4608      	mov	r0, r1
 801529e:	602b      	str	r3, [r5, #0]
 80152a0:	f7ed faa4 	bl	80027ec <_sbrk>
 80152a4:	1c43      	adds	r3, r0, #1
 80152a6:	d102      	bne.n	80152ae <_sbrk_r+0x1a>
 80152a8:	682b      	ldr	r3, [r5, #0]
 80152aa:	b103      	cbz	r3, 80152ae <_sbrk_r+0x1a>
 80152ac:	6023      	str	r3, [r4, #0]
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	20000ef4 	.word	0x20000ef4

080152b4 <_write_r>:
 80152b4:	b538      	push	{r3, r4, r5, lr}
 80152b6:	4d07      	ldr	r5, [pc, #28]	@ (80152d4 <_write_r+0x20>)
 80152b8:	4604      	mov	r4, r0
 80152ba:	4608      	mov	r0, r1
 80152bc:	4611      	mov	r1, r2
 80152be:	2200      	movs	r2, #0
 80152c0:	602a      	str	r2, [r5, #0]
 80152c2:	461a      	mov	r2, r3
 80152c4:	f7eb fe95 	bl	8000ff2 <_write>
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d102      	bne.n	80152d2 <_write_r+0x1e>
 80152cc:	682b      	ldr	r3, [r5, #0]
 80152ce:	b103      	cbz	r3, 80152d2 <_write_r+0x1e>
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	bd38      	pop	{r3, r4, r5, pc}
 80152d4:	20000ef4 	.word	0x20000ef4

080152d8 <__errno>:
 80152d8:	4b01      	ldr	r3, [pc, #4]	@ (80152e0 <__errno+0x8>)
 80152da:	6818      	ldr	r0, [r3, #0]
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	20000234 	.word	0x20000234

080152e4 <__libc_init_array>:
 80152e4:	b570      	push	{r4, r5, r6, lr}
 80152e6:	4d0d      	ldr	r5, [pc, #52]	@ (801531c <__libc_init_array+0x38>)
 80152e8:	4c0d      	ldr	r4, [pc, #52]	@ (8015320 <__libc_init_array+0x3c>)
 80152ea:	1b64      	subs	r4, r4, r5
 80152ec:	10a4      	asrs	r4, r4, #2
 80152ee:	2600      	movs	r6, #0
 80152f0:	42a6      	cmp	r6, r4
 80152f2:	d109      	bne.n	8015308 <__libc_init_array+0x24>
 80152f4:	4d0b      	ldr	r5, [pc, #44]	@ (8015324 <__libc_init_array+0x40>)
 80152f6:	4c0c      	ldr	r4, [pc, #48]	@ (8015328 <__libc_init_array+0x44>)
 80152f8:	f001 fdb4 	bl	8016e64 <_init>
 80152fc:	1b64      	subs	r4, r4, r5
 80152fe:	10a4      	asrs	r4, r4, #2
 8015300:	2600      	movs	r6, #0
 8015302:	42a6      	cmp	r6, r4
 8015304:	d105      	bne.n	8015312 <__libc_init_array+0x2e>
 8015306:	bd70      	pop	{r4, r5, r6, pc}
 8015308:	f855 3b04 	ldr.w	r3, [r5], #4
 801530c:	4798      	blx	r3
 801530e:	3601      	adds	r6, #1
 8015310:	e7ee      	b.n	80152f0 <__libc_init_array+0xc>
 8015312:	f855 3b04 	ldr.w	r3, [r5], #4
 8015316:	4798      	blx	r3
 8015318:	3601      	adds	r6, #1
 801531a:	e7f2      	b.n	8015302 <__libc_init_array+0x1e>
 801531c:	08017c90 	.word	0x08017c90
 8015320:	08017c90 	.word	0x08017c90
 8015324:	08017c90 	.word	0x08017c90
 8015328:	08017c94 	.word	0x08017c94

0801532c <__retarget_lock_init_recursive>:
 801532c:	4770      	bx	lr

0801532e <__retarget_lock_acquire_recursive>:
 801532e:	4770      	bx	lr

08015330 <__retarget_lock_release_recursive>:
 8015330:	4770      	bx	lr
	...

08015334 <_free_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4605      	mov	r5, r0
 8015338:	2900      	cmp	r1, #0
 801533a:	d041      	beq.n	80153c0 <_free_r+0x8c>
 801533c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015340:	1f0c      	subs	r4, r1, #4
 8015342:	2b00      	cmp	r3, #0
 8015344:	bfb8      	it	lt
 8015346:	18e4      	addlt	r4, r4, r3
 8015348:	f7ff fd1c 	bl	8014d84 <__malloc_lock>
 801534c:	4a1d      	ldr	r2, [pc, #116]	@ (80153c4 <_free_r+0x90>)
 801534e:	6813      	ldr	r3, [r2, #0]
 8015350:	b933      	cbnz	r3, 8015360 <_free_r+0x2c>
 8015352:	6063      	str	r3, [r4, #4]
 8015354:	6014      	str	r4, [r2, #0]
 8015356:	4628      	mov	r0, r5
 8015358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801535c:	f7ff bd18 	b.w	8014d90 <__malloc_unlock>
 8015360:	42a3      	cmp	r3, r4
 8015362:	d908      	bls.n	8015376 <_free_r+0x42>
 8015364:	6820      	ldr	r0, [r4, #0]
 8015366:	1821      	adds	r1, r4, r0
 8015368:	428b      	cmp	r3, r1
 801536a:	bf01      	itttt	eq
 801536c:	6819      	ldreq	r1, [r3, #0]
 801536e:	685b      	ldreq	r3, [r3, #4]
 8015370:	1809      	addeq	r1, r1, r0
 8015372:	6021      	streq	r1, [r4, #0]
 8015374:	e7ed      	b.n	8015352 <_free_r+0x1e>
 8015376:	461a      	mov	r2, r3
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	b10b      	cbz	r3, 8015380 <_free_r+0x4c>
 801537c:	42a3      	cmp	r3, r4
 801537e:	d9fa      	bls.n	8015376 <_free_r+0x42>
 8015380:	6811      	ldr	r1, [r2, #0]
 8015382:	1850      	adds	r0, r2, r1
 8015384:	42a0      	cmp	r0, r4
 8015386:	d10b      	bne.n	80153a0 <_free_r+0x6c>
 8015388:	6820      	ldr	r0, [r4, #0]
 801538a:	4401      	add	r1, r0
 801538c:	1850      	adds	r0, r2, r1
 801538e:	4283      	cmp	r3, r0
 8015390:	6011      	str	r1, [r2, #0]
 8015392:	d1e0      	bne.n	8015356 <_free_r+0x22>
 8015394:	6818      	ldr	r0, [r3, #0]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	6053      	str	r3, [r2, #4]
 801539a:	4408      	add	r0, r1
 801539c:	6010      	str	r0, [r2, #0]
 801539e:	e7da      	b.n	8015356 <_free_r+0x22>
 80153a0:	d902      	bls.n	80153a8 <_free_r+0x74>
 80153a2:	230c      	movs	r3, #12
 80153a4:	602b      	str	r3, [r5, #0]
 80153a6:	e7d6      	b.n	8015356 <_free_r+0x22>
 80153a8:	6820      	ldr	r0, [r4, #0]
 80153aa:	1821      	adds	r1, r4, r0
 80153ac:	428b      	cmp	r3, r1
 80153ae:	bf04      	itt	eq
 80153b0:	6819      	ldreq	r1, [r3, #0]
 80153b2:	685b      	ldreq	r3, [r3, #4]
 80153b4:	6063      	str	r3, [r4, #4]
 80153b6:	bf04      	itt	eq
 80153b8:	1809      	addeq	r1, r1, r0
 80153ba:	6021      	streq	r1, [r4, #0]
 80153bc:	6054      	str	r4, [r2, #4]
 80153be:	e7ca      	b.n	8015356 <_free_r+0x22>
 80153c0:	bd38      	pop	{r3, r4, r5, pc}
 80153c2:	bf00      	nop
 80153c4:	20000db4 	.word	0x20000db4

080153c8 <__ssputs_r>:
 80153c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153cc:	688e      	ldr	r6, [r1, #8]
 80153ce:	461f      	mov	r7, r3
 80153d0:	42be      	cmp	r6, r7
 80153d2:	680b      	ldr	r3, [r1, #0]
 80153d4:	4682      	mov	sl, r0
 80153d6:	460c      	mov	r4, r1
 80153d8:	4690      	mov	r8, r2
 80153da:	d82d      	bhi.n	8015438 <__ssputs_r+0x70>
 80153dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80153e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80153e4:	d026      	beq.n	8015434 <__ssputs_r+0x6c>
 80153e6:	6965      	ldr	r5, [r4, #20]
 80153e8:	6909      	ldr	r1, [r1, #16]
 80153ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153ee:	eba3 0901 	sub.w	r9, r3, r1
 80153f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80153f6:	1c7b      	adds	r3, r7, #1
 80153f8:	444b      	add	r3, r9
 80153fa:	106d      	asrs	r5, r5, #1
 80153fc:	429d      	cmp	r5, r3
 80153fe:	bf38      	it	cc
 8015400:	461d      	movcc	r5, r3
 8015402:	0553      	lsls	r3, r2, #21
 8015404:	d527      	bpl.n	8015456 <__ssputs_r+0x8e>
 8015406:	4629      	mov	r1, r5
 8015408:	f7ff fc3c 	bl	8014c84 <_malloc_r>
 801540c:	4606      	mov	r6, r0
 801540e:	b360      	cbz	r0, 801546a <__ssputs_r+0xa2>
 8015410:	6921      	ldr	r1, [r4, #16]
 8015412:	464a      	mov	r2, r9
 8015414:	f000 fd48 	bl	8015ea8 <memcpy>
 8015418:	89a3      	ldrh	r3, [r4, #12]
 801541a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801541e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015422:	81a3      	strh	r3, [r4, #12]
 8015424:	6126      	str	r6, [r4, #16]
 8015426:	6165      	str	r5, [r4, #20]
 8015428:	444e      	add	r6, r9
 801542a:	eba5 0509 	sub.w	r5, r5, r9
 801542e:	6026      	str	r6, [r4, #0]
 8015430:	60a5      	str	r5, [r4, #8]
 8015432:	463e      	mov	r6, r7
 8015434:	42be      	cmp	r6, r7
 8015436:	d900      	bls.n	801543a <__ssputs_r+0x72>
 8015438:	463e      	mov	r6, r7
 801543a:	6820      	ldr	r0, [r4, #0]
 801543c:	4632      	mov	r2, r6
 801543e:	4641      	mov	r1, r8
 8015440:	f000 fcf6 	bl	8015e30 <memmove>
 8015444:	68a3      	ldr	r3, [r4, #8]
 8015446:	1b9b      	subs	r3, r3, r6
 8015448:	60a3      	str	r3, [r4, #8]
 801544a:	6823      	ldr	r3, [r4, #0]
 801544c:	4433      	add	r3, r6
 801544e:	6023      	str	r3, [r4, #0]
 8015450:	2000      	movs	r0, #0
 8015452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015456:	462a      	mov	r2, r5
 8015458:	f000 fd34 	bl	8015ec4 <_realloc_r>
 801545c:	4606      	mov	r6, r0
 801545e:	2800      	cmp	r0, #0
 8015460:	d1e0      	bne.n	8015424 <__ssputs_r+0x5c>
 8015462:	6921      	ldr	r1, [r4, #16]
 8015464:	4650      	mov	r0, sl
 8015466:	f7ff ff65 	bl	8015334 <_free_r>
 801546a:	230c      	movs	r3, #12
 801546c:	f8ca 3000 	str.w	r3, [sl]
 8015470:	89a3      	ldrh	r3, [r4, #12]
 8015472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015476:	81a3      	strh	r3, [r4, #12]
 8015478:	f04f 30ff 	mov.w	r0, #4294967295
 801547c:	e7e9      	b.n	8015452 <__ssputs_r+0x8a>
	...

08015480 <_svfiprintf_r>:
 8015480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015484:	4698      	mov	r8, r3
 8015486:	898b      	ldrh	r3, [r1, #12]
 8015488:	061b      	lsls	r3, r3, #24
 801548a:	b09d      	sub	sp, #116	@ 0x74
 801548c:	4607      	mov	r7, r0
 801548e:	460d      	mov	r5, r1
 8015490:	4614      	mov	r4, r2
 8015492:	d510      	bpl.n	80154b6 <_svfiprintf_r+0x36>
 8015494:	690b      	ldr	r3, [r1, #16]
 8015496:	b973      	cbnz	r3, 80154b6 <_svfiprintf_r+0x36>
 8015498:	2140      	movs	r1, #64	@ 0x40
 801549a:	f7ff fbf3 	bl	8014c84 <_malloc_r>
 801549e:	6028      	str	r0, [r5, #0]
 80154a0:	6128      	str	r0, [r5, #16]
 80154a2:	b930      	cbnz	r0, 80154b2 <_svfiprintf_r+0x32>
 80154a4:	230c      	movs	r3, #12
 80154a6:	603b      	str	r3, [r7, #0]
 80154a8:	f04f 30ff 	mov.w	r0, #4294967295
 80154ac:	b01d      	add	sp, #116	@ 0x74
 80154ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b2:	2340      	movs	r3, #64	@ 0x40
 80154b4:	616b      	str	r3, [r5, #20]
 80154b6:	2300      	movs	r3, #0
 80154b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80154ba:	2320      	movs	r3, #32
 80154bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80154c4:	2330      	movs	r3, #48	@ 0x30
 80154c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015664 <_svfiprintf_r+0x1e4>
 80154ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80154ce:	f04f 0901 	mov.w	r9, #1
 80154d2:	4623      	mov	r3, r4
 80154d4:	469a      	mov	sl, r3
 80154d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154da:	b10a      	cbz	r2, 80154e0 <_svfiprintf_r+0x60>
 80154dc:	2a25      	cmp	r2, #37	@ 0x25
 80154de:	d1f9      	bne.n	80154d4 <_svfiprintf_r+0x54>
 80154e0:	ebba 0b04 	subs.w	fp, sl, r4
 80154e4:	d00b      	beq.n	80154fe <_svfiprintf_r+0x7e>
 80154e6:	465b      	mov	r3, fp
 80154e8:	4622      	mov	r2, r4
 80154ea:	4629      	mov	r1, r5
 80154ec:	4638      	mov	r0, r7
 80154ee:	f7ff ff6b 	bl	80153c8 <__ssputs_r>
 80154f2:	3001      	adds	r0, #1
 80154f4:	f000 80a7 	beq.w	8015646 <_svfiprintf_r+0x1c6>
 80154f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80154fa:	445a      	add	r2, fp
 80154fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80154fe:	f89a 3000 	ldrb.w	r3, [sl]
 8015502:	2b00      	cmp	r3, #0
 8015504:	f000 809f 	beq.w	8015646 <_svfiprintf_r+0x1c6>
 8015508:	2300      	movs	r3, #0
 801550a:	f04f 32ff 	mov.w	r2, #4294967295
 801550e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015512:	f10a 0a01 	add.w	sl, sl, #1
 8015516:	9304      	str	r3, [sp, #16]
 8015518:	9307      	str	r3, [sp, #28]
 801551a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801551e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015520:	4654      	mov	r4, sl
 8015522:	2205      	movs	r2, #5
 8015524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015528:	484e      	ldr	r0, [pc, #312]	@ (8015664 <_svfiprintf_r+0x1e4>)
 801552a:	f7ea fe71 	bl	8000210 <memchr>
 801552e:	9a04      	ldr	r2, [sp, #16]
 8015530:	b9d8      	cbnz	r0, 801556a <_svfiprintf_r+0xea>
 8015532:	06d0      	lsls	r0, r2, #27
 8015534:	bf44      	itt	mi
 8015536:	2320      	movmi	r3, #32
 8015538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801553c:	0711      	lsls	r1, r2, #28
 801553e:	bf44      	itt	mi
 8015540:	232b      	movmi	r3, #43	@ 0x2b
 8015542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015546:	f89a 3000 	ldrb.w	r3, [sl]
 801554a:	2b2a      	cmp	r3, #42	@ 0x2a
 801554c:	d015      	beq.n	801557a <_svfiprintf_r+0xfa>
 801554e:	9a07      	ldr	r2, [sp, #28]
 8015550:	4654      	mov	r4, sl
 8015552:	2000      	movs	r0, #0
 8015554:	f04f 0c0a 	mov.w	ip, #10
 8015558:	4621      	mov	r1, r4
 801555a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801555e:	3b30      	subs	r3, #48	@ 0x30
 8015560:	2b09      	cmp	r3, #9
 8015562:	d94b      	bls.n	80155fc <_svfiprintf_r+0x17c>
 8015564:	b1b0      	cbz	r0, 8015594 <_svfiprintf_r+0x114>
 8015566:	9207      	str	r2, [sp, #28]
 8015568:	e014      	b.n	8015594 <_svfiprintf_r+0x114>
 801556a:	eba0 0308 	sub.w	r3, r0, r8
 801556e:	fa09 f303 	lsl.w	r3, r9, r3
 8015572:	4313      	orrs	r3, r2
 8015574:	9304      	str	r3, [sp, #16]
 8015576:	46a2      	mov	sl, r4
 8015578:	e7d2      	b.n	8015520 <_svfiprintf_r+0xa0>
 801557a:	9b03      	ldr	r3, [sp, #12]
 801557c:	1d19      	adds	r1, r3, #4
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	9103      	str	r1, [sp, #12]
 8015582:	2b00      	cmp	r3, #0
 8015584:	bfbb      	ittet	lt
 8015586:	425b      	neglt	r3, r3
 8015588:	f042 0202 	orrlt.w	r2, r2, #2
 801558c:	9307      	strge	r3, [sp, #28]
 801558e:	9307      	strlt	r3, [sp, #28]
 8015590:	bfb8      	it	lt
 8015592:	9204      	strlt	r2, [sp, #16]
 8015594:	7823      	ldrb	r3, [r4, #0]
 8015596:	2b2e      	cmp	r3, #46	@ 0x2e
 8015598:	d10a      	bne.n	80155b0 <_svfiprintf_r+0x130>
 801559a:	7863      	ldrb	r3, [r4, #1]
 801559c:	2b2a      	cmp	r3, #42	@ 0x2a
 801559e:	d132      	bne.n	8015606 <_svfiprintf_r+0x186>
 80155a0:	9b03      	ldr	r3, [sp, #12]
 80155a2:	1d1a      	adds	r2, r3, #4
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	9203      	str	r2, [sp, #12]
 80155a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155ac:	3402      	adds	r4, #2
 80155ae:	9305      	str	r3, [sp, #20]
 80155b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015674 <_svfiprintf_r+0x1f4>
 80155b4:	7821      	ldrb	r1, [r4, #0]
 80155b6:	2203      	movs	r2, #3
 80155b8:	4650      	mov	r0, sl
 80155ba:	f7ea fe29 	bl	8000210 <memchr>
 80155be:	b138      	cbz	r0, 80155d0 <_svfiprintf_r+0x150>
 80155c0:	9b04      	ldr	r3, [sp, #16]
 80155c2:	eba0 000a 	sub.w	r0, r0, sl
 80155c6:	2240      	movs	r2, #64	@ 0x40
 80155c8:	4082      	lsls	r2, r0
 80155ca:	4313      	orrs	r3, r2
 80155cc:	3401      	adds	r4, #1
 80155ce:	9304      	str	r3, [sp, #16]
 80155d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155d4:	4824      	ldr	r0, [pc, #144]	@ (8015668 <_svfiprintf_r+0x1e8>)
 80155d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80155da:	2206      	movs	r2, #6
 80155dc:	f7ea fe18 	bl	8000210 <memchr>
 80155e0:	2800      	cmp	r0, #0
 80155e2:	d036      	beq.n	8015652 <_svfiprintf_r+0x1d2>
 80155e4:	4b21      	ldr	r3, [pc, #132]	@ (801566c <_svfiprintf_r+0x1ec>)
 80155e6:	bb1b      	cbnz	r3, 8015630 <_svfiprintf_r+0x1b0>
 80155e8:	9b03      	ldr	r3, [sp, #12]
 80155ea:	3307      	adds	r3, #7
 80155ec:	f023 0307 	bic.w	r3, r3, #7
 80155f0:	3308      	adds	r3, #8
 80155f2:	9303      	str	r3, [sp, #12]
 80155f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155f6:	4433      	add	r3, r6
 80155f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80155fa:	e76a      	b.n	80154d2 <_svfiprintf_r+0x52>
 80155fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015600:	460c      	mov	r4, r1
 8015602:	2001      	movs	r0, #1
 8015604:	e7a8      	b.n	8015558 <_svfiprintf_r+0xd8>
 8015606:	2300      	movs	r3, #0
 8015608:	3401      	adds	r4, #1
 801560a:	9305      	str	r3, [sp, #20]
 801560c:	4619      	mov	r1, r3
 801560e:	f04f 0c0a 	mov.w	ip, #10
 8015612:	4620      	mov	r0, r4
 8015614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015618:	3a30      	subs	r2, #48	@ 0x30
 801561a:	2a09      	cmp	r2, #9
 801561c:	d903      	bls.n	8015626 <_svfiprintf_r+0x1a6>
 801561e:	2b00      	cmp	r3, #0
 8015620:	d0c6      	beq.n	80155b0 <_svfiprintf_r+0x130>
 8015622:	9105      	str	r1, [sp, #20]
 8015624:	e7c4      	b.n	80155b0 <_svfiprintf_r+0x130>
 8015626:	fb0c 2101 	mla	r1, ip, r1, r2
 801562a:	4604      	mov	r4, r0
 801562c:	2301      	movs	r3, #1
 801562e:	e7f0      	b.n	8015612 <_svfiprintf_r+0x192>
 8015630:	ab03      	add	r3, sp, #12
 8015632:	9300      	str	r3, [sp, #0]
 8015634:	462a      	mov	r2, r5
 8015636:	4b0e      	ldr	r3, [pc, #56]	@ (8015670 <_svfiprintf_r+0x1f0>)
 8015638:	a904      	add	r1, sp, #16
 801563a:	4638      	mov	r0, r7
 801563c:	f3af 8000 	nop.w
 8015640:	1c42      	adds	r2, r0, #1
 8015642:	4606      	mov	r6, r0
 8015644:	d1d6      	bne.n	80155f4 <_svfiprintf_r+0x174>
 8015646:	89ab      	ldrh	r3, [r5, #12]
 8015648:	065b      	lsls	r3, r3, #25
 801564a:	f53f af2d 	bmi.w	80154a8 <_svfiprintf_r+0x28>
 801564e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015650:	e72c      	b.n	80154ac <_svfiprintf_r+0x2c>
 8015652:	ab03      	add	r3, sp, #12
 8015654:	9300      	str	r3, [sp, #0]
 8015656:	462a      	mov	r2, r5
 8015658:	4b05      	ldr	r3, [pc, #20]	@ (8015670 <_svfiprintf_r+0x1f0>)
 801565a:	a904      	add	r1, sp, #16
 801565c:	4638      	mov	r0, r7
 801565e:	f000 f9bb 	bl	80159d8 <_printf_i>
 8015662:	e7ed      	b.n	8015640 <_svfiprintf_r+0x1c0>
 8015664:	08017c10 	.word	0x08017c10
 8015668:	08017c1a 	.word	0x08017c1a
 801566c:	00000000 	.word	0x00000000
 8015670:	080153c9 	.word	0x080153c9
 8015674:	08017c16 	.word	0x08017c16

08015678 <__sfputc_r>:
 8015678:	6893      	ldr	r3, [r2, #8]
 801567a:	3b01      	subs	r3, #1
 801567c:	2b00      	cmp	r3, #0
 801567e:	b410      	push	{r4}
 8015680:	6093      	str	r3, [r2, #8]
 8015682:	da08      	bge.n	8015696 <__sfputc_r+0x1e>
 8015684:	6994      	ldr	r4, [r2, #24]
 8015686:	42a3      	cmp	r3, r4
 8015688:	db01      	blt.n	801568e <__sfputc_r+0x16>
 801568a:	290a      	cmp	r1, #10
 801568c:	d103      	bne.n	8015696 <__sfputc_r+0x1e>
 801568e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015692:	f7ff bd2e 	b.w	80150f2 <__swbuf_r>
 8015696:	6813      	ldr	r3, [r2, #0]
 8015698:	1c58      	adds	r0, r3, #1
 801569a:	6010      	str	r0, [r2, #0]
 801569c:	7019      	strb	r1, [r3, #0]
 801569e:	4608      	mov	r0, r1
 80156a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156a4:	4770      	bx	lr

080156a6 <__sfputs_r>:
 80156a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156a8:	4606      	mov	r6, r0
 80156aa:	460f      	mov	r7, r1
 80156ac:	4614      	mov	r4, r2
 80156ae:	18d5      	adds	r5, r2, r3
 80156b0:	42ac      	cmp	r4, r5
 80156b2:	d101      	bne.n	80156b8 <__sfputs_r+0x12>
 80156b4:	2000      	movs	r0, #0
 80156b6:	e007      	b.n	80156c8 <__sfputs_r+0x22>
 80156b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156bc:	463a      	mov	r2, r7
 80156be:	4630      	mov	r0, r6
 80156c0:	f7ff ffda 	bl	8015678 <__sfputc_r>
 80156c4:	1c43      	adds	r3, r0, #1
 80156c6:	d1f3      	bne.n	80156b0 <__sfputs_r+0xa>
 80156c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080156cc <_vfiprintf_r>:
 80156cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d0:	460d      	mov	r5, r1
 80156d2:	b09d      	sub	sp, #116	@ 0x74
 80156d4:	4614      	mov	r4, r2
 80156d6:	4698      	mov	r8, r3
 80156d8:	4606      	mov	r6, r0
 80156da:	b118      	cbz	r0, 80156e4 <_vfiprintf_r+0x18>
 80156dc:	6a03      	ldr	r3, [r0, #32]
 80156de:	b90b      	cbnz	r3, 80156e4 <_vfiprintf_r+0x18>
 80156e0:	f7ff fbe8 	bl	8014eb4 <__sinit>
 80156e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156e6:	07d9      	lsls	r1, r3, #31
 80156e8:	d405      	bmi.n	80156f6 <_vfiprintf_r+0x2a>
 80156ea:	89ab      	ldrh	r3, [r5, #12]
 80156ec:	059a      	lsls	r2, r3, #22
 80156ee:	d402      	bmi.n	80156f6 <_vfiprintf_r+0x2a>
 80156f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156f2:	f7ff fe1c 	bl	801532e <__retarget_lock_acquire_recursive>
 80156f6:	89ab      	ldrh	r3, [r5, #12]
 80156f8:	071b      	lsls	r3, r3, #28
 80156fa:	d501      	bpl.n	8015700 <_vfiprintf_r+0x34>
 80156fc:	692b      	ldr	r3, [r5, #16]
 80156fe:	b99b      	cbnz	r3, 8015728 <_vfiprintf_r+0x5c>
 8015700:	4629      	mov	r1, r5
 8015702:	4630      	mov	r0, r6
 8015704:	f7ff fd34 	bl	8015170 <__swsetup_r>
 8015708:	b170      	cbz	r0, 8015728 <_vfiprintf_r+0x5c>
 801570a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801570c:	07dc      	lsls	r4, r3, #31
 801570e:	d504      	bpl.n	801571a <_vfiprintf_r+0x4e>
 8015710:	f04f 30ff 	mov.w	r0, #4294967295
 8015714:	b01d      	add	sp, #116	@ 0x74
 8015716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801571a:	89ab      	ldrh	r3, [r5, #12]
 801571c:	0598      	lsls	r0, r3, #22
 801571e:	d4f7      	bmi.n	8015710 <_vfiprintf_r+0x44>
 8015720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015722:	f7ff fe05 	bl	8015330 <__retarget_lock_release_recursive>
 8015726:	e7f3      	b.n	8015710 <_vfiprintf_r+0x44>
 8015728:	2300      	movs	r3, #0
 801572a:	9309      	str	r3, [sp, #36]	@ 0x24
 801572c:	2320      	movs	r3, #32
 801572e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015732:	f8cd 800c 	str.w	r8, [sp, #12]
 8015736:	2330      	movs	r3, #48	@ 0x30
 8015738:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80158e8 <_vfiprintf_r+0x21c>
 801573c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015740:	f04f 0901 	mov.w	r9, #1
 8015744:	4623      	mov	r3, r4
 8015746:	469a      	mov	sl, r3
 8015748:	f813 2b01 	ldrb.w	r2, [r3], #1
 801574c:	b10a      	cbz	r2, 8015752 <_vfiprintf_r+0x86>
 801574e:	2a25      	cmp	r2, #37	@ 0x25
 8015750:	d1f9      	bne.n	8015746 <_vfiprintf_r+0x7a>
 8015752:	ebba 0b04 	subs.w	fp, sl, r4
 8015756:	d00b      	beq.n	8015770 <_vfiprintf_r+0xa4>
 8015758:	465b      	mov	r3, fp
 801575a:	4622      	mov	r2, r4
 801575c:	4629      	mov	r1, r5
 801575e:	4630      	mov	r0, r6
 8015760:	f7ff ffa1 	bl	80156a6 <__sfputs_r>
 8015764:	3001      	adds	r0, #1
 8015766:	f000 80a7 	beq.w	80158b8 <_vfiprintf_r+0x1ec>
 801576a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801576c:	445a      	add	r2, fp
 801576e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015770:	f89a 3000 	ldrb.w	r3, [sl]
 8015774:	2b00      	cmp	r3, #0
 8015776:	f000 809f 	beq.w	80158b8 <_vfiprintf_r+0x1ec>
 801577a:	2300      	movs	r3, #0
 801577c:	f04f 32ff 	mov.w	r2, #4294967295
 8015780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015784:	f10a 0a01 	add.w	sl, sl, #1
 8015788:	9304      	str	r3, [sp, #16]
 801578a:	9307      	str	r3, [sp, #28]
 801578c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015790:	931a      	str	r3, [sp, #104]	@ 0x68
 8015792:	4654      	mov	r4, sl
 8015794:	2205      	movs	r2, #5
 8015796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801579a:	4853      	ldr	r0, [pc, #332]	@ (80158e8 <_vfiprintf_r+0x21c>)
 801579c:	f7ea fd38 	bl	8000210 <memchr>
 80157a0:	9a04      	ldr	r2, [sp, #16]
 80157a2:	b9d8      	cbnz	r0, 80157dc <_vfiprintf_r+0x110>
 80157a4:	06d1      	lsls	r1, r2, #27
 80157a6:	bf44      	itt	mi
 80157a8:	2320      	movmi	r3, #32
 80157aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157ae:	0713      	lsls	r3, r2, #28
 80157b0:	bf44      	itt	mi
 80157b2:	232b      	movmi	r3, #43	@ 0x2b
 80157b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157b8:	f89a 3000 	ldrb.w	r3, [sl]
 80157bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80157be:	d015      	beq.n	80157ec <_vfiprintf_r+0x120>
 80157c0:	9a07      	ldr	r2, [sp, #28]
 80157c2:	4654      	mov	r4, sl
 80157c4:	2000      	movs	r0, #0
 80157c6:	f04f 0c0a 	mov.w	ip, #10
 80157ca:	4621      	mov	r1, r4
 80157cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157d0:	3b30      	subs	r3, #48	@ 0x30
 80157d2:	2b09      	cmp	r3, #9
 80157d4:	d94b      	bls.n	801586e <_vfiprintf_r+0x1a2>
 80157d6:	b1b0      	cbz	r0, 8015806 <_vfiprintf_r+0x13a>
 80157d8:	9207      	str	r2, [sp, #28]
 80157da:	e014      	b.n	8015806 <_vfiprintf_r+0x13a>
 80157dc:	eba0 0308 	sub.w	r3, r0, r8
 80157e0:	fa09 f303 	lsl.w	r3, r9, r3
 80157e4:	4313      	orrs	r3, r2
 80157e6:	9304      	str	r3, [sp, #16]
 80157e8:	46a2      	mov	sl, r4
 80157ea:	e7d2      	b.n	8015792 <_vfiprintf_r+0xc6>
 80157ec:	9b03      	ldr	r3, [sp, #12]
 80157ee:	1d19      	adds	r1, r3, #4
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	9103      	str	r1, [sp, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	bfbb      	ittet	lt
 80157f8:	425b      	neglt	r3, r3
 80157fa:	f042 0202 	orrlt.w	r2, r2, #2
 80157fe:	9307      	strge	r3, [sp, #28]
 8015800:	9307      	strlt	r3, [sp, #28]
 8015802:	bfb8      	it	lt
 8015804:	9204      	strlt	r2, [sp, #16]
 8015806:	7823      	ldrb	r3, [r4, #0]
 8015808:	2b2e      	cmp	r3, #46	@ 0x2e
 801580a:	d10a      	bne.n	8015822 <_vfiprintf_r+0x156>
 801580c:	7863      	ldrb	r3, [r4, #1]
 801580e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015810:	d132      	bne.n	8015878 <_vfiprintf_r+0x1ac>
 8015812:	9b03      	ldr	r3, [sp, #12]
 8015814:	1d1a      	adds	r2, r3, #4
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	9203      	str	r2, [sp, #12]
 801581a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801581e:	3402      	adds	r4, #2
 8015820:	9305      	str	r3, [sp, #20]
 8015822:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80158f8 <_vfiprintf_r+0x22c>
 8015826:	7821      	ldrb	r1, [r4, #0]
 8015828:	2203      	movs	r2, #3
 801582a:	4650      	mov	r0, sl
 801582c:	f7ea fcf0 	bl	8000210 <memchr>
 8015830:	b138      	cbz	r0, 8015842 <_vfiprintf_r+0x176>
 8015832:	9b04      	ldr	r3, [sp, #16]
 8015834:	eba0 000a 	sub.w	r0, r0, sl
 8015838:	2240      	movs	r2, #64	@ 0x40
 801583a:	4082      	lsls	r2, r0
 801583c:	4313      	orrs	r3, r2
 801583e:	3401      	adds	r4, #1
 8015840:	9304      	str	r3, [sp, #16]
 8015842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015846:	4829      	ldr	r0, [pc, #164]	@ (80158ec <_vfiprintf_r+0x220>)
 8015848:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801584c:	2206      	movs	r2, #6
 801584e:	f7ea fcdf 	bl	8000210 <memchr>
 8015852:	2800      	cmp	r0, #0
 8015854:	d03f      	beq.n	80158d6 <_vfiprintf_r+0x20a>
 8015856:	4b26      	ldr	r3, [pc, #152]	@ (80158f0 <_vfiprintf_r+0x224>)
 8015858:	bb1b      	cbnz	r3, 80158a2 <_vfiprintf_r+0x1d6>
 801585a:	9b03      	ldr	r3, [sp, #12]
 801585c:	3307      	adds	r3, #7
 801585e:	f023 0307 	bic.w	r3, r3, #7
 8015862:	3308      	adds	r3, #8
 8015864:	9303      	str	r3, [sp, #12]
 8015866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015868:	443b      	add	r3, r7
 801586a:	9309      	str	r3, [sp, #36]	@ 0x24
 801586c:	e76a      	b.n	8015744 <_vfiprintf_r+0x78>
 801586e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015872:	460c      	mov	r4, r1
 8015874:	2001      	movs	r0, #1
 8015876:	e7a8      	b.n	80157ca <_vfiprintf_r+0xfe>
 8015878:	2300      	movs	r3, #0
 801587a:	3401      	adds	r4, #1
 801587c:	9305      	str	r3, [sp, #20]
 801587e:	4619      	mov	r1, r3
 8015880:	f04f 0c0a 	mov.w	ip, #10
 8015884:	4620      	mov	r0, r4
 8015886:	f810 2b01 	ldrb.w	r2, [r0], #1
 801588a:	3a30      	subs	r2, #48	@ 0x30
 801588c:	2a09      	cmp	r2, #9
 801588e:	d903      	bls.n	8015898 <_vfiprintf_r+0x1cc>
 8015890:	2b00      	cmp	r3, #0
 8015892:	d0c6      	beq.n	8015822 <_vfiprintf_r+0x156>
 8015894:	9105      	str	r1, [sp, #20]
 8015896:	e7c4      	b.n	8015822 <_vfiprintf_r+0x156>
 8015898:	fb0c 2101 	mla	r1, ip, r1, r2
 801589c:	4604      	mov	r4, r0
 801589e:	2301      	movs	r3, #1
 80158a0:	e7f0      	b.n	8015884 <_vfiprintf_r+0x1b8>
 80158a2:	ab03      	add	r3, sp, #12
 80158a4:	9300      	str	r3, [sp, #0]
 80158a6:	462a      	mov	r2, r5
 80158a8:	4b12      	ldr	r3, [pc, #72]	@ (80158f4 <_vfiprintf_r+0x228>)
 80158aa:	a904      	add	r1, sp, #16
 80158ac:	4630      	mov	r0, r6
 80158ae:	f3af 8000 	nop.w
 80158b2:	4607      	mov	r7, r0
 80158b4:	1c78      	adds	r0, r7, #1
 80158b6:	d1d6      	bne.n	8015866 <_vfiprintf_r+0x19a>
 80158b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158ba:	07d9      	lsls	r1, r3, #31
 80158bc:	d405      	bmi.n	80158ca <_vfiprintf_r+0x1fe>
 80158be:	89ab      	ldrh	r3, [r5, #12]
 80158c0:	059a      	lsls	r2, r3, #22
 80158c2:	d402      	bmi.n	80158ca <_vfiprintf_r+0x1fe>
 80158c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158c6:	f7ff fd33 	bl	8015330 <__retarget_lock_release_recursive>
 80158ca:	89ab      	ldrh	r3, [r5, #12]
 80158cc:	065b      	lsls	r3, r3, #25
 80158ce:	f53f af1f 	bmi.w	8015710 <_vfiprintf_r+0x44>
 80158d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158d4:	e71e      	b.n	8015714 <_vfiprintf_r+0x48>
 80158d6:	ab03      	add	r3, sp, #12
 80158d8:	9300      	str	r3, [sp, #0]
 80158da:	462a      	mov	r2, r5
 80158dc:	4b05      	ldr	r3, [pc, #20]	@ (80158f4 <_vfiprintf_r+0x228>)
 80158de:	a904      	add	r1, sp, #16
 80158e0:	4630      	mov	r0, r6
 80158e2:	f000 f879 	bl	80159d8 <_printf_i>
 80158e6:	e7e4      	b.n	80158b2 <_vfiprintf_r+0x1e6>
 80158e8:	08017c10 	.word	0x08017c10
 80158ec:	08017c1a 	.word	0x08017c1a
 80158f0:	00000000 	.word	0x00000000
 80158f4:	080156a7 	.word	0x080156a7
 80158f8:	08017c16 	.word	0x08017c16

080158fc <_printf_common>:
 80158fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015900:	4616      	mov	r6, r2
 8015902:	4698      	mov	r8, r3
 8015904:	688a      	ldr	r2, [r1, #8]
 8015906:	690b      	ldr	r3, [r1, #16]
 8015908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801590c:	4293      	cmp	r3, r2
 801590e:	bfb8      	it	lt
 8015910:	4613      	movlt	r3, r2
 8015912:	6033      	str	r3, [r6, #0]
 8015914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015918:	4607      	mov	r7, r0
 801591a:	460c      	mov	r4, r1
 801591c:	b10a      	cbz	r2, 8015922 <_printf_common+0x26>
 801591e:	3301      	adds	r3, #1
 8015920:	6033      	str	r3, [r6, #0]
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	0699      	lsls	r1, r3, #26
 8015926:	bf42      	ittt	mi
 8015928:	6833      	ldrmi	r3, [r6, #0]
 801592a:	3302      	addmi	r3, #2
 801592c:	6033      	strmi	r3, [r6, #0]
 801592e:	6825      	ldr	r5, [r4, #0]
 8015930:	f015 0506 	ands.w	r5, r5, #6
 8015934:	d106      	bne.n	8015944 <_printf_common+0x48>
 8015936:	f104 0a19 	add.w	sl, r4, #25
 801593a:	68e3      	ldr	r3, [r4, #12]
 801593c:	6832      	ldr	r2, [r6, #0]
 801593e:	1a9b      	subs	r3, r3, r2
 8015940:	42ab      	cmp	r3, r5
 8015942:	dc26      	bgt.n	8015992 <_printf_common+0x96>
 8015944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015948:	6822      	ldr	r2, [r4, #0]
 801594a:	3b00      	subs	r3, #0
 801594c:	bf18      	it	ne
 801594e:	2301      	movne	r3, #1
 8015950:	0692      	lsls	r2, r2, #26
 8015952:	d42b      	bmi.n	80159ac <_printf_common+0xb0>
 8015954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015958:	4641      	mov	r1, r8
 801595a:	4638      	mov	r0, r7
 801595c:	47c8      	blx	r9
 801595e:	3001      	adds	r0, #1
 8015960:	d01e      	beq.n	80159a0 <_printf_common+0xa4>
 8015962:	6823      	ldr	r3, [r4, #0]
 8015964:	6922      	ldr	r2, [r4, #16]
 8015966:	f003 0306 	and.w	r3, r3, #6
 801596a:	2b04      	cmp	r3, #4
 801596c:	bf02      	ittt	eq
 801596e:	68e5      	ldreq	r5, [r4, #12]
 8015970:	6833      	ldreq	r3, [r6, #0]
 8015972:	1aed      	subeq	r5, r5, r3
 8015974:	68a3      	ldr	r3, [r4, #8]
 8015976:	bf0c      	ite	eq
 8015978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801597c:	2500      	movne	r5, #0
 801597e:	4293      	cmp	r3, r2
 8015980:	bfc4      	itt	gt
 8015982:	1a9b      	subgt	r3, r3, r2
 8015984:	18ed      	addgt	r5, r5, r3
 8015986:	2600      	movs	r6, #0
 8015988:	341a      	adds	r4, #26
 801598a:	42b5      	cmp	r5, r6
 801598c:	d11a      	bne.n	80159c4 <_printf_common+0xc8>
 801598e:	2000      	movs	r0, #0
 8015990:	e008      	b.n	80159a4 <_printf_common+0xa8>
 8015992:	2301      	movs	r3, #1
 8015994:	4652      	mov	r2, sl
 8015996:	4641      	mov	r1, r8
 8015998:	4638      	mov	r0, r7
 801599a:	47c8      	blx	r9
 801599c:	3001      	adds	r0, #1
 801599e:	d103      	bne.n	80159a8 <_printf_common+0xac>
 80159a0:	f04f 30ff 	mov.w	r0, #4294967295
 80159a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159a8:	3501      	adds	r5, #1
 80159aa:	e7c6      	b.n	801593a <_printf_common+0x3e>
 80159ac:	18e1      	adds	r1, r4, r3
 80159ae:	1c5a      	adds	r2, r3, #1
 80159b0:	2030      	movs	r0, #48	@ 0x30
 80159b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80159b6:	4422      	add	r2, r4
 80159b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80159bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80159c0:	3302      	adds	r3, #2
 80159c2:	e7c7      	b.n	8015954 <_printf_common+0x58>
 80159c4:	2301      	movs	r3, #1
 80159c6:	4622      	mov	r2, r4
 80159c8:	4641      	mov	r1, r8
 80159ca:	4638      	mov	r0, r7
 80159cc:	47c8      	blx	r9
 80159ce:	3001      	adds	r0, #1
 80159d0:	d0e6      	beq.n	80159a0 <_printf_common+0xa4>
 80159d2:	3601      	adds	r6, #1
 80159d4:	e7d9      	b.n	801598a <_printf_common+0x8e>
	...

080159d8 <_printf_i>:
 80159d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159dc:	7e0f      	ldrb	r7, [r1, #24]
 80159de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80159e0:	2f78      	cmp	r7, #120	@ 0x78
 80159e2:	4691      	mov	r9, r2
 80159e4:	4680      	mov	r8, r0
 80159e6:	460c      	mov	r4, r1
 80159e8:	469a      	mov	sl, r3
 80159ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80159ee:	d807      	bhi.n	8015a00 <_printf_i+0x28>
 80159f0:	2f62      	cmp	r7, #98	@ 0x62
 80159f2:	d80a      	bhi.n	8015a0a <_printf_i+0x32>
 80159f4:	2f00      	cmp	r7, #0
 80159f6:	f000 80d1 	beq.w	8015b9c <_printf_i+0x1c4>
 80159fa:	2f58      	cmp	r7, #88	@ 0x58
 80159fc:	f000 80b8 	beq.w	8015b70 <_printf_i+0x198>
 8015a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015a04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015a08:	e03a      	b.n	8015a80 <_printf_i+0xa8>
 8015a0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015a0e:	2b15      	cmp	r3, #21
 8015a10:	d8f6      	bhi.n	8015a00 <_printf_i+0x28>
 8015a12:	a101      	add	r1, pc, #4	@ (adr r1, 8015a18 <_printf_i+0x40>)
 8015a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015a18:	08015a71 	.word	0x08015a71
 8015a1c:	08015a85 	.word	0x08015a85
 8015a20:	08015a01 	.word	0x08015a01
 8015a24:	08015a01 	.word	0x08015a01
 8015a28:	08015a01 	.word	0x08015a01
 8015a2c:	08015a01 	.word	0x08015a01
 8015a30:	08015a85 	.word	0x08015a85
 8015a34:	08015a01 	.word	0x08015a01
 8015a38:	08015a01 	.word	0x08015a01
 8015a3c:	08015a01 	.word	0x08015a01
 8015a40:	08015a01 	.word	0x08015a01
 8015a44:	08015b83 	.word	0x08015b83
 8015a48:	08015aaf 	.word	0x08015aaf
 8015a4c:	08015b3d 	.word	0x08015b3d
 8015a50:	08015a01 	.word	0x08015a01
 8015a54:	08015a01 	.word	0x08015a01
 8015a58:	08015ba5 	.word	0x08015ba5
 8015a5c:	08015a01 	.word	0x08015a01
 8015a60:	08015aaf 	.word	0x08015aaf
 8015a64:	08015a01 	.word	0x08015a01
 8015a68:	08015a01 	.word	0x08015a01
 8015a6c:	08015b45 	.word	0x08015b45
 8015a70:	6833      	ldr	r3, [r6, #0]
 8015a72:	1d1a      	adds	r2, r3, #4
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	6032      	str	r2, [r6, #0]
 8015a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015a7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015a80:	2301      	movs	r3, #1
 8015a82:	e09c      	b.n	8015bbe <_printf_i+0x1e6>
 8015a84:	6833      	ldr	r3, [r6, #0]
 8015a86:	6820      	ldr	r0, [r4, #0]
 8015a88:	1d19      	adds	r1, r3, #4
 8015a8a:	6031      	str	r1, [r6, #0]
 8015a8c:	0606      	lsls	r6, r0, #24
 8015a8e:	d501      	bpl.n	8015a94 <_printf_i+0xbc>
 8015a90:	681d      	ldr	r5, [r3, #0]
 8015a92:	e003      	b.n	8015a9c <_printf_i+0xc4>
 8015a94:	0645      	lsls	r5, r0, #25
 8015a96:	d5fb      	bpl.n	8015a90 <_printf_i+0xb8>
 8015a98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015a9c:	2d00      	cmp	r5, #0
 8015a9e:	da03      	bge.n	8015aa8 <_printf_i+0xd0>
 8015aa0:	232d      	movs	r3, #45	@ 0x2d
 8015aa2:	426d      	negs	r5, r5
 8015aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015aa8:	4858      	ldr	r0, [pc, #352]	@ (8015c0c <_printf_i+0x234>)
 8015aaa:	230a      	movs	r3, #10
 8015aac:	e011      	b.n	8015ad2 <_printf_i+0xfa>
 8015aae:	6821      	ldr	r1, [r4, #0]
 8015ab0:	6833      	ldr	r3, [r6, #0]
 8015ab2:	0608      	lsls	r0, r1, #24
 8015ab4:	f853 5b04 	ldr.w	r5, [r3], #4
 8015ab8:	d402      	bmi.n	8015ac0 <_printf_i+0xe8>
 8015aba:	0649      	lsls	r1, r1, #25
 8015abc:	bf48      	it	mi
 8015abe:	b2ad      	uxthmi	r5, r5
 8015ac0:	2f6f      	cmp	r7, #111	@ 0x6f
 8015ac2:	4852      	ldr	r0, [pc, #328]	@ (8015c0c <_printf_i+0x234>)
 8015ac4:	6033      	str	r3, [r6, #0]
 8015ac6:	bf14      	ite	ne
 8015ac8:	230a      	movne	r3, #10
 8015aca:	2308      	moveq	r3, #8
 8015acc:	2100      	movs	r1, #0
 8015ace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015ad2:	6866      	ldr	r6, [r4, #4]
 8015ad4:	60a6      	str	r6, [r4, #8]
 8015ad6:	2e00      	cmp	r6, #0
 8015ad8:	db05      	blt.n	8015ae6 <_printf_i+0x10e>
 8015ada:	6821      	ldr	r1, [r4, #0]
 8015adc:	432e      	orrs	r6, r5
 8015ade:	f021 0104 	bic.w	r1, r1, #4
 8015ae2:	6021      	str	r1, [r4, #0]
 8015ae4:	d04b      	beq.n	8015b7e <_printf_i+0x1a6>
 8015ae6:	4616      	mov	r6, r2
 8015ae8:	fbb5 f1f3 	udiv	r1, r5, r3
 8015aec:	fb03 5711 	mls	r7, r3, r1, r5
 8015af0:	5dc7      	ldrb	r7, [r0, r7]
 8015af2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015af6:	462f      	mov	r7, r5
 8015af8:	42bb      	cmp	r3, r7
 8015afa:	460d      	mov	r5, r1
 8015afc:	d9f4      	bls.n	8015ae8 <_printf_i+0x110>
 8015afe:	2b08      	cmp	r3, #8
 8015b00:	d10b      	bne.n	8015b1a <_printf_i+0x142>
 8015b02:	6823      	ldr	r3, [r4, #0]
 8015b04:	07df      	lsls	r7, r3, #31
 8015b06:	d508      	bpl.n	8015b1a <_printf_i+0x142>
 8015b08:	6923      	ldr	r3, [r4, #16]
 8015b0a:	6861      	ldr	r1, [r4, #4]
 8015b0c:	4299      	cmp	r1, r3
 8015b0e:	bfde      	ittt	le
 8015b10:	2330      	movle	r3, #48	@ 0x30
 8015b12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015b16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015b1a:	1b92      	subs	r2, r2, r6
 8015b1c:	6122      	str	r2, [r4, #16]
 8015b1e:	f8cd a000 	str.w	sl, [sp]
 8015b22:	464b      	mov	r3, r9
 8015b24:	aa03      	add	r2, sp, #12
 8015b26:	4621      	mov	r1, r4
 8015b28:	4640      	mov	r0, r8
 8015b2a:	f7ff fee7 	bl	80158fc <_printf_common>
 8015b2e:	3001      	adds	r0, #1
 8015b30:	d14a      	bne.n	8015bc8 <_printf_i+0x1f0>
 8015b32:	f04f 30ff 	mov.w	r0, #4294967295
 8015b36:	b004      	add	sp, #16
 8015b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b3c:	6823      	ldr	r3, [r4, #0]
 8015b3e:	f043 0320 	orr.w	r3, r3, #32
 8015b42:	6023      	str	r3, [r4, #0]
 8015b44:	4832      	ldr	r0, [pc, #200]	@ (8015c10 <_printf_i+0x238>)
 8015b46:	2778      	movs	r7, #120	@ 0x78
 8015b48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015b4c:	6823      	ldr	r3, [r4, #0]
 8015b4e:	6831      	ldr	r1, [r6, #0]
 8015b50:	061f      	lsls	r7, r3, #24
 8015b52:	f851 5b04 	ldr.w	r5, [r1], #4
 8015b56:	d402      	bmi.n	8015b5e <_printf_i+0x186>
 8015b58:	065f      	lsls	r7, r3, #25
 8015b5a:	bf48      	it	mi
 8015b5c:	b2ad      	uxthmi	r5, r5
 8015b5e:	6031      	str	r1, [r6, #0]
 8015b60:	07d9      	lsls	r1, r3, #31
 8015b62:	bf44      	itt	mi
 8015b64:	f043 0320 	orrmi.w	r3, r3, #32
 8015b68:	6023      	strmi	r3, [r4, #0]
 8015b6a:	b11d      	cbz	r5, 8015b74 <_printf_i+0x19c>
 8015b6c:	2310      	movs	r3, #16
 8015b6e:	e7ad      	b.n	8015acc <_printf_i+0xf4>
 8015b70:	4826      	ldr	r0, [pc, #152]	@ (8015c0c <_printf_i+0x234>)
 8015b72:	e7e9      	b.n	8015b48 <_printf_i+0x170>
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	f023 0320 	bic.w	r3, r3, #32
 8015b7a:	6023      	str	r3, [r4, #0]
 8015b7c:	e7f6      	b.n	8015b6c <_printf_i+0x194>
 8015b7e:	4616      	mov	r6, r2
 8015b80:	e7bd      	b.n	8015afe <_printf_i+0x126>
 8015b82:	6833      	ldr	r3, [r6, #0]
 8015b84:	6825      	ldr	r5, [r4, #0]
 8015b86:	6961      	ldr	r1, [r4, #20]
 8015b88:	1d18      	adds	r0, r3, #4
 8015b8a:	6030      	str	r0, [r6, #0]
 8015b8c:	062e      	lsls	r6, r5, #24
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	d501      	bpl.n	8015b96 <_printf_i+0x1be>
 8015b92:	6019      	str	r1, [r3, #0]
 8015b94:	e002      	b.n	8015b9c <_printf_i+0x1c4>
 8015b96:	0668      	lsls	r0, r5, #25
 8015b98:	d5fb      	bpl.n	8015b92 <_printf_i+0x1ba>
 8015b9a:	8019      	strh	r1, [r3, #0]
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	6123      	str	r3, [r4, #16]
 8015ba0:	4616      	mov	r6, r2
 8015ba2:	e7bc      	b.n	8015b1e <_printf_i+0x146>
 8015ba4:	6833      	ldr	r3, [r6, #0]
 8015ba6:	1d1a      	adds	r2, r3, #4
 8015ba8:	6032      	str	r2, [r6, #0]
 8015baa:	681e      	ldr	r6, [r3, #0]
 8015bac:	6862      	ldr	r2, [r4, #4]
 8015bae:	2100      	movs	r1, #0
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f7ea fb2d 	bl	8000210 <memchr>
 8015bb6:	b108      	cbz	r0, 8015bbc <_printf_i+0x1e4>
 8015bb8:	1b80      	subs	r0, r0, r6
 8015bba:	6060      	str	r0, [r4, #4]
 8015bbc:	6863      	ldr	r3, [r4, #4]
 8015bbe:	6123      	str	r3, [r4, #16]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015bc6:	e7aa      	b.n	8015b1e <_printf_i+0x146>
 8015bc8:	6923      	ldr	r3, [r4, #16]
 8015bca:	4632      	mov	r2, r6
 8015bcc:	4649      	mov	r1, r9
 8015bce:	4640      	mov	r0, r8
 8015bd0:	47d0      	blx	sl
 8015bd2:	3001      	adds	r0, #1
 8015bd4:	d0ad      	beq.n	8015b32 <_printf_i+0x15a>
 8015bd6:	6823      	ldr	r3, [r4, #0]
 8015bd8:	079b      	lsls	r3, r3, #30
 8015bda:	d413      	bmi.n	8015c04 <_printf_i+0x22c>
 8015bdc:	68e0      	ldr	r0, [r4, #12]
 8015bde:	9b03      	ldr	r3, [sp, #12]
 8015be0:	4298      	cmp	r0, r3
 8015be2:	bfb8      	it	lt
 8015be4:	4618      	movlt	r0, r3
 8015be6:	e7a6      	b.n	8015b36 <_printf_i+0x15e>
 8015be8:	2301      	movs	r3, #1
 8015bea:	4632      	mov	r2, r6
 8015bec:	4649      	mov	r1, r9
 8015bee:	4640      	mov	r0, r8
 8015bf0:	47d0      	blx	sl
 8015bf2:	3001      	adds	r0, #1
 8015bf4:	d09d      	beq.n	8015b32 <_printf_i+0x15a>
 8015bf6:	3501      	adds	r5, #1
 8015bf8:	68e3      	ldr	r3, [r4, #12]
 8015bfa:	9903      	ldr	r1, [sp, #12]
 8015bfc:	1a5b      	subs	r3, r3, r1
 8015bfe:	42ab      	cmp	r3, r5
 8015c00:	dcf2      	bgt.n	8015be8 <_printf_i+0x210>
 8015c02:	e7eb      	b.n	8015bdc <_printf_i+0x204>
 8015c04:	2500      	movs	r5, #0
 8015c06:	f104 0619 	add.w	r6, r4, #25
 8015c0a:	e7f5      	b.n	8015bf8 <_printf_i+0x220>
 8015c0c:	08017c21 	.word	0x08017c21
 8015c10:	08017c32 	.word	0x08017c32

08015c14 <__sflush_r>:
 8015c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c1c:	0716      	lsls	r6, r2, #28
 8015c1e:	4605      	mov	r5, r0
 8015c20:	460c      	mov	r4, r1
 8015c22:	d454      	bmi.n	8015cce <__sflush_r+0xba>
 8015c24:	684b      	ldr	r3, [r1, #4]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	dc02      	bgt.n	8015c30 <__sflush_r+0x1c>
 8015c2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	dd48      	ble.n	8015cc2 <__sflush_r+0xae>
 8015c30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015c32:	2e00      	cmp	r6, #0
 8015c34:	d045      	beq.n	8015cc2 <__sflush_r+0xae>
 8015c36:	2300      	movs	r3, #0
 8015c38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015c3c:	682f      	ldr	r7, [r5, #0]
 8015c3e:	6a21      	ldr	r1, [r4, #32]
 8015c40:	602b      	str	r3, [r5, #0]
 8015c42:	d030      	beq.n	8015ca6 <__sflush_r+0x92>
 8015c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015c46:	89a3      	ldrh	r3, [r4, #12]
 8015c48:	0759      	lsls	r1, r3, #29
 8015c4a:	d505      	bpl.n	8015c58 <__sflush_r+0x44>
 8015c4c:	6863      	ldr	r3, [r4, #4]
 8015c4e:	1ad2      	subs	r2, r2, r3
 8015c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015c52:	b10b      	cbz	r3, 8015c58 <__sflush_r+0x44>
 8015c54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015c56:	1ad2      	subs	r2, r2, r3
 8015c58:	2300      	movs	r3, #0
 8015c5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015c5c:	6a21      	ldr	r1, [r4, #32]
 8015c5e:	4628      	mov	r0, r5
 8015c60:	47b0      	blx	r6
 8015c62:	1c43      	adds	r3, r0, #1
 8015c64:	89a3      	ldrh	r3, [r4, #12]
 8015c66:	d106      	bne.n	8015c76 <__sflush_r+0x62>
 8015c68:	6829      	ldr	r1, [r5, #0]
 8015c6a:	291d      	cmp	r1, #29
 8015c6c:	d82b      	bhi.n	8015cc6 <__sflush_r+0xb2>
 8015c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8015d18 <__sflush_r+0x104>)
 8015c70:	40ca      	lsrs	r2, r1
 8015c72:	07d6      	lsls	r6, r2, #31
 8015c74:	d527      	bpl.n	8015cc6 <__sflush_r+0xb2>
 8015c76:	2200      	movs	r2, #0
 8015c78:	6062      	str	r2, [r4, #4]
 8015c7a:	04d9      	lsls	r1, r3, #19
 8015c7c:	6922      	ldr	r2, [r4, #16]
 8015c7e:	6022      	str	r2, [r4, #0]
 8015c80:	d504      	bpl.n	8015c8c <__sflush_r+0x78>
 8015c82:	1c42      	adds	r2, r0, #1
 8015c84:	d101      	bne.n	8015c8a <__sflush_r+0x76>
 8015c86:	682b      	ldr	r3, [r5, #0]
 8015c88:	b903      	cbnz	r3, 8015c8c <__sflush_r+0x78>
 8015c8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8015c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015c8e:	602f      	str	r7, [r5, #0]
 8015c90:	b1b9      	cbz	r1, 8015cc2 <__sflush_r+0xae>
 8015c92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015c96:	4299      	cmp	r1, r3
 8015c98:	d002      	beq.n	8015ca0 <__sflush_r+0x8c>
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	f7ff fb4a 	bl	8015334 <_free_r>
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ca4:	e00d      	b.n	8015cc2 <__sflush_r+0xae>
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	4628      	mov	r0, r5
 8015caa:	47b0      	blx	r6
 8015cac:	4602      	mov	r2, r0
 8015cae:	1c50      	adds	r0, r2, #1
 8015cb0:	d1c9      	bne.n	8015c46 <__sflush_r+0x32>
 8015cb2:	682b      	ldr	r3, [r5, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d0c6      	beq.n	8015c46 <__sflush_r+0x32>
 8015cb8:	2b1d      	cmp	r3, #29
 8015cba:	d001      	beq.n	8015cc0 <__sflush_r+0xac>
 8015cbc:	2b16      	cmp	r3, #22
 8015cbe:	d11e      	bne.n	8015cfe <__sflush_r+0xea>
 8015cc0:	602f      	str	r7, [r5, #0]
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	e022      	b.n	8015d0c <__sflush_r+0xf8>
 8015cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015cca:	b21b      	sxth	r3, r3
 8015ccc:	e01b      	b.n	8015d06 <__sflush_r+0xf2>
 8015cce:	690f      	ldr	r7, [r1, #16]
 8015cd0:	2f00      	cmp	r7, #0
 8015cd2:	d0f6      	beq.n	8015cc2 <__sflush_r+0xae>
 8015cd4:	0793      	lsls	r3, r2, #30
 8015cd6:	680e      	ldr	r6, [r1, #0]
 8015cd8:	bf08      	it	eq
 8015cda:	694b      	ldreq	r3, [r1, #20]
 8015cdc:	600f      	str	r7, [r1, #0]
 8015cde:	bf18      	it	ne
 8015ce0:	2300      	movne	r3, #0
 8015ce2:	eba6 0807 	sub.w	r8, r6, r7
 8015ce6:	608b      	str	r3, [r1, #8]
 8015ce8:	f1b8 0f00 	cmp.w	r8, #0
 8015cec:	dde9      	ble.n	8015cc2 <__sflush_r+0xae>
 8015cee:	6a21      	ldr	r1, [r4, #32]
 8015cf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015cf2:	4643      	mov	r3, r8
 8015cf4:	463a      	mov	r2, r7
 8015cf6:	4628      	mov	r0, r5
 8015cf8:	47b0      	blx	r6
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	dc08      	bgt.n	8015d10 <__sflush_r+0xfc>
 8015cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d06:	81a3      	strh	r3, [r4, #12]
 8015d08:	f04f 30ff 	mov.w	r0, #4294967295
 8015d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d10:	4407      	add	r7, r0
 8015d12:	eba8 0800 	sub.w	r8, r8, r0
 8015d16:	e7e7      	b.n	8015ce8 <__sflush_r+0xd4>
 8015d18:	20400001 	.word	0x20400001

08015d1c <_fflush_r>:
 8015d1c:	b538      	push	{r3, r4, r5, lr}
 8015d1e:	690b      	ldr	r3, [r1, #16]
 8015d20:	4605      	mov	r5, r0
 8015d22:	460c      	mov	r4, r1
 8015d24:	b913      	cbnz	r3, 8015d2c <_fflush_r+0x10>
 8015d26:	2500      	movs	r5, #0
 8015d28:	4628      	mov	r0, r5
 8015d2a:	bd38      	pop	{r3, r4, r5, pc}
 8015d2c:	b118      	cbz	r0, 8015d36 <_fflush_r+0x1a>
 8015d2e:	6a03      	ldr	r3, [r0, #32]
 8015d30:	b90b      	cbnz	r3, 8015d36 <_fflush_r+0x1a>
 8015d32:	f7ff f8bf 	bl	8014eb4 <__sinit>
 8015d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d0f3      	beq.n	8015d26 <_fflush_r+0xa>
 8015d3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015d40:	07d0      	lsls	r0, r2, #31
 8015d42:	d404      	bmi.n	8015d4e <_fflush_r+0x32>
 8015d44:	0599      	lsls	r1, r3, #22
 8015d46:	d402      	bmi.n	8015d4e <_fflush_r+0x32>
 8015d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015d4a:	f7ff faf0 	bl	801532e <__retarget_lock_acquire_recursive>
 8015d4e:	4628      	mov	r0, r5
 8015d50:	4621      	mov	r1, r4
 8015d52:	f7ff ff5f 	bl	8015c14 <__sflush_r>
 8015d56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015d58:	07da      	lsls	r2, r3, #31
 8015d5a:	4605      	mov	r5, r0
 8015d5c:	d4e4      	bmi.n	8015d28 <_fflush_r+0xc>
 8015d5e:	89a3      	ldrh	r3, [r4, #12]
 8015d60:	059b      	lsls	r3, r3, #22
 8015d62:	d4e1      	bmi.n	8015d28 <_fflush_r+0xc>
 8015d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015d66:	f7ff fae3 	bl	8015330 <__retarget_lock_release_recursive>
 8015d6a:	e7dd      	b.n	8015d28 <_fflush_r+0xc>

08015d6c <__swhatbuf_r>:
 8015d6c:	b570      	push	{r4, r5, r6, lr}
 8015d6e:	460c      	mov	r4, r1
 8015d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d74:	2900      	cmp	r1, #0
 8015d76:	b096      	sub	sp, #88	@ 0x58
 8015d78:	4615      	mov	r5, r2
 8015d7a:	461e      	mov	r6, r3
 8015d7c:	da0d      	bge.n	8015d9a <__swhatbuf_r+0x2e>
 8015d7e:	89a3      	ldrh	r3, [r4, #12]
 8015d80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015d84:	f04f 0100 	mov.w	r1, #0
 8015d88:	bf14      	ite	ne
 8015d8a:	2340      	movne	r3, #64	@ 0x40
 8015d8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015d90:	2000      	movs	r0, #0
 8015d92:	6031      	str	r1, [r6, #0]
 8015d94:	602b      	str	r3, [r5, #0]
 8015d96:	b016      	add	sp, #88	@ 0x58
 8015d98:	bd70      	pop	{r4, r5, r6, pc}
 8015d9a:	466a      	mov	r2, sp
 8015d9c:	f000 f862 	bl	8015e64 <_fstat_r>
 8015da0:	2800      	cmp	r0, #0
 8015da2:	dbec      	blt.n	8015d7e <__swhatbuf_r+0x12>
 8015da4:	9901      	ldr	r1, [sp, #4]
 8015da6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015daa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015dae:	4259      	negs	r1, r3
 8015db0:	4159      	adcs	r1, r3
 8015db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015db6:	e7eb      	b.n	8015d90 <__swhatbuf_r+0x24>

08015db8 <__smakebuf_r>:
 8015db8:	898b      	ldrh	r3, [r1, #12]
 8015dba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dbc:	079d      	lsls	r5, r3, #30
 8015dbe:	4606      	mov	r6, r0
 8015dc0:	460c      	mov	r4, r1
 8015dc2:	d507      	bpl.n	8015dd4 <__smakebuf_r+0x1c>
 8015dc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015dc8:	6023      	str	r3, [r4, #0]
 8015dca:	6123      	str	r3, [r4, #16]
 8015dcc:	2301      	movs	r3, #1
 8015dce:	6163      	str	r3, [r4, #20]
 8015dd0:	b003      	add	sp, #12
 8015dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd4:	ab01      	add	r3, sp, #4
 8015dd6:	466a      	mov	r2, sp
 8015dd8:	f7ff ffc8 	bl	8015d6c <__swhatbuf_r>
 8015ddc:	9f00      	ldr	r7, [sp, #0]
 8015dde:	4605      	mov	r5, r0
 8015de0:	4639      	mov	r1, r7
 8015de2:	4630      	mov	r0, r6
 8015de4:	f7fe ff4e 	bl	8014c84 <_malloc_r>
 8015de8:	b948      	cbnz	r0, 8015dfe <__smakebuf_r+0x46>
 8015dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dee:	059a      	lsls	r2, r3, #22
 8015df0:	d4ee      	bmi.n	8015dd0 <__smakebuf_r+0x18>
 8015df2:	f023 0303 	bic.w	r3, r3, #3
 8015df6:	f043 0302 	orr.w	r3, r3, #2
 8015dfa:	81a3      	strh	r3, [r4, #12]
 8015dfc:	e7e2      	b.n	8015dc4 <__smakebuf_r+0xc>
 8015dfe:	89a3      	ldrh	r3, [r4, #12]
 8015e00:	6020      	str	r0, [r4, #0]
 8015e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e06:	81a3      	strh	r3, [r4, #12]
 8015e08:	9b01      	ldr	r3, [sp, #4]
 8015e0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015e0e:	b15b      	cbz	r3, 8015e28 <__smakebuf_r+0x70>
 8015e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e14:	4630      	mov	r0, r6
 8015e16:	f000 f837 	bl	8015e88 <_isatty_r>
 8015e1a:	b128      	cbz	r0, 8015e28 <__smakebuf_r+0x70>
 8015e1c:	89a3      	ldrh	r3, [r4, #12]
 8015e1e:	f023 0303 	bic.w	r3, r3, #3
 8015e22:	f043 0301 	orr.w	r3, r3, #1
 8015e26:	81a3      	strh	r3, [r4, #12]
 8015e28:	89a3      	ldrh	r3, [r4, #12]
 8015e2a:	431d      	orrs	r5, r3
 8015e2c:	81a5      	strh	r5, [r4, #12]
 8015e2e:	e7cf      	b.n	8015dd0 <__smakebuf_r+0x18>

08015e30 <memmove>:
 8015e30:	4288      	cmp	r0, r1
 8015e32:	b510      	push	{r4, lr}
 8015e34:	eb01 0402 	add.w	r4, r1, r2
 8015e38:	d902      	bls.n	8015e40 <memmove+0x10>
 8015e3a:	4284      	cmp	r4, r0
 8015e3c:	4623      	mov	r3, r4
 8015e3e:	d807      	bhi.n	8015e50 <memmove+0x20>
 8015e40:	1e43      	subs	r3, r0, #1
 8015e42:	42a1      	cmp	r1, r4
 8015e44:	d008      	beq.n	8015e58 <memmove+0x28>
 8015e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e4e:	e7f8      	b.n	8015e42 <memmove+0x12>
 8015e50:	4402      	add	r2, r0
 8015e52:	4601      	mov	r1, r0
 8015e54:	428a      	cmp	r2, r1
 8015e56:	d100      	bne.n	8015e5a <memmove+0x2a>
 8015e58:	bd10      	pop	{r4, pc}
 8015e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e62:	e7f7      	b.n	8015e54 <memmove+0x24>

08015e64 <_fstat_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	4d07      	ldr	r5, [pc, #28]	@ (8015e84 <_fstat_r+0x20>)
 8015e68:	2300      	movs	r3, #0
 8015e6a:	4604      	mov	r4, r0
 8015e6c:	4608      	mov	r0, r1
 8015e6e:	4611      	mov	r1, r2
 8015e70:	602b      	str	r3, [r5, #0]
 8015e72:	f7ec fc92 	bl	800279a <_fstat>
 8015e76:	1c43      	adds	r3, r0, #1
 8015e78:	d102      	bne.n	8015e80 <_fstat_r+0x1c>
 8015e7a:	682b      	ldr	r3, [r5, #0]
 8015e7c:	b103      	cbz	r3, 8015e80 <_fstat_r+0x1c>
 8015e7e:	6023      	str	r3, [r4, #0]
 8015e80:	bd38      	pop	{r3, r4, r5, pc}
 8015e82:	bf00      	nop
 8015e84:	20000ef4 	.word	0x20000ef4

08015e88 <_isatty_r>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4d06      	ldr	r5, [pc, #24]	@ (8015ea4 <_isatty_r+0x1c>)
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	4604      	mov	r4, r0
 8015e90:	4608      	mov	r0, r1
 8015e92:	602b      	str	r3, [r5, #0]
 8015e94:	f7ec fc91 	bl	80027ba <_isatty>
 8015e98:	1c43      	adds	r3, r0, #1
 8015e9a:	d102      	bne.n	8015ea2 <_isatty_r+0x1a>
 8015e9c:	682b      	ldr	r3, [r5, #0]
 8015e9e:	b103      	cbz	r3, 8015ea2 <_isatty_r+0x1a>
 8015ea0:	6023      	str	r3, [r4, #0]
 8015ea2:	bd38      	pop	{r3, r4, r5, pc}
 8015ea4:	20000ef4 	.word	0x20000ef4

08015ea8 <memcpy>:
 8015ea8:	440a      	add	r2, r1
 8015eaa:	4291      	cmp	r1, r2
 8015eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8015eb0:	d100      	bne.n	8015eb4 <memcpy+0xc>
 8015eb2:	4770      	bx	lr
 8015eb4:	b510      	push	{r4, lr}
 8015eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ebe:	4291      	cmp	r1, r2
 8015ec0:	d1f9      	bne.n	8015eb6 <memcpy+0xe>
 8015ec2:	bd10      	pop	{r4, pc}

08015ec4 <_realloc_r>:
 8015ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ec8:	4607      	mov	r7, r0
 8015eca:	4614      	mov	r4, r2
 8015ecc:	460d      	mov	r5, r1
 8015ece:	b921      	cbnz	r1, 8015eda <_realloc_r+0x16>
 8015ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ed4:	4611      	mov	r1, r2
 8015ed6:	f7fe bed5 	b.w	8014c84 <_malloc_r>
 8015eda:	b92a      	cbnz	r2, 8015ee8 <_realloc_r+0x24>
 8015edc:	f7ff fa2a 	bl	8015334 <_free_r>
 8015ee0:	4625      	mov	r5, r4
 8015ee2:	4628      	mov	r0, r5
 8015ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ee8:	f000 f81a 	bl	8015f20 <_malloc_usable_size_r>
 8015eec:	4284      	cmp	r4, r0
 8015eee:	4606      	mov	r6, r0
 8015ef0:	d802      	bhi.n	8015ef8 <_realloc_r+0x34>
 8015ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015ef6:	d8f4      	bhi.n	8015ee2 <_realloc_r+0x1e>
 8015ef8:	4621      	mov	r1, r4
 8015efa:	4638      	mov	r0, r7
 8015efc:	f7fe fec2 	bl	8014c84 <_malloc_r>
 8015f00:	4680      	mov	r8, r0
 8015f02:	b908      	cbnz	r0, 8015f08 <_realloc_r+0x44>
 8015f04:	4645      	mov	r5, r8
 8015f06:	e7ec      	b.n	8015ee2 <_realloc_r+0x1e>
 8015f08:	42b4      	cmp	r4, r6
 8015f0a:	4622      	mov	r2, r4
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	bf28      	it	cs
 8015f10:	4632      	movcs	r2, r6
 8015f12:	f7ff ffc9 	bl	8015ea8 <memcpy>
 8015f16:	4629      	mov	r1, r5
 8015f18:	4638      	mov	r0, r7
 8015f1a:	f7ff fa0b 	bl	8015334 <_free_r>
 8015f1e:	e7f1      	b.n	8015f04 <_realloc_r+0x40>

08015f20 <_malloc_usable_size_r>:
 8015f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f24:	1f18      	subs	r0, r3, #4
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	bfbc      	itt	lt
 8015f2a:	580b      	ldrlt	r3, [r1, r0]
 8015f2c:	18c0      	addlt	r0, r0, r3
 8015f2e:	4770      	bx	lr

08015f30 <pow>:
 8015f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f32:	ed2d 8b02 	vpush	{d8}
 8015f36:	eeb0 8a40 	vmov.f32	s16, s0
 8015f3a:	eef0 8a60 	vmov.f32	s17, s1
 8015f3e:	ec55 4b11 	vmov	r4, r5, d1
 8015f42:	f000 f8ad 	bl	80160a0 <__ieee754_pow>
 8015f46:	4622      	mov	r2, r4
 8015f48:	462b      	mov	r3, r5
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	ec57 6b10 	vmov	r6, r7, d0
 8015f52:	f7ea fe03 	bl	8000b5c <__aeabi_dcmpun>
 8015f56:	2800      	cmp	r0, #0
 8015f58:	d13b      	bne.n	8015fd2 <pow+0xa2>
 8015f5a:	ec51 0b18 	vmov	r0, r1, d8
 8015f5e:	2200      	movs	r2, #0
 8015f60:	2300      	movs	r3, #0
 8015f62:	f7ea fdc9 	bl	8000af8 <__aeabi_dcmpeq>
 8015f66:	b1b8      	cbz	r0, 8015f98 <pow+0x68>
 8015f68:	2200      	movs	r2, #0
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	4629      	mov	r1, r5
 8015f70:	f7ea fdc2 	bl	8000af8 <__aeabi_dcmpeq>
 8015f74:	2800      	cmp	r0, #0
 8015f76:	d146      	bne.n	8016006 <pow+0xd6>
 8015f78:	ec45 4b10 	vmov	d0, r4, r5
 8015f7c:	f000 f848 	bl	8016010 <finite>
 8015f80:	b338      	cbz	r0, 8015fd2 <pow+0xa2>
 8015f82:	2200      	movs	r2, #0
 8015f84:	2300      	movs	r3, #0
 8015f86:	4620      	mov	r0, r4
 8015f88:	4629      	mov	r1, r5
 8015f8a:	f7ea fdbf 	bl	8000b0c <__aeabi_dcmplt>
 8015f8e:	b300      	cbz	r0, 8015fd2 <pow+0xa2>
 8015f90:	f7ff f9a2 	bl	80152d8 <__errno>
 8015f94:	2322      	movs	r3, #34	@ 0x22
 8015f96:	e01b      	b.n	8015fd0 <pow+0xa0>
 8015f98:	ec47 6b10 	vmov	d0, r6, r7
 8015f9c:	f000 f838 	bl	8016010 <finite>
 8015fa0:	b9e0      	cbnz	r0, 8015fdc <pow+0xac>
 8015fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8015fa6:	eef0 0a68 	vmov.f32	s1, s17
 8015faa:	f000 f831 	bl	8016010 <finite>
 8015fae:	b1a8      	cbz	r0, 8015fdc <pow+0xac>
 8015fb0:	ec45 4b10 	vmov	d0, r4, r5
 8015fb4:	f000 f82c 	bl	8016010 <finite>
 8015fb8:	b180      	cbz	r0, 8015fdc <pow+0xac>
 8015fba:	4632      	mov	r2, r6
 8015fbc:	463b      	mov	r3, r7
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	4639      	mov	r1, r7
 8015fc2:	f7ea fdcb 	bl	8000b5c <__aeabi_dcmpun>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d0e2      	beq.n	8015f90 <pow+0x60>
 8015fca:	f7ff f985 	bl	80152d8 <__errno>
 8015fce:	2321      	movs	r3, #33	@ 0x21
 8015fd0:	6003      	str	r3, [r0, #0]
 8015fd2:	ecbd 8b02 	vpop	{d8}
 8015fd6:	ec47 6b10 	vmov	d0, r6, r7
 8015fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fdc:	2200      	movs	r2, #0
 8015fde:	2300      	movs	r3, #0
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	4639      	mov	r1, r7
 8015fe4:	f7ea fd88 	bl	8000af8 <__aeabi_dcmpeq>
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d0f2      	beq.n	8015fd2 <pow+0xa2>
 8015fec:	eeb0 0a48 	vmov.f32	s0, s16
 8015ff0:	eef0 0a68 	vmov.f32	s1, s17
 8015ff4:	f000 f80c 	bl	8016010 <finite>
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d0ea      	beq.n	8015fd2 <pow+0xa2>
 8015ffc:	ec45 4b10 	vmov	d0, r4, r5
 8016000:	f000 f806 	bl	8016010 <finite>
 8016004:	e7c3      	b.n	8015f8e <pow+0x5e>
 8016006:	4f01      	ldr	r7, [pc, #4]	@ (801600c <pow+0xdc>)
 8016008:	2600      	movs	r6, #0
 801600a:	e7e2      	b.n	8015fd2 <pow+0xa2>
 801600c:	3ff00000 	.word	0x3ff00000

08016010 <finite>:
 8016010:	b082      	sub	sp, #8
 8016012:	ed8d 0b00 	vstr	d0, [sp]
 8016016:	9801      	ldr	r0, [sp, #4]
 8016018:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801601c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8016020:	0fc0      	lsrs	r0, r0, #31
 8016022:	b002      	add	sp, #8
 8016024:	4770      	bx	lr
	...

08016028 <trunc>:
 8016028:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 801602c:	ec5c bb10 	vmov	fp, ip, d0
 8016030:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8016034:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8016038:	2913      	cmp	r1, #19
 801603a:	4664      	mov	r4, ip
 801603c:	dc14      	bgt.n	8016068 <trunc+0x40>
 801603e:	2900      	cmp	r1, #0
 8016040:	bfa4      	itt	ge
 8016042:	4b15      	ldrge	r3, [pc, #84]	@ (8016098 <trunc+0x70>)
 8016044:	fa43 f101 	asrge.w	r1, r3, r1
 8016048:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 801604c:	bfad      	iteet	ge
 801604e:	4021      	andge	r1, r4
 8016050:	2200      	movlt	r2, #0
 8016052:	4603      	movlt	r3, r0
 8016054:	2200      	movge	r2, #0
 8016056:	bfa8      	it	ge
 8016058:	ea41 0300 	orrge.w	r3, r1, r0
 801605c:	4693      	mov	fp, r2
 801605e:	469c      	mov	ip, r3
 8016060:	ec4c bb10 	vmov	d0, fp, ip
 8016064:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8016068:	2933      	cmp	r1, #51	@ 0x33
 801606a:	dd0b      	ble.n	8016084 <trunc+0x5c>
 801606c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016070:	d1f6      	bne.n	8016060 <trunc+0x38>
 8016072:	465a      	mov	r2, fp
 8016074:	4663      	mov	r3, ip
 8016076:	4658      	mov	r0, fp
 8016078:	4621      	mov	r1, r4
 801607a:	f7ea f91f 	bl	80002bc <__adddf3>
 801607e:	4683      	mov	fp, r0
 8016080:	468c      	mov	ip, r1
 8016082:	e7ed      	b.n	8016060 <trunc+0x38>
 8016084:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8016088:	f04f 33ff 	mov.w	r3, #4294967295
 801608c:	40c3      	lsrs	r3, r0
 801608e:	ea2b 0603 	bic.w	r6, fp, r3
 8016092:	46b3      	mov	fp, r6
 8016094:	46a4      	mov	ip, r4
 8016096:	e7e3      	b.n	8016060 <trunc+0x38>
 8016098:	fff00000 	.word	0xfff00000
 801609c:	00000000 	.word	0x00000000

080160a0 <__ieee754_pow>:
 80160a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a4:	b091      	sub	sp, #68	@ 0x44
 80160a6:	ed8d 1b00 	vstr	d1, [sp]
 80160aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80160ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80160b2:	ea5a 0001 	orrs.w	r0, sl, r1
 80160b6:	ec57 6b10 	vmov	r6, r7, d0
 80160ba:	d113      	bne.n	80160e4 <__ieee754_pow+0x44>
 80160bc:	19b3      	adds	r3, r6, r6
 80160be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80160c2:	4152      	adcs	r2, r2
 80160c4:	4298      	cmp	r0, r3
 80160c6:	4b9a      	ldr	r3, [pc, #616]	@ (8016330 <__ieee754_pow+0x290>)
 80160c8:	4193      	sbcs	r3, r2
 80160ca:	f080 84ee 	bcs.w	8016aaa <__ieee754_pow+0xa0a>
 80160ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80160d2:	4630      	mov	r0, r6
 80160d4:	4639      	mov	r1, r7
 80160d6:	f7ea f8f1 	bl	80002bc <__adddf3>
 80160da:	ec41 0b10 	vmov	d0, r0, r1
 80160de:	b011      	add	sp, #68	@ 0x44
 80160e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160e4:	4a93      	ldr	r2, [pc, #588]	@ (8016334 <__ieee754_pow+0x294>)
 80160e6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80160ea:	4295      	cmp	r5, r2
 80160ec:	46b8      	mov	r8, r7
 80160ee:	4633      	mov	r3, r6
 80160f0:	d80a      	bhi.n	8016108 <__ieee754_pow+0x68>
 80160f2:	d104      	bne.n	80160fe <__ieee754_pow+0x5e>
 80160f4:	2e00      	cmp	r6, #0
 80160f6:	d1ea      	bne.n	80160ce <__ieee754_pow+0x2e>
 80160f8:	45aa      	cmp	sl, r5
 80160fa:	d8e8      	bhi.n	80160ce <__ieee754_pow+0x2e>
 80160fc:	e001      	b.n	8016102 <__ieee754_pow+0x62>
 80160fe:	4592      	cmp	sl, r2
 8016100:	d802      	bhi.n	8016108 <__ieee754_pow+0x68>
 8016102:	4592      	cmp	sl, r2
 8016104:	d10f      	bne.n	8016126 <__ieee754_pow+0x86>
 8016106:	b171      	cbz	r1, 8016126 <__ieee754_pow+0x86>
 8016108:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801610c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016110:	ea58 0803 	orrs.w	r8, r8, r3
 8016114:	d1db      	bne.n	80160ce <__ieee754_pow+0x2e>
 8016116:	e9dd 3200 	ldrd	r3, r2, [sp]
 801611a:	18db      	adds	r3, r3, r3
 801611c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016120:	4152      	adcs	r2, r2
 8016122:	4598      	cmp	r8, r3
 8016124:	e7cf      	b.n	80160c6 <__ieee754_pow+0x26>
 8016126:	f1b8 0f00 	cmp.w	r8, #0
 801612a:	46ab      	mov	fp, r5
 801612c:	da43      	bge.n	80161b6 <__ieee754_pow+0x116>
 801612e:	4a82      	ldr	r2, [pc, #520]	@ (8016338 <__ieee754_pow+0x298>)
 8016130:	4592      	cmp	sl, r2
 8016132:	d856      	bhi.n	80161e2 <__ieee754_pow+0x142>
 8016134:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8016138:	4592      	cmp	sl, r2
 801613a:	f240 84c5 	bls.w	8016ac8 <__ieee754_pow+0xa28>
 801613e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8016142:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8016146:	2a14      	cmp	r2, #20
 8016148:	dd18      	ble.n	801617c <__ieee754_pow+0xdc>
 801614a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801614e:	fa21 f402 	lsr.w	r4, r1, r2
 8016152:	fa04 f202 	lsl.w	r2, r4, r2
 8016156:	428a      	cmp	r2, r1
 8016158:	f040 84b6 	bne.w	8016ac8 <__ieee754_pow+0xa28>
 801615c:	f004 0401 	and.w	r4, r4, #1
 8016160:	f1c4 0402 	rsb	r4, r4, #2
 8016164:	2900      	cmp	r1, #0
 8016166:	d159      	bne.n	801621c <__ieee754_pow+0x17c>
 8016168:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801616c:	d148      	bne.n	8016200 <__ieee754_pow+0x160>
 801616e:	4632      	mov	r2, r6
 8016170:	463b      	mov	r3, r7
 8016172:	4630      	mov	r0, r6
 8016174:	4639      	mov	r1, r7
 8016176:	f7ea fa57 	bl	8000628 <__aeabi_dmul>
 801617a:	e7ae      	b.n	80160da <__ieee754_pow+0x3a>
 801617c:	2900      	cmp	r1, #0
 801617e:	d14c      	bne.n	801621a <__ieee754_pow+0x17a>
 8016180:	f1c2 0214 	rsb	r2, r2, #20
 8016184:	fa4a f402 	asr.w	r4, sl, r2
 8016188:	fa04 f202 	lsl.w	r2, r4, r2
 801618c:	4552      	cmp	r2, sl
 801618e:	f040 8498 	bne.w	8016ac2 <__ieee754_pow+0xa22>
 8016192:	f004 0401 	and.w	r4, r4, #1
 8016196:	f1c4 0402 	rsb	r4, r4, #2
 801619a:	4a68      	ldr	r2, [pc, #416]	@ (801633c <__ieee754_pow+0x29c>)
 801619c:	4592      	cmp	sl, r2
 801619e:	d1e3      	bne.n	8016168 <__ieee754_pow+0xc8>
 80161a0:	f1b9 0f00 	cmp.w	r9, #0
 80161a4:	f280 8489 	bge.w	8016aba <__ieee754_pow+0xa1a>
 80161a8:	4964      	ldr	r1, [pc, #400]	@ (801633c <__ieee754_pow+0x29c>)
 80161aa:	4632      	mov	r2, r6
 80161ac:	463b      	mov	r3, r7
 80161ae:	2000      	movs	r0, #0
 80161b0:	f7ea fb64 	bl	800087c <__aeabi_ddiv>
 80161b4:	e791      	b.n	80160da <__ieee754_pow+0x3a>
 80161b6:	2400      	movs	r4, #0
 80161b8:	bb81      	cbnz	r1, 801621c <__ieee754_pow+0x17c>
 80161ba:	4a5e      	ldr	r2, [pc, #376]	@ (8016334 <__ieee754_pow+0x294>)
 80161bc:	4592      	cmp	sl, r2
 80161be:	d1ec      	bne.n	801619a <__ieee754_pow+0xfa>
 80161c0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80161c4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80161c8:	431a      	orrs	r2, r3
 80161ca:	f000 846e 	beq.w	8016aaa <__ieee754_pow+0xa0a>
 80161ce:	4b5c      	ldr	r3, [pc, #368]	@ (8016340 <__ieee754_pow+0x2a0>)
 80161d0:	429d      	cmp	r5, r3
 80161d2:	d908      	bls.n	80161e6 <__ieee754_pow+0x146>
 80161d4:	f1b9 0f00 	cmp.w	r9, #0
 80161d8:	f280 846b 	bge.w	8016ab2 <__ieee754_pow+0xa12>
 80161dc:	2000      	movs	r0, #0
 80161de:	2100      	movs	r1, #0
 80161e0:	e77b      	b.n	80160da <__ieee754_pow+0x3a>
 80161e2:	2402      	movs	r4, #2
 80161e4:	e7e8      	b.n	80161b8 <__ieee754_pow+0x118>
 80161e6:	f1b9 0f00 	cmp.w	r9, #0
 80161ea:	f04f 0000 	mov.w	r0, #0
 80161ee:	f04f 0100 	mov.w	r1, #0
 80161f2:	f6bf af72 	bge.w	80160da <__ieee754_pow+0x3a>
 80161f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80161fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80161fe:	e76c      	b.n	80160da <__ieee754_pow+0x3a>
 8016200:	4a50      	ldr	r2, [pc, #320]	@ (8016344 <__ieee754_pow+0x2a4>)
 8016202:	4591      	cmp	r9, r2
 8016204:	d10a      	bne.n	801621c <__ieee754_pow+0x17c>
 8016206:	f1b8 0f00 	cmp.w	r8, #0
 801620a:	db07      	blt.n	801621c <__ieee754_pow+0x17c>
 801620c:	ec47 6b10 	vmov	d0, r6, r7
 8016210:	b011      	add	sp, #68	@ 0x44
 8016212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016216:	f000 bd4f 	b.w	8016cb8 <__ieee754_sqrt>
 801621a:	2400      	movs	r4, #0
 801621c:	ec47 6b10 	vmov	d0, r6, r7
 8016220:	9302      	str	r3, [sp, #8]
 8016222:	f000 fc87 	bl	8016b34 <fabs>
 8016226:	9b02      	ldr	r3, [sp, #8]
 8016228:	ec51 0b10 	vmov	r0, r1, d0
 801622c:	bb43      	cbnz	r3, 8016280 <__ieee754_pow+0x1e0>
 801622e:	4b43      	ldr	r3, [pc, #268]	@ (801633c <__ieee754_pow+0x29c>)
 8016230:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8016234:	429a      	cmp	r2, r3
 8016236:	d000      	beq.n	801623a <__ieee754_pow+0x19a>
 8016238:	bb15      	cbnz	r5, 8016280 <__ieee754_pow+0x1e0>
 801623a:	f1b9 0f00 	cmp.w	r9, #0
 801623e:	da05      	bge.n	801624c <__ieee754_pow+0x1ac>
 8016240:	4602      	mov	r2, r0
 8016242:	460b      	mov	r3, r1
 8016244:	2000      	movs	r0, #0
 8016246:	493d      	ldr	r1, [pc, #244]	@ (801633c <__ieee754_pow+0x29c>)
 8016248:	f7ea fb18 	bl	800087c <__aeabi_ddiv>
 801624c:	f1b8 0f00 	cmp.w	r8, #0
 8016250:	f6bf af43 	bge.w	80160da <__ieee754_pow+0x3a>
 8016254:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016258:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801625c:	4325      	orrs	r5, r4
 801625e:	d108      	bne.n	8016272 <__ieee754_pow+0x1d2>
 8016260:	4602      	mov	r2, r0
 8016262:	460b      	mov	r3, r1
 8016264:	4610      	mov	r0, r2
 8016266:	4619      	mov	r1, r3
 8016268:	f7ea f826 	bl	80002b8 <__aeabi_dsub>
 801626c:	4602      	mov	r2, r0
 801626e:	460b      	mov	r3, r1
 8016270:	e79e      	b.n	80161b0 <__ieee754_pow+0x110>
 8016272:	2c01      	cmp	r4, #1
 8016274:	f47f af31 	bne.w	80160da <__ieee754_pow+0x3a>
 8016278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801627c:	4619      	mov	r1, r3
 801627e:	e72c      	b.n	80160da <__ieee754_pow+0x3a>
 8016280:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8016284:	3b01      	subs	r3, #1
 8016286:	ea53 0204 	orrs.w	r2, r3, r4
 801628a:	d102      	bne.n	8016292 <__ieee754_pow+0x1f2>
 801628c:	4632      	mov	r2, r6
 801628e:	463b      	mov	r3, r7
 8016290:	e7e8      	b.n	8016264 <__ieee754_pow+0x1c4>
 8016292:	3c01      	subs	r4, #1
 8016294:	431c      	orrs	r4, r3
 8016296:	d016      	beq.n	80162c6 <__ieee754_pow+0x226>
 8016298:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016320 <__ieee754_pow+0x280>
 801629c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80162a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80162a4:	f240 8110 	bls.w	80164c8 <__ieee754_pow+0x428>
 80162a8:	4b27      	ldr	r3, [pc, #156]	@ (8016348 <__ieee754_pow+0x2a8>)
 80162aa:	459a      	cmp	sl, r3
 80162ac:	4b24      	ldr	r3, [pc, #144]	@ (8016340 <__ieee754_pow+0x2a0>)
 80162ae:	d916      	bls.n	80162de <__ieee754_pow+0x23e>
 80162b0:	429d      	cmp	r5, r3
 80162b2:	d80b      	bhi.n	80162cc <__ieee754_pow+0x22c>
 80162b4:	f1b9 0f00 	cmp.w	r9, #0
 80162b8:	da0b      	bge.n	80162d2 <__ieee754_pow+0x232>
 80162ba:	2000      	movs	r0, #0
 80162bc:	b011      	add	sp, #68	@ 0x44
 80162be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c2:	f000 bcf1 	b.w	8016ca8 <__math_oflow>
 80162c6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8016328 <__ieee754_pow+0x288>
 80162ca:	e7e7      	b.n	801629c <__ieee754_pow+0x1fc>
 80162cc:	f1b9 0f00 	cmp.w	r9, #0
 80162d0:	dcf3      	bgt.n	80162ba <__ieee754_pow+0x21a>
 80162d2:	2000      	movs	r0, #0
 80162d4:	b011      	add	sp, #68	@ 0x44
 80162d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162da:	f000 bcdd 	b.w	8016c98 <__math_uflow>
 80162de:	429d      	cmp	r5, r3
 80162e0:	d20c      	bcs.n	80162fc <__ieee754_pow+0x25c>
 80162e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162e6:	2200      	movs	r2, #0
 80162e8:	2300      	movs	r3, #0
 80162ea:	f7ea fc0f 	bl	8000b0c <__aeabi_dcmplt>
 80162ee:	3800      	subs	r0, #0
 80162f0:	bf18      	it	ne
 80162f2:	2001      	movne	r0, #1
 80162f4:	f1b9 0f00 	cmp.w	r9, #0
 80162f8:	daec      	bge.n	80162d4 <__ieee754_pow+0x234>
 80162fa:	e7df      	b.n	80162bc <__ieee754_pow+0x21c>
 80162fc:	4b0f      	ldr	r3, [pc, #60]	@ (801633c <__ieee754_pow+0x29c>)
 80162fe:	429d      	cmp	r5, r3
 8016300:	f04f 0200 	mov.w	r2, #0
 8016304:	d922      	bls.n	801634c <__ieee754_pow+0x2ac>
 8016306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801630a:	2300      	movs	r3, #0
 801630c:	f7ea fbfe 	bl	8000b0c <__aeabi_dcmplt>
 8016310:	3800      	subs	r0, #0
 8016312:	bf18      	it	ne
 8016314:	2001      	movne	r0, #1
 8016316:	f1b9 0f00 	cmp.w	r9, #0
 801631a:	dccf      	bgt.n	80162bc <__ieee754_pow+0x21c>
 801631c:	e7da      	b.n	80162d4 <__ieee754_pow+0x234>
 801631e:	bf00      	nop
 8016320:	00000000 	.word	0x00000000
 8016324:	3ff00000 	.word	0x3ff00000
 8016328:	00000000 	.word	0x00000000
 801632c:	bff00000 	.word	0xbff00000
 8016330:	fff00000 	.word	0xfff00000
 8016334:	7ff00000 	.word	0x7ff00000
 8016338:	433fffff 	.word	0x433fffff
 801633c:	3ff00000 	.word	0x3ff00000
 8016340:	3fefffff 	.word	0x3fefffff
 8016344:	3fe00000 	.word	0x3fe00000
 8016348:	43f00000 	.word	0x43f00000
 801634c:	4b5a      	ldr	r3, [pc, #360]	@ (80164b8 <__ieee754_pow+0x418>)
 801634e:	f7e9 ffb3 	bl	80002b8 <__aeabi_dsub>
 8016352:	a351      	add	r3, pc, #324	@ (adr r3, 8016498 <__ieee754_pow+0x3f8>)
 8016354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016358:	4604      	mov	r4, r0
 801635a:	460d      	mov	r5, r1
 801635c:	f7ea f964 	bl	8000628 <__aeabi_dmul>
 8016360:	a34f      	add	r3, pc, #316	@ (adr r3, 80164a0 <__ieee754_pow+0x400>)
 8016362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016366:	4606      	mov	r6, r0
 8016368:	460f      	mov	r7, r1
 801636a:	4620      	mov	r0, r4
 801636c:	4629      	mov	r1, r5
 801636e:	f7ea f95b 	bl	8000628 <__aeabi_dmul>
 8016372:	4b52      	ldr	r3, [pc, #328]	@ (80164bc <__ieee754_pow+0x41c>)
 8016374:	4682      	mov	sl, r0
 8016376:	468b      	mov	fp, r1
 8016378:	2200      	movs	r2, #0
 801637a:	4620      	mov	r0, r4
 801637c:	4629      	mov	r1, r5
 801637e:	f7ea f953 	bl	8000628 <__aeabi_dmul>
 8016382:	4602      	mov	r2, r0
 8016384:	460b      	mov	r3, r1
 8016386:	a148      	add	r1, pc, #288	@ (adr r1, 80164a8 <__ieee754_pow+0x408>)
 8016388:	e9d1 0100 	ldrd	r0, r1, [r1]
 801638c:	f7e9 ff94 	bl	80002b8 <__aeabi_dsub>
 8016390:	4622      	mov	r2, r4
 8016392:	462b      	mov	r3, r5
 8016394:	f7ea f948 	bl	8000628 <__aeabi_dmul>
 8016398:	4602      	mov	r2, r0
 801639a:	460b      	mov	r3, r1
 801639c:	2000      	movs	r0, #0
 801639e:	4948      	ldr	r1, [pc, #288]	@ (80164c0 <__ieee754_pow+0x420>)
 80163a0:	f7e9 ff8a 	bl	80002b8 <__aeabi_dsub>
 80163a4:	4622      	mov	r2, r4
 80163a6:	4680      	mov	r8, r0
 80163a8:	4689      	mov	r9, r1
 80163aa:	462b      	mov	r3, r5
 80163ac:	4620      	mov	r0, r4
 80163ae:	4629      	mov	r1, r5
 80163b0:	f7ea f93a 	bl	8000628 <__aeabi_dmul>
 80163b4:	4602      	mov	r2, r0
 80163b6:	460b      	mov	r3, r1
 80163b8:	4640      	mov	r0, r8
 80163ba:	4649      	mov	r1, r9
 80163bc:	f7ea f934 	bl	8000628 <__aeabi_dmul>
 80163c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80164b0 <__ieee754_pow+0x410>)
 80163c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c6:	f7ea f92f 	bl	8000628 <__aeabi_dmul>
 80163ca:	4602      	mov	r2, r0
 80163cc:	460b      	mov	r3, r1
 80163ce:	4650      	mov	r0, sl
 80163d0:	4659      	mov	r1, fp
 80163d2:	f7e9 ff71 	bl	80002b8 <__aeabi_dsub>
 80163d6:	4602      	mov	r2, r0
 80163d8:	460b      	mov	r3, r1
 80163da:	4680      	mov	r8, r0
 80163dc:	4689      	mov	r9, r1
 80163de:	4630      	mov	r0, r6
 80163e0:	4639      	mov	r1, r7
 80163e2:	f7e9 ff6b 	bl	80002bc <__adddf3>
 80163e6:	2400      	movs	r4, #0
 80163e8:	4632      	mov	r2, r6
 80163ea:	463b      	mov	r3, r7
 80163ec:	4620      	mov	r0, r4
 80163ee:	460d      	mov	r5, r1
 80163f0:	f7e9 ff62 	bl	80002b8 <__aeabi_dsub>
 80163f4:	4602      	mov	r2, r0
 80163f6:	460b      	mov	r3, r1
 80163f8:	4640      	mov	r0, r8
 80163fa:	4649      	mov	r1, r9
 80163fc:	f7e9 ff5c 	bl	80002b8 <__aeabi_dsub>
 8016400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016404:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016408:	2300      	movs	r3, #0
 801640a:	9304      	str	r3, [sp, #16]
 801640c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016410:	4606      	mov	r6, r0
 8016412:	460f      	mov	r7, r1
 8016414:	465b      	mov	r3, fp
 8016416:	4652      	mov	r2, sl
 8016418:	e9dd 0100 	ldrd	r0, r1, [sp]
 801641c:	f7e9 ff4c 	bl	80002b8 <__aeabi_dsub>
 8016420:	4622      	mov	r2, r4
 8016422:	462b      	mov	r3, r5
 8016424:	f7ea f900 	bl	8000628 <__aeabi_dmul>
 8016428:	e9dd 2300 	ldrd	r2, r3, [sp]
 801642c:	4680      	mov	r8, r0
 801642e:	4689      	mov	r9, r1
 8016430:	4630      	mov	r0, r6
 8016432:	4639      	mov	r1, r7
 8016434:	f7ea f8f8 	bl	8000628 <__aeabi_dmul>
 8016438:	4602      	mov	r2, r0
 801643a:	460b      	mov	r3, r1
 801643c:	4640      	mov	r0, r8
 801643e:	4649      	mov	r1, r9
 8016440:	f7e9 ff3c 	bl	80002bc <__adddf3>
 8016444:	465b      	mov	r3, fp
 8016446:	4606      	mov	r6, r0
 8016448:	460f      	mov	r7, r1
 801644a:	4652      	mov	r2, sl
 801644c:	4620      	mov	r0, r4
 801644e:	4629      	mov	r1, r5
 8016450:	f7ea f8ea 	bl	8000628 <__aeabi_dmul>
 8016454:	460b      	mov	r3, r1
 8016456:	4602      	mov	r2, r0
 8016458:	4680      	mov	r8, r0
 801645a:	4689      	mov	r9, r1
 801645c:	4630      	mov	r0, r6
 801645e:	4639      	mov	r1, r7
 8016460:	f7e9 ff2c 	bl	80002bc <__adddf3>
 8016464:	4b17      	ldr	r3, [pc, #92]	@ (80164c4 <__ieee754_pow+0x424>)
 8016466:	4299      	cmp	r1, r3
 8016468:	4604      	mov	r4, r0
 801646a:	460d      	mov	r5, r1
 801646c:	468b      	mov	fp, r1
 801646e:	f340 820b 	ble.w	8016888 <__ieee754_pow+0x7e8>
 8016472:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016476:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801647a:	4303      	orrs	r3, r0
 801647c:	f000 81ea 	beq.w	8016854 <__ieee754_pow+0x7b4>
 8016480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016484:	2200      	movs	r2, #0
 8016486:	2300      	movs	r3, #0
 8016488:	f7ea fb40 	bl	8000b0c <__aeabi_dcmplt>
 801648c:	3800      	subs	r0, #0
 801648e:	bf18      	it	ne
 8016490:	2001      	movne	r0, #1
 8016492:	e713      	b.n	80162bc <__ieee754_pow+0x21c>
 8016494:	f3af 8000 	nop.w
 8016498:	60000000 	.word	0x60000000
 801649c:	3ff71547 	.word	0x3ff71547
 80164a0:	f85ddf44 	.word	0xf85ddf44
 80164a4:	3e54ae0b 	.word	0x3e54ae0b
 80164a8:	55555555 	.word	0x55555555
 80164ac:	3fd55555 	.word	0x3fd55555
 80164b0:	652b82fe 	.word	0x652b82fe
 80164b4:	3ff71547 	.word	0x3ff71547
 80164b8:	3ff00000 	.word	0x3ff00000
 80164bc:	3fd00000 	.word	0x3fd00000
 80164c0:	3fe00000 	.word	0x3fe00000
 80164c4:	408fffff 	.word	0x408fffff
 80164c8:	4bd5      	ldr	r3, [pc, #852]	@ (8016820 <__ieee754_pow+0x780>)
 80164ca:	ea08 0303 	and.w	r3, r8, r3
 80164ce:	2200      	movs	r2, #0
 80164d0:	b92b      	cbnz	r3, 80164de <__ieee754_pow+0x43e>
 80164d2:	4bd4      	ldr	r3, [pc, #848]	@ (8016824 <__ieee754_pow+0x784>)
 80164d4:	f7ea f8a8 	bl	8000628 <__aeabi_dmul>
 80164d8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80164dc:	468b      	mov	fp, r1
 80164de:	ea4f 532b 	mov.w	r3, fp, asr #20
 80164e2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80164e6:	4413      	add	r3, r2
 80164e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80164ea:	4bcf      	ldr	r3, [pc, #828]	@ (8016828 <__ieee754_pow+0x788>)
 80164ec:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80164f0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80164f4:	459b      	cmp	fp, r3
 80164f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80164fa:	dd08      	ble.n	801650e <__ieee754_pow+0x46e>
 80164fc:	4bcb      	ldr	r3, [pc, #812]	@ (801682c <__ieee754_pow+0x78c>)
 80164fe:	459b      	cmp	fp, r3
 8016500:	f340 81a5 	ble.w	801684e <__ieee754_pow+0x7ae>
 8016504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016506:	3301      	adds	r3, #1
 8016508:	930a      	str	r3, [sp, #40]	@ 0x28
 801650a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801650e:	f04f 0a00 	mov.w	sl, #0
 8016512:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016518:	4bc5      	ldr	r3, [pc, #788]	@ (8016830 <__ieee754_pow+0x790>)
 801651a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801651e:	ed93 7b00 	vldr	d7, [r3]
 8016522:	4629      	mov	r1, r5
 8016524:	ec53 2b17 	vmov	r2, r3, d7
 8016528:	ed8d 7b06 	vstr	d7, [sp, #24]
 801652c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016530:	f7e9 fec2 	bl	80002b8 <__aeabi_dsub>
 8016534:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016538:	4606      	mov	r6, r0
 801653a:	460f      	mov	r7, r1
 801653c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016540:	f7e9 febc 	bl	80002bc <__adddf3>
 8016544:	4602      	mov	r2, r0
 8016546:	460b      	mov	r3, r1
 8016548:	2000      	movs	r0, #0
 801654a:	49ba      	ldr	r1, [pc, #744]	@ (8016834 <__ieee754_pow+0x794>)
 801654c:	f7ea f996 	bl	800087c <__aeabi_ddiv>
 8016550:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016554:	4602      	mov	r2, r0
 8016556:	460b      	mov	r3, r1
 8016558:	4630      	mov	r0, r6
 801655a:	4639      	mov	r1, r7
 801655c:	f7ea f864 	bl	8000628 <__aeabi_dmul>
 8016560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016564:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016568:	106d      	asrs	r5, r5, #1
 801656a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801656e:	f04f 0b00 	mov.w	fp, #0
 8016572:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8016576:	4661      	mov	r1, ip
 8016578:	2200      	movs	r2, #0
 801657a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801657e:	4658      	mov	r0, fp
 8016580:	46e1      	mov	r9, ip
 8016582:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8016586:	4614      	mov	r4, r2
 8016588:	461d      	mov	r5, r3
 801658a:	f7ea f84d 	bl	8000628 <__aeabi_dmul>
 801658e:	4602      	mov	r2, r0
 8016590:	460b      	mov	r3, r1
 8016592:	4630      	mov	r0, r6
 8016594:	4639      	mov	r1, r7
 8016596:	f7e9 fe8f 	bl	80002b8 <__aeabi_dsub>
 801659a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801659e:	4606      	mov	r6, r0
 80165a0:	460f      	mov	r7, r1
 80165a2:	4620      	mov	r0, r4
 80165a4:	4629      	mov	r1, r5
 80165a6:	f7e9 fe87 	bl	80002b8 <__aeabi_dsub>
 80165aa:	4602      	mov	r2, r0
 80165ac:	460b      	mov	r3, r1
 80165ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80165b2:	f7e9 fe81 	bl	80002b8 <__aeabi_dsub>
 80165b6:	465a      	mov	r2, fp
 80165b8:	464b      	mov	r3, r9
 80165ba:	f7ea f835 	bl	8000628 <__aeabi_dmul>
 80165be:	4602      	mov	r2, r0
 80165c0:	460b      	mov	r3, r1
 80165c2:	4630      	mov	r0, r6
 80165c4:	4639      	mov	r1, r7
 80165c6:	f7e9 fe77 	bl	80002b8 <__aeabi_dsub>
 80165ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80165ce:	f7ea f82b 	bl	8000628 <__aeabi_dmul>
 80165d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80165da:	4610      	mov	r0, r2
 80165dc:	4619      	mov	r1, r3
 80165de:	f7ea f823 	bl	8000628 <__aeabi_dmul>
 80165e2:	a37d      	add	r3, pc, #500	@ (adr r3, 80167d8 <__ieee754_pow+0x738>)
 80165e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e8:	4604      	mov	r4, r0
 80165ea:	460d      	mov	r5, r1
 80165ec:	f7ea f81c 	bl	8000628 <__aeabi_dmul>
 80165f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80167e0 <__ieee754_pow+0x740>)
 80165f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f6:	f7e9 fe61 	bl	80002bc <__adddf3>
 80165fa:	4622      	mov	r2, r4
 80165fc:	462b      	mov	r3, r5
 80165fe:	f7ea f813 	bl	8000628 <__aeabi_dmul>
 8016602:	a379      	add	r3, pc, #484	@ (adr r3, 80167e8 <__ieee754_pow+0x748>)
 8016604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016608:	f7e9 fe58 	bl	80002bc <__adddf3>
 801660c:	4622      	mov	r2, r4
 801660e:	462b      	mov	r3, r5
 8016610:	f7ea f80a 	bl	8000628 <__aeabi_dmul>
 8016614:	a376      	add	r3, pc, #472	@ (adr r3, 80167f0 <__ieee754_pow+0x750>)
 8016616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661a:	f7e9 fe4f 	bl	80002bc <__adddf3>
 801661e:	4622      	mov	r2, r4
 8016620:	462b      	mov	r3, r5
 8016622:	f7ea f801 	bl	8000628 <__aeabi_dmul>
 8016626:	a374      	add	r3, pc, #464	@ (adr r3, 80167f8 <__ieee754_pow+0x758>)
 8016628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801662c:	f7e9 fe46 	bl	80002bc <__adddf3>
 8016630:	4622      	mov	r2, r4
 8016632:	462b      	mov	r3, r5
 8016634:	f7e9 fff8 	bl	8000628 <__aeabi_dmul>
 8016638:	a371      	add	r3, pc, #452	@ (adr r3, 8016800 <__ieee754_pow+0x760>)
 801663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663e:	f7e9 fe3d 	bl	80002bc <__adddf3>
 8016642:	4622      	mov	r2, r4
 8016644:	4606      	mov	r6, r0
 8016646:	460f      	mov	r7, r1
 8016648:	462b      	mov	r3, r5
 801664a:	4620      	mov	r0, r4
 801664c:	4629      	mov	r1, r5
 801664e:	f7e9 ffeb 	bl	8000628 <__aeabi_dmul>
 8016652:	4602      	mov	r2, r0
 8016654:	460b      	mov	r3, r1
 8016656:	4630      	mov	r0, r6
 8016658:	4639      	mov	r1, r7
 801665a:	f7e9 ffe5 	bl	8000628 <__aeabi_dmul>
 801665e:	465a      	mov	r2, fp
 8016660:	4604      	mov	r4, r0
 8016662:	460d      	mov	r5, r1
 8016664:	464b      	mov	r3, r9
 8016666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801666a:	f7e9 fe27 	bl	80002bc <__adddf3>
 801666e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016672:	f7e9 ffd9 	bl	8000628 <__aeabi_dmul>
 8016676:	4622      	mov	r2, r4
 8016678:	462b      	mov	r3, r5
 801667a:	f7e9 fe1f 	bl	80002bc <__adddf3>
 801667e:	465a      	mov	r2, fp
 8016680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016684:	464b      	mov	r3, r9
 8016686:	4658      	mov	r0, fp
 8016688:	4649      	mov	r1, r9
 801668a:	f7e9 ffcd 	bl	8000628 <__aeabi_dmul>
 801668e:	4b6a      	ldr	r3, [pc, #424]	@ (8016838 <__ieee754_pow+0x798>)
 8016690:	2200      	movs	r2, #0
 8016692:	4606      	mov	r6, r0
 8016694:	460f      	mov	r7, r1
 8016696:	f7e9 fe11 	bl	80002bc <__adddf3>
 801669a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801669e:	f7e9 fe0d 	bl	80002bc <__adddf3>
 80166a2:	46d8      	mov	r8, fp
 80166a4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80166a8:	460d      	mov	r5, r1
 80166aa:	465a      	mov	r2, fp
 80166ac:	460b      	mov	r3, r1
 80166ae:	4640      	mov	r0, r8
 80166b0:	4649      	mov	r1, r9
 80166b2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80166b6:	f7e9 ffb7 	bl	8000628 <__aeabi_dmul>
 80166ba:	465c      	mov	r4, fp
 80166bc:	4680      	mov	r8, r0
 80166be:	4689      	mov	r9, r1
 80166c0:	4b5d      	ldr	r3, [pc, #372]	@ (8016838 <__ieee754_pow+0x798>)
 80166c2:	2200      	movs	r2, #0
 80166c4:	4620      	mov	r0, r4
 80166c6:	4629      	mov	r1, r5
 80166c8:	f7e9 fdf6 	bl	80002b8 <__aeabi_dsub>
 80166cc:	4632      	mov	r2, r6
 80166ce:	463b      	mov	r3, r7
 80166d0:	f7e9 fdf2 	bl	80002b8 <__aeabi_dsub>
 80166d4:	4602      	mov	r2, r0
 80166d6:	460b      	mov	r3, r1
 80166d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80166dc:	f7e9 fdec 	bl	80002b8 <__aeabi_dsub>
 80166e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166e4:	f7e9 ffa0 	bl	8000628 <__aeabi_dmul>
 80166e8:	4622      	mov	r2, r4
 80166ea:	4606      	mov	r6, r0
 80166ec:	460f      	mov	r7, r1
 80166ee:	462b      	mov	r3, r5
 80166f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166f4:	f7e9 ff98 	bl	8000628 <__aeabi_dmul>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
 80166fc:	4630      	mov	r0, r6
 80166fe:	4639      	mov	r1, r7
 8016700:	f7e9 fddc 	bl	80002bc <__adddf3>
 8016704:	4606      	mov	r6, r0
 8016706:	460f      	mov	r7, r1
 8016708:	4602      	mov	r2, r0
 801670a:	460b      	mov	r3, r1
 801670c:	4640      	mov	r0, r8
 801670e:	4649      	mov	r1, r9
 8016710:	f7e9 fdd4 	bl	80002bc <__adddf3>
 8016714:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016718:	a33b      	add	r3, pc, #236	@ (adr r3, 8016808 <__ieee754_pow+0x768>)
 801671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801671e:	4658      	mov	r0, fp
 8016720:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016724:	460d      	mov	r5, r1
 8016726:	f7e9 ff7f 	bl	8000628 <__aeabi_dmul>
 801672a:	465c      	mov	r4, fp
 801672c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016730:	4642      	mov	r2, r8
 8016732:	464b      	mov	r3, r9
 8016734:	4620      	mov	r0, r4
 8016736:	4629      	mov	r1, r5
 8016738:	f7e9 fdbe 	bl	80002b8 <__aeabi_dsub>
 801673c:	4602      	mov	r2, r0
 801673e:	460b      	mov	r3, r1
 8016740:	4630      	mov	r0, r6
 8016742:	4639      	mov	r1, r7
 8016744:	f7e9 fdb8 	bl	80002b8 <__aeabi_dsub>
 8016748:	a331      	add	r3, pc, #196	@ (adr r3, 8016810 <__ieee754_pow+0x770>)
 801674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801674e:	f7e9 ff6b 	bl	8000628 <__aeabi_dmul>
 8016752:	a331      	add	r3, pc, #196	@ (adr r3, 8016818 <__ieee754_pow+0x778>)
 8016754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016758:	4606      	mov	r6, r0
 801675a:	460f      	mov	r7, r1
 801675c:	4620      	mov	r0, r4
 801675e:	4629      	mov	r1, r5
 8016760:	f7e9 ff62 	bl	8000628 <__aeabi_dmul>
 8016764:	4602      	mov	r2, r0
 8016766:	460b      	mov	r3, r1
 8016768:	4630      	mov	r0, r6
 801676a:	4639      	mov	r1, r7
 801676c:	f7e9 fda6 	bl	80002bc <__adddf3>
 8016770:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016772:	4b32      	ldr	r3, [pc, #200]	@ (801683c <__ieee754_pow+0x79c>)
 8016774:	4413      	add	r3, r2
 8016776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677a:	f7e9 fd9f 	bl	80002bc <__adddf3>
 801677e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016782:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016784:	f7e9 fee6 	bl	8000554 <__aeabi_i2d>
 8016788:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801678a:	4b2d      	ldr	r3, [pc, #180]	@ (8016840 <__ieee754_pow+0x7a0>)
 801678c:	4413      	add	r3, r2
 801678e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016792:	4606      	mov	r6, r0
 8016794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016798:	460f      	mov	r7, r1
 801679a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801679e:	f7e9 fd8d 	bl	80002bc <__adddf3>
 80167a2:	4642      	mov	r2, r8
 80167a4:	464b      	mov	r3, r9
 80167a6:	f7e9 fd89 	bl	80002bc <__adddf3>
 80167aa:	4632      	mov	r2, r6
 80167ac:	463b      	mov	r3, r7
 80167ae:	f7e9 fd85 	bl	80002bc <__adddf3>
 80167b2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80167b6:	4632      	mov	r2, r6
 80167b8:	463b      	mov	r3, r7
 80167ba:	4658      	mov	r0, fp
 80167bc:	460d      	mov	r5, r1
 80167be:	f7e9 fd7b 	bl	80002b8 <__aeabi_dsub>
 80167c2:	4642      	mov	r2, r8
 80167c4:	464b      	mov	r3, r9
 80167c6:	f7e9 fd77 	bl	80002b8 <__aeabi_dsub>
 80167ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167ce:	f7e9 fd73 	bl	80002b8 <__aeabi_dsub>
 80167d2:	465c      	mov	r4, fp
 80167d4:	e036      	b.n	8016844 <__ieee754_pow+0x7a4>
 80167d6:	bf00      	nop
 80167d8:	4a454eef 	.word	0x4a454eef
 80167dc:	3fca7e28 	.word	0x3fca7e28
 80167e0:	93c9db65 	.word	0x93c9db65
 80167e4:	3fcd864a 	.word	0x3fcd864a
 80167e8:	a91d4101 	.word	0xa91d4101
 80167ec:	3fd17460 	.word	0x3fd17460
 80167f0:	518f264d 	.word	0x518f264d
 80167f4:	3fd55555 	.word	0x3fd55555
 80167f8:	db6fabff 	.word	0xdb6fabff
 80167fc:	3fdb6db6 	.word	0x3fdb6db6
 8016800:	33333303 	.word	0x33333303
 8016804:	3fe33333 	.word	0x3fe33333
 8016808:	e0000000 	.word	0xe0000000
 801680c:	3feec709 	.word	0x3feec709
 8016810:	dc3a03fd 	.word	0xdc3a03fd
 8016814:	3feec709 	.word	0x3feec709
 8016818:	145b01f5 	.word	0x145b01f5
 801681c:	be3e2fe0 	.word	0xbe3e2fe0
 8016820:	7ff00000 	.word	0x7ff00000
 8016824:	43400000 	.word	0x43400000
 8016828:	0003988e 	.word	0x0003988e
 801682c:	000bb679 	.word	0x000bb679
 8016830:	08017c68 	.word	0x08017c68
 8016834:	3ff00000 	.word	0x3ff00000
 8016838:	40080000 	.word	0x40080000
 801683c:	08017c48 	.word	0x08017c48
 8016840:	08017c58 	.word	0x08017c58
 8016844:	4602      	mov	r2, r0
 8016846:	460b      	mov	r3, r1
 8016848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801684c:	e5d6      	b.n	80163fc <__ieee754_pow+0x35c>
 801684e:	f04f 0a01 	mov.w	sl, #1
 8016852:	e65e      	b.n	8016512 <__ieee754_pow+0x472>
 8016854:	a3b5      	add	r3, pc, #724	@ (adr r3, 8016b2c <__ieee754_pow+0xa8c>)
 8016856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685a:	4630      	mov	r0, r6
 801685c:	4639      	mov	r1, r7
 801685e:	f7e9 fd2d 	bl	80002bc <__adddf3>
 8016862:	4642      	mov	r2, r8
 8016864:	e9cd 0100 	strd	r0, r1, [sp]
 8016868:	464b      	mov	r3, r9
 801686a:	4620      	mov	r0, r4
 801686c:	4629      	mov	r1, r5
 801686e:	f7e9 fd23 	bl	80002b8 <__aeabi_dsub>
 8016872:	4602      	mov	r2, r0
 8016874:	460b      	mov	r3, r1
 8016876:	e9dd 0100 	ldrd	r0, r1, [sp]
 801687a:	f7ea f965 	bl	8000b48 <__aeabi_dcmpgt>
 801687e:	2800      	cmp	r0, #0
 8016880:	f47f adfe 	bne.w	8016480 <__ieee754_pow+0x3e0>
 8016884:	4ba2      	ldr	r3, [pc, #648]	@ (8016b10 <__ieee754_pow+0xa70>)
 8016886:	e022      	b.n	80168ce <__ieee754_pow+0x82e>
 8016888:	4ca2      	ldr	r4, [pc, #648]	@ (8016b14 <__ieee754_pow+0xa74>)
 801688a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801688e:	42a3      	cmp	r3, r4
 8016890:	d919      	bls.n	80168c6 <__ieee754_pow+0x826>
 8016892:	4ba1      	ldr	r3, [pc, #644]	@ (8016b18 <__ieee754_pow+0xa78>)
 8016894:	440b      	add	r3, r1
 8016896:	4303      	orrs	r3, r0
 8016898:	d009      	beq.n	80168ae <__ieee754_pow+0x80e>
 801689a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801689e:	2200      	movs	r2, #0
 80168a0:	2300      	movs	r3, #0
 80168a2:	f7ea f933 	bl	8000b0c <__aeabi_dcmplt>
 80168a6:	3800      	subs	r0, #0
 80168a8:	bf18      	it	ne
 80168aa:	2001      	movne	r0, #1
 80168ac:	e512      	b.n	80162d4 <__ieee754_pow+0x234>
 80168ae:	4642      	mov	r2, r8
 80168b0:	464b      	mov	r3, r9
 80168b2:	f7e9 fd01 	bl	80002b8 <__aeabi_dsub>
 80168b6:	4632      	mov	r2, r6
 80168b8:	463b      	mov	r3, r7
 80168ba:	f7ea f93b 	bl	8000b34 <__aeabi_dcmpge>
 80168be:	2800      	cmp	r0, #0
 80168c0:	d1eb      	bne.n	801689a <__ieee754_pow+0x7fa>
 80168c2:	4b96      	ldr	r3, [pc, #600]	@ (8016b1c <__ieee754_pow+0xa7c>)
 80168c4:	e003      	b.n	80168ce <__ieee754_pow+0x82e>
 80168c6:	4a96      	ldr	r2, [pc, #600]	@ (8016b20 <__ieee754_pow+0xa80>)
 80168c8:	4293      	cmp	r3, r2
 80168ca:	f240 80e7 	bls.w	8016a9c <__ieee754_pow+0x9fc>
 80168ce:	151b      	asrs	r3, r3, #20
 80168d0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80168d4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80168d8:	fa4a fa03 	asr.w	sl, sl, r3
 80168dc:	44da      	add	sl, fp
 80168de:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80168e2:	4890      	ldr	r0, [pc, #576]	@ (8016b24 <__ieee754_pow+0xa84>)
 80168e4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80168e8:	4108      	asrs	r0, r1
 80168ea:	ea00 030a 	and.w	r3, r0, sl
 80168ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80168f2:	f1c1 0114 	rsb	r1, r1, #20
 80168f6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80168fa:	fa4a fa01 	asr.w	sl, sl, r1
 80168fe:	f1bb 0f00 	cmp.w	fp, #0
 8016902:	4640      	mov	r0, r8
 8016904:	4649      	mov	r1, r9
 8016906:	f04f 0200 	mov.w	r2, #0
 801690a:	bfb8      	it	lt
 801690c:	f1ca 0a00 	rsblt	sl, sl, #0
 8016910:	f7e9 fcd2 	bl	80002b8 <__aeabi_dsub>
 8016914:	4680      	mov	r8, r0
 8016916:	4689      	mov	r9, r1
 8016918:	4632      	mov	r2, r6
 801691a:	463b      	mov	r3, r7
 801691c:	4640      	mov	r0, r8
 801691e:	4649      	mov	r1, r9
 8016920:	f7e9 fccc 	bl	80002bc <__adddf3>
 8016924:	2400      	movs	r4, #0
 8016926:	a36a      	add	r3, pc, #424	@ (adr r3, 8016ad0 <__ieee754_pow+0xa30>)
 8016928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692c:	4620      	mov	r0, r4
 801692e:	460d      	mov	r5, r1
 8016930:	f7e9 fe7a 	bl	8000628 <__aeabi_dmul>
 8016934:	4642      	mov	r2, r8
 8016936:	e9cd 0100 	strd	r0, r1, [sp]
 801693a:	464b      	mov	r3, r9
 801693c:	4620      	mov	r0, r4
 801693e:	4629      	mov	r1, r5
 8016940:	f7e9 fcba 	bl	80002b8 <__aeabi_dsub>
 8016944:	4602      	mov	r2, r0
 8016946:	460b      	mov	r3, r1
 8016948:	4630      	mov	r0, r6
 801694a:	4639      	mov	r1, r7
 801694c:	f7e9 fcb4 	bl	80002b8 <__aeabi_dsub>
 8016950:	a361      	add	r3, pc, #388	@ (adr r3, 8016ad8 <__ieee754_pow+0xa38>)
 8016952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016956:	f7e9 fe67 	bl	8000628 <__aeabi_dmul>
 801695a:	a361      	add	r3, pc, #388	@ (adr r3, 8016ae0 <__ieee754_pow+0xa40>)
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	4680      	mov	r8, r0
 8016962:	4689      	mov	r9, r1
 8016964:	4620      	mov	r0, r4
 8016966:	4629      	mov	r1, r5
 8016968:	f7e9 fe5e 	bl	8000628 <__aeabi_dmul>
 801696c:	4602      	mov	r2, r0
 801696e:	460b      	mov	r3, r1
 8016970:	4640      	mov	r0, r8
 8016972:	4649      	mov	r1, r9
 8016974:	f7e9 fca2 	bl	80002bc <__adddf3>
 8016978:	4604      	mov	r4, r0
 801697a:	460d      	mov	r5, r1
 801697c:	4602      	mov	r2, r0
 801697e:	460b      	mov	r3, r1
 8016980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016984:	f7e9 fc9a 	bl	80002bc <__adddf3>
 8016988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801698c:	4680      	mov	r8, r0
 801698e:	4689      	mov	r9, r1
 8016990:	f7e9 fc92 	bl	80002b8 <__aeabi_dsub>
 8016994:	4602      	mov	r2, r0
 8016996:	460b      	mov	r3, r1
 8016998:	4620      	mov	r0, r4
 801699a:	4629      	mov	r1, r5
 801699c:	f7e9 fc8c 	bl	80002b8 <__aeabi_dsub>
 80169a0:	4642      	mov	r2, r8
 80169a2:	4606      	mov	r6, r0
 80169a4:	460f      	mov	r7, r1
 80169a6:	464b      	mov	r3, r9
 80169a8:	4640      	mov	r0, r8
 80169aa:	4649      	mov	r1, r9
 80169ac:	f7e9 fe3c 	bl	8000628 <__aeabi_dmul>
 80169b0:	a34d      	add	r3, pc, #308	@ (adr r3, 8016ae8 <__ieee754_pow+0xa48>)
 80169b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b6:	4604      	mov	r4, r0
 80169b8:	460d      	mov	r5, r1
 80169ba:	f7e9 fe35 	bl	8000628 <__aeabi_dmul>
 80169be:	a34c      	add	r3, pc, #304	@ (adr r3, 8016af0 <__ieee754_pow+0xa50>)
 80169c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c4:	f7e9 fc78 	bl	80002b8 <__aeabi_dsub>
 80169c8:	4622      	mov	r2, r4
 80169ca:	462b      	mov	r3, r5
 80169cc:	f7e9 fe2c 	bl	8000628 <__aeabi_dmul>
 80169d0:	a349      	add	r3, pc, #292	@ (adr r3, 8016af8 <__ieee754_pow+0xa58>)
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	f7e9 fc71 	bl	80002bc <__adddf3>
 80169da:	4622      	mov	r2, r4
 80169dc:	462b      	mov	r3, r5
 80169de:	f7e9 fe23 	bl	8000628 <__aeabi_dmul>
 80169e2:	a347      	add	r3, pc, #284	@ (adr r3, 8016b00 <__ieee754_pow+0xa60>)
 80169e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e8:	f7e9 fc66 	bl	80002b8 <__aeabi_dsub>
 80169ec:	4622      	mov	r2, r4
 80169ee:	462b      	mov	r3, r5
 80169f0:	f7e9 fe1a 	bl	8000628 <__aeabi_dmul>
 80169f4:	a344      	add	r3, pc, #272	@ (adr r3, 8016b08 <__ieee754_pow+0xa68>)
 80169f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fa:	f7e9 fc5f 	bl	80002bc <__adddf3>
 80169fe:	4622      	mov	r2, r4
 8016a00:	462b      	mov	r3, r5
 8016a02:	f7e9 fe11 	bl	8000628 <__aeabi_dmul>
 8016a06:	4602      	mov	r2, r0
 8016a08:	460b      	mov	r3, r1
 8016a0a:	4640      	mov	r0, r8
 8016a0c:	4649      	mov	r1, r9
 8016a0e:	f7e9 fc53 	bl	80002b8 <__aeabi_dsub>
 8016a12:	4604      	mov	r4, r0
 8016a14:	460d      	mov	r5, r1
 8016a16:	4602      	mov	r2, r0
 8016a18:	460b      	mov	r3, r1
 8016a1a:	4640      	mov	r0, r8
 8016a1c:	4649      	mov	r1, r9
 8016a1e:	f7e9 fe03 	bl	8000628 <__aeabi_dmul>
 8016a22:	2200      	movs	r2, #0
 8016a24:	e9cd 0100 	strd	r0, r1, [sp]
 8016a28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	4629      	mov	r1, r5
 8016a30:	f7e9 fc42 	bl	80002b8 <__aeabi_dsub>
 8016a34:	4602      	mov	r2, r0
 8016a36:	460b      	mov	r3, r1
 8016a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a3c:	f7e9 ff1e 	bl	800087c <__aeabi_ddiv>
 8016a40:	4632      	mov	r2, r6
 8016a42:	4604      	mov	r4, r0
 8016a44:	460d      	mov	r5, r1
 8016a46:	463b      	mov	r3, r7
 8016a48:	4640      	mov	r0, r8
 8016a4a:	4649      	mov	r1, r9
 8016a4c:	f7e9 fdec 	bl	8000628 <__aeabi_dmul>
 8016a50:	4632      	mov	r2, r6
 8016a52:	463b      	mov	r3, r7
 8016a54:	f7e9 fc32 	bl	80002bc <__adddf3>
 8016a58:	4602      	mov	r2, r0
 8016a5a:	460b      	mov	r3, r1
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	4629      	mov	r1, r5
 8016a60:	f7e9 fc2a 	bl	80002b8 <__aeabi_dsub>
 8016a64:	4642      	mov	r2, r8
 8016a66:	464b      	mov	r3, r9
 8016a68:	f7e9 fc26 	bl	80002b8 <__aeabi_dsub>
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	4602      	mov	r2, r0
 8016a70:	492d      	ldr	r1, [pc, #180]	@ (8016b28 <__ieee754_pow+0xa88>)
 8016a72:	2000      	movs	r0, #0
 8016a74:	f7e9 fc20 	bl	80002b8 <__aeabi_dsub>
 8016a78:	ec41 0b10 	vmov	d0, r0, r1
 8016a7c:	ee10 3a90 	vmov	r3, s1
 8016a80:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016a84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016a88:	da0b      	bge.n	8016aa2 <__ieee754_pow+0xa02>
 8016a8a:	4650      	mov	r0, sl
 8016a8c:	f000 f85c 	bl	8016b48 <scalbn>
 8016a90:	ec51 0b10 	vmov	r0, r1, d0
 8016a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a98:	f7ff bb6d 	b.w	8016176 <__ieee754_pow+0xd6>
 8016a9c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016aa0:	e73a      	b.n	8016918 <__ieee754_pow+0x878>
 8016aa2:	ec51 0b10 	vmov	r0, r1, d0
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	e7f4      	b.n	8016a94 <__ieee754_pow+0x9f4>
 8016aaa:	491f      	ldr	r1, [pc, #124]	@ (8016b28 <__ieee754_pow+0xa88>)
 8016aac:	2000      	movs	r0, #0
 8016aae:	f7ff bb14 	b.w	80160da <__ieee754_pow+0x3a>
 8016ab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ab6:	f7ff bb10 	b.w	80160da <__ieee754_pow+0x3a>
 8016aba:	4630      	mov	r0, r6
 8016abc:	4639      	mov	r1, r7
 8016abe:	f7ff bb0c 	b.w	80160da <__ieee754_pow+0x3a>
 8016ac2:	460c      	mov	r4, r1
 8016ac4:	f7ff bb69 	b.w	801619a <__ieee754_pow+0xfa>
 8016ac8:	2400      	movs	r4, #0
 8016aca:	f7ff bb4b 	b.w	8016164 <__ieee754_pow+0xc4>
 8016ace:	bf00      	nop
 8016ad0:	00000000 	.word	0x00000000
 8016ad4:	3fe62e43 	.word	0x3fe62e43
 8016ad8:	fefa39ef 	.word	0xfefa39ef
 8016adc:	3fe62e42 	.word	0x3fe62e42
 8016ae0:	0ca86c39 	.word	0x0ca86c39
 8016ae4:	be205c61 	.word	0xbe205c61
 8016ae8:	72bea4d0 	.word	0x72bea4d0
 8016aec:	3e663769 	.word	0x3e663769
 8016af0:	c5d26bf1 	.word	0xc5d26bf1
 8016af4:	3ebbbd41 	.word	0x3ebbbd41
 8016af8:	af25de2c 	.word	0xaf25de2c
 8016afc:	3f11566a 	.word	0x3f11566a
 8016b00:	16bebd93 	.word	0x16bebd93
 8016b04:	3f66c16c 	.word	0x3f66c16c
 8016b08:	5555553e 	.word	0x5555553e
 8016b0c:	3fc55555 	.word	0x3fc55555
 8016b10:	40900000 	.word	0x40900000
 8016b14:	4090cbff 	.word	0x4090cbff
 8016b18:	3f6f3400 	.word	0x3f6f3400
 8016b1c:	4090cc00 	.word	0x4090cc00
 8016b20:	3fe00000 	.word	0x3fe00000
 8016b24:	fff00000 	.word	0xfff00000
 8016b28:	3ff00000 	.word	0x3ff00000
 8016b2c:	652b82fe 	.word	0x652b82fe
 8016b30:	3c971547 	.word	0x3c971547

08016b34 <fabs>:
 8016b34:	ec51 0b10 	vmov	r0, r1, d0
 8016b38:	4602      	mov	r2, r0
 8016b3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016b3e:	ec43 2b10 	vmov	d0, r2, r3
 8016b42:	4770      	bx	lr
 8016b44:	0000      	movs	r0, r0
	...

08016b48 <scalbn>:
 8016b48:	b570      	push	{r4, r5, r6, lr}
 8016b4a:	ec55 4b10 	vmov	r4, r5, d0
 8016b4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016b52:	4606      	mov	r6, r0
 8016b54:	462b      	mov	r3, r5
 8016b56:	b991      	cbnz	r1, 8016b7e <scalbn+0x36>
 8016b58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016b5c:	4323      	orrs	r3, r4
 8016b5e:	d03b      	beq.n	8016bd8 <scalbn+0x90>
 8016b60:	4b33      	ldr	r3, [pc, #204]	@ (8016c30 <scalbn+0xe8>)
 8016b62:	4620      	mov	r0, r4
 8016b64:	4629      	mov	r1, r5
 8016b66:	2200      	movs	r2, #0
 8016b68:	f7e9 fd5e 	bl	8000628 <__aeabi_dmul>
 8016b6c:	4b31      	ldr	r3, [pc, #196]	@ (8016c34 <scalbn+0xec>)
 8016b6e:	429e      	cmp	r6, r3
 8016b70:	4604      	mov	r4, r0
 8016b72:	460d      	mov	r5, r1
 8016b74:	da0f      	bge.n	8016b96 <scalbn+0x4e>
 8016b76:	a326      	add	r3, pc, #152	@ (adr r3, 8016c10 <scalbn+0xc8>)
 8016b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7c:	e01e      	b.n	8016bbc <scalbn+0x74>
 8016b7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016b82:	4291      	cmp	r1, r2
 8016b84:	d10b      	bne.n	8016b9e <scalbn+0x56>
 8016b86:	4622      	mov	r2, r4
 8016b88:	4620      	mov	r0, r4
 8016b8a:	4629      	mov	r1, r5
 8016b8c:	f7e9 fb96 	bl	80002bc <__adddf3>
 8016b90:	4604      	mov	r4, r0
 8016b92:	460d      	mov	r5, r1
 8016b94:	e020      	b.n	8016bd8 <scalbn+0x90>
 8016b96:	460b      	mov	r3, r1
 8016b98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016b9c:	3936      	subs	r1, #54	@ 0x36
 8016b9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016ba2:	4296      	cmp	r6, r2
 8016ba4:	dd0d      	ble.n	8016bc2 <scalbn+0x7a>
 8016ba6:	2d00      	cmp	r5, #0
 8016ba8:	a11b      	add	r1, pc, #108	@ (adr r1, 8016c18 <scalbn+0xd0>)
 8016baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bae:	da02      	bge.n	8016bb6 <scalbn+0x6e>
 8016bb0:	a11b      	add	r1, pc, #108	@ (adr r1, 8016c20 <scalbn+0xd8>)
 8016bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bb6:	a318      	add	r3, pc, #96	@ (adr r3, 8016c18 <scalbn+0xd0>)
 8016bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bbc:	f7e9 fd34 	bl	8000628 <__aeabi_dmul>
 8016bc0:	e7e6      	b.n	8016b90 <scalbn+0x48>
 8016bc2:	1872      	adds	r2, r6, r1
 8016bc4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016bc8:	428a      	cmp	r2, r1
 8016bca:	dcec      	bgt.n	8016ba6 <scalbn+0x5e>
 8016bcc:	2a00      	cmp	r2, #0
 8016bce:	dd06      	ble.n	8016bde <scalbn+0x96>
 8016bd0:	f36f 531e 	bfc	r3, #20, #11
 8016bd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016bd8:	ec45 4b10 	vmov	d0, r4, r5
 8016bdc:	bd70      	pop	{r4, r5, r6, pc}
 8016bde:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016be2:	da08      	bge.n	8016bf6 <scalbn+0xae>
 8016be4:	2d00      	cmp	r5, #0
 8016be6:	a10a      	add	r1, pc, #40	@ (adr r1, 8016c10 <scalbn+0xc8>)
 8016be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bec:	dac3      	bge.n	8016b76 <scalbn+0x2e>
 8016bee:	a10e      	add	r1, pc, #56	@ (adr r1, 8016c28 <scalbn+0xe0>)
 8016bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bf4:	e7bf      	b.n	8016b76 <scalbn+0x2e>
 8016bf6:	3236      	adds	r2, #54	@ 0x36
 8016bf8:	f36f 531e 	bfc	r3, #20, #11
 8016bfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016c00:	4620      	mov	r0, r4
 8016c02:	4b0d      	ldr	r3, [pc, #52]	@ (8016c38 <scalbn+0xf0>)
 8016c04:	4629      	mov	r1, r5
 8016c06:	2200      	movs	r2, #0
 8016c08:	e7d8      	b.n	8016bbc <scalbn+0x74>
 8016c0a:	bf00      	nop
 8016c0c:	f3af 8000 	nop.w
 8016c10:	c2f8f359 	.word	0xc2f8f359
 8016c14:	01a56e1f 	.word	0x01a56e1f
 8016c18:	8800759c 	.word	0x8800759c
 8016c1c:	7e37e43c 	.word	0x7e37e43c
 8016c20:	8800759c 	.word	0x8800759c
 8016c24:	fe37e43c 	.word	0xfe37e43c
 8016c28:	c2f8f359 	.word	0xc2f8f359
 8016c2c:	81a56e1f 	.word	0x81a56e1f
 8016c30:	43500000 	.word	0x43500000
 8016c34:	ffff3cb0 	.word	0xffff3cb0
 8016c38:	3c900000 	.word	0x3c900000

08016c3c <with_errno>:
 8016c3c:	b510      	push	{r4, lr}
 8016c3e:	ed2d 8b02 	vpush	{d8}
 8016c42:	eeb0 8a40 	vmov.f32	s16, s0
 8016c46:	eef0 8a60 	vmov.f32	s17, s1
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	f7fe fb44 	bl	80152d8 <__errno>
 8016c50:	eeb0 0a48 	vmov.f32	s0, s16
 8016c54:	eef0 0a68 	vmov.f32	s1, s17
 8016c58:	ecbd 8b02 	vpop	{d8}
 8016c5c:	6004      	str	r4, [r0, #0]
 8016c5e:	bd10      	pop	{r4, pc}

08016c60 <xflow>:
 8016c60:	4603      	mov	r3, r0
 8016c62:	b507      	push	{r0, r1, r2, lr}
 8016c64:	ec51 0b10 	vmov	r0, r1, d0
 8016c68:	b183      	cbz	r3, 8016c8c <xflow+0x2c>
 8016c6a:	4602      	mov	r2, r0
 8016c6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016c70:	e9cd 2300 	strd	r2, r3, [sp]
 8016c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c78:	f7e9 fcd6 	bl	8000628 <__aeabi_dmul>
 8016c7c:	ec41 0b10 	vmov	d0, r0, r1
 8016c80:	2022      	movs	r0, #34	@ 0x22
 8016c82:	b003      	add	sp, #12
 8016c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c88:	f7ff bfd8 	b.w	8016c3c <with_errno>
 8016c8c:	4602      	mov	r2, r0
 8016c8e:	460b      	mov	r3, r1
 8016c90:	e7ee      	b.n	8016c70 <xflow+0x10>
 8016c92:	0000      	movs	r0, r0
 8016c94:	0000      	movs	r0, r0
	...

08016c98 <__math_uflow>:
 8016c98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016ca0 <__math_uflow+0x8>
 8016c9c:	f7ff bfe0 	b.w	8016c60 <xflow>
 8016ca0:	00000000 	.word	0x00000000
 8016ca4:	10000000 	.word	0x10000000

08016ca8 <__math_oflow>:
 8016ca8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016cb0 <__math_oflow+0x8>
 8016cac:	f7ff bfd8 	b.w	8016c60 <xflow>
 8016cb0:	00000000 	.word	0x00000000
 8016cb4:	70000000 	.word	0x70000000

08016cb8 <__ieee754_sqrt>:
 8016cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cbc:	4a66      	ldr	r2, [pc, #408]	@ (8016e58 <__ieee754_sqrt+0x1a0>)
 8016cbe:	ec55 4b10 	vmov	r4, r5, d0
 8016cc2:	43aa      	bics	r2, r5
 8016cc4:	462b      	mov	r3, r5
 8016cc6:	4621      	mov	r1, r4
 8016cc8:	d110      	bne.n	8016cec <__ieee754_sqrt+0x34>
 8016cca:	4622      	mov	r2, r4
 8016ccc:	4620      	mov	r0, r4
 8016cce:	4629      	mov	r1, r5
 8016cd0:	f7e9 fcaa 	bl	8000628 <__aeabi_dmul>
 8016cd4:	4602      	mov	r2, r0
 8016cd6:	460b      	mov	r3, r1
 8016cd8:	4620      	mov	r0, r4
 8016cda:	4629      	mov	r1, r5
 8016cdc:	f7e9 faee 	bl	80002bc <__adddf3>
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	460d      	mov	r5, r1
 8016ce4:	ec45 4b10 	vmov	d0, r4, r5
 8016ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cec:	2d00      	cmp	r5, #0
 8016cee:	dc0e      	bgt.n	8016d0e <__ieee754_sqrt+0x56>
 8016cf0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016cf4:	4322      	orrs	r2, r4
 8016cf6:	d0f5      	beq.n	8016ce4 <__ieee754_sqrt+0x2c>
 8016cf8:	b19d      	cbz	r5, 8016d22 <__ieee754_sqrt+0x6a>
 8016cfa:	4622      	mov	r2, r4
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	4629      	mov	r1, r5
 8016d00:	f7e9 fada 	bl	80002b8 <__aeabi_dsub>
 8016d04:	4602      	mov	r2, r0
 8016d06:	460b      	mov	r3, r1
 8016d08:	f7e9 fdb8 	bl	800087c <__aeabi_ddiv>
 8016d0c:	e7e8      	b.n	8016ce0 <__ieee754_sqrt+0x28>
 8016d0e:	152a      	asrs	r2, r5, #20
 8016d10:	d115      	bne.n	8016d3e <__ieee754_sqrt+0x86>
 8016d12:	2000      	movs	r0, #0
 8016d14:	e009      	b.n	8016d2a <__ieee754_sqrt+0x72>
 8016d16:	0acb      	lsrs	r3, r1, #11
 8016d18:	3a15      	subs	r2, #21
 8016d1a:	0549      	lsls	r1, r1, #21
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d0fa      	beq.n	8016d16 <__ieee754_sqrt+0x5e>
 8016d20:	e7f7      	b.n	8016d12 <__ieee754_sqrt+0x5a>
 8016d22:	462a      	mov	r2, r5
 8016d24:	e7fa      	b.n	8016d1c <__ieee754_sqrt+0x64>
 8016d26:	005b      	lsls	r3, r3, #1
 8016d28:	3001      	adds	r0, #1
 8016d2a:	02dc      	lsls	r4, r3, #11
 8016d2c:	d5fb      	bpl.n	8016d26 <__ieee754_sqrt+0x6e>
 8016d2e:	1e44      	subs	r4, r0, #1
 8016d30:	1b12      	subs	r2, r2, r4
 8016d32:	f1c0 0420 	rsb	r4, r0, #32
 8016d36:	fa21 f404 	lsr.w	r4, r1, r4
 8016d3a:	4323      	orrs	r3, r4
 8016d3c:	4081      	lsls	r1, r0
 8016d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d42:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8016d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016d4a:	07d2      	lsls	r2, r2, #31
 8016d4c:	bf5c      	itt	pl
 8016d4e:	005b      	lslpl	r3, r3, #1
 8016d50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016d58:	bf58      	it	pl
 8016d5a:	0049      	lslpl	r1, r1, #1
 8016d5c:	2600      	movs	r6, #0
 8016d5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016d62:	107f      	asrs	r7, r7, #1
 8016d64:	0049      	lsls	r1, r1, #1
 8016d66:	2016      	movs	r0, #22
 8016d68:	4632      	mov	r2, r6
 8016d6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016d6e:	1915      	adds	r5, r2, r4
 8016d70:	429d      	cmp	r5, r3
 8016d72:	bfde      	ittt	le
 8016d74:	192a      	addle	r2, r5, r4
 8016d76:	1b5b      	suble	r3, r3, r5
 8016d78:	1936      	addle	r6, r6, r4
 8016d7a:	0fcd      	lsrs	r5, r1, #31
 8016d7c:	3801      	subs	r0, #1
 8016d7e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016d82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016d86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016d8a:	d1f0      	bne.n	8016d6e <__ieee754_sqrt+0xb6>
 8016d8c:	4605      	mov	r5, r0
 8016d8e:	2420      	movs	r4, #32
 8016d90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016d94:	4293      	cmp	r3, r2
 8016d96:	eb0c 0e00 	add.w	lr, ip, r0
 8016d9a:	dc02      	bgt.n	8016da2 <__ieee754_sqrt+0xea>
 8016d9c:	d113      	bne.n	8016dc6 <__ieee754_sqrt+0x10e>
 8016d9e:	458e      	cmp	lr, r1
 8016da0:	d811      	bhi.n	8016dc6 <__ieee754_sqrt+0x10e>
 8016da2:	f1be 0f00 	cmp.w	lr, #0
 8016da6:	eb0e 000c 	add.w	r0, lr, ip
 8016daa:	da3f      	bge.n	8016e2c <__ieee754_sqrt+0x174>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	db3d      	blt.n	8016e2c <__ieee754_sqrt+0x174>
 8016db0:	f102 0801 	add.w	r8, r2, #1
 8016db4:	1a9b      	subs	r3, r3, r2
 8016db6:	458e      	cmp	lr, r1
 8016db8:	bf88      	it	hi
 8016dba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016dbe:	eba1 010e 	sub.w	r1, r1, lr
 8016dc2:	4465      	add	r5, ip
 8016dc4:	4642      	mov	r2, r8
 8016dc6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016dca:	3c01      	subs	r4, #1
 8016dcc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016dd0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016dd4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016dd8:	d1dc      	bne.n	8016d94 <__ieee754_sqrt+0xdc>
 8016dda:	4319      	orrs	r1, r3
 8016ddc:	d01b      	beq.n	8016e16 <__ieee754_sqrt+0x15e>
 8016dde:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8016e5c <__ieee754_sqrt+0x1a4>
 8016de2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8016e60 <__ieee754_sqrt+0x1a8>
 8016de6:	e9da 0100 	ldrd	r0, r1, [sl]
 8016dea:	e9db 2300 	ldrd	r2, r3, [fp]
 8016dee:	f7e9 fa63 	bl	80002b8 <__aeabi_dsub>
 8016df2:	e9da 8900 	ldrd	r8, r9, [sl]
 8016df6:	4602      	mov	r2, r0
 8016df8:	460b      	mov	r3, r1
 8016dfa:	4640      	mov	r0, r8
 8016dfc:	4649      	mov	r1, r9
 8016dfe:	f7e9 fe8f 	bl	8000b20 <__aeabi_dcmple>
 8016e02:	b140      	cbz	r0, 8016e16 <__ieee754_sqrt+0x15e>
 8016e04:	f1b5 3fff 	cmp.w	r5, #4294967295
 8016e08:	e9da 0100 	ldrd	r0, r1, [sl]
 8016e0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8016e10:	d10e      	bne.n	8016e30 <__ieee754_sqrt+0x178>
 8016e12:	3601      	adds	r6, #1
 8016e14:	4625      	mov	r5, r4
 8016e16:	1073      	asrs	r3, r6, #1
 8016e18:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8016e1c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8016e20:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8016e24:	086b      	lsrs	r3, r5, #1
 8016e26:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8016e2a:	e759      	b.n	8016ce0 <__ieee754_sqrt+0x28>
 8016e2c:	4690      	mov	r8, r2
 8016e2e:	e7c1      	b.n	8016db4 <__ieee754_sqrt+0xfc>
 8016e30:	f7e9 fa44 	bl	80002bc <__adddf3>
 8016e34:	e9da 8900 	ldrd	r8, r9, [sl]
 8016e38:	4602      	mov	r2, r0
 8016e3a:	460b      	mov	r3, r1
 8016e3c:	4640      	mov	r0, r8
 8016e3e:	4649      	mov	r1, r9
 8016e40:	f7e9 fe64 	bl	8000b0c <__aeabi_dcmplt>
 8016e44:	b120      	cbz	r0, 8016e50 <__ieee754_sqrt+0x198>
 8016e46:	1cab      	adds	r3, r5, #2
 8016e48:	bf08      	it	eq
 8016e4a:	3601      	addeq	r6, #1
 8016e4c:	3502      	adds	r5, #2
 8016e4e:	e7e2      	b.n	8016e16 <__ieee754_sqrt+0x15e>
 8016e50:	1c6b      	adds	r3, r5, #1
 8016e52:	f023 0501 	bic.w	r5, r3, #1
 8016e56:	e7de      	b.n	8016e16 <__ieee754_sqrt+0x15e>
 8016e58:	7ff00000 	.word	0x7ff00000
 8016e5c:	08017c80 	.word	0x08017c80
 8016e60:	08017c78 	.word	0x08017c78

08016e64 <_init>:
 8016e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e66:	bf00      	nop
 8016e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e6a:	bc08      	pop	{r3}
 8016e6c:	469e      	mov	lr, r3
 8016e6e:	4770      	bx	lr

08016e70 <_fini>:
 8016e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e72:	bf00      	nop
 8016e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e76:	bc08      	pop	{r3}
 8016e78:	469e      	mov	lr, r3
 8016e7a:	4770      	bx	lr
