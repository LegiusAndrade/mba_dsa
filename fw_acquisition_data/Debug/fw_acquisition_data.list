
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08015f00  08015f00  00016f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c90  08016c90  00018284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016c90  08016c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c98  08016c98  00018284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c98  08016c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016c9c  08016c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08016ca0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  20000284  08016f24  00018284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  08016f24  00018e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018284  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038a39  00000000  00000000  000182b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d71  00000000  00000000  00050ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031e8  00000000  00000000  00056a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000269c  00000000  00000000  00059c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dde9  00000000  00000000  0005c2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032269  00000000  00000000  0007a0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6d56  00000000  00000000  000ac336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015308c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e490  00000000  00000000  001530d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00161560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015ee4 	.word	0x08015ee4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	08015ee4 	.word	0x08015ee4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f00a ffaa 	bl	800bef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f812 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 f8da 	bl	8001158 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa4:	f000 f8b0 	bl	8001108 <MX_DMA_Init>
  MX_SPI2_Init();
 8000fa8:	f000 f878 	bl	800109c <MX_SPI2_Init>
  MX_MEMS_Init();
 8000fac:	f00f fd02 	bl	80109b4 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  sd_mount();
 8000fb0:	f000 fa18 	bl	80013e4 <sd_mount>
  sd_list_files();
 8000fb4:	f000 fb60 	bl	8001678 <sd_list_files>
  sd_unmount();
 8000fb8:	f000 fa88 	bl	80014cc <sd_unmount>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000fbc:	f00f fd00 	bl	80109c0 <MX_MEMS_Process>
 8000fc0:	e7fc      	b.n	8000fbc <main+0x28>
	...

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	@ 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	@ 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f013 f962 	bl	801429c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <SystemClock_Config+0xd0>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <SystemClock_Config+0xd0>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff8:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <SystemClock_Config+0xd0>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <SystemClock_Config+0xd4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001010:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <SystemClock_Config+0xd4>)
 8001012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <SystemClock_Config+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001038:	2310      	movs	r3, #16
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800103c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001040:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001042:	2304      	movs	r3, #4
 8001044:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001046:	2307      	movs	r3, #7
 8001048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fc30 	bl	800e8b4 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800105a:	f000 f8db 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f00d fe92 	bl	800eda4 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001086:	f000 f8c5 	bl	8001214 <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	@ 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <MX_SPI2_Init+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010d0:	2220      	movs	r2, #32
 80010d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010e8:	220a      	movs	r2, #10
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_SPI2_Init+0x64>)
 80010ee:	f00e f879 	bl	800f1e4 <HAL_SPI_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010f8:	f000 f88c 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200002a0 	.word	0x200002a0
 8001104:	40003800 	.word	0x40003800

08001108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_DMA_Init+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <MX_DMA_Init+0x4c>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_DMA_Init+0x4c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200e      	movs	r0, #14
 8001130:	f00b f84f 	bl	800c1d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001134:	200e      	movs	r0, #14
 8001136:	f00b f868 	bl	800c20a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	200f      	movs	r0, #15
 8001140:	f00b f847 	bl	800c1d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001144:	200f      	movs	r0, #15
 8001146:	f00b f860 	bl	800c20a <HAL_NVIC_EnableIRQ>

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <MX_GPIO_Init+0xb4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <MX_GPIO_Init+0xb4>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b23      	ldr	r3, [pc, #140]	@ (800120c <MX_GPIO_Init+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_GPIO_Init+0xb4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a1e      	ldr	r2, [pc, #120]	@ (800120c <MX_GPIO_Init+0xb4>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_GPIO_Init+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_GPIO_Init+0xb4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <MX_GPIO_Init+0xb4>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <MX_GPIO_Init+0xb4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_GPIO_Init+0xb4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <MX_GPIO_Init+0xb4>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_GPIO_Init+0xb4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_GPIO_Init+0xb8>)
 80011e4:	f00b fe4a 	bl	800ce7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_GPIO_Init+0xb8>)
 8001200:	f00b fbbc 	bl	800c97c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40020800 	.word	0x40020800

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SD_disk_status+0x14>
        return STA_NOINIT;
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <SD_disk_status+0x16>
    return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8001252:	2301      	movs	r3, #1
 8001254:	e007      	b.n	8001266 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8001256:	f000 fb2f 	bl	80018b8 <SD_SPI_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <SD_disk_read+0x1c>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <SD_disk_read+0x20>
        return RES_PARERR;
 800128c:	2304      	movs	r3, #4
 800128e:	e010      	b.n	80012b2 <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <SD_disk_read+0x4c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <SD_disk_read+0x2c>
 8001298:	2303      	movs	r3, #3
 800129a:	e00a      	b.n	80012b2 <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f000 fbfb 	bl	8001a9c <SD_ReadBlocks>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200005f9 	.word	0x200005f9

080012c0 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <SD_disk_write+0x1c>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <SD_disk_write+0x20>
 80012dc:	2304      	movs	r3, #4
 80012de:	e010      	b.n	8001302 <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <SD_disk_write+0x4c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <SD_disk_write+0x2c>
 80012e8:	2303      	movs	r3, #3
 80012ea:	e00a      	b.n	8001302 <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f000 fca7 	bl	8001c44 <SD_WriteBlocks>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200005f9 	.word	0x200005f9

08001310 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	603a      	str	r2, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	460b      	mov	r3, r1
 800131e:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 8001326:	2304      	movs	r3, #4
 8001328:	e022      	b.n	8001370 <SD_disk_ioctl+0x60>

    switch (cmd) {
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d81e      	bhi.n	800136e <SD_disk_ioctl+0x5e>
 8001330:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <SD_disk_ioctl+0x28>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	08001359 	.word	0x08001359
 8001340:	0800134d 	.word	0x0800134d
 8001344:	08001365 	.word	0x08001365
    case CTRL_SYNC:
        return RES_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	e011      	b.n	8001370 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001352:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e00b      	b.n	8001370 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800135e:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	e005      	b.n	8001370 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 800136e:	2304      	movs	r3, #4
    }
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <sd_get_space_kb>:
//		printf("Format failed: f_mkfs returned %d\r\n", res);
//	}
//		return res;
//}

int sd_get_space_kb(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 8001382:	f107 0208 	add.w	r2, r7, #8
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4814      	ldr	r0, [pc, #80]	@ (80013dc <sd_get_space_kb+0x60>)
 800138c:	f012 fa98 	bl	80138c0 <f_getfree>
 8001390:	4603      	mov	r3, r0
 8001392:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <sd_get_space_kb+0x22>
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	e01a      	b.n	80013d4 <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	3b02      	subs	r3, #2
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	8952      	ldrh	r2, [r2, #10]
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	895b      	ldrh	r3, [r3, #10]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	6939      	ldr	r1, [r7, #16]
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <sd_get_space_kb+0x64>)
 80013ce:	f012 fde7 	bl	8013fa0 <iprintf>
	return FR_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200003b8 	.word	0x200003b8
 80013e0:	08015f00 	.word	0x08015f00

080013e4 <sd_mount>:

int sd_mount(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 80013ea:	4829      	ldr	r0, [pc, #164]	@ (8001490 <sd_mount+0xac>)
 80013ec:	f012 fe40 	bl	8014070 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 80013f0:	4928      	ldr	r1, [pc, #160]	@ (8001494 <sd_mount+0xb0>)
 80013f2:	4829      	ldr	r0, [pc, #164]	@ (8001498 <sd_mount+0xb4>)
 80013f4:	f012 fb66 	bl	8013ac4 <FATFS_LinkDriver>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 80013fe:	4827      	ldr	r0, [pc, #156]	@ (800149c <sd_mount+0xb8>)
 8001400:	f012 fe36 	bl	8014070 <puts>
		return FR_DISK_ERR;
 8001404:	2301      	movs	r3, #1
 8001406:	e03f      	b.n	8001488 <sd_mount+0xa4>
	}

	printf("Initializing disk...\r\n");
 8001408:	4825      	ldr	r0, [pc, #148]	@ (80014a0 <sd_mount+0xbc>)
 800140a:	f012 fe31 	bl	8014070 <puts>
	DSTATUS stat = disk_initialize(0);
 800140e:	2000      	movs	r0, #0
 8001410:	f010 fa4c 	bl	80118ac <disk_initialize>
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <sd_mount+0x54>
		printf("disk_initialize failed: 0x%02X\n", stat);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4619      	mov	r1, r3
 8001422:	4820      	ldr	r0, [pc, #128]	@ (80014a4 <sd_mount+0xc0>)
 8001424:	f012 fdbc 	bl	8013fa0 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8001428:	481f      	ldr	r0, [pc, #124]	@ (80014a8 <sd_mount+0xc4>)
 800142a:	f012 fe21 	bl	8014070 <puts>
		printf("Make sure \"MX_FATFS_Init\" is not being called in the main function\n"\
 800142e:	481f      	ldr	r0, [pc, #124]	@ (80014ac <sd_mount+0xc8>)
 8001430:	f012 fe1e 	bl	8014070 <puts>
				"You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n");
		return FR_NOT_READY;
 8001434:	2303      	movs	r3, #3
 8001436:	e027      	b.n	8001488 <sd_mount+0xa4>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 8001438:	4916      	ldr	r1, [pc, #88]	@ (8001494 <sd_mount+0xb0>)
 800143a:	481d      	ldr	r0, [pc, #116]	@ (80014b0 <sd_mount+0xcc>)
 800143c:	f012 fdb0 	bl	8013fa0 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	4914      	ldr	r1, [pc, #80]	@ (8001494 <sd_mount+0xb0>)
 8001444:	481b      	ldr	r0, [pc, #108]	@ (80014b4 <sd_mount+0xd0>)
 8001446:	f012 f8ff 	bl	8013648 <f_mount>
 800144a:	4603      	mov	r3, r0
 800144c:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d113      	bne.n	800147c <sd_mount+0x98>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 8001454:	490f      	ldr	r1, [pc, #60]	@ (8001494 <sd_mount+0xb0>)
 8001456:	4818      	ldr	r0, [pc, #96]	@ (80014b8 <sd_mount+0xd4>)
 8001458:	f012 fda2 	bl	8013fa0 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 800145c:	f000 fa20 	bl	80018a0 <sd_is_sdhc>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <sd_mount+0x86>
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <sd_mount+0xd8>)
 8001468:	e000      	b.n	800146c <sd_mount+0x88>
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <sd_mount+0xdc>)
 800146c:	4619      	mov	r1, r3
 800146e:	4815      	ldr	r0, [pc, #84]	@ (80014c4 <sd_mount+0xe0>)
 8001470:	f012 fd96 	bl	8013fa0 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 8001474:	f7ff ff82 	bl	800137c <sd_get_space_kb>
		return FR_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e005      	b.n	8001488 <sd_mount+0xa4>
//		}
//		return res;
//	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	@ (80014c8 <sd_mount+0xe4>)
 8001482:	f012 fd8d 	bl	8013fa0 <iprintf>
	return res;
 8001486:	79bb      	ldrb	r3, [r7, #6]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	08015f24 	.word	0x08015f24
 8001494:	200003b8 	.word	0x200003b8
 8001498:	08016794 	.word	0x08016794
 800149c:	08015f3c 	.word	0x08015f3c
 80014a0:	08015f54 	.word	0x08015f54
 80014a4:	08015f6c 	.word	0x08015f6c
 80014a8:	08015f8c 	.word	0x08015f8c
 80014ac:	08015fc4 	.word	0x08015fc4
 80014b0:	0801607c 	.word	0x0801607c
 80014b4:	200003bc 	.word	0x200003bc
 80014b8:	08016098 	.word	0x08016098
 80014bc:	080160c0 	.word	0x080160c0
 80014c0:	080160cc 	.word	0x080160cc
 80014c4:	080160d4 	.word	0x080160d4
 80014c8:	080160e4 	.word	0x080160e4

080014cc <sd_unmount>:


int sd_unmount(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	490a      	ldr	r1, [pc, #40]	@ (8001500 <sd_unmount+0x34>)
 80014d6:	2000      	movs	r0, #0
 80014d8:	f012 f8b6 	bl	8013648 <f_mount>
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <sd_unmount+0x1e>
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <sd_unmount+0x38>)
 80014e8:	e000      	b.n	80014ec <sd_unmount+0x20>
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <sd_unmount+0x3c>)
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	@ (800150c <sd_unmount+0x40>)
 80014f0:	f012 fd56 	bl	8013fa0 <iprintf>
	return res;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200003b8 	.word	0x200003b8
 8001504:	08016104 	.word	0x08016104
 8001508:	08016108 	.word	0x08016108
 800150c:	08016110 	.word	0x08016110

08001510 <sd_list_directory_recursive>:
	FRESULT res = f_mkdir(path);
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

void sd_list_directory_recursive(const char *path, int depth) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b0fa      	sub	sp, #488	@ 0x1e8
 8001514:	af02      	add	r7, sp, #8
 8001516:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800151a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800151e:	6018      	str	r0, [r3, #0]
 8001520:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001524:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001528:	6019      	str	r1, [r3, #0]
	DIR dir;
	FILINFO fno;
	FRESULT res = f_opendir(&dir, path);
 800152a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800152e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001532:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	4610      	mov	r0, r2
 800153a:	f012 f8cb 	bl	80136d4 <f_opendir>
 800153e:	4603      	mov	r3, r0
 8001540:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
	if (res != FR_OK) {
 8001544:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00f      	beq.n	800156c <sd_list_directory_recursive+0x5c>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 800154c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001550:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0059      	lsls	r1, r3, #1
 8001558:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800155c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <sd_list_directory_recursive+0x14c>)
 8001564:	483e      	ldr	r0, [pc, #248]	@ (8001660 <sd_list_directory_recursive+0x150>)
 8001566:	f012 fd1b 	bl	8013fa0 <iprintf>
 800156a:	e072      	b.n	8001652 <sd_list_directory_recursive+0x142>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 800156c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001570:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f012 f955 	bl	8013826 <f_readdir>
 800157c:	4603      	mov	r3, r0
 800157e:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
		if (res != FR_OK || fno.fname[0] == 0) break;
 8001582:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001586:	2b00      	cmp	r3, #0
 8001588:	d15e      	bne.n	8001648 <sd_list_directory_recursive+0x138>
 800158a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800158e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001592:	7d9b      	ldrb	r3, [r3, #22]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d057      	beq.n	8001648 <sd_list_directory_recursive+0x138>

		const char *name = (*fno.fname) ? fno.fname : fno.fname;
 8001598:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800159c:	3316      	adds	r3, #22
 800159e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

		if (fno.fattrib & AM_DIR) {
 80015a2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80015a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015aa:	7a1b      	ldrb	r3, [r3, #8]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d036      	beq.n	8001622 <sd_list_directory_recursive+0x112>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 80015b4:	492b      	ldr	r1, [pc, #172]	@ (8001664 <sd_list_directory_recursive+0x154>)
 80015b6:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 80015ba:	f7fe fe11 	bl	80001e0 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0d3      	beq.n	800156c <sd_list_directory_recursive+0x5c>
 80015c4:	4928      	ldr	r1, [pc, #160]	@ (8001668 <sd_list_directory_recursive+0x158>)
 80015c6:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 80015ca:	f7fe fe09 	bl	80001e0 <strcmp>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0cb      	beq.n	800156c <sd_list_directory_recursive+0x5c>
				printf("%*s📁 %s\r\n", depth * 2, "", name);
 80015d4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80015d8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0059      	lsls	r1, r3, #1
 80015e0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <sd_list_directory_recursive+0x14c>)
 80015e6:	4821      	ldr	r0, [pc, #132]	@ (800166c <sd_list_directory_recursive+0x15c>)
 80015e8:	f012 fcda 	bl	8013fa0 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 80015ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80015f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80015f4:	f107 000c 	add.w	r0, r7, #12
 80015f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <sd_list_directory_recursive+0x160>)
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	f012 fd3c 	bl	8014080 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8001608:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800160c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff78 	bl	8001510 <sd_list_directory_recursive>
 8001620:	e7a4      	b.n	800156c <sd_list_directory_recursive+0x5c>
			}
		} else {
			printf("%*s📄 %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8001622:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001626:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0059      	lsls	r1, r3, #1
 800162e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001632:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <sd_list_directory_recursive+0x14c>)
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <sd_list_directory_recursive+0x164>)
 8001642:	f012 fcad 	bl	8013fa0 <iprintf>
	while (1) {
 8001646:	e791      	b.n	800156c <sd_list_directory_recursive+0x5c>
		}
	}
	f_closedir(&dir);
 8001648:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800164c:	4618      	mov	r0, r3
 800164e:	f012 f8c4 	bl	80137da <f_closedir>
}
 8001652:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	08016264 	.word	0x08016264
 8001660:	08016268 	.word	0x08016268
 8001664:	08016284 	.word	0x08016284
 8001668:	08016288 	.word	0x08016288
 800166c:	0801628c 	.word	0x0801628c
 8001670:	0801629c 	.word	0x0801629c
 8001674:	080162a4 	.word	0x080162a4

08001678 <sd_list_files>:

void sd_list_files(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	printf("📂 Files on SD Card:\r\n");
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <sd_list_files+0x1c>)
 800167e:	f012 fcf7 	bl	8014070 <puts>
	sd_list_directory_recursive(sd_path, 0);
 8001682:	2100      	movs	r1, #0
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <sd_list_files+0x20>)
 8001686:	f7ff ff43 	bl	8001510 <sd_list_directory_recursive>
	printf("\r\n\r\n");
 800168a:	4804      	ldr	r0, [pc, #16]	@ (800169c <sd_list_files+0x24>)
 800168c:	f012 fcf0 	bl	8014070 <puts>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	080162c0 	.word	0x080162c0
 8001698:	200003b8 	.word	0x200003b8
 800169c:	080162d8 	.word	0x080162d8

080016a0 <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_SPI_TxCpltCallback+0x24>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d102      	bne.n	80016b6 <HAL_SPI_TxCpltCallback+0x16>
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_SPI_TxCpltCallback+0x28>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200002a0 	.word	0x200002a0
 80016c8:	200005f0 	.word	0x200005f0

080016cc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2) dma_rx_done = 1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d102      	bne.n	80016e2 <HAL_SPI_TxRxCpltCallback+0x16>
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_SPI_TxRxCpltCallback+0x28>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200002a0 	.word	0x200002a0
 80016f4:	200005f4 	.word	0x200005f4

080016f8 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001702:	1df9      	adds	r1, r7, #7
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	2201      	movs	r2, #1
 800170a:	4803      	ldr	r0, [pc, #12]	@ (8001718 <SD_TransmitByte+0x20>)
 800170c:	f00d fdf3 	bl	800f2f6 <HAL_SPI_Transmit>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002a0 	.word	0x200002a0

0800171c <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001722:	23ff      	movs	r3, #255	@ 0xff
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	2300      	movs	r3, #0
 8001728:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 800172a:	1dba      	adds	r2, r7, #6
 800172c:	1df9      	adds	r1, r7, #7
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	4804      	ldr	r0, [pc, #16]	@ (8001748 <SD_ReceiveByte+0x2c>)
 8001738:	f00d ff21 	bl	800f57e <HAL_SPI_TransmitReceive>
    return data;
 800173c:	79bb      	ldrb	r3, [r7, #6]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002a0 	.word	0x200002a0

0800174c <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <SD_TransmitBuffer+0x34>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	461a      	mov	r2, r3
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4807      	ldr	r0, [pc, #28]	@ (8001784 <SD_TransmitBuffer+0x38>)
 8001766:	f00e f8b3 	bl	800f8d0 <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 800176a:	bf00      	nop
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SD_TransmitBuffer+0x34>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0fb      	beq.n	800176c <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200005f0 	.word	0x200005f0
 8001784:	200002a0 	.word	0x200002a0

08001788 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e007      	b.n	80017aa <SD_ReceiveBuffer+0x22>
 800179a:	4a0f      	ldr	r2, [pc, #60]	@ (80017d8 <SD_ReceiveBuffer+0x50>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	22ff      	movs	r2, #255	@ 0xff
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf3      	blt.n	800179a <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <SD_ReceiveBuffer+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, tx_dummy, buffer, len);
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4906      	ldr	r1, [pc, #24]	@ (80017d8 <SD_ReceiveBuffer+0x50>)
 80017be:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <SD_ReceiveBuffer+0x58>)
 80017c0:	f00e f938 	bl	800fa34 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 80017c4:	bf00      	nop
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <SD_ReceiveBuffer+0x54>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0fb      	beq.n	80017c6 <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200005fc 	.word	0x200005fc
 80017dc:	200005f4 	.word	0x200005f4
 80017e0:	200002a0 	.word	0x200002a0

080017e4 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 80017ea:	f00a fbe7 	bl	800bfbc <HAL_GetTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80017f4:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 80017f6:	f7ff ff91 	bl	800171c <SD_ReceiveByte>
 80017fa:	4603      	mov	r3, r0
 80017fc:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2bff      	cmp	r3, #255	@ 0xff
 8001802:	d101      	bne.n	8001808 <SD_WaitReady+0x24>
 8001804:	2300      	movs	r3, #0
 8001806:	e006      	b.n	8001816 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001808:	f00a fbd8 	bl	800bfbc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4293      	cmp	r3, r2
 8001812:	d8f0      	bhi.n	80017f6 <SD_WaitReady+0x12>
    return SD_ERROR;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	6039      	str	r1, [r7, #0]
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	4613      	mov	r3, r2
 800182c:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 800182e:	23ff      	movs	r3, #255	@ 0xff
 8001830:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8001832:	f7ff ffd7 	bl	80017e4 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff5a 	bl	80016f8 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	0e1b      	lsrs	r3, r3, #24
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff54 	bl	80016f8 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff4e 	bl	80016f8 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff48 	bl	80016f8 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff43 	bl	80016f8 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff3f 	bl	80016f8 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 800187a:	f7ff ff4f 	bl	800171c <SD_ReceiveByte>
 800187e:	4603      	mov	r3, r0
 8001880:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da05      	bge.n	8001896 <SD_SendCommand+0x78>
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3b01      	subs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f1      	bne.n	800187a <SD_SendCommand+0x5c>

    return response;
 8001896:	7bbb      	ldrb	r3, [r7, #14]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
    return sdhc;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <sd_is_sdhc+0x14>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200005f8 	.word	0x200005f8

080018b8 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 80018be:	2201      	movs	r2, #1
 80018c0:	2180      	movs	r1, #128	@ 0x80
 80018c2:	4873      	ldr	r0, [pc, #460]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 80018c4:	f00b fada 	bl	800ce7c <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e005      	b.n	80018da <SD_SPI_Init+0x22>
 80018ce:	20ff      	movs	r0, #255	@ 0xff
 80018d0:	f7ff ff12 	bl	80016f8 <SD_TransmitByte>
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d9f6      	bls.n	80018ce <SD_SPI_Init+0x16>

    SD_CS_LOW();
 80018e0:	2200      	movs	r2, #0
 80018e2:	2180      	movs	r1, #128	@ 0x80
 80018e4:	486a      	ldr	r0, [pc, #424]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 80018e6:	f00b fac9 	bl	800ce7c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 80018ea:	2295      	movs	r2, #149	@ 0x95
 80018ec:	2100      	movs	r1, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff ff95 	bl	800181e <SD_SendCommand>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 80018f8:	2201      	movs	r2, #1
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	4864      	ldr	r0, [pc, #400]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 80018fe:	f00b fabd 	bl	800ce7c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001902:	20ff      	movs	r0, #255	@ 0xff
 8001904:	f7ff fef8 	bl	80016f8 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <SD_SPI_Init+0x5a>
 800190e:	2301      	movs	r3, #1
 8001910:	e0ba      	b.n	8001a88 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	485e      	ldr	r0, [pc, #376]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 8001918:	f00b fab0 	bl	800ce7c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 800191c:	2287      	movs	r2, #135	@ 0x87
 800191e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001922:	2008      	movs	r0, #8
 8001924:	f7ff ff7b 	bl	800181e <SD_SendCommand>
 8001928:	4603      	mov	r3, r0
 800192a:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e00c      	b.n	800194c <SD_SPI_Init+0x94>
 8001932:	7bfc      	ldrb	r4, [r7, #15]
 8001934:	f7ff fef2 	bl	800171c <SD_ReceiveByte>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f104 0310 	add.w	r3, r4, #16
 8001940:	443b      	add	r3, r7
 8001942:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	3301      	adds	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d9ef      	bls.n	8001932 <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8001952:	2201      	movs	r2, #1
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	484e      	ldr	r0, [pc, #312]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 8001958:	f00b fa90 	bl	800ce7c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800195c:	20ff      	movs	r0, #255	@ 0xff
 800195e:	f7ff fecb 	bl	80016f8 <SD_TransmitByte>

    sdhc = 0;
 8001962:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <SD_SPI_Init+0x1dc>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001968:	f00a fb28 	bl	800bfbc <HAL_GetTick>
 800196c:	4603      	mov	r3, r0
 800196e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001972:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d15a      	bne.n	8001a30 <SD_SPI_Init+0x178>
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d157      	bne.n	8001a30 <SD_SPI_Init+0x178>
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2baa      	cmp	r3, #170	@ 0xaa
 8001984:	d154      	bne.n	8001a30 <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001986:	2200      	movs	r2, #0
 8001988:	2180      	movs	r1, #128	@ 0x80
 800198a:	4841      	ldr	r0, [pc, #260]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 800198c:	f00b fa76 	bl	800ce7c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001990:	22ff      	movs	r2, #255	@ 0xff
 8001992:	2100      	movs	r1, #0
 8001994:	2037      	movs	r0, #55	@ 0x37
 8001996:	f7ff ff42 	bl	800181e <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 800199a:	22ff      	movs	r2, #255	@ 0xff
 800199c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019a0:	2029      	movs	r0, #41	@ 0x29
 80019a2:	f7ff ff3c 	bl	800181e <SD_SendCommand>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 80019aa:	2201      	movs	r2, #1
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	4838      	ldr	r0, [pc, #224]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 80019b0:	f00b fa64 	bl	800ce7c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80019b4:	20ff      	movs	r0, #255	@ 0xff
 80019b6:	f7ff fe9f 	bl	80016f8 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <SD_SPI_Init+0x114>
 80019c0:	f00a fafc 	bl	800bfbc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d8dc      	bhi.n	8001986 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SD_SPI_Init+0x11e>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e058      	b.n	8001a88 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 80019d6:	2200      	movs	r2, #0
 80019d8:	2180      	movs	r1, #128	@ 0x80
 80019da:	482d      	ldr	r0, [pc, #180]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 80019dc:	f00b fa4e 	bl	800ce7c <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 80019e0:	22ff      	movs	r2, #255	@ 0xff
 80019e2:	2100      	movs	r1, #0
 80019e4:	203a      	movs	r0, #58	@ 0x3a
 80019e6:	f7ff ff1a 	bl	800181e <SD_SendCommand>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e00c      	b.n	8001a0e <SD_SPI_Init+0x156>
 80019f4:	7bfc      	ldrb	r4, [r7, #15]
 80019f6:	f7ff fe91 	bl	800171c <SD_ReceiveByte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	f104 0310 	add.w	r3, r4, #16
 8001a02:	443b      	add	r3, r7
 8001a04:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d9ef      	bls.n	80019f4 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8001a14:	2201      	movs	r2, #1
 8001a16:	2180      	movs	r1, #128	@ 0x80
 8001a18:	481d      	ldr	r0, [pc, #116]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 8001a1a:	f00b fa2f 	bl	800ce7c <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001a1e:	783b      	ldrb	r3, [r7, #0]
 8001a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d02a      	beq.n	8001a7e <SD_SPI_Init+0x1c6>
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <SD_SPI_Init+0x1dc>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001a2e:	e026      	b.n	8001a7e <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8001a30:	2200      	movs	r2, #0
 8001a32:	2180      	movs	r1, #128	@ 0x80
 8001a34:	4816      	ldr	r0, [pc, #88]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 8001a36:	f00b fa21 	bl	800ce7c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001a3a:	22ff      	movs	r2, #255	@ 0xff
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2037      	movs	r0, #55	@ 0x37
 8001a40:	f7ff feed 	bl	800181e <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8001a44:	22ff      	movs	r2, #255	@ 0xff
 8001a46:	2100      	movs	r1, #0
 8001a48:	2029      	movs	r0, #41	@ 0x29
 8001a4a:	f7ff fee8 	bl	800181e <SD_SendCommand>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001a52:	2201      	movs	r2, #1
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	480e      	ldr	r0, [pc, #56]	@ (8001a90 <SD_SPI_Init+0x1d8>)
 8001a58:	f00b fa10 	bl	800ce7c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001a5c:	20ff      	movs	r0, #255	@ 0xff
 8001a5e:	f7ff fe4b 	bl	80016f8 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <SD_SPI_Init+0x1bc>
 8001a68:	f00a faa8 	bl	800bfbc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d8dd      	bhi.n	8001a30 <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <SD_SPI_Init+0x1c8>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e004      	b.n	8001a88 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001a7e:	bf00      	nop
    }

    card_initialized = 1;
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <SD_SPI_Init+0x1e0>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	40020800 	.word	0x40020800
 8001a94:	200005f8 	.word	0x200005f8
 8001a98:	200005f9 	.word	0x200005f9

08001a9c <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <SD_ReadBlocks+0x16>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e054      	b.n	8001b5c <SD_ReadBlocks+0xc0>

    if (count == 1) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d14b      	bne.n	8001b50 <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <SD_ReadBlocks+0xc8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <SD_ReadBlocks+0x2a>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	4827      	ldr	r0, [pc, #156]	@ (8001b68 <SD_ReadBlocks+0xcc>)
 8001acc:	f00b f9d6 	bl	800ce7c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001ad0:	22ff      	movs	r2, #255	@ 0xff
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	2011      	movs	r0, #17
 8001ad6:	f7ff fea2 	bl	800181e <SD_SendCommand>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2180      	movs	r1, #128	@ 0x80
 8001ae4:	4820      	ldr	r0, [pc, #128]	@ (8001b68 <SD_ReadBlocks+0xcc>)
 8001ae6:	f00b f9c9 	bl	800ce7c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e036      	b.n	8001b5c <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001aee:	f00a fa65 	bl	800bfbc <HAL_GetTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	33c8      	adds	r3, #200	@ 0xc8
 8001af6:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001af8:	f7ff fe10 	bl	800171c <SD_ReceiveByte>
 8001afc:	4603      	mov	r3, r0
 8001afe:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b04:	d006      	beq.n	8001b14 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001b06:	f00a fa59 	bl	800bfbc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d8f2      	bhi.n	8001af8 <SD_ReadBlocks+0x5c>
 8001b12:	e000      	b.n	8001b16 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8001b14:	bf00      	nop
        if (token != 0xFE) {
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b1a:	d006      	beq.n	8001b2a <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <SD_ReadBlocks+0xcc>)
 8001b22:	f00b f9ab 	bl	800ce7c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e018      	b.n	8001b5c <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8001b2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff fe2a 	bl	8001788 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8001b34:	f7ff fdf2 	bl	800171c <SD_ReceiveByte>
        SD_ReceiveByte();
 8001b38:	f7ff fdf0 	bl	800171c <SD_ReceiveByte>
        SD_CS_HIGH();
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2180      	movs	r1, #128	@ 0x80
 8001b40:	4809      	ldr	r0, [pc, #36]	@ (8001b68 <SD_ReadBlocks+0xcc>)
 8001b42:	f00b f99b 	bl	800ce7c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001b46:	20ff      	movs	r0, #255	@ 0xff
 8001b48:	f7ff fdd6 	bl	80016f8 <SD_TransmitByte>
        return SD_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e005      	b.n	8001b5c <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f809 	bl	8001b6c <SD_ReadMultiBlocks>
 8001b5a:	4603      	mov	r3, r0
    }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200005f8 	.word	0x200005f8
 8001b68:	40020800 	.word	0x40020800

08001b6c <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <SD_ReadMultiBlocks+0x16>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e058      	b.n	8001c34 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <SD_ReadMultiBlocks+0xd0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <SD_ReadMultiBlocks+0x24>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001b90:	2200      	movs	r2, #0
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	482a      	ldr	r0, [pc, #168]	@ (8001c40 <SD_ReadMultiBlocks+0xd4>)
 8001b96:	f00b f971 	bl	800ce7c <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001b9a:	22ff      	movs	r2, #255	@ 0xff
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	2012      	movs	r0, #18
 8001ba0:	f7ff fe3d 	bl	800181e <SD_SendCommand>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d031      	beq.n	8001c0e <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8001baa:	2201      	movs	r2, #1
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	4824      	ldr	r0, [pc, #144]	@ (8001c40 <SD_ReadMultiBlocks+0xd4>)
 8001bb0:	f00b f964 	bl	800ce7c <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e03d      	b.n	8001c34 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001bb8:	f00a fa00 	bl	800bfbc <HAL_GetTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	33c8      	adds	r3, #200	@ 0xc8
 8001bc0:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001bc2:	f7ff fdab 	bl	800171c <SD_ReceiveByte>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8001bce:	d006      	beq.n	8001bde <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001bd0:	f00a f9f4 	bl	800bfbc <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d8f2      	bhi.n	8001bc2 <SD_ReadMultiBlocks+0x56>
 8001bdc:	e000      	b.n	8001be0 <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 8001bde:	bf00      	nop

        if (token != 0xFE) {
 8001be0:	7cfb      	ldrb	r3, [r7, #19]
 8001be2:	2bfe      	cmp	r3, #254	@ 0xfe
 8001be4:	d006      	beq.n	8001bf4 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8001be6:	2201      	movs	r2, #1
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	4815      	ldr	r0, [pc, #84]	@ (8001c40 <SD_ReadMultiBlocks+0xd4>)
 8001bec:	f00b f946 	bl	800ce7c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e01f      	b.n	8001c34 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8001bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fdc5 	bl	8001788 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8001bfe:	f7ff fd8d 	bl	800171c <SD_ReceiveByte>
        SD_ReceiveByte();
 8001c02:	f7ff fd8b 	bl	800171c <SD_ReceiveByte>

        buff += 512;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001c0c:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1cf      	bne.n	8001bb8 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8001c18:	22ff      	movs	r2, #255	@ 0xff
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	200c      	movs	r0, #12
 8001c1e:	f7ff fdfe 	bl	800181e <SD_SendCommand>
    SD_CS_HIGH();
 8001c22:	2201      	movs	r2, #1
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <SD_ReadMultiBlocks+0xd4>)
 8001c28:	f00b f928 	bl	800ce7c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8001c2c:	20ff      	movs	r0, #255	@ 0xff
 8001c2e:	f7ff fd63 	bl	80016f8 <SD_TransmitByte>

    return SD_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200005f8 	.word	0x200005f8
 8001c40:	40020800 	.word	0x40020800

08001c44 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <SD_WriteBlocks+0x16>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e051      	b.n	8001cfe <SD_WriteBlocks+0xba>

    if (count == 1) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d148      	bne.n	8001cf2 <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 8001c60:	4b29      	ldr	r3, [pc, #164]	@ (8001d08 <SD_WriteBlocks+0xc4>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <SD_WriteBlocks+0x2a>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	025b      	lsls	r3, r3, #9
 8001c6c:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2180      	movs	r1, #128	@ 0x80
 8001c72:	4826      	ldr	r0, [pc, #152]	@ (8001d0c <SD_WriteBlocks+0xc8>)
 8001c74:	f00b f902 	bl	800ce7c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001c78:	22ff      	movs	r2, #255	@ 0xff
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	2018      	movs	r0, #24
 8001c7e:	f7ff fdce 	bl	800181e <SD_SendCommand>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	481f      	ldr	r0, [pc, #124]	@ (8001d0c <SD_WriteBlocks+0xc8>)
 8001c8e:	f00b f8f5 	bl	800ce7c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e033      	b.n	8001cfe <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8001c96:	20fe      	movs	r0, #254	@ 0xfe
 8001c98:	f7ff fd2e 	bl	80016f8 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8001c9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7ff fd53 	bl	800174c <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8001ca6:	20ff      	movs	r0, #255	@ 0xff
 8001ca8:	f7ff fd26 	bl	80016f8 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001cac:	20ff      	movs	r0, #255	@ 0xff
 8001cae:	f7ff fd23 	bl	80016f8 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001cb2:	f7ff fd33 	bl	800171c <SD_ReceiveByte>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d006      	beq.n	8001cd2 <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2180      	movs	r1, #128	@ 0x80
 8001cc8:	4810      	ldr	r0, [pc, #64]	@ (8001d0c <SD_WriteBlocks+0xc8>)
 8001cca:	f00b f8d7 	bl	800ce7c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e015      	b.n	8001cfe <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 8001cd2:	bf00      	nop
 8001cd4:	f7ff fd22 	bl	800171c <SD_ReceiveByte>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0fa      	beq.n	8001cd4 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <SD_WriteBlocks+0xc8>)
 8001ce4:	f00b f8ca 	bl	800ce7c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001ce8:	20ff      	movs	r0, #255	@ 0xff
 8001cea:	f7ff fd05 	bl	80016f8 <SD_TransmitByte>

        return SD_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e005      	b.n	8001cfe <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f80a 	bl	8001d10 <SD_WriteMultiBlocks>
 8001cfc:	4603      	mov	r3, r0
    }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200005f8 	.word	0x200005f8
 8001d0c:	40020800 	.word	0x40020800

08001d10 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <SD_WriteMultiBlocks+0x16>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e059      	b.n	8001dda <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8001d26:	4b2f      	ldr	r3, [pc, #188]	@ (8001de4 <SD_WriteMultiBlocks+0xd4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <SD_WriteMultiBlocks+0x24>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	025b      	lsls	r3, r3, #9
 8001d32:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001d34:	2200      	movs	r2, #0
 8001d36:	2180      	movs	r1, #128	@ 0x80
 8001d38:	482b      	ldr	r0, [pc, #172]	@ (8001de8 <SD_WriteMultiBlocks+0xd8>)
 8001d3a:	f00b f89f 	bl	800ce7c <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 8001d3e:	22ff      	movs	r2, #255	@ 0xff
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	2019      	movs	r0, #25
 8001d44:	f7ff fd6b 	bl	800181e <SD_SendCommand>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02e      	beq.n	8001dac <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	4825      	ldr	r0, [pc, #148]	@ (8001de8 <SD_WriteMultiBlocks+0xd8>)
 8001d54:	f00b f892 	bl	800ce7c <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e03e      	b.n	8001dda <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8001d5c:	20fc      	movs	r0, #252	@ 0xfc
 8001d5e:	f7ff fccb 	bl	80016f8 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 8001d62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7ff fcf0 	bl	800174c <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8001d6c:	20ff      	movs	r0, #255	@ 0xff
 8001d6e:	f7ff fcc3 	bl	80016f8 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001d72:	20ff      	movs	r0, #255	@ 0xff
 8001d74:	f7ff fcc0 	bl	80016f8 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001d78:	f7ff fcd0 	bl	800171c <SD_ReceiveByte>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d006      	beq.n	8001d98 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	4816      	ldr	r0, [pc, #88]	@ (8001de8 <SD_WriteMultiBlocks+0xd8>)
 8001d90:	f00b f874 	bl	800ce7c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e020      	b.n	8001dda <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8001d98:	bf00      	nop
 8001d9a:	f7ff fcbf 	bl	800171c <SD_ReceiveByte>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0fa      	beq.n	8001d9a <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001daa:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1d2      	bne.n	8001d5c <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8001db6:	20fd      	movs	r0, #253	@ 0xfd
 8001db8:	f7ff fc9e 	bl	80016f8 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8001dbc:	bf00      	nop
 8001dbe:	f7ff fcad 	bl	800171c <SD_ReceiveByte>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0fa      	beq.n	8001dbe <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2180      	movs	r1, #128	@ 0x80
 8001dcc:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <SD_WriteMultiBlocks+0xd8>)
 8001dce:	f00b f855 	bl	800ce7c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001dd2:	20ff      	movs	r0, #255	@ 0xff
 8001dd4:	f7ff fc90 	bl	80016f8 <SD_TransmitByte>

    return SD_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200005f8 	.word	0x200005f8
 8001de8:	40020800 	.word	0x40020800

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a47      	ldr	r2, [pc, #284]	@ (8001f78 <HAL_SPI_MspInit+0x13c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 8087 	bne.w	8001f6e <HAL_SPI_MspInit+0x132>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <HAL_SPI_MspInit+0x140>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	4a44      	ldr	r2, [pc, #272]	@ (8001f7c <HAL_SPI_MspInit+0x140>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e70:	4b42      	ldr	r3, [pc, #264]	@ (8001f7c <HAL_SPI_MspInit+0x140>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4b3e      	ldr	r3, [pc, #248]	@ (8001f7c <HAL_SPI_MspInit+0x140>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4a3d      	ldr	r2, [pc, #244]	@ (8001f7c <HAL_SPI_MspInit+0x140>)
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <HAL_SPI_MspInit+0x140>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e98:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4832      	ldr	r0, [pc, #200]	@ (8001f80 <HAL_SPI_MspInit+0x144>)
 8001eb6:	f00a fd61 	bl	800c97c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ebc:	4a32      	ldr	r2, [pc, #200]	@ (8001f88 <HAL_SPI_MspInit+0x14c>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001ec0:	4b30      	ldr	r3, [pc, #192]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001ee6:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef2:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001ef8:	4822      	ldr	r0, [pc, #136]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001efa:	f00a f9a1 	bl	800c240 <HAL_DMA_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001f04:	f7ff f986 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_SPI_MspInit+0x148>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f16:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_SPI_MspInit+0x154>)
 8001f18:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f22:	2240      	movs	r2, #64	@ 0x40
 8001f24:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f26:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f32:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f34:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f54:	f00a f974 	bl	800c240 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8001f5e:	f7ff f959 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f66:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f68:	4a08      	ldr	r2, [pc, #32]	@ (8001f8c <HAL_SPI_MspInit+0x150>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40003800 	.word	0x40003800
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400
 8001f84:	200002f8 	.word	0x200002f8
 8001f88:	40026058 	.word	0x40026058
 8001f8c:	20000358 	.word	0x20000358
 8001f90:	40026070 	.word	0x40026070

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <NMI_Handler+0x4>

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <MemManage_Handler+0x4>

08001fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fea:	f009 ffd3 	bl	800bf94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <DMA1_Stream3_IRQHandler+0x10>)
 8001ffa:	f00a fa27 	bl	800c44c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200002f8 	.word	0x200002f8

08002008 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <DMA1_Stream4_IRQHandler+0x10>)
 800200e:	f00a fa1d 	bl	800c44c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000358 	.word	0x20000358

0800201c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <BSP_I2C1_Init+0x58>)
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <BSP_I2C1_Init+0x5c>)
 800202a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <BSP_I2C1_Init+0x60>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	4912      	ldr	r1, [pc, #72]	@ (800207c <BSP_I2C1_Init+0x60>)
 8002034:	600a      	str	r2, [r1, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d117      	bne.n	800206a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800203a:	480e      	ldr	r0, [pc, #56]	@ (8002074 <BSP_I2C1_Init+0x58>)
 800203c:	f00b ff1c 	bl	800de78 <HAL_I2C_GetState>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d111      	bne.n	800206a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002046:	480b      	ldr	r0, [pc, #44]	@ (8002074 <BSP_I2C1_Init+0x58>)
 8002048:	f000 f936 	bl	80022b8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10b      	bne.n	800206a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002052:	4808      	ldr	r0, [pc, #32]	@ (8002074 <BSP_I2C1_Init+0x58>)
 8002054:	f000 f8fc 	bl	8002250 <MX_I2C1_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800205e:	f06f 0307 	mvn.w	r3, #7
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e001      	b.n	800206a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200007fc 	.word	0x200007fc
 8002078:	40005400 	.word	0x40005400
 800207c:	20000850 	.word	0x20000850

08002080 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <BSP_I2C1_DeInit+0x48>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d014      	beq.n	80020bc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <BSP_I2C1_DeInit+0x48>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3b01      	subs	r3, #1
 8002098:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <BSP_I2C1_DeInit+0x48>)
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <BSP_I2C1_DeInit+0x48>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80020a4:	4809      	ldr	r0, [pc, #36]	@ (80020cc <BSP_I2C1_DeInit+0x4c>)
 80020a6:	f000 f94f 	bl	8002348 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80020aa:	4808      	ldr	r0, [pc, #32]	@ (80020cc <BSP_I2C1_DeInit+0x4c>)
 80020ac:	f00b f844 	bl	800d138 <HAL_I2C_DeInit>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80020b6:	f06f 0307 	mvn.w	r3, #7
 80020ba:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000850 	.word	0x20000850
 80020cc:	200007fc 	.word	0x200007fc

080020d0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	60ba      	str	r2, [r7, #8]
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	81fb      	strh	r3, [r7, #14]
 80020de:	460b      	mov	r3, r1
 80020e0:	81bb      	strh	r3, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020ea:	89ba      	ldrh	r2, [r7, #12]
 80020ec:	89f9      	ldrh	r1, [r7, #14]
 80020ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	480c      	ldr	r0, [pc, #48]	@ (8002130 <BSP_I2C1_WriteReg+0x60>)
 8002100:	f00b fb8e 	bl	800d820 <HAL_I2C_Mem_Write>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800210a:	4809      	ldr	r0, [pc, #36]	@ (8002130 <BSP_I2C1_WriteReg+0x60>)
 800210c:	f00b fec2 	bl	800de94 <HAL_I2C_GetError>
 8002110:	4603      	mov	r3, r0
 8002112:	2b04      	cmp	r3, #4
 8002114:	d103      	bne.n	800211e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002116:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e002      	b.n	8002124 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800211e:	f06f 0303 	mvn.w	r3, #3
 8002122:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002124:	697b      	ldr	r3, [r7, #20]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200007fc 	.word	0x200007fc

08002134 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af04      	add	r7, sp, #16
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	81fb      	strh	r3, [r7, #14]
 8002142:	460b      	mov	r3, r1
 8002144:	81bb      	strh	r3, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800214e:	89ba      	ldrh	r2, [r7, #12]
 8002150:	89f9      	ldrh	r1, [r7, #14]
 8002152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	480c      	ldr	r0, [pc, #48]	@ (8002194 <BSP_I2C1_ReadReg+0x60>)
 8002164:	f00b fc56 	bl	800da14 <HAL_I2C_Mem_Read>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800216e:	4809      	ldr	r0, [pc, #36]	@ (8002194 <BSP_I2C1_ReadReg+0x60>)
 8002170:	f00b fe90 	bl	800de94 <HAL_I2C_GetError>
 8002174:	4603      	mov	r3, r0
 8002176:	2b04      	cmp	r3, #4
 8002178:	d103      	bne.n	8002182 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800217a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	e002      	b.n	8002188 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002182:	f06f 0303 	mvn.w	r3, #3
 8002186:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002188:	697b      	ldr	r3, [r7, #20]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200007fc 	.word	0x200007fc

08002198 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	80fb      	strh	r3, [r7, #6]
 80021a4:	4613      	mov	r3, r2
 80021a6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	88f9      	ldrh	r1, [r7, #6]
 80021b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021b4:	9200      	str	r2, [sp, #0]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <BSP_I2C1_Send+0x50>)
 80021ba:	f00b f801 	bl	800d1c0 <HAL_I2C_Master_Transmit>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00c      	beq.n	80021de <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80021c4:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <BSP_I2C1_Send+0x50>)
 80021c6:	f00b fe65 	bl	800de94 <HAL_I2C_GetError>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d003      	beq.n	80021d8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80021d0:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e002      	b.n	80021de <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80021d8:	f06f 0303 	mvn.w	r3, #3
 80021dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200007fc 	.word	0x200007fc

080021ec <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	80fb      	strh	r3, [r7, #6]
 80021f8:	4613      	mov	r3, r2
 80021fa:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	88f9      	ldrh	r1, [r7, #6]
 8002204:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	480b      	ldr	r0, [pc, #44]	@ (800223c <BSP_I2C1_Recv+0x50>)
 800220e:	f00b f8d5 	bl	800d3bc <HAL_I2C_Master_Receive>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002218:	4808      	ldr	r0, [pc, #32]	@ (800223c <BSP_I2C1_Recv+0x50>)
 800221a:	f00b fe3b 	bl	800de94 <HAL_I2C_GetError>
 800221e:	4603      	mov	r3, r0
 8002220:	2b04      	cmp	r3, #4
 8002222:	d003      	beq.n	800222c <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002224:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e002      	b.n	8002232 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800222c:	f06f 0303 	mvn.w	r3, #3
 8002230:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200007fc 	.word	0x200007fc

08002240 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002244:	f009 feba 	bl	800bfbc <HAL_GetTick>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <MX_I2C1_Init+0x60>)
 8002260:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <MX_I2C1_Init+0x64>)
 8002266:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800227a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f00a fe0b 	bl	800ceb0 <HAL_I2C_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40005400 	.word	0x40005400
 80022b4:	000186a0 	.word	0x000186a0

080022b8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <I2C1_MspInit+0x88>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <I2C1_MspInit+0x88>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <I2C1_MspInit+0x88>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80022dc:	2340      	movs	r3, #64	@ 0x40
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e0:	2312      	movs	r3, #18
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80022ec:	2304      	movs	r3, #4
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4813      	ldr	r0, [pc, #76]	@ (8002344 <I2C1_MspInit+0x8c>)
 80022f8:	f00a fb40 	bl	800c97c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002300:	2312      	movs	r3, #18
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800230c:	2304      	movs	r3, #4
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	480b      	ldr	r0, [pc, #44]	@ (8002344 <I2C1_MspInit+0x8c>)
 8002318:	f00a fb30 	bl	800c97c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <I2C1_MspInit+0x88>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	4a06      	ldr	r2, [pc, #24]	@ (8002340 <I2C1_MspInit+0x88>)
 8002326:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800232a:	6413      	str	r3, [r2, #64]	@ 0x40
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <I2C1_MspInit+0x88>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	@ 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40020400 	.word	0x40020400

08002348 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <I2C1_MspDeInit+0x2c>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <I2C1_MspDeInit+0x2c>)
 8002356:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800235a:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800235c:	2140      	movs	r1, #64	@ 0x40
 800235e:	4806      	ldr	r0, [pc, #24]	@ (8002378 <I2C1_MspDeInit+0x30>)
 8002360:	f00a fc90 	bl	800cc84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002364:	2180      	movs	r1, #128	@ 0x80
 8002366:	4804      	ldr	r0, [pc, #16]	@ (8002378 <I2C1_MspDeInit+0x30>)
 8002368:	f00a fc8c 	bl	800cc84 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	40020400 	.word	0x40020400

0800237c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e00a      	b.n	80023a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800238e:	f3af 8000 	nop.w
 8002392:	4601      	mov	r1, r0
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3301      	adds	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbf0      	blt.n	800238e <_read+0x12>
  }

  return len;
 80023ac:	687b      	ldr	r3, [r7, #4]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e009      	b.n	80023dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	60ba      	str	r2, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f009 fd29 	bl	800be28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dbf1      	blt.n	80023c8 <_write+0x12>
  }
  return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_close>:

int _close(int file)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002416:	605a      	str	r2, [r3, #4]
  return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_isatty>:

int _isatty(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f011 ff66 	bl	8014358 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20018000 	.word	0x20018000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	20000854 	.word	0x20000854
 80024c0:	20000e30 	.word	0x20000e30

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024ec:	f7ff ffea 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	@ (8002528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	@ (8002534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002516:	f011 ff25 	bl	8014364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251a:	f7fe fd3b 	bl	8000f94 <main>
  bx  lr    
 800251e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 800252c:	08016ca0 	.word	0x08016ca0
  ldr r2, =_sbss
 8002530:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8002534:	20000e30 	.word	0x20000e30

08002538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC_IRQHandler>
	...

0800253c <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e088      	b.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7b1a      	ldrb	r2, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a36      	ldr	r2, [pc, #216]	@ (8002674 <LIS2DUXS12_RegisterBusIO+0x138>)
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a35      	ldr	r2, [pc, #212]	@ (8002678 <LIS2DUXS12_RegisterBusIO+0x13c>)
 80025a2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e053      	b.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4798      	blx	r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e049      	b.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d11c      	bne.n	8002618 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d140      	bne.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f8f4 	bl	80027d6 <LIS2DUXS12_ExitDeepPowerDownSPI>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 80025fa:	2350      	movs	r3, #80	@ 0x50
 80025fc:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	461a      	mov	r2, r3
 8002602:	2110      	movs	r1, #16
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fbf6 	bl	8002df6 <LIS2DUXS12_Write_Reg>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02c      	beq.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e028      	b.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10e      	bne.n	800263e <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11f      	bne.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8d3 	bl	80027d6 <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d019      	beq.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e015      	b.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10c      	bne.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f8ab 	bl	80027ac <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e002      	b.n	800266a <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	080032b1 	.word	0x080032b1
 8002678:	080032e7 	.word	0x080032e7

0800267c <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d01f      	beq.n	80026cc <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3320      	adds	r3, #32
 8002690:	f107 0214 	add.w	r2, r7, #20
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f001 fb0a 	bl	8003cb0 <lis2duxs12_i3c_configure_get>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	e05c      	b.n	8002762 <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 80026a8:	7d7b      	ldrb	r3, [r7, #21]
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3320      	adds	r3, #32
 80026b4:	f107 0214 	add.w	r2, r7, #20
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 fac0 	bl	8003c40 <lis2duxs12_i3c_configure_set>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e04a      	b.n	8002762 <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 80026cc:	2100      	movs	r1, #0
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fbac 	bl	8002e2c <LIS2DUXS12_Set_Mem_Bank>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e040      	b.n	8002762 <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3320      	adds	r3, #32
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fec4 	bl	8003474 <lis2duxs12_init_set>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e034      	b.n	8002762 <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0020 	add.w	r0, r3, #32
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002710:	f001 fb33 	bl	8003d7a <lis2duxs12_fifo_mode_set>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	e020      	b.n	8002762 <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a12      	ldr	r2, [pc, #72]	@ (800276c <LIS2DUXS12_Init+0xf0>)
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	2100      	movs	r1, #0
 8002734:	460a      	mov	r2, r1
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	460a      	mov	r2, r1
 800273a:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3320      	adds	r3, #32
 8002740:	f107 0208 	add.w	r2, r7, #8
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f000 ffe2 	bl	8003710 <lis2duxs12_mode_set>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e004      	b.n	8002762 <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	42c80000 	.word	0x42c80000

08002770 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f8ad 	bl	80028d8 <LIS2DUXS12_ACC_Disable>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e00c      	b.n	80027a4 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3320      	adds	r3, #32
 80027b8:	f107 020f 	add.w	r2, r7, #15
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fe46 	bl	8003450 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	2019      	movs	r0, #25
 80027ca:	4798      	blx	r3

  return LIS2DUXS12_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3320      	adds	r3, #32
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 f960 	bl	8003aa8 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	2019      	movs	r0, #25
 80027ee:	4798      	blx	r3

  return LIS2DUXS12_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3320      	adds	r3, #32
 8002808:	f107 020f 	add.w	r2, r7, #15
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fe1e 	bl	8003450 <lis2duxs12_device_id_get>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e003      	b.n	8002828 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2201      	movs	r2, #1
 8002850:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2210      	movs	r2, #16
 800285c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4a06      	ldr	r2, [pc, #24]	@ (8002888 <LIS2DUXS12_GetCapabilities+0x58>)
 8002870:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	44480000 	.word	0x44480000

0800288c <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e016      	b.n	80028d0 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028ae:	4619      	mov	r1, r3
 80028b0:	eeb0 0a67 	vmov.f32	s0, s15
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fadb 	bl	8002e70 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	e004      	b.n	80028d0 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e046      	b.n	800297c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f893 	bl	8002a20 <LIS2DUXS12_ACC_GetOutputDataRate>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e03a      	b.n	800297c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8002906:	edd7 7a03 	vldr	s15, [r7, #12]
 800290a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002984 <LIS2DUXS12_ACC_Disable+0xac>
 800290e:	eef4 7a47 	vcmp.f32	s15, s14
 8002912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002916:	d10e      	bne.n	8002936 <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8002918:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002988 <LIS2DUXS12_ACC_Disable+0xb0>
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f94b 	bl	8002bb8 <LIS2DUXS12_ACC_SetOutputDataRate>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	e026      	b.n	800297c <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	2003      	movs	r0, #3
 8002934:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3320      	adds	r3, #32
 800293a:	f107 0208 	add.w	r2, r7, #8
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f000 ffa1 	bl	8003888 <lis2duxs12_mode_get>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295
 8002950:	e014      	b.n	800297c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002952:	2300      	movs	r3, #0
 8002954:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3320      	adds	r3, #32
 800295a:	f107 0208 	add.w	r2, r7, #8
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fed5 	bl	8003710 <lis2duxs12_mode_set>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	e004      	b.n	800297c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	44480000 	.word	0x44480000
 8002988:	43c80000 	.word	0x43c80000

0800298c <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3320      	adds	r3, #32
 800299e:	f107 0208 	add.w	r2, r7, #8
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 ff6f 	bl	8003888 <lis2duxs12_mode_get>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	e026      	b.n	8002a04 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 80029b6:	7a7b      	ldrb	r3, [r7, #9]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d81b      	bhi.n	80029f4 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 80029bc:	a201      	add	r2, pc, #4	@ (adr r2, 80029c4 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029dd 	.word	0x080029dd
 80029cc:	080029e5 	.word	0x080029e5
 80029d0:	080029ed 	.word	0x080029ed
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 80029d8:	601a      	str	r2, [r3, #0]
      break;
 80029da:	e012      	b.n	8002a02 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4a0c      	ldr	r2, [pc, #48]	@ (8002a10 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 80029e0:	601a      	str	r2, [r3, #0]
      break;
 80029e2:	e00e      	b.n	8002a02 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 80029e8:	601a      	str	r2, [r3, #0]
      break;
 80029ea:	e00a      	b.n	8002a02 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 80029f0:	601a      	str	r2, [r3, #0]
      break;
 80029f2:	e006      	b.n	8002a02 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 80029f8:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	60fb      	str	r3, [r7, #12]
      break;
 8002a00:	bf00      	nop
  }

  return ret;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	3d79db23 	.word	0x3d79db23
 8002a10:	3df9db23 	.word	0x3df9db23
 8002a14:	3e79db23 	.word	0x3e79db23
 8002a18:	3ef9db23 	.word	0x3ef9db23
 8002a1c:	bf800000 	.word	0xbf800000

08002a20 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3320      	adds	r3, #32
 8002a32:	f107 0208 	add.w	r2, r7, #8
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ff25 	bl	8003888 <lis2duxs12_mode_get>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	e09b      	b.n	8002b82 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8002a4a:	7a3b      	ldrb	r3, [r7, #8]
 8002a4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a4e:	f200 8090 	bhi.w	8002b72 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002a52:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002b19 	.word	0x08002b19
 8002a5c:	08002b23 	.word	0x08002b23
 8002a60:	08002b2b 	.word	0x08002b2b
 8002a64:	08002b43 	.word	0x08002b43
 8002a68:	08002b33 	.word	0x08002b33
 8002a6c:	08002b3b 	.word	0x08002b3b
 8002a70:	08002b43 	.word	0x08002b43
 8002a74:	08002b4b 	.word	0x08002b4b
 8002a78:	08002b53 	.word	0x08002b53
 8002a7c:	08002b5b 	.word	0x08002b5b
 8002a80:	08002b63 	.word	0x08002b63
 8002a84:	08002b6b 	.word	0x08002b6b
 8002a88:	08002b73 	.word	0x08002b73
 8002a8c:	08002b73 	.word	0x08002b73
 8002a90:	08002b73 	.word	0x08002b73
 8002a94:	08002b73 	.word	0x08002b73
 8002a98:	08002b73 	.word	0x08002b73
 8002a9c:	08002b73 	.word	0x08002b73
 8002aa0:	08002b73 	.word	0x08002b73
 8002aa4:	08002b73 	.word	0x08002b73
 8002aa8:	08002b33 	.word	0x08002b33
 8002aac:	08002b3b 	.word	0x08002b3b
 8002ab0:	08002b43 	.word	0x08002b43
 8002ab4:	08002b4b 	.word	0x08002b4b
 8002ab8:	08002b53 	.word	0x08002b53
 8002abc:	08002b5b 	.word	0x08002b5b
 8002ac0:	08002b63 	.word	0x08002b63
 8002ac4:	08002b6b 	.word	0x08002b6b
 8002ac8:	08002b73 	.word	0x08002b73
 8002acc:	08002b73 	.word	0x08002b73
 8002ad0:	08002b73 	.word	0x08002b73
 8002ad4:	08002b73 	.word	0x08002b73
 8002ad8:	08002b73 	.word	0x08002b73
 8002adc:	08002b73 	.word	0x08002b73
 8002ae0:	08002b73 	.word	0x08002b73
 8002ae4:	08002b73 	.word	0x08002b73
 8002ae8:	08002b73 	.word	0x08002b73
 8002aec:	08002b73 	.word	0x08002b73
 8002af0:	08002b73 	.word	0x08002b73
 8002af4:	08002b73 	.word	0x08002b73
 8002af8:	08002b73 	.word	0x08002b73
 8002afc:	08002b73 	.word	0x08002b73
 8002b00:	08002b73 	.word	0x08002b73
 8002b04:	08002b73 	.word	0x08002b73
 8002b08:	08002b73 	.word	0x08002b73
 8002b0c:	08002b73 	.word	0x08002b73
 8002b10:	08002b19 	.word	0x08002b19
 8002b14:	08002b19 	.word	0x08002b19
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
      break;
 8002b20:	e02e      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8002b26:	601a      	str	r2, [r3, #0]
      break;
 8002b28:	e02a      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8002b2e:	601a      	str	r2, [r3, #0]
      break;
 8002b30:	e026      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8002b36:	601a      	str	r2, [r3, #0]
      break;
 8002b38:	e022      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	@ (8002b98 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8002b3e:	601a      	str	r2, [r3, #0]
      break;
 8002b40:	e01e      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	4a15      	ldr	r2, [pc, #84]	@ (8002b9c <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8002b46:	601a      	str	r2, [r3, #0]
      break;
 8002b48:	e01a      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ba0 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002b4e:	601a      	str	r2, [r3, #0]
      break;
 8002b50:	e016      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8002b56:	601a      	str	r2, [r3, #0]
      break;
 8002b58:	e012      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002b5e:	601a      	str	r2, [r3, #0]
      break;
 8002b60:	e00e      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	4a11      	ldr	r2, [pc, #68]	@ (8002bac <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8002b66:	601a      	str	r2, [r3, #0]
      break;
 8002b68:	e00a      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002b6e:	601a      	str	r2, [r3, #0]
      break;
 8002b70:	e006      	b.n	8002b80 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb4 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8002b76:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	60fb      	str	r3, [r7, #12]
      break;
 8002b7e:	bf00      	nop
  }

  return ret;
 8002b80:	68fb      	ldr	r3, [r7, #12]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	3fcccccd 	.word	0x3fcccccd
 8002b90:	40400000 	.word	0x40400000
 8002b94:	40c00000 	.word	0x40c00000
 8002b98:	41480000 	.word	0x41480000
 8002b9c:	41c80000 	.word	0x41c80000
 8002ba0:	42480000 	.word	0x42480000
 8002ba4:	42c80000 	.word	0x42c80000
 8002ba8:	43480000 	.word	0x43480000
 8002bac:	43c80000 	.word	0x43c80000
 8002bb0:	44480000 	.word	0x44480000
 8002bb4:	bf800000 	.word	0xbf800000

08002bb8 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	ed97 0a00 	vldr	s0, [r7]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f805 	bl	8002bda <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002be6:	460b      	mov	r3, r1
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d108      	bne.n	8002c06 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	ed97 0a02 	vldr	s0, [r7, #8]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f937 	bl	8002e70 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002c02:	4603      	mov	r3, r0
 8002c04:	e007      	b.n	8002c16 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 faac 	bl	800316c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8002c14:	4603      	mov	r3, r0
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3320      	adds	r3, #32
 8002c32:	f107 0208 	add.w	r2, r7, #8
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fe25 	bl	8003888 <lis2duxs12_mode_get>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	e027      	b.n	8002c9a <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8002c4a:	7a7b      	ldrb	r3, [r7, #9]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d81b      	bhi.n	8002c88 <LIS2DUXS12_ACC_GetFullScale+0x68>
 8002c50:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c71 	.word	0x08002c71
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c81 	.word	0x08002c81
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
      break;
 8002c6e:	e013      	b.n	8002c98 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2204      	movs	r2, #4
 8002c74:	601a      	str	r2, [r3, #0]
      break;
 8002c76:	e00f      	b.n	8002c98 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
      break;
 8002c7e:	e00b      	b.n	8002c98 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	601a      	str	r2, [r3, #0]
      break;
 8002c86:	e007      	b.n	8002c98 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	60fb      	str	r3, [r7, #12]
      break;
 8002c96:	bf00      	nop
  }

  return ret;
 8002c98:	68fb      	ldr	r3, [r7, #12]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop

08002ca4 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	f107 020c 	add.w	r2, r7, #12
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fde5 	bl	8003888 <lis2duxs12_mode_get>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	e01f      	b.n	8002d0a <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	dd0b      	ble.n	8002ce8 <LIS2DUXS12_ACC_SetFullScale+0x44>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	dd06      	ble.n	8002ce4 <LIS2DUXS12_ACC_SetFullScale+0x40>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	dc01      	bgt.n	8002ce0 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e004      	b.n	8002cea <LIS2DUXS12_ACC_SetFullScale+0x46>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e002      	b.n	8002cea <LIS2DUXS12_ACC_SetFullScale+0x46>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LIS2DUXS12_ACC_SetFullScale+0x46>
 8002ce8:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 8002cea:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3320      	adds	r3, #32
 8002cf0:	f107 020c 	add.w	r2, r7, #12
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fd0a 	bl	8003710 <lis2duxs12_mode_set>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e000      	b.n	8002d0a <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3320      	adds	r3, #32
 8002d20:	f107 021c 	add.w	r2, r7, #28
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fdae 	bl	8003888 <lis2duxs12_mode_get>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	e01b      	b.n	8002d70 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	f107 011c 	add.w	r1, r7, #28
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fecf 	bl	8003ae8 <lis2duxs12_xl_data_get>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	e00c      	b.n	8002d70 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 8002d56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 8002d5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 8002d66:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3320      	adds	r3, #32
 8002d86:	f107 021c 	add.w	r2, r7, #28
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd7b 	bl	8003888 <lis2duxs12_mode_get>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	e027      	b.n	8002dee <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3320      	adds	r3, #32
 8002da2:	f107 0208 	add.w	r2, r7, #8
 8002da6:	f107 011c 	add.w	r1, r7, #28
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fe9c 	bl	8003ae8 <lis2duxs12_xl_data_get>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	e018      	b.n	8002dee <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8002dbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc4:	ee17 2a90 	vmov	r2, s15
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8002dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd4:	ee17 2a90 	vmov	r2, s15
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8002ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de4:	ee17 2a90 	vmov	r2, s15
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
 8002e02:	4613      	mov	r3, r2
 8002e04:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f103 0020 	add.w	r0, r3, #32
 8002e0c:	1cba      	adds	r2, r7, #2
 8002e0e:	78f9      	ldrb	r1, [r7, #3]
 8002e10:	2301      	movs	r3, #1
 8002e12:	f000 faa0 	bl	8003356 <lis2duxs12_write_reg>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	e000      	b.n	8002e24 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 8002e48:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	7afa      	ldrb	r2, [r7, #11]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 ff6b 	bl	8003d2e <lis2duxs12_mem_bank_set>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3320      	adds	r3, #32
 8002e84:	f107 0214 	add.w	r2, r7, #20
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fcfc 	bl	8003888 <lis2duxs12_mode_get>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e142      	b.n	8003122 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 8002ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea6:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 800312c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 8002eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	d801      	bhi.n	8002eb8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e00b      	b.n	8002ed0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ebc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	d801      	bhi.n	8002ece <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e000      	b.n	8002ed0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002ece:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 8002ed0:	753b      	strb	r3, [r7, #20]
 8002ed2:	e0a4      	b.n	800301e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d14f      	bne.n	8002f7a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 8002eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ede:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	d801      	bhi.n	8002ef0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e042      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002ef0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ef4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	d801      	bhi.n	8002f06 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e037      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f0a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	d801      	bhi.n	8002f1c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 8002f18:	2306      	movs	r3, #6
 8002f1a:	e02c      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002f1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f20:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003130 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8002f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	d801      	bhi.n	8002f32 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 8002f2e:	2307      	movs	r3, #7
 8002f30:	e021      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f36:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003134 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8002f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f42:	d801      	bhi.n	8002f48 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8002f44:	2308      	movs	r3, #8
 8002f46:	e016      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002f48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f4c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003138 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8002f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	d801      	bhi.n	8002f5e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 8002f5a:	2309      	movs	r3, #9
 8002f5c:	e00b      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f62:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800313c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8002f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	d801      	bhi.n	8002f74 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002f70:	230a      	movs	r3, #10
 8002f72:	e000      	b.n	8002f76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002f74:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 8002f76:	753b      	strb	r3, [r7, #20]
 8002f78:	e051      	b.n	800301e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d14e      	bne.n	800301e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8002f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f84:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	d801      	bhi.n	8002f96 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002f92:	2314      	movs	r3, #20
 8002f94:	e042      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f9a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d801      	bhi.n	8002fac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002fa8:	2315      	movs	r3, #21
 8002faa:	e037      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	d801      	bhi.n	8002fc2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002fbe:	2316      	movs	r3, #22
 8002fc0:	e02c      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003130 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d801      	bhi.n	8002fd8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002fd4:	2317      	movs	r3, #23
 8002fd6:	e021      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002fd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fdc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003134 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8002fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d801      	bhi.n	8002fee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002fea:	2318      	movs	r3, #24
 8002fec:	e016      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003138 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	d801      	bhi.n	8003004 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003000:	2319      	movs	r3, #25
 8003002:	e00b      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003004:	edd7 7a02 	vldr	s15, [r7, #8]
 8003008:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800313c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 800300c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d801      	bhi.n	800301a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8003016:	231a      	movs	r3, #26
 8003018:	e000      	b.n	800301c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800301a:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 800301c:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3320      	adds	r3, #32
 8003022:	f107 0214 	add.w	r2, r7, #20
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fb71 	bl	8003710 <lis2duxs12_mode_set>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	e073      	b.n	8003122 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 800303a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 800303c:	2b01      	cmp	r3, #1
 800303e:	d05b      	beq.n	80030f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8003040:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8003042:	2b02      	cmp	r3, #2
 8003044:	d056      	beq.n	80030f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 8003046:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8003048:	2b04      	cmp	r3, #4
 800304a:	d051      	beq.n	80030f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 800304c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 800304e:	2b14      	cmp	r3, #20
 8003050:	d04c      	beq.n	80030ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8003052:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003054:	2b05      	cmp	r3, #5
 8003056:	d047      	beq.n	80030e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 8003058:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800305a:	2b15      	cmp	r3, #21
 800305c:	d042      	beq.n	80030e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 800305e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8003060:	2b03      	cmp	r3, #3
 8003062:	d03d      	beq.n	80030e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8003064:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003066:	2b06      	cmp	r3, #6
 8003068:	d038      	beq.n	80030dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 800306a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 800306c:	2b16      	cmp	r3, #22
 800306e:	d033      	beq.n	80030d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8003070:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003072:	2b07      	cmp	r3, #7
 8003074:	d02e      	beq.n	80030d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 8003076:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8003078:	2b17      	cmp	r3, #23
 800307a:	d029      	beq.n	80030d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 800307c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 800307e:	2b08      	cmp	r3, #8
 8003080:	d024      	beq.n	80030cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8003082:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003084:	2b18      	cmp	r3, #24
 8003086:	d01f      	beq.n	80030c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8003088:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800308a:	2b09      	cmp	r3, #9
 800308c:	d01a      	beq.n	80030c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 800308e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003090:	2b19      	cmp	r3, #25
 8003092:	d015      	beq.n	80030c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003094:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003096:	2b0a      	cmp	r3, #10
 8003098:	d010      	beq.n	80030bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800309a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 800309c:	2b1a      	cmp	r3, #26
 800309e:	d00b      	beq.n	80030b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 80030a0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80030a2:	2b0b      	cmp	r3, #11
 80030a4:	d006      	beq.n	80030b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 80030a6:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 80030a8:	2b1b      	cmp	r3, #27
 80030aa:	d101      	bne.n	80030b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 80030ac:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80030ae:	e024      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 80030b2:	e022      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80030b4:	4b22      	ldr	r3, [pc, #136]	@ (8003140 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80030b6:	e020      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80030b8:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80030ba:	e01e      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 80030bc:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80030be:	e01c      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80030c0:	4b22      	ldr	r3, [pc, #136]	@ (800314c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80030c2:	e01a      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80030c4:	4b21      	ldr	r3, [pc, #132]	@ (800314c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80030c6:	e018      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80030c8:	4b21      	ldr	r3, [pc, #132]	@ (8003150 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80030ca:	e016      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80030cc:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80030ce:	e014      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80030d0:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80030d2:	e012      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80030d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80030d6:	e010      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80030d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003158 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80030da:	e00e      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80030dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80030de:	e00c      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80030e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80030e2:	e00a      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80030e4:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80030e6:	e008      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80030e8:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80030ea:	e006      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80030ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80030ee:	e004      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80030f2:	e002      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80030f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80030f6:	e000      	b.n	80030fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80030f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003104:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003108:	eef4 7a47 	vcmp.f32	s15, s14
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	d102      	bne.n	8003118 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	e004      	b.n	8003122 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	79fa      	ldrb	r2, [r7, #7]
 800311c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	3fcccccd 	.word	0x3fcccccd
 8003130:	42480000 	.word	0x42480000
 8003134:	42c80000 	.word	0x42c80000
 8003138:	43480000 	.word	0x43480000
 800313c:	43c80000 	.word	0x43c80000
 8003140:	44480000 	.word	0x44480000
 8003144:	bf800000 	.word	0xbf800000
 8003148:	43c80000 	.word	0x43c80000
 800314c:	43480000 	.word	0x43480000
 8003150:	42c80000 	.word	0x42c80000
 8003154:	42480000 	.word	0x42480000
 8003158:	41c80000 	.word	0x41c80000
 800315c:	41480000 	.word	0x41480000
 8003160:	40c00000 	.word	0x40c00000
 8003164:	40400000 	.word	0x40400000
 8003168:	3fcccccd 	.word	0x3fcccccd

0800316c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	ed87 0a02 	vstr	s0, [r7, #8]
 8003178:	460b      	mov	r3, r1
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11a      	bne.n	80031b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8003182:	edd7 7a02 	vldr	s15, [r7, #8]
 8003186:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800318a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003192:	d802      	bhi.n	800319a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003194:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003198:	e00b      	b.n	80031b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 800319a:	edd7 7a02 	vldr	s15, [r7, #8]
 800319e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80031a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	d801      	bhi.n	80031b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 80031ac:	4b33      	ldr	r3, [pc, #204]	@ (800327c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80031ae:	e000      	b.n	80031b2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80031b6:	e055      	b.n	8003264 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d14f      	bne.n	8003264 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 80031c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80031c8:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80031cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	d801      	bhi.n	80031da <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80031d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003284 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 80031d8:	e042      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 80031da:	edd7 7a02 	vldr	s15, [r7, #8]
 80031de:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80031e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d801      	bhi.n	80031f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 80031ec:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80031ee:	e037      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80031f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031f4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d801      	bhi.n	8003206 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8003202:	4b1f      	ldr	r3, [pc, #124]	@ (8003280 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003204:	e02c      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 8003206:	edd7 7a02 	vldr	s15, [r7, #8]
 800320a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800328c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 800320e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	d801      	bhi.n	800321c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003218:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 800321a:	e021      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 800321c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003220:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003294 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8003224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	d801      	bhi.n	8003232 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8003230:	e016      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 8003232:	edd7 7a02 	vldr	s15, [r7, #8]
 8003236:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800329c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 800323a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d801      	bhi.n	8003248 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8003246:	e00b      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8003248:	edd7 7a02 	vldr	s15, [r7, #8]
 800324c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80032a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8003250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003258:	d801      	bhi.n	800325e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 800325a:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 800325c:	e000      	b.n	8003260 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	79fa      	ldrb	r2, [r7, #7]
 8003268:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40400000 	.word	0x40400000
 8003280:	41c80000 	.word	0x41c80000
 8003284:	40c00000 	.word	0x40c00000
 8003288:	41480000 	.word	0x41480000
 800328c:	42480000 	.word	0x42480000
 8003290:	42480000 	.word	0x42480000
 8003294:	42c80000 	.word	0x42c80000
 8003298:	42c80000 	.word	0x42c80000
 800329c:	43480000 	.word	0x43480000
 80032a0:	43480000 	.word	0x43480000
 80032a4:	43c80000 	.word	0x43c80000
 80032a8:	43c80000 	.word	0x43c80000
 80032ac:	44480000 	.word	0x44480000

080032b0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	461a      	mov	r2, r3
 80032bc:	460b      	mov	r3, r1
 80032be:	72fb      	strb	r3, [r7, #11]
 80032c0:	4613      	mov	r3, r2
 80032c2:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	695c      	ldr	r4, [r3, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	7b1b      	ldrb	r3, [r3, #12]
 80032d0:	4618      	mov	r0, r3
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	b299      	uxth	r1, r3
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	47a0      	blx	r4
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd90      	pop	{r4, r7, pc}

080032e6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032e6:	b590      	push	{r4, r7, lr}
 80032e8:	b087      	sub	sp, #28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	461a      	mov	r2, r3
 80032f2:	460b      	mov	r3, r1
 80032f4:	72fb      	strb	r3, [r7, #11]
 80032f6:	4613      	mov	r3, r2
 80032f8:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	691c      	ldr	r4, [r3, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	7b1b      	ldrb	r3, [r3, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	b299      	uxth	r1, r3
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	47a0      	blx	r4
 8003312:	4603      	mov	r3, r0
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	461a      	mov	r2, r3
 8003328:	460b      	mov	r3, r1
 800332a:	72fb      	strb	r3, [r7, #11]
 800332c:	4613      	mov	r3, r2
 800332e:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <lis2duxs12_read_reg+0x20>
  {
    return -1;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	e008      	b.n	800334e <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685c      	ldr	r4, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68d8      	ldr	r0, [r3, #12]
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	7af9      	ldrb	r1, [r7, #11]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	47a0      	blx	r4
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bd90      	pop	{r4, r7, pc}

08003356 <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 8003356:	b590      	push	{r4, r7, lr}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	461a      	mov	r2, r3
 8003362:	460b      	mov	r3, r1
 8003364:	72fb      	strb	r3, [r7, #11]
 8003366:	4613      	mov	r3, r2
 8003368:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	e008      	b.n	8003388 <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681c      	ldr	r4, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68d8      	ldr	r0, [r3, #12]
 800337e:	893b      	ldrh	r3, [r7, #8]
 8003380:	7af9      	ldrb	r1, [r7, #11]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	47a0      	blx	r4
 8003386:	4603      	mov	r3, r0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bd90      	pop	{r4, r7, pc}

08003390 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 800339a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80033bc <lis2duxs12_from_fs2g_to_mg+0x2c>
 80033aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033ae:	eeb0 0a67 	vmov.f32	s0, s15
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	3d79db23 	.word	0x3d79db23

080033c0 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 80033ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80033ec <lis2duxs12_from_fs4g_to_mg+0x2c>
 80033da:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	3df9db23 	.word	0x3df9db23

080033f0 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 80033fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003406:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800341c <lis2duxs12_from_fs8g_to_mg+0x2c>
 800340a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800340e:	eeb0 0a67 	vmov.f32	s0, s15
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	3e79db23 	.word	0x3e79db23

08003420 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 800342a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003436:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800344c <lis2duxs12_from_fs16g_to_mg+0x2c>
 800343a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800343e:	eeb0 0a67 	vmov.f32	s0, s15
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	3ef9db23 	.word	0x3ef9db23

08003450 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 800345a:	2301      	movs	r3, #1
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	210f      	movs	r1, #15
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff5b 	bl	800331c <lis2duxs12_read_reg>
 8003466:	60f8      	str	r0, [r7, #12]

  return ret;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003488:	f107 0214 	add.w	r2, r7, #20
 800348c:	2301      	movs	r3, #1
 800348e:	2110      	movs	r1, #16
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff43 	bl	800331c <lis2duxs12_read_reg>
 8003496:	4602      	mov	r2, r0
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4413      	add	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800349e:	f107 0210 	add.w	r2, r7, #16
 80034a2:	2301      	movs	r3, #1
 80034a4:	2113      	movs	r1, #19
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ff38 	bl	800331c <lis2duxs12_read_reg>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
  switch (val)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	f200 80ca 	bhi.w	8003650 <lis2duxs12_init_set+0x1dc>
 80034bc:	a201      	add	r2, pc, #4	@ (adr r2, 80034c4 <lis2duxs12_init_set+0x50>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080035c5 	.word	0x080035c5
 80034c8:	080034d5 	.word	0x080034d5
 80034cc:	0800354f 	.word	0x0800354f
 80034d0:	0800360b 	.word	0x0800360b
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 80034d4:	7c3b      	ldrb	r3, [r7, #16]
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80034dc:	f107 0210 	add.w	r2, r7, #16
 80034e0:	2301      	movs	r3, #1
 80034e2:	2113      	movs	r1, #19
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff36 	bl	8003356 <lis2duxs12_write_reg>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	4413      	add	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 80bb 	bne.w	8003670 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80034fa:	f107 0210 	add.w	r2, r7, #16
 80034fe:	2301      	movs	r3, #1
 8003500:	2113      	movs	r1, #19
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff0a 	bl	800331c <lis2duxs12_read_reg>
 8003508:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d113      	bne.n	8003538 <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8003510:	7c3b      	ldrb	r3, [r7, #16]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00f      	beq.n	800353c <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2019      	movs	r0, #25
 800352a:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 800352c:	7ffb      	ldrb	r3, [r7, #31]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	77fa      	strb	r2, [r7, #31]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d9e1      	bls.n	80034fa <lis2duxs12_init_set+0x86>
 8003536:	e002      	b.n	800353e <lis2duxs12_init_set+0xca>
          break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <lis2duxs12_init_set+0xca>
          break;
 800353c:	bf00      	nop

      if (cnt >= 5U)
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	2b04      	cmp	r3, #4
 8003542:	f240 8097 	bls.w	8003674 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	61bb      	str	r3, [r7, #24]
      }
      break;
 800354c:	e092      	b.n	8003674 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 800354e:	7d3b      	ldrb	r3, [r7, #20]
 8003550:	f043 0320 	orr.w	r3, r3, #32
 8003554:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003556:	f107 0214 	add.w	r2, r7, #20
 800355a:	2301      	movs	r3, #1
 800355c:	2110      	movs	r1, #16
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fef9 	bl	8003356 <lis2duxs12_write_reg>
 8003564:	4602      	mov	r2, r0
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4413      	add	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 8082 	bne.w	8003678 <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f884 	bl	8003688 <lis2duxs12_status_get>
 8003580:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d113      	bne.n	80035b0 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 8003588:	7b3b      	ldrb	r3, [r7, #12]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00f      	beq.n	80035b4 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2001      	movs	r0, #1
 80035a2:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	77fa      	strb	r2, [r7, #31]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d9e2      	bls.n	8003574 <lis2duxs12_init_set+0x100>
 80035ae:	e002      	b.n	80035b6 <lis2duxs12_init_set+0x142>
          break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <lis2duxs12_init_set+0x142>
          break;
 80035b4:	bf00      	nop

      if (cnt >= 5U)
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d95f      	bls.n	800367c <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	61bb      	str	r3, [r7, #24]
      }
      break;
 80035c2:	e05b      	b.n	800367c <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 80035c4:	7c3b      	ldrb	r3, [r7, #16]
 80035c6:	f023 0310 	bic.w	r3, r3, #16
 80035ca:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 80035cc:	7c3b      	ldrb	r3, [r7, #16]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 80035d4:	7d3b      	ldrb	r3, [r7, #20]
 80035d6:	f043 0310 	orr.w	r3, r3, #16
 80035da:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80035dc:	f107 0210 	add.w	r2, r7, #16
 80035e0:	2301      	movs	r3, #1
 80035e2:	2113      	movs	r1, #19
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff feb6 	bl	8003356 <lis2duxs12_write_reg>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80035f2:	f107 0214 	add.w	r2, r7, #20
 80035f6:	2301      	movs	r3, #1
 80035f8:	2110      	movs	r1, #16
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff feab 	bl	8003356 <lis2duxs12_write_reg>
 8003600:	4602      	mov	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4413      	add	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
      break;
 8003608:	e039      	b.n	800367e <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 800360a:	7c3b      	ldrb	r3, [r7, #16]
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003612:	7c3b      	ldrb	r3, [r7, #16]
 8003614:	f043 0320 	orr.w	r3, r3, #32
 8003618:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 800361a:	7d3b      	ldrb	r3, [r7, #20]
 800361c:	f043 0310 	orr.w	r3, r3, #16
 8003620:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003622:	f107 0210 	add.w	r2, r7, #16
 8003626:	2301      	movs	r3, #1
 8003628:	2113      	movs	r1, #19
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fe93 	bl	8003356 <lis2duxs12_write_reg>
 8003630:	4602      	mov	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003638:	f107 0214 	add.w	r2, r7, #20
 800363c:	2301      	movs	r3, #1
 800363e:	2110      	movs	r1, #16
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fe88 	bl	8003356 <lis2duxs12_write_reg>
 8003646:	4602      	mov	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	4413      	add	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      break;
 800364e:	e016      	b.n	800367e <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003650:	7d3b      	ldrb	r3, [r7, #20]
 8003652:	f043 0320 	orr.w	r3, r3, #32
 8003656:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003658:	f107 0214 	add.w	r2, r7, #20
 800365c:	2301      	movs	r3, #1
 800365e:	2110      	movs	r1, #16
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fe78 	bl	8003356 <lis2duxs12_write_reg>
 8003666:	4602      	mov	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
      break;
 800366e:	e006      	b.n	800367e <lis2duxs12_init_set+0x20a>
        break;
 8003670:	bf00      	nop
 8003672:	e004      	b.n	800367e <lis2duxs12_init_set+0x20a>
      break;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <lis2duxs12_init_set+0x20a>
        break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <lis2duxs12_init_set+0x20a>
      break;
 800367c:	bf00      	nop
  }
  return ret;
 800367e:	69bb      	ldr	r3, [r7, #24]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003692:	f107 0210 	add.w	r2, r7, #16
 8003696:	2301      	movs	r3, #1
 8003698:	2125      	movs	r1, #37	@ 0x25
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe3e 	bl	800331c <lis2duxs12_read_reg>
 80036a0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80036a2:	f107 020c 	add.w	r2, r7, #12
 80036a6:	2301      	movs	r3, #1
 80036a8:	2110      	movs	r1, #16
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe36 	bl	800331c <lis2duxs12_read_reg>
 80036b0:	4602      	mov	r2, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80036b8:	f107 0208 	add.w	r2, r7, #8
 80036bc:	2301      	movs	r3, #1
 80036be:	2113      	movs	r1, #19
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fe2b 	bl	800331c <lis2duxs12_read_reg>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4413      	add	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 80036ce:	7b3b      	ldrb	r3, [r7, #12]
 80036d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80036d4:	b2d9      	uxtb	r1, r3
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	7813      	ldrb	r3, [r2, #0]
 80036da:	f361 0300 	bfi	r3, r1, #0, #1
 80036de:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 80036e0:	7a3b      	ldrb	r3, [r7, #8]
 80036e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	7813      	ldrb	r3, [r2, #0]
 80036ec:	f361 0341 	bfi	r3, r1, #1, #1
 80036f0:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 80036f2:	7c3b      	ldrb	r3, [r7, #16]
 80036f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036f8:	b2d9      	uxtb	r1, r3
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	7813      	ldrb	r3, [r2, #0]
 80036fe:	f361 0382 	bfi	r3, r1, #2, #1
 8003702:	7013      	strb	r3, [r2, #0]

  return ret;
 8003704:	697b      	ldr	r3, [r7, #20]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 800371a:	f107 020c 	add.w	r2, r7, #12
 800371e:	2301      	movs	r3, #1
 8003720:	2114      	movs	r1, #20
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fdfa 	bl	800331c <lis2duxs12_read_reg>
 8003728:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	b2da      	uxtb	r2, r3
 8003734:	7b3b      	ldrb	r3, [r7, #12]
 8003736:	f362 1307 	bfi	r3, r2, #4, #4
 800373a:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	7b3b      	ldrb	r3, [r7, #12]
 8003748:	f362 0301 	bfi	r3, r2, #0, #2
 800374c:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b06      	cmp	r3, #6
 8003754:	d859      	bhi.n	800380a <lis2duxs12_mode_set+0xfa>
 8003756:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <lis2duxs12_mode_set+0x4c>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003779 	.word	0x08003779
 8003760:	08003779 	.word	0x08003779
 8003764:	08003779 	.word	0x08003779
 8003768:	08003779 	.word	0x08003779
 800376c:	08003783 	.word	0x08003783
 8003770:	0800379f 	.word	0x0800379f
 8003774:	080037cb 	.word	0x080037cb
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003778:	7b3b      	ldrb	r3, [r7, #12]
 800377a:	f023 030c 	bic.w	r3, r3, #12
 800377e:	733b      	strb	r3, [r7, #12]
      break;
 8003780:	e04d      	b.n	800381e <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	789b      	ldrb	r3, [r3, #2]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d003      	beq.n	8003792 <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	617b      	str	r3, [r7, #20]
          break;
 8003790:	e004      	b.n	800379c <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003792:	7b3b      	ldrb	r3, [r7, #12]
 8003794:	f043 030c 	orr.w	r3, r3, #12
 8003798:	733b      	strb	r3, [r7, #12]
          break;
 800379a:	bf00      	nop
      }
      break;
 800379c:	e03f      	b.n	800381e <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	789b      	ldrb	r3, [r3, #2]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d005      	beq.n	80037b2 <lis2duxs12_mode_set+0xa2>
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d009      	beq.n	80037be <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	617b      	str	r3, [r7, #20]
          break;
 80037b0:	e00a      	b.n	80037c8 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 80037b2:	7b3b      	ldrb	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f362 0383 	bfi	r3, r2, #2, #2
 80037ba:	733b      	strb	r3, [r7, #12]
          break;
 80037bc:	e004      	b.n	80037c8 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 80037be:	7b3b      	ldrb	r3, [r7, #12]
 80037c0:	f043 030c 	orr.w	r3, r3, #12
 80037c4:	733b      	strb	r3, [r7, #12]
          break;
 80037c6:	bf00      	nop
      }
      break;
 80037c8:	e029      	b.n	800381e <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	789b      	ldrb	r3, [r3, #2]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d015      	beq.n	80037fe <lis2duxs12_mode_set+0xee>
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	dc03      	bgt.n	80037de <lis2duxs12_mode_set+0xce>
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d005      	beq.n	80037e6 <lis2duxs12_mode_set+0xd6>
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d009      	beq.n	80037f2 <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	617b      	str	r3, [r7, #20]
          break;
 80037e4:	e010      	b.n	8003808 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 80037e6:	7b3b      	ldrb	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f362 0383 	bfi	r3, r2, #2, #2
 80037ee:	733b      	strb	r3, [r7, #12]
          break;
 80037f0:	e00a      	b.n	8003808 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 80037f2:	7b3b      	ldrb	r3, [r7, #12]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f362 0383 	bfi	r3, r2, #2, #2
 80037fa:	733b      	strb	r3, [r7, #12]
          break;
 80037fc:	e004      	b.n	8003808 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 80037fe:	7b3b      	ldrb	r3, [r7, #12]
 8003800:	f043 030c 	orr.w	r3, r3, #12
 8003804:	733b      	strb	r3, [r7, #12]
          break;
 8003806:	bf00      	nop
      }
      break;
 8003808:	e009      	b.n	800381e <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	789b      	ldrb	r3, [r3, #2]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	b2da      	uxtb	r2, r3
 8003814:	7b3b      	ldrb	r3, [r7, #12]
 8003816:	f362 0383 	bfi	r3, r2, #2, #2
 800381a:	733b      	strb	r3, [r7, #12]
      break;
 800381c:	bf00      	nop
  }

  if (ret != 0)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	e02b      	b.n	8003880 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003828:	f107 0210 	add.w	r2, r7, #16
 800382c:	2301      	movs	r3, #1
 800382e:	2112      	movs	r1, #18
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff fd73 	bl	800331c <lis2duxs12_read_reg>
 8003836:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003840:	2b10      	cmp	r3, #16
 8003842:	d101      	bne.n	8003848 <lis2duxs12_mode_set+0x138>
 8003844:	2201      	movs	r2, #1
 8003846:	e000      	b.n	800384a <lis2duxs12_mode_set+0x13a>
 8003848:	2200      	movs	r2, #0
 800384a:	7c3b      	ldrb	r3, [r7, #16]
 800384c:	f362 0382 	bfi	r3, r2, #2, #1
 8003850:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d112      	bne.n	800387e <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003858:	f107 020c 	add.w	r2, r7, #12
 800385c:	2301      	movs	r3, #1
 800385e:	2114      	movs	r1, #20
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fd78 	bl	8003356 <lis2duxs12_write_reg>
 8003866:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003868:	f107 0210 	add.w	r2, r7, #16
 800386c:	2301      	movs	r3, #1
 800386e:	2112      	movs	r1, #18
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fd70 	bl	8003356 <lis2duxs12_write_reg>
 8003876:	4602      	mov	r2, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800387e:	697b      	ldr	r3, [r7, #20]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003892:	f107 020c 	add.w	r2, r7, #12
 8003896:	2301      	movs	r3, #1
 8003898:	2114      	movs	r1, #20
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fd3e 	bl	800331c <lis2duxs12_read_reg>
 80038a0:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 80038a2:	f107 0210 	add.w	r2, r7, #16
 80038a6:	2301      	movs	r3, #1
 80038a8:	2112      	movs	r1, #18
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fd36 	bl	800331c <lis2duxs12_read_reg>
 80038b0:	4602      	mov	r2, r0
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	4413      	add	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 80038b8:	7b3b      	ldrb	r3, [r7, #12]
 80038ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b0f      	cmp	r3, #15
 80038c2:	f200 809b 	bhi.w	80039fc <lis2duxs12_mode_get+0x174>
 80038c6:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <lis2duxs12_mode_get+0x44>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	0800390d 	.word	0x0800390d
 80038d0:	08003915 	.word	0x08003915
 80038d4:	0800391d 	.word	0x0800391d
 80038d8:	08003925 	.word	0x08003925
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	08003945 	.word	0x08003945
 80038e4:	0800395d 	.word	0x0800395d
 80038e8:	08003975 	.word	0x08003975
 80038ec:	0800398d 	.word	0x0800398d
 80038f0:	080039a5 	.word	0x080039a5
 80038f4:	080039bd 	.word	0x080039bd
 80038f8:	080039d5 	.word	0x080039d5
 80038fc:	080039fd 	.word	0x080039fd
 8003900:	080039fd 	.word	0x080039fd
 8003904:	080039ed 	.word	0x080039ed
 8003908:	080039f5 	.word	0x080039f5
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
      break;
 8003912:	e077      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
      break;
 800391a:	e073      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2202      	movs	r2, #2
 8003920:	701a      	strb	r2, [r3, #0]
      break;
 8003922:	e06f      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2203      	movs	r2, #3
 8003928:	701a      	strb	r2, [r3, #0]
      break;
 800392a:	e06b      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 800392c:	7c3b      	ldrb	r3, [r7, #16]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <lis2duxs12_mode_get+0xb4>
 8003938:	2214      	movs	r2, #20
 800393a:	e000      	b.n	800393e <lis2duxs12_mode_get+0xb6>
 800393c:	2204      	movs	r2, #4
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	701a      	strb	r2, [r3, #0]
      break;
 8003942:	e05f      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003944:	7c3b      	ldrb	r3, [r7, #16]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <lis2duxs12_mode_get+0xcc>
 8003950:	2215      	movs	r2, #21
 8003952:	e000      	b.n	8003956 <lis2duxs12_mode_get+0xce>
 8003954:	2205      	movs	r2, #5
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	701a      	strb	r2, [r3, #0]
      break;
 800395a:	e053      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 800395c:	7c3b      	ldrb	r3, [r7, #16]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <lis2duxs12_mode_get+0xe4>
 8003968:	2216      	movs	r2, #22
 800396a:	e000      	b.n	800396e <lis2duxs12_mode_get+0xe6>
 800396c:	2206      	movs	r2, #6
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	701a      	strb	r2, [r3, #0]
      break;
 8003972:	e047      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003974:	7c3b      	ldrb	r3, [r7, #16]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <lis2duxs12_mode_get+0xfc>
 8003980:	2217      	movs	r2, #23
 8003982:	e000      	b.n	8003986 <lis2duxs12_mode_get+0xfe>
 8003984:	2207      	movs	r2, #7
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	701a      	strb	r2, [r3, #0]
      break;
 800398a:	e03b      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 800398c:	7c3b      	ldrb	r3, [r7, #16]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <lis2duxs12_mode_get+0x114>
 8003998:	2218      	movs	r2, #24
 800399a:	e000      	b.n	800399e <lis2duxs12_mode_get+0x116>
 800399c:	2208      	movs	r2, #8
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	701a      	strb	r2, [r3, #0]
      break;
 80039a2:	e02f      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 80039a4:	7c3b      	ldrb	r3, [r7, #16]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <lis2duxs12_mode_get+0x12c>
 80039b0:	2219      	movs	r2, #25
 80039b2:	e000      	b.n	80039b6 <lis2duxs12_mode_get+0x12e>
 80039b4:	2209      	movs	r2, #9
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
      break;
 80039ba:	e023      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 80039bc:	7c3b      	ldrb	r3, [r7, #16]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <lis2duxs12_mode_get+0x144>
 80039c8:	221a      	movs	r2, #26
 80039ca:	e000      	b.n	80039ce <lis2duxs12_mode_get+0x146>
 80039cc:	220a      	movs	r2, #10
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	701a      	strb	r2, [r3, #0]
      break;
 80039d2:	e017      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 80039d4:	7c3b      	ldrb	r3, [r7, #16]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <lis2duxs12_mode_get+0x15c>
 80039e0:	221b      	movs	r2, #27
 80039e2:	e000      	b.n	80039e6 <lis2duxs12_mode_get+0x15e>
 80039e4:	220b      	movs	r2, #11
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e00b      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	222e      	movs	r2, #46	@ 0x2e
 80039f0:	701a      	strb	r2, [r3, #0]
      break;
 80039f2:	e007      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	222f      	movs	r2, #47	@ 0x2f
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e003      	b.n	8003a04 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
      break;
 8003a02:	bf00      	nop
  }

  switch (ctrl5.fs)
 8003a04:	7b3b      	ldrb	r3, [r7, #12]
 8003a06:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d81b      	bhi.n	8003a48 <lis2duxs12_mode_get+0x1c0>
 8003a10:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <lis2duxs12_mode_get+0x190>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a31 	.word	0x08003a31
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a41 	.word	0x08003a41
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	705a      	strb	r2, [r3, #1]
      break;
 8003a2e:	e00f      	b.n	8003a50 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2201      	movs	r2, #1
 8003a34:	705a      	strb	r2, [r3, #1]
      break;
 8003a36:	e00b      	b.n	8003a50 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	705a      	strb	r2, [r3, #1]
      break;
 8003a3e:	e007      	b.n	8003a50 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2203      	movs	r2, #3
 8003a44:	705a      	strb	r2, [r3, #1]
      break;
 8003a46:	e003      	b.n	8003a50 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	705a      	strb	r2, [r3, #1]
      break;
 8003a4e:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003a50:	7b3b      	ldrb	r3, [r7, #12]
 8003a52:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d81b      	bhi.n	8003a94 <lis2duxs12_mode_get+0x20c>
 8003a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <lis2duxs12_mode_get+0x1dc>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7d 	.word	0x08003a7d
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a8d 	.word	0x08003a8d
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	709a      	strb	r2, [r3, #2]
      break;
 8003a7a:	e00f      	b.n	8003a9c <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	709a      	strb	r2, [r3, #2]
      break;
 8003a82:	e00b      	b.n	8003a9c <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2202      	movs	r2, #2
 8003a88:	709a      	strb	r2, [r3, #2]
      break;
 8003a8a:	e007      	b.n	8003a9c <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	709a      	strb	r2, [r3, #2]
      break;
 8003a92:	e003      	b.n	8003a9c <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	709a      	strb	r2, [r3, #2]
      break;
 8003a9a:	bf00      	nop
  }

  return ret;
 8003a9c:	697b      	ldr	r3, [r7, #20]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop

08003aa8 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8003ab4:	7a3b      	ldrb	r3, [r7, #8]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8003abc:	f107 0208 	add.w	r2, r7, #8
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	213e      	movs	r1, #62	@ 0x3e
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fc46 	bl	8003356 <lis2duxs12_write_reg>
 8003aca:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2019      	movs	r0, #25
 8003ada:	4798      	blx	r3
  }

  return ret;
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b089      	sub	sp, #36	@ 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8003af4:	f107 0210 	add.w	r2, r7, #16
 8003af8:	2306      	movs	r3, #6
 8003afa:	2128      	movs	r1, #40	@ 0x28
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fc0d 	bl	800331c <lis2duxs12_read_reg>
 8003b02:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e08f      	b.n	8003c2e <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8003b0e:	7fbb      	ldrb	r3, [r7, #30]
 8003b10:	3301      	adds	r3, #1
 8003b12:	3320      	adds	r3, #32
 8003b14:	443b      	add	r3, r7
 8003b16:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
 8003b1c:	b211      	sxth	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	460a      	mov	r2, r1
 8003b28:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8003b2a:	7ffb      	ldrb	r3, [r7, #31]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	7fba      	ldrb	r2, [r7, #30]
 8003b40:	3220      	adds	r2, #32
 8003b42:	443a      	add	r2, r7
 8003b44:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	7ffb      	ldrb	r3, [r7, #31]
 8003b4e:	b211      	sxth	r1, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	460a      	mov	r2, r1
 8003b5a:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003b5c:	7fbb      	ldrb	r3, [r7, #30]
 8003b5e:	3302      	adds	r3, #2
 8003b60:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d856      	bhi.n	8003c18 <lis2duxs12_xl_data_get+0x130>
 8003b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b70 <lis2duxs12_xl_data_get+0x88>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003bf3 	.word	0x08003bf3
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003b80:	7ffb      	ldrb	r3, [r7, #31]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b8e:	7ffc      	ldrb	r4, [r7, #31]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fbfd 	bl	8003390 <lis2duxs12_from_fs2g_to_mg>
 8003b96:	eef0 7a40 	vmov.f32	s15, s0
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	00a3      	lsls	r3, r4, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003ba4:	e040      	b.n	8003c28 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bb4:	7ffc      	ldrb	r4, [r7, #31]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fc02 	bl	80033c0 <lis2duxs12_from_fs4g_to_mg>
 8003bbc:	eef0 7a40 	vmov.f32	s15, s0
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	00a3      	lsls	r3, r4, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003bca:	e02d      	b.n	8003c28 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bda:	7ffc      	ldrb	r4, [r7, #31]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fc07 	bl	80033f0 <lis2duxs12_from_fs8g_to_mg>
 8003be2:	eef0 7a40 	vmov.f32	s15, s0
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	00a3      	lsls	r3, r4, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003bf0:	e01a      	b.n	8003c28 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 8003bf2:	7ffb      	ldrb	r3, [r7, #31]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c00:	7ffc      	ldrb	r4, [r7, #31]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fc0c 	bl	8003420 <lis2duxs12_from_fs16g_to_mg>
 8003c08:	eef0 7a40 	vmov.f32	s15, s0
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	00a3      	lsls	r3, r4, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003c16:	e007      	b.n	8003c28 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8003c18:	7ffb      	ldrb	r3, [r7, #31]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
        break;
 8003c26:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	f67f af6c 	bls.w	8003b0e <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 8003c36:	69bb      	ldr	r3, [r7, #24]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3724      	adds	r7, #36	@ 0x24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd90      	pop	{r4, r7, pc}

08003c40 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8003c4a:	f107 0208 	add.w	r2, r7, #8
 8003c4e:	2301      	movs	r3, #1
 8003c50:	2133      	movs	r1, #51	@ 0x33
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fb62 	bl	800331c <lis2duxs12_read_reg>
 8003c58:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d122      	bne.n	8003ca6 <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	7a3b      	ldrb	r3, [r7, #8]
 8003c6c:	f362 0301 	bfi	r3, r2, #0, #2
 8003c70:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	7a3b      	ldrb	r3, [r7, #8]
 8003c7e:	f362 1386 	bfi	r3, r2, #6, #1
 8003c82:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	7a3b      	ldrb	r3, [r7, #8]
 8003c90:	f362 1345 	bfi	r3, r2, #5, #1
 8003c94:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8003c96:	f107 0208 	add.w	r2, r7, #8
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	2133      	movs	r1, #51	@ 0x33
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fb59 	bl	8003356 <lis2duxs12_write_reg>
 8003ca4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8003cba:	f107 0208 	add.w	r2, r7, #8
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	2133      	movs	r1, #51	@ 0x33
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fb2a 	bl	800331c <lis2duxs12_read_reg>
 8003cc8:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 8003cca:	7a3b      	ldrb	r3, [r7, #8]
 8003ccc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003cd0:	b2d9      	uxtb	r1, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	7853      	ldrb	r3, [r2, #1]
 8003cd6:	f361 0341 	bfi	r3, r1, #1, #1
 8003cda:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8003cdc:	7a3b      	ldrb	r3, [r7, #8]
 8003cde:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ce2:	b2d9      	uxtb	r1, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	7853      	ldrb	r3, [r2, #1]
 8003ce8:	f361 0300 	bfi	r3, r1, #0, #1
 8003cec:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d00e      	beq.n	8003d14 <lis2duxs12_i3c_configure_get+0x64>
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	dc10      	bgt.n	8003d1c <lis2duxs12_i3c_configure_get+0x6c>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <lis2duxs12_i3c_configure_get+0x54>
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d004      	beq.n	8003d0c <lis2duxs12_i3c_configure_get+0x5c>
 8003d02:	e00b      	b.n	8003d1c <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
      break;
 8003d0a:	e00b      	b.n	8003d24 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
      break;
 8003d12:	e007      	b.n	8003d24 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2202      	movs	r2, #2
 8003d18:	701a      	strb	r2, [r3, #0]
      break;
 8003d1a:	e003      	b.n	8003d24 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	701a      	strb	r2, [r3, #0]
      break;
 8003d22:	bf00      	nop
  }

  return ret;
 8003d24:	68fb      	ldr	r3, [r7, #12]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003d3a:	f107 0208 	add.w	r2, r7, #8
 8003d3e:	2301      	movs	r3, #1
 8003d40:	213f      	movs	r1, #63	@ 0x3f
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff faea 	bl	800331c <lis2duxs12_read_reg>
 8003d48:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10f      	bne.n	8003d70 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	7a3b      	ldrb	r3, [r7, #8]
 8003d5a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003d5e:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003d60:	f107 0208 	add.w	r2, r7, #8
 8003d64:	2301      	movs	r3, #1
 8003d66:	213f      	movs	r1, #63	@ 0x3f
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff faf4 	bl	8003356 <lis2duxs12_write_reg>
 8003d6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b08a      	sub	sp, #40	@ 0x28
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003d88:	f107 0220 	add.w	r2, r7, #32
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	2113      	movs	r1, #19
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff fac3 	bl	800331c <lis2duxs12_read_reg>
 8003d96:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8003d98:	f107 021c 	add.w	r2, r7, #28
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2115      	movs	r1, #21
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fabb 	bl	800331c <lis2duxs12_read_reg>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	4413      	add	r3, r2
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8003dae:	f107 0214 	add.w	r2, r7, #20
 8003db2:	2301      	movs	r3, #1
 8003db4:	2147      	movs	r1, #71	@ 0x47
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fab0 	bl	800331c <lis2duxs12_read_reg>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	4413      	add	r3, r2
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8003dc4:	f107 0218 	add.w	r2, r7, #24
 8003dc8:	2301      	movs	r3, #1
 8003dca:	2116      	movs	r1, #22
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff faa5 	bl	800331c <lis2duxs12_read_reg>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	4413      	add	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 808a 	bne.w	8003ef6 <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 8003de2:	793b      	ldrb	r3, [r7, #4]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d00e      	beq.n	8003e06 <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 8003de8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dec:	f043 0308 	orr.w	r3, r3, #8
 8003df0:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 8003df4:	793b      	ldrb	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	7f3b      	ldrb	r3, [r7, #28]
 8003dfe:	f362 0302 	bfi	r3, r2, #0, #3
 8003e02:	773b      	strb	r3, [r7, #28]
 8003e04:	e005      	b.n	8003e12 <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 8003e06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e0a:	f023 0308 	bic.w	r3, r3, #8
 8003e0e:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 8003e12:	797b      	ldrb	r3, [r7, #5]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	7f3b      	ldrb	r3, [r7, #28]
 8003e1c:	f362 1386 	bfi	r3, r2, #6, #1
 8003e20:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 8003e22:	79bb      	ldrb	r3, [r7, #6]
 8003e24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	7e3b      	ldrb	r3, [r7, #24]
 8003e2c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e30:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 8003e32:	7a3b      	ldrb	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00f      	beq.n	8003e58 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 8003e38:	7a3b      	ldrb	r3, [r7, #8]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	7d3b      	ldrb	r3, [r7, #20]
 8003e42:	f362 03c4 	bfi	r3, r2, #3, #2
 8003e46:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 8003e48:	7a7b      	ldrb	r3, [r7, #9]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	7d3b      	ldrb	r3, [r7, #20]
 8003e52:	f362 0302 	bfi	r3, r2, #0, #3
 8003e56:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	7f3b      	ldrb	r3, [r7, #28]
 8003e62:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e66:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 8003e68:	79bb      	ldrb	r3, [r7, #6]
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	7f3b      	ldrb	r3, [r7, #28]
 8003e88:	f362 03c3 	bfi	r3, r2, #3, #1
 8003e8c:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8003e8e:	79bb      	ldrb	r3, [r7, #6]
 8003e90:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	7e3b      	ldrb	r3, [r7, #24]
 8003e98:	f362 0306 	bfi	r3, r2, #0, #7
 8003e9c:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8003e9e:	f107 0214 	add.w	r2, r7, #20
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	2147      	movs	r1, #71	@ 0x47
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff fa55 	bl	8003356 <lis2duxs12_write_reg>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	4413      	add	r3, r2
 8003eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8003eb4:	f107 0218 	add.w	r2, r7, #24
 8003eb8:	2301      	movs	r3, #1
 8003eba:	2116      	movs	r1, #22
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff fa4a 	bl	8003356 <lis2duxs12_write_reg>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	4413      	add	r3, r2
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8003eca:	f107 021c 	add.w	r2, r7, #28
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2115      	movs	r1, #21
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fa3f 	bl	8003356 <lis2duxs12_write_reg>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	4413      	add	r3, r2
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003ee0:	f107 0220 	add.w	r2, r7, #32
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	2113      	movs	r1, #19
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff fa34 	bl	8003356 <lis2duxs12_write_reg>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	4413      	add	r3, r2
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3728      	adds	r7, #40	@ 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e067      	b.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7b1a      	ldrb	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a28      	ldr	r2, [pc, #160]	@ (8003ff8 <LIS2MDL_RegisterBusIO+0xf8>)
 8003f58:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a27      	ldr	r2, [pc, #156]	@ (8003ffc <LIS2MDL_RegisterBusIO+0xfc>)
 8003f5e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e036      	b.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4798      	blx	r3
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e02c      	b.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d028      	beq.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d123      	bne.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10d      	bne.n	8003fc8 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003fac:	2334      	movs	r3, #52	@ 0x34
 8003fae:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003fb0:	7afb      	ldrb	r3, [r7, #11]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2162      	movs	r1, #98	@ 0x62
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fb1b 	bl	80045f2 <LIS2MDL_Write_Reg>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc6:	e012      	b.n	8003fee <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d101      	bne.n	8003fd4 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	e00c      	b.n	8003fee <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3320      	adds	r3, #32
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 ff79 	bl	8004ed2 <lis2mdl_i2c_interface_set>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	e000      	b.n	8003fee <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	08004649 	.word	0x08004649
 8003ffc:	080046cb 	.word	0x080046cb

08004000 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d144      	bne.n	800409a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004010:	f107 0208 	add.w	r2, r7, #8
 8004014:	2301      	movs	r3, #1
 8004016:	2162      	movs	r1, #98	@ 0x62
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb97 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	e06c      	b.n	8004104 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800402a:	f107 020c 	add.w	r2, r7, #12
 800402e:	2301      	movs	r3, #1
 8004030:	2160      	movs	r1, #96	@ 0x60
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fb8a 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	e05f      	b.n	8004104 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004044:	7a3b      	ldrb	r3, [r7, #8]
 8004046:	f043 0310 	orr.w	r3, r3, #16
 800404a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 800404c:	7a3b      	ldrb	r3, [r7, #8]
 800404e:	f023 0302 	bic.w	r3, r3, #2
 8004052:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004054:	7b3b      	ldrb	r3, [r7, #12]
 8004056:	2202      	movs	r2, #2
 8004058:	f362 0301 	bfi	r3, r2, #0, #2
 800405c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800405e:	7b3b      	ldrb	r3, [r7, #12]
 8004060:	f043 030c 	orr.w	r3, r3, #12
 8004064:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004066:	f107 0208 	add.w	r2, r7, #8
 800406a:	2301      	movs	r3, #1
 800406c:	2162      	movs	r1, #98	@ 0x62
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fcab 	bl	80049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	e041      	b.n	8004104 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004080:	f107 020c 	add.w	r2, r7, #12
 8004084:	2301      	movs	r3, #1
 8004086:	2160      	movs	r1, #96	@ 0x60
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fc9e 	bl	80049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d032      	beq.n	80040fa <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
 8004098:	e034      	b.n	8004104 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3320      	adds	r3, #32
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fe71 	bl	8004d88 <lis2mdl_block_data_update_set>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	e028      	b.n	8004104 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3320      	adds	r3, #32
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fde0 	bl	8004c7e <lis2mdl_operating_mode_set>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
 80040c8:	e01c      	b.n	8004104 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3320      	adds	r3, #32
 80040ce:	2103      	movs	r1, #3
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fdfa 	bl	8004cca <lis2mdl_data_rate_set>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295
 80040e0:	e010      	b.n	8004104 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3320      	adds	r3, #32
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fecc 	bl	8004e86 <lis2mdl_self_test_set>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	e004      	b.n	8004104 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8a5 	bl	8004264 <LIS2MDL_MAG_Disable>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	e004      	b.n	8004130 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b03      	cmp	r3, #3
 8004148:	d10b      	bne.n	8004162 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800414a:	2301      	movs	r3, #1
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	214f      	movs	r1, #79	@ 0x4f
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fafb 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	e00c      	b.n	800417c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3320      	adds	r3, #32
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe7b 	bl	8004e64 <lis2mdl_device_id_get>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	e000      	b.n	800417c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2200      	movs	r2, #0
 8004198:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2201      	movs	r2, #1
 800419e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2232      	movs	r2, #50	@ 0x32
 80041b6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4a04      	ldr	r2, [pc, #16]	@ (80041dc <LIS2MDL_GetCapabilities+0x58>)
 80041cc:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	42c80000 	.word	0x42c80000

080041e0 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e032      	b.n	800425c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d11d      	bne.n	800423a <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80041fe:	f107 020c 	add.w	r2, r7, #12
 8004202:	2301      	movs	r3, #1
 8004204:	2160      	movs	r1, #96	@ 0x60
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 faa0 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	e021      	b.n	800425c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004218:	7b3b      	ldrb	r3, [r7, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004220:	f107 020c 	add.w	r2, r7, #12
 8004224:	2301      	movs	r3, #1
 8004226:	2160      	movs	r1, #96	@ 0x60
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fbce 	bl	80049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	e010      	b.n	800425c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3320      	adds	r3, #32
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fd1c 	bl	8004c7e <lis2mdl_operating_mode_set>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	e004      	b.n	800425c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e033      	b.n	80042e2 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d11e      	bne.n	80042c0 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004282:	f107 020c 	add.w	r2, r7, #12
 8004286:	2301      	movs	r3, #1
 8004288:	2160      	movs	r1, #96	@ 0x60
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa5e 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	e022      	b.n	80042e2 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800429c:	7b3b      	ldrb	r3, [r7, #12]
 800429e:	2202      	movs	r2, #2
 80042a0:	f362 0301 	bfi	r3, r2, #0, #2
 80042a4:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80042a6:	f107 020c 	add.w	r2, r7, #12
 80042aa:	2301      	movs	r3, #1
 80042ac:	2160      	movs	r1, #96	@ 0x60
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb8b 	bl	80049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00e      	beq.n	80042d8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80042ba:	f04f 33ff 	mov.w	r3, #4294967295
 80042be:	e010      	b.n	80042e2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3320      	adds	r3, #32
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fcd9 	bl	8004c7e <lis2mdl_operating_mode_set>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295
 80042d6:	e004      	b.n	80042e2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80042fa:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3320      	adds	r3, #32
 800431e:	f107 020b 	add.w	r2, r7, #11
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fcf7 	bl	8004d18 <lis2mdl_data_rate_get>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004330:	f04f 33ff 	mov.w	r3, #4294967295
 8004334:	e023      	b.n	800437e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004336:	7afb      	ldrb	r3, [r7, #11]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d81b      	bhi.n	8004374 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 800433c:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004355 	.word	0x08004355
 8004348:	0800435d 	.word	0x0800435d
 800434c:	08004365 	.word	0x08004365
 8004350:	0800436d 	.word	0x0800436d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4a0c      	ldr	r2, [pc, #48]	@ (8004388 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004358:	601a      	str	r2, [r3, #0]
      break;
 800435a:	e00f      	b.n	800437c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4a0b      	ldr	r2, [pc, #44]	@ (800438c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004360:	601a      	str	r2, [r3, #0]
      break;
 8004362:	e00b      	b.n	800437c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004368:	601a      	str	r2, [r3, #0]
      break;
 800436a:	e007      	b.n	800437c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4a09      	ldr	r2, [pc, #36]	@ (8004394 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004370:	601a      	str	r2, [r3, #0]
      break;
 8004372:	e003      	b.n	800437c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	60fb      	str	r3, [r7, #12]
      break;
 800437a:	bf00      	nop
  }

  return ret;
 800437c:	68fb      	ldr	r3, [r7, #12]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	41200000 	.word	0x41200000
 800438c:	41a00000 	.word	0x41a00000
 8004390:	42480000 	.word	0x42480000
 8004394:	42c80000 	.word	0x42c80000

08004398 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80043a4:	edd7 7a00 	vldr	s15, [r7]
 80043a8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80043ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	d801      	bhi.n	80043ba <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80043b6:	2300      	movs	r3, #0
 80043b8:	e016      	b.n	80043e8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80043ba:	edd7 7a00 	vldr	s15, [r7]
 80043be:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80043c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	d801      	bhi.n	80043d0 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e00b      	b.n	80043e8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80043d0:	edd7 7a00 	vldr	s15, [r7]
 80043d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800445c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80043d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	d801      	bhi.n	80043e6 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e000      	b.n	80043e8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80043e6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80043e8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d121      	bne.n	8004436 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80043f2:	f107 020c 	add.w	r2, r7, #12
 80043f6:	2301      	movs	r3, #1
 80043f8:	2160      	movs	r1, #96	@ 0x60
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f9a6 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004406:	f04f 33ff 	mov.w	r3, #4294967295
 800440a:	e022      	b.n	8004452 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	7b3b      	ldrb	r3, [r7, #12]
 8004416:	f362 0383 	bfi	r3, r2, #2, #2
 800441a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800441c:	f107 020c 	add.w	r2, r7, #12
 8004420:	2301      	movs	r3, #1
 8004422:	2160      	movs	r1, #96	@ 0x60
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fad0 	bl	80049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00f      	beq.n	8004450 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	e00d      	b.n	8004452 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3320      	adds	r3, #32
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fc43 	bl	8004cca <lis2mdl_data_rate_set>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e000      	b.n	8004452 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	42480000 	.word	0x42480000

08004460 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2232      	movs	r2, #50	@ 0x32
 800446e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3320      	adds	r3, #32
 80044a4:	f107 0208 	add.w	r2, r7, #8
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fc92 	bl	8004dd4 <lis2mdl_magnetic_raw_get>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	e00c      	b.n	80044d6 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80044bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80044c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80044cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b088      	sub	sp, #32
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d134      	bne.n	8004560 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80044f6:	f107 0218 	add.w	r2, r7, #24
 80044fa:	2306      	movs	r3, #6
 80044fc:	2168      	movs	r1, #104	@ 0x68
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f924 	bl	800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
 800450e:	e06c      	b.n	80045ea <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004510:	7e7b      	ldrb	r3, [r7, #25]
 8004512:	b21b      	sxth	r3, r3
 8004514:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004516:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800451a:	b29b      	uxth	r3, r3
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	b29b      	uxth	r3, r3
 8004520:	7e3a      	ldrb	r2, [r7, #24]
 8004522:	4413      	add	r3, r2
 8004524:	b29b      	uxth	r3, r3
 8004526:	b21b      	sxth	r3, r3
 8004528:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800452a:	7efb      	ldrb	r3, [r7, #27]
 800452c:	b21b      	sxth	r3, r3
 800452e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004534:	b29b      	uxth	r3, r3
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	b29b      	uxth	r3, r3
 800453a:	7eba      	ldrb	r2, [r7, #26]
 800453c:	4413      	add	r3, r2
 800453e:	b29b      	uxth	r3, r3
 8004540:	b21b      	sxth	r3, r3
 8004542:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004544:	7f7b      	ldrb	r3, [r7, #29]
 8004546:	b21b      	sxth	r3, r3
 8004548:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800454a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800454e:	b29b      	uxth	r3, r3
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b29b      	uxth	r3, r3
 8004554:	7f3a      	ldrb	r2, [r7, #28]
 8004556:	4413      	add	r3, r2
 8004558:	b29b      	uxth	r3, r3
 800455a:	b21b      	sxth	r3, r3
 800455c:	82bb      	strh	r3, [r7, #20]
 800455e:	e00d      	b.n	800457c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3320      	adds	r3, #32
 8004564:	f107 0210 	add.w	r2, r7, #16
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fc32 	bl	8004dd4 <lis2mdl_magnetic_raw_get>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	e036      	b.n	80045ea <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800457c:	f107 030c 	add.w	r3, r7, #12
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff feb1 	bl	80042ea <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004588:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004594:	edd7 7a03 	vldr	s15, [r7, #12]
 8004598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80045a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c0:	ee17 2a90 	vmov	r2, s15
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80045c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 2a90 	vmov	r2, s15
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
 80045fe:	4613      	mov	r3, r2
 8004600:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d10b      	bne.n	8004622 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800460a:	1cba      	adds	r2, r7, #2
 800460c:	78f9      	ldrb	r1, [r7, #3]
 800460e:	2301      	movs	r3, #1
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f9da 	bl	80049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
 8004620:	e00e      	b.n	8004640 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f103 0020 	add.w	r0, r3, #32
 8004628:	1cba      	adds	r2, r7, #2
 800462a:	78f9      	ldrb	r1, [r7, #3]
 800462c:	2301      	movs	r3, #1
 800462e:	f000 fb08 	bl	8004c42 <lis2mdl_write_reg>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	e000      	b.n	8004640 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	461a      	mov	r2, r3
 8004654:	460b      	mov	r3, r1
 8004656:	72fb      	strb	r3, [r7, #11]
 8004658:	4613      	mov	r3, r2
 800465a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10e      	bne.n	8004686 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	695c      	ldr	r4, [r3, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	7b1b      	ldrb	r3, [r3, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004678:	b2db      	uxtb	r3, r3
 800467a:	4619      	mov	r1, r3
 800467c:	893b      	ldrh	r3, [r7, #8]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	47a0      	blx	r4
 8004682:	4603      	mov	r3, r0
 8004684:	e01d      	b.n	80046c2 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d10b      	bne.n	80046a6 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	695c      	ldr	r4, [r3, #20]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	7b1b      	ldrb	r3, [r3, #12]
 8004696:	4618      	mov	r0, r3
 8004698:	7afb      	ldrb	r3, [r7, #11]
 800469a:	b299      	uxth	r1, r3
 800469c:	893b      	ldrh	r3, [r7, #8]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	47a0      	blx	r4
 80046a2:	4603      	mov	r3, r0
 80046a4:	e00d      	b.n	80046c2 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	695c      	ldr	r4, [r3, #20]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	7b1b      	ldrb	r3, [r3, #12]
 80046ae:	4618      	mov	r0, r3
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	4619      	mov	r1, r3
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	47a0      	blx	r4
 80046c0:	4603      	mov	r3, r0
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}

080046ca <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80046ca:	b590      	push	{r4, r7, lr}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	461a      	mov	r2, r3
 80046d6:	460b      	mov	r3, r1
 80046d8:	72fb      	strb	r3, [r7, #11]
 80046da:	4613      	mov	r3, r2
 80046dc:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	691c      	ldr	r4, [r3, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	7b1b      	ldrb	r3, [r3, #12]
 80046f2:	4618      	mov	r0, r3
 80046f4:	7afb      	ldrb	r3, [r7, #11]
 80046f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	4619      	mov	r1, r3
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	47a0      	blx	r4
 8004704:	4603      	mov	r3, r0
 8004706:	e01d      	b.n	8004744 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d10b      	bne.n	8004728 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	691c      	ldr	r4, [r3, #16]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	7b1b      	ldrb	r3, [r3, #12]
 8004718:	4618      	mov	r0, r3
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	b299      	uxth	r1, r3
 800471e:	893b      	ldrh	r3, [r7, #8]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	47a0      	blx	r4
 8004724:	4603      	mov	r3, r0
 8004726:	e00d      	b.n	8004744 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	691c      	ldr	r4, [r3, #16]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	7b1b      	ldrb	r3, [r3, #12]
 8004730:	4618      	mov	r0, r3
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4619      	mov	r1, r3
 800473c:	893b      	ldrh	r3, [r7, #8]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	47a0      	blx	r4
 8004742:	4603      	mov	r3, r0
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bd90      	pop	{r4, r7, pc}

0800474c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	@ 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	461a      	mov	r2, r3
 8004758:	460b      	mov	r3, r1
 800475a:	72fb      	strb	r3, [r7, #11]
 800475c:	4613      	mov	r3, r2
 800475e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004766:	2340      	movs	r3, #64	@ 0x40
 8004768:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004772:	233d      	movs	r3, #61	@ 0x3d
 8004774:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004776:	2315      	movs	r3, #21
 8004778:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800477c:	2316      	movs	r3, #22
 800477e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004782:	2317      	movs	r3, #23
 8004784:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004788:	2314      	movs	r3, #20
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800478e:	2344      	movs	r3, #68	@ 0x44
 8004790:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004792:	2302      	movs	r3, #2
 8004794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004798:	2339      	movs	r3, #57	@ 0x39
 800479a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80047a4:	2329      	movs	r3, #41	@ 0x29
 80047a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80047aa:	231e      	movs	r3, #30
 80047ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80047b6:	893b      	ldrh	r3, [r7, #8]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80047c8:	2340      	movs	r3, #64	@ 0x40
 80047ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f103 0020 	add.w	r0, r3, #32
 80047d4:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80047d8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80047dc:	2301      	movs	r3, #1
 80047de:	f000 fa30 	bl	8004c42 <lis2mdl_write_reg>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ec:	e0e9      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f103 0020 	add.w	r0, r3, #32
 80047f4:	f107 021f 	add.w	r2, r7, #31
 80047f8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80047fc:	2301      	movs	r3, #1
 80047fe:	f000 fa20 	bl	8004c42 <lis2mdl_write_reg>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e0d9      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f103 0020 	add.w	r0, r3, #32
 8004814:	f107 020b 	add.w	r2, r7, #11
 8004818:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800481c:	2301      	movs	r3, #1
 800481e:	f000 fa10 	bl	8004c42 <lis2mdl_write_reg>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	e0c9      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f103 0020 	add.w	r0, r3, #32
 8004834:	f107 021d 	add.w	r2, r7, #29
 8004838:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800483c:	2301      	movs	r3, #1
 800483e:	f000 fa00 	bl	8004c42 <lis2mdl_write_reg>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	e0b9      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f103 0020 	add.w	r0, r3, #32
 8004854:	f107 021e 	add.w	r2, r7, #30
 8004858:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800485c:	2301      	movs	r3, #1
 800485e:	f000 f9f0 	bl	8004c42 <lis2mdl_write_reg>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	e0a9      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f103 0020 	add.w	r0, r3, #32
 8004874:	f107 0220 	add.w	r2, r7, #32
 8004878:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800487c:	2301      	movs	r3, #1
 800487e:	f000 f9e0 	bl	8004c42 <lis2mdl_write_reg>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	e099      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f103 0020 	add.w	r0, r3, #32
 8004894:	f107 021c 	add.w	r2, r7, #28
 8004898:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800489c:	2301      	movs	r3, #1
 800489e:	f000 f9b2 	bl	8004c06 <lis2mdl_read_reg>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	e089      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80048ae:	7f3b      	ldrb	r3, [r7, #28]
 80048b0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d102      	bne.n	80048be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80048b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80048bc:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f103 0020 	add.w	r0, r3, #32
 80048c4:	f107 021c 	add.w	r2, r7, #28
 80048c8:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80048cc:	2301      	movs	r3, #1
 80048ce:	f000 f9b8 	bl	8004c42 <lis2mdl_write_reg>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
 80048dc:	e071      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f103 0020 	add.w	r0, r3, #32
 80048e4:	f107 0214 	add.w	r2, r7, #20
 80048e8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80048ec:	2306      	movs	r3, #6
 80048ee:	f000 f98a 	bl	8004c06 <lis2mdl_read_reg>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
 80048fc:	e061      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f103 0020 	add.w	r0, r3, #32
 8004904:	f107 021b 	add.w	r2, r7, #27
 8004908:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800490c:	2301      	movs	r3, #1
 800490e:	f000 f97a 	bl	8004c06 <lis2mdl_read_reg>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	e051      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800491e:	7efa      	ldrb	r2, [r7, #27]
 8004920:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004924:	4013      	ands	r3, r2
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800492c:	429a      	cmp	r2, r3
 800492e:	d1e6      	bne.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f103 0020 	add.w	r0, r3, #32
 8004936:	f107 021b 	add.w	r2, r7, #27
 800493a:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800493e:	2301      	movs	r3, #1
 8004940:	f000 f961 	bl	8004c06 <lis2mdl_read_reg>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	e038      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004950:	7efa      	ldrb	r2, [r7, #27]
 8004952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004956:	4013      	ands	r3, r2
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800495e:	429a      	cmp	r2, r3
 8004960:	d1e6      	bne.n	8004930 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f103 0020 	add.w	r0, r3, #32
 8004968:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800496c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004970:	2301      	movs	r3, #1
 8004972:	f000 f966 	bl	8004c42 <lis2mdl_write_reg>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	e01f      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f103 0020 	add.w	r0, r3, #32
 8004988:	893b      	ldrh	r3, [r7, #8]
 800498a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	f000 f939 	bl	8004c06 <lis2mdl_read_reg>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e010      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f103 0020 	add.w	r0, r3, #32
 80049a6:	f107 0220 	add.w	r2, r7, #32
 80049aa:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80049ae:	2301      	movs	r3, #1
 80049b0:	f000 f947 	bl	8004c42 <lis2mdl_write_reg>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	e000      	b.n	80049c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3730      	adds	r7, #48	@ 0x30
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b08c      	sub	sp, #48	@ 0x30
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	461a      	mov	r2, r3
 80049d6:	460b      	mov	r3, r1
 80049d8:	72fb      	strb	r3, [r7, #11]
 80049da:	4613      	mov	r3, r2
 80049dc:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80049e4:	2340      	movs	r3, #64	@ 0x40
 80049e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80049f0:	233c      	movs	r3, #60	@ 0x3c
 80049f2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80049f4:	2315      	movs	r3, #21
 80049f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80049fa:	2316      	movs	r3, #22
 80049fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004a00:	2317      	movs	r3, #23
 8004a02:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004a0a:	2314      	movs	r3, #20
 8004a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004a10:	2344      	movs	r3, #68	@ 0x44
 8004a12:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004a14:	2339      	movs	r3, #57	@ 0x39
 8004a16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004a20:	2329      	movs	r3, #41	@ 0x29
 8004a22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004a26:	231e      	movs	r3, #30
 8004a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004a32:	2310      	movs	r3, #16
 8004a34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004a3e:	2340      	movs	r3, #64	@ 0x40
 8004a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004a44:	230e      	movs	r3, #14
 8004a46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f103 0020 	add.w	r0, r3, #32
 8004a50:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004a54:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f000 f8f2 	bl	8004c42 <lis2mdl_write_reg>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	e0c9      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f103 0020 	add.w	r0, r3, #32
 8004a70:	f107 021f 	add.w	r2, r7, #31
 8004a74:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f000 f8e2 	bl	8004c42 <lis2mdl_write_reg>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	e0b9      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f103 0020 	add.w	r0, r3, #32
 8004a90:	f107 020b 	add.w	r2, r7, #11
 8004a94:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f000 f8d2 	bl	8004c42 <lis2mdl_write_reg>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	e0a9      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f103 0020 	add.w	r0, r3, #32
 8004ab0:	f107 021e 	add.w	r2, r7, #30
 8004ab4:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f000 f8c2 	bl	8004c42 <lis2mdl_write_reg>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac8:	e099      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f103 0020 	add.w	r0, r3, #32
 8004ad0:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	f000 f8b3 	bl	8004c42 <lis2mdl_write_reg>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae6:	e08a      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f103 0020 	add.w	r0, r3, #32
 8004aee:	f107 021d 	add.w	r2, r7, #29
 8004af2:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004af6:	2301      	movs	r3, #1
 8004af8:	f000 f8a3 	bl	8004c42 <lis2mdl_write_reg>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	e07a      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f103 0020 	add.w	r0, r3, #32
 8004b0e:	f107 0220 	add.w	r2, r7, #32
 8004b12:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004b16:	2301      	movs	r3, #1
 8004b18:	f000 f893 	bl	8004c42 <lis2mdl_write_reg>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e06a      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f103 0020 	add.w	r0, r3, #32
 8004b2e:	f107 021c 	add.w	r2, r7, #28
 8004b32:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004b36:	2301      	movs	r3, #1
 8004b38:	f000 f865 	bl	8004c06 <lis2mdl_read_reg>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	e05a      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004b48:	7f3b      	ldrb	r3, [r7, #28]
 8004b4a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d102      	bne.n	8004b58 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004b52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b56:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f103 0020 	add.w	r0, r3, #32
 8004b5e:	f107 021c 	add.w	r2, r7, #28
 8004b62:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004b66:	2301      	movs	r3, #1
 8004b68:	f000 f86b 	bl	8004c42 <lis2mdl_write_reg>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295
 8004b76:	e042      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f103 0020 	add.w	r0, r3, #32
 8004b7e:	f107 0214 	add.w	r2, r7, #20
 8004b82:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004b86:	2306      	movs	r3, #6
 8004b88:	f000 f83d 	bl	8004c06 <lis2mdl_read_reg>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	e032      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f103 0020 	add.w	r0, r3, #32
 8004b9e:	f107 021b 	add.w	r2, r7, #27
 8004ba2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f000 f82d 	bl	8004c06 <lis2mdl_read_reg>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e022      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004bb8:	7efa      	ldrb	r2, [r7, #27]
 8004bba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d1e6      	bne.n	8004b98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f103 0020 	add.w	r0, r3, #32
 8004bd0:	f107 021b 	add.w	r2, r7, #27
 8004bd4:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f000 f814 	bl	8004c06 <lis2mdl_read_reg>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	e009      	b.n	8004bfe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004bea:	7efa      	ldrb	r2, [r7, #27]
 8004bec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1e6      	bne.n	8004bca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3730      	adds	r7, #48	@ 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	461a      	mov	r2, r3
 8004c12:	460b      	mov	r3, r1
 8004c14:	72fb      	strb	r3, [r7, #11]
 8004c16:	4613      	mov	r3, r2
 8004c18:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	e009      	b.n	8004c3a <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685c      	ldr	r4, [r3, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68d8      	ldr	r0, [r3, #12]
 8004c2e:	893b      	ldrh	r3, [r7, #8]
 8004c30:	7af9      	ldrb	r1, [r7, #11]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	47a0      	blx	r4
 8004c36:	6178      	str	r0, [r7, #20]

  return ret;
 8004c38:	697b      	ldr	r3, [r7, #20]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd90      	pop	{r4, r7, pc}

08004c42 <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004c42:	b590      	push	{r4, r7, lr}
 8004c44:	b087      	sub	sp, #28
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	460b      	mov	r3, r1
 8004c50:	72fb      	strb	r3, [r7, #11]
 8004c52:	4613      	mov	r3, r2
 8004c54:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <lis2mdl_write_reg+0x20>
  {
    return -1;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	e009      	b.n	8004c76 <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681c      	ldr	r4, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68d8      	ldr	r0, [r3, #12]
 8004c6a:	893b      	ldrh	r3, [r7, #8]
 8004c6c:	7af9      	ldrb	r1, [r7, #11]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	47a0      	blx	r4
 8004c72:	6178      	str	r0, [r7, #20]

  return ret;
 8004c74:	697b      	ldr	r3, [r7, #20]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}

08004c7e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2160      	movs	r1, #96	@ 0x60
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ffb7 	bl	8004c06 <lis2mdl_read_reg>
 8004c98:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	7a3b      	ldrb	r3, [r7, #8]
 8004caa:	f362 0301 	bfi	r3, r2, #0, #2
 8004cae:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004cb0:	f107 0208 	add.w	r2, r7, #8
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2160      	movs	r1, #96	@ 0x60
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ffc2 	bl	8004c42 <lis2mdl_write_reg>
 8004cbe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004cd6:	f107 0208 	add.w	r2, r7, #8
 8004cda:	2301      	movs	r3, #1
 8004cdc:	2160      	movs	r1, #96	@ 0x60
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ff91 	bl	8004c06 <lis2mdl_read_reg>
 8004ce4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10f      	bne.n	8004d0c <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	7a3b      	ldrb	r3, [r7, #8]
 8004cf6:	f362 0383 	bfi	r3, r2, #2, #2
 8004cfa:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	2301      	movs	r3, #1
 8004d02:	2160      	movs	r1, #96	@ 0x60
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff9c 	bl	8004c42 <lis2mdl_write_reg>
 8004d0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004d22:	f107 0208 	add.w	r2, r7, #8
 8004d26:	2301      	movs	r3, #1
 8004d28:	2160      	movs	r1, #96	@ 0x60
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff6b 	bl	8004c06 <lis2mdl_read_reg>
 8004d30:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004d32:	7a3b      	ldrb	r3, [r7, #8]
 8004d34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d81a      	bhi.n	8004d74 <lis2mdl_data_rate_get+0x5c>
 8004d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <lis2mdl_data_rate_get+0x2c>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d5d 	.word	0x08004d5d
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6d 	.word	0x08004d6d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
      break;
 8004d5a:	e00f      	b.n	8004d7c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
      break;
 8004d62:	e00b      	b.n	8004d7c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
      break;
 8004d6a:	e007      	b.n	8004d7c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	701a      	strb	r2, [r3, #0]
      break;
 8004d72:	e003      	b.n	8004d7c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
      break;
 8004d7a:	bf00      	nop
  }

  return ret;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004d94:	f107 0208 	add.w	r2, r7, #8
 8004d98:	2301      	movs	r3, #1
 8004d9a:	2162      	movs	r1, #98	@ 0x62
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ff32 	bl	8004c06 <lis2mdl_read_reg>
 8004da2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	7a3b      	ldrb	r3, [r7, #8]
 8004db4:	f362 1304 	bfi	r3, r2, #4, #1
 8004db8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004dba:	f107 0208 	add.w	r2, r7, #8
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	2162      	movs	r1, #98	@ 0x62
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff ff3d 	bl	8004c42 <lis2mdl_write_reg>
 8004dc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004dde:	f107 020c 	add.w	r2, r7, #12
 8004de2:	2306      	movs	r3, #6
 8004de4:	2168      	movs	r1, #104	@ 0x68
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff ff0d 	bl	8004c06 <lis2mdl_read_reg>
 8004dec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004dee:	7b7b      	ldrb	r3, [r7, #13]
 8004df0:	b21a      	sxth	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	7b3a      	ldrb	r2, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	b21a      	sxth	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	3302      	adds	r3, #2
 8004e14:	b212      	sxth	r2, r2
 8004e16:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	7bba      	ldrb	r2, [r7, #14]
 8004e28:	4413      	add	r3, r2
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	3302      	adds	r3, #2
 8004e30:	b212      	sxth	r2, r2
 8004e32:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e34:	7c7a      	ldrb	r2, [r7, #17]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	b212      	sxth	r2, r2
 8004e3c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	3304      	adds	r3, #4
 8004e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	7c3a      	ldrb	r2, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	b212      	sxth	r2, r2
 8004e58:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e5a:	697b      	ldr	r3, [r7, #20]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004e6e:	2301      	movs	r3, #1
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	214f      	movs	r1, #79	@ 0x4f
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fec6 	bl	8004c06 <lis2mdl_read_reg>
 8004e7a:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004e92:	f107 0208 	add.w	r2, r7, #8
 8004e96:	2301      	movs	r3, #1
 8004e98:	2162      	movs	r1, #98	@ 0x62
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff feb3 	bl	8004c06 <lis2mdl_read_reg>
 8004ea0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10f      	bne.n	8004ec8 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	7a3b      	ldrb	r3, [r7, #8]
 8004eb2:	f362 0341 	bfi	r3, r2, #1, #1
 8004eb6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004eb8:	f107 0208 	add.w	r2, r7, #8
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	2162      	movs	r1, #98	@ 0x62
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff febe 	bl	8004c42 <lis2mdl_write_reg>
 8004ec6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004ede:	f107 0208 	add.w	r2, r7, #8
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	2162      	movs	r1, #98	@ 0x62
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe8d 	bl	8004c06 <lis2mdl_read_reg>
 8004eec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	7a3b      	ldrb	r3, [r7, #8]
 8004efe:	f362 1345 	bfi	r3, r2, #5, #1
 8004f02:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004f04:	f107 0208 	add.w	r2, r7, #8
 8004f08:	2301      	movs	r3, #1
 8004f0a:	2162      	movs	r1, #98	@ 0x62
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fe98 	bl	8004c42 <lis2mdl_write_reg>
 8004f12:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e051      	b.n	8004fe0 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	7b1a      	ldrb	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	@ (8004fec <LPS22DF_RegisterBusIO+0xcc>)
 8004f78:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <LPS22DF_RegisterBusIO+0xd0>)
 8004f7e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e020      	b.n	8004fe0 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4798      	blx	r3
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e016      	b.n	8004fe0 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d112      	bne.n	8004fe0 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	210e      	movs	r1, #14
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9f3 	bl	80053ba <LPS22DF_Write_Reg>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	0800575d 	.word	0x0800575d
 8004ff0:	08005793 	.word	0x08005793

08004ff4 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005002:	2b00      	cmp	r3, #0
 8005004:	d108      	bne.n	8005018 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fb4c 	bl	80056a4 <LPS22DF_Initialize>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
 8005016:	e004      	b.n	8005022 <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005038:	2b01      	cmp	r3, #1
 800503a:	d111      	bne.n	8005060 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f882 	bl	8005146 <LPS22DF_PRESS_Disable>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	e00d      	b.n	800506a <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f927 	bl	80052a2 <LPS22DF_TEMP_Disable>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295
 800505e:	e004      	b.n	800506a <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3320      	adds	r3, #32
 8005080:	f107 020c 	add.w	r2, r7, #12
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fc22 	bl	80058d0 <lps22df_id_get>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	e003      	b.n	80050a0 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 8005098:	7b3a      	ldrb	r2, [r7, #12]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2201      	movs	r2, #1
 80050bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4a08      	ldr	r2, [pc, #32]	@ (80050fc <LPS22DF_GetCapabilities+0x54>)
 80050dc:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	4a06      	ldr	r2, [pc, #24]	@ (80050fc <LPS22DF_GetCapabilities+0x54>)
 80050e2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	43480000 	.word	0x43480000

08005100 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e013      	b.n	800513e <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f103 0220 	add.w	r2, r3, #32
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3333      	adds	r3, #51	@ 0x33
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f000 fdb2 	bl	8005c8c <lps22df_mode_set>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
 8005132:	e004      	b.n	800513e <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e030      	b.n	80051be <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d126      	bne.n	80051b4 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3320      	adds	r3, #32
 800516a:	f107 020c 	add.w	r2, r7, #12
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fde9 	bl	8005d48 <lps22df_mode_get>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	e01d      	b.n	80051be <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3333      	adds	r3, #51	@ 0x33
 8005186:	461a      	mov	r2, r3
 8005188:	f107 030c 	add.w	r3, r7, #12
 800518c:	8819      	ldrh	r1, [r3, #0]
 800518e:	789b      	ldrb	r3, [r3, #2]
 8005190:	8011      	strh	r1, [r2, #0]
 8005192:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005194:	2300      	movs	r3, #0
 8005196:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3320      	adds	r3, #32
 800519c:	f107 020c 	add.w	r2, r7, #12
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fd72 	bl	8005c8c <lps22df_mode_set>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e004      	b.n	80051be <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f90c 	bl	80053f0 <LPS22DF_GetOutputDataRate>
 80051d8:	4603      	mov	r3, r0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80051f8:	ed97 0a00 	vldr	s0, [r7]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f961 	bl	80054c4 <LPS22DF_SetOutputDataRate_When_Enabled>
 8005202:	4603      	mov	r3, r0
 8005204:	e005      	b.n	8005212 <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005206:	ed97 0a00 	vldr	s0, [r7]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9e6 	bl	80055dc <LPS22DF_SetOutputDataRate_When_Disabled>
 8005210:	4603      	mov	r3, r0
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3320      	adds	r3, #32
 8005228:	f107 020c 	add.w	r2, r7, #12
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fe56 	bl	8005ee0 <lps22df_pressure_raw_get>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	e009      	b.n	8005254 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fb12 	bl	800586c <lps22df_from_lsb_to_hPa>
 8005248:	eef0 7a40 	vmov.f32	s15, s0
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e013      	b.n	800529a <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f103 0220 	add.w	r2, r3, #32
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3333      	adds	r3, #51	@ 0x33
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 fd04 	bl	8005c8c <lps22df_mode_set>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 800528a:	f04f 33ff 	mov.w	r3, #4294967295
 800528e:	e004      	b.n	800529a <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e030      	b.n	800531a <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d126      	bne.n	8005310 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3320      	adds	r3, #32
 80052c6:	f107 020c 	add.w	r2, r7, #12
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fd3b 	bl	8005d48 <lps22df_mode_get>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	e01d      	b.n	800531a <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3333      	adds	r3, #51	@ 0x33
 80052e2:	461a      	mov	r2, r3
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	8819      	ldrh	r1, [r3, #0]
 80052ea:	789b      	ldrb	r3, [r3, #2]
 80052ec:	8011      	strh	r1, [r2, #0]
 80052ee:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80052f0:	2300      	movs	r3, #0
 80052f2:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3320      	adds	r3, #32
 80052f8:	f107 020c 	add.w	r2, r7, #12
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fcc4 	bl	8005c8c <lps22df_mode_set>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	e004      	b.n	800531a <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f85e 	bl	80053f0 <LPS22DF_GetOutputDataRate>
 8005334:	4603      	mov	r3, r0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005354:	ed97 0a00 	vldr	s0, [r7]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8b3 	bl	80054c4 <LPS22DF_SetOutputDataRate_When_Enabled>
 800535e:	4603      	mov	r3, r0
 8005360:	e005      	b.n	800536e <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005362:	ed97 0a00 	vldr	s0, [r7]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f938 	bl	80055dc <LPS22DF_SetOutputDataRate_When_Disabled>
 800536c:	4603      	mov	r3, r0
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3320      	adds	r3, #32
 8005384:	f107 020e 	add.w	r2, r7, #14
 8005388:	4611      	mov	r1, r2
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fdd1 	bl	8005f32 <lps22df_temperature_raw_get>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	e00a      	b.n	80053b2 <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 800539c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fa7b 	bl	800589c <lps22df_from_lsb_to_celsius>
 80053a6:	eef0 7a40 	vmov.f32	s15, s0
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
 80053c6:	4613      	mov	r3, r2
 80053c8:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 0020 	add.w	r0, r3, #32
 80053d0:	1cba      	adds	r2, r7, #2
 80053d2:	78f9      	ldrb	r1, [r7, #3]
 80053d4:	2301      	movs	r3, #1
 80053d6:	f000 fa15 	bl	8005804 <lps22df_write_reg>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	e000      	b.n	80053e8 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3320      	adds	r3, #32
 8005402:	f107 0208 	add.w	r2, r7, #8
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fc9d 	bl	8005d48 <lps22df_mode_get>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
 8005418:	e044      	b.n	80054a4 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 800541a:	7a3b      	ldrb	r3, [r7, #8]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d83c      	bhi.n	800549a <LPS22DF_GetOutputDataRate+0xaa>
 8005420:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <LPS22DF_GetOutputDataRate+0x38>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800544d 	.word	0x0800544d
 800542c:	08005457 	.word	0x08005457
 8005430:	08005461 	.word	0x08005461
 8005434:	0800546b 	.word	0x0800546b
 8005438:	08005473 	.word	0x08005473
 800543c:	0800547b 	.word	0x0800547b
 8005440:	08005483 	.word	0x08005483
 8005444:	0800548b 	.word	0x0800548b
 8005448:	08005493 	.word	0x08005493
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
      break;
 8005454:	e025      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800545c:	601a      	str	r2, [r3, #0]
      break;
 800545e:	e020      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005466:	601a      	str	r2, [r3, #0]
      break;
 8005468:	e01b      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	4a0f      	ldr	r2, [pc, #60]	@ (80054ac <LPS22DF_GetOutputDataRate+0xbc>)
 800546e:	601a      	str	r2, [r3, #0]
      break;
 8005470:	e017      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	4a0e      	ldr	r2, [pc, #56]	@ (80054b0 <LPS22DF_GetOutputDataRate+0xc0>)
 8005476:	601a      	str	r2, [r3, #0]
      break;
 8005478:	e013      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	4a0d      	ldr	r2, [pc, #52]	@ (80054b4 <LPS22DF_GetOutputDataRate+0xc4>)
 800547e:	601a      	str	r2, [r3, #0]
      break;
 8005480:	e00f      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	4a0c      	ldr	r2, [pc, #48]	@ (80054b8 <LPS22DF_GetOutputDataRate+0xc8>)
 8005486:	601a      	str	r2, [r3, #0]
      break;
 8005488:	e00b      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	4a0b      	ldr	r2, [pc, #44]	@ (80054bc <LPS22DF_GetOutputDataRate+0xcc>)
 800548e:	601a      	str	r2, [r3, #0]
      break;
 8005490:	e007      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <LPS22DF_GetOutputDataRate+0xd0>)
 8005496:	601a      	str	r2, [r3, #0]
      break;
 8005498:	e003      	b.n	80054a2 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	60fb      	str	r3, [r7, #12]
      break;
 80054a0:	bf00      	nop
  }

  return ret;
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	41200000 	.word	0x41200000
 80054b0:	41c80000 	.word	0x41c80000
 80054b4:	42480000 	.word	0x42480000
 80054b8:	42960000 	.word	0x42960000
 80054bc:	42c80000 	.word	0x42c80000
 80054c0:	43480000 	.word	0x43480000

080054c4 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3320      	adds	r3, #32
 80054d4:	f107 020c 	add.w	r2, r7, #12
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fc34 	bl	8005d48 <lps22df_mode_get>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	e06c      	b.n	80055c6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 80054ec:	edd7 7a00 	vldr	s15, [r7]
 80054f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	d801      	bhi.n	8005502 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 80054fe:	2301      	movs	r3, #1
 8005500:	e042      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005502:	edd7 7a00 	vldr	s15, [r7]
 8005506:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800550a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	d801      	bhi.n	8005518 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8005514:	2302      	movs	r3, #2
 8005516:	e037      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005518:	edd7 7a00 	vldr	s15, [r7]
 800551c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005528:	d801      	bhi.n	800552e <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 800552a:	2303      	movs	r3, #3
 800552c:	e02c      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800552e:	edd7 7a00 	vldr	s15, [r7]
 8005532:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	d801      	bhi.n	8005544 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8005540:	2304      	movs	r3, #4
 8005542:	e021      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005544:	edd7 7a00 	vldr	s15, [r7]
 8005548:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80055d0 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 800554c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d801      	bhi.n	800555a <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8005556:	2305      	movs	r3, #5
 8005558:	e016      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800555a:	edd7 7a00 	vldr	s15, [r7]
 800555e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80055d4 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8005562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556a:	d801      	bhi.n	8005570 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 800556c:	2306      	movs	r3, #6
 800556e:	e00b      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005570:	edd7 7a00 	vldr	s15, [r7]
 8005574:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80055d8 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8005578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	d801      	bhi.n	8005586 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8005582:	2307      	movs	r3, #7
 8005584:	e000      	b.n	8005588 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005586:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005588:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3320      	adds	r3, #32
 800558e:	f107 020c 	add.w	r2, r7, #12
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fb79 	bl	8005c8c <lps22df_mode_set>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	e00f      	b.n	80055c6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f103 0220 	add.w	r2, r3, #32
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3333      	adds	r3, #51	@ 0x33
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 fbc8 	bl	8005d48 <lps22df_mode_get>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 80055be:	f04f 33ff 	mov.w	r3, #4294967295
 80055c2:	e000      	b.n	80055c6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	42480000 	.word	0x42480000
 80055d4:	42960000 	.word	0x42960000
 80055d8:	42c80000 	.word	0x42c80000

080055dc <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 80055e8:	edd7 7a00 	vldr	s15, [r7]
 80055ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	d801      	bhi.n	80055fe <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e042      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80055fe:	edd7 7a00 	vldr	s15, [r7]
 8005602:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	d801      	bhi.n	8005614 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8005610:	2302      	movs	r3, #2
 8005612:	e037      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005614:	edd7 7a00 	vldr	s15, [r7]
 8005618:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800561c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005624:	d801      	bhi.n	800562a <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8005626:	2303      	movs	r3, #3
 8005628:	e02c      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800562a:	edd7 7a00 	vldr	s15, [r7]
 800562e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d801      	bhi.n	8005640 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 800563c:	2304      	movs	r3, #4
 800563e:	e021      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005640:	edd7 7a00 	vldr	s15, [r7]
 8005644:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005698 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8005648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	d801      	bhi.n	8005656 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8005652:	2305      	movs	r3, #5
 8005654:	e016      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005656:	edd7 7a00 	vldr	s15, [r7]
 800565a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800569c <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 800565e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	d801      	bhi.n	800566c <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8005668:	2306      	movs	r3, #6
 800566a:	e00b      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800566c:	edd7 7a00 	vldr	s15, [r7]
 8005670:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80056a0 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567c:	d801      	bhi.n	8005682 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 800567e:	2307      	movs	r3, #7
 8005680:	e000      	b.n	8005684 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005682:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	42480000 	.word	0x42480000
 800569c:	42960000 	.word	0x42960000
 80056a0:	42c80000 	.word	0x42c80000

080056a4 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3320      	adds	r3, #32
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f983 	bl	80059be <lps22df_init_set>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
 80056c2:	e047      	b.n	8005754 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d102      	bne.n	80056d2 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 80056cc:	2303      	movs	r3, #3
 80056ce:	723b      	strb	r3, [r7, #8]
 80056d0:	e008      	b.n	80056e4 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d102      	bne.n	80056e0 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 80056da:	2302      	movs	r3, #2
 80056dc:	723b      	strb	r3, [r7, #8]
 80056de:	e001      	b.n	80056e4 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 80056e0:	2300      	movs	r3, #0
 80056e2:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 80056e4:	2300      	movs	r3, #0
 80056e6:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3320      	adds	r3, #32
 80056ec:	f107 0208 	add.w	r2, r7, #8
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f901 	bl	80058fa <lps22df_bus_mode_set>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	e027      	b.n	8005754 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005704:	2300      	movs	r3, #0
 8005706:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005708:	2300      	movs	r3, #0
 800570a:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 800570c:	2301      	movs	r3, #1
 800570e:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3320      	adds	r3, #32
 8005714:	f107 020c 	add.w	r2, r7, #12
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fab6 	bl	8005c8c <lps22df_mode_set>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005726:	f04f 33ff 	mov.w	r3, #4294967295
 800572a:	e013      	b.n	8005754 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f103 0220 	add.w	r2, r3, #32
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3333      	adds	r3, #51	@ 0x33
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f000 fb05 	bl	8005d48 <lps22df_mode_get>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005744:	f04f 33ff 	mov.w	r3, #4294967295
 8005748:	e004      	b.n	8005754 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	461a      	mov	r2, r3
 8005768:	460b      	mov	r3, r1
 800576a:	72fb      	strb	r3, [r7, #11]
 800576c:	4613      	mov	r3, r2
 800576e:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	695c      	ldr	r4, [r3, #20]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	7b1b      	ldrb	r3, [r3, #12]
 800577c:	4618      	mov	r0, r3
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	b299      	uxth	r1, r3
 8005782:	893b      	ldrh	r3, [r7, #8]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	47a0      	blx	r4
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd90      	pop	{r4, r7, pc}

08005792 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005792:	b590      	push	{r4, r7, lr}
 8005794:	b087      	sub	sp, #28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	461a      	mov	r2, r3
 800579e:	460b      	mov	r3, r1
 80057a0:	72fb      	strb	r3, [r7, #11]
 80057a2:	4613      	mov	r3, r2
 80057a4:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	691c      	ldr	r4, [r3, #16]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	7b1b      	ldrb	r3, [r3, #12]
 80057b2:	4618      	mov	r0, r3
 80057b4:	7afb      	ldrb	r3, [r7, #11]
 80057b6:	b299      	uxth	r1, r3
 80057b8:	893b      	ldrh	r3, [r7, #8]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	47a0      	blx	r4
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd90      	pop	{r4, r7, pc}

080057c8 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	460b      	mov	r3, r1
 80057d6:	72fb      	strb	r3, [r7, #11]
 80057d8:	4613      	mov	r3, r2
 80057da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <lps22df_read_reg+0x20>
  {
    return -1;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	e009      	b.n	80057fc <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685c      	ldr	r4, [r3, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68d8      	ldr	r0, [r3, #12]
 80057f0:	893b      	ldrh	r3, [r7, #8]
 80057f2:	7af9      	ldrb	r1, [r7, #11]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	47a0      	blx	r4
 80057f8:	6178      	str	r0, [r7, #20]

  return ret;
 80057fa:	697b      	ldr	r3, [r7, #20]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}

08005804 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	461a      	mov	r2, r3
 8005810:	460b      	mov	r3, r1
 8005812:	72fb      	strb	r3, [r7, #11]
 8005814:	4613      	mov	r3, r2
 8005816:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <lps22df_write_reg+0x20>
  {
    return -1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e009      	b.n	8005838 <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681c      	ldr	r4, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68d8      	ldr	r0, [r3, #12]
 800582c:	893b      	ldrh	r3, [r7, #8]
 800582e:	7af9      	ldrb	r1, [r7, #11]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	47a0      	blx	r4
 8005834:	6178      	str	r0, [r7, #20]

  return ret;
 8005836:	697b      	ldr	r3, [r7, #20]
}
 8005838:	4618      	mov	r0, r3
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd90      	pop	{r4, r7, pc}

08005840 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d006      	beq.n	800585e <bytecpy+0x1e>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <bytecpy+0x1e>
  {
    *target = *source;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	701a      	strb	r2, [r3, #0]
  }
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800587e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005898 <lps22df_from_lsb_to_hPa+0x2c>
 8005882:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005886:	eef0 7a66 	vmov.f32	s15, s13
}
 800588a:	eeb0 0a67 	vmov.f32	s0, s15
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	49800000 	.word	0x49800000

0800589c <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 80058a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80058cc <lps22df_from_lsb_to_celsius+0x30>
 80058b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80058be:	eeb0 0a67 	vmov.f32	s0, s15
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	42c80000 	.word	0x42c80000

080058d0 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 80058da:	f107 020b 	add.w	r2, r7, #11
 80058de:	2301      	movs	r3, #1
 80058e0:	210f      	movs	r1, #15
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ff70 	bl	80057c8 <lps22df_read_reg>
 80058e8:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 80058ea:	7afa      	ldrb	r2, [r7, #11]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005904:	f107 020c 	add.w	r2, r7, #12
 8005908:	2301      	movs	r3, #1
 800590a:	210e      	movs	r1, #14
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff5b 	bl	80057c8 <lps22df_read_reg>
 8005912:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d124      	bne.n	8005964 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	b2da      	uxtb	r2, r3
 8005926:	7b3b      	ldrb	r3, [r7, #12]
 8005928:	f362 1386 	bfi	r3, r2, #6, #1
 800592c:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	b2da      	uxtb	r2, r3
 800593a:	7b3b      	ldrb	r3, [r7, #12]
 800593c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005940:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	b2da      	uxtb	r2, r3
 800594c:	7b3b      	ldrb	r3, [r7, #12]
 800594e:	f362 1345 	bfi	r3, r2, #5, #1
 8005952:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005954:	f107 020c 	add.w	r2, r7, #12
 8005958:	2301      	movs	r3, #1
 800595a:	210e      	movs	r1, #14
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff51 	bl	8005804 <lps22df_write_reg>
 8005962:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d107      	bne.n	800597a <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 800596a:	f107 0210 	add.w	r2, r7, #16
 800596e:	2301      	movs	r3, #1
 8005970:	2119      	movs	r1, #25
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff ff28 	bl	80057c8 <lps22df_read_reg>
 8005978:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d119      	bne.n	80059b4 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	b2da      	uxtb	r2, r3
 800598a:	7c3b      	ldrb	r3, [r7, #16]
 800598c:	f362 1345 	bfi	r3, r2, #5, #1
 8005990:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	789b      	ldrb	r3, [r3, #2]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	b2da      	uxtb	r2, r3
 800599c:	7c3b      	ldrb	r3, [r7, #16]
 800599e:	f362 0301 	bfi	r3, r2, #0, #2
 80059a2:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 80059a4:	f107 0210 	add.w	r2, r7, #16
 80059a8:	2301      	movs	r3, #1
 80059aa:	2119      	movs	r1, #25
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ff29 	bl	8005804 <lps22df_write_reg>
 80059b2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 80059b4:	697b      	ldr	r3, [r7, #20]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08a      	sub	sp, #40	@ 0x28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 80059d0:	f107 020c 	add.w	r2, r7, #12
 80059d4:	2302      	movs	r3, #2
 80059d6:	2111      	movs	r1, #17
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fef5 	bl	80057c8 <lps22df_read_reg>
 80059de:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 80c8 	bne.w	8005b78 <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 80059e8:	f107 020c 	add.w	r2, r7, #12
 80059ec:	f107 031c 	add.w	r3, r7, #28
 80059f0:	4611      	mov	r1, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff ff24 	bl	8005840 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	f107 0318 	add.w	r3, r7, #24
 8005a02:	4611      	mov	r1, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ff1b 	bl	8005840 <bytecpy>

    switch (val)
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d043      	beq.n	8005a98 <lps22df_init_set+0xda>
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	f300 809d 	bgt.w	8005b50 <lps22df_init_set+0x192>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d078      	beq.n	8005b0c <lps22df_init_set+0x14e>
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	f040 8098 	bne.w	8005b50 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8005a20:	7f3b      	ldrb	r3, [r7, #28]
 8005a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a26:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005a28:	f107 021c 	add.w	r2, r7, #28
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	2111      	movs	r1, #17
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fee7 	bl	8005804 <lps22df_write_reg>
 8005a36:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 8095 	bne.w	8005b6a <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8005a40:	f107 0214 	add.w	r2, r7, #20
 8005a44:	2301      	movs	r3, #1
 8005a46:	2124      	movs	r1, #36	@ 0x24
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff febd 	bl	80057c8 <lps22df_read_reg>
 8005a4e:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d115      	bne.n	8005a82 <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8005a56:	7d3b      	ldrb	r3, [r7, #20]
 8005a58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	200a      	movs	r0, #10
 8005a70:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d9df      	bls.n	8005a40 <lps22df_init_set+0x82>
 8005a80:	e002      	b.n	8005a88 <lps22df_init_set+0xca>
            break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <lps22df_init_set+0xca>
            break;
 8005a86:	bf00      	nop

        if (cnt >= 5U)
 8005a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d96e      	bls.n	8005b6e <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	623b      	str	r3, [r7, #32]
        }

        break;
 8005a96:	e06a      	b.n	8005b6e <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005a98:	7f3b      	ldrb	r3, [r7, #28]
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005aa0:	f107 021c 	add.w	r2, r7, #28
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	2111      	movs	r1, #17
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff feab 	bl	8005804 <lps22df_write_reg>
 8005aae:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d15d      	bne.n	8005b72 <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f860 	bl	8005b82 <lps22df_status_get>
 8005ac2:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d115      	bne.n	8005af6 <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 8005aca:	7c3b      	ldrb	r3, [r7, #16]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d011      	beq.n	8005afa <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d9e0      	bls.n	8005ab6 <lps22df_init_set+0xf8>
 8005af4:	e002      	b.n	8005afc <lps22df_init_set+0x13e>
            break;
 8005af6:	bf00      	nop
 8005af8:	e000      	b.n	8005afc <lps22df_init_set+0x13e>
            break;
 8005afa:	bf00      	nop

        if (cnt >= 5U)
 8005afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d938      	bls.n	8005b76 <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295
 8005b08:	623b      	str	r3, [r7, #32]
        }

        break;
 8005b0a:	e034      	b.n	8005b76 <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8005b0c:	7f3b      	ldrb	r3, [r7, #28]
 8005b0e:	f043 0308 	orr.w	r3, r3, #8
 8005b12:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8005b14:	7e3b      	ldrb	r3, [r7, #24]
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8005b1c:	f107 021c 	add.w	r2, r7, #28
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fe8a 	bl	8005840 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8005b2c:	f107 0218 	add.w	r2, r7, #24
 8005b30:	f107 030c 	add.w	r3, r7, #12
 8005b34:	3301      	adds	r3, #1
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fe81 	bl	8005840 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005b3e:	f107 020c 	add.w	r2, r7, #12
 8005b42:	2302      	movs	r3, #2
 8005b44:	2111      	movs	r1, #17
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fe5c 	bl	8005804 <lps22df_write_reg>
 8005b4c:	6238      	str	r0, [r7, #32]
        break;
 8005b4e:	e013      	b.n	8005b78 <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005b50:	7f3b      	ldrb	r3, [r7, #28]
 8005b52:	f043 0304 	orr.w	r3, r3, #4
 8005b56:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005b58:	f107 021c 	add.w	r2, r7, #28
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	2111      	movs	r1, #17
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fe4f 	bl	8005804 <lps22df_write_reg>
 8005b66:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8005b68:	e006      	b.n	8005b78 <lps22df_init_set+0x1ba>
          break;
 8005b6a:	bf00      	nop
 8005b6c:	e004      	b.n	8005b78 <lps22df_init_set+0x1ba>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <lps22df_init_set+0x1ba>
          break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <lps22df_init_set+0x1ba>
        break;
 8005b76:	bf00      	nop
    }
  }

  return ret;
 8005b78:	6a3b      	ldr	r3, [r7, #32]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3728      	adds	r7, #40	@ 0x28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b088      	sub	sp, #32
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8005b8c:	f107 0210 	add.w	r2, r7, #16
 8005b90:	2301      	movs	r3, #1
 8005b92:	2111      	movs	r1, #17
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fe17 	bl	80057c8 <lps22df_read_reg>
 8005b9a:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d107      	bne.n	8005bb2 <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8005ba2:	f107 0214 	add.w	r2, r7, #20
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	2124      	movs	r1, #36	@ 0x24
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fe0c 	bl	80057c8 <lps22df_read_reg>
 8005bb0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d107      	bne.n	8005bc8 <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8005bb8:	f107 020c 	add.w	r2, r7, #12
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	2127      	movs	r1, #39	@ 0x27
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff fe01 	bl	80057c8 <lps22df_read_reg>
 8005bc6:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 8005bce:	f107 0218 	add.w	r2, r7, #24
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	210b      	movs	r1, #11
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff fdf6 	bl	80057c8 <lps22df_read_reg>
 8005bdc:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 8005bde:	7c3b      	ldrb	r3, [r7, #16]
 8005be0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005be4:	b2d9      	uxtb	r1, r3
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	7813      	ldrb	r3, [r2, #0]
 8005bea:	f361 0300 	bfi	r3, r1, #0, #1
 8005bee:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 8005bf0:	7d3b      	ldrb	r3, [r7, #20]
 8005bf2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005bf6:	b2d9      	uxtb	r1, r3
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	7813      	ldrb	r3, [r2, #0]
 8005bfc:	f361 0341 	bfi	r3, r1, #1, #1
 8005c00:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 8005c02:	7b3b      	ldrb	r3, [r7, #12]
 8005c04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c08:	b2d9      	uxtb	r1, r3
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	7813      	ldrb	r3, [r2, #0]
 8005c0e:	f361 0382 	bfi	r3, r1, #2, #1
 8005c12:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 8005c14:	7b3b      	ldrb	r3, [r7, #12]
 8005c16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c1a:	b2d9      	uxtb	r1, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	7813      	ldrb	r3, [r2, #0]
 8005c20:	f361 03c3 	bfi	r3, r1, #3, #1
 8005c24:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 8005c26:	7b3b      	ldrb	r3, [r7, #12]
 8005c28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c2c:	b2d9      	uxtb	r1, r3
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	7813      	ldrb	r3, [r2, #0]
 8005c32:	f361 1304 	bfi	r3, r1, #4, #1
 8005c36:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 8005c38:	7b3b      	ldrb	r3, [r7, #12]
 8005c3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c3e:	b2d9      	uxtb	r1, r3
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	7813      	ldrb	r3, [r2, #0]
 8005c44:	f361 1345 	bfi	r3, r1, #5, #1
 8005c48:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 8005c4a:	7c3b      	ldrb	r3, [r7, #16]
 8005c4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	b2d9      	uxtb	r1, r3
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	7813      	ldrb	r3, [r2, #0]
 8005c60:	f361 1386 	bfi	r3, r1, #6, #1
 8005c64:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 8005c66:	7e3b      	ldrb	r3, [r7, #24]
 8005c68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	b2d9      	uxtb	r1, r3
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	7813      	ldrb	r3, [r2, #0]
 8005c7c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c80:	7013      	strb	r3, [r2, #0]

  return ret;
 8005c82:	69fb      	ldr	r3, [r7, #28]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8005c96:	f107 0208 	add.w	r2, r7, #8
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	2110      	movs	r1, #16
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fd92 	bl	80057c8 <lps22df_read_reg>
 8005ca4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d148      	bne.n	8005d3e <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8005cac:	f107 0208 	add.w	r2, r7, #8
 8005cb0:	f107 0310 	add.w	r3, r7, #16
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fdc2 	bl	8005840 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8005cbc:	f107 0308 	add.w	r3, r7, #8
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fdb9 	bl	8005840 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	7c3b      	ldrb	r3, [r7, #16]
 8005cda:	f362 03c6 	bfi	r3, r2, #3, #4
 8005cde:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	7c3b      	ldrb	r3, [r7, #16]
 8005cec:	f362 0302 	bfi	r3, r2, #0, #3
 8005cf0:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	789b      	ldrb	r3, [r3, #2]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	7b3b      	ldrb	r3, [r7, #12]
 8005cfe:	f362 1304 	bfi	r3, r2, #4, #1
 8005d02:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8005d04:	7b3b      	ldrb	r3, [r7, #12]
 8005d06:	f023 0320 	bic.w	r3, r3, #32
 8005d0a:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8005d0c:	f107 0210 	add.w	r2, r7, #16
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fd92 	bl	8005840 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8005d1c:	f107 020c 	add.w	r2, r7, #12
 8005d20:	f107 0308 	add.w	r3, r7, #8
 8005d24:	3301      	adds	r3, #1
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fd89 	bl	8005840 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8005d2e:	f107 0208 	add.w	r2, r7, #8
 8005d32:	2302      	movs	r3, #2
 8005d34:	2110      	movs	r1, #16
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fd64 	bl	8005804 <lps22df_write_reg>
 8005d3c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005d3e:	697b      	ldr	r3, [r7, #20]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8005d52:	f107 0208 	add.w	r2, r7, #8
 8005d56:	2302      	movs	r3, #2
 8005d58:	2110      	movs	r1, #16
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fd34 	bl	80057c8 <lps22df_read_reg>
 8005d60:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f040 80b6 	bne.w	8005ed6 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8005d6a:	f107 0208 	add.w	r2, r7, #8
 8005d6e:	f107 0310 	add.w	r3, r7, #16
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fd63 	bl	8005840 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8005d7a:	f107 0308 	add.w	r3, r7, #8
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fd5a 	bl	8005840 <bytecpy>

    switch (ctrl_reg1.odr)
 8005d8c:	7c3b      	ldrb	r3, [r7, #16]
 8005d8e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d839      	bhi.n	8005e0c <lps22df_mode_get+0xc4>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <lps22df_mode_get+0x58>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	08005ddd 	.word	0x08005ddd
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005ded 	.word	0x08005ded
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005dfd 	.word	0x08005dfd
 8005dc0:	08005e05 	.word	0x08005e05
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
        break;
 8005dca:	e023      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
        break;
 8005dd2:	e01f      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	701a      	strb	r2, [r3, #0]
        break;
 8005dda:	e01b      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2203      	movs	r2, #3
 8005de0:	701a      	strb	r2, [r3, #0]
        break;
 8005de2:	e017      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2204      	movs	r2, #4
 8005de8:	701a      	strb	r2, [r3, #0]
        break;
 8005dea:	e013      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2205      	movs	r2, #5
 8005df0:	701a      	strb	r2, [r3, #0]
        break;
 8005df2:	e00f      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2206      	movs	r2, #6
 8005df8:	701a      	strb	r2, [r3, #0]
        break;
 8005dfa:	e00b      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2207      	movs	r2, #7
 8005e00:	701a      	strb	r2, [r3, #0]
        break;
 8005e02:	e007      	b.n	8005e14 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2208      	movs	r2, #8
 8005e08:	701a      	strb	r2, [r3, #0]
        break;
 8005e0a:	e003      	b.n	8005e14 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
        break;
 8005e12:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8005e14:	7c3b      	ldrb	r3, [r7, #16]
 8005e16:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	d833      	bhi.n	8005e88 <lps22df_mode_get+0x140>
 8005e20:	a201      	add	r2, pc, #4	@ (adr r2, 8005e28 <lps22df_mode_get+0xe0>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e49 	.word	0x08005e49
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e79 	.word	0x08005e79
 8005e44:	08005e81 	.word	0x08005e81
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	705a      	strb	r2, [r3, #1]
        break;
 8005e4e:	e01f      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	705a      	strb	r2, [r3, #1]
        break;
 8005e56:	e01b      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	705a      	strb	r2, [r3, #1]
        break;
 8005e5e:	e017      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2203      	movs	r2, #3
 8005e64:	705a      	strb	r2, [r3, #1]
        break;
 8005e66:	e013      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	705a      	strb	r2, [r3, #1]
        break;
 8005e6e:	e00f      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2205      	movs	r2, #5
 8005e74:	705a      	strb	r2, [r3, #1]
        break;
 8005e76:	e00b      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2206      	movs	r2, #6
 8005e7c:	705a      	strb	r2, [r3, #1]
        break;
 8005e7e:	e007      	b.n	8005e90 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2207      	movs	r2, #7
 8005e84:	705a      	strb	r2, [r3, #1]
        break;
 8005e86:	e003      	b.n	8005e90 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	705a      	strb	r2, [r3, #1]
        break;
 8005e8e:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8005e90:	7b3b      	ldrb	r3, [r7, #12]
 8005e92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	7b3a      	ldrb	r2, [r7, #12]
 8005e9c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d00e      	beq.n	8005ec6 <lps22df_mode_get+0x17e>
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	dc10      	bgt.n	8005ece <lps22df_mode_get+0x186>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <lps22df_mode_get+0x16e>
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d004      	beq.n	8005ebe <lps22df_mode_get+0x176>
 8005eb4:	e00b      	b.n	8005ece <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	709a      	strb	r2, [r3, #2]
        break;
 8005ebc:	e00b      	b.n	8005ed6 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	709a      	strb	r2, [r3, #2]
        break;
 8005ec4:	e007      	b.n	8005ed6 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	709a      	strb	r2, [r3, #2]
        break;
 8005ecc:	e003      	b.n	8005ed6 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	709a      	strb	r2, [r3, #2]
        break;
 8005ed4:	bf00      	nop
    }
  }
  return ret;
 8005ed6:	697b      	ldr	r3, [r7, #20]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 8005eea:	f107 0208 	add.w	r2, r7, #8
 8005eee:	2303      	movs	r3, #3
 8005ef0:	2128      	movs	r1, #40	@ 0x28
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fc68 	bl	80057c8 <lps22df_read_reg>
 8005ef8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005efa:	7abb      	ldrb	r3, [r7, #10]
 8005efc:	461a      	mov	r2, r3
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	7a7a      	ldrb	r2, [r7, #9]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	7a3a      	ldrb	r2, [r7, #8]
 8005f18:	441a      	add	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	601a      	str	r2, [r3, #0]

  return ret;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 8005f3c:	f107 0208 	add.w	r2, r7, #8
 8005f40:	2302      	movs	r3, #2
 8005f42:	212b      	movs	r1, #43	@ 0x2b
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff fc3f 	bl	80057c8 <lps22df_read_reg>
 8005f4a:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8005f4c:	7a7b      	ldrb	r3, [r7, #9]
 8005f4e:	b21a      	sxth	r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	7a3a      	ldrb	r2, [r7, #8]
 8005f62:	4413      	add	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	801a      	strh	r2, [r3, #0]

  return ret;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e04d      	b.n	8006030 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	7b1a      	ldrb	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	@ (800603c <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8005fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8006040 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8005fd6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e020      	b.n	8006030 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4798      	blx	r3
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 8005ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e016      	b.n	8006030 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d112      	bne.n	8006030 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10d      	bne.n	8006030 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006014:	230c      	movs	r3, #12
 8006016:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	461a      	mov	r2, r3
 800601c:	2112      	movs	r1, #18
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fdbe 	bl	8006ba0 <LSM6DSO16IS_Write_Reg>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 800602a:	f04f 33ff 	mov.w	r3, #4294967295
 800602e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	08007069 	.word	0x08007069
 8006040:	0800709f 	.word	0x0800709f

08006044 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8006050:	2100      	movs	r1, #0
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fdc1 	bl	8006bda <LSM6DSO16IS_Set_Mem_Bank>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 800605e:	f04f 33ff 	mov.w	r3, #4294967295
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3320      	adds	r3, #32
 8006068:	2101      	movs	r1, #1
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fbdc 	bl	8007828 <lsm6dso16is_auto_increment_set>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3320      	adds	r3, #32
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fbf6 	bl	8007874 <lsm6dso16is_block_data_update_set>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 800608e:	f04f 33ff 	mov.w	r3, #4294967295
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2204      	movs	r2, #4
 8006098:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3320      	adds	r3, #32
 80060a0:	2100      	movs	r1, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f910 	bl	80072c8 <lsm6dso16is_xl_data_rate_set>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3320      	adds	r3, #32
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 f8a6 	bl	800720c <lsm6dso16is_xl_full_scale_set>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ca:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2204      	movs	r2, #4
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3320      	adds	r3, #32
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 faa8 	bl	8007630 <lsm6dso16is_gy_data_rate_set>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3320      	adds	r3, #32
 80060f0:	2103      	movs	r1, #3
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fa10 	bl	8007518 <lsm6dso16is_gy_full_scale_set>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f890 	bl	800624e <LSM6DSO16IS_ACC_Disable>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 8006134:	f04f 33ff 	mov.w	r3, #4294967295
 8006138:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fad0 	bl	80066e0 <LSM6DSO16IS_GYRO_Disable>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006146:	f04f 33ff 	mov.w	r3, #4294967295
 800614a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3320      	adds	r3, #32
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f808 	bl	800719e <lsm6dso16is_device_id_get>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295
 8006198:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800619a:	68fb      	ldr	r3, [r7, #12]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2201      	movs	r2, #1
 80061b8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80061cc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2200      	movs	r2, #0
 80061d8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	4a07      	ldr	r2, [pc, #28]	@ (80061fc <LSM6DSO16IS_GetCapabilities+0x58>)
 80061de:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	4a06      	ldr	r2, [pc, #24]	@ (80061fc <LSM6DSO16IS_GetCapabilities+0x58>)
 80061e4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	45505000 	.word	0x45505000

08006200 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006212:	2b01      	cmp	r3, #1
 8006214:	d102      	bne.n	800621c <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e013      	b.n	8006244 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f103 0220 	add.w	r2, r3, #32
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f001 f84c 	bl	80072c8 <lsm6dso16is_xl_data_rate_set>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006236:	f04f 33ff 	mov.w	r3, #4294967295
 800623a:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e01e      	b.n	80062a8 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f103 0220 	add.w	r2, r3, #32
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3333      	adds	r3, #51	@ 0x33
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f001 f866 	bl	8007348 <lsm6dso16is_xl_data_rate_get>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3320      	adds	r3, #32
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f001 f81a 	bl	80072c8 <lsm6dso16is_xl_data_rate_set>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3320      	adds	r3, #32
 80062c6:	f107 020b 	add.w	r2, r7, #11
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ffc3 	bl	8007258 <lsm6dso16is_xl_full_scale_get>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80062de:	7afb      	ldrb	r3, [r7, #11]
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d81b      	bhi.n	800631c <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 80062e4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006315 	.word	0x08006315
 80062f4:	08006305 	.word	0x08006305
 80062f8:	0800630d 	.word	0x0800630d
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006330 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8006300:	601a      	str	r2, [r3, #0]
      break;
 8006302:	e00f      	b.n	8006324 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	4a0b      	ldr	r2, [pc, #44]	@ (8006334 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8006308:	601a      	str	r2, [r3, #0]
      break;
 800630a:	e00b      	b.n	8006324 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4a0a      	ldr	r2, [pc, #40]	@ (8006338 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8006310:	601a      	str	r2, [r3, #0]
      break;
 8006312:	e007      	b.n	8006324 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	4a09      	ldr	r2, [pc, #36]	@ (800633c <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8006318:	601a      	str	r2, [r3, #0]
      break;
 800631a:	e003      	b.n	8006324 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	60fb      	str	r3, [r7, #12]
      break;
 8006322:	bf00      	nop
  }

  return ret;
 8006324:	68fb      	ldr	r3, [r7, #12]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	3d79db23 	.word	0x3d79db23
 8006334:	3df9db23 	.word	0x3df9db23
 8006338:	3e79db23 	.word	0x3e79db23
 800633c:	3ef9db23 	.word	0x3ef9db23

08006340 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3320      	adds	r3, #32
 8006352:	f107 020b 	add.w	r2, r7, #11
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fff5 	bl	8007348 <lsm6dso16is_xl_data_rate_get>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	2b1b      	cmp	r3, #27
 800636e:	d86c      	bhi.n	800644a <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063e9 	.word	0x080063e9
 800637c:	080063fb 	.word	0x080063fb
 8006380:	08006403 	.word	0x08006403
 8006384:	0800640b 	.word	0x0800640b
 8006388:	08006413 	.word	0x08006413
 800638c:	0800641b 	.word	0x0800641b
 8006390:	08006423 	.word	0x08006423
 8006394:	0800642b 	.word	0x0800642b
 8006398:	08006433 	.word	0x08006433
 800639c:	0800643b 	.word	0x0800643b
 80063a0:	08006443 	.word	0x08006443
 80063a4:	0800644b 	.word	0x0800644b
 80063a8:	0800644b 	.word	0x0800644b
 80063ac:	0800644b 	.word	0x0800644b
 80063b0:	0800644b 	.word	0x0800644b
 80063b4:	0800644b 	.word	0x0800644b
 80063b8:	0800644b 	.word	0x0800644b
 80063bc:	080063fb 	.word	0x080063fb
 80063c0:	08006403 	.word	0x08006403
 80063c4:	0800640b 	.word	0x0800640b
 80063c8:	08006413 	.word	0x08006413
 80063cc:	0800641b 	.word	0x0800641b
 80063d0:	08006423 	.word	0x08006423
 80063d4:	0800642b 	.word	0x0800642b
 80063d8:	08006433 	.word	0x08006433
 80063dc:	0800643b 	.word	0x0800643b
 80063e0:	08006443 	.word	0x08006443
 80063e4:	080063f3 	.word	0x080063f3
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
      break;
 80063f0:	e02f      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	4a19      	ldr	r2, [pc, #100]	@ (800645c <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 80063f6:	601a      	str	r2, [r3, #0]
      break;
 80063f8:	e02b      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 80063fe:	601a      	str	r2, [r3, #0]
      break;
 8006400:	e027      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8006406:	601a      	str	r2, [r3, #0]
      break;
 8006408:	e023      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 800640e:	601a      	str	r2, [r3, #0]
      break;
 8006410:	e01f      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	4a15      	ldr	r2, [pc, #84]	@ (800646c <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8006416:	601a      	str	r2, [r3, #0]
      break;
 8006418:	e01b      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	4a14      	ldr	r2, [pc, #80]	@ (8006470 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 800641e:	601a      	str	r2, [r3, #0]
      break;
 8006420:	e017      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	4a13      	ldr	r2, [pc, #76]	@ (8006474 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8006426:	601a      	str	r2, [r3, #0]
      break;
 8006428:	e013      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	4a12      	ldr	r2, [pc, #72]	@ (8006478 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 800642e:	601a      	str	r2, [r3, #0]
      break;
 8006430:	e00f      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	4a11      	ldr	r2, [pc, #68]	@ (800647c <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8006436:	601a      	str	r2, [r3, #0]
      break;
 8006438:	e00b      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	4a10      	ldr	r2, [pc, #64]	@ (8006480 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 800643e:	601a      	str	r2, [r3, #0]
      break;
 8006440:	e007      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	4a0f      	ldr	r2, [pc, #60]	@ (8006484 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8006446:	601a      	str	r2, [r3, #0]
      break;
 8006448:	e003      	b.n	8006452 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	60fb      	str	r3, [r7, #12]
      break;
 8006450:	bf00      	nop
  }

  return ret;
 8006452:	68fb      	ldr	r3, [r7, #12]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	3fcccccd 	.word	0x3fcccccd
 8006460:	41480000 	.word	0x41480000
 8006464:	41d00000 	.word	0x41d00000
 8006468:	42500000 	.word	0x42500000
 800646c:	42d00000 	.word	0x42d00000
 8006470:	43500000 	.word	0x43500000
 8006474:	43d00000 	.word	0x43d00000
 8006478:	44504000 	.word	0x44504000
 800647c:	44d06000 	.word	0x44d06000
 8006480:	45505000 	.word	0x45505000
 8006484:	45d05800 	.word	0x45d05800

08006488 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800649a:	2b01      	cmp	r3, #1
 800649c:	d106      	bne.n	80064ac <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800649e:	ed97 0a00 	vldr	s0, [r7]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fbc0 	bl	8006c28 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	e005      	b.n	80064b8 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80064ac:	ed97 0a00 	vldr	s0, [r7]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc47 	bl	8006d44 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 80064b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3320      	adds	r3, #32
 80064d6:	f107 020b 	add.w	r2, r7, #11
 80064da:	4611      	mov	r1, r2
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 febb 	bl	8007258 <lsm6dso16is_xl_full_scale_get>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80064e8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d81b      	bhi.n	800652c <LSM6DSO16IS_ACC_GetFullScale+0x68>
 80064f4:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006525 	.word	0x08006525
 8006504:	08006515 	.word	0x08006515
 8006508:	0800651d 	.word	0x0800651d
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2202      	movs	r2, #2
 8006510:	601a      	str	r2, [r3, #0]
      break;
 8006512:	e00f      	b.n	8006534 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2204      	movs	r2, #4
 8006518:	601a      	str	r2, [r3, #0]
      break;
 800651a:	e00b      	b.n	8006534 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2208      	movs	r2, #8
 8006520:	601a      	str	r2, [r3, #0]
      break;
 8006522:	e007      	b.n	8006534 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2210      	movs	r2, #16
 8006528:	601a      	str	r2, [r3, #0]
      break;
 800652a:	e003      	b.n	8006534 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
 8006530:	60fb      	str	r3, [r7, #12]
      break;
 8006532:	bf00      	nop
  }

  return ret;
 8006534:	68fb      	ldr	r3, [r7, #12]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop

08006540 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b02      	cmp	r3, #2
 8006552:	dd0b      	ble.n	800656c <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b04      	cmp	r3, #4
 8006558:	dd06      	ble.n	8006568 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b08      	cmp	r3, #8
 800655e:	dc01      	bgt.n	8006564 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8006560:	2303      	movs	r3, #3
 8006562:	e004      	b.n	800656e <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006564:	2301      	movs	r3, #1
 8006566:	e002      	b.n	800656e <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006568:	2302      	movs	r3, #2
 800656a:	e000      	b.n	800656e <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 800656c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 800656e:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3320      	adds	r3, #32
 8006574:	7afa      	ldrb	r2, [r7, #11]
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fe47 	bl	800720c <lsm6dso16is_xl_full_scale_set>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3320      	adds	r3, #32
 80065a6:	f107 020c 	add.w	r2, r7, #12
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 f9cf 	bl	8007950 <lsm6dso16is_acceleration_raw_get>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 80065be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 80065c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 80065ce:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	809a      	strh	r2, [r3, #4]

  return ret;
 80065d6:	697b      	ldr	r3, [r7, #20]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3320      	adds	r3, #32
 80065f8:	f107 020c 	add.w	r2, r7, #12
 80065fc:	4611      	mov	r1, r2
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f9a6 	bl	8007950 <lsm6dso16is_acceleration_raw_get>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006610:	f107 0308 	add.w	r3, r7, #8
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff fe4c 	bl	80062b4 <LSM6DSO16IS_ACC_GetSensitivity>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006622:	f04f 33ff 	mov.w	r3, #4294967295
 8006626:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006628:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006634:	edd7 7a02 	vldr	s15, [r7, #8]
 8006638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006640:	ee17 2a90 	vmov	r2, s15
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006654:	edd7 7a02 	vldr	s15, [r7, #8]
 8006658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006660:	ee17 2a90 	vmov	r2, s15
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006668:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006674:	edd7 7a02 	vldr	s15, [r7, #8]
 8006678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006680:	ee17 2a90 	vmov	r2, s15
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	609a      	str	r2, [r3, #8]

  return ret;
 8006688:	697b      	ldr	r3, [r7, #20]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d102      	bne.n	80066ae <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e013      	b.n	80066d6 <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f103 0220 	add.w	r2, r3, #32
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f000 ffb7 	bl	8007630 <lsm6dso16is_gy_data_rate_set>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e01e      	b.n	800673a <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f103 0220 	add.w	r2, r3, #32
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3334      	adds	r3, #52	@ 0x34
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f000 ffd1 	bl	80076b0 <lsm6dso16is_gy_data_rate_get>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3320      	adds	r3, #32
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f000 ff85 	bl	8007630 <lsm6dso16is_gy_data_rate_set>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3320      	adds	r3, #32
 8006756:	f107 020b 	add.w	r2, r7, #11
 800675a:	4611      	mov	r1, r2
 800675c:	4618      	mov	r0, r3
 800675e:	f000 ff0b 	bl	8007578 <lsm6dso16is_gy_full_scale_get>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006768:	f04f 33ff 	mov.w	r3, #4294967295
 800676c:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	2b10      	cmp	r3, #16
 8006772:	d839      	bhi.n	80067e8 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006774:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067c9 	.word	0x080067c9
 8006780:	080067d1 	.word	0x080067d1
 8006784:	080067d9 	.word	0x080067d9
 8006788:	080067e1 	.word	0x080067e1
 800678c:	080067e9 	.word	0x080067e9
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067e9 	.word	0x080067e9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067e9 	.word	0x080067e9
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067e9 	.word	0x080067e9
 80067a8:	080067e9 	.word	0x080067e9
 80067ac:	080067e9 	.word	0x080067e9
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067e9 	.word	0x080067e9
 80067b8:	080067e9 	.word	0x080067e9
 80067bc:	080067c1 	.word	0x080067c1
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	4a0e      	ldr	r2, [pc, #56]	@ (80067fc <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 80067c4:	601a      	str	r2, [r3, #0]
      break;
 80067c6:	e013      	b.n	80067f0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006800 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 80067cc:	601a      	str	r2, [r3, #0]
      break;
 80067ce:	e00f      	b.n	80067f0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006804 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 80067d4:	601a      	str	r2, [r3, #0]
      break;
 80067d6:	e00b      	b.n	80067f0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	4a0b      	ldr	r2, [pc, #44]	@ (8006808 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 80067dc:	601a      	str	r2, [r3, #0]
      break;
 80067de:	e007      	b.n	80067f0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	4a0a      	ldr	r2, [pc, #40]	@ (800680c <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 80067e4:	601a      	str	r2, [r3, #0]
      break;
 80067e6:	e003      	b.n	80067f0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ec:	60fb      	str	r3, [r7, #12]
      break;
 80067ee:	bf00      	nop
  }

  return ret;
 80067f0:	68fb      	ldr	r3, [r7, #12]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	408c0000 	.word	0x408c0000
 8006800:	410c0000 	.word	0x410c0000
 8006804:	418c0000 	.word	0x418c0000
 8006808:	420c0000 	.word	0x420c0000
 800680c:	428c0000 	.word	0x428c0000

08006810 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3320      	adds	r3, #32
 8006822:	f107 020b 	add.w	r2, r7, #11
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f000 ff41 	bl	80076b0 <lsm6dso16is_gy_data_rate_get>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	2b1a      	cmp	r3, #26
 800683e:	d866      	bhi.n	800690e <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006840:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	080068b5 	.word	0x080068b5
 800684c:	080068bf 	.word	0x080068bf
 8006850:	080068c7 	.word	0x080068c7
 8006854:	080068cf 	.word	0x080068cf
 8006858:	080068d7 	.word	0x080068d7
 800685c:	080068df 	.word	0x080068df
 8006860:	080068e7 	.word	0x080068e7
 8006864:	080068ef 	.word	0x080068ef
 8006868:	080068f7 	.word	0x080068f7
 800686c:	080068ff 	.word	0x080068ff
 8006870:	08006907 	.word	0x08006907
 8006874:	0800690f 	.word	0x0800690f
 8006878:	0800690f 	.word	0x0800690f
 800687c:	0800690f 	.word	0x0800690f
 8006880:	0800690f 	.word	0x0800690f
 8006884:	0800690f 	.word	0x0800690f
 8006888:	0800690f 	.word	0x0800690f
 800688c:	080068bf 	.word	0x080068bf
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068cf 	.word	0x080068cf
 8006898:	080068d7 	.word	0x080068d7
 800689c:	080068df 	.word	0x080068df
 80068a0:	080068e7 	.word	0x080068e7
 80068a4:	080068ef 	.word	0x080068ef
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	080068ff 	.word	0x080068ff
 80068b0:	08006907 	.word	0x08006907
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
      break;
 80068bc:	e02b      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	4a17      	ldr	r2, [pc, #92]	@ (8006920 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 80068c2:	601a      	str	r2, [r3, #0]
      break;
 80068c4:	e027      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 80068ca:	601a      	str	r2, [r3, #0]
      break;
 80068cc:	e023      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 80068d2:	601a      	str	r2, [r3, #0]
      break;
 80068d4:	e01f      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	4a14      	ldr	r2, [pc, #80]	@ (800692c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 80068da:	601a      	str	r2, [r3, #0]
      break;
 80068dc:	e01b      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	4a13      	ldr	r2, [pc, #76]	@ (8006930 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 80068e2:	601a      	str	r2, [r3, #0]
      break;
 80068e4:	e017      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	4a12      	ldr	r2, [pc, #72]	@ (8006934 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 80068ea:	601a      	str	r2, [r3, #0]
      break;
 80068ec:	e013      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	4a11      	ldr	r2, [pc, #68]	@ (8006938 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 80068f2:	601a      	str	r2, [r3, #0]
      break;
 80068f4:	e00f      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	4a10      	ldr	r2, [pc, #64]	@ (800693c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 80068fa:	601a      	str	r2, [r3, #0]
      break;
 80068fc:	e00b      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	4a0f      	ldr	r2, [pc, #60]	@ (8006940 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006902:	601a      	str	r2, [r3, #0]
      break;
 8006904:	e007      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 800690a:	601a      	str	r2, [r3, #0]
      break;
 800690c:	e003      	b.n	8006916 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	60fb      	str	r3, [r7, #12]
      break;
 8006914:	bf00      	nop
  }

  return ret;
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	41480000 	.word	0x41480000
 8006924:	41d00000 	.word	0x41d00000
 8006928:	42500000 	.word	0x42500000
 800692c:	42d00000 	.word	0x42d00000
 8006930:	43500000 	.word	0x43500000
 8006934:	43d00000 	.word	0x43d00000
 8006938:	44504000 	.word	0x44504000
 800693c:	44d06000 	.word	0x44d06000
 8006940:	45505000 	.word	0x45505000
 8006944:	45d05800 	.word	0x45d05800

08006948 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800695a:	2b01      	cmp	r3, #1
 800695c:	d106      	bne.n	800696c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800695e:	ed97 0a00 	vldr	s0, [r7]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa70 	bl	8006e48 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	e005      	b.n	8006978 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800696c:	ed97 0a00 	vldr	s0, [r7]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 faf7 	bl	8006f64 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8006976:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006978:	68fb      	ldr	r3, [r7, #12]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3320      	adds	r3, #32
 8006996:	f107 020b 	add.w	r2, r7, #11
 800699a:	4611      	mov	r1, r2
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fdeb 	bl	8007578 <lsm6dso16is_gy_full_scale_get>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ac:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d83c      	bhi.n	8006a2e <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 80069b4:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	08006a09 	.word	0x08006a09
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	08006a1b 	.word	0x08006a1b
 80069c8:	08006a25 	.word	0x08006a25
 80069cc:	08006a2f 	.word	0x08006a2f
 80069d0:	08006a2f 	.word	0x08006a2f
 80069d4:	08006a2f 	.word	0x08006a2f
 80069d8:	08006a2f 	.word	0x08006a2f
 80069dc:	08006a2f 	.word	0x08006a2f
 80069e0:	08006a2f 	.word	0x08006a2f
 80069e4:	08006a2f 	.word	0x08006a2f
 80069e8:	08006a2f 	.word	0x08006a2f
 80069ec:	08006a2f 	.word	0x08006a2f
 80069f0:	08006a2f 	.word	0x08006a2f
 80069f4:	08006a2f 	.word	0x08006a2f
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a01 	.word	0x08006a01
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	227d      	movs	r2, #125	@ 0x7d
 8006a04:	601a      	str	r2, [r3, #0]
      break;
 8006a06:	e016      	b.n	8006a36 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	22fa      	movs	r2, #250	@ 0xfa
 8006a0c:	601a      	str	r2, [r3, #0]
      break;
 8006a0e:	e012      	b.n	8006a36 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006a16:	601a      	str	r2, [r3, #0]
      break;
 8006a18:	e00d      	b.n	8006a36 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a20:	601a      	str	r2, [r3, #0]
      break;
 8006a22:	e008      	b.n	8006a36 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a2a:	601a      	str	r2, [r3, #0]
      break;
 8006a2c:	e003      	b.n	8006a36 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a32:	60fb      	str	r3, [r7, #12]
      break;
 8006a34:	bf00      	nop
  }

  return ret;
 8006a36:	68fb      	ldr	r3, [r7, #12]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b7d      	cmp	r3, #125	@ 0x7d
 8006a52:	dd12      	ble.n	8006a7a <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2bfa      	cmp	r3, #250	@ 0xfa
 8006a58:	dd0d      	ble.n	8006a76 <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006a60:	dd07      	ble.n	8006a72 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a68:	dc01      	bgt.n	8006a6e <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e006      	b.n	8006a7c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e004      	b.n	8006a7c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e002      	b.n	8006a7c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006a76:	2300      	movs	r3, #0
 8006a78:	e000      	b.n	8006a7c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006a7a:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8006a7c:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3320      	adds	r3, #32
 8006a82:	7afa      	ldrb	r2, [r7, #11]
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fd46 	bl	8007518 <lsm6dso16is_gy_full_scale_set>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295
 8006a96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006a98:	68fb      	ldr	r3, [r7, #12]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3320      	adds	r3, #32
 8006ab4:	f107 020c 	add.w	r2, r7, #12
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 ff00 	bl	80078c0 <lsm6dso16is_angular_rate_raw_get>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aca:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006acc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006ad4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006adc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	809a      	strh	r2, [r3, #4]

  return ret;
 8006ae4:	697b      	ldr	r3, [r7, #20]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3320      	adds	r3, #32
 8006b06:	f107 020c 	add.w	r2, r7, #12
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fed7 	bl	80078c0 <lsm6dso16is_angular_rate_raw_get>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006b18:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1c:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fe0d 	bl	8006744 <LSM6DSO16IS_GYRO_GetSensitivity>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
 8006b34:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006b36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b4e:	ee17 2a90 	vmov	r2, s15
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b6e:	ee17 2a90 	vmov	r2, s15
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b8e:	ee17 2a90 	vmov	r2, s15
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	609a      	str	r2, [r3, #8]

  return ret;
 8006b96:	697b      	ldr	r3, [r7, #20]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
 8006bac:	4613      	mov	r3, r2
 8006bae:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f103 0020 	add.w	r0, r3, #32
 8006bba:	1cba      	adds	r2, r7, #2
 8006bbc:	78f9      	ldrb	r1, [r7, #3]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f000 faa6 	bl	8007110 <lsm6dso16is_write_reg>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d006      	beq.n	8006bfe <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d101      	bne.n	8006bfa <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e002      	b.n	8006c00 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e000      	b.n	8006c00 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006bfe:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8006c00:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3320      	adds	r3, #32
 8006c06:	7afa      	ldrb	r2, [r7, #11]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fa9e 	bl	800714c <lsm6dso16is_mem_bank_set>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006c38:	edd7 7a00 	vldr	s15, [r7]
 8006c3c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c48:	d801      	bhi.n	8006c4e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e058      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006c4e:	edd7 7a00 	vldr	s15, [r7]
 8006c52:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d801      	bhi.n	8006c64 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e04d      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006c64:	edd7 7a00 	vldr	s15, [r7]
 8006c68:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006d28 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8006c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c74:	d801      	bhi.n	8006c7a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 8006c76:	2303      	movs	r3, #3
 8006c78:	e042      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006c7a:	edd7 7a00 	vldr	s15, [r7]
 8006c7e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006d2c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8006c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8a:	d801      	bhi.n	8006c90 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	e037      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006c90:	edd7 7a00 	vldr	s15, [r7]
 8006c94:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006d30 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8006c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca0:	d801      	bhi.n	8006ca6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8006ca2:	2305      	movs	r3, #5
 8006ca4:	e02c      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006ca6:	edd7 7a00 	vldr	s15, [r7]
 8006caa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006d34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8006cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb6:	d801      	bhi.n	8006cbc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8006cb8:	2306      	movs	r3, #6
 8006cba:	e021      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006cbc:	edd7 7a00 	vldr	s15, [r7]
 8006cc0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006d38 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ccc:	d801      	bhi.n	8006cd2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8006cce:	2307      	movs	r3, #7
 8006cd0:	e016      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006cd2:	edd7 7a00 	vldr	s15, [r7]
 8006cd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006d3c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce2:	d801      	bhi.n	8006ce8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006ce4:	2308      	movs	r3, #8
 8006ce6:	e00b      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006ce8:	edd7 7a00 	vldr	s15, [r7]
 8006cec:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006d40 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d801      	bhi.n	8006cfe <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8006cfa:	2309      	movs	r3, #9
 8006cfc:	e000      	b.n	8006d00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006cfe:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8006d00:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3320      	adds	r3, #32
 8006d06:	7afa      	ldrb	r2, [r7, #11]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fadc 	bl	80072c8 <lsm6dso16is_xl_data_rate_set>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8006d16:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	42500000 	.word	0x42500000
 8006d2c:	42d00000 	.word	0x42d00000
 8006d30:	43500000 	.word	0x43500000
 8006d34:	43d00000 	.word	0x43d00000
 8006d38:	44504000 	.word	0x44504000
 8006d3c:	44d06000 	.word	0x44d06000
 8006d40:	45505000 	.word	0x45505000

08006d44 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006d50:	edd7 7a00 	vldr	s15, [r7]
 8006d54:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d60:	d801      	bhi.n	8006d66 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e058      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006d66:	edd7 7a00 	vldr	s15, [r7]
 8006d6a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d76:	d801      	bhi.n	8006d7c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e04d      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006d7c:	edd7 7a00 	vldr	s15, [r7]
 8006d80:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006e2c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8c:	d801      	bhi.n	8006d92 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e042      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006d92:	edd7 7a00 	vldr	s15, [r7]
 8006d96:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006e30 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 8006d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	d801      	bhi.n	8006da8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006da4:	2304      	movs	r3, #4
 8006da6:	e037      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006da8:	edd7 7a00 	vldr	s15, [r7]
 8006dac:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006e34 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8006db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db8:	d801      	bhi.n	8006dbe <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006dba:	2305      	movs	r3, #5
 8006dbc:	e02c      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006dbe:	edd7 7a00 	vldr	s15, [r7]
 8006dc2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006e38 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8006dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dce:	d801      	bhi.n	8006dd4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006dd0:	2306      	movs	r3, #6
 8006dd2:	e021      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006dd4:	edd7 7a00 	vldr	s15, [r7]
 8006dd8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006e3c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8006ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	d801      	bhi.n	8006dea <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006de6:	2307      	movs	r3, #7
 8006de8:	e016      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006dea:	edd7 7a00 	vldr	s15, [r7]
 8006dee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006e40 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8006df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfa:	d801      	bhi.n	8006e00 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	e00b      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006e00:	edd7 7a00 	vldr	s15, [r7]
 8006e04:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006e44 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e10:	d801      	bhi.n	8006e16 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006e12:	2309      	movs	r3, #9
 8006e14:	e000      	b.n	8006e18 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006e16:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	42500000 	.word	0x42500000
 8006e30:	42d00000 	.word	0x42d00000
 8006e34:	43500000 	.word	0x43500000
 8006e38:	43d00000 	.word	0x43d00000
 8006e3c:	44504000 	.word	0x44504000
 8006e40:	44d06000 	.word	0x44d06000
 8006e44:	45505000 	.word	0x45505000

08006e48 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8006e58:	edd7 7a00 	vldr	s15, [r7]
 8006e5c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e68:	d801      	bhi.n	8006e6e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e058      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006e6e:	edd7 7a00 	vldr	s15, [r7]
 8006e72:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7e:	d801      	bhi.n	8006e84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e04d      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006e84:	edd7 7a00 	vldr	s15, [r7]
 8006e88:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006f48 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e94:	d801      	bhi.n	8006e9a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8006e96:	2303      	movs	r3, #3
 8006e98:	e042      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006e9a:	edd7 7a00 	vldr	s15, [r7]
 8006e9e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006f4c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eaa:	d801      	bhi.n	8006eb0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8006eac:	2304      	movs	r3, #4
 8006eae:	e037      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006eb0:	edd7 7a00 	vldr	s15, [r7]
 8006eb4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006f50 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec0:	d801      	bhi.n	8006ec6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8006ec2:	2305      	movs	r3, #5
 8006ec4:	e02c      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006ec6:	edd7 7a00 	vldr	s15, [r7]
 8006eca:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006f54 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	d801      	bhi.n	8006edc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8006ed8:	2306      	movs	r3, #6
 8006eda:	e021      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006edc:	edd7 7a00 	vldr	s15, [r7]
 8006ee0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006f58 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eec:	d801      	bhi.n	8006ef2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 8006eee:	2307      	movs	r3, #7
 8006ef0:	e016      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006ef2:	edd7 7a00 	vldr	s15, [r7]
 8006ef6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006f5c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f02:	d801      	bhi.n	8006f08 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8006f04:	2308      	movs	r3, #8
 8006f06:	e00b      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006f08:	edd7 7a00 	vldr	s15, [r7]
 8006f0c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006f60 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8006f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f18:	d801      	bhi.n	8006f1e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8006f1a:	2309      	movs	r3, #9
 8006f1c:	e000      	b.n	8006f20 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006f1e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8006f20:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3320      	adds	r3, #32
 8006f26:	7afa      	ldrb	r2, [r7, #11]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fb80 	bl	8007630 <lsm6dso16is_gy_data_rate_set>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	42500000 	.word	0x42500000
 8006f4c:	42d00000 	.word	0x42d00000
 8006f50:	43500000 	.word	0x43500000
 8006f54:	43d00000 	.word	0x43d00000
 8006f58:	44504000 	.word	0x44504000
 8006f5c:	44d06000 	.word	0x44d06000
 8006f60:	45505000 	.word	0x45505000

08006f64 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8006f70:	edd7 7a00 	vldr	s15, [r7]
 8006f74:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f80:	d801      	bhi.n	8006f86 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e058      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f86:	edd7 7a00 	vldr	s15, [r7]
 8006f8a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	d801      	bhi.n	8006f9c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e04d      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f9c:	edd7 7a00 	vldr	s15, [r7]
 8006fa0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800704c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fac:	d801      	bhi.n	8006fb2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e042      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fb2:	edd7 7a00 	vldr	s15, [r7]
 8006fb6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007050 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc2:	d801      	bhi.n	8006fc8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	e037      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fc8:	edd7 7a00 	vldr	s15, [r7]
 8006fcc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007054 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd8:	d801      	bhi.n	8006fde <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006fda:	2305      	movs	r3, #5
 8006fdc:	e02c      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fde:	edd7 7a00 	vldr	s15, [r7]
 8006fe2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007058 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fee:	d801      	bhi.n	8006ff4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006ff0:	2306      	movs	r3, #6
 8006ff2:	e021      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ff4:	edd7 7a00 	vldr	s15, [r7]
 8006ff8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800705c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	d801      	bhi.n	800700a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007006:	2307      	movs	r3, #7
 8007008:	e016      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800700a:	edd7 7a00 	vldr	s15, [r7]
 800700e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007060 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	d801      	bhi.n	8007020 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800701c:	2308      	movs	r3, #8
 800701e:	e00b      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007020:	edd7 7a00 	vldr	s15, [r7]
 8007024:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007064 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800702c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007030:	d801      	bhi.n	8007036 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007032:	2309      	movs	r3, #9
 8007034:	e000      	b.n	8007038 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007036:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	42500000 	.word	0x42500000
 8007050:	42d00000 	.word	0x42d00000
 8007054:	43500000 	.word	0x43500000
 8007058:	43d00000 	.word	0x43d00000
 800705c:	44504000 	.word	0x44504000
 8007060:	44d06000 	.word	0x44d06000
 8007064:	45505000 	.word	0x45505000

08007068 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	461a      	mov	r2, r3
 8007074:	460b      	mov	r3, r1
 8007076:	72fb      	strb	r3, [r7, #11]
 8007078:	4613      	mov	r3, r2
 800707a:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	695c      	ldr	r4, [r3, #20]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	7b1b      	ldrb	r3, [r3, #12]
 8007088:	4618      	mov	r0, r3
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	b299      	uxth	r1, r3
 800708e:	893b      	ldrh	r3, [r7, #8]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	47a0      	blx	r4
 8007094:	4603      	mov	r3, r0
}
 8007096:	4618      	mov	r0, r3
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	bd90      	pop	{r4, r7, pc}

0800709e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800709e:	b590      	push	{r4, r7, lr}
 80070a0:	b087      	sub	sp, #28
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	461a      	mov	r2, r3
 80070aa:	460b      	mov	r3, r1
 80070ac:	72fb      	strb	r3, [r7, #11]
 80070ae:	4613      	mov	r3, r2
 80070b0:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	691c      	ldr	r4, [r3, #16]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	7b1b      	ldrb	r3, [r3, #12]
 80070be:	4618      	mov	r0, r3
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	b299      	uxth	r1, r3
 80070c4:	893b      	ldrh	r3, [r7, #8]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	47a0      	blx	r4
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd90      	pop	{r4, r7, pc}

080070d4 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	461a      	mov	r2, r3
 80070e0:	460b      	mov	r3, r1
 80070e2:	72fb      	strb	r3, [r7, #11]
 80070e4:	4613      	mov	r3, r2
 80070e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	e009      	b.n	8007108 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685c      	ldr	r4, [r3, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68d8      	ldr	r0, [r3, #12]
 80070fc:	893b      	ldrh	r3, [r7, #8]
 80070fe:	7af9      	ldrb	r1, [r7, #11]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	47a0      	blx	r4
 8007104:	6178      	str	r0, [r7, #20]

  return ret;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd90      	pop	{r4, r7, pc}

08007110 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	461a      	mov	r2, r3
 800711c:	460b      	mov	r3, r1
 800711e:	72fb      	strb	r3, [r7, #11]
 8007120:	4613      	mov	r3, r2
 8007122:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
 800712e:	e009      	b.n	8007144 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681c      	ldr	r4, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68d8      	ldr	r0, [r3, #12]
 8007138:	893b      	ldrh	r3, [r7, #8]
 800713a:	7af9      	ldrb	r1, [r7, #11]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	47a0      	blx	r4
 8007140:	6178      	str	r0, [r7, #20]

  return ret;
 8007142:	697b      	ldr	r3, [r7, #20]
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	bd90      	pop	{r4, r7, pc}

0800714c <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 8007158:	2300      	movs	r3, #0
 800715a:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b02      	cmp	r3, #2
 8007160:	d101      	bne.n	8007166 <lsm6dso16is_mem_bank_set+0x1a>
 8007162:	2201      	movs	r2, #1
 8007164:	e000      	b.n	8007168 <lsm6dso16is_mem_bank_set+0x1c>
 8007166:	2200      	movs	r2, #0
 8007168:	7a3b      	ldrb	r3, [r7, #8]
 800716a:	f362 1386 	bfi	r3, r2, #6, #1
 800716e:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d101      	bne.n	800717a <lsm6dso16is_mem_bank_set+0x2e>
 8007176:	2201      	movs	r2, #1
 8007178:	e000      	b.n	800717c <lsm6dso16is_mem_bank_set+0x30>
 800717a:	2200      	movs	r2, #0
 800717c:	7a3b      	ldrb	r3, [r7, #8]
 800717e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007182:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8007184:	f107 0208 	add.w	r2, r7, #8
 8007188:	2301      	movs	r3, #1
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff ffbf 	bl	8007110 <lsm6dso16is_write_reg>
 8007192:	60f8      	str	r0, [r7, #12]

  return ret;
 8007194:	68fb      	ldr	r3, [r7, #12]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 80071a8:	2301      	movs	r3, #1
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	210f      	movs	r1, #15
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff ff90 	bl	80070d4 <lsm6dso16is_read_reg>
 80071b4:	60f8      	str	r0, [r7, #12]

  return ret;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80071cc:	f107 0208 	add.w	r2, r7, #8
 80071d0:	2301      	movs	r3, #1
 80071d2:	2115      	movs	r1, #21
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff7d 	bl	80070d4 <lsm6dso16is_read_reg>
 80071da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10f      	bne.n	8007202 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	7a3b      	ldrb	r3, [r7, #8]
 80071ec:	f362 1304 	bfi	r3, r2, #4, #1
 80071f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80071f2:	f107 0208 	add.w	r2, r7, #8
 80071f6:	2301      	movs	r3, #1
 80071f8:	2115      	movs	r1, #21
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff ff88 	bl	8007110 <lsm6dso16is_write_reg>
 8007200:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007218:	f107 0208 	add.w	r2, r7, #8
 800721c:	2301      	movs	r3, #1
 800721e:	2110      	movs	r1, #16
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff57 	bl	80070d4 <lsm6dso16is_read_reg>
 8007226:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10f      	bne.n	800724e <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	b2da      	uxtb	r2, r3
 8007236:	7a3b      	ldrb	r3, [r7, #8]
 8007238:	f362 0383 	bfi	r3, r2, #2, #2
 800723c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800723e:	f107 0208 	add.w	r2, r7, #8
 8007242:	2301      	movs	r3, #1
 8007244:	2110      	movs	r1, #16
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff ff62 	bl	8007110 <lsm6dso16is_write_reg>
 800724c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007262:	f107 0208 	add.w	r2, r7, #8
 8007266:	2301      	movs	r3, #1
 8007268:	2110      	movs	r1, #16
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff ff32 	bl	80070d4 <lsm6dso16is_read_reg>
 8007270:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8007272:	7a3b      	ldrb	r3, [r7, #8]
 8007274:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b03      	cmp	r3, #3
 800727c:	d81a      	bhi.n	80072b4 <lsm6dso16is_xl_full_scale_get+0x5c>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007295 	.word	0x08007295
 8007288:	080072ad 	.word	0x080072ad
 800728c:	0800729d 	.word	0x0800729d
 8007290:	080072a5 	.word	0x080072a5
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
      break;
 800729a:	e00f      	b.n	80072bc <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2202      	movs	r2, #2
 80072a0:	701a      	strb	r2, [r3, #0]
      break;
 80072a2:	e00b      	b.n	80072bc <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2203      	movs	r2, #3
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e007      	b.n	80072bc <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	701a      	strb	r2, [r3, #0]
      break;
 80072b2:	e003      	b.n	80072bc <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
      break;
 80072ba:	bf00      	nop
  }
  return ret;
 80072bc:	68fb      	ldr	r3, [r7, #12]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop

080072c8 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80072d4:	f107 0208 	add.w	r2, r7, #8
 80072d8:	2301      	movs	r3, #1
 80072da:	2110      	movs	r1, #16
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff fef9 	bl	80070d4 <lsm6dso16is_read_reg>
 80072e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d128      	bne.n	800733c <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80072f4:	2101      	movs	r1, #1
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff ff62 	bl	80071c0 <lsm6dso16is_xl_hm_mode_set>
 80072fc:	4602      	mov	r2, r0
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e007      	b.n	8007316 <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007306:	2100      	movs	r1, #0
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ff59 	bl	80071c0 <lsm6dso16is_xl_hm_mode_set>
 800730e:	4602      	mov	r2, r0
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	b2da      	uxtb	r2, r3
 800731e:	7a3b      	ldrb	r3, [r7, #8]
 8007320:	f362 1307 	bfi	r3, r2, #4, #4
 8007324:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007326:	f107 0208 	add.w	r2, r7, #8
 800732a:	2301      	movs	r3, #1
 800732c:	2110      	movs	r1, #16
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff feee 	bl	8007110 <lsm6dso16is_write_reg>
 8007334:	4602      	mov	r2, r0
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007352:	f107 0210 	add.w	r2, r7, #16
 8007356:	2301      	movs	r3, #1
 8007358:	2110      	movs	r1, #16
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff feba 	bl	80070d4 <lsm6dso16is_read_reg>
 8007360:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007362:	f107 020c 	add.w	r2, r7, #12
 8007366:	2301      	movs	r3, #1
 8007368:	2115      	movs	r1, #21
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff feb2 	bl	80070d4 <lsm6dso16is_read_reg>
 8007370:	4602      	mov	r2, r0
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4413      	add	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8007378:	7b3b      	ldrb	r3, [r7, #12]
 800737a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	7c3a      	ldrb	r2, [r7, #16]
 8007384:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	4313      	orrs	r3, r2
 800738c:	2b1b      	cmp	r3, #27
 800738e:	f200 8093 	bhi.w	80074b8 <lsm6dso16is_xl_data_rate_get+0x170>
 8007392:	a201      	add	r2, pc, #4	@ (adr r2, 8007398 <lsm6dso16is_xl_data_rate_get+0x50>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	08007409 	.word	0x08007409
 800739c:	08007411 	.word	0x08007411
 80073a0:	08007419 	.word	0x08007419
 80073a4:	08007421 	.word	0x08007421
 80073a8:	08007429 	.word	0x08007429
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007439 	.word	0x08007439
 80073b4:	08007441 	.word	0x08007441
 80073b8:	08007449 	.word	0x08007449
 80073bc:	08007451 	.word	0x08007451
 80073c0:	08007459 	.word	0x08007459
 80073c4:	080074b9 	.word	0x080074b9
 80073c8:	080074b9 	.word	0x080074b9
 80073cc:	080074b9 	.word	0x080074b9
 80073d0:	080074b9 	.word	0x080074b9
 80073d4:	080074b9 	.word	0x080074b9
 80073d8:	080074b9 	.word	0x080074b9
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007469 	.word	0x08007469
 80073e4:	08007471 	.word	0x08007471
 80073e8:	08007479 	.word	0x08007479
 80073ec:	08007481 	.word	0x08007481
 80073f0:	08007489 	.word	0x08007489
 80073f4:	08007491 	.word	0x08007491
 80073f8:	08007499 	.word	0x08007499
 80073fc:	080074a1 	.word	0x080074a1
 8007400:	080074a9 	.word	0x080074a9
 8007404:	080074b1 	.word	0x080074b1
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]
      break;
 800740e:	e057      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
      break;
 8007416:	e053      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2202      	movs	r2, #2
 800741c:	701a      	strb	r2, [r3, #0]
      break;
 800741e:	e04f      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2203      	movs	r2, #3
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e04b      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2204      	movs	r2, #4
 800742c:	701a      	strb	r2, [r3, #0]
      break;
 800742e:	e047      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2205      	movs	r2, #5
 8007434:	701a      	strb	r2, [r3, #0]
      break;
 8007436:	e043      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2206      	movs	r2, #6
 800743c:	701a      	strb	r2, [r3, #0]
      break;
 800743e:	e03f      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2207      	movs	r2, #7
 8007444:	701a      	strb	r2, [r3, #0]
      break;
 8007446:	e03b      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2208      	movs	r2, #8
 800744c:	701a      	strb	r2, [r3, #0]
      break;
 800744e:	e037      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2209      	movs	r2, #9
 8007454:	701a      	strb	r2, [r3, #0]
      break;
 8007456:	e033      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	220a      	movs	r2, #10
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e02f      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2211      	movs	r2, #17
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	e02b      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2212      	movs	r2, #18
 800746c:	701a      	strb	r2, [r3, #0]
      break;
 800746e:	e027      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2213      	movs	r2, #19
 8007474:	701a      	strb	r2, [r3, #0]
      break;
 8007476:	e023      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2214      	movs	r2, #20
 800747c:	701a      	strb	r2, [r3, #0]
      break;
 800747e:	e01f      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2215      	movs	r2, #21
 8007484:	701a      	strb	r2, [r3, #0]
      break;
 8007486:	e01b      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2216      	movs	r2, #22
 800748c:	701a      	strb	r2, [r3, #0]
      break;
 800748e:	e017      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2217      	movs	r2, #23
 8007494:	701a      	strb	r2, [r3, #0]
      break;
 8007496:	e013      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2218      	movs	r2, #24
 800749c:	701a      	strb	r2, [r3, #0]
      break;
 800749e:	e00f      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2219      	movs	r2, #25
 80074a4:	701a      	strb	r2, [r3, #0]
      break;
 80074a6:	e00b      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	221a      	movs	r2, #26
 80074ac:	701a      	strb	r2, [r3, #0]
      break;
 80074ae:	e007      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	221b      	movs	r2, #27
 80074b4:	701a      	strb	r2, [r3, #0]
      break;
 80074b6:	e003      	b.n	80074c0 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
      break;
 80074be:	bf00      	nop
  }

  return ret;
 80074c0:	697b      	ldr	r3, [r7, #20]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop

080074cc <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80074d8:	f107 0208 	add.w	r2, r7, #8
 80074dc:	2301      	movs	r3, #1
 80074de:	2116      	movs	r1, #22
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff fdf7 	bl	80070d4 <lsm6dso16is_read_reg>
 80074e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10f      	bne.n	800750e <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	7a3b      	ldrb	r3, [r7, #8]
 80074f8:	f362 13c7 	bfi	r3, r2, #7, #1
 80074fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80074fe:	f107 0208 	add.w	r2, r7, #8
 8007502:	2301      	movs	r3, #1
 8007504:	2116      	movs	r1, #22
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fe02 	bl	8007110 <lsm6dso16is_write_reg>
 800750c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800750e:	68fb      	ldr	r3, [r7, #12]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007524:	f107 0208 	add.w	r2, r7, #8
 8007528:	2301      	movs	r3, #1
 800752a:	2111      	movs	r1, #17
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fdd1 	bl	80070d4 <lsm6dso16is_read_reg>
 8007532:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d119      	bne.n	800756e <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	b2da      	uxtb	r2, r3
 8007542:	7a3b      	ldrb	r3, [r7, #8]
 8007544:	f362 0383 	bfi	r3, r2, #2, #2
 8007548:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	091b      	lsrs	r3, r3, #4
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	7a3b      	ldrb	r3, [r7, #8]
 8007558:	f362 0341 	bfi	r3, r2, #1, #1
 800755c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800755e:	f107 0208 	add.w	r2, r7, #8
 8007562:	2301      	movs	r3, #1
 8007564:	2111      	movs	r1, #17
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fdd2 	bl	8007110 <lsm6dso16is_write_reg>
 800756c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007582:	f107 0208 	add.w	r2, r7, #8
 8007586:	2301      	movs	r3, #1
 8007588:	2111      	movs	r1, #17
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff fda2 	bl	80070d4 <lsm6dso16is_read_reg>
 8007590:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8007592:	7a3b      	ldrb	r3, [r7, #8]
 8007594:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	7a3a      	ldrb	r2, [r7, #8]
 800759e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	4313      	orrs	r3, r2
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	d838      	bhi.n	800761c <lsm6dso16is_gy_full_scale_get+0xa4>
 80075aa:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <lsm6dso16is_gy_full_scale_get+0x38>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075fd 	.word	0x080075fd
 80075b4:	08007605 	.word	0x08007605
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007615 	.word	0x08007615
 80075c0:	0800761d 	.word	0x0800761d
 80075c4:	0800761d 	.word	0x0800761d
 80075c8:	0800761d 	.word	0x0800761d
 80075cc:	0800761d 	.word	0x0800761d
 80075d0:	0800761d 	.word	0x0800761d
 80075d4:	0800761d 	.word	0x0800761d
 80075d8:	0800761d 	.word	0x0800761d
 80075dc:	0800761d 	.word	0x0800761d
 80075e0:	0800761d 	.word	0x0800761d
 80075e4:	0800761d 	.word	0x0800761d
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	080075f5 	.word	0x080075f5
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2210      	movs	r2, #16
 80075f8:	701a      	strb	r2, [r3, #0]
      break;
 80075fa:	e013      	b.n	8007624 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e00f      	b.n	8007624 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
      break;
 800760a:	e00b      	b.n	8007624 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2202      	movs	r2, #2
 8007610:	701a      	strb	r2, [r3, #0]
      break;
 8007612:	e007      	b.n	8007624 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2203      	movs	r2, #3
 8007618:	701a      	strb	r2, [r3, #0]
      break;
 800761a:	e003      	b.n	8007624 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2210      	movs	r2, #16
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	bf00      	nop
  }
  return ret;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop

08007630 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800763c:	f107 0208 	add.w	r2, r7, #8
 8007640:	2301      	movs	r3, #1
 8007642:	2111      	movs	r1, #17
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fd45 	bl	80070d4 <lsm6dso16is_read_reg>
 800764a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d128      	bne.n	80076a4 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800765c:	2101      	movs	r1, #1
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff ff34 	bl	80074cc <lsm6dso16is_gy_hm_mode_set>
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e007      	b.n	800767e <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800766e:	2100      	movs	r1, #0
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ff2b 	bl	80074cc <lsm6dso16is_gy_hm_mode_set>
 8007676:	4602      	mov	r2, r0
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	b2da      	uxtb	r2, r3
 8007686:	7a3b      	ldrb	r3, [r7, #8]
 8007688:	f362 1307 	bfi	r3, r2, #4, #4
 800768c:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800768e:	f107 0208 	add.w	r2, r7, #8
 8007692:	2301      	movs	r3, #1
 8007694:	2111      	movs	r1, #17
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff fd3a 	bl	8007110 <lsm6dso16is_write_reg>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076a4:	68fb      	ldr	r3, [r7, #12]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80076ba:	f107 0210 	add.w	r2, r7, #16
 80076be:	2301      	movs	r3, #1
 80076c0:	2111      	movs	r1, #17
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fd06 	bl	80070d4 <lsm6dso16is_read_reg>
 80076c8:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80076ca:	f107 020c 	add.w	r2, r7, #12
 80076ce:	2301      	movs	r3, #1
 80076d0:	2116      	movs	r1, #22
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff fcfe 	bl	80070d4 <lsm6dso16is_read_reg>
 80076d8:	4602      	mov	r2, r0
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	4413      	add	r3, r2
 80076de:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 80076e0:	7b3b      	ldrb	r3, [r7, #12]
 80076e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	7c3a      	ldrb	r2, [r7, #16]
 80076ec:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	4313      	orrs	r3, r2
 80076f4:	2b1a      	cmp	r3, #26
 80076f6:	f200 808d 	bhi.w	8007814 <lsm6dso16is_gy_data_rate_get+0x164>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <lsm6dso16is_gy_data_rate_get+0x50>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	0800776d 	.word	0x0800776d
 8007704:	08007775 	.word	0x08007775
 8007708:	0800777d 	.word	0x0800777d
 800770c:	08007785 	.word	0x08007785
 8007710:	0800778d 	.word	0x0800778d
 8007714:	08007795 	.word	0x08007795
 8007718:	0800779d 	.word	0x0800779d
 800771c:	080077a5 	.word	0x080077a5
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077b5 	.word	0x080077b5
 8007728:	080077bd 	.word	0x080077bd
 800772c:	08007815 	.word	0x08007815
 8007730:	08007815 	.word	0x08007815
 8007734:	08007815 	.word	0x08007815
 8007738:	08007815 	.word	0x08007815
 800773c:	08007815 	.word	0x08007815
 8007740:	08007815 	.word	0x08007815
 8007744:	080077c5 	.word	0x080077c5
 8007748:	080077cd 	.word	0x080077cd
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077dd 	.word	0x080077dd
 8007754:	080077e5 	.word	0x080077e5
 8007758:	080077ed 	.word	0x080077ed
 800775c:	080077f5 	.word	0x080077f5
 8007760:	080077fd 	.word	0x080077fd
 8007764:	08007805 	.word	0x08007805
 8007768:	0800780d 	.word	0x0800780d
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
      break;
 8007772:	e053      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2201      	movs	r2, #1
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e04f      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2202      	movs	r2, #2
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	e04b      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2203      	movs	r2, #3
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e047      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2204      	movs	r2, #4
 8007790:	701a      	strb	r2, [r3, #0]
      break;
 8007792:	e043      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2205      	movs	r2, #5
 8007798:	701a      	strb	r2, [r3, #0]
      break;
 800779a:	e03f      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2206      	movs	r2, #6
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e03b      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2207      	movs	r2, #7
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e037      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2208      	movs	r2, #8
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e033      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2209      	movs	r2, #9
 80077b8:	701a      	strb	r2, [r3, #0]
      break;
 80077ba:	e02f      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	220a      	movs	r2, #10
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e02b      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2211      	movs	r2, #17
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	e027      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2212      	movs	r2, #18
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e023      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2213      	movs	r2, #19
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e01f      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2214      	movs	r2, #20
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e01b      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2215      	movs	r2, #21
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e017      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2216      	movs	r2, #22
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e013      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2217      	movs	r2, #23
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e00f      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2218      	movs	r2, #24
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e00b      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2219      	movs	r2, #25
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e007      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	221a      	movs	r2, #26
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e003      	b.n	800781c <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	bf00      	nop
  }

  return ret;
 800781c:	697b      	ldr	r3, [r7, #20]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop

08007828 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007834:	f107 0208 	add.w	r2, r7, #8
 8007838:	2301      	movs	r3, #1
 800783a:	2112      	movs	r1, #18
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fc49 	bl	80070d4 <lsm6dso16is_read_reg>
 8007842:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10f      	bne.n	800786a <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	b2da      	uxtb	r2, r3
 8007852:	7a3b      	ldrb	r3, [r7, #8]
 8007854:	f362 0382 	bfi	r3, r2, #2, #1
 8007858:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	2301      	movs	r3, #1
 8007860:	2112      	movs	r1, #18
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fc54 	bl	8007110 <lsm6dso16is_write_reg>
 8007868:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007880:	f107 0208 	add.w	r2, r7, #8
 8007884:	2301      	movs	r3, #1
 8007886:	2112      	movs	r1, #18
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff fc23 	bl	80070d4 <lsm6dso16is_read_reg>
 800788e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	b2da      	uxtb	r2, r3
 800789e:	7a3b      	ldrb	r3, [r7, #8]
 80078a0:	f362 1386 	bfi	r3, r2, #6, #1
 80078a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078a6:	f107 0208 	add.w	r2, r7, #8
 80078aa:	2301      	movs	r3, #1
 80078ac:	2112      	movs	r1, #18
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff fc2e 	bl	8007110 <lsm6dso16is_write_reg>
 80078b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078b6:	68fb      	ldr	r3, [r7, #12]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 80078ca:	f107 020c 	add.w	r2, r7, #12
 80078ce:	2306      	movs	r3, #6
 80078d0:	2122      	movs	r1, #34	@ 0x22
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff fbfe 	bl	80070d4 <lsm6dso16is_read_reg>
 80078d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80078da:	7b7b      	ldrb	r3, [r7, #13]
 80078dc:	b21a      	sxth	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	7b3a      	ldrb	r2, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	b21a      	sxth	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80078fa:	7bfa      	ldrb	r2, [r7, #15]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	3302      	adds	r3, #2
 8007900:	b212      	sxth	r2, r2
 8007902:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	3302      	adds	r3, #2
 8007908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800790c:	b29b      	uxth	r3, r3
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	b29b      	uxth	r3, r3
 8007912:	7bba      	ldrb	r2, [r7, #14]
 8007914:	4413      	add	r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	3302      	adds	r3, #2
 800791c:	b212      	sxth	r2, r2
 800791e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007920:	7c7a      	ldrb	r2, [r7, #17]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	3304      	adds	r3, #4
 8007926:	b212      	sxth	r2, r2
 8007928:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3304      	adds	r3, #4
 800792e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007932:	b29b      	uxth	r3, r3
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	7c3a      	ldrb	r2, [r7, #16]
 800793a:	4413      	add	r3, r2
 800793c:	b29a      	uxth	r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3304      	adds	r3, #4
 8007942:	b212      	sxth	r2, r2
 8007944:	801a      	strh	r2, [r3, #0]

  return ret;
 8007946:	697b      	ldr	r3, [r7, #20]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 800795a:	f107 020c 	add.w	r2, r7, #12
 800795e:	2306      	movs	r3, #6
 8007960:	2128      	movs	r1, #40	@ 0x28
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fbb6 	bl	80070d4 <lsm6dso16is_read_reg>
 8007968:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	b21a      	sxth	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007978:	b29b      	uxth	r3, r3
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	7b3a      	ldrb	r2, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	b29b      	uxth	r3, r3
 8007984:	b21a      	sxth	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800798a:	7bfa      	ldrb	r2, [r7, #15]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	3302      	adds	r3, #2
 8007990:	b212      	sxth	r2, r2
 8007992:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	3302      	adds	r3, #2
 8007998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799c:	b29b      	uxth	r3, r3
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	7bba      	ldrb	r2, [r7, #14]
 80079a4:	4413      	add	r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	3302      	adds	r3, #2
 80079ac:	b212      	sxth	r2, r2
 80079ae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80079b0:	7c7a      	ldrb	r2, [r7, #17]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	3304      	adds	r3, #4
 80079b6:	b212      	sxth	r2, r2
 80079b8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	3304      	adds	r3, #4
 80079be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	7c3a      	ldrb	r2, [r7, #16]
 80079ca:	4413      	add	r3, r2
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	3304      	adds	r3, #4
 80079d2:	b212      	sxth	r2, r2
 80079d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80079d6:	697b      	ldr	r3, [r7, #20]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e05d      	b.n	8007ab8 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	7b1a      	ldrb	r2, [r3, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a23      	ldr	r2, [pc, #140]	@ (8007ac4 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8007a38:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	@ (8007ac8 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007a3e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d103      	bne.n	8007a5e <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	e02c      	b.n	8007ab8 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4798      	blx	r3
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e022      	b.n	8007ab8 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d11e      	bne.n	8007ab8 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d119      	bne.n	8007ab8 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007a84:	2304      	movs	r3, #4
 8007a86:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2112      	movs	r1, #18
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 ff18 	bl	80088c4 <LSM6DSV16X_Write_Reg>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8007a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9e:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2103      	movs	r1, #3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 ff0c 	bl	80088c4 <LSM6DSV16X_Write_Reg>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8007ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	08008e05 	.word	0x08008e05
 8007ac8:	08008e3b 	.word	0x08008e3b

08007acc <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 ff0f 	bl	80088fa <LSM6DSV16X_Set_Mem_Bank>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	e070      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3320      	adds	r3, #32
 8007aec:	2101      	movs	r1, #1
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fcfe 	bl	80094f0 <lsm6dsv16x_auto_increment_set>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	e064      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3320      	adds	r3, #32
 8007b04:	2101      	movs	r1, #1
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fd18 	bl	800953c <lsm6dsv16x_block_data_update_set>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	e058      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3320      	adds	r3, #32
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 feae 	bl	8009880 <lsm6dsv16x_fifo_mode_set>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8007b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2e:	e04c      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2206      	movs	r2, #6
 8007b34:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3320      	adds	r3, #32
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 fa14 	bl	8008f6c <lsm6dsv16x_xl_data_rate_set>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	e03c      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3320      	adds	r3, #32
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 fd94 	bl	8009684 <lsm6dsv16x_xl_full_scale_set>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295
 8007b66:	e030      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2206      	movs	r2, #6
 8007b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3320      	adds	r3, #32
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 fb5a 	bl	8009230 <lsm6dsv16x_gy_data_rate_set>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	e020      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3320      	adds	r3, #32
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 fcfa 	bl	8009588 <lsm6dsv16x_gy_full_scale_set>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8007b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9e:	e014      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8007ba0:	7b3b      	ldrb	r3, [r7, #12]
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3320      	adds	r3, #32
 8007bac:	7b39      	ldrb	r1, [r7, #12]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fe8c 	bl	80098cc <lsm6dsv16x_ah_qvar_mode_set>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbe:	e004      	b.n	8007bca <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f898 	bl	8007d10 <LSM6DSV16X_ACC_Disable>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	e025      	b.n	8007c38 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb6a 	bl	80082c6 <LSM6DSV16X_GYRO_Disable>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfc:	e01c      	b.n	8007c38 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8007c0e:	7b3b      	ldrb	r3, [r7, #12]
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3320      	adds	r3, #32
 8007c1a:	7b39      	ldrb	r1, [r7, #12]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 fe55 	bl	80098cc <lsm6dsv16x_ah_qvar_mode_set>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8007c28:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2c:	e004      	b.n	8007c38 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3320      	adds	r3, #32
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 f97a 	bl	8008f4a <lsm6dsv16x_device_id_get>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	e000      	b.n	8007c64 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2200      	movs	r2, #0
 8007c86:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007c94:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2210      	movs	r2, #16
 8007c9a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	4a07      	ldr	r2, [pc, #28]	@ (8007cc4 <LSM6DSV16X_GetCapabilities+0x58>)
 8007ca6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	4a06      	ldr	r2, [pc, #24]	@ (8007cc4 <LSM6DSV16X_GetCapabilities+0x58>)
 8007cac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	45f00000 	.word	0x45f00000

08007cc8 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e014      	b.n	8007d08 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f103 0220 	add.w	r2, r3, #32
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8007cea:	4619      	mov	r1, r3
 8007cec:	4610      	mov	r0, r2
 8007cee:	f001 f93d 	bl	8008f6c <lsm6dsv16x_xl_data_rate_set>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	e004      	b.n	8007d08 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e01f      	b.n	8007d66 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f103 0220 	add.w	r2, r3, #32
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3333      	adds	r3, #51	@ 0x33
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f001 f96c 	bl	8009010 <lsm6dsv16x_xl_data_rate_get>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	e010      	b.n	8007d66 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3320      	adds	r3, #32
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f90e 	bl	8008f6c <lsm6dsv16x_xl_data_rate_set>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	e004      	b.n	8007d66 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3320      	adds	r3, #32
 8007d82:	f107 020b 	add.w	r2, r7, #11
 8007d86:	4611      	mov	r1, r2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fca1 	bl	80096d0 <lsm6dsv16x_xl_full_scale_get>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	e023      	b.n	8007de2 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d81b      	bhi.n	8007dd8 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8007da0:	a201      	add	r2, pc, #4	@ (adr r2, 8007da8 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007db9 	.word	0x08007db9
 8007dac:	08007dc1 	.word	0x08007dc1
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dd1 	.word	0x08007dd1
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	4a0c      	ldr	r2, [pc, #48]	@ (8007dec <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8007dbc:	601a      	str	r2, [r3, #0]
      break;
 8007dbe:	e00f      	b.n	8007de0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8007df0 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8007dc4:	601a      	str	r2, [r3, #0]
      break;
 8007dc6:	e00b      	b.n	8007de0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	4a0a      	ldr	r2, [pc, #40]	@ (8007df4 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8007dcc:	601a      	str	r2, [r3, #0]
      break;
 8007dce:	e007      	b.n	8007de0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	4a09      	ldr	r2, [pc, #36]	@ (8007df8 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8007dd4:	601a      	str	r2, [r3, #0]
      break;
 8007dd6:	e003      	b.n	8007de0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	60fb      	str	r3, [r7, #12]
      break;
 8007dde:	bf00      	nop
  }

  return ret;
 8007de0:	68fb      	ldr	r3, [r7, #12]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	3d79db23 	.word	0x3d79db23
 8007df0:	3df9db23 	.word	0x3df9db23
 8007df4:	3e79db23 	.word	0x3e79db23
 8007df8:	3ef9db23 	.word	0x3ef9db23

08007dfc <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3320      	adds	r3, #32
 8007e0e:	f107 020b 	add.w	r2, r7, #11
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 f8fb 	bl	8009010 <lsm6dsv16x_xl_data_rate_get>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007e20:	f04f 33ff 	mov.w	r3, #4294967295
 8007e24:	e0ea      	b.n	8007ffc <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b2c      	cmp	r3, #44	@ 0x2c
 8007e2a:	f200 80e2 	bhi.w	8007ff2 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007ee9 	.word	0x08007ee9
 8007e38:	08007ef3 	.word	0x08007ef3
 8007e3c:	08007efb 	.word	0x08007efb
 8007e40:	08007f0b 	.word	0x08007f0b
 8007e44:	08007f23 	.word	0x08007f23
 8007e48:	08007f3b 	.word	0x08007f3b
 8007e4c:	08007f53 	.word	0x08007f53
 8007e50:	08007f6b 	.word	0x08007f6b
 8007e54:	08007f83 	.word	0x08007f83
 8007e58:	08007f9b 	.word	0x08007f9b
 8007e5c:	08007fb3 	.word	0x08007fb3
 8007e60:	08007fcb 	.word	0x08007fcb
 8007e64:	08007fe3 	.word	0x08007fe3
 8007e68:	08007ff3 	.word	0x08007ff3
 8007e6c:	08007ff3 	.word	0x08007ff3
 8007e70:	08007ff3 	.word	0x08007ff3
 8007e74:	08007ff3 	.word	0x08007ff3
 8007e78:	08007ff3 	.word	0x08007ff3
 8007e7c:	08007ff3 	.word	0x08007ff3
 8007e80:	08007f13 	.word	0x08007f13
 8007e84:	08007f2b 	.word	0x08007f2b
 8007e88:	08007f43 	.word	0x08007f43
 8007e8c:	08007f5b 	.word	0x08007f5b
 8007e90:	08007f73 	.word	0x08007f73
 8007e94:	08007f8b 	.word	0x08007f8b
 8007e98:	08007fa3 	.word	0x08007fa3
 8007e9c:	08007fbb 	.word	0x08007fbb
 8007ea0:	08007fd3 	.word	0x08007fd3
 8007ea4:	08007feb 	.word	0x08007feb
 8007ea8:	08007ff3 	.word	0x08007ff3
 8007eac:	08007ff3 	.word	0x08007ff3
 8007eb0:	08007ff3 	.word	0x08007ff3
 8007eb4:	08007ff3 	.word	0x08007ff3
 8007eb8:	08007ff3 	.word	0x08007ff3
 8007ebc:	08007ff3 	.word	0x08007ff3
 8007ec0:	08007f03 	.word	0x08007f03
 8007ec4:	08007f1b 	.word	0x08007f1b
 8007ec8:	08007f33 	.word	0x08007f33
 8007ecc:	08007f4b 	.word	0x08007f4b
 8007ed0:	08007f63 	.word	0x08007f63
 8007ed4:	08007f7b 	.word	0x08007f7b
 8007ed8:	08007f93 	.word	0x08007f93
 8007edc:	08007fab 	.word	0x08007fab
 8007ee0:	08007fc3 	.word	0x08007fc3
 8007ee4:	08007fdb 	.word	0x08007fdb
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
      break;
 8007ef0:	e083      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	4a43      	ldr	r2, [pc, #268]	@ (8008004 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 8007ef6:	601a      	str	r2, [r3, #0]
      break;
 8007ef8:	e07f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	4a42      	ldr	r2, [pc, #264]	@ (8008008 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 8007efe:	601a      	str	r2, [r3, #0]
      break;
 8007f00:	e07b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	4a41      	ldr	r2, [pc, #260]	@ (800800c <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 8007f06:	601a      	str	r2, [r3, #0]
      break;
 8007f08:	e077      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	4a40      	ldr	r2, [pc, #256]	@ (8008010 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 8007f0e:	601a      	str	r2, [r3, #0]
      break;
 8007f10:	e073      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	4a3f      	ldr	r2, [pc, #252]	@ (8008014 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 8007f16:	601a      	str	r2, [r3, #0]
      break;
 8007f18:	e06f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	4a3e      	ldr	r2, [pc, #248]	@ (8008018 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 8007f1e:	601a      	str	r2, [r3, #0]
      break;
 8007f20:	e06b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	4a3d      	ldr	r2, [pc, #244]	@ (800801c <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 8007f26:	601a      	str	r2, [r3, #0]
      break;
 8007f28:	e067      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8008020 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 8007f2e:	601a      	str	r2, [r3, #0]
      break;
 8007f30:	e063      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	4a3b      	ldr	r2, [pc, #236]	@ (8008024 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 8007f36:	601a      	str	r2, [r3, #0]
      break;
 8007f38:	e05f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8008028 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 8007f3e:	601a      	str	r2, [r3, #0]
      break;
 8007f40:	e05b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	4a39      	ldr	r2, [pc, #228]	@ (800802c <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 8007f46:	601a      	str	r2, [r3, #0]
      break;
 8007f48:	e057      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	4a38      	ldr	r2, [pc, #224]	@ (8008030 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 8007f4e:	601a      	str	r2, [r3, #0]
      break;
 8007f50:	e053      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	4a37      	ldr	r2, [pc, #220]	@ (8008034 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 8007f56:	601a      	str	r2, [r3, #0]
      break;
 8007f58:	e04f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	4a36      	ldr	r2, [pc, #216]	@ (8008038 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 8007f5e:	601a      	str	r2, [r3, #0]
      break;
 8007f60:	e04b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	4a35      	ldr	r2, [pc, #212]	@ (800803c <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 8007f66:	601a      	str	r2, [r3, #0]
      break;
 8007f68:	e047      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	4a34      	ldr	r2, [pc, #208]	@ (8008040 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 8007f6e:	601a      	str	r2, [r3, #0]
      break;
 8007f70:	e043      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	4a33      	ldr	r2, [pc, #204]	@ (8008044 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 8007f76:	601a      	str	r2, [r3, #0]
      break;
 8007f78:	e03f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	4a32      	ldr	r2, [pc, #200]	@ (8008048 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 8007f7e:	601a      	str	r2, [r3, #0]
      break;
 8007f80:	e03b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	4a31      	ldr	r2, [pc, #196]	@ (800804c <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 8007f86:	601a      	str	r2, [r3, #0]
      break;
 8007f88:	e037      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	4a30      	ldr	r2, [pc, #192]	@ (8008050 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 8007f8e:	601a      	str	r2, [r3, #0]
      break;
 8007f90:	e033      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	4a2f      	ldr	r2, [pc, #188]	@ (8008054 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 8007f96:	601a      	str	r2, [r3, #0]
      break;
 8007f98:	e02f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8008058 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 8007f9e:	601a      	str	r2, [r3, #0]
      break;
 8007fa0:	e02b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800805c <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 8007fa6:	601a      	str	r2, [r3, #0]
      break;
 8007fa8:	e027      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	4a2c      	ldr	r2, [pc, #176]	@ (8008060 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 8007fae:	601a      	str	r2, [r3, #0]
      break;
 8007fb0:	e023      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8008064 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 8007fb6:	601a      	str	r2, [r3, #0]
      break;
 8007fb8:	e01f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8008068 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 8007fbe:	601a      	str	r2, [r3, #0]
      break;
 8007fc0:	e01b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	4a29      	ldr	r2, [pc, #164]	@ (800806c <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 8007fc6:	601a      	str	r2, [r3, #0]
      break;
 8007fc8:	e017      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	4a28      	ldr	r2, [pc, #160]	@ (8008070 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 8007fce:	601a      	str	r2, [r3, #0]
      break;
 8007fd0:	e013      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	4a27      	ldr	r2, [pc, #156]	@ (8008074 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 8007fd6:	601a      	str	r2, [r3, #0]
      break;
 8007fd8:	e00f      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	4a26      	ldr	r2, [pc, #152]	@ (8008078 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 8007fde:	601a      	str	r2, [r3, #0]
      break;
 8007fe0:	e00b      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	4a25      	ldr	r2, [pc, #148]	@ (800807c <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 8007fe6:	601a      	str	r2, [r3, #0]
      break;
 8007fe8:	e007      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	4a24      	ldr	r2, [pc, #144]	@ (8008080 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 8007fee:	601a      	str	r2, [r3, #0]
      break;
 8007ff0:	e003      	b.n	8007ffa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8007ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff6:	60fb      	str	r3, [r7, #12]
      break;
 8007ff8:	bf00      	nop
  }

  return ret;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	3ff00000 	.word	0x3ff00000
 8008008:	40f00000 	.word	0x40f00000
 800800c:	41480000 	.word	0x41480000
 8008010:	41700000 	.word	0x41700000
 8008014:	417a0000 	.word	0x417a0000
 8008018:	41c80000 	.word	0x41c80000
 800801c:	41f00000 	.word	0x41f00000
 8008020:	41fa0000 	.word	0x41fa0000
 8008024:	42480000 	.word	0x42480000
 8008028:	42700000 	.word	0x42700000
 800802c:	427a0000 	.word	0x427a0000
 8008030:	42c80000 	.word	0x42c80000
 8008034:	42f00000 	.word	0x42f00000
 8008038:	42fa0000 	.word	0x42fa0000
 800803c:	43480000 	.word	0x43480000
 8008040:	43700000 	.word	0x43700000
 8008044:	437a0000 	.word	0x437a0000
 8008048:	43c80000 	.word	0x43c80000
 800804c:	43f00000 	.word	0x43f00000
 8008050:	43fa0000 	.word	0x43fa0000
 8008054:	44480000 	.word	0x44480000
 8008058:	44700000 	.word	0x44700000
 800805c:	447a0000 	.word	0x447a0000
 8008060:	44c80000 	.word	0x44c80000
 8008064:	44f00000 	.word	0x44f00000
 8008068:	44fa0000 	.word	0x44fa0000
 800806c:	45480000 	.word	0x45480000
 8008070:	45700000 	.word	0x45700000
 8008074:	457a0000 	.word	0x457a0000
 8008078:	45c80000 	.word	0x45c80000
 800807c:	45f00000 	.word	0x45f00000
 8008080:	45fa0000 	.word	0x45fa0000

08008084 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008096:	2b01      	cmp	r3, #1
 8008098:	d106      	bne.n	80080a8 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800809a:	ed97 0a00 	vldr	s0, [r7]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fc52 	bl	8008948 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 80080a4:	4603      	mov	r3, r0
 80080a6:	e005      	b.n	80080b4 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80080a8:	ed97 0a00 	vldr	s0, [r7]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fced 	bl	8008a8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80080b2:	4603      	mov	r3, r0
  }
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3320      	adds	r3, #32
 80080ce:	f107 020b 	add.w	r2, r7, #11
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fafb 	bl	80096d0 <lsm6dsv16x_xl_full_scale_get>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	e023      	b.n	800812e <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80080e6:	7afb      	ldrb	r3, [r7, #11]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d81b      	bhi.n	8008124 <LSM6DSV16X_ACC_GetFullScale+0x68>
 80080ec:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008105 	.word	0x08008105
 80080f8:	0800810d 	.word	0x0800810d
 80080fc:	08008115 	.word	0x08008115
 8008100:	0800811d 	.word	0x0800811d
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2202      	movs	r2, #2
 8008108:	601a      	str	r2, [r3, #0]
      break;
 800810a:	e00f      	b.n	800812c <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2204      	movs	r2, #4
 8008110:	601a      	str	r2, [r3, #0]
      break;
 8008112:	e00b      	b.n	800812c <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2208      	movs	r2, #8
 8008118:	601a      	str	r2, [r3, #0]
      break;
 800811a:	e007      	b.n	800812c <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	601a      	str	r2, [r3, #0]
      break;
 8008122:	e003      	b.n	800812c <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008124:	f04f 33ff 	mov.w	r3, #4294967295
 8008128:	60fb      	str	r3, [r7, #12]
      break;
 800812a:	bf00      	nop
  }

  return ret;
 800812c:	68fb      	ldr	r3, [r7, #12]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop

08008138 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b02      	cmp	r3, #2
 8008146:	dd0b      	ble.n	8008160 <LSM6DSV16X_ACC_SetFullScale+0x28>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b04      	cmp	r3, #4
 800814c:	dd06      	ble.n	800815c <LSM6DSV16X_ACC_SetFullScale+0x24>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b08      	cmp	r3, #8
 8008152:	dc01      	bgt.n	8008158 <LSM6DSV16X_ACC_SetFullScale+0x20>
 8008154:	2302      	movs	r3, #2
 8008156:	e004      	b.n	8008162 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008158:	2303      	movs	r3, #3
 800815a:	e002      	b.n	8008162 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008160:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8008162:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3320      	adds	r3, #32
 8008168:	7bfa      	ldrb	r2, [r7, #15]
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fa89 	bl	8009684 <lsm6dsv16x_xl_full_scale_set>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 8008178:	f04f 33ff 	mov.w	r3, #4294967295
 800817c:	e000      	b.n	8008180 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3320      	adds	r3, #32
 8008196:	f107 0208 	add.w	r2, r7, #8
 800819a:	4611      	mov	r1, r2
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fb22 	bl	80097e6 <lsm6dsv16x_acceleration_raw_get>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80081a8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ac:	e00c      	b.n	80081c8 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80081ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80081b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80081be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3320      	adds	r3, #32
 80081e4:	f107 0210 	add.w	r2, r7, #16
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 fafb 	bl	80097e6 <lsm6dsv16x_acceleration_raw_get>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
 80081fa:	e03c      	b.n	8008276 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fdb4 	bl	8007d70 <LSM6DSV16X_ACC_GetSensitivity>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 800820e:	f04f 33ff 	mov.w	r3, #4294967295
 8008212:	e030      	b.n	8008276 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008214:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008220:	edd7 7a03 	vldr	s15, [r7, #12]
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800822c:	ee17 2a90 	vmov	r2, s15
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008240:	edd7 7a03 	vldr	s15, [r7, #12]
 8008244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800824c:	ee17 2a90 	vmov	r2, s15
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008254:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008260:	edd7 7a03 	vldr	s15, [r7, #12]
 8008264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800826c:	ee17 2a90 	vmov	r2, s15
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800828c:	2b01      	cmp	r3, #1
 800828e:	d101      	bne.n	8008294 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e014      	b.n	80082be <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f103 0220 	add.w	r2, r3, #32
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f000 ffc4 	bl	8009230 <lsm6dsv16x_gy_data_rate_set>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80082ae:	f04f 33ff 	mov.w	r3, #4294967295
 80082b2:	e004      	b.n	80082be <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	e01f      	b.n	800831c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f103 0220 	add.w	r2, r3, #32
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3334      	adds	r3, #52	@ 0x34
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f000 fff1 	bl	80092d0 <lsm6dsv16x_gy_data_rate_get>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80082f4:	f04f 33ff 	mov.w	r3, #4294967295
 80082f8:	e010      	b.n	800831c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3320      	adds	r3, #32
 80082fe:	2100      	movs	r1, #0
 8008300:	4618      	mov	r0, r3
 8008302:	f000 ff95 	bl	8009230 <lsm6dsv16x_gy_data_rate_set>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800830c:	f04f 33ff 	mov.w	r3, #4294967295
 8008310:	e004      	b.n	800831c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3320      	adds	r3, #32
 8008336:	f107 020b 	add.w	r2, r7, #11
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f001 f949 	bl	80095d4 <lsm6dsv16x_gy_full_scale_get>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008348:	f04f 33ff 	mov.w	r3, #4294967295
 800834c:	e03d      	b.n	80083ca <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	2b0c      	cmp	r3, #12
 8008352:	d835      	bhi.n	80083c0 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8008354:	a201      	add	r2, pc, #4	@ (adr r2, 800835c <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	08008391 	.word	0x08008391
 8008360:	08008399 	.word	0x08008399
 8008364:	080083a1 	.word	0x080083a1
 8008368:	080083a9 	.word	0x080083a9
 800836c:	080083b1 	.word	0x080083b1
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	080083c1 	.word	0x080083c1
 8008384:	080083c1 	.word	0x080083c1
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083b9 	.word	0x080083b9
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	4a10      	ldr	r2, [pc, #64]	@ (80083d4 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008394:	601a      	str	r2, [r3, #0]
      break;
 8008396:	e017      	b.n	80083c8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	4a0f      	ldr	r2, [pc, #60]	@ (80083d8 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 800839c:	601a      	str	r2, [r3, #0]
      break;
 800839e:	e013      	b.n	80083c8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	4a0e      	ldr	r2, [pc, #56]	@ (80083dc <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 80083a4:	601a      	str	r2, [r3, #0]
      break;
 80083a6:	e00f      	b.n	80083c8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	4a0d      	ldr	r2, [pc, #52]	@ (80083e0 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 80083ac:	601a      	str	r2, [r3, #0]
      break;
 80083ae:	e00b      	b.n	80083c8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	4a0c      	ldr	r2, [pc, #48]	@ (80083e4 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 80083b4:	601a      	str	r2, [r3, #0]
      break;
 80083b6:	e007      	b.n	80083c8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4a0b      	ldr	r2, [pc, #44]	@ (80083e8 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 80083bc:	601a      	str	r2, [r3, #0]
      break;
 80083be:	e003      	b.n	80083c8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 80083c0:	f04f 33ff 	mov.w	r3, #4294967295
 80083c4:	60fb      	str	r3, [r7, #12]
      break;
 80083c6:	bf00      	nop
  }

  return ret;
 80083c8:	68fb      	ldr	r3, [r7, #12]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	408c0000 	.word	0x408c0000
 80083d8:	410c0000 	.word	0x410c0000
 80083dc:	418c0000 	.word	0x418c0000
 80083e0:	420c0000 	.word	0x420c0000
 80083e4:	428c0000 	.word	0x428c0000
 80083e8:	430c0000 	.word	0x430c0000

080083ec <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3320      	adds	r3, #32
 80083fe:	f107 020b 	add.w	r2, r7, #11
 8008402:	4611      	mov	r1, r2
 8008404:	4618      	mov	r0, r3
 8008406:	f000 ff63 	bl	80092d0 <lsm6dsv16x_gy_data_rate_get>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	e0ea      	b.n	80085ec <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	2b2c      	cmp	r3, #44	@ 0x2c
 800841a:	f200 80e2 	bhi.w	80085e2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 800841e:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	080084d9 	.word	0x080084d9
 8008428:	080084e3 	.word	0x080084e3
 800842c:	080084eb 	.word	0x080084eb
 8008430:	080084fb 	.word	0x080084fb
 8008434:	08008513 	.word	0x08008513
 8008438:	0800852b 	.word	0x0800852b
 800843c:	08008543 	.word	0x08008543
 8008440:	0800855b 	.word	0x0800855b
 8008444:	08008573 	.word	0x08008573
 8008448:	0800858b 	.word	0x0800858b
 800844c:	080085a3 	.word	0x080085a3
 8008450:	080085bb 	.word	0x080085bb
 8008454:	080085d3 	.word	0x080085d3
 8008458:	080085e3 	.word	0x080085e3
 800845c:	080085e3 	.word	0x080085e3
 8008460:	080085e3 	.word	0x080085e3
 8008464:	080085e3 	.word	0x080085e3
 8008468:	080085e3 	.word	0x080085e3
 800846c:	080085e3 	.word	0x080085e3
 8008470:	08008503 	.word	0x08008503
 8008474:	0800851b 	.word	0x0800851b
 8008478:	08008533 	.word	0x08008533
 800847c:	0800854b 	.word	0x0800854b
 8008480:	08008563 	.word	0x08008563
 8008484:	0800857b 	.word	0x0800857b
 8008488:	08008593 	.word	0x08008593
 800848c:	080085ab 	.word	0x080085ab
 8008490:	080085c3 	.word	0x080085c3
 8008494:	080085db 	.word	0x080085db
 8008498:	080085e3 	.word	0x080085e3
 800849c:	080085e3 	.word	0x080085e3
 80084a0:	080085e3 	.word	0x080085e3
 80084a4:	080085e3 	.word	0x080085e3
 80084a8:	080085e3 	.word	0x080085e3
 80084ac:	080085e3 	.word	0x080085e3
 80084b0:	080084f3 	.word	0x080084f3
 80084b4:	0800850b 	.word	0x0800850b
 80084b8:	08008523 	.word	0x08008523
 80084bc:	0800853b 	.word	0x0800853b
 80084c0:	08008553 	.word	0x08008553
 80084c4:	0800856b 	.word	0x0800856b
 80084c8:	08008583 	.word	0x08008583
 80084cc:	0800859b 	.word	0x0800859b
 80084d0:	080085b3 	.word	0x080085b3
 80084d4:	080085cb 	.word	0x080085cb
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
      break;
 80084e0:	e083      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	4a43      	ldr	r2, [pc, #268]	@ (80085f4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 80084e6:	601a      	str	r2, [r3, #0]
      break;
 80084e8:	e07f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	4a42      	ldr	r2, [pc, #264]	@ (80085f8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 80084ee:	601a      	str	r2, [r3, #0]
      break;
 80084f0:	e07b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	4a41      	ldr	r2, [pc, #260]	@ (80085fc <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 80084f6:	601a      	str	r2, [r3, #0]
      break;
 80084f8:	e077      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	4a40      	ldr	r2, [pc, #256]	@ (8008600 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 80084fe:	601a      	str	r2, [r3, #0]
      break;
 8008500:	e073      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	4a3f      	ldr	r2, [pc, #252]	@ (8008604 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8008506:	601a      	str	r2, [r3, #0]
      break;
 8008508:	e06f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	4a3e      	ldr	r2, [pc, #248]	@ (8008608 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 800850e:	601a      	str	r2, [r3, #0]
      break;
 8008510:	e06b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	4a3d      	ldr	r2, [pc, #244]	@ (800860c <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8008516:	601a      	str	r2, [r3, #0]
      break;
 8008518:	e067      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	4a3c      	ldr	r2, [pc, #240]	@ (8008610 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 800851e:	601a      	str	r2, [r3, #0]
      break;
 8008520:	e063      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	4a3b      	ldr	r2, [pc, #236]	@ (8008614 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8008526:	601a      	str	r2, [r3, #0]
      break;
 8008528:	e05f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	4a3a      	ldr	r2, [pc, #232]	@ (8008618 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 800852e:	601a      	str	r2, [r3, #0]
      break;
 8008530:	e05b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	4a39      	ldr	r2, [pc, #228]	@ (800861c <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8008536:	601a      	str	r2, [r3, #0]
      break;
 8008538:	e057      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	4a38      	ldr	r2, [pc, #224]	@ (8008620 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 800853e:	601a      	str	r2, [r3, #0]
      break;
 8008540:	e053      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	4a37      	ldr	r2, [pc, #220]	@ (8008624 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8008546:	601a      	str	r2, [r3, #0]
      break;
 8008548:	e04f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	4a36      	ldr	r2, [pc, #216]	@ (8008628 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 800854e:	601a      	str	r2, [r3, #0]
      break;
 8008550:	e04b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	4a35      	ldr	r2, [pc, #212]	@ (800862c <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8008556:	601a      	str	r2, [r3, #0]
      break;
 8008558:	e047      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	4a34      	ldr	r2, [pc, #208]	@ (8008630 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 800855e:	601a      	str	r2, [r3, #0]
      break;
 8008560:	e043      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	4a33      	ldr	r2, [pc, #204]	@ (8008634 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8008566:	601a      	str	r2, [r3, #0]
      break;
 8008568:	e03f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	4a32      	ldr	r2, [pc, #200]	@ (8008638 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 800856e:	601a      	str	r2, [r3, #0]
      break;
 8008570:	e03b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	4a31      	ldr	r2, [pc, #196]	@ (800863c <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8008576:	601a      	str	r2, [r3, #0]
      break;
 8008578:	e037      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	4a30      	ldr	r2, [pc, #192]	@ (8008640 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 800857e:	601a      	str	r2, [r3, #0]
      break;
 8008580:	e033      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	4a2f      	ldr	r2, [pc, #188]	@ (8008644 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8008586:	601a      	str	r2, [r3, #0]
      break;
 8008588:	e02f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	4a2e      	ldr	r2, [pc, #184]	@ (8008648 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 800858e:	601a      	str	r2, [r3, #0]
      break;
 8008590:	e02b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	4a2d      	ldr	r2, [pc, #180]	@ (800864c <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8008596:	601a      	str	r2, [r3, #0]
      break;
 8008598:	e027      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	4a2c      	ldr	r2, [pc, #176]	@ (8008650 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 800859e:	601a      	str	r2, [r3, #0]
      break;
 80085a0:	e023      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008654 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 80085a6:	601a      	str	r2, [r3, #0]
      break;
 80085a8:	e01f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008658 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 80085ae:	601a      	str	r2, [r3, #0]
      break;
 80085b0:	e01b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	4a29      	ldr	r2, [pc, #164]	@ (800865c <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 80085b6:	601a      	str	r2, [r3, #0]
      break;
 80085b8:	e017      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	4a28      	ldr	r2, [pc, #160]	@ (8008660 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 80085be:	601a      	str	r2, [r3, #0]
      break;
 80085c0:	e013      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	4a27      	ldr	r2, [pc, #156]	@ (8008664 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 80085c6:	601a      	str	r2, [r3, #0]
      break;
 80085c8:	e00f      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	4a26      	ldr	r2, [pc, #152]	@ (8008668 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 80085ce:	601a      	str	r2, [r3, #0]
      break;
 80085d0:	e00b      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	4a25      	ldr	r2, [pc, #148]	@ (800866c <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 80085d6:	601a      	str	r2, [r3, #0]
      break;
 80085d8:	e007      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	4a24      	ldr	r2, [pc, #144]	@ (8008670 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 80085de:	601a      	str	r2, [r3, #0]
      break;
 80085e0:	e003      	b.n	80085ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295
 80085e6:	60fb      	str	r3, [r7, #12]
      break;
 80085e8:	bf00      	nop
  }

  return ret;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	3ff00000 	.word	0x3ff00000
 80085f8:	40f00000 	.word	0x40f00000
 80085fc:	41480000 	.word	0x41480000
 8008600:	41700000 	.word	0x41700000
 8008604:	417a0000 	.word	0x417a0000
 8008608:	41c80000 	.word	0x41c80000
 800860c:	41f00000 	.word	0x41f00000
 8008610:	41fa0000 	.word	0x41fa0000
 8008614:	42480000 	.word	0x42480000
 8008618:	42700000 	.word	0x42700000
 800861c:	427a0000 	.word	0x427a0000
 8008620:	42c80000 	.word	0x42c80000
 8008624:	42f00000 	.word	0x42f00000
 8008628:	42fa0000 	.word	0x42fa0000
 800862c:	43480000 	.word	0x43480000
 8008630:	43700000 	.word	0x43700000
 8008634:	437a0000 	.word	0x437a0000
 8008638:	43c80000 	.word	0x43c80000
 800863c:	43f00000 	.word	0x43f00000
 8008640:	43fa0000 	.word	0x43fa0000
 8008644:	44480000 	.word	0x44480000
 8008648:	44700000 	.word	0x44700000
 800864c:	447a0000 	.word	0x447a0000
 8008650:	44c80000 	.word	0x44c80000
 8008654:	44f00000 	.word	0x44f00000
 8008658:	44fa0000 	.word	0x44fa0000
 800865c:	45480000 	.word	0x45480000
 8008660:	45700000 	.word	0x45700000
 8008664:	457a0000 	.word	0x457a0000
 8008668:	45c80000 	.word	0x45c80000
 800866c:	45f00000 	.word	0x45f00000
 8008670:	45fa0000 	.word	0x45fa0000

08008674 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008686:	2b01      	cmp	r3, #1
 8008688:	d106      	bne.n	8008698 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800868a:	ed97 0a00 	vldr	s0, [r7]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa94 	bl	8008bbc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008694:	4603      	mov	r3, r0
 8008696:	e005      	b.n	80086a4 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008698:	ed97 0a00 	vldr	s0, [r7]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fb23 	bl	8008ce8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 80086a2:	4603      	mov	r3, r0
  }
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3320      	adds	r3, #32
 80086be:	f107 020b 	add.w	r2, r7, #11
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 ff85 	bl	80095d4 <lsm6dsv16x_gy_full_scale_get>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295
 80086d4:	e041      	b.n	800875a <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	2b0c      	cmp	r3, #12
 80086da:	d839      	bhi.n	8008750 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 80086dc:	a201      	add	r2, pc, #4	@ (adr r2, 80086e4 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008719 	.word	0x08008719
 80086e8:	08008721 	.word	0x08008721
 80086ec:	08008729 	.word	0x08008729
 80086f0:	08008733 	.word	0x08008733
 80086f4:	0800873d 	.word	0x0800873d
 80086f8:	08008751 	.word	0x08008751
 80086fc:	08008751 	.word	0x08008751
 8008700:	08008751 	.word	0x08008751
 8008704:	08008751 	.word	0x08008751
 8008708:	08008751 	.word	0x08008751
 800870c:	08008751 	.word	0x08008751
 8008710:	08008751 	.word	0x08008751
 8008714:	08008747 	.word	0x08008747
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	227d      	movs	r2, #125	@ 0x7d
 800871c:	601a      	str	r2, [r3, #0]
      break;
 800871e:	e01b      	b.n	8008758 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	22fa      	movs	r2, #250	@ 0xfa
 8008724:	601a      	str	r2, [r3, #0]
      break;
 8008726:	e017      	b.n	8008758 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800872e:	601a      	str	r2, [r3, #0]
      break;
 8008730:	e012      	b.n	8008758 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008738:	601a      	str	r2, [r3, #0]
      break;
 800873a:	e00d      	b.n	8008758 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008742:	601a      	str	r2, [r3, #0]
      break;
 8008744:	e008      	b.n	8008758 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800874c:	601a      	str	r2, [r3, #0]
      break;
 800874e:	e003      	b.n	8008758 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	60fb      	str	r3, [r7, #12]
      break;
 8008756:	bf00      	nop
  }

  return ret;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b7d      	cmp	r3, #125	@ 0x7d
 8008772:	dd18      	ble.n	80087a6 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2bfa      	cmp	r3, #250	@ 0xfa
 8008778:	dd13      	ble.n	80087a2 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008780:	dd0d      	ble.n	800879e <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008788:	dd07      	ble.n	800879a <LSM6DSV16X_GYRO_SetFullScale+0x36>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008790:	dc01      	bgt.n	8008796 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008792:	2304      	movs	r3, #4
 8008794:	e008      	b.n	80087a8 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008796:	230c      	movs	r3, #12
 8008798:	e006      	b.n	80087a8 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800879a:	2303      	movs	r3, #3
 800879c:	e004      	b.n	80087a8 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800879e:	2302      	movs	r3, #2
 80087a0:	e002      	b.n	80087a8 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80087a6:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 80087a8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3320      	adds	r3, #32
 80087ae:	7bfa      	ldrb	r2, [r7, #15]
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fee8 	bl	8009588 <lsm6dsv16x_gy_full_scale_set>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 80087be:	f04f 33ff 	mov.w	r3, #4294967295
 80087c2:	e000      	b.n	80087c6 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3320      	adds	r3, #32
 80087dc:	f107 0208 	add.w	r2, r7, #8
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 ffb2 	bl	800974c <lsm6dsv16x_angular_rate_raw_get>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
 80087f2:	e00c      	b.n	800880e <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80087f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80087fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008804:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3320      	adds	r3, #32
 800882a:	f107 0210 	add.w	r2, r7, #16
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f000 ff8b 	bl	800974c <lsm6dsv16x_angular_rate_raw_get>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800883c:	f04f 33ff 	mov.w	r3, #4294967295
 8008840:	e03c      	b.n	80088bc <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008842:	f107 030c 	add.w	r3, r7, #12
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fd6b 	bl	8008324 <LSM6DSV16X_GYRO_GetSensitivity>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008854:	f04f 33ff 	mov.w	r3, #4294967295
 8008858:	e030      	b.n	80088bc <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800885a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008866:	edd7 7a03 	vldr	s15, [r7, #12]
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008872:	ee17 2a90 	vmov	r2, s15
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800887a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008886:	edd7 7a03 	vldr	s15, [r7, #12]
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008892:	ee17 2a90 	vmov	r2, s15
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800889a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088b2:	ee17 2a90 	vmov	r2, s15
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
 80088d0:	4613      	mov	r3, r2
 80088d2:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f103 0020 	add.w	r0, r3, #32
 80088da:	1cba      	adds	r2, r7, #2
 80088dc:	78f9      	ldrb	r1, [r7, #3]
 80088de:	2301      	movs	r3, #1
 80088e0:	f000 fae4 	bl	8008eac <lsm6dsv16x_write_reg>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80088ea:	f04f 33ff 	mov.w	r3, #4294967295
 80088ee:	e000      	b.n	80088f2 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d006      	beq.n	800891e <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	2b02      	cmp	r3, #2
 8008914:	d101      	bne.n	800891a <LSM6DSV16X_Set_Mem_Bank+0x20>
 8008916:	2302      	movs	r3, #2
 8008918:	e002      	b.n	8008920 <LSM6DSV16X_Set_Mem_Bank+0x26>
 800891a:	2300      	movs	r3, #0
 800891c:	e000      	b.n	8008920 <LSM6DSV16X_Set_Mem_Bank+0x26>
 800891e:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008920:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3320      	adds	r3, #32
 8008926:	7afa      	ldrb	r2, [r7, #11]
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fadc 	bl	8008ee8 <lsm6dsv16x_mem_bank_set>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8008936:	f04f 33ff 	mov.w	r3, #4294967295
 800893a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800893c:	68fb      	ldr	r3, [r7, #12]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008954:	edd7 7a00 	vldr	s15, [r7]
 8008958:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 800895c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008964:	d801      	bhi.n	800896a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008966:	2301      	movs	r3, #1
 8008968:	e06e      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800896a:	edd7 7a00 	vldr	s15, [r7]
 800896e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897a:	d801      	bhi.n	8008980 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 800897c:	2302      	movs	r3, #2
 800897e:	e063      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008980:	edd7 7a00 	vldr	s15, [r7]
 8008984:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008990:	d801      	bhi.n	8008996 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008992:	2303      	movs	r3, #3
 8008994:	e058      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008996:	edd7 7a00 	vldr	s15, [r7]
 800899a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800899e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d801      	bhi.n	80089ac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 80089a8:	2304      	movs	r3, #4
 80089aa:	e04d      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80089ac:	edd7 7a00 	vldr	s15, [r7]
 80089b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008a70 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 80089b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	d801      	bhi.n	80089c2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80089be:	2305      	movs	r3, #5
 80089c0:	e042      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80089c2:	edd7 7a00 	vldr	s15, [r7]
 80089c6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008a74 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80089ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d2:	d801      	bhi.n	80089d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 80089d4:	2306      	movs	r3, #6
 80089d6:	e037      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80089d8:	edd7 7a00 	vldr	s15, [r7]
 80089dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008a78 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 80089e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e8:	d801      	bhi.n	80089ee <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80089ea:	2307      	movs	r3, #7
 80089ec:	e02c      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80089ee:	edd7 7a00 	vldr	s15, [r7]
 80089f2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008a7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 80089f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	d801      	bhi.n	8008a04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008a00:	2308      	movs	r3, #8
 8008a02:	e021      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008a04:	edd7 7a00 	vldr	s15, [r7]
 8008a08:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008a80 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a14:	d801      	bhi.n	8008a1a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008a16:	2309      	movs	r3, #9
 8008a18:	e016      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008a1a:	edd7 7a00 	vldr	s15, [r7]
 8008a1e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008a84 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2a:	d801      	bhi.n	8008a30 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008a2c:	230a      	movs	r3, #10
 8008a2e:	e00b      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008a30:	edd7 7a00 	vldr	s15, [r7]
 8008a34:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008a88 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8008a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a40:	d801      	bhi.n	8008a46 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008a42:	230b      	movs	r3, #11
 8008a44:	e000      	b.n	8008a48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008a46:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008a48:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3320      	adds	r3, #32
 8008a4e:	7bfa      	ldrb	r2, [r7, #15]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fa8a 	bl	8008f6c <lsm6dsv16x_xl_data_rate_set>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a62:	e000      	b.n	8008a66 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	42700000 	.word	0x42700000
 8008a74:	42f00000 	.word	0x42f00000
 8008a78:	43700000 	.word	0x43700000
 8008a7c:	43f00000 	.word	0x43f00000
 8008a80:	44700000 	.word	0x44700000
 8008a84:	44f00000 	.word	0x44f00000
 8008a88:	45700000 	.word	0x45700000

08008a8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008a98:	edd7 7a00 	vldr	s15, [r7]
 8008a9c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa8:	d801      	bhi.n	8008aae <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e06e      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008aae:	edd7 7a00 	vldr	s15, [r7]
 8008ab2:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008abe:	d801      	bhi.n	8008ac4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e063      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ac4:	edd7 7a00 	vldr	s15, [r7]
 8008ac8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad4:	d801      	bhi.n	8008ada <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e058      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ada:	edd7 7a00 	vldr	s15, [r7]
 8008ade:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	d801      	bhi.n	8008af0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008aec:	2304      	movs	r3, #4
 8008aee:	e04d      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008af0:	edd7 7a00 	vldr	s15, [r7]
 8008af4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008ba0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b00:	d801      	bhi.n	8008b06 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008b02:	2305      	movs	r3, #5
 8008b04:	e042      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b06:	edd7 7a00 	vldr	s15, [r7]
 8008b0a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008ba4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b16:	d801      	bhi.n	8008b1c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008b18:	2306      	movs	r3, #6
 8008b1a:	e037      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b1c:	edd7 7a00 	vldr	s15, [r7]
 8008b20:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008ba8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2c:	d801      	bhi.n	8008b32 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008b2e:	2307      	movs	r3, #7
 8008b30:	e02c      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b32:	edd7 7a00 	vldr	s15, [r7]
 8008b36:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008bac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8008b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b42:	d801      	bhi.n	8008b48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008b44:	2308      	movs	r3, #8
 8008b46:	e021      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b48:	edd7 7a00 	vldr	s15, [r7]
 8008b4c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008bb0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8008b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b58:	d801      	bhi.n	8008b5e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008b5a:	2309      	movs	r3, #9
 8008b5c:	e016      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b5e:	edd7 7a00 	vldr	s15, [r7]
 8008b62:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008bb4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8008b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6e:	d801      	bhi.n	8008b74 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008b70:	230a      	movs	r3, #10
 8008b72:	e00b      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b74:	edd7 7a00 	vldr	s15, [r7]
 8008b78:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008bb8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8008b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b84:	d801      	bhi.n	8008b8a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8008b86:	230b      	movs	r3, #11
 8008b88:	e000      	b.n	8008b8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008b8a:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	42700000 	.word	0x42700000
 8008ba4:	42f00000 	.word	0x42f00000
 8008ba8:	43700000 	.word	0x43700000
 8008bac:	43f00000 	.word	0x43f00000
 8008bb0:	44700000 	.word	0x44700000
 8008bb4:	44f00000 	.word	0x44f00000
 8008bb8:	45700000 	.word	0x45700000

08008bbc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8008bc8:	edd7 7a00 	vldr	s15, [r7]
 8008bcc:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd8:	d801      	bhi.n	8008bde <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e063      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008bde:	edd7 7a00 	vldr	s15, [r7]
 8008be2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	d801      	bhi.n	8008bf4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e058      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008bf4:	edd7 7a00 	vldr	s15, [r7]
 8008bf8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	d801      	bhi.n	8008c0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8008c06:	2304      	movs	r3, #4
 8008c08:	e04d      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c0a:	edd7 7a00 	vldr	s15, [r7]
 8008c0e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008ccc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1a:	d801      	bhi.n	8008c20 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008c1c:	2305      	movs	r3, #5
 8008c1e:	e042      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c20:	edd7 7a00 	vldr	s15, [r7]
 8008c24:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008cd0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8008c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c30:	d801      	bhi.n	8008c36 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008c32:	2306      	movs	r3, #6
 8008c34:	e037      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c36:	edd7 7a00 	vldr	s15, [r7]
 8008c3a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008cd4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8008c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c46:	d801      	bhi.n	8008c4c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008c48:	2307      	movs	r3, #7
 8008c4a:	e02c      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c4c:	edd7 7a00 	vldr	s15, [r7]
 8008c50:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008cd8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8008c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5c:	d801      	bhi.n	8008c62 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8008c5e:	2308      	movs	r3, #8
 8008c60:	e021      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c62:	edd7 7a00 	vldr	s15, [r7]
 8008c66:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008cdc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 8008c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c72:	d801      	bhi.n	8008c78 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8008c74:	2309      	movs	r3, #9
 8008c76:	e016      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c78:	edd7 7a00 	vldr	s15, [r7]
 8008c7c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008ce0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8008c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c88:	d801      	bhi.n	8008c8e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8008c8a:	230a      	movs	r3, #10
 8008c8c:	e00b      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008c8e:	edd7 7a00 	vldr	s15, [r7]
 8008c92:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008ce4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 8008c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9e:	d801      	bhi.n	8008ca4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8008ca0:	230b      	movs	r3, #11
 8008ca2:	e000      	b.n	8008ca6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008ca4:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008ca6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3320      	adds	r3, #32
 8008cac:	7bfa      	ldrb	r2, [r7, #15]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fabd 	bl	8009230 <lsm6dsv16x_gy_data_rate_set>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8008cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc0:	e000      	b.n	8008cc4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	42700000 	.word	0x42700000
 8008cd0:	42f00000 	.word	0x42f00000
 8008cd4:	43700000 	.word	0x43700000
 8008cd8:	43f00000 	.word	0x43f00000
 8008cdc:	44700000 	.word	0x44700000
 8008ce0:	44f00000 	.word	0x44f00000
 8008ce4:	45700000 	.word	0x45700000

08008ce8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8008cf4:	edd7 7a00 	vldr	s15, [r7]
 8008cf8:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d04:	d801      	bhi.n	8008d0a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e063      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d0a:	edd7 7a00 	vldr	s15, [r7]
 8008d0e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1a:	d801      	bhi.n	8008d20 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e058      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d20:	edd7 7a00 	vldr	s15, [r7]
 8008d24:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	d801      	bhi.n	8008d36 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8008d32:	2304      	movs	r3, #4
 8008d34:	e04d      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d36:	edd7 7a00 	vldr	s15, [r7]
 8008d3a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008de8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8008d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d46:	d801      	bhi.n	8008d4c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8008d48:	2305      	movs	r3, #5
 8008d4a:	e042      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d4c:	edd7 7a00 	vldr	s15, [r7]
 8008d50:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008dec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8008d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5c:	d801      	bhi.n	8008d62 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8008d5e:	2306      	movs	r3, #6
 8008d60:	e037      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d62:	edd7 7a00 	vldr	s15, [r7]
 8008d66:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008df0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 8008d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d72:	d801      	bhi.n	8008d78 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8008d74:	2307      	movs	r3, #7
 8008d76:	e02c      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d78:	edd7 7a00 	vldr	s15, [r7]
 8008d7c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008df4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8008d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d88:	d801      	bhi.n	8008d8e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	e021      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008d8e:	edd7 7a00 	vldr	s15, [r7]
 8008d92:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008df8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 8008d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9e:	d801      	bhi.n	8008da4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8008da0:	2309      	movs	r3, #9
 8008da2:	e016      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008da4:	edd7 7a00 	vldr	s15, [r7]
 8008da8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008dfc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8008dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db4:	d801      	bhi.n	8008dba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8008db6:	230a      	movs	r3, #10
 8008db8:	e00b      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008dba:	edd7 7a00 	vldr	s15, [r7]
 8008dbe:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8008e00 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8008dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dca:	d801      	bhi.n	8008dd0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8008dcc:	230b      	movs	r3, #11
 8008dce:	e000      	b.n	8008dd2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008dd0:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	42700000 	.word	0x42700000
 8008dec:	42f00000 	.word	0x42f00000
 8008df0:	43700000 	.word	0x43700000
 8008df4:	43f00000 	.word	0x43f00000
 8008df8:	44700000 	.word	0x44700000
 8008dfc:	44f00000 	.word	0x44f00000
 8008e00:	45700000 	.word	0x45700000

08008e04 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	460b      	mov	r3, r1
 8008e12:	72fb      	strb	r3, [r7, #11]
 8008e14:	4613      	mov	r3, r2
 8008e16:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	695c      	ldr	r4, [r3, #20]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	7b1b      	ldrb	r3, [r3, #12]
 8008e24:	4618      	mov	r0, r3
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	b299      	uxth	r1, r3
 8008e2a:	893b      	ldrh	r3, [r7, #8]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	47a0      	blx	r4
 8008e30:	4603      	mov	r3, r0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd90      	pop	{r4, r7, pc}

08008e3a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008e3a:	b590      	push	{r4, r7, lr}
 8008e3c:	b087      	sub	sp, #28
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	461a      	mov	r2, r3
 8008e46:	460b      	mov	r3, r1
 8008e48:	72fb      	strb	r3, [r7, #11]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	691c      	ldr	r4, [r3, #16]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	7b1b      	ldrb	r3, [r3, #12]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	7afb      	ldrb	r3, [r7, #11]
 8008e5e:	b299      	uxth	r1, r3
 8008e60:	893b      	ldrh	r3, [r7, #8]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	47a0      	blx	r4
 8008e66:	4603      	mov	r3, r0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd90      	pop	{r4, r7, pc}

08008e70 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8008e70:	b590      	push	{r4, r7, lr}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	72fb      	strb	r3, [r7, #11]
 8008e80:	4613      	mov	r3, r2
 8008e82:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 8008e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8e:	e009      	b.n	8008ea4 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685c      	ldr	r4, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68d8      	ldr	r0, [r3, #12]
 8008e98:	893b      	ldrh	r3, [r7, #8]
 8008e9a:	7af9      	ldrb	r1, [r7, #11]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	47a0      	blx	r4
 8008ea0:	6178      	str	r0, [r7, #20]

  return ret;
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd90      	pop	{r4, r7, pc}

08008eac <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	460b      	mov	r3, r1
 8008eba:	72fb      	strb	r3, [r7, #11]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 8008ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eca:	e009      	b.n	8008ee0 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681c      	ldr	r4, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68d8      	ldr	r0, [r3, #12]
 8008ed4:	893b      	ldrh	r3, [r7, #8]
 8008ed6:	7af9      	ldrb	r1, [r7, #11]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	47a0      	blx	r4
 8008edc:	6178      	str	r0, [r7, #20]

  return ret;
 8008ede:	697b      	ldr	r3, [r7, #20]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd90      	pop	{r4, r7, pc}

08008ee8 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8008ef4:	f107 0208 	add.w	r2, r7, #8
 8008ef8:	2301      	movs	r3, #1
 8008efa:	2101      	movs	r1, #1
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ffb7 	bl	8008e70 <lsm6dsv16x_read_reg>
 8008f02:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	e019      	b.n	8008f42 <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	085b      	lsrs	r3, r3, #1
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	7a3b      	ldrb	r3, [r7, #8]
 8008f1a:	f362 1386 	bfi	r3, r2, #6, #1
 8008f1e:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	7a3b      	ldrb	r3, [r7, #8]
 8008f2a:	f362 13c7 	bfi	r3, r2, #7, #1
 8008f2e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8008f30:	f107 0208 	add.w	r2, r7, #8
 8008f34:	2301      	movs	r3, #1
 8008f36:	2101      	movs	r1, #1
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff ffb7 	bl	8008eac <lsm6dsv16x_write_reg>
 8008f3e:	60f8      	str	r0, [r7, #12]

  return ret;
 8008f40:	68fb      	ldr	r3, [r7, #12]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8008f54:	2301      	movs	r3, #1
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	210f      	movs	r1, #15
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ff88 	bl	8008e70 <lsm6dsv16x_read_reg>
 8008f60:	60f8      	str	r0, [r7, #12]

  return ret;
 8008f62:	68fb      	ldr	r3, [r7, #12]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8008f78:	f107 0210 	add.w	r2, r7, #16
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	2110      	movs	r1, #16
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff ff75 	bl	8008e70 <lsm6dsv16x_read_reg>
 8008f86:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	e039      	b.n	8009006 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	7c3b      	ldrb	r3, [r7, #16]
 8008f9c:	f362 0303 	bfi	r3, r2, #0, #4
 8008fa0:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8008fa2:	f107 0210 	add.w	r2, r7, #16
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	2110      	movs	r1, #16
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff ff7e 	bl	8008eac <lsm6dsv16x_write_reg>
 8008fb0:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	e024      	b.n	8009006 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	091b      	lsrs	r3, r3, #4
 8008fc0:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8008fc2:	7cfb      	ldrb	r3, [r7, #19]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01d      	beq.n	8009004 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008fc8:	f107 020c 	add.w	r2, r7, #12
 8008fcc:	2301      	movs	r3, #1
 8008fce:	2162      	movs	r1, #98	@ 0x62
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff ff4d 	bl	8008e70 <lsm6dsv16x_read_reg>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	4413      	add	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8008fde:	7cfb      	ldrb	r3, [r7, #19]
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	7b3b      	ldrb	r3, [r7, #12]
 8008fe8:	f362 0301 	bfi	r3, r2, #0, #2
 8008fec:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008fee:	f107 020c 	add.w	r2, r7, #12
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	2162      	movs	r1, #98	@ 0x62
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff ff58 	bl	8008eac <lsm6dsv16x_write_reg>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	4413      	add	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009004:	697b      	ldr	r3, [r7, #20]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800901a:	f107 0210 	add.w	r2, r7, #16
 800901e:	2301      	movs	r3, #1
 8009020:	2110      	movs	r1, #16
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff ff24 	bl	8008e70 <lsm6dsv16x_read_reg>
 8009028:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800902a:	f107 020c 	add.w	r2, r7, #12
 800902e:	2301      	movs	r3, #1
 8009030:	2162      	movs	r1, #98	@ 0x62
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff ff1c 	bl	8008e70 <lsm6dsv16x_read_reg>
 8009038:	4602      	mov	r2, r0
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	4413      	add	r3, r2
 800903e:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	e0ed      	b.n	8009226 <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 800904a:	7b3b      	ldrb	r3, [r7, #12]
 800904c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009050:	b2db      	uxtb	r3, r3
 8009052:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 8009054:	7c3b      	ldrb	r3, [r7, #16]
 8009056:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b0c      	cmp	r3, #12
 800905e:	f200 80dd 	bhi.w	800921c <lsm6dsv16x_xl_data_rate_get+0x20c>
 8009062:	a201      	add	r2, pc, #4	@ (adr r2, 8009068 <lsm6dsv16x_xl_data_rate_get+0x58>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	0800909d 	.word	0x0800909d
 800906c:	080090a5 	.word	0x080090a5
 8009070:	080090ad 	.word	0x080090ad
 8009074:	080090b5 	.word	0x080090b5
 8009078:	080090d9 	.word	0x080090d9
 800907c:	080090fd 	.word	0x080090fd
 8009080:	08009121 	.word	0x08009121
 8009084:	08009145 	.word	0x08009145
 8009088:	08009169 	.word	0x08009169
 800908c:	0800918d 	.word	0x0800918d
 8009090:	080091b1 	.word	0x080091b1
 8009094:	080091d5 	.word	0x080091d5
 8009098:	080091f9 	.word	0x080091f9
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	701a      	strb	r2, [r3, #0]
      break;
 80090a2:	e0bf      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2201      	movs	r2, #1
 80090a8:	701a      	strb	r2, [r3, #0]
      break;
 80090aa:	e0bb      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2202      	movs	r2, #2
 80090b0:	701a      	strb	r2, [r3, #0]
      break;
 80090b2:	e0b7      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80090b4:	7cfb      	ldrb	r3, [r7, #19]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d005      	beq.n	80090c6 <lsm6dsv16x_xl_data_rate_get+0xb6>
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d007      	beq.n	80090ce <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2203      	movs	r2, #3
 80090c2:	701a      	strb	r2, [r3, #0]
          break;
 80090c4:	e007      	b.n	80090d6 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2213      	movs	r2, #19
 80090ca:	701a      	strb	r2, [r3, #0]
          break;
 80090cc:	e003      	b.n	80090d6 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2223      	movs	r2, #35	@ 0x23
 80090d2:	701a      	strb	r2, [r3, #0]
          break;
 80090d4:	bf00      	nop
      }
      break;
 80090d6:	e0a5      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 80090d8:	7cfb      	ldrb	r3, [r7, #19]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d005      	beq.n	80090ea <lsm6dsv16x_xl_data_rate_get+0xda>
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d007      	beq.n	80090f2 <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2204      	movs	r2, #4
 80090e6:	701a      	strb	r2, [r3, #0]
          break;
 80090e8:	e007      	b.n	80090fa <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2214      	movs	r2, #20
 80090ee:	701a      	strb	r2, [r3, #0]
          break;
 80090f0:	e003      	b.n	80090fa <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2224      	movs	r2, #36	@ 0x24
 80090f6:	701a      	strb	r2, [r3, #0]
          break;
 80090f8:	bf00      	nop
      }
      break;
 80090fa:	e093      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d005      	beq.n	800910e <lsm6dsv16x_xl_data_rate_get+0xfe>
 8009102:	2b02      	cmp	r3, #2
 8009104:	d007      	beq.n	8009116 <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2205      	movs	r2, #5
 800910a:	701a      	strb	r2, [r3, #0]
          break;
 800910c:	e007      	b.n	800911e <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2215      	movs	r2, #21
 8009112:	701a      	strb	r2, [r3, #0]
          break;
 8009114:	e003      	b.n	800911e <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2225      	movs	r2, #37	@ 0x25
 800911a:	701a      	strb	r2, [r3, #0]
          break;
 800911c:	bf00      	nop
      }
      break;
 800911e:	e081      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009120:	7cfb      	ldrb	r3, [r7, #19]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d005      	beq.n	8009132 <lsm6dsv16x_xl_data_rate_get+0x122>
 8009126:	2b02      	cmp	r3, #2
 8009128:	d007      	beq.n	800913a <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2206      	movs	r2, #6
 800912e:	701a      	strb	r2, [r3, #0]
          break;
 8009130:	e007      	b.n	8009142 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2216      	movs	r2, #22
 8009136:	701a      	strb	r2, [r3, #0]
          break;
 8009138:	e003      	b.n	8009142 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2226      	movs	r2, #38	@ 0x26
 800913e:	701a      	strb	r2, [r3, #0]
          break;
 8009140:	bf00      	nop
      }
      break;
 8009142:	e06f      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009144:	7cfb      	ldrb	r3, [r7, #19]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d005      	beq.n	8009156 <lsm6dsv16x_xl_data_rate_get+0x146>
 800914a:	2b02      	cmp	r3, #2
 800914c:	d007      	beq.n	800915e <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2207      	movs	r2, #7
 8009152:	701a      	strb	r2, [r3, #0]
          break;
 8009154:	e007      	b.n	8009166 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2217      	movs	r2, #23
 800915a:	701a      	strb	r2, [r3, #0]
          break;
 800915c:	e003      	b.n	8009166 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2227      	movs	r2, #39	@ 0x27
 8009162:	701a      	strb	r2, [r3, #0]
          break;
 8009164:	bf00      	nop
      }
      break;
 8009166:	e05d      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009168:	7cfb      	ldrb	r3, [r7, #19]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d005      	beq.n	800917a <lsm6dsv16x_xl_data_rate_get+0x16a>
 800916e:	2b02      	cmp	r3, #2
 8009170:	d007      	beq.n	8009182 <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2208      	movs	r2, #8
 8009176:	701a      	strb	r2, [r3, #0]
          break;
 8009178:	e007      	b.n	800918a <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2218      	movs	r2, #24
 800917e:	701a      	strb	r2, [r3, #0]
          break;
 8009180:	e003      	b.n	800918a <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2228      	movs	r2, #40	@ 0x28
 8009186:	701a      	strb	r2, [r3, #0]
          break;
 8009188:	bf00      	nop
      }
      break;
 800918a:	e04b      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 800918c:	7cfb      	ldrb	r3, [r7, #19]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d005      	beq.n	800919e <lsm6dsv16x_xl_data_rate_get+0x18e>
 8009192:	2b02      	cmp	r3, #2
 8009194:	d007      	beq.n	80091a6 <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2209      	movs	r2, #9
 800919a:	701a      	strb	r2, [r3, #0]
          break;
 800919c:	e007      	b.n	80091ae <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2219      	movs	r2, #25
 80091a2:	701a      	strb	r2, [r3, #0]
          break;
 80091a4:	e003      	b.n	80091ae <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2229      	movs	r2, #41	@ 0x29
 80091aa:	701a      	strb	r2, [r3, #0]
          break;
 80091ac:	bf00      	nop
      }
      break;
 80091ae:	e039      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80091b0:	7cfb      	ldrb	r3, [r7, #19]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d005      	beq.n	80091c2 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d007      	beq.n	80091ca <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	220a      	movs	r2, #10
 80091be:	701a      	strb	r2, [r3, #0]
          break;
 80091c0:	e007      	b.n	80091d2 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	221a      	movs	r2, #26
 80091c6:	701a      	strb	r2, [r3, #0]
          break;
 80091c8:	e003      	b.n	80091d2 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	222a      	movs	r2, #42	@ 0x2a
 80091ce:	701a      	strb	r2, [r3, #0]
          break;
 80091d0:	bf00      	nop
      }
      break;
 80091d2:	e027      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 80091d4:	7cfb      	ldrb	r3, [r7, #19]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d005      	beq.n	80091e6 <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d007      	beq.n	80091ee <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	220b      	movs	r2, #11
 80091e2:	701a      	strb	r2, [r3, #0]
          break;
 80091e4:	e007      	b.n	80091f6 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	221b      	movs	r2, #27
 80091ea:	701a      	strb	r2, [r3, #0]
          break;
 80091ec:	e003      	b.n	80091f6 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	222b      	movs	r2, #43	@ 0x2b
 80091f2:	701a      	strb	r2, [r3, #0]
          break;
 80091f4:	bf00      	nop
      }
      break;
 80091f6:	e015      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d005      	beq.n	800920a <lsm6dsv16x_xl_data_rate_get+0x1fa>
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d007      	beq.n	8009212 <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	220c      	movs	r2, #12
 8009206:	701a      	strb	r2, [r3, #0]
          break;
 8009208:	e007      	b.n	800921a <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	221c      	movs	r2, #28
 800920e:	701a      	strb	r2, [r3, #0]
          break;
 8009210:	e003      	b.n	800921a <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	222c      	movs	r2, #44	@ 0x2c
 8009216:	701a      	strb	r2, [r3, #0]
          break;
 8009218:	bf00      	nop
      }
      break;
 800921a:	e003      	b.n	8009224 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
      break;
 8009222:	bf00      	nop
  }

  return ret;
 8009224:	697b      	ldr	r3, [r7, #20]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop

08009230 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800923c:	f107 0210 	add.w	r2, r7, #16
 8009240:	2301      	movs	r3, #1
 8009242:	2111      	movs	r1, #17
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff fe13 	bl	8008e70 <lsm6dsv16x_read_reg>
 800924a:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	b2da      	uxtb	r2, r3
 8009254:	7c3b      	ldrb	r3, [r7, #16]
 8009256:	f362 0303 	bfi	r3, r2, #0, #4
 800925a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800925c:	f107 0210 	add.w	r2, r7, #16
 8009260:	2301      	movs	r3, #1
 8009262:	2111      	movs	r1, #17
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff fe21 	bl	8008eac <lsm6dsv16x_write_reg>
 800926a:	4602      	mov	r2, r0
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	4413      	add	r3, r2
 8009270:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	e024      	b.n	80092c6 <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	091b      	lsrs	r3, r3, #4
 8009280:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8009282:	7cfb      	ldrb	r3, [r7, #19]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01d      	beq.n	80092c4 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009288:	f107 020c 	add.w	r2, r7, #12
 800928c:	2301      	movs	r3, #1
 800928e:	2162      	movs	r1, #98	@ 0x62
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff fded 	bl	8008e70 <lsm6dsv16x_read_reg>
 8009296:	4602      	mov	r2, r0
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	4413      	add	r3, r2
 800929c:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800929e:	7cfb      	ldrb	r3, [r7, #19]
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	7b3b      	ldrb	r3, [r7, #12]
 80092a8:	f362 0301 	bfi	r3, r2, #0, #2
 80092ac:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80092ae:	f107 020c 	add.w	r2, r7, #12
 80092b2:	2301      	movs	r3, #1
 80092b4:	2162      	movs	r1, #98	@ 0x62
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fdf8 	bl	8008eac <lsm6dsv16x_write_reg>
 80092bc:	4602      	mov	r2, r0
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	4413      	add	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80092c4:	697b      	ldr	r3, [r7, #20]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80092da:	f107 0210 	add.w	r2, r7, #16
 80092de:	2301      	movs	r3, #1
 80092e0:	2111      	movs	r1, #17
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fdc4 	bl	8008e70 <lsm6dsv16x_read_reg>
 80092e8:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80092ea:	f107 020c 	add.w	r2, r7, #12
 80092ee:	2301      	movs	r3, #1
 80092f0:	2162      	movs	r1, #98	@ 0x62
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fdbc 	bl	8008e70 <lsm6dsv16x_read_reg>
 80092f8:	4602      	mov	r2, r0
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	4413      	add	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	e0ed      	b.n	80094e6 <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 800930a:	7b3b      	ldrb	r3, [r7, #12]
 800930c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009310:	b2db      	uxtb	r3, r3
 8009312:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 8009314:	7c3b      	ldrb	r3, [r7, #16]
 8009316:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b0c      	cmp	r3, #12
 800931e:	f200 80dd 	bhi.w	80094dc <lsm6dsv16x_gy_data_rate_get+0x20c>
 8009322:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <lsm6dsv16x_gy_data_rate_get+0x58>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	0800935d 	.word	0x0800935d
 800932c:	08009365 	.word	0x08009365
 8009330:	0800936d 	.word	0x0800936d
 8009334:	08009375 	.word	0x08009375
 8009338:	08009399 	.word	0x08009399
 800933c:	080093bd 	.word	0x080093bd
 8009340:	080093e1 	.word	0x080093e1
 8009344:	08009405 	.word	0x08009405
 8009348:	08009429 	.word	0x08009429
 800934c:	0800944d 	.word	0x0800944d
 8009350:	08009471 	.word	0x08009471
 8009354:	08009495 	.word	0x08009495
 8009358:	080094b9 	.word	0x080094b9
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
      break;
 8009362:	e0bf      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2201      	movs	r2, #1
 8009368:	701a      	strb	r2, [r3, #0]
      break;
 800936a:	e0bb      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2202      	movs	r2, #2
 8009370:	701a      	strb	r2, [r3, #0]
      break;
 8009372:	e0b7      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009374:	7cfb      	ldrb	r3, [r7, #19]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d005      	beq.n	8009386 <lsm6dsv16x_gy_data_rate_get+0xb6>
 800937a:	2b02      	cmp	r3, #2
 800937c:	d007      	beq.n	800938e <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2203      	movs	r2, #3
 8009382:	701a      	strb	r2, [r3, #0]
          break;
 8009384:	e007      	b.n	8009396 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2213      	movs	r2, #19
 800938a:	701a      	strb	r2, [r3, #0]
          break;
 800938c:	e003      	b.n	8009396 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2223      	movs	r2, #35	@ 0x23
 8009392:	701a      	strb	r2, [r3, #0]
          break;
 8009394:	bf00      	nop
      }
      break;
 8009396:	e0a5      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009398:	7cfb      	ldrb	r3, [r7, #19]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d005      	beq.n	80093aa <lsm6dsv16x_gy_data_rate_get+0xda>
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d007      	beq.n	80093b2 <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2204      	movs	r2, #4
 80093a6:	701a      	strb	r2, [r3, #0]
          break;
 80093a8:	e007      	b.n	80093ba <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2214      	movs	r2, #20
 80093ae:	701a      	strb	r2, [r3, #0]
          break;
 80093b0:	e003      	b.n	80093ba <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2224      	movs	r2, #36	@ 0x24
 80093b6:	701a      	strb	r2, [r3, #0]
          break;
 80093b8:	bf00      	nop
      }
      break;
 80093ba:	e093      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 80093bc:	7cfb      	ldrb	r3, [r7, #19]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d005      	beq.n	80093ce <lsm6dsv16x_gy_data_rate_get+0xfe>
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d007      	beq.n	80093d6 <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2205      	movs	r2, #5
 80093ca:	701a      	strb	r2, [r3, #0]
          break;
 80093cc:	e007      	b.n	80093de <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2215      	movs	r2, #21
 80093d2:	701a      	strb	r2, [r3, #0]
          break;
 80093d4:	e003      	b.n	80093de <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2225      	movs	r2, #37	@ 0x25
 80093da:	701a      	strb	r2, [r3, #0]
          break;
 80093dc:	bf00      	nop
      }
      break;
 80093de:	e081      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 80093e0:	7cfb      	ldrb	r3, [r7, #19]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d005      	beq.n	80093f2 <lsm6dsv16x_gy_data_rate_get+0x122>
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d007      	beq.n	80093fa <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2206      	movs	r2, #6
 80093ee:	701a      	strb	r2, [r3, #0]
          break;
 80093f0:	e007      	b.n	8009402 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2216      	movs	r2, #22
 80093f6:	701a      	strb	r2, [r3, #0]
          break;
 80093f8:	e003      	b.n	8009402 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2226      	movs	r2, #38	@ 0x26
 80093fe:	701a      	strb	r2, [r3, #0]
          break;
 8009400:	bf00      	nop
      }
      break;
 8009402:	e06f      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009404:	7cfb      	ldrb	r3, [r7, #19]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d005      	beq.n	8009416 <lsm6dsv16x_gy_data_rate_get+0x146>
 800940a:	2b02      	cmp	r3, #2
 800940c:	d007      	beq.n	800941e <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2207      	movs	r2, #7
 8009412:	701a      	strb	r2, [r3, #0]
          break;
 8009414:	e007      	b.n	8009426 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2217      	movs	r2, #23
 800941a:	701a      	strb	r2, [r3, #0]
          break;
 800941c:	e003      	b.n	8009426 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2227      	movs	r2, #39	@ 0x27
 8009422:	701a      	strb	r2, [r3, #0]
          break;
 8009424:	bf00      	nop
      }
      break;
 8009426:	e05d      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009428:	7cfb      	ldrb	r3, [r7, #19]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d005      	beq.n	800943a <lsm6dsv16x_gy_data_rate_get+0x16a>
 800942e:	2b02      	cmp	r3, #2
 8009430:	d007      	beq.n	8009442 <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2208      	movs	r2, #8
 8009436:	701a      	strb	r2, [r3, #0]
          break;
 8009438:	e007      	b.n	800944a <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2218      	movs	r2, #24
 800943e:	701a      	strb	r2, [r3, #0]
          break;
 8009440:	e003      	b.n	800944a <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2228      	movs	r2, #40	@ 0x28
 8009446:	701a      	strb	r2, [r3, #0]
          break;
 8009448:	bf00      	nop
      }
      break;
 800944a:	e04b      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 800944c:	7cfb      	ldrb	r3, [r7, #19]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d005      	beq.n	800945e <lsm6dsv16x_gy_data_rate_get+0x18e>
 8009452:	2b02      	cmp	r3, #2
 8009454:	d007      	beq.n	8009466 <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2209      	movs	r2, #9
 800945a:	701a      	strb	r2, [r3, #0]
          break;
 800945c:	e007      	b.n	800946e <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2219      	movs	r2, #25
 8009462:	701a      	strb	r2, [r3, #0]
          break;
 8009464:	e003      	b.n	800946e <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2229      	movs	r2, #41	@ 0x29
 800946a:	701a      	strb	r2, [r3, #0]
          break;
 800946c:	bf00      	nop
      }
      break;
 800946e:	e039      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8009470:	7cfb      	ldrb	r3, [r7, #19]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d005      	beq.n	8009482 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8009476:	2b02      	cmp	r3, #2
 8009478:	d007      	beq.n	800948a <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	220a      	movs	r2, #10
 800947e:	701a      	strb	r2, [r3, #0]
          break;
 8009480:	e007      	b.n	8009492 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	221a      	movs	r2, #26
 8009486:	701a      	strb	r2, [r3, #0]
          break;
 8009488:	e003      	b.n	8009492 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	222a      	movs	r2, #42	@ 0x2a
 800948e:	701a      	strb	r2, [r3, #0]
          break;
 8009490:	bf00      	nop
      }
      break;
 8009492:	e027      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009494:	7cfb      	ldrb	r3, [r7, #19]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d005      	beq.n	80094a6 <lsm6dsv16x_gy_data_rate_get+0x1d6>
 800949a:	2b02      	cmp	r3, #2
 800949c:	d007      	beq.n	80094ae <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	220b      	movs	r2, #11
 80094a2:	701a      	strb	r2, [r3, #0]
          break;
 80094a4:	e007      	b.n	80094b6 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	221b      	movs	r2, #27
 80094aa:	701a      	strb	r2, [r3, #0]
          break;
 80094ac:	e003      	b.n	80094b6 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	222b      	movs	r2, #43	@ 0x2b
 80094b2:	701a      	strb	r2, [r3, #0]
          break;
 80094b4:	bf00      	nop
      }
      break;
 80094b6:	e015      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80094b8:	7cfb      	ldrb	r3, [r7, #19]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d005      	beq.n	80094ca <lsm6dsv16x_gy_data_rate_get+0x1fa>
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d007      	beq.n	80094d2 <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	220c      	movs	r2, #12
 80094c6:	701a      	strb	r2, [r3, #0]
          break;
 80094c8:	e007      	b.n	80094da <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	221c      	movs	r2, #28
 80094ce:	701a      	strb	r2, [r3, #0]
          break;
 80094d0:	e003      	b.n	80094da <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	222c      	movs	r2, #44	@ 0x2c
 80094d6:	701a      	strb	r2, [r3, #0]
          break;
 80094d8:	bf00      	nop
      }
      break;
 80094da:	e003      	b.n	80094e4 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
      break;
 80094e2:	bf00      	nop
  }

  return ret;
 80094e4:	697b      	ldr	r3, [r7, #20]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop

080094f0 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80094fc:	f107 0208 	add.w	r2, r7, #8
 8009500:	2301      	movs	r3, #1
 8009502:	2112      	movs	r1, #18
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fcb3 	bl	8008e70 <lsm6dsv16x_read_reg>
 800950a:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10f      	bne.n	8009532 <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	b2da      	uxtb	r2, r3
 800951a:	7a3b      	ldrb	r3, [r7, #8]
 800951c:	f362 0382 	bfi	r3, r2, #2, #1
 8009520:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009522:	f107 0208 	add.w	r2, r7, #8
 8009526:	2301      	movs	r3, #1
 8009528:	2112      	movs	r1, #18
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff fcbe 	bl	8008eac <lsm6dsv16x_write_reg>
 8009530:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009532:	68fb      	ldr	r3, [r7, #12]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009548:	f107 0208 	add.w	r2, r7, #8
 800954c:	2301      	movs	r3, #1
 800954e:	2112      	movs	r1, #18
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fc8d 	bl	8008e70 <lsm6dsv16x_read_reg>
 8009556:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10f      	bne.n	800957e <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	b2da      	uxtb	r2, r3
 8009566:	7a3b      	ldrb	r3, [r7, #8]
 8009568:	f362 1386 	bfi	r3, r2, #6, #1
 800956c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800956e:	f107 0208 	add.w	r2, r7, #8
 8009572:	2301      	movs	r3, #1
 8009574:	2112      	movs	r1, #18
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff fc98 	bl	8008eac <lsm6dsv16x_write_reg>
 800957c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800957e:	68fb      	ldr	r3, [r7, #12]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009594:	f107 0208 	add.w	r2, r7, #8
 8009598:	2301      	movs	r3, #1
 800959a:	2115      	movs	r1, #21
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff fc67 	bl	8008e70 <lsm6dsv16x_read_reg>
 80095a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10f      	bne.n	80095ca <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	7a3b      	ldrb	r3, [r7, #8]
 80095b4:	f362 0303 	bfi	r3, r2, #0, #4
 80095b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80095ba:	f107 0208 	add.w	r2, r7, #8
 80095be:	2301      	movs	r3, #1
 80095c0:	2115      	movs	r1, #21
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff fc72 	bl	8008eac <lsm6dsv16x_write_reg>
 80095c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80095ca:	68fb      	ldr	r3, [r7, #12]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80095de:	f107 0208 	add.w	r2, r7, #8
 80095e2:	2301      	movs	r3, #1
 80095e4:	2115      	movs	r1, #21
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff fc42 	bl	8008e70 <lsm6dsv16x_read_reg>
 80095ec:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	e040      	b.n	800967a <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 80095f8:	7a3b      	ldrb	r3, [r7, #8]
 80095fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b0c      	cmp	r3, #12
 8009602:	d835      	bhi.n	8009670 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009604:	a201      	add	r2, pc, #4	@ (adr r2, 800960c <lsm6dsv16x_gy_full_scale_get+0x38>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	08009641 	.word	0x08009641
 8009610:	08009649 	.word	0x08009649
 8009614:	08009651 	.word	0x08009651
 8009618:	08009659 	.word	0x08009659
 800961c:	08009661 	.word	0x08009661
 8009620:	08009671 	.word	0x08009671
 8009624:	08009671 	.word	0x08009671
 8009628:	08009671 	.word	0x08009671
 800962c:	08009671 	.word	0x08009671
 8009630:	08009671 	.word	0x08009671
 8009634:	08009671 	.word	0x08009671
 8009638:	08009671 	.word	0x08009671
 800963c:	08009669 	.word	0x08009669
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
      break;
 8009646:	e017      	b.n	8009678 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2201      	movs	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
      break;
 800964e:	e013      	b.n	8009678 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2202      	movs	r2, #2
 8009654:	701a      	strb	r2, [r3, #0]
      break;
 8009656:	e00f      	b.n	8009678 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2203      	movs	r2, #3
 800965c:	701a      	strb	r2, [r3, #0]
      break;
 800965e:	e00b      	b.n	8009678 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2204      	movs	r2, #4
 8009664:	701a      	strb	r2, [r3, #0]
      break;
 8009666:	e007      	b.n	8009678 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	220c      	movs	r2, #12
 800966c:	701a      	strb	r2, [r3, #0]
      break;
 800966e:	e003      	b.n	8009678 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
      break;
 8009676:	bf00      	nop
  }

  return ret;
 8009678:	68fb      	ldr	r3, [r7, #12]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop

08009684 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009690:	f107 0208 	add.w	r2, r7, #8
 8009694:	2301      	movs	r3, #1
 8009696:	2117      	movs	r1, #23
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff fbe9 	bl	8008e70 <lsm6dsv16x_read_reg>
 800969e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10f      	bne.n	80096c6 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	7a3b      	ldrb	r3, [r7, #8]
 80096b0:	f362 0301 	bfi	r3, r2, #0, #2
 80096b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80096b6:	f107 0208 	add.w	r2, r7, #8
 80096ba:	2301      	movs	r3, #1
 80096bc:	2117      	movs	r1, #23
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fbf4 	bl	8008eac <lsm6dsv16x_write_reg>
 80096c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80096c6:	68fb      	ldr	r3, [r7, #12]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80096da:	f107 0208 	add.w	r2, r7, #8
 80096de:	2301      	movs	r3, #1
 80096e0:	2117      	movs	r1, #23
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff fbc4 	bl	8008e70 <lsm6dsv16x_read_reg>
 80096e8:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	e026      	b.n	8009742 <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 80096f4:	7a3b      	ldrb	r3, [r7, #8]
 80096f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d81b      	bhi.n	8009738 <lsm6dsv16x_xl_full_scale_get+0x68>
 8009700:	a201      	add	r2, pc, #4	@ (adr r2, 8009708 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009706:	bf00      	nop
 8009708:	08009719 	.word	0x08009719
 800970c:	08009721 	.word	0x08009721
 8009710:	08009729 	.word	0x08009729
 8009714:	08009731 	.word	0x08009731
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
      break;
 800971e:	e00f      	b.n	8009740 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2201      	movs	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
      break;
 8009726:	e00b      	b.n	8009740 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2202      	movs	r2, #2
 800972c:	701a      	strb	r2, [r3, #0]
      break;
 800972e:	e007      	b.n	8009740 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2203      	movs	r2, #3
 8009734:	701a      	strb	r2, [r3, #0]
      break;
 8009736:	e003      	b.n	8009740 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]
      break;
 800973e:	bf00      	nop
  }

  return ret;
 8009740:	68fb      	ldr	r3, [r7, #12]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop

0800974c <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009756:	f107 020c 	add.w	r2, r7, #12
 800975a:	2306      	movs	r3, #6
 800975c:	2122      	movs	r1, #34	@ 0x22
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fb86 	bl	8008e70 <lsm6dsv16x_read_reg>
 8009764:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	e036      	b.n	80097de <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009770:	7b7b      	ldrb	r3, [r7, #13]
 8009772:	b21a      	sxth	r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800977e:	b29b      	uxth	r3, r3
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	b29b      	uxth	r3, r3
 8009784:	7b3a      	ldrb	r2, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	b29b      	uxth	r3, r3
 800978a:	b21a      	sxth	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009790:	7bfa      	ldrb	r2, [r7, #15]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	3302      	adds	r3, #2
 8009796:	b212      	sxth	r2, r2
 8009798:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	3302      	adds	r3, #2
 800979e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	7bba      	ldrb	r2, [r7, #14]
 80097aa:	4413      	add	r3, r2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	3302      	adds	r3, #2
 80097b2:	b212      	sxth	r2, r2
 80097b4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80097b6:	7c7a      	ldrb	r2, [r7, #17]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	3304      	adds	r3, #4
 80097bc:	b212      	sxth	r2, r2
 80097be:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	3304      	adds	r3, #4
 80097c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	7c3a      	ldrb	r2, [r7, #16]
 80097d0:	4413      	add	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	3304      	adds	r3, #4
 80097d8:	b212      	sxth	r2, r2
 80097da:	801a      	strh	r2, [r3, #0]

  return ret;
 80097dc:	697b      	ldr	r3, [r7, #20]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b086      	sub	sp, #24
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 80097f0:	f107 020c 	add.w	r2, r7, #12
 80097f4:	2306      	movs	r3, #6
 80097f6:	2128      	movs	r1, #40	@ 0x28
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fb39 	bl	8008e70 <lsm6dsv16x_read_reg>
 80097fe:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	e036      	b.n	8009878 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 800980a:	7b7b      	ldrb	r3, [r7, #13]
 800980c:	b21a      	sxth	r2, r3
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009818:	b29b      	uxth	r3, r3
 800981a:	021b      	lsls	r3, r3, #8
 800981c:	b29b      	uxth	r3, r3
 800981e:	7b3a      	ldrb	r2, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	b29b      	uxth	r3, r3
 8009824:	b21a      	sxth	r2, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800982a:	7bfa      	ldrb	r2, [r7, #15]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	3302      	adds	r3, #2
 8009830:	b212      	sxth	r2, r2
 8009832:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	3302      	adds	r3, #2
 8009838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800983c:	b29b      	uxth	r3, r3
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	b29b      	uxth	r3, r3
 8009842:	7bba      	ldrb	r2, [r7, #14]
 8009844:	4413      	add	r3, r2
 8009846:	b29a      	uxth	r2, r3
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	3302      	adds	r3, #2
 800984c:	b212      	sxth	r2, r2
 800984e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009850:	7c7a      	ldrb	r2, [r7, #17]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	3304      	adds	r3, #4
 8009856:	b212      	sxth	r2, r2
 8009858:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	3304      	adds	r3, #4
 800985e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009862:	b29b      	uxth	r3, r3
 8009864:	021b      	lsls	r3, r3, #8
 8009866:	b29b      	uxth	r3, r3
 8009868:	7c3a      	ldrb	r2, [r7, #16]
 800986a:	4413      	add	r3, r2
 800986c:	b29a      	uxth	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	3304      	adds	r3, #4
 8009872:	b212      	sxth	r2, r2
 8009874:	801a      	strh	r2, [r3, #0]

  return ret;
 8009876:	697b      	ldr	r3, [r7, #20]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800988c:	f107 0208 	add.w	r2, r7, #8
 8009890:	2301      	movs	r3, #1
 8009892:	210a      	movs	r1, #10
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff faeb 	bl	8008e70 <lsm6dsv16x_read_reg>
 800989a:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10f      	bne.n	80098c2 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	f003 0307 	and.w	r3, r3, #7
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	7a3b      	ldrb	r3, [r7, #8]
 80098ac:	f362 0302 	bfi	r3, r2, #0, #3
 80098b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80098b2:	f107 0208 	add.w	r2, r7, #8
 80098b6:	2301      	movs	r3, #1
 80098b8:	210a      	movs	r1, #10
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff faf6 	bl	8008eac <lsm6dsv16x_write_reg>
 80098c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80098c2:	68fb      	ldr	r3, [r7, #12]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 80098d6:	f107 0208 	add.w	r2, r7, #8
 80098da:	2301      	movs	r3, #1
 80098dc:	2116      	movs	r1, #22
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fac6 	bl	8008e70 <lsm6dsv16x_read_reg>
 80098e4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10f      	bne.n	800990c <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 80098ec:	783b      	ldrb	r3, [r7, #0]
 80098ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	7a3b      	ldrb	r3, [r7, #8]
 80098f6:	f362 13c7 	bfi	r3, r2, #7, #1
 80098fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 80098fc:	f107 0208 	add.w	r2, r7, #8
 8009900:	2301      	movs	r3, #1
 8009902:	2116      	movs	r1, #22
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff fad1 	bl	8008eac <lsm6dsv16x_write_reg>
 800990a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8009928:	f04f 33ff 	mov.w	r3, #4294967295
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e034      	b.n	800999a <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	7b1a      	ldrb	r2, [r3, #12]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695a      	ldr	r2, [r3, #20]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	699a      	ldr	r2, [r3, #24]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a0e      	ldr	r2, [pc, #56]	@ (80099a4 <SHT40AD1B_RegisterBusIO+0x8c>)
 800996c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a0d      	ldr	r2, [pc, #52]	@ (80099a8 <SHT40AD1B_RegisterBusIO+0x90>)
 8009972:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d004      	beq.n	8009994 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4798      	blx	r3
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	e002      	b.n	800999a <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	08009c29 	.word	0x08009c29
 80099a8:	08009c69 	.word	0x08009c69

080099ac <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f04f 0200 	mov.w	r2, #0
 80099ba:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3320      	adds	r3, #32
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fa23 	bl	8009e54 <sht40ad1b_device_id_get>
 8009a0e:	4603      	mov	r3, r0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2201      	movs	r2, #1
 8009a26:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2201      	movs	r2, #1
 8009a32:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2200      	movs	r2, #0
 8009a38:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f04f 0200 	mov.w	r2, #0
 8009a46:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	f04f 0200 	mov.w	r2, #0
 8009a56:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d101      	bne.n	8009a84 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e004      	b.n	8009a8e <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e004      	b.n	8009aba <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f86f 	bl	8009bee <GetData>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1a:	e004      	b.n	8009b26 <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e004      	b.n	8009b4e <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e004      	b.n	8009b7a <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f80f 	bl	8009bee <GetData>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bda:	e004      	b.n	8009be6 <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3320      	adds	r3, #32
 8009bfa:	f107 0208 	add.w	r2, r7, #8
 8009bfe:	4611      	mov	r1, r2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 f881 	bl	8009d08 <sht40ad1b_data_get>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 8009c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c10:	e006      	b.n	8009c20 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	607a      	str	r2, [r7, #4]
 8009c32:	461a      	mov	r2, r3
 8009c34:	460b      	mov	r3, r1
 8009c36:	72fb      	strb	r3, [r7, #11]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d109      	bne.n	8009c5c <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	7b12      	ldrb	r2, [r2, #12]
 8009c50:	4610      	mov	r0, r2
 8009c52:	893a      	ldrh	r2, [r7, #8]
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4798      	blx	r3
 8009c58:	4603      	mov	r3, r0
 8009c5a:	e001      	b.n	8009c60 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 8009c5c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	607a      	str	r2, [r7, #4]
 8009c72:	461a      	mov	r2, r3
 8009c74:	460b      	mov	r3, r1
 8009c76:	72fb      	strb	r3, [r7, #11]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d109      	bne.n	8009c9c <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	7b12      	ldrb	r2, [r2, #12]
 8009c90:	4610      	mov	r0, r2
 8009c92:	893a      	ldrh	r2, [r7, #8]
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	4798      	blx	r3
 8009c98:	4603      	mov	r3, r0
 8009c9a:	e001      	b.n	8009ca0 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 8009c9c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	607a      	str	r2, [r7, #4]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	72fb      	strb	r3, [r7, #11]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	685c      	ldr	r4, [r3, #4]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68d8      	ldr	r0, [r3, #12]
 8009cc4:	893b      	ldrh	r3, [r7, #8]
 8009cc6:	7af9      	ldrb	r1, [r7, #11]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	47a0      	blx	r4
 8009ccc:	6178      	str	r0, [r7, #20]

  return ret;
 8009cce:	697b      	ldr	r3, [r7, #20]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	371c      	adds	r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd90      	pop	{r4, r7, pc}

08009cd8 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	72fb      	strb	r3, [r7, #11]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681c      	ldr	r4, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	68d8      	ldr	r0, [r3, #12]
 8009cf4:	893b      	ldrh	r3, [r7, #8]
 8009cf6:	7af9      	ldrb	r1, [r7, #11]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	47a0      	blx	r4
 8009cfc:	6178      	str	r0, [r7, #20]

  return ret;
 8009cfe:	697b      	ldr	r3, [r7, #20]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd90      	pop	{r4, r7, pc}

08009d08 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 8009d12:	23fd      	movs	r3, #253	@ 0xfd
 8009d14:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 8009d20:	f107 020f 	add.w	r2, r7, #15
 8009d24:	2301      	movs	r3, #1
 8009d26:	2100      	movs	r1, #0
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff ffd5 	bl	8009cd8 <sht40ad1b_write_reg>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <sht40ad1b_data_get+0x30>
  {
    return 1;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e07d      	b.n	8009e34 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	200a      	movs	r0, #10
 8009d3e:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 8009d40:	f107 0208 	add.w	r2, r7, #8
 8009d44:	2306      	movs	r3, #6
 8009d46:	2100      	movs	r1, #0
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff ffad 	bl	8009ca8 <sht40ad1b_read_reg>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <sht40ad1b_data_get+0x50>
  {
    return 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e06d      	b.n	8009e34 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 8009d58:	7a3b      	ldrb	r3, [r7, #8]
 8009d5a:	021b      	lsls	r3, r3, #8
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	7a7a      	ldrb	r2, [r7, #9]
 8009d60:	4413      	add	r3, r2
 8009d62:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 8009d64:	7abb      	ldrb	r3, [r7, #10]
 8009d66:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	7b3a      	ldrb	r2, [r7, #12]
 8009d70:	4413      	add	r3, r2
 8009d72:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 8009d74:	7b7b      	ldrb	r3, [r7, #13]
 8009d76:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 8009d78:	7f7a      	ldrb	r2, [r7, #29]
 8009d7a:	f107 0308 	add.w	r3, r7, #8
 8009d7e:	2102      	movs	r1, #2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f8b3 	bl	8009eec <crc_check>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <sht40ad1b_data_get+0x88>
  {
    return 1;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e051      	b.n	8009e34 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 8009d90:	7e7a      	ldrb	r2, [r7, #25]
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	3303      	adds	r3, #3
 8009d98:	2102      	movs	r1, #2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f8a6 	bl	8009eec <crc_check>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <sht40ad1b_data_get+0xa2>
  {
    return 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e044      	b.n	8009e34 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 8009daa:	8bfb      	ldrh	r3, [r7, #30]
 8009dac:	ee07 3a90 	vmov	s15, r3
 8009db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009e3c <sht40ad1b_data_get+0x134>
 8009db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009dbc:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009e40 <sht40ad1b_data_get+0x138>
 8009dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dc4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8009e44 <sht40ad1b_data_get+0x13c>
 8009dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009dcc:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 8009dd0:	8b7b      	ldrh	r3, [r7, #26]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8009e48 <sht40ad1b_data_get+0x140>
 8009dde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009de2:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8009e40 <sht40ad1b_data_get+0x138>
 8009de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dea:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8009dee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009df2:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 8009df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009dfa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009e4c <sht40ad1b_data_get+0x144>
 8009dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e06:	dd01      	ble.n	8009e0c <sht40ad1b_data_get+0x104>
 8009e08:	4b11      	ldr	r3, [pc, #68]	@ (8009e50 <sht40ad1b_data_get+0x148>)
 8009e0a:	e00a      	b.n	8009e22 <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 8009e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e18:	d502      	bpl.n	8009e20 <sht40ad1b_data_get+0x118>
 8009e1a:	f04f 0300 	mov.w	r3, #0
 8009e1e:	e000      	b.n	8009e22 <sht40ad1b_data_get+0x11a>
 8009e20:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 8009e22:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	601a      	str	r2, [r3, #0]
  return 0;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	432f0000 	.word	0x432f0000
 8009e40:	477fff00 	.word	0x477fff00
 8009e44:	42340000 	.word	0x42340000
 8009e48:	42fa0000 	.word	0x42fa0000
 8009e4c:	42c80000 	.word	0x42c80000
 8009e50:	42c80000 	.word	0x42c80000

08009e54 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2200      	movs	r2, #0
 8009e62:	701a      	strb	r2, [r3, #0]
  return 0;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 8009e7e:	2331      	movs	r3, #49	@ 0x31
 8009e80:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 8009e82:	23ff      	movs	r3, #255	@ 0xff
 8009e84:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 8009e86:	2300      	movs	r3, #0
 8009e88:	81bb      	strh	r3, [r7, #12]
 8009e8a:	e024      	b.n	8009ed6 <crc_calculate+0x64>
  {
    crc ^= data[index];
 8009e8c:	89bb      	ldrh	r3, [r7, #12]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4413      	add	r3, r2
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4053      	eors	r3, r2
 8009e98:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	72fb      	strb	r3, [r7, #11]
 8009e9e:	e014      	b.n	8009eca <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 8009ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	da09      	bge.n	8009ebc <crc_calculate+0x4a>
 8009ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	b25a      	sxtb	r2, r3
 8009eb0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8009eb4:	4053      	eors	r3, r2
 8009eb6:	b25b      	sxtb	r3, r3
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	e002      	b.n	8009ec2 <crc_calculate+0x50>
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e7      	bne.n	8009ea0 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 8009ed0:	89bb      	ldrh	r3, [r7, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	81bb      	strh	r3, [r7, #12]
 8009ed6:	89ba      	ldrh	r2, [r7, #12]
 8009ed8:	887b      	ldrh	r3, [r7, #2]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d3d6      	bcc.n	8009e8c <crc_calculate+0x1a>
    }
  }

  return crc;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	807b      	strh	r3, [r7, #2]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 8009efc:	887b      	ldrh	r3, [r7, #2]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff ffb6 	bl	8009e72 <crc_calculate>
 8009f06:	4603      	mov	r3, r0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	787b      	ldrb	r3, [r7, #1]
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	bf14      	ite	ne
 8009f10:	2301      	movne	r3, #1
 8009f12:	2300      	moveq	r3, #0
 8009f14:	b2db      	uxtb	r3, r3
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 8009f30:	f04f 33ff 	mov.w	r3, #4294967295
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e034      	b.n	8009fa2 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	7b1a      	ldrb	r2, [r3, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	695a      	ldr	r2, [r3, #20]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	699a      	ldr	r2, [r3, #24]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a0e      	ldr	r2, [pc, #56]	@ (8009fac <STTS22H_RegisterBusIO+0x8c>)
 8009f74:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a0d      	ldr	r2, [pc, #52]	@ (8009fb0 <STTS22H_RegisterBusIO+0x90>)
 8009f7a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	69da      	ldr	r2, [r3, #28]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d004      	beq.n	8009f9c <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4798      	blx	r3
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	e002      	b.n	8009fa2 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	0800a3bd 	.word	0x0800a3bd
 8009fb0:	0800a42b 	.word	0x0800a42b

08009fb4 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d127      	bne.n	800a016 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009fcc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3320      	adds	r3, #32
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fbad 	bl	800a734 <stts22h_block_data_update_set>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 8009fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe4:	e01c      	b.n	800a020 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3320      	adds	r3, #32
 8009fea:	2101      	movs	r1, #1
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fbfa 	bl	800a7e6 <stts22h_auto_increment_set>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 8009ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffc:	e010      	b.n	800a020 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3320      	adds	r3, #32
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fa9d 	bl	800a544 <stts22h_temp_data_rate_set>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a010:	f04f 33ff 	mov.w	r3, #4294967295
 800a014:	e004      	b.n	800a020 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a036:	2b01      	cmp	r3, #1
 800a038:	d108      	bne.n	800a04c <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f878 	bl	800a130 <STTS22H_TEMP_Disable>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
 800a04a:	e004      	b.n	800a056 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3320      	adds	r3, #32
 800a06c:	f107 020f 	add.w	r2, r7, #15
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fba6 	bl	800a7c4 <stts22h_dev_id_get>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	e003      	b.n	800a08c <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a084:	7bfa      	ldrb	r2, [r7, #15]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	4a08      	ldr	r2, [pc, #32]	@ (800a0e8 <STTS22H_GetCapabilities+0x54>)
 800a0c8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	f04f 0200 	mov.w	r2, #0
 800a0d0:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	43480000 	.word	0x43480000

0800a0ec <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e012      	b.n	800a128 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a108:	eeb0 0a67 	vmov.f32	s0, s15
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f8e9 	bl	800a2e4 <STTS22H_TEMP_SetOutputDataRate>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	e004      	b.n	800a128 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	e01c      	b.n	800a180 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3334      	adds	r3, #52	@ 0x34
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f81b 	bl	800a188 <STTS22H_TEMP_GetOutputDataRate>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a158:	f04f 33ff 	mov.w	r3, #4294967295
 800a15c:	e010      	b.n	800a180 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3320      	adds	r3, #32
 800a162:	2100      	movs	r1, #0
 800a164:	4618      	mov	r0, r3
 800a166:	f000 f9ed 	bl	800a544 <stts22h_temp_data_rate_set>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	e004      	b.n	800a180 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3320      	adds	r3, #32
 800a19a:	f107 020b 	add.w	r2, r7, #11
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 fa11 	bl	800a5c8 <stts22h_temp_data_rate_get>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b0:	e08b      	b.n	800a2ca <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	2b32      	cmp	r3, #50	@ 0x32
 800a1b6:	f200 8083 	bhi.w	800a2c0 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c0 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a28d 	.word	0x0800a28d
 800a1c4:	0800a28d 	.word	0x0800a28d
 800a1c8:	0800a2a1 	.word	0x0800a2a1
 800a1cc:	0800a2c1 	.word	0x0800a2c1
 800a1d0:	0800a297 	.word	0x0800a297
 800a1d4:	0800a2c1 	.word	0x0800a2c1
 800a1d8:	0800a2c1 	.word	0x0800a2c1
 800a1dc:	0800a2c1 	.word	0x0800a2c1
 800a1e0:	0800a2c1 	.word	0x0800a2c1
 800a1e4:	0800a2c1 	.word	0x0800a2c1
 800a1e8:	0800a2c1 	.word	0x0800a2c1
 800a1ec:	0800a2c1 	.word	0x0800a2c1
 800a1f0:	0800a2c1 	.word	0x0800a2c1
 800a1f4:	0800a2c1 	.word	0x0800a2c1
 800a1f8:	0800a2c1 	.word	0x0800a2c1
 800a1fc:	0800a2c1 	.word	0x0800a2c1
 800a200:	0800a2c1 	.word	0x0800a2c1
 800a204:	0800a2c1 	.word	0x0800a2c1
 800a208:	0800a2a9 	.word	0x0800a2a9
 800a20c:	0800a2c1 	.word	0x0800a2c1
 800a210:	0800a2c1 	.word	0x0800a2c1
 800a214:	0800a2c1 	.word	0x0800a2c1
 800a218:	0800a2c1 	.word	0x0800a2c1
 800a21c:	0800a2c1 	.word	0x0800a2c1
 800a220:	0800a2c1 	.word	0x0800a2c1
 800a224:	0800a2c1 	.word	0x0800a2c1
 800a228:	0800a2c1 	.word	0x0800a2c1
 800a22c:	0800a2c1 	.word	0x0800a2c1
 800a230:	0800a2c1 	.word	0x0800a2c1
 800a234:	0800a2c1 	.word	0x0800a2c1
 800a238:	0800a2c1 	.word	0x0800a2c1
 800a23c:	0800a2c1 	.word	0x0800a2c1
 800a240:	0800a2c1 	.word	0x0800a2c1
 800a244:	0800a2c1 	.word	0x0800a2c1
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a2c1 	.word	0x0800a2c1
 800a250:	0800a2c1 	.word	0x0800a2c1
 800a254:	0800a2c1 	.word	0x0800a2c1
 800a258:	0800a2c1 	.word	0x0800a2c1
 800a25c:	0800a2c1 	.word	0x0800a2c1
 800a260:	0800a2c1 	.word	0x0800a2c1
 800a264:	0800a2c1 	.word	0x0800a2c1
 800a268:	0800a2c1 	.word	0x0800a2c1
 800a26c:	0800a2c1 	.word	0x0800a2c1
 800a270:	0800a2c1 	.word	0x0800a2c1
 800a274:	0800a2c1 	.word	0x0800a2c1
 800a278:	0800a2c1 	.word	0x0800a2c1
 800a27c:	0800a2c1 	.word	0x0800a2c1
 800a280:	0800a2c1 	.word	0x0800a2c1
 800a284:	0800a2c1 	.word	0x0800a2c1
 800a288:	0800a2b9 	.word	0x0800a2b9
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
      break;
 800a294:	e018      	b.n	800a2c8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a29c:	601a      	str	r2, [r3, #0]
      break;
 800a29e:	e013      	b.n	800a2c8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a2d4 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800a2a4:	601a      	str	r2, [r3, #0]
      break;
 800a2a6:	e00f      	b.n	800a2c8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	4a0b      	ldr	r2, [pc, #44]	@ (800a2d8 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800a2ac:	601a      	str	r2, [r3, #0]
      break;
 800a2ae:	e00b      	b.n	800a2c8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a2dc <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800a2b4:	601a      	str	r2, [r3, #0]
      break;
 800a2b6:	e007      	b.n	800a2c8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	4a09      	ldr	r2, [pc, #36]	@ (800a2e0 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800a2bc:	601a      	str	r2, [r3, #0]
      break;
 800a2be:	e003      	b.n	800a2c8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800a2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c4:	60fb      	str	r3, [r7, #12]
      break;
 800a2c6:	bf00      	nop
  }

  return ret;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	41c80000 	.word	0x41c80000
 800a2d8:	42480000 	.word	0x42480000
 800a2dc:	42c80000 	.word	0x42c80000
 800a2e0:	43480000 	.word	0x43480000

0800a2e4 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800a2f0:	edd7 7a00 	vldr	s15, [r7]
 800a2f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a300:	d801      	bhi.n	800a306 <STTS22H_TEMP_SetOutputDataRate+0x22>
 800a302:	2304      	movs	r3, #4
 800a304:	e021      	b.n	800a34a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a306:	edd7 7a00 	vldr	s15, [r7]
 800a30a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800a30e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a316:	d801      	bhi.n	800a31c <STTS22H_TEMP_SetOutputDataRate+0x38>
 800a318:	2302      	movs	r3, #2
 800a31a:	e016      	b.n	800a34a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a31c:	edd7 7a00 	vldr	s15, [r7]
 800a320:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a370 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800a324:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a32c:	d801      	bhi.n	800a332 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800a32e:	2312      	movs	r3, #18
 800a330:	e00b      	b.n	800a34a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a332:	edd7 7a00 	vldr	s15, [r7]
 800a336:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a374 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800a33a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a342:	d801      	bhi.n	800a348 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800a344:	2322      	movs	r3, #34	@ 0x22
 800a346:	e000      	b.n	800a34a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a348:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800a34a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3320      	adds	r3, #32
 800a350:	7bfa      	ldrb	r2, [r7, #15]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f8f5 	bl	800a544 <stts22h_temp_data_rate_set>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800a360:	f04f 33ff 	mov.w	r3, #4294967295
 800a364:	e000      	b.n	800a368 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	42480000 	.word	0x42480000
 800a374:	42c80000 	.word	0x42c80000

0800a378 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3320      	adds	r3, #32
 800a386:	f107 020e 	add.w	r2, r7, #14
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 f9f7 	bl	800a780 <stts22h_temperature_raw_get>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	e00a      	b.n	800a3b4 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800a39e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 f8b4 	bl	800a510 <stts22h_from_lsb_to_celsius>
 800a3a8:	eef0 7a40 	vmov.f32	s15, s0
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a3bc:	b590      	push	{r4, r7, lr}
 800a3be:	b089      	sub	sp, #36	@ 0x24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	607a      	str	r2, [r7, #4]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	72fb      	strb	r3, [r7, #11]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11f      	bne.n	800a420 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	83fb      	strh	r3, [r7, #30]
 800a3e4:	e018      	b.n	800a418 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	695c      	ldr	r4, [r3, #20]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	7b1b      	ldrb	r3, [r3, #12]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	8bfb      	ldrh	r3, [r7, #30]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	b299      	uxth	r1, r3
 800a3fa:	8bfb      	ldrh	r3, [r7, #30]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	441a      	add	r2, r3
 800a400:	2301      	movs	r3, #1
 800a402:	47a0      	blx	r4
 800a404:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a40c:	f04f 33ff 	mov.w	r3, #4294967295
 800a410:	e007      	b.n	800a422 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a412:	8bfb      	ldrh	r3, [r7, #30]
 800a414:	3301      	adds	r3, #1
 800a416:	83fb      	strh	r3, [r7, #30]
 800a418:	8bfa      	ldrh	r2, [r7, #30]
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d3e2      	bcc.n	800a3e6 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a420:	69bb      	ldr	r3, [r7, #24]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3724      	adds	r7, #36	@ 0x24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd90      	pop	{r4, r7, pc}

0800a42a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a42a:	b590      	push	{r4, r7, lr}
 800a42c:	b089      	sub	sp, #36	@ 0x24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	461a      	mov	r2, r3
 800a436:	460b      	mov	r3, r1
 800a438:	72fb      	strb	r3, [r7, #11]
 800a43a:	4613      	mov	r3, r2
 800a43c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d11f      	bne.n	800a48e <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	83fb      	strh	r3, [r7, #30]
 800a452:	e018      	b.n	800a486 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	691c      	ldr	r4, [r3, #16]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	7b1b      	ldrb	r3, [r3, #12]
 800a45c:	4618      	mov	r0, r3
 800a45e:	7afb      	ldrb	r3, [r7, #11]
 800a460:	b29a      	uxth	r2, r3
 800a462:	8bfb      	ldrh	r3, [r7, #30]
 800a464:	4413      	add	r3, r2
 800a466:	b299      	uxth	r1, r3
 800a468:	8bfb      	ldrh	r3, [r7, #30]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	441a      	add	r2, r3
 800a46e:	2301      	movs	r3, #1
 800a470:	47a0      	blx	r4
 800a472:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a47a:	f04f 33ff 	mov.w	r3, #4294967295
 800a47e:	e007      	b.n	800a490 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a480:	8bfb      	ldrh	r3, [r7, #30]
 800a482:	3301      	adds	r3, #1
 800a484:	83fb      	strh	r3, [r7, #30]
 800a486:	8bfa      	ldrh	r2, [r7, #30]
 800a488:	893b      	ldrh	r3, [r7, #8]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d3e2      	bcc.n	800a454 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a48e:	69bb      	ldr	r3, [r7, #24]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3724      	adds	r7, #36	@ 0x24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd90      	pop	{r4, r7, pc}

0800a498 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	72fb      	strb	r3, [r7, #11]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <stts22h_read_reg+0x20>
 800a4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b6:	e009      	b.n	800a4cc <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685c      	ldr	r4, [r3, #4]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	68d8      	ldr	r0, [r3, #12]
 800a4c0:	893b      	ldrh	r3, [r7, #8]
 800a4c2:	7af9      	ldrb	r1, [r7, #11]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	47a0      	blx	r4
 800a4c8:	6178      	str	r0, [r7, #20]

  return ret;
 800a4ca:	697b      	ldr	r3, [r7, #20]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	371c      	adds	r7, #28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd90      	pop	{r4, r7, pc}

0800a4d4 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	72fb      	strb	r3, [r7, #11]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <stts22h_write_reg+0x20>
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	e009      	b.n	800a508 <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681c      	ldr	r4, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68d8      	ldr	r0, [r3, #12]
 800a4fc:	893b      	ldrh	r3, [r7, #8]
 800a4fe:	7af9      	ldrb	r1, [r7, #11]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	47a0      	blx	r4
 800a504:	6178      	str	r0, [r7, #20]

  return ret;
 800a506:	697b      	ldr	r3, [r7, #20]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd90      	pop	{r4, r7, pc}

0800a510 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800a51a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a526:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a540 <stts22h_from_lsb_to_celsius+0x30>
 800a52a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a52e:	eef0 7a66 	vmov.f32	s15, s13
}
 800a532:	eeb0 0a67 	vmov.f32	s0, s15
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	42c80000 	.word	0x42c80000

0800a544 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a550:	f107 0208 	add.w	r2, r7, #8
 800a554:	2301      	movs	r3, #1
 800a556:	2104      	movs	r1, #4
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff ff9d 	bl	800a498 <stts22h_read_reg>
 800a55e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d12a      	bne.n	800a5bc <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	7a3b      	ldrb	r3, [r7, #8]
 800a570:	f362 0300 	bfi	r3, r2, #0, #1
 800a574:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	7a3b      	ldrb	r3, [r7, #8]
 800a582:	f362 0382 	bfi	r3, r2, #2, #1
 800a586:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	089b      	lsrs	r3, r3, #2
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	b2da      	uxtb	r2, r3
 800a592:	7a3b      	ldrb	r3, [r7, #8]
 800a594:	f362 13c7 	bfi	r3, r2, #7, #1
 800a598:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	091b      	lsrs	r3, r3, #4
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	7a3b      	ldrb	r3, [r7, #8]
 800a5a6:	f362 1305 	bfi	r3, r2, #4, #2
 800a5aa:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a5ac:	f107 0208 	add.w	r2, r7, #8
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	2104      	movs	r1, #4
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff ff8d 	bl	800a4d4 <stts22h_write_reg>
 800a5ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800a5d2:	f107 0208 	add.w	r2, r7, #8
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	2104      	movs	r1, #4
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff ff5c 	bl	800a498 <stts22h_read_reg>
 800a5e0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a5e2:	7a3b      	ldrb	r3, [r7, #8]
 800a5e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	7a3b      	ldrb	r3, [r7, #8]
 800a5ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	7a3b      	ldrb	r3, [r7, #8]
 800a5fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800a604:	7a3b      	ldrb	r3, [r7, #8]
 800a606:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	011b      	lsls	r3, r3, #4
                                                 2) |
 800a60e:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a610:	2b32      	cmp	r3, #50	@ 0x32
 800a612:	f200 8085 	bhi.w	800a720 <stts22h_temp_data_rate_get+0x158>
 800a616:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <stts22h_temp_data_rate_get+0x54>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a6e9 	.word	0x0800a6e9
 800a620:	0800a6f1 	.word	0x0800a6f1
 800a624:	0800a701 	.word	0x0800a701
 800a628:	0800a721 	.word	0x0800a721
 800a62c:	0800a6f9 	.word	0x0800a6f9
 800a630:	0800a721 	.word	0x0800a721
 800a634:	0800a721 	.word	0x0800a721
 800a638:	0800a721 	.word	0x0800a721
 800a63c:	0800a721 	.word	0x0800a721
 800a640:	0800a721 	.word	0x0800a721
 800a644:	0800a721 	.word	0x0800a721
 800a648:	0800a721 	.word	0x0800a721
 800a64c:	0800a721 	.word	0x0800a721
 800a650:	0800a721 	.word	0x0800a721
 800a654:	0800a721 	.word	0x0800a721
 800a658:	0800a721 	.word	0x0800a721
 800a65c:	0800a721 	.word	0x0800a721
 800a660:	0800a721 	.word	0x0800a721
 800a664:	0800a709 	.word	0x0800a709
 800a668:	0800a721 	.word	0x0800a721
 800a66c:	0800a721 	.word	0x0800a721
 800a670:	0800a721 	.word	0x0800a721
 800a674:	0800a721 	.word	0x0800a721
 800a678:	0800a721 	.word	0x0800a721
 800a67c:	0800a721 	.word	0x0800a721
 800a680:	0800a721 	.word	0x0800a721
 800a684:	0800a721 	.word	0x0800a721
 800a688:	0800a721 	.word	0x0800a721
 800a68c:	0800a721 	.word	0x0800a721
 800a690:	0800a721 	.word	0x0800a721
 800a694:	0800a721 	.word	0x0800a721
 800a698:	0800a721 	.word	0x0800a721
 800a69c:	0800a721 	.word	0x0800a721
 800a6a0:	0800a721 	.word	0x0800a721
 800a6a4:	0800a711 	.word	0x0800a711
 800a6a8:	0800a721 	.word	0x0800a721
 800a6ac:	0800a721 	.word	0x0800a721
 800a6b0:	0800a721 	.word	0x0800a721
 800a6b4:	0800a721 	.word	0x0800a721
 800a6b8:	0800a721 	.word	0x0800a721
 800a6bc:	0800a721 	.word	0x0800a721
 800a6c0:	0800a721 	.word	0x0800a721
 800a6c4:	0800a721 	.word	0x0800a721
 800a6c8:	0800a721 	.word	0x0800a721
 800a6cc:	0800a721 	.word	0x0800a721
 800a6d0:	0800a721 	.word	0x0800a721
 800a6d4:	0800a721 	.word	0x0800a721
 800a6d8:	0800a721 	.word	0x0800a721
 800a6dc:	0800a721 	.word	0x0800a721
 800a6e0:	0800a721 	.word	0x0800a721
 800a6e4:	0800a719 	.word	0x0800a719
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	701a      	strb	r2, [r3, #0]
      break;
 800a6ee:	e01b      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	701a      	strb	r2, [r3, #0]
      break;
 800a6f6:	e017      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	701a      	strb	r2, [r3, #0]
      break;
 800a6fe:	e013      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2202      	movs	r2, #2
 800a704:	701a      	strb	r2, [r3, #0]
      break;
 800a706:	e00f      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2212      	movs	r2, #18
 800a70c:	701a      	strb	r2, [r3, #0]
      break;
 800a70e:	e00b      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2222      	movs	r2, #34	@ 0x22
 800a714:	701a      	strb	r2, [r3, #0]
      break;
 800a716:	e007      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2232      	movs	r2, #50	@ 0x32
 800a71c:	701a      	strb	r2, [r3, #0]
      break;
 800a71e:	e003      	b.n	800a728 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]
      break;
 800a726:	bf00      	nop
  }

  return ret;
 800a728:	68fb      	ldr	r3, [r7, #12]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop

0800a734 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a740:	f107 0208 	add.w	r2, r7, #8
 800a744:	2301      	movs	r3, #1
 800a746:	2104      	movs	r1, #4
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fea5 	bl	800a498 <stts22h_read_reg>
 800a74e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10f      	bne.n	800a776 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	7a3b      	ldrb	r3, [r7, #8]
 800a760:	f362 1386 	bfi	r3, r2, #6, #1
 800a764:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a766:	f107 0208 	add.w	r2, r7, #8
 800a76a:	2301      	movs	r3, #1
 800a76c:	2104      	movs	r1, #4
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff feb0 	bl	800a4d4 <stts22h_write_reg>
 800a774:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a776:	68fb      	ldr	r3, [r7, #12]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800a78a:	f107 0208 	add.w	r2, r7, #8
 800a78e:	2302      	movs	r3, #2
 800a790:	2106      	movs	r1, #6
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fe80 	bl	800a498 <stts22h_read_reg>
 800a798:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800a79a:	7a7b      	ldrb	r3, [r7, #9]
 800a79c:	b21a      	sxth	r2, r3
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	021b      	lsls	r3, r3, #8
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	7a3a      	ldrb	r2, [r7, #8]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	b21a      	sxth	r2, r3
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	801a      	strh	r2, [r3, #0]

  return ret;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff fe5f 	bl	800a498 <stts22h_read_reg>
 800a7da:	60f8      	str	r0, [r7, #12]

  return ret;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a7f2:	f107 0208 	add.w	r2, r7, #8
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff fe4c 	bl	800a498 <stts22h_read_reg>
 800a800:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10f      	bne.n	800a828 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	7a3b      	ldrb	r3, [r7, #8]
 800a812:	f362 03c3 	bfi	r3, r2, #3, #1
 800a816:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a818:	f107 0208 	add.w	r2, r7, #8
 800a81c:	2301      	movs	r3, #1
 800a81e:	2104      	movs	r1, #4
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff fe57 	bl	800a4d4 <stts22h_write_reg>
 800a826:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a828:	68fb      	ldr	r3, [r7, #12]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08c      	sub	sp, #48	@ 0x30
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a83e:	2300      	movs	r3, #0
 800a840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800a842:	2301      	movs	r3, #1
 800a844:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d07c      	beq.n	800a94a <IKS4A1_ENV_SENSOR_Init+0x116>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b02      	cmp	r3, #2
 800a854:	f200 80b2 	bhi.w	800a9bc <IKS4A1_ENV_SENSOR_Init+0x188>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <IKS4A1_ENV_SENSOR_Init+0x32>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d039      	beq.n	800a8d8 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800a864:	e0aa      	b.n	800a9bc <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800a866:	6838      	ldr	r0, [r7, #0]
 800a868:	f000 f9ca 	bl	800ac00 <STTS22H_0_Probe>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800a872:	f04f 33ff 	mov.w	r3, #4294967295
 800a876:	e0df      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a878:	4a71      	ldr	r2, [pc, #452]	@ (800aa40 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	4970      	ldr	r1, [pc, #448]	@ (800aa44 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a88a:	f107 0108 	add.w	r1, r7, #8
 800a88e:	4610      	mov	r0, r2
 800a890:	4798      	blx	r3
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a898:	f06f 0306 	mvn.w	r3, #6
 800a89c:	e0cc      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800a89e:	7a3b      	ldrb	r3, [r7, #8]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d103      	bne.n	800a8ac <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	f043 0301 	orr.w	r3, r3, #1
 800a8aa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800a8ac:	7abb      	ldrb	r3, [r7, #10]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d103      	bne.n	800a8ba <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	f043 0304 	orr.w	r3, r3, #4
 800a8b8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800a8ba:	7a7b      	ldrb	r3, [r7, #9]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d103      	bne.n	800a8c8 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	f043 0302 	orr.w	r3, r3, #2
 800a8c6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d17a      	bne.n	800a9c4 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	f043 0308 	orr.w	r3, r3, #8
 800a8d4:	623b      	str	r3, [r7, #32]
      }
      break;
 800a8d6:	e075      	b.n	800a9c4 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800a8d8:	6838      	ldr	r0, [r7, #0]
 800a8da:	f000 fa47 	bl	800ad6c <LPS22DF_0_Probe>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800a8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e8:	e0a6      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a8ea:	4a55      	ldr	r2, [pc, #340]	@ (800aa40 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	4953      	ldr	r1, [pc, #332]	@ (800aa44 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a8fc:	f107 0108 	add.w	r1, r7, #8
 800a900:	4610      	mov	r0, r2
 800a902:	4798      	blx	r3
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a90a:	f06f 0306 	mvn.w	r3, #6
 800a90e:	e093      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800a910:	7a3b      	ldrb	r3, [r7, #8]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d103      	bne.n	800a91e <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	f043 0301 	orr.w	r3, r3, #1
 800a91c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800a91e:	7abb      	ldrb	r3, [r7, #10]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d103      	bne.n	800a92c <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	f043 0304 	orr.w	r3, r3, #4
 800a92a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800a92c:	7a7b      	ldrb	r3, [r7, #9]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d103      	bne.n	800a93a <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	f043 0302 	orr.w	r3, r3, #2
 800a938:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d143      	bne.n	800a9c8 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	f043 0308 	orr.w	r3, r3, #8
 800a946:	623b      	str	r3, [r7, #32]
      }
      break;
 800a948:	e03e      	b.n	800a9c8 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800a94a:	6838      	ldr	r0, [r7, #0]
 800a94c:	f000 fade 	bl	800af0c <SHT40AD1B_0_Probe>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e06d      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a95c:	4a38      	ldr	r2, [pc, #224]	@ (800aa40 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	4937      	ldr	r1, [pc, #220]	@ (800aa44 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a96e:	f107 0108 	add.w	r1, r7, #8
 800a972:	4610      	mov	r0, r2
 800a974:	4798      	blx	r3
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a97c:	f06f 0306 	mvn.w	r3, #6
 800a980:	e05a      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800a982:	7a3b      	ldrb	r3, [r7, #8]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d103      	bne.n	800a990 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800a990:	7abb      	ldrb	r3, [r7, #10]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d103      	bne.n	800a99e <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	f043 0304 	orr.w	r3, r3, #4
 800a99c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800a99e:	7a7b      	ldrb	r3, [r7, #9]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d103      	bne.n	800a9ac <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	f043 0302 	orr.w	r3, r3, #2
 800a9aa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800a9ac:	7afb      	ldrb	r3, [r7, #11]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d10c      	bne.n	800a9cc <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	f043 0308 	orr.w	r3, r3, #8
 800a9b8:	623b      	str	r3, [r7, #32]
      }
      break;
 800a9ba:	e007      	b.n	800a9cc <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a9bc:	f06f 0301 	mvn.w	r3, #1
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800a9c2:	e004      	b.n	800a9ce <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e002      	b.n	800a9ce <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800a9c8:	bf00      	nop
 800a9ca:	e000      	b.n	800a9ce <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800a9cc:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800a9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d6:	e02f      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9dc:	e028      	b.n	800aa30 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d11c      	bne.n	800aa24 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800a9ea:	6a3a      	ldr	r2, [r7, #32]
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d116      	bne.n	800aa24 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a9f6:	4a14      	ldr	r2, [pc, #80]	@ (800aa48 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9fe:	4913      	ldr	r1, [pc, #76]	@ (800aa4c <IKS4A1_ENV_SENSOR_Init+0x218>)
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	0092      	lsls	r2, r2, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	490d      	ldr	r1, [pc, #52]	@ (800aa44 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aa14:	4610      	mov	r0, r2
 800aa16:	4798      	blx	r3
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800aa1e:	f06f 0304 	mvn.w	r3, #4
 800aa22:	e009      	b.n	800aa38 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800aa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d9d3      	bls.n	800a9de <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3730      	adds	r7, #48	@ 0x30
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	20000894 	.word	0x20000894
 800aa44:	20000858 	.word	0x20000858
 800aa48:	200001b0 	.word	0x200001b0
 800aa4c:	20000864 	.word	0x20000864

0800aa50 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d903      	bls.n	800aa68 <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aa60:	f06f 0301 	mvn.w	r3, #1
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	e014      	b.n	800aa92 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800aa68:	4a0c      	ldr	r2, [pc, #48]	@ (800aa9c <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	490b      	ldr	r1, [pc, #44]	@ (800aaa0 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	4798      	blx	r3
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa86:	f06f 0306 	mvn.w	r3, #6
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	e001      	b.n	800aa92 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000894 	.word	0x20000894
 800aaa0:	20000858 	.word	0x20000858

0800aaa4 <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d903      	bls.n	800aabc <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aab4:	f06f 0301 	mvn.w	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	e014      	b.n	800aae6 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800aabc:	4a0c      	ldr	r2, [pc, #48]	@ (800aaf0 <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	490b      	ldr	r1, [pc, #44]	@ (800aaf4 <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aada:	f06f 0306 	mvn.w	r3, #6
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e001      	b.n	800aae6 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20000894 	.word	0x20000894
 800aaf4:	20000858 	.word	0x20000858

0800aaf8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d903      	bls.n	800ab12 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab0a:	f06f 0301 	mvn.w	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
 800ab10:	e027      	b.n	800ab62 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800ab12:	4a16      	ldr	r2, [pc, #88]	@ (800ab6c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d11b      	bne.n	800ab5c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800ab24:	4a12      	ldr	r2, [pc, #72]	@ (800ab70 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab2c:	4911      	ldr	r1, [pc, #68]	@ (800ab74 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	0092      	lsls	r2, r2, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	490f      	ldr	r1, [pc, #60]	@ (800ab78 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	4610      	mov	r0, r2
 800ab46:	4798      	blx	r3
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab4e:	f06f 0304 	mvn.w	r3, #4
 800ab52:	617b      	str	r3, [r7, #20]
 800ab54:	e005      	b.n	800ab62 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]
 800ab5a:	e002      	b.n	800ab62 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ab5c:	f06f 0301 	mvn.w	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ab62:	697b      	ldr	r3, [r7, #20]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	200008a0 	.word	0x200008a0
 800ab70:	200001b0 	.word	0x200001b0
 800ab74:	20000864 	.word	0x20000864
 800ab78:	20000858 	.word	0x20000858

0800ab7c <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d903      	bls.n	800ab96 <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab8e:	f06f 0301 	mvn.w	r3, #1
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	e027      	b.n	800abe6 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800ab96:	4a16      	ldr	r2, [pc, #88]	@ (800abf0 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	4013      	ands	r3, r2
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d11b      	bne.n	800abe0 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800aba8:	4a12      	ldr	r2, [pc, #72]	@ (800abf4 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abb0:	4911      	ldr	r1, [pc, #68]	@ (800abf8 <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	0092      	lsls	r2, r2, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	490f      	ldr	r1, [pc, #60]	@ (800abfc <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800abd2:	f06f 0304 	mvn.w	r3, #4
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	e005      	b.n	800abe6 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	e002      	b.n	800abe6 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800abe0:	f06f 0301 	mvn.w	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800abe6:	697b      	ldr	r3, [r7, #20]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	200008a0 	.word	0x200008a0
 800abf4:	200001b0 	.word	0x200001b0
 800abf8:	20000864 	.word	0x20000864
 800abfc:	20000858 	.word	0x20000858

0800ac00 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b092      	sub	sp, #72	@ 0x48
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800ac10:	2371      	movs	r3, #113	@ 0x71
 800ac12:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ac16:	4b47      	ldr	r3, [pc, #284]	@ (800ad34 <STTS22H_0_Probe+0x134>)
 800ac18:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ac1a:	4b47      	ldr	r3, [pc, #284]	@ (800ad38 <STTS22H_0_Probe+0x138>)
 800ac1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ac1e:	4b47      	ldr	r3, [pc, #284]	@ (800ad3c <STTS22H_0_Probe+0x13c>)
 800ac20:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ac22:	4b47      	ldr	r3, [pc, #284]	@ (800ad40 <STTS22H_0_Probe+0x140>)
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ac26:	4b47      	ldr	r3, [pc, #284]	@ (800ad44 <STTS22H_0_Probe+0x144>)
 800ac28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800ac2a:	4b47      	ldr	r3, [pc, #284]	@ (800ad48 <STTS22H_0_Probe+0x148>)
 800ac2c:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800ac2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac32:	4619      	mov	r1, r3
 800ac34:	4845      	ldr	r0, [pc, #276]	@ (800ad4c <STTS22H_0_Probe+0x14c>)
 800ac36:	f7ff f973 	bl	8009f20 <STTS22H_RegisterBusIO>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac40:	f06f 0306 	mvn.w	r3, #6
 800ac44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac46:	e06f      	b.n	800ad28 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800ac48:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	483f      	ldr	r0, [pc, #252]	@ (800ad4c <STTS22H_0_Probe+0x14c>)
 800ac50:	f7ff fa05 	bl	800a05e <STTS22H_ReadID>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac5a:	f06f 0306 	mvn.w	r3, #6
 800ac5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac60:	e062      	b.n	800ad28 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800ac62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ac66:	2ba0      	cmp	r3, #160	@ 0xa0
 800ac68:	d003      	beq.n	800ac72 <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac6a:	f06f 0306 	mvn.w	r3, #6
 800ac6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac70:	e05a      	b.n	800ad28 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4619      	mov	r1, r3
 800ac78:	4834      	ldr	r0, [pc, #208]	@ (800ad4c <STTS22H_0_Probe+0x14c>)
 800ac7a:	f7ff fa0b 	bl	800a094 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800ac7e:	7a3b      	ldrb	r3, [r7, #8]
 800ac80:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800ac82:	7a7b      	ldrb	r3, [r7, #9]
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800ac88:	7abb      	ldrb	r3, [r7, #10]
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800ac94:	4a2e      	ldr	r2, [pc, #184]	@ (800ad50 <STTS22H_0_Probe+0x150>)
 800ac96:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800ac98:	4b2e      	ldr	r3, [pc, #184]	@ (800ad54 <STTS22H_0_Probe+0x154>)
 800ac9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ad4c <STTS22H_0_Probe+0x14c>)
 800ac9c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800ac9e:	4b2e      	ldr	r3, [pc, #184]	@ (800ad58 <STTS22H_0_Probe+0x158>)
 800aca0:	4a2e      	ldr	r2, [pc, #184]	@ (800ad5c <STTS22H_0_Probe+0x15c>)
 800aca2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800aca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d11d      	bne.n	800ace6 <STTS22H_0_Probe+0xe6>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d018      	beq.n	800ace6 <STTS22H_0_Probe+0xe6>
 800acb4:	7a3b      	ldrb	r3, [r7, #8]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d115      	bne.n	800ace6 <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800acba:	4b29      	ldr	r3, [pc, #164]	@ (800ad60 <STTS22H_0_Probe+0x160>)
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	4a29      	ldr	r2, [pc, #164]	@ (800ad64 <STTS22H_0_Probe+0x164>)
 800acc0:	4929      	ldr	r1, [pc, #164]	@ (800ad68 <STTS22H_0_Probe+0x168>)
 800acc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800acc6:	4b24      	ldr	r3, [pc, #144]	@ (800ad58 <STTS22H_0_Probe+0x158>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a21      	ldr	r2, [pc, #132]	@ (800ad54 <STTS22H_0_Probe+0x154>)
 800acce:	6812      	ldr	r2, [r2, #0]
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800acda:	f06f 0304 	mvn.w	r3, #4
 800acde:	647b      	str	r3, [r7, #68]	@ 0x44
 800ace0:	e001      	b.n	800ace6 <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800ace6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d107      	bne.n	800acfc <STTS22H_0_Probe+0xfc>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800acf6:	f06f 0304 	mvn.w	r3, #4
 800acfa:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800acfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <STTS22H_0_Probe+0x112>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad0c:	f06f 0304 	mvn.w	r3, #4
 800ad10:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800ad12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d107      	bne.n	800ad28 <STTS22H_0_Probe+0x128>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f003 0308 	and.w	r3, r3, #8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad22:	f06f 0304 	mvn.w	r3, #4
 800ad26:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800ad28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3748      	adds	r7, #72	@ 0x48
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	0800201d 	.word	0x0800201d
 800ad38:	08002081 	.word	0x08002081
 800ad3c:	08002135 	.word	0x08002135
 800ad40:	080020d1 	.word	0x080020d1
 800ad44:	08002241 	.word	0x08002241
 800ad48:	0800bfd5 	.word	0x0800bfd5
 800ad4c:	200008ac 	.word	0x200008ac
 800ad50:	200008a0 	.word	0x200008a0
 800ad54:	20000858 	.word	0x20000858
 800ad58:	20000894 	.word	0x20000894
 800ad5c:	2000018c 	.word	0x2000018c
 800ad60:	200001b0 	.word	0x200001b0
 800ad64:	20000864 	.word	0x20000864
 800ad68:	2000019c 	.word	0x2000019c

0800ad6c <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b092      	sub	sp, #72	@ 0x48
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800ad7c:	23bb      	movs	r3, #187	@ 0xbb
 800ad7e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ad82:	4b53      	ldr	r3, [pc, #332]	@ (800aed0 <LPS22DF_0_Probe+0x164>)
 800ad84:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ad86:	4b53      	ldr	r3, [pc, #332]	@ (800aed4 <LPS22DF_0_Probe+0x168>)
 800ad88:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ad8a:	4b53      	ldr	r3, [pc, #332]	@ (800aed8 <LPS22DF_0_Probe+0x16c>)
 800ad8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ad8e:	4b53      	ldr	r3, [pc, #332]	@ (800aedc <LPS22DF_0_Probe+0x170>)
 800ad90:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ad92:	4b53      	ldr	r3, [pc, #332]	@ (800aee0 <LPS22DF_0_Probe+0x174>)
 800ad94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800ad96:	4b53      	ldr	r3, [pc, #332]	@ (800aee4 <LPS22DF_0_Probe+0x178>)
 800ad98:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800ad9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4851      	ldr	r0, [pc, #324]	@ (800aee8 <LPS22DF_0_Probe+0x17c>)
 800ada2:	f7fa f8bd 	bl	8004f20 <LPS22DF_RegisterBusIO>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adac:	f06f 0306 	mvn.w	r3, #6
 800adb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800adb2:	e087      	b.n	800aec4 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800adb4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800adb8:	4619      	mov	r1, r3
 800adba:	484b      	ldr	r0, [pc, #300]	@ (800aee8 <LPS22DF_0_Probe+0x17c>)
 800adbc:	f7fa f959 	bl	8005072 <LPS22DF_ReadID>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adc6:	f06f 0306 	mvn.w	r3, #6
 800adca:	647b      	str	r3, [r7, #68]	@ 0x44
 800adcc:	e07a      	b.n	800aec4 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800adce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800add2:	2bb4      	cmp	r3, #180	@ 0xb4
 800add4:	d003      	beq.n	800adde <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800add6:	f06f 0306 	mvn.w	r3, #6
 800adda:	647b      	str	r3, [r7, #68]	@ 0x44
 800addc:	e072      	b.n	800aec4 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800adde:	f107 0308 	add.w	r3, r7, #8
 800ade2:	4619      	mov	r1, r3
 800ade4:	4840      	ldr	r0, [pc, #256]	@ (800aee8 <LPS22DF_0_Probe+0x17c>)
 800ade6:	f7fa f95f 	bl	80050a8 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800adea:	7a3b      	ldrb	r3, [r7, #8]
 800adec:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800adee:	7a7b      	ldrb	r3, [r7, #9]
 800adf0:	005b      	lsls	r3, r3, #1
 800adf2:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800adf4:	7abb      	ldrb	r3, [r7, #10]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800adfa:	7afb      	ldrb	r3, [r7, #11]
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800ae00:	4a3a      	ldr	r2, [pc, #232]	@ (800aeec <LPS22DF_0_Probe+0x180>)
 800ae02:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800ae04:	4b3a      	ldr	r3, [pc, #232]	@ (800aef0 <LPS22DF_0_Probe+0x184>)
 800ae06:	4a38      	ldr	r2, [pc, #224]	@ (800aee8 <LPS22DF_0_Probe+0x17c>)
 800ae08:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800ae0a:	4b3a      	ldr	r3, [pc, #232]	@ (800aef4 <LPS22DF_0_Probe+0x188>)
 800ae0c:	4a3a      	ldr	r2, [pc, #232]	@ (800aef8 <LPS22DF_0_Probe+0x18c>)
 800ae0e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800ae10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d11e      	bne.n	800ae54 <LPS22DF_0_Probe+0xe8>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d019      	beq.n	800ae54 <LPS22DF_0_Probe+0xe8>
 800ae20:	7a3b      	ldrb	r3, [r7, #8]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d116      	bne.n	800ae54 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800ae26:	4b35      	ldr	r3, [pc, #212]	@ (800aefc <LPS22DF_0_Probe+0x190>)
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	4a35      	ldr	r2, [pc, #212]	@ (800af00 <LPS22DF_0_Probe+0x194>)
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4935      	ldr	r1, [pc, #212]	@ (800af04 <LPS22DF_0_Probe+0x198>)
 800ae30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800ae34:	4b2f      	ldr	r3, [pc, #188]	@ (800aef4 <LPS22DF_0_Probe+0x188>)
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a2d      	ldr	r2, [pc, #180]	@ (800aef0 <LPS22DF_0_Probe+0x184>)
 800ae3c:	6852      	ldr	r2, [r2, #4]
 800ae3e:	4610      	mov	r0, r2
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae48:	f06f 0304 	mvn.w	r3, #4
 800ae4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae4e:	e001      	b.n	800ae54 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800ae54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d11e      	bne.n	800ae98 <LPS22DF_0_Probe+0x12c>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d019      	beq.n	800ae98 <LPS22DF_0_Probe+0x12c>
 800ae64:	7a7b      	ldrb	r3, [r7, #9]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d116      	bne.n	800ae98 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800ae6a:	4b24      	ldr	r3, [pc, #144]	@ (800aefc <LPS22DF_0_Probe+0x190>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4a24      	ldr	r2, [pc, #144]	@ (800af00 <LPS22DF_0_Probe+0x194>)
 800ae70:	3304      	adds	r3, #4
 800ae72:	4925      	ldr	r1, [pc, #148]	@ (800af08 <LPS22DF_0_Probe+0x19c>)
 800ae74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800ae78:	4b1e      	ldr	r3, [pc, #120]	@ (800aef4 <LPS22DF_0_Probe+0x188>)
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a1c      	ldr	r2, [pc, #112]	@ (800aef0 <LPS22DF_0_Probe+0x184>)
 800ae80:	6852      	ldr	r2, [r2, #4]
 800ae82:	4610      	mov	r0, r2
 800ae84:	4798      	blx	r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae8c:	f06f 0304 	mvn.w	r3, #4
 800ae90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae92:	e001      	b.n	800ae98 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae94:	2300      	movs	r3, #0
 800ae96:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800ae98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <LPS22DF_0_Probe+0x142>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aea8:	f06f 0304 	mvn.w	r3, #4
 800aeac:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800aeae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d107      	bne.n	800aec4 <LPS22DF_0_Probe+0x158>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aebe:	f06f 0304 	mvn.w	r3, #4
 800aec2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800aec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3748      	adds	r7, #72	@ 0x48
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	0800201d 	.word	0x0800201d
 800aed4:	08002081 	.word	0x08002081
 800aed8:	08002135 	.word	0x08002135
 800aedc:	080020d1 	.word	0x080020d1
 800aee0:	08002241 	.word	0x08002241
 800aee4:	0800bfd5 	.word	0x0800bfd5
 800aee8:	200008e4 	.word	0x200008e4
 800aeec:	200008a0 	.word	0x200008a0
 800aef0:	20000858 	.word	0x20000858
 800aef4:	20000894 	.word	0x20000894
 800aef8:	2000006c 	.word	0x2000006c
 800aefc:	200001b0 	.word	0x200001b0
 800af00:	20000864 	.word	0x20000864
 800af04:	20000090 	.word	0x20000090
 800af08:	2000007c 	.word	0x2000007c

0800af0c <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b092      	sub	sp, #72	@ 0x48
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800af14:	2300      	movs	r3, #0
 800af16:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800af18:	2300      	movs	r3, #0
 800af1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800af1c:	2389      	movs	r3, #137	@ 0x89
 800af1e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800af22:	4b53      	ldr	r3, [pc, #332]	@ (800b070 <SHT40AD1B_0_Probe+0x164>)
 800af24:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800af26:	4b53      	ldr	r3, [pc, #332]	@ (800b074 <SHT40AD1B_0_Probe+0x168>)
 800af28:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800af2a:	4b53      	ldr	r3, [pc, #332]	@ (800b078 <SHT40AD1B_0_Probe+0x16c>)
 800af2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800af2e:	4b53      	ldr	r3, [pc, #332]	@ (800b07c <SHT40AD1B_0_Probe+0x170>)
 800af30:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800af32:	4b53      	ldr	r3, [pc, #332]	@ (800b080 <SHT40AD1B_0_Probe+0x174>)
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800af36:	4b53      	ldr	r3, [pc, #332]	@ (800b084 <SHT40AD1B_0_Probe+0x178>)
 800af38:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800af3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af3e:	4619      	mov	r1, r3
 800af40:	4851      	ldr	r0, [pc, #324]	@ (800b088 <SHT40AD1B_0_Probe+0x17c>)
 800af42:	f7fe fce9 	bl	8009918 <SHT40AD1B_RegisterBusIO>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af4c:	f06f 0306 	mvn.w	r3, #6
 800af50:	647b      	str	r3, [r7, #68]	@ 0x44
 800af52:	e087      	b.n	800b064 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800af54:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800af58:	4619      	mov	r1, r3
 800af5a:	484b      	ldr	r0, [pc, #300]	@ (800b088 <SHT40AD1B_0_Probe+0x17c>)
 800af5c:	f7fe fd4c 	bl	80099f8 <SHT40AD1B_ReadID>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af66:	f06f 0306 	mvn.w	r3, #6
 800af6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800af6c:	e07a      	b.n	800b064 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800af6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af76:	f06f 0306 	mvn.w	r3, #6
 800af7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800af7c:	e072      	b.n	800b064 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800af7e:	f107 0308 	add.w	r3, r7, #8
 800af82:	4619      	mov	r1, r3
 800af84:	4840      	ldr	r0, [pc, #256]	@ (800b088 <SHT40AD1B_0_Probe+0x17c>)
 800af86:	f7fe fd47 	bl	8009a18 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800af8a:	7a3b      	ldrb	r3, [r7, #8]
 800af8c:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800af8e:	7a7b      	ldrb	r3, [r7, #9]
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800af94:	7abb      	ldrb	r3, [r7, #10]
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800af9a:	7afb      	ldrb	r3, [r7, #11]
 800af9c:	00db      	lsls	r3, r3, #3
 800af9e:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800afa0:	4a3a      	ldr	r2, [pc, #232]	@ (800b08c <SHT40AD1B_0_Probe+0x180>)
 800afa2:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800afa4:	4b3a      	ldr	r3, [pc, #232]	@ (800b090 <SHT40AD1B_0_Probe+0x184>)
 800afa6:	4a38      	ldr	r2, [pc, #224]	@ (800b088 <SHT40AD1B_0_Probe+0x17c>)
 800afa8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800afaa:	4b3a      	ldr	r3, [pc, #232]	@ (800b094 <SHT40AD1B_0_Probe+0x188>)
 800afac:	4a3a      	ldr	r2, [pc, #232]	@ (800b098 <SHT40AD1B_0_Probe+0x18c>)
 800afae:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800afb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d11e      	bne.n	800aff4 <SHT40AD1B_0_Probe+0xe8>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d019      	beq.n	800aff4 <SHT40AD1B_0_Probe+0xe8>
 800afc0:	7a3b      	ldrb	r3, [r7, #8]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d116      	bne.n	800aff4 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800afc6:	4b35      	ldr	r3, [pc, #212]	@ (800b09c <SHT40AD1B_0_Probe+0x190>)
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4a35      	ldr	r2, [pc, #212]	@ (800b0a0 <SHT40AD1B_0_Probe+0x194>)
 800afcc:	3308      	adds	r3, #8
 800afce:	4935      	ldr	r1, [pc, #212]	@ (800b0a4 <SHT40AD1B_0_Probe+0x198>)
 800afd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800afd4:	4b2f      	ldr	r3, [pc, #188]	@ (800b094 <SHT40AD1B_0_Probe+0x188>)
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a2d      	ldr	r2, [pc, #180]	@ (800b090 <SHT40AD1B_0_Probe+0x184>)
 800afdc:	6892      	ldr	r2, [r2, #8]
 800afde:	4610      	mov	r0, r2
 800afe0:	4798      	blx	r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800afe8:	f06f 0304 	mvn.w	r3, #4
 800afec:	647b      	str	r3, [r7, #68]	@ 0x44
 800afee:	e001      	b.n	800aff4 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aff0:	2300      	movs	r3, #0
 800aff2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800aff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d11e      	bne.n	800b038 <SHT40AD1B_0_Probe+0x12c>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	d019      	beq.n	800b038 <SHT40AD1B_0_Probe+0x12c>
 800b004:	7abb      	ldrb	r3, [r7, #10]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d116      	bne.n	800b038 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b00a:	4b24      	ldr	r3, [pc, #144]	@ (800b09c <SHT40AD1B_0_Probe+0x190>)
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	4a24      	ldr	r2, [pc, #144]	@ (800b0a0 <SHT40AD1B_0_Probe+0x194>)
 800b010:	3308      	adds	r3, #8
 800b012:	4925      	ldr	r1, [pc, #148]	@ (800b0a8 <SHT40AD1B_0_Probe+0x19c>)
 800b014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b018:	4b1e      	ldr	r3, [pc, #120]	@ (800b094 <SHT40AD1B_0_Probe+0x188>)
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a1c      	ldr	r2, [pc, #112]	@ (800b090 <SHT40AD1B_0_Probe+0x184>)
 800b020:	6892      	ldr	r2, [r2, #8]
 800b022:	4610      	mov	r0, r2
 800b024:	4798      	blx	r3
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b02c:	f06f 0304 	mvn.w	r3, #4
 800b030:	647b      	str	r3, [r7, #68]	@ 0x44
 800b032:	e001      	b.n	800b038 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b034:	2300      	movs	r3, #0
 800b036:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d107      	bne.n	800b04e <SHT40AD1B_0_Probe+0x142>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b048:	f06f 0304 	mvn.w	r3, #4
 800b04c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b04e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b050:	2b00      	cmp	r3, #0
 800b052:	d107      	bne.n	800b064 <SHT40AD1B_0_Probe+0x158>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f003 0308 	and.w	r3, r3, #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b05e:	f06f 0304 	mvn.w	r3, #4
 800b062:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b066:	4618      	mov	r0, r3
 800b068:	3748      	adds	r7, #72	@ 0x48
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	0800201d 	.word	0x0800201d
 800b074:	08002081 	.word	0x08002081
 800b078:	080021ed 	.word	0x080021ed
 800b07c:	08002199 	.word	0x08002199
 800b080:	08002241 	.word	0x08002241
 800b084:	0800bfd5 	.word	0x0800bfd5
 800b088:	2000091c 	.word	0x2000091c
 800b08c:	200008a0 	.word	0x200008a0
 800b090:	20000858 	.word	0x20000858
 800b094:	20000894 	.word	0x20000894
 800b098:	20000154 	.word	0x20000154
 800b09c:	200001b0 	.word	0x200001b0
 800b0a0:	20000864 	.word	0x20000864
 800b0a4:	20000178 	.word	0x20000178
 800b0a8:	20000164 	.word	0x20000164

0800b0ac <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08e      	sub	sp, #56	@ 0x38
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	f200 80d4 	bhi.w	800b272 <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d0 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b0e1 	.word	0x0800b0e1
 800b0d4:	0800b147 	.word	0x0800b147
 800b0d8:	0800b1ab 	.word	0x0800b1ab
 800b0dc:	0800b20f 	.word	0x0800b20f
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b0e0:	6838      	ldr	r0, [r7, #0]
 800b0e2:	f000 fa35 	bl	800b550 <LIS2MDL_0_Probe>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f0:	e101      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b0f2:	4a83      	ldr	r2, [pc, #524]	@ (800b300 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	4981      	ldr	r1, [pc, #516]	@ (800b304 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b104:	f107 010c 	add.w	r1, r7, #12
 800b108:	4610      	mov	r0, r2
 800b10a:	4798      	blx	r3
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b112:	f06f 0306 	mvn.w	r3, #6
 800b116:	e0ee      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b118:	7b3b      	ldrb	r3, [r7, #12]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d103      	bne.n	800b126 <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b120:	f043 0302 	orr.w	r3, r3, #2
 800b124:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b126:	7b7b      	ldrb	r3, [r7, #13]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d103      	bne.n	800b134 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	2b01      	cmp	r3, #1
 800b138:	f040 809f 	bne.w	800b27a <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	f043 0304 	orr.w	r3, r3, #4
 800b142:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b144:	e099      	b.n	800b27a <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b146:	6838      	ldr	r0, [r7, #0]
 800b148:	f000 faaa 	bl	800b6a0 <LSM6DSV16X_0_Probe>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b152:	f04f 33ff 	mov.w	r3, #4294967295
 800b156:	e0ce      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b158:	4a69      	ldr	r2, [pc, #420]	@ (800b300 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	4968      	ldr	r1, [pc, #416]	@ (800b304 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b16a:	f107 010c 	add.w	r1, r7, #12
 800b16e:	4610      	mov	r0, r2
 800b170:	4798      	blx	r3
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b178:	f06f 0306 	mvn.w	r3, #6
 800b17c:	e0bb      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b17e:	7b3b      	ldrb	r3, [r7, #12]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d103      	bne.n	800b18c <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b186:	f043 0302 	orr.w	r3, r3, #2
 800b18a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b18c:	7b7b      	ldrb	r3, [r7, #13]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d103      	bne.n	800b19a <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	f043 0301 	orr.w	r3, r3, #1
 800b198:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d16e      	bne.n	800b27e <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	f043 0304 	orr.w	r3, r3, #4
 800b1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b1a8:	e069      	b.n	800b27e <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b1aa:	6838      	ldr	r0, [r7, #0]
 800b1ac:	f000 fb44 	bl	800b838 <LIS2DUXS12_0_Probe>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ba:	e09c      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b1bc:	4a50      	ldr	r2, [pc, #320]	@ (800b300 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	494f      	ldr	r1, [pc, #316]	@ (800b304 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b1ce:	f107 010c 	add.w	r1, r7, #12
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4798      	blx	r3
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b1dc:	f06f 0306 	mvn.w	r3, #6
 800b1e0:	e089      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b1e2:	7b3b      	ldrb	r3, [r7, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d103      	bne.n	800b1f0 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ea:	f043 0302 	orr.w	r3, r3, #2
 800b1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b1f0:	7b7b      	ldrb	r3, [r7, #13]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d103      	bne.n	800b1fe <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f8:	f043 0301 	orr.w	r3, r3, #1
 800b1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d13e      	bne.n	800b282 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b206:	f043 0304 	orr.w	r3, r3, #4
 800b20a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b20c:	e039      	b.n	800b282 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b20e:	6838      	ldr	r0, [r7, #0]
 800b210:	f000 fbc8 	bl	800b9a4 <LSM6DSO16IS_0_Probe>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b21a:	f04f 33ff 	mov.w	r3, #4294967295
 800b21e:	e06a      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b220:	4a37      	ldr	r2, [pc, #220]	@ (800b300 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	4936      	ldr	r1, [pc, #216]	@ (800b304 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b232:	f107 010c 	add.w	r1, r7, #12
 800b236:	4610      	mov	r0, r2
 800b238:	4798      	blx	r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b240:	f06f 0306 	mvn.w	r3, #6
 800b244:	e057      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b246:	7b3b      	ldrb	r3, [r7, #12]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d103      	bne.n	800b254 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	f043 0302 	orr.w	r3, r3, #2
 800b252:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b254:	7b7b      	ldrb	r3, [r7, #13]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d103      	bne.n	800b262 <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25c:	f043 0301 	orr.w	r3, r3, #1
 800b260:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d10e      	bne.n	800b286 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	f043 0304 	orr.w	r3, r3, #4
 800b26e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b270:	e009      	b.n	800b286 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b272:	f06f 0301 	mvn.w	r3, #1
 800b276:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b278:	e006      	b.n	800b288 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b27a:	bf00      	nop
 800b27c:	e004      	b.n	800b288 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b27e:	bf00      	nop
 800b280:	e002      	b.n	800b288 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b282:	bf00      	nop
 800b284:	e000      	b.n	800b288 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b286:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b290:	e031      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b292:	2300      	movs	r3, #0
 800b294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b296:	e02a      	b.n	800b2ee <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	4013      	ands	r3, r2
 800b29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d11e      	bne.n	800b2e2 <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b2a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d118      	bne.n	800b2e2 <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b2b0:	4a15      	ldr	r2, [pc, #84]	@ (800b308 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b2b8:	4814      	ldr	r0, [pc, #80]	@ (800b30c <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	4413      	add	r3, r2
 800b2c2:	440b      	add	r3, r1
 800b2c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	490e      	ldr	r1, [pc, #56]	@ (800b304 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	4798      	blx	r3
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b2dc:	f06f 0304 	mvn.w	r3, #4
 800b2e0:	e009      	b.n	800b2f6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d9d1      	bls.n	800b298 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3738      	adds	r7, #56	@ 0x38
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	200009a0 	.word	0x200009a0
 800b304:	20000960 	.word	0x20000960
 800b308:	200001f0 	.word	0x200001f0
 800b30c:	20000970 	.word	0x20000970

0800b310 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d903      	bls.n	800b328 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b320:	f06f 0301 	mvn.w	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e014      	b.n	800b352 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b328:	4a0c      	ldr	r2, [pc, #48]	@ (800b35c <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	490b      	ldr	r1, [pc, #44]	@ (800b360 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b346:	f06f 0306 	mvn.w	r3, #6
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e001      	b.n	800b352 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b352:	68fb      	ldr	r3, [r7, #12]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200009a0 	.word	0x200009a0
 800b360:	20000960 	.word	0x20000960

0800b364 <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b03      	cmp	r3, #3
 800b372:	d903      	bls.n	800b37c <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b374:	f06f 0301 	mvn.w	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e014      	b.n	800b3a6 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800b37c:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b0 <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	490b      	ldr	r1, [pc, #44]	@ (800b3b4 <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b39a:	f06f 0306 	mvn.w	r3, #6
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e001      	b.n	800b3a6 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	200009a0 	.word	0x200009a0
 800b3b4:	20000960 	.word	0x20000960

0800b3b8 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d903      	bls.n	800b3d2 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b3ca:	f06f 0301 	mvn.w	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	e029      	b.n	800b426 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b3d2:	4a17      	ldr	r2, [pc, #92]	@ (800b430 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	4013      	ands	r3, r2
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d11d      	bne.n	800b420 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b3e4:	4a13      	ldr	r2, [pc, #76]	@ (800b434 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b3ec:	4812      	ldr	r0, [pc, #72]	@ (800b438 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	440b      	add	r3, r1
 800b3f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	490f      	ldr	r1, [pc, #60]	@ (800b43c <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b412:	f06f 0304 	mvn.w	r3, #4
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e005      	b.n	800b426 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b41a:	2300      	movs	r3, #0
 800b41c:	617b      	str	r3, [r7, #20]
 800b41e:	e002      	b.n	800b426 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b420:	f06f 0301 	mvn.w	r3, #1
 800b424:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b426:	697b      	ldr	r3, [r7, #20]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	200009b0 	.word	0x200009b0
 800b434:	200001f0 	.word	0x200001f0
 800b438:	20000970 	.word	0x20000970
 800b43c:	20000960 	.word	0x20000960

0800b440 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d903      	bls.n	800b45a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b452:	f06f 0301 	mvn.w	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	e029      	b.n	800b4ae <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b45a:	4a17      	ldr	r2, [pc, #92]	@ (800b4b8 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	4013      	ands	r3, r2
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d11d      	bne.n	800b4a8 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b46c:	4a13      	ldr	r2, [pc, #76]	@ (800b4bc <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b474:	4812      	ldr	r0, [pc, #72]	@ (800b4c0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4613      	mov	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	4413      	add	r3, r2
 800b47e:	440b      	add	r3, r1
 800b480:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	490f      	ldr	r1, [pc, #60]	@ (800b4c4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b49a:	f06f 0304 	mvn.w	r3, #4
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e005      	b.n	800b4ae <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
 800b4a6:	e002      	b.n	800b4ae <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b4a8:	f06f 0301 	mvn.w	r3, #1
 800b4ac:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b4ae:	697b      	ldr	r3, [r7, #20]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	200009b0 	.word	0x200009b0
 800b4bc:	200001f0 	.word	0x200001f0
 800b4c0:	20000970 	.word	0x20000970
 800b4c4:	20000960 	.word	0x20000960

0800b4c8 <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d903      	bls.n	800b4e2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b4da:	f06f 0301 	mvn.w	r3, #1
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	e029      	b.n	800b536 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b4e2:	4a17      	ldr	r2, [pc, #92]	@ (800b540 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d11d      	bne.n	800b530 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800b4f4:	4a13      	ldr	r2, [pc, #76]	@ (800b544 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b4fc:	4812      	ldr	r0, [pc, #72]	@ (800b548 <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4613      	mov	r3, r2
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	4413      	add	r3, r2
 800b506:	440b      	add	r3, r1
 800b508:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	490f      	ldr	r1, [pc, #60]	@ (800b54c <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b522:	f06f 0304 	mvn.w	r3, #4
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	e005      	b.n	800b536 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	e002      	b.n	800b536 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b530:	f06f 0301 	mvn.w	r3, #1
 800b534:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b536:	697b      	ldr	r3, [r7, #20]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	200009b0 	.word	0x200009b0
 800b544:	200001f0 	.word	0x200001f0
 800b548:	20000970 	.word	0x20000970
 800b54c:	20000960 	.word	0x20000960

0800b550 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b094      	sub	sp, #80	@ 0x50
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b558:	2300      	movs	r3, #0
 800b55a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b55c:	2300      	movs	r3, #0
 800b55e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b560:	233d      	movs	r3, #61	@ 0x3d
 800b562:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b566:	4b40      	ldr	r3, [pc, #256]	@ (800b668 <LIS2MDL_0_Probe+0x118>)
 800b568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b56a:	4b40      	ldr	r3, [pc, #256]	@ (800b66c <LIS2MDL_0_Probe+0x11c>)
 800b56c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b56e:	4b40      	ldr	r3, [pc, #256]	@ (800b670 <LIS2MDL_0_Probe+0x120>)
 800b570:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b572:	4b40      	ldr	r3, [pc, #256]	@ (800b674 <LIS2MDL_0_Probe+0x124>)
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b576:	4b40      	ldr	r3, [pc, #256]	@ (800b678 <LIS2MDL_0_Probe+0x128>)
 800b578:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b57a:	4b40      	ldr	r3, [pc, #256]	@ (800b67c <LIS2MDL_0_Probe+0x12c>)
 800b57c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b57e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b582:	4619      	mov	r1, r3
 800b584:	483e      	ldr	r0, [pc, #248]	@ (800b680 <LIS2MDL_0_Probe+0x130>)
 800b586:	f7f8 fcbb 	bl	8003f00 <LIS2MDL_RegisterBusIO>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b590:	f06f 0306 	mvn.w	r3, #6
 800b594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b596:	e061      	b.n	800b65c <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b598:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b59c:	4619      	mov	r1, r3
 800b59e:	4838      	ldr	r0, [pc, #224]	@ (800b680 <LIS2MDL_0_Probe+0x130>)
 800b5a0:	f7f8 fdca 	bl	8004138 <LIS2MDL_ReadID>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5aa:	f06f 0306 	mvn.w	r3, #6
 800b5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5b0:	e054      	b.n	800b65c <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800b5b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5b6:	2b40      	cmp	r3, #64	@ 0x40
 800b5b8:	d003      	beq.n	800b5c2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5ba:	f06f 0306 	mvn.w	r3, #6
 800b5be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5c0:	e04c      	b.n	800b65c <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800b5c2:	f107 030c 	add.w	r3, r7, #12
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	482d      	ldr	r0, [pc, #180]	@ (800b680 <LIS2MDL_0_Probe+0x130>)
 800b5ca:	f7f8 fddb 	bl	8004184 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b5ce:	7b7b      	ldrb	r3, [r7, #13]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	7b3b      	ldrb	r3, [r7, #12]
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	4a29      	ldr	r2, [pc, #164]	@ (800b684 <LIS2MDL_0_Probe+0x134>)
 800b5e0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800b5e2:	4b29      	ldr	r3, [pc, #164]	@ (800b688 <LIS2MDL_0_Probe+0x138>)
 800b5e4:	4a26      	ldr	r2, [pc, #152]	@ (800b680 <LIS2MDL_0_Probe+0x130>)
 800b5e6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800b5e8:	4b28      	ldr	r3, [pc, #160]	@ (800b68c <LIS2MDL_0_Probe+0x13c>)
 800b5ea:	4a29      	ldr	r2, [pc, #164]	@ (800b690 <LIS2MDL_0_Probe+0x140>)
 800b5ec:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d11d      	bne.n	800b630 <LIS2MDL_0_Probe+0xe0>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f003 0304 	and.w	r3, r3, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d018      	beq.n	800b630 <LIS2MDL_0_Probe+0xe0>
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d115      	bne.n	800b630 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b604:	4b23      	ldr	r3, [pc, #140]	@ (800b694 <LIS2MDL_0_Probe+0x144>)
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	4a23      	ldr	r2, [pc, #140]	@ (800b698 <LIS2MDL_0_Probe+0x148>)
 800b60a:	4924      	ldr	r1, [pc, #144]	@ (800b69c <LIS2MDL_0_Probe+0x14c>)
 800b60c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800b610:	4b1e      	ldr	r3, [pc, #120]	@ (800b68c <LIS2MDL_0_Probe+0x13c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a1c      	ldr	r2, [pc, #112]	@ (800b688 <LIS2MDL_0_Probe+0x138>)
 800b618:	6812      	ldr	r2, [r2, #0]
 800b61a:	4610      	mov	r0, r2
 800b61c:	4798      	blx	r3
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d003      	beq.n	800b62c <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b624:	f06f 0304 	mvn.w	r3, #4
 800b628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b62a:	e001      	b.n	800b630 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d107      	bne.n	800b646 <LIS2MDL_0_Probe+0xf6>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f003 0302 	and.w	r3, r3, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b640:	f06f 0304 	mvn.w	r3, #4
 800b644:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d107      	bne.n	800b65c <LIS2MDL_0_Probe+0x10c>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b656:	f06f 0304 	mvn.w	r3, #4
 800b65a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b65c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3750      	adds	r7, #80	@ 0x50
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	0800201d 	.word	0x0800201d
 800b66c:	08002081 	.word	0x08002081
 800b670:	08002135 	.word	0x08002135
 800b674:	080020d1 	.word	0x080020d1
 800b678:	08002241 	.word	0x08002241
 800b67c:	0800bfd5 	.word	0x0800bfd5
 800b680:	200009c0 	.word	0x200009c0
 800b684:	200009b0 	.word	0x200009b0
 800b688:	20000960 	.word	0x20000960
 800b68c:	200009a0 	.word	0x200009a0
 800b690:	20000038 	.word	0x20000038
 800b694:	200001f0 	.word	0x200001f0
 800b698:	20000970 	.word	0x20000970
 800b69c:	20000048 	.word	0x20000048

0800b6a0 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b094      	sub	sp, #80	@ 0x50
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800b6b0:	23d7      	movs	r3, #215	@ 0xd7
 800b6b2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b6b6:	4b51      	ldr	r3, [pc, #324]	@ (800b7fc <LSM6DSV16X_0_Probe+0x15c>)
 800b6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b6ba:	4b51      	ldr	r3, [pc, #324]	@ (800b800 <LSM6DSV16X_0_Probe+0x160>)
 800b6bc:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b6be:	4b51      	ldr	r3, [pc, #324]	@ (800b804 <LSM6DSV16X_0_Probe+0x164>)
 800b6c0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b6c2:	4b51      	ldr	r3, [pc, #324]	@ (800b808 <LSM6DSV16X_0_Probe+0x168>)
 800b6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b6c6:	4b51      	ldr	r3, [pc, #324]	@ (800b80c <LSM6DSV16X_0_Probe+0x16c>)
 800b6c8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b6ca:	4b51      	ldr	r3, [pc, #324]	@ (800b810 <LSM6DSV16X_0_Probe+0x170>)
 800b6cc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800b6ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	484f      	ldr	r0, [pc, #316]	@ (800b814 <LSM6DSV16X_0_Probe+0x174>)
 800b6d6:	f7fc f983 	bl	80079e0 <LSM6DSV16X_RegisterBusIO>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6e0:	f06f 0306 	mvn.w	r3, #6
 800b6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e6:	e084      	b.n	800b7f2 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	484a      	ldr	r0, [pc, #296]	@ (800b814 <LSM6DSV16X_0_Probe+0x174>)
 800b6ec:	f7fd f905 	bl	80088fa <LSM6DSV16X_Set_Mem_Bank>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6f6:	f06f 0306 	mvn.w	r3, #6
 800b6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6fc:	e079      	b.n	800b7f2 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800b6fe:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b702:	4619      	mov	r1, r3
 800b704:	4843      	ldr	r0, [pc, #268]	@ (800b814 <LSM6DSV16X_0_Probe+0x174>)
 800b706:	f7fc fa9b 	bl	8007c40 <LSM6DSV16X_ReadID>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b710:	f06f 0306 	mvn.w	r3, #6
 800b714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b716:	e06c      	b.n	800b7f2 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800b718:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b71c:	2b70      	cmp	r3, #112	@ 0x70
 800b71e:	d003      	beq.n	800b728 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b720:	f06f 0306 	mvn.w	r3, #6
 800b724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b726:	e064      	b.n	800b7f2 <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800b728:	f107 030c 	add.w	r3, r7, #12
 800b72c:	4619      	mov	r1, r3
 800b72e:	4839      	ldr	r0, [pc, #228]	@ (800b814 <LSM6DSV16X_0_Probe+0x174>)
 800b730:	f7fc fa9c 	bl	8007c6c <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b734:	7b7b      	ldrb	r3, [r7, #13]
 800b736:	461a      	mov	r2, r3
 800b738:	7b3b      	ldrb	r3, [r7, #12]
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	431a      	orrs	r2, r3
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4313      	orrs	r3, r2
 800b744:	4a34      	ldr	r2, [pc, #208]	@ (800b818 <LSM6DSV16X_0_Probe+0x178>)
 800b746:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800b748:	4b34      	ldr	r3, [pc, #208]	@ (800b81c <LSM6DSV16X_0_Probe+0x17c>)
 800b74a:	4a32      	ldr	r2, [pc, #200]	@ (800b814 <LSM6DSV16X_0_Probe+0x174>)
 800b74c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800b74e:	4b34      	ldr	r3, [pc, #208]	@ (800b820 <LSM6DSV16X_0_Probe+0x180>)
 800b750:	4a34      	ldr	r2, [pc, #208]	@ (800b824 <LSM6DSV16X_0_Probe+0x184>)
 800b752:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d11e      	bne.n	800b798 <LSM6DSV16X_0_Probe+0xf8>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d019      	beq.n	800b798 <LSM6DSV16X_0_Probe+0xf8>
 800b764:	7b7b      	ldrb	r3, [r7, #13]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d116      	bne.n	800b798 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b76a:	4b2f      	ldr	r3, [pc, #188]	@ (800b828 <LSM6DSV16X_0_Probe+0x188>)
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	4a2f      	ldr	r2, [pc, #188]	@ (800b82c <LSM6DSV16X_0_Probe+0x18c>)
 800b770:	3303      	adds	r3, #3
 800b772:	492f      	ldr	r1, [pc, #188]	@ (800b830 <LSM6DSV16X_0_Probe+0x190>)
 800b774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800b778:	4b29      	ldr	r3, [pc, #164]	@ (800b820 <LSM6DSV16X_0_Probe+0x180>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a27      	ldr	r2, [pc, #156]	@ (800b81c <LSM6DSV16X_0_Probe+0x17c>)
 800b780:	6852      	ldr	r2, [r2, #4]
 800b782:	4610      	mov	r0, r2
 800b784:	4798      	blx	r3
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b78c:	f06f 0304 	mvn.w	r3, #4
 800b790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b792:	e001      	b.n	800b798 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b794:	2300      	movs	r3, #0
 800b796:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d11e      	bne.n	800b7dc <LSM6DSV16X_0_Probe+0x13c>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d019      	beq.n	800b7dc <LSM6DSV16X_0_Probe+0x13c>
 800b7a8:	7b3b      	ldrb	r3, [r7, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d116      	bne.n	800b7dc <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b828 <LSM6DSV16X_0_Probe+0x188>)
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b82c <LSM6DSV16X_0_Probe+0x18c>)
 800b7b4:	3303      	adds	r3, #3
 800b7b6:	491f      	ldr	r1, [pc, #124]	@ (800b834 <LSM6DSV16X_0_Probe+0x194>)
 800b7b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800b7bc:	4b18      	ldr	r3, [pc, #96]	@ (800b820 <LSM6DSV16X_0_Probe+0x180>)
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a16      	ldr	r2, [pc, #88]	@ (800b81c <LSM6DSV16X_0_Probe+0x17c>)
 800b7c4:	6852      	ldr	r2, [r2, #4]
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	4798      	blx	r3
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7d0:	f06f 0304 	mvn.w	r3, #4
 800b7d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7d6:	e001      	b.n	800b7dc <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d107      	bne.n	800b7f2 <LSM6DSV16X_0_Probe+0x152>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7ec:	f06f 0304 	mvn.w	r3, #4
 800b7f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3750      	adds	r7, #80	@ 0x50
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	0800201d 	.word	0x0800201d
 800b800:	08002081 	.word	0x08002081
 800b804:	08002135 	.word	0x08002135
 800b808:	080020d1 	.word	0x080020d1
 800b80c:	08002241 	.word	0x08002241
 800b810:	0800bfd5 	.word	0x0800bfd5
 800b814:	200009f4 	.word	0x200009f4
 800b818:	200009b0 	.word	0x200009b0
 800b81c:	20000960 	.word	0x20000960
 800b820:	200009a0 	.word	0x200009a0
 800b824:	200000fc 	.word	0x200000fc
 800b828:	200001f0 	.word	0x200001f0
 800b82c:	20000970 	.word	0x20000970
 800b830:	20000130 	.word	0x20000130
 800b834:	2000010c 	.word	0x2000010c

0800b838 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b094      	sub	sp, #80	@ 0x50
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800b840:	2300      	movs	r3, #0
 800b842:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800b844:	2300      	movs	r3, #0
 800b846:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800b848:	2333      	movs	r3, #51	@ 0x33
 800b84a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b84e:	4b47      	ldr	r3, [pc, #284]	@ (800b96c <LIS2DUXS12_0_Probe+0x134>)
 800b850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b852:	4b47      	ldr	r3, [pc, #284]	@ (800b970 <LIS2DUXS12_0_Probe+0x138>)
 800b854:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b856:	4b47      	ldr	r3, [pc, #284]	@ (800b974 <LIS2DUXS12_0_Probe+0x13c>)
 800b858:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b85a:	4b47      	ldr	r3, [pc, #284]	@ (800b978 <LIS2DUXS12_0_Probe+0x140>)
 800b85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b85e:	4b47      	ldr	r3, [pc, #284]	@ (800b97c <LIS2DUXS12_0_Probe+0x144>)
 800b860:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b862:	4b47      	ldr	r3, [pc, #284]	@ (800b980 <LIS2DUXS12_0_Probe+0x148>)
 800b864:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800b866:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b86a:	4619      	mov	r1, r3
 800b86c:	4845      	ldr	r0, [pc, #276]	@ (800b984 <LIS2DUXS12_0_Probe+0x14c>)
 800b86e:	f7f6 fe65 	bl	800253c <LIS2DUXS12_RegisterBusIO>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b878:	f06f 0306 	mvn.w	r3, #6
 800b87c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b87e:	e070      	b.n	800b962 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800b880:	2100      	movs	r1, #0
 800b882:	4840      	ldr	r0, [pc, #256]	@ (800b984 <LIS2DUXS12_0_Probe+0x14c>)
 800b884:	f7f7 fad2 	bl	8002e2c <LIS2DUXS12_Set_Mem_Bank>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b88e:	f06f 0306 	mvn.w	r3, #6
 800b892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b894:	e065      	b.n	800b962 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800b896:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b89a:	4619      	mov	r1, r3
 800b89c:	4839      	ldr	r0, [pc, #228]	@ (800b984 <LIS2DUXS12_0_Probe+0x14c>)
 800b89e:	f7f6 ffac 	bl	80027fa <LIS2DUXS12_ReadID>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8a8:	f06f 0306 	mvn.w	r3, #6
 800b8ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8ae:	e058      	b.n	800b962 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800b8b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8b4:	2b47      	cmp	r3, #71	@ 0x47
 800b8b6:	d003      	beq.n	800b8c0 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8b8:	f06f 0306 	mvn.w	r3, #6
 800b8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8be:	e050      	b.n	800b962 <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	482f      	ldr	r0, [pc, #188]	@ (800b984 <LIS2DUXS12_0_Probe+0x14c>)
 800b8c8:	f7f6 ffb2 	bl	8002830 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b8cc:	7b7b      	ldrb	r3, [r7, #13]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	7b3b      	ldrb	r3, [r7, #12]
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	4a2a      	ldr	r2, [pc, #168]	@ (800b988 <LIS2DUXS12_0_Probe+0x150>)
 800b8de:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800b8e0:	4b2a      	ldr	r3, [pc, #168]	@ (800b98c <LIS2DUXS12_0_Probe+0x154>)
 800b8e2:	4a28      	ldr	r2, [pc, #160]	@ (800b984 <LIS2DUXS12_0_Probe+0x14c>)
 800b8e4:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800b8e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b990 <LIS2DUXS12_0_Probe+0x158>)
 800b8e8:	4a2a      	ldr	r2, [pc, #168]	@ (800b994 <LIS2DUXS12_0_Probe+0x15c>)
 800b8ea:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10a      	bne.n	800b908 <LIS2DUXS12_0_Probe+0xd0>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <LIS2DUXS12_0_Probe+0xd0>
 800b8fc:	7b7b      	ldrb	r3, [r7, #13]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d102      	bne.n	800b908 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b902:	f06f 0304 	mvn.w	r3, #4
 800b906:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d11e      	bne.n	800b94c <LIS2DUXS12_0_Probe+0x114>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	2b00      	cmp	r3, #0
 800b916:	d019      	beq.n	800b94c <LIS2DUXS12_0_Probe+0x114>
 800b918:	7b3b      	ldrb	r3, [r7, #12]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d116      	bne.n	800b94c <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b91e:	4b1e      	ldr	r3, [pc, #120]	@ (800b998 <LIS2DUXS12_0_Probe+0x160>)
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	4a1e      	ldr	r2, [pc, #120]	@ (800b99c <LIS2DUXS12_0_Probe+0x164>)
 800b924:	3306      	adds	r3, #6
 800b926:	491e      	ldr	r1, [pc, #120]	@ (800b9a0 <LIS2DUXS12_0_Probe+0x168>)
 800b928:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800b92c:	4b18      	ldr	r3, [pc, #96]	@ (800b990 <LIS2DUXS12_0_Probe+0x158>)
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a16      	ldr	r2, [pc, #88]	@ (800b98c <LIS2DUXS12_0_Probe+0x154>)
 800b934:	6892      	ldr	r2, [r2, #8]
 800b936:	4610      	mov	r0, r2
 800b938:	4798      	blx	r3
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b940:	f06f 0304 	mvn.w	r3, #4
 800b944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b946:	e001      	b.n	800b94c <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b948:	2300      	movs	r3, #0
 800b94a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d107      	bne.n	800b962 <LIS2DUXS12_0_Probe+0x12a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f003 0304 	and.w	r3, r3, #4
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b95c:	f06f 0304 	mvn.w	r3, #4
 800b960:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b964:	4618      	mov	r0, r3
 800b966:	3750      	adds	r7, #80	@ 0x50
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	0800201d 	.word	0x0800201d
 800b970:	08002081 	.word	0x08002081
 800b974:	08002135 	.word	0x08002135
 800b978:	080020d1 	.word	0x080020d1
 800b97c:	08002241 	.word	0x08002241
 800b980:	0800bfd5 	.word	0x0800bfd5
 800b984:	20000a2c 	.word	0x20000a2c
 800b988:	200009b0 	.word	0x200009b0
 800b98c:	20000960 	.word	0x20000960
 800b990:	200009a0 	.word	0x200009a0
 800b994:	20000004 	.word	0x20000004
 800b998:	200001f0 	.word	0x200001f0
 800b99c:	20000970 	.word	0x20000970
 800b9a0:	20000014 	.word	0x20000014

0800b9a4 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b094      	sub	sp, #80	@ 0x50
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800b9b4:	23d5      	movs	r3, #213	@ 0xd5
 800b9b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b9ba:	4b51      	ldr	r3, [pc, #324]	@ (800bb00 <LSM6DSO16IS_0_Probe+0x15c>)
 800b9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b9be:	4b51      	ldr	r3, [pc, #324]	@ (800bb04 <LSM6DSO16IS_0_Probe+0x160>)
 800b9c0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b9c2:	4b51      	ldr	r3, [pc, #324]	@ (800bb08 <LSM6DSO16IS_0_Probe+0x164>)
 800b9c4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b9c6:	4b51      	ldr	r3, [pc, #324]	@ (800bb0c <LSM6DSO16IS_0_Probe+0x168>)
 800b9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b9ca:	4b51      	ldr	r3, [pc, #324]	@ (800bb10 <LSM6DSO16IS_0_Probe+0x16c>)
 800b9cc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b9ce:	4b51      	ldr	r3, [pc, #324]	@ (800bb14 <LSM6DSO16IS_0_Probe+0x170>)
 800b9d0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800b9d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	484f      	ldr	r0, [pc, #316]	@ (800bb18 <LSM6DSO16IS_0_Probe+0x174>)
 800b9da:	f7fa facd 	bl	8005f78 <LSM6DSO16IS_RegisterBusIO>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d003      	beq.n	800b9ec <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b9e4:	f06f 0306 	mvn.w	r3, #6
 800b9e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9ea:	e084      	b.n	800baf6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	484a      	ldr	r0, [pc, #296]	@ (800bb18 <LSM6DSO16IS_0_Probe+0x174>)
 800b9f0:	f7fb f8f3 	bl	8006bda <LSM6DSO16IS_Set_Mem_Bank>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b9fa:	f06f 0306 	mvn.w	r3, #6
 800b9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba00:	e079      	b.n	800baf6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800ba02:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ba06:	4619      	mov	r1, r3
 800ba08:	4843      	ldr	r0, [pc, #268]	@ (800bb18 <LSM6DSO16IS_0_Probe+0x174>)
 800ba0a:	f7fa fbb3 	bl	8006174 <LSM6DSO16IS_ReadID>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba14:	f06f 0306 	mvn.w	r3, #6
 800ba18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba1a:	e06c      	b.n	800baf6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800ba1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba20:	2b22      	cmp	r3, #34	@ 0x22
 800ba22:	d003      	beq.n	800ba2c <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba24:	f06f 0306 	mvn.w	r3, #6
 800ba28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba2a:	e064      	b.n	800baf6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800ba2c:	f107 030c 	add.w	r3, r7, #12
 800ba30:	4619      	mov	r1, r3
 800ba32:	4839      	ldr	r0, [pc, #228]	@ (800bb18 <LSM6DSO16IS_0_Probe+0x174>)
 800ba34:	f7fa fbb6 	bl	80061a4 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ba38:	7b7b      	ldrb	r3, [r7, #13]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	7b3b      	ldrb	r3, [r7, #12]
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	431a      	orrs	r2, r3
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4313      	orrs	r3, r2
 800ba48:	4a34      	ldr	r2, [pc, #208]	@ (800bb1c <LSM6DSO16IS_0_Probe+0x178>)
 800ba4a:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800ba4c:	4b34      	ldr	r3, [pc, #208]	@ (800bb20 <LSM6DSO16IS_0_Probe+0x17c>)
 800ba4e:	4a32      	ldr	r2, [pc, #200]	@ (800bb18 <LSM6DSO16IS_0_Probe+0x174>)
 800ba50:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800ba52:	4b34      	ldr	r3, [pc, #208]	@ (800bb24 <LSM6DSO16IS_0_Probe+0x180>)
 800ba54:	4a34      	ldr	r2, [pc, #208]	@ (800bb28 <LSM6DSO16IS_0_Probe+0x184>)
 800ba56:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800ba58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d11e      	bne.n	800ba9c <LSM6DSO16IS_0_Probe+0xf8>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d019      	beq.n	800ba9c <LSM6DSO16IS_0_Probe+0xf8>
 800ba68:	7b7b      	ldrb	r3, [r7, #13]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d116      	bne.n	800ba9c <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ba6e:	4b2f      	ldr	r3, [pc, #188]	@ (800bb2c <LSM6DSO16IS_0_Probe+0x188>)
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	4a2f      	ldr	r2, [pc, #188]	@ (800bb30 <LSM6DSO16IS_0_Probe+0x18c>)
 800ba74:	3309      	adds	r3, #9
 800ba76:	492f      	ldr	r1, [pc, #188]	@ (800bb34 <LSM6DSO16IS_0_Probe+0x190>)
 800ba78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800ba7c:	4b29      	ldr	r3, [pc, #164]	@ (800bb24 <LSM6DSO16IS_0_Probe+0x180>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a27      	ldr	r2, [pc, #156]	@ (800bb20 <LSM6DSO16IS_0_Probe+0x17c>)
 800ba84:	68d2      	ldr	r2, [r2, #12]
 800ba86:	4610      	mov	r0, r2
 800ba88:	4798      	blx	r3
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d003      	beq.n	800ba98 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba90:	f06f 0304 	mvn.w	r3, #4
 800ba94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba96:	e001      	b.n	800ba9c <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800ba9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d11e      	bne.n	800bae0 <LSM6DSO16IS_0_Probe+0x13c>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d019      	beq.n	800bae0 <LSM6DSO16IS_0_Probe+0x13c>
 800baac:	7b3b      	ldrb	r3, [r7, #12]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d116      	bne.n	800bae0 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bab2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb2c <LSM6DSO16IS_0_Probe+0x188>)
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	4a1e      	ldr	r2, [pc, #120]	@ (800bb30 <LSM6DSO16IS_0_Probe+0x18c>)
 800bab8:	3309      	adds	r3, #9
 800baba:	491f      	ldr	r1, [pc, #124]	@ (800bb38 <LSM6DSO16IS_0_Probe+0x194>)
 800babc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800bac0:	4b18      	ldr	r3, [pc, #96]	@ (800bb24 <LSM6DSO16IS_0_Probe+0x180>)
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a16      	ldr	r2, [pc, #88]	@ (800bb20 <LSM6DSO16IS_0_Probe+0x17c>)
 800bac8:	68d2      	ldr	r2, [r2, #12]
 800baca:	4610      	mov	r0, r2
 800bacc:	4798      	blx	r3
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bad4:	f06f 0304 	mvn.w	r3, #4
 800bad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bada:	e001      	b.n	800bae0 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800badc:	2300      	movs	r3, #0
 800bade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d107      	bne.n	800baf6 <LSM6DSO16IS_0_Probe+0x152>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f003 0304 	and.w	r3, r3, #4
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800baf0:	f06f 0304 	mvn.w	r3, #4
 800baf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800baf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3750      	adds	r7, #80	@ 0x50
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	0800201d 	.word	0x0800201d
 800bb04:	08002081 	.word	0x08002081
 800bb08:	08002135 	.word	0x08002135
 800bb0c:	080020d1 	.word	0x080020d1
 800bb10:	08002241 	.word	0x08002241
 800bb14:	0800bfd5 	.word	0x0800bfd5
 800bb18:	20000a68 	.word	0x20000a68
 800bb1c:	200009b0 	.word	0x200009b0
 800bb20:	20000960 	.word	0x20000960
 800bb24:	200009a0 	.word	0x200009a0
 800bb28:	200000a4 	.word	0x200000a4
 800bb2c:	200001f0 	.word	0x200001f0
 800bb30:	20000970 	.word	0x20000970
 800bb34:	200000d8 	.word	0x200000d8
 800bb38:	200000b4 	.word	0x200000b4

0800bb3c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	4a04      	ldr	r2, [pc, #16]	@ (800bb5c <BSP_LED_Init+0x20>)
 800bb4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb4e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	080167c0 	.word	0x080167c0

0800bb60 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb66:	2300      	movs	r3, #0
 800bb68:	60bb      	str	r3, [r7, #8]
 800bb6a:	4b1c      	ldr	r3, [pc, #112]	@ (800bbdc <LED_USER_GPIO_Init+0x7c>)
 800bb6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb6e:	4a1b      	ldr	r2, [pc, #108]	@ (800bbdc <LED_USER_GPIO_Init+0x7c>)
 800bb70:	f043 0301 	orr.w	r3, r3, #1
 800bb74:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb76:	4b19      	ldr	r3, [pc, #100]	@ (800bbdc <LED_USER_GPIO_Init+0x7c>)
 800bb78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb82:	f107 030c 	add.w	r3, r7, #12
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	605a      	str	r2, [r3, #4]
 800bb8c:	609a      	str	r2, [r3, #8]
 800bb8e:	60da      	str	r2, [r3, #12]
 800bb90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb92:	2300      	movs	r3, #0
 800bb94:	607b      	str	r3, [r7, #4]
 800bb96:	4b11      	ldr	r3, [pc, #68]	@ (800bbdc <LED_USER_GPIO_Init+0x7c>)
 800bb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb9a:	4a10      	ldr	r2, [pc, #64]	@ (800bbdc <LED_USER_GPIO_Init+0x7c>)
 800bb9c:	f043 0301 	orr.w	r3, r3, #1
 800bba0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bba2:	4b0e      	ldr	r3, [pc, #56]	@ (800bbdc <LED_USER_GPIO_Init+0x7c>)
 800bba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	607b      	str	r3, [r7, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2120      	movs	r1, #32
 800bbb2:	480b      	ldr	r0, [pc, #44]	@ (800bbe0 <LED_USER_GPIO_Init+0x80>)
 800bbb4:	f001 f962 	bl	800ce7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800bbb8:	2320      	movs	r3, #32
 800bbba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800bbc8:	f107 030c 	add.w	r3, r7, #12
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4804      	ldr	r0, [pc, #16]	@ (800bbe0 <LED_USER_GPIO_Init+0x80>)
 800bbd0:	f000 fed4 	bl	800c97c <HAL_GPIO_Init>

}
 800bbd4:	bf00      	nop
 800bbd6:	3720      	adds	r7, #32
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	40023800 	.word	0x40023800
 800bbe0:	40020000 	.word	0x40020000

0800bbe4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	460a      	mov	r2, r1
 800bbee:	71fb      	strb	r3, [r7, #7]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	4a1f      	ldr	r2, [pc, #124]	@ (800bc78 <BSP_PB_Init+0x94>)
 800bbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc00:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800bc02:	79bb      	ldrb	r3, [r7, #6]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d132      	bne.n	800bc6e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800bc08:	79fb      	ldrb	r3, [r7, #7]
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	4a1b      	ldr	r2, [pc, #108]	@ (800bc7c <BSP_PB_Init+0x98>)
 800bc0e:	441a      	add	r2, r3
 800bc10:	79fb      	ldrb	r3, [r7, #7]
 800bc12:	491b      	ldr	r1, [pc, #108]	@ (800bc80 <BSP_PB_Init+0x9c>)
 800bc14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	f000 fe9a 	bl	800c954 <HAL_EXTI_GetHandle>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bc26:	f06f 0303 	mvn.w	r3, #3
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	e01f      	b.n	800bc6e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800bc2e:	79fb      	ldrb	r3, [r7, #7]
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	4a12      	ldr	r2, [pc, #72]	@ (800bc7c <BSP_PB_Init+0x98>)
 800bc34:	1898      	adds	r0, r3, r2
 800bc36:	79fb      	ldrb	r3, [r7, #7]
 800bc38:	4a12      	ldr	r2, [pc, #72]	@ (800bc84 <BSP_PB_Init+0xa0>)
 800bc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	2100      	movs	r1, #0
 800bc42:	f000 fe6d 	bl	800c920 <HAL_EXTI_RegisterCallback>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bc4c:	f06f 0303 	mvn.w	r3, #3
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e00c      	b.n	800bc6e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800bc54:	2028      	movs	r0, #40	@ 0x28
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	4a0b      	ldr	r2, [pc, #44]	@ (800bc88 <BSP_PB_Init+0xa4>)
 800bc5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4619      	mov	r1, r3
 800bc62:	f000 fab6 	bl	800c1d2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800bc66:	2328      	movs	r3, #40	@ 0x28
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 face 	bl	800c20a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	080167c4 	.word	0x080167c4
 800bc7c:	20000214 	.word	0x20000214
 800bc80:	080167c8 	.word	0x080167c8
 800bc84:	080167cc 	.word	0x080167cc
 800bc88:	080167d0 	.word	0x080167d0

0800bc8c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800bc96:	79fb      	ldrb	r3, [r7, #7]
 800bc98:	4a09      	ldr	r2, [pc, #36]	@ (800bcc0 <BSP_PB_GetState+0x34>)
 800bc9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f001 f8d1 	bl	800ce4c <HAL_GPIO_ReadPin>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	bf0c      	ite	eq
 800bcb0:	2301      	moveq	r3, #1
 800bcb2:	2300      	movne	r3, #0
 800bcb4:	b2db      	uxtb	r3, r3
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000210 	.word	0x20000210

0800bcc4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800bcc8:	2000      	movs	r0, #0
 800bcca:	f005 f877 	bl	8010dbc <BSP_PB_Callback>
}
 800bcce:	bf00      	nop
 800bcd0:	bd80      	pop	{r7, pc}
	...

0800bcd4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	4b1a      	ldr	r3, [pc, #104]	@ (800bd48 <BUTTON_USER_GPIO_Init+0x74>)
 800bce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce2:	4a19      	ldr	r2, [pc, #100]	@ (800bd48 <BUTTON_USER_GPIO_Init+0x74>)
 800bce4:	f043 0304 	orr.w	r3, r3, #4
 800bce8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bcea:	4b17      	ldr	r3, [pc, #92]	@ (800bd48 <BUTTON_USER_GPIO_Init+0x74>)
 800bcec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	60bb      	str	r3, [r7, #8]
 800bcf4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcf6:	f107 030c 	add.w	r3, r7, #12
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	605a      	str	r2, [r3, #4]
 800bd00:	609a      	str	r2, [r3, #8]
 800bd02:	60da      	str	r2, [r3, #12]
 800bd04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd06:	2300      	movs	r3, #0
 800bd08:	607b      	str	r3, [r7, #4]
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd48 <BUTTON_USER_GPIO_Init+0x74>)
 800bd0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd0e:	4a0e      	ldr	r2, [pc, #56]	@ (800bd48 <BUTTON_USER_GPIO_Init+0x74>)
 800bd10:	f043 0304 	orr.w	r3, r3, #4
 800bd14:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd16:	4b0c      	ldr	r3, [pc, #48]	@ (800bd48 <BUTTON_USER_GPIO_Init+0x74>)
 800bd18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd1a:	f003 0304 	and.w	r3, r3, #4
 800bd1e:	607b      	str	r3, [r7, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800bd22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bd28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800bd2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800bd32:	f107 030c 	add.w	r3, r7, #12
 800bd36:	4619      	mov	r1, r3
 800bd38:	4804      	ldr	r0, [pc, #16]	@ (800bd4c <BUTTON_USER_GPIO_Init+0x78>)
 800bd3a:	f000 fe1f 	bl	800c97c <HAL_GPIO_Init>

}
 800bd3e:	bf00      	nop
 800bd40:	3720      	adds	r7, #32
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	40023800 	.word	0x40023800
 800bd4c:	40020800 	.word	0x40020800

0800bd50 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d903      	bls.n	800bd6c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bd64:	f06f 0301 	mvn.w	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e025      	b.n	800bdb8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	79fa      	ldrb	r2, [r7, #7]
 800bd70:	4914      	ldr	r1, [pc, #80]	@ (800bdc4 <BSP_COM_Init+0x74>)
 800bd72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd76:	4814      	ldr	r0, [pc, #80]	@ (800bdc8 <BSP_COM_Init+0x78>)
 800bd78:	4613      	mov	r3, r2
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	4403      	add	r3, r0
 800bd82:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800bd84:	79fa      	ldrb	r2, [r7, #7]
 800bd86:	4613      	mov	r3, r2
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4a0e      	ldr	r2, [pc, #56]	@ (800bdc8 <BSP_COM_Init+0x78>)
 800bd90:	4413      	add	r3, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 f864 	bl	800be60 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800bd98:	79fa      	ldrb	r2, [r7, #7]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	4413      	add	r3, r2
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	4a09      	ldr	r2, [pc, #36]	@ (800bdc8 <BSP_COM_Init+0x78>)
 800bda4:	4413      	add	r3, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 f810 	bl	800bdcc <MX_USART2_UART_Init>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d002      	beq.n	800bdb8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bdb2:	f06f 0303 	mvn.w	r3, #3
 800bdb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	2000021c 	.word	0x2000021c
 800bdc8:	20000aa0 	.word	0x20000aa0

0800bdcc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a12      	ldr	r2, [pc, #72]	@ (800be24 <MX_USART2_UART_Init+0x58>)
 800bddc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800bde4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	220c      	movs	r2, #12
 800bdfc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f004 f9bc 	bl	8010188 <HAL_UART_Init>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	40004400 	.word	0x40004400

0800be28 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800be30:	4b09      	ldr	r3, [pc, #36]	@ (800be58 <__io_putchar+0x30>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	461a      	mov	r2, r3
 800be36:	4613      	mov	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	4413      	add	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	4a07      	ldr	r2, [pc, #28]	@ (800be5c <__io_putchar+0x34>)
 800be40:	1898      	adds	r0, r3, r2
 800be42:	1d39      	adds	r1, r7, #4
 800be44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800be48:	2201      	movs	r2, #1
 800be4a:	f004 f9f7 	bl	801023c <HAL_UART_Transmit>
  return ch;
 800be4e:	687b      	ldr	r3, [r7, #4]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20000ae8 	.word	0x20000ae8
 800be5c:	20000aa0 	.word	0x20000aa0

0800be60 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	@ 0x28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
 800be6c:	4b1e      	ldr	r3, [pc, #120]	@ (800bee8 <USART2_MspInit+0x88>)
 800be6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be70:	4a1d      	ldr	r2, [pc, #116]	@ (800bee8 <USART2_MspInit+0x88>)
 800be72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be76:	6413      	str	r3, [r2, #64]	@ 0x40
 800be78:	4b1b      	ldr	r3, [pc, #108]	@ (800bee8 <USART2_MspInit+0x88>)
 800be7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be80:	613b      	str	r3, [r7, #16]
 800be82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be84:	2300      	movs	r3, #0
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <USART2_MspInit+0x88>)
 800be8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be8c:	4a16      	ldr	r2, [pc, #88]	@ (800bee8 <USART2_MspInit+0x88>)
 800be8e:	f043 0301 	orr.w	r3, r3, #1
 800be92:	6313      	str	r3, [r2, #48]	@ 0x30
 800be94:	4b14      	ldr	r3, [pc, #80]	@ (800bee8 <USART2_MspInit+0x88>)
 800be96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800bea0:	2304      	movs	r3, #4
 800bea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea4:	2302      	movs	r3, #2
 800bea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800beac:	2300      	movs	r3, #0
 800beae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800beb0:	2307      	movs	r3, #7
 800beb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800beb4:	f107 0314 	add.w	r3, r7, #20
 800beb8:	4619      	mov	r1, r3
 800beba:	480c      	ldr	r0, [pc, #48]	@ (800beec <USART2_MspInit+0x8c>)
 800bebc:	f000 fd5e 	bl	800c97c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800bec0:	2308      	movs	r3, #8
 800bec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bec4:	2302      	movs	r3, #2
 800bec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bec8:	2300      	movs	r3, #0
 800beca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800becc:	2300      	movs	r3, #0
 800bece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800bed0:	2307      	movs	r3, #7
 800bed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800bed4:	f107 0314 	add.w	r3, r7, #20
 800bed8:	4619      	mov	r1, r3
 800beda:	4804      	ldr	r0, [pc, #16]	@ (800beec <USART2_MspInit+0x8c>)
 800bedc:	f000 fd4e 	bl	800c97c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800bee0:	bf00      	nop
 800bee2:	3728      	adds	r7, #40	@ 0x28
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	40023800 	.word	0x40023800
 800beec:	40020000 	.word	0x40020000

0800bef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bef4:	4b0e      	ldr	r3, [pc, #56]	@ (800bf30 <HAL_Init+0x40>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a0d      	ldr	r2, [pc, #52]	@ (800bf30 <HAL_Init+0x40>)
 800befa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800befe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bf00:	4b0b      	ldr	r3, [pc, #44]	@ (800bf30 <HAL_Init+0x40>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a0a      	ldr	r2, [pc, #40]	@ (800bf30 <HAL_Init+0x40>)
 800bf06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bf0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bf0c:	4b08      	ldr	r3, [pc, #32]	@ (800bf30 <HAL_Init+0x40>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a07      	ldr	r2, [pc, #28]	@ (800bf30 <HAL_Init+0x40>)
 800bf12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bf18:	2003      	movs	r0, #3
 800bf1a:	f000 f94f 	bl	800c1bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bf1e:	2000      	movs	r0, #0
 800bf20:	f000 f808 	bl	800bf34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bf24:	f7f5 ff62 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	40023c00 	.word	0x40023c00

0800bf34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bf3c:	4b12      	ldr	r3, [pc, #72]	@ (800bf88 <HAL_InitTick+0x54>)
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	4b12      	ldr	r3, [pc, #72]	@ (800bf8c <HAL_InitTick+0x58>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	4619      	mov	r1, r3
 800bf46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bf4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 f967 	bl	800c226 <HAL_SYSTICK_Config>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e00e      	b.n	800bf80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b0f      	cmp	r3, #15
 800bf66:	d80a      	bhi.n	800bf7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bf68:	2200      	movs	r2, #0
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	f000 f92f 	bl	800c1d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bf74:	4a06      	ldr	r2, [pc, #24]	@ (800bf90 <HAL_InitTick+0x5c>)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e000      	b.n	800bf80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	20000000 	.word	0x20000000
 800bf8c:	20000224 	.word	0x20000224
 800bf90:	20000220 	.word	0x20000220

0800bf94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bf94:	b480      	push	{r7}
 800bf96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bf98:	4b06      	ldr	r3, [pc, #24]	@ (800bfb4 <HAL_IncTick+0x20>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4b06      	ldr	r3, [pc, #24]	@ (800bfb8 <HAL_IncTick+0x24>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	4a04      	ldr	r2, [pc, #16]	@ (800bfb8 <HAL_IncTick+0x24>)
 800bfa6:	6013      	str	r3, [r2, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	20000224 	.word	0x20000224
 800bfb8:	20000aec 	.word	0x20000aec

0800bfbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	af00      	add	r7, sp, #0
  return uwTick;
 800bfc0:	4b03      	ldr	r3, [pc, #12]	@ (800bfd0 <HAL_GetTick+0x14>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	20000aec 	.word	0x20000aec

0800bfd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bfdc:	f7ff ffee 	bl	800bfbc <HAL_GetTick>
 800bfe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfec:	d005      	beq.n	800bffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bfee:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <HAL_Delay+0x44>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bffa:	bf00      	nop
 800bffc:	f7ff ffde 	bl	800bfbc <HAL_GetTick>
 800c000:	4602      	mov	r2, r0
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d8f7      	bhi.n	800bffc <HAL_Delay+0x28>
  {
  }
}
 800c00c:	bf00      	nop
 800c00e:	bf00      	nop
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20000224 	.word	0x20000224

0800c01c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c02c:	4b0c      	ldr	r3, [pc, #48]	@ (800c060 <__NVIC_SetPriorityGrouping+0x44>)
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c038:	4013      	ands	r3, r2
 800c03a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c04c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c04e:	4a04      	ldr	r2, [pc, #16]	@ (800c060 <__NVIC_SetPriorityGrouping+0x44>)
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	60d3      	str	r3, [r2, #12]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	e000ed00 	.word	0xe000ed00

0800c064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c064:	b480      	push	{r7}
 800c066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c068:	4b04      	ldr	r3, [pc, #16]	@ (800c07c <__NVIC_GetPriorityGrouping+0x18>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	0a1b      	lsrs	r3, r3, #8
 800c06e:	f003 0307 	and.w	r3, r3, #7
}
 800c072:	4618      	mov	r0, r3
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	e000ed00 	.word	0xe000ed00

0800c080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	db0b      	blt.n	800c0aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	f003 021f 	and.w	r2, r3, #31
 800c098:	4907      	ldr	r1, [pc, #28]	@ (800c0b8 <__NVIC_EnableIRQ+0x38>)
 800c09a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c09e:	095b      	lsrs	r3, r3, #5
 800c0a0:	2001      	movs	r0, #1
 800c0a2:	fa00 f202 	lsl.w	r2, r0, r2
 800c0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	e000e100 	.word	0xe000e100

0800c0bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	db0a      	blt.n	800c0e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	490c      	ldr	r1, [pc, #48]	@ (800c108 <__NVIC_SetPriority+0x4c>)
 800c0d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0da:	0112      	lsls	r2, r2, #4
 800c0dc:	b2d2      	uxtb	r2, r2
 800c0de:	440b      	add	r3, r1
 800c0e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c0e4:	e00a      	b.n	800c0fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	4908      	ldr	r1, [pc, #32]	@ (800c10c <__NVIC_SetPriority+0x50>)
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	f003 030f 	and.w	r3, r3, #15
 800c0f2:	3b04      	subs	r3, #4
 800c0f4:	0112      	lsls	r2, r2, #4
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	761a      	strb	r2, [r3, #24]
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	e000e100 	.word	0xe000e100
 800c10c:	e000ed00 	.word	0xe000ed00

0800c110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c110:	b480      	push	{r7}
 800c112:	b089      	sub	sp, #36	@ 0x24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f003 0307 	and.w	r3, r3, #7
 800c122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	f1c3 0307 	rsb	r3, r3, #7
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	bf28      	it	cs
 800c12e:	2304      	movcs	r3, #4
 800c130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	3304      	adds	r3, #4
 800c136:	2b06      	cmp	r3, #6
 800c138:	d902      	bls.n	800c140 <NVIC_EncodePriority+0x30>
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	3b03      	subs	r3, #3
 800c13e:	e000      	b.n	800c142 <NVIC_EncodePriority+0x32>
 800c140:	2300      	movs	r3, #0
 800c142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c144:	f04f 32ff 	mov.w	r2, #4294967295
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	fa02 f303 	lsl.w	r3, r2, r3
 800c14e:	43da      	mvns	r2, r3
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	401a      	ands	r2, r3
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c158:	f04f 31ff 	mov.w	r1, #4294967295
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	fa01 f303 	lsl.w	r3, r1, r3
 800c162:	43d9      	mvns	r1, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c168:	4313      	orrs	r3, r2
         );
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3724      	adds	r7, #36	@ 0x24
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
	...

0800c178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3b01      	subs	r3, #1
 800c184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c188:	d301      	bcc.n	800c18e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c18a:	2301      	movs	r3, #1
 800c18c:	e00f      	b.n	800c1ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c18e:	4a0a      	ldr	r2, [pc, #40]	@ (800c1b8 <SysTick_Config+0x40>)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3b01      	subs	r3, #1
 800c194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c196:	210f      	movs	r1, #15
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	f7ff ff8e 	bl	800c0bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c1a0:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <SysTick_Config+0x40>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c1a6:	4b04      	ldr	r3, [pc, #16]	@ (800c1b8 <SysTick_Config+0x40>)
 800c1a8:	2207      	movs	r2, #7
 800c1aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	e000e010 	.word	0xe000e010

0800c1bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff ff29 	bl	800c01c <__NVIC_SetPriorityGrouping>
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b086      	sub	sp, #24
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	4603      	mov	r3, r0
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
 800c1de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c1e4:	f7ff ff3e 	bl	800c064 <__NVIC_GetPriorityGrouping>
 800c1e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	6978      	ldr	r0, [r7, #20]
 800c1f0:	f7ff ff8e 	bl	800c110 <NVIC_EncodePriority>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff ff5d 	bl	800c0bc <__NVIC_SetPriority>
}
 800c202:	bf00      	nop
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
 800c210:	4603      	mov	r3, r0
 800c212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff ff31 	bl	800c080 <__NVIC_EnableIRQ>
}
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff ffa2 	bl	800c178 <SysTick_Config>
 800c234:	4603      	mov	r3, r0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c24c:	f7ff feb6 	bl	800bfbc <HAL_GetTick>
 800c250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	e099      	b.n	800c390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2202      	movs	r2, #2
 800c260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f022 0201 	bic.w	r2, r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c27c:	e00f      	b.n	800c29e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c27e:	f7ff fe9d 	bl	800bfbc <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	2b05      	cmp	r3, #5
 800c28a:	d908      	bls.n	800c29e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2203      	movs	r2, #3
 800c296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800c29a:	2303      	movs	r3, #3
 800c29c:	e078      	b.n	800c390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1e8      	bne.n	800c27e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	4b38      	ldr	r3, [pc, #224]	@ (800c398 <HAL_DMA_Init+0x158>)
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a1b      	ldr	r3, [r3, #32]
 800c2e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f4:	2b04      	cmp	r3, #4
 800c2f6:	d107      	bne.n	800c308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c300:	4313      	orrs	r3, r2
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	4313      	orrs	r3, r2
 800c306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f023 0307 	bic.w	r3, r3, #7
 800c31e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	4313      	orrs	r3, r2
 800c328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d117      	bne.n	800c362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	4313      	orrs	r3, r2
 800c33a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00e      	beq.n	800c362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fa6f 	bl	800c828 <DMA_CheckFifoParam>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d008      	beq.n	800c362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2240      	movs	r2, #64	@ 0x40
 800c354:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800c35e:	2301      	movs	r3, #1
 800c360:	e016      	b.n	800c390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fa26 	bl	800c7bc <DMA_CalcBaseAndBitshift>
 800c370:	4603      	mov	r3, r0
 800c372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c378:	223f      	movs	r2, #63	@ 0x3f
 800c37a:	409a      	lsls	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	f010803f 	.word	0xf010803f

0800c39c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_DMA_Start_IT+0x26>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e040      	b.n	800c444 <HAL_DMA_Start_IT+0xa8>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d12f      	bne.n	800c436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2202      	movs	r2, #2
 800c3da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	68b9      	ldr	r1, [r7, #8]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 f9b8 	bl	800c760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3f4:	223f      	movs	r2, #63	@ 0x3f
 800c3f6:	409a      	lsls	r2, r3
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0216 	orr.w	r2, r2, #22
 800c40a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f042 0208 	orr.w	r2, r2, #8
 800c422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f042 0201 	orr.w	r2, r2, #1
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	e005      	b.n	800c442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c43e:	2302      	movs	r3, #2
 800c440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c454:	2300      	movs	r3, #0
 800c456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c458:	4b8e      	ldr	r3, [pc, #568]	@ (800c694 <HAL_DMA_IRQHandler+0x248>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a8e      	ldr	r2, [pc, #568]	@ (800c698 <HAL_DMA_IRQHandler+0x24c>)
 800c45e:	fba2 2303 	umull	r2, r3, r2, r3
 800c462:	0a9b      	lsrs	r3, r3, #10
 800c464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c46a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c476:	2208      	movs	r2, #8
 800c478:	409a      	lsls	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4013      	ands	r3, r2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01a      	beq.n	800c4b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d013      	beq.n	800c4b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0204 	bic.w	r2, r2, #4
 800c49e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4a4:	2208      	movs	r2, #8
 800c4a6:	409a      	lsls	r2, r3
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4b0:	f043 0201 	orr.w	r2, r3, #1
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4bc:	2201      	movs	r2, #1
 800c4be:	409a      	lsls	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d012      	beq.n	800c4ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4da:	2201      	movs	r2, #1
 800c4dc:	409a      	lsls	r2, r3
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e6:	f043 0202 	orr.w	r2, r3, #2
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	409a      	lsls	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d012      	beq.n	800c524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0302 	and.w	r3, r3, #2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c510:	2204      	movs	r2, #4
 800c512:	409a      	lsls	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c51c:	f043 0204 	orr.w	r2, r3, #4
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c528:	2210      	movs	r2, #16
 800c52a:	409a      	lsls	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4013      	ands	r3, r2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d043      	beq.n	800c5bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 0308 	and.w	r3, r3, #8
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d03c      	beq.n	800c5bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c546:	2210      	movs	r2, #16
 800c548:	409a      	lsls	r2, r3
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d018      	beq.n	800c58e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c566:	2b00      	cmp	r3, #0
 800c568:	d108      	bne.n	800c57c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d024      	beq.n	800c5bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	4798      	blx	r3
 800c57a:	e01f      	b.n	800c5bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c580:	2b00      	cmp	r3, #0
 800c582:	d01b      	beq.n	800c5bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	4798      	blx	r3
 800c58c:	e016      	b.n	800c5bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d107      	bne.n	800c5ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f022 0208 	bic.w	r2, r2, #8
 800c5aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	409a      	lsls	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 808f 	beq.w	800c6ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0310 	and.w	r3, r3, #16
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 8087 	beq.w	800c6ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5e2:	2220      	movs	r2, #32
 800c5e4:	409a      	lsls	r2, r3
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b05      	cmp	r3, #5
 800c5f4:	d136      	bne.n	800c664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f022 0216 	bic.w	r2, r2, #22
 800c604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	695a      	ldr	r2, [r3, #20]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d103      	bne.n	800c626 <HAL_DMA_IRQHandler+0x1da>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c622:	2b00      	cmp	r3, #0
 800c624:	d007      	beq.n	800c636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f022 0208 	bic.w	r2, r2, #8
 800c634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c63a:	223f      	movs	r2, #63	@ 0x3f
 800c63c:	409a      	lsls	r2, r3
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c656:	2b00      	cmp	r3, #0
 800c658:	d07e      	beq.n	800c758 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	4798      	blx	r3
        }
        return;
 800c662:	e079      	b.n	800c758 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01d      	beq.n	800c6ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10d      	bne.n	800c69c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c684:	2b00      	cmp	r3, #0
 800c686:	d031      	beq.n	800c6ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	4798      	blx	r3
 800c690:	e02c      	b.n	800c6ec <HAL_DMA_IRQHandler+0x2a0>
 800c692:	bf00      	nop
 800c694:	20000000 	.word	0x20000000
 800c698:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d023      	beq.n	800c6ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	4798      	blx	r3
 800c6ac:	e01e      	b.n	800c6ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10f      	bne.n	800c6dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f022 0210 	bic.w	r2, r2, #16
 800c6ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d032      	beq.n	800c75a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d022      	beq.n	800c746 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2205      	movs	r2, #5
 800c704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f022 0201 	bic.w	r2, r2, #1
 800c716:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	3301      	adds	r3, #1
 800c71c:	60bb      	str	r3, [r7, #8]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	429a      	cmp	r2, r3
 800c722:	d307      	bcc.n	800c734 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1f2      	bne.n	800c718 <HAL_DMA_IRQHandler+0x2cc>
 800c732:	e000      	b.n	800c736 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c734:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	4798      	blx	r3
 800c756:	e000      	b.n	800c75a <HAL_DMA_IRQHandler+0x30e>
        return;
 800c758:	bf00      	nop
    }
  }
}
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c77c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	2b40      	cmp	r3, #64	@ 0x40
 800c78c:	d108      	bne.n	800c7a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c79e:	e007      	b.n	800c7b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	60da      	str	r2, [r3, #12]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	3b10      	subs	r3, #16
 800c7cc:	4a14      	ldr	r2, [pc, #80]	@ (800c820 <DMA_CalcBaseAndBitshift+0x64>)
 800c7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c7d2:	091b      	lsrs	r3, r3, #4
 800c7d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c7d6:	4a13      	ldr	r2, [pc, #76]	@ (800c824 <DMA_CalcBaseAndBitshift+0x68>)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4413      	add	r3, r2
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d909      	bls.n	800c7fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	659a      	str	r2, [r3, #88]	@ 0x58
 800c7fc:	e007      	b.n	800c80e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800c806:	f023 0303 	bic.w	r3, r3, #3
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	aaaaaaab 	.word	0xaaaaaaab
 800c824:	080167d4 	.word	0x080167d4

0800c828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d11f      	bne.n	800c882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2b03      	cmp	r3, #3
 800c846:	d856      	bhi.n	800c8f6 <DMA_CheckFifoParam+0xce>
 800c848:	a201      	add	r2, pc, #4	@ (adr r2, 800c850 <DMA_CheckFifoParam+0x28>)
 800c84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84e:	bf00      	nop
 800c850:	0800c861 	.word	0x0800c861
 800c854:	0800c873 	.word	0x0800c873
 800c858:	0800c861 	.word	0x0800c861
 800c85c:	0800c8f7 	.word	0x0800c8f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d046      	beq.n	800c8fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c870:	e043      	b.n	800c8fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c876:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c87a:	d140      	bne.n	800c8fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c880:	e03d      	b.n	800c8fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c88a:	d121      	bne.n	800c8d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d837      	bhi.n	800c902 <DMA_CheckFifoParam+0xda>
 800c892:	a201      	add	r2, pc, #4	@ (adr r2, 800c898 <DMA_CheckFifoParam+0x70>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8a9 	.word	0x0800c8a9
 800c89c:	0800c8af 	.word	0x0800c8af
 800c8a0:	0800c8a9 	.word	0x0800c8a9
 800c8a4:	0800c8c1 	.word	0x0800c8c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ac:	e030      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d025      	beq.n	800c906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8be:	e022      	b.n	800c906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c8c8:	d11f      	bne.n	800c90a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c8ce:	e01c      	b.n	800c90a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d903      	bls.n	800c8de <DMA_CheckFifoParam+0xb6>
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d003      	beq.n	800c8e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c8dc:	e018      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e2:	e015      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00e      	beq.n	800c90e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8f4:	e00b      	b.n	800c90e <DMA_CheckFifoParam+0xe6>
      break;
 800c8f6:	bf00      	nop
 800c8f8:	e00a      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      break;
 800c8fa:	bf00      	nop
 800c8fc:	e008      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      break;
 800c8fe:	bf00      	nop
 800c900:	e006      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      break;
 800c902:	bf00      	nop
 800c904:	e004      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      break;
 800c906:	bf00      	nop
 800c908:	e002      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      break;   
 800c90a:	bf00      	nop
 800c90c:	e000      	b.n	800c910 <DMA_CheckFifoParam+0xe8>
      break;
 800c90e:	bf00      	nop
    }
  } 
  
  return status; 
 800c910:	7bfb      	ldrb	r3, [r7, #15]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop

0800c920 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800c920:	b480      	push	{r7}
 800c922:	b087      	sub	sp, #28
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	460b      	mov	r3, r1
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c92e:	2300      	movs	r3, #0
 800c930:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d103      	bne.n	800c940 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	605a      	str	r2, [r3, #4]
      break;
 800c93e:	e002      	b.n	800c946 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	75fb      	strb	r3, [r7, #23]
      break;
 800c944:	bf00      	nop
  }

  return status;
 800c946:	7dfb      	ldrb	r3, [r7, #23]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	371c      	adds	r7, #28
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d101      	bne.n	800c968 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	e003      	b.n	800c970 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c96e:	2300      	movs	r3, #0
  }
}
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b089      	sub	sp, #36	@ 0x24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c98a:	2300      	movs	r3, #0
 800c98c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c98e:	2300      	movs	r3, #0
 800c990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]
 800c996:	e159      	b.n	800cc4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c998:	2201      	movs	r2, #1
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	f040 8148 	bne.w	800cc46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d005      	beq.n	800c9ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d130      	bne.n	800ca30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	2203      	movs	r2, #3
 800c9da:	fa02 f303 	lsl.w	r3, r2, r3
 800c9de:	43db      	mvns	r3, r3
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f2:	69ba      	ldr	r2, [r7, #24]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ca04:	2201      	movs	r2, #1
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0c:	43db      	mvns	r3, r3
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	4013      	ands	r3, r2
 800ca12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	091b      	lsrs	r3, r3, #4
 800ca1a:	f003 0201 	and.w	r2, r3, #1
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	fa02 f303 	lsl.w	r3, r2, r3
 800ca24:	69ba      	ldr	r2, [r7, #24]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	f003 0303 	and.w	r3, r3, #3
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	d017      	beq.n	800ca6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	2203      	movs	r2, #3
 800ca48:	fa02 f303 	lsl.w	r3, r2, r3
 800ca4c:	43db      	mvns	r3, r3
 800ca4e:	69ba      	ldr	r2, [r7, #24]
 800ca50:	4013      	ands	r3, r2
 800ca52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca60:	69ba      	ldr	r2, [r7, #24]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	f003 0303 	and.w	r3, r3, #3
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d123      	bne.n	800cac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	08da      	lsrs	r2, r3, #3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3208      	adds	r2, #8
 800ca80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f003 0307 	and.w	r3, r3, #7
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	220f      	movs	r2, #15
 800ca90:	fa02 f303 	lsl.w	r3, r2, r3
 800ca94:	43db      	mvns	r3, r3
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	4013      	ands	r3, r2
 800ca9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	fa02 f303 	lsl.w	r3, r2, r3
 800caac:	69ba      	ldr	r2, [r7, #24]
 800caae:	4313      	orrs	r3, r2
 800cab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	08da      	lsrs	r2, r3, #3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3208      	adds	r2, #8
 800caba:	69b9      	ldr	r1, [r7, #24]
 800cabc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	2203      	movs	r2, #3
 800cacc:	fa02 f303 	lsl.w	r3, r2, r3
 800cad0:	43db      	mvns	r3, r3
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	4013      	ands	r3, r2
 800cad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f003 0203 	and.w	r2, r3, #3
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	fa02 f303 	lsl.w	r3, r2, r3
 800cae8:	69ba      	ldr	r2, [r7, #24]
 800caea:	4313      	orrs	r3, r2
 800caec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 80a2 	beq.w	800cc46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	4b57      	ldr	r3, [pc, #348]	@ (800cc64 <HAL_GPIO_Init+0x2e8>)
 800cb08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0a:	4a56      	ldr	r2, [pc, #344]	@ (800cc64 <HAL_GPIO_Init+0x2e8>)
 800cb0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb10:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb12:	4b54      	ldr	r3, [pc, #336]	@ (800cc64 <HAL_GPIO_Init+0x2e8>)
 800cb14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb1e:	4a52      	ldr	r2, [pc, #328]	@ (800cc68 <HAL_GPIO_Init+0x2ec>)
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	089b      	lsrs	r3, r3, #2
 800cb24:	3302      	adds	r3, #2
 800cb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f003 0303 	and.w	r3, r3, #3
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	220f      	movs	r2, #15
 800cb36:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3a:	43db      	mvns	r3, r3
 800cb3c:	69ba      	ldr	r2, [r7, #24]
 800cb3e:	4013      	ands	r3, r2
 800cb40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a49      	ldr	r2, [pc, #292]	@ (800cc6c <HAL_GPIO_Init+0x2f0>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d019      	beq.n	800cb7e <HAL_GPIO_Init+0x202>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a48      	ldr	r2, [pc, #288]	@ (800cc70 <HAL_GPIO_Init+0x2f4>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d013      	beq.n	800cb7a <HAL_GPIO_Init+0x1fe>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a47      	ldr	r2, [pc, #284]	@ (800cc74 <HAL_GPIO_Init+0x2f8>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d00d      	beq.n	800cb76 <HAL_GPIO_Init+0x1fa>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a46      	ldr	r2, [pc, #280]	@ (800cc78 <HAL_GPIO_Init+0x2fc>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d007      	beq.n	800cb72 <HAL_GPIO_Init+0x1f6>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a45      	ldr	r2, [pc, #276]	@ (800cc7c <HAL_GPIO_Init+0x300>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d101      	bne.n	800cb6e <HAL_GPIO_Init+0x1f2>
 800cb6a:	2304      	movs	r3, #4
 800cb6c:	e008      	b.n	800cb80 <HAL_GPIO_Init+0x204>
 800cb6e:	2307      	movs	r3, #7
 800cb70:	e006      	b.n	800cb80 <HAL_GPIO_Init+0x204>
 800cb72:	2303      	movs	r3, #3
 800cb74:	e004      	b.n	800cb80 <HAL_GPIO_Init+0x204>
 800cb76:	2302      	movs	r3, #2
 800cb78:	e002      	b.n	800cb80 <HAL_GPIO_Init+0x204>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e000      	b.n	800cb80 <HAL_GPIO_Init+0x204>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	69fa      	ldr	r2, [r7, #28]
 800cb82:	f002 0203 	and.w	r2, r2, #3
 800cb86:	0092      	lsls	r2, r2, #2
 800cb88:	4093      	lsls	r3, r2
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cb90:	4935      	ldr	r1, [pc, #212]	@ (800cc68 <HAL_GPIO_Init+0x2ec>)
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	089b      	lsrs	r3, r3, #2
 800cb96:	3302      	adds	r3, #2
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cb9e:	4b38      	ldr	r3, [pc, #224]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	43db      	mvns	r3, r3
 800cba8:	69ba      	ldr	r2, [r7, #24]
 800cbaa:	4013      	ands	r3, r2
 800cbac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cbc2:	4a2f      	ldr	r2, [pc, #188]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cbc8:	4b2d      	ldr	r3, [pc, #180]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	43db      	mvns	r3, r3
 800cbd2:	69ba      	ldr	r2, [r7, #24]
 800cbd4:	4013      	ands	r3, r2
 800cbd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d003      	beq.n	800cbec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cbe4:	69ba      	ldr	r2, [r7, #24]
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cbec:	4a24      	ldr	r2, [pc, #144]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cbf2:	4b23      	ldr	r3, [pc, #140]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	43db      	mvns	r3, r3
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	4013      	ands	r3, r2
 800cc00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cc0e:	69ba      	ldr	r2, [r7, #24]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cc16:	4a1a      	ldr	r2, [pc, #104]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cc1c:	4b18      	ldr	r3, [pc, #96]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	43db      	mvns	r3, r3
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	4013      	ands	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cc40:	4a0f      	ldr	r2, [pc, #60]	@ (800cc80 <HAL_GPIO_Init+0x304>)
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	61fb      	str	r3, [r7, #28]
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	2b0f      	cmp	r3, #15
 800cc50:	f67f aea2 	bls.w	800c998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cc54:	bf00      	nop
 800cc56:	bf00      	nop
 800cc58:	3724      	adds	r7, #36	@ 0x24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	40023800 	.word	0x40023800
 800cc68:	40013800 	.word	0x40013800
 800cc6c:	40020000 	.word	0x40020000
 800cc70:	40020400 	.word	0x40020400
 800cc74:	40020800 	.word	0x40020800
 800cc78:	40020c00 	.word	0x40020c00
 800cc7c:	40021000 	.word	0x40021000
 800cc80:	40013c00 	.word	0x40013c00

0800cc84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	e0bb      	b.n	800ce18 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cca0:	2201      	movs	r2, #1
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	fa02 f303 	lsl.w	r3, r2, r3
 800cca8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	4013      	ands	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	f040 80ab 	bne.w	800ce12 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ccbc:	4a5c      	ldr	r2, [pc, #368]	@ (800ce30 <HAL_GPIO_DeInit+0x1ac>)
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	089b      	lsrs	r3, r3, #2
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f003 0303 	and.w	r3, r3, #3
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	220f      	movs	r2, #15
 800ccd4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	4013      	ands	r3, r2
 800ccdc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a54      	ldr	r2, [pc, #336]	@ (800ce34 <HAL_GPIO_DeInit+0x1b0>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d019      	beq.n	800cd1a <HAL_GPIO_DeInit+0x96>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a53      	ldr	r2, [pc, #332]	@ (800ce38 <HAL_GPIO_DeInit+0x1b4>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d013      	beq.n	800cd16 <HAL_GPIO_DeInit+0x92>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a52      	ldr	r2, [pc, #328]	@ (800ce3c <HAL_GPIO_DeInit+0x1b8>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d00d      	beq.n	800cd12 <HAL_GPIO_DeInit+0x8e>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4a51      	ldr	r2, [pc, #324]	@ (800ce40 <HAL_GPIO_DeInit+0x1bc>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d007      	beq.n	800cd0e <HAL_GPIO_DeInit+0x8a>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4a50      	ldr	r2, [pc, #320]	@ (800ce44 <HAL_GPIO_DeInit+0x1c0>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d101      	bne.n	800cd0a <HAL_GPIO_DeInit+0x86>
 800cd06:	2304      	movs	r3, #4
 800cd08:	e008      	b.n	800cd1c <HAL_GPIO_DeInit+0x98>
 800cd0a:	2307      	movs	r3, #7
 800cd0c:	e006      	b.n	800cd1c <HAL_GPIO_DeInit+0x98>
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e004      	b.n	800cd1c <HAL_GPIO_DeInit+0x98>
 800cd12:	2302      	movs	r3, #2
 800cd14:	e002      	b.n	800cd1c <HAL_GPIO_DeInit+0x98>
 800cd16:	2301      	movs	r3, #1
 800cd18:	e000      	b.n	800cd1c <HAL_GPIO_DeInit+0x98>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	f002 0203 	and.w	r2, r2, #3
 800cd22:	0092      	lsls	r2, r2, #2
 800cd24:	4093      	lsls	r3, r2
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d132      	bne.n	800cd92 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cd2c:	4b46      	ldr	r3, [pc, #280]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	43db      	mvns	r3, r3
 800cd34:	4944      	ldr	r1, [pc, #272]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd36:	4013      	ands	r3, r2
 800cd38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cd3a:	4b43      	ldr	r3, [pc, #268]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	43db      	mvns	r3, r3
 800cd42:	4941      	ldr	r1, [pc, #260]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd44:	4013      	ands	r3, r2
 800cd46:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd48:	4b3f      	ldr	r3, [pc, #252]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	43db      	mvns	r3, r3
 800cd50:	493d      	ldr	r1, [pc, #244]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd52:	4013      	ands	r3, r2
 800cd54:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd56:	4b3c      	ldr	r3, [pc, #240]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	493a      	ldr	r1, [pc, #232]	@ (800ce48 <HAL_GPIO_DeInit+0x1c4>)
 800cd60:	4013      	ands	r3, r2
 800cd62:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	f003 0303 	and.w	r3, r3, #3
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	220f      	movs	r2, #15
 800cd6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cd74:	4a2e      	ldr	r2, [pc, #184]	@ (800ce30 <HAL_GPIO_DeInit+0x1ac>)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	089b      	lsrs	r3, r3, #2
 800cd7a:	3302      	adds	r3, #2
 800cd7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	43da      	mvns	r2, r3
 800cd84:	482a      	ldr	r0, [pc, #168]	@ (800ce30 <HAL_GPIO_DeInit+0x1ac>)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	089b      	lsrs	r3, r3, #2
 800cd8a:	400a      	ands	r2, r1
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	2103      	movs	r1, #3
 800cd9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cda0:	43db      	mvns	r3, r3
 800cda2:	401a      	ands	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	08da      	lsrs	r2, r3, #3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3208      	adds	r2, #8
 800cdb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	220f      	movs	r2, #15
 800cdbe:	fa02 f303 	lsl.w	r3, r2, r3
 800cdc2:	43db      	mvns	r3, r3
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	08d2      	lsrs	r2, r2, #3
 800cdc8:	4019      	ands	r1, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	3208      	adds	r2, #8
 800cdce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	2103      	movs	r1, #3
 800cddc:	fa01 f303 	lsl.w	r3, r1, r3
 800cde0:	43db      	mvns	r3, r3
 800cde2:	401a      	ands	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	2101      	movs	r1, #1
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdf4:	43db      	mvns	r3, r3
 800cdf6:	401a      	ands	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689a      	ldr	r2, [r3, #8]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	2103      	movs	r1, #3
 800ce06:	fa01 f303 	lsl.w	r3, r1, r3
 800ce0a:	43db      	mvns	r3, r3
 800ce0c:	401a      	ands	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	3301      	adds	r3, #1
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	2b0f      	cmp	r3, #15
 800ce1c:	f67f af40 	bls.w	800cca0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	371c      	adds	r7, #28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	40013800 	.word	0x40013800
 800ce34:	40020000 	.word	0x40020000
 800ce38:	40020400 	.word	0x40020400
 800ce3c:	40020800 	.word	0x40020800
 800ce40:	40020c00 	.word	0x40020c00
 800ce44:	40021000 	.word	0x40021000
 800ce48:	40013c00 	.word	0x40013c00

0800ce4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	691a      	ldr	r2, [r3, #16]
 800ce5c:	887b      	ldrh	r3, [r7, #2]
 800ce5e:	4013      	ands	r3, r2
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ce64:	2301      	movs	r3, #1
 800ce66:	73fb      	strb	r3, [r7, #15]
 800ce68:	e001      	b.n	800ce6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	807b      	strh	r3, [r7, #2]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ce8c:	787b      	ldrb	r3, [r7, #1]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce92:	887a      	ldrh	r2, [r7, #2]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ce98:	e003      	b.n	800cea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ce9a:	887b      	ldrh	r3, [r7, #2]
 800ce9c:	041a      	lsls	r2, r3, #16
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	619a      	str	r2, [r3, #24]
}
 800cea2:	bf00      	nop
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
	...

0800ceb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e12b      	b.n	800d11a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d106      	bne.n	800cedc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f95d 	bl	800d196 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2224      	movs	r2, #36	@ 0x24
 800cee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 0201 	bic.w	r2, r2, #1
 800cef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cf02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cf12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cf14:	f002 f93e 	bl	800f194 <HAL_RCC_GetPCLK1Freq>
 800cf18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	4a81      	ldr	r2, [pc, #516]	@ (800d124 <HAL_I2C_Init+0x274>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d807      	bhi.n	800cf34 <HAL_I2C_Init+0x84>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4a80      	ldr	r2, [pc, #512]	@ (800d128 <HAL_I2C_Init+0x278>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	bf94      	ite	ls
 800cf2c:	2301      	movls	r3, #1
 800cf2e:	2300      	movhi	r3, #0
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	e006      	b.n	800cf42 <HAL_I2C_Init+0x92>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4a7d      	ldr	r2, [pc, #500]	@ (800d12c <HAL_I2C_Init+0x27c>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	bf94      	ite	ls
 800cf3c:	2301      	movls	r3, #1
 800cf3e:	2300      	movhi	r3, #0
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e0e7      	b.n	800d11a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	4a78      	ldr	r2, [pc, #480]	@ (800d130 <HAL_I2C_Init+0x280>)
 800cf4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf52:	0c9b      	lsrs	r3, r3, #18
 800cf54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	430a      	orrs	r2, r1
 800cf68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6a1b      	ldr	r3, [r3, #32]
 800cf70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4a6a      	ldr	r2, [pc, #424]	@ (800d124 <HAL_I2C_Init+0x274>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d802      	bhi.n	800cf84 <HAL_I2C_Init+0xd4>
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	3301      	adds	r3, #1
 800cf82:	e009      	b.n	800cf98 <HAL_I2C_Init+0xe8>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cf8a:	fb02 f303 	mul.w	r3, r2, r3
 800cf8e:	4a69      	ldr	r2, [pc, #420]	@ (800d134 <HAL_I2C_Init+0x284>)
 800cf90:	fba2 2303 	umull	r2, r3, r2, r3
 800cf94:	099b      	lsrs	r3, r3, #6
 800cf96:	3301      	adds	r3, #1
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	6812      	ldr	r2, [r2, #0]
 800cf9c:	430b      	orrs	r3, r1
 800cf9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800cfaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	495c      	ldr	r1, [pc, #368]	@ (800d124 <HAL_I2C_Init+0x274>)
 800cfb4:	428b      	cmp	r3, r1
 800cfb6:	d819      	bhi.n	800cfec <HAL_I2C_Init+0x13c>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	1e59      	subs	r1, r3, #1
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfc6:	1c59      	adds	r1, r3, #1
 800cfc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cfcc:	400b      	ands	r3, r1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00a      	beq.n	800cfe8 <HAL_I2C_Init+0x138>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	1e59      	subs	r1, r3, #1
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfe6:	e051      	b.n	800d08c <HAL_I2C_Init+0x1dc>
 800cfe8:	2304      	movs	r3, #4
 800cfea:	e04f      	b.n	800d08c <HAL_I2C_Init+0x1dc>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d111      	bne.n	800d018 <HAL_I2C_Init+0x168>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	1e58      	subs	r0, r3, #1
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6859      	ldr	r1, [r3, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	440b      	add	r3, r1
 800d002:	fbb0 f3f3 	udiv	r3, r0, r3
 800d006:	3301      	adds	r3, #1
 800d008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	bf0c      	ite	eq
 800d010:	2301      	moveq	r3, #1
 800d012:	2300      	movne	r3, #0
 800d014:	b2db      	uxtb	r3, r3
 800d016:	e012      	b.n	800d03e <HAL_I2C_Init+0x18e>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	1e58      	subs	r0, r3, #1
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6859      	ldr	r1, [r3, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	440b      	add	r3, r1
 800d026:	0099      	lsls	r1, r3, #2
 800d028:	440b      	add	r3, r1
 800d02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d02e:	3301      	adds	r3, #1
 800d030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d034:	2b00      	cmp	r3, #0
 800d036:	bf0c      	ite	eq
 800d038:	2301      	moveq	r3, #1
 800d03a:	2300      	movne	r3, #0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <HAL_I2C_Init+0x196>
 800d042:	2301      	movs	r3, #1
 800d044:	e022      	b.n	800d08c <HAL_I2C_Init+0x1dc>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10e      	bne.n	800d06c <HAL_I2C_Init+0x1bc>
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	1e58      	subs	r0, r3, #1
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6859      	ldr	r1, [r3, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	440b      	add	r3, r1
 800d05c:	fbb0 f3f3 	udiv	r3, r0, r3
 800d060:	3301      	adds	r3, #1
 800d062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d06a:	e00f      	b.n	800d08c <HAL_I2C_Init+0x1dc>
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	1e58      	subs	r0, r3, #1
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6859      	ldr	r1, [r3, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	440b      	add	r3, r1
 800d07a:	0099      	lsls	r1, r3, #2
 800d07c:	440b      	add	r3, r1
 800d07e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d082:	3301      	adds	r3, #1
 800d084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	6809      	ldr	r1, [r1, #0]
 800d090:	4313      	orrs	r3, r2
 800d092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	69da      	ldr	r2, [r3, #28]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d0ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	6911      	ldr	r1, [r2, #16]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	68d2      	ldr	r2, [r2, #12]
 800d0c6:	4311      	orrs	r1, r2
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	6812      	ldr	r2, [r2, #0]
 800d0cc:	430b      	orrs	r3, r1
 800d0ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	695a      	ldr	r2, [r3, #20]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f042 0201 	orr.w	r2, r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2220      	movs	r2, #32
 800d106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	000186a0 	.word	0x000186a0
 800d128:	001e847f 	.word	0x001e847f
 800d12c:	003d08ff 	.word	0x003d08ff
 800d130:	431bde83 	.word	0x431bde83
 800d134:	10624dd3 	.word	0x10624dd3

0800d138 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e021      	b.n	800d18e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2224      	movs	r2, #36	@ 0x24
 800d14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f022 0201 	bic.w	r2, r2, #1
 800d160:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f821 	bl	800d1aa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d196:	b480      	push	{r7}
 800d198:	b083      	sub	sp, #12
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d19e:	bf00      	nop
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b083      	sub	sp, #12
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d1b2:	bf00      	nop
 800d1b4:	370c      	adds	r7, #12
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
	...

0800d1c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	607a      	str	r2, [r7, #4]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	817b      	strh	r3, [r7, #10]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d1d4:	f7fe fef2 	bl	800bfbc <HAL_GetTick>
 800d1d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	f040 80e0 	bne.w	800d3a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	2319      	movs	r3, #25
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	4970      	ldr	r1, [pc, #448]	@ (800d3b4 <HAL_I2C_Master_Transmit+0x1f4>)
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f001 f928 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d1fe:	2302      	movs	r3, #2
 800d200:	e0d3      	b.n	800d3aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d101      	bne.n	800d210 <HAL_I2C_Master_Transmit+0x50>
 800d20c:	2302      	movs	r3, #2
 800d20e:	e0cc      	b.n	800d3aa <HAL_I2C_Master_Transmit+0x1ea>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b01      	cmp	r3, #1
 800d224:	d007      	beq.n	800d236 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f042 0201 	orr.w	r2, r2, #1
 800d234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d244:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2221      	movs	r2, #33	@ 0x21
 800d24a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2210      	movs	r2, #16
 800d252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	893a      	ldrh	r2, [r7, #8]
 800d266:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4a50      	ldr	r2, [pc, #320]	@ (800d3b8 <HAL_I2C_Master_Transmit+0x1f8>)
 800d276:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d278:	8979      	ldrh	r1, [r7, #10]
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	6a3a      	ldr	r2, [r7, #32]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 fe14 	bl	800deac <I2C_MasterRequestWrite>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e08d      	b.n	800d3aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d28e:	2300      	movs	r3, #0
 800d290:	613b      	str	r3, [r7, #16]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	695b      	ldr	r3, [r3, #20]
 800d298:	613b      	str	r3, [r7, #16]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	613b      	str	r3, [r7, #16]
 800d2a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d2a4:	e066      	b.n	800d374 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2a6:	697a      	ldr	r2, [r7, #20]
 800d2a8:	6a39      	ldr	r1, [r7, #32]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f001 f9e6 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00d      	beq.n	800d2d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ba:	2b04      	cmp	r3, #4
 800d2bc:	d107      	bne.n	800d2ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e06b      	b.n	800d3aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d6:	781a      	ldrb	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	695b      	ldr	r3, [r3, #20]
 800d308:	f003 0304 	and.w	r3, r3, #4
 800d30c:	2b04      	cmp	r3, #4
 800d30e:	d11b      	bne.n	800d348 <HAL_I2C_Master_Transmit+0x188>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d314:	2b00      	cmp	r3, #0
 800d316:	d017      	beq.n	800d348 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d31c:	781a      	ldrb	r2, [r3, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d332:	b29b      	uxth	r3, r3
 800d334:	3b01      	subs	r3, #1
 800d336:	b29a      	uxth	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d340:	3b01      	subs	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	6a39      	ldr	r1, [r7, #32]
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f001 f9dd 	bl	800e70c <I2C_WaitOnBTFFlagUntilTimeout>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00d      	beq.n	800d374 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d107      	bne.n	800d370 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d36e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e01a      	b.n	800d3aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d194      	bne.n	800d2a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d38a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2220      	movs	r2, #32
 800d390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e000      	b.n	800d3aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d3a8:	2302      	movs	r3, #2
  }
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	00100002 	.word	0x00100002
 800d3b8:	ffff0000 	.word	0xffff0000

0800d3bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08c      	sub	sp, #48	@ 0x30
 800d3c0:	af02      	add	r7, sp, #8
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	817b      	strh	r3, [r7, #10]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d3d0:	f7fe fdf4 	bl	800bfbc <HAL_GetTick>
 800d3d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b20      	cmp	r3, #32
 800d3e0:	f040 8217 	bne.w	800d812 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2319      	movs	r3, #25
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	497c      	ldr	r1, [pc, #496]	@ (800d5e0 <HAL_I2C_Master_Receive+0x224>)
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f001 f82a 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d3fa:	2302      	movs	r3, #2
 800d3fc:	e20a      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d404:	2b01      	cmp	r3, #1
 800d406:	d101      	bne.n	800d40c <HAL_I2C_Master_Receive+0x50>
 800d408:	2302      	movs	r3, #2
 800d40a:	e203      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d007      	beq.n	800d432 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f042 0201 	orr.w	r2, r2, #1
 800d430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2222      	movs	r2, #34	@ 0x22
 800d446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2210      	movs	r2, #16
 800d44e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	893a      	ldrh	r2, [r7, #8]
 800d462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d468:	b29a      	uxth	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4a5c      	ldr	r2, [pc, #368]	@ (800d5e4 <HAL_I2C_Master_Receive+0x228>)
 800d472:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d474:	8979      	ldrh	r1, [r7, #10]
 800d476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f000 fd98 	bl	800dfb0 <I2C_MasterRequestRead>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e1c4      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d113      	bne.n	800d4ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d492:	2300      	movs	r3, #0
 800d494:	623b      	str	r3, [r7, #32]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	623b      	str	r3, [r7, #32]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	623b      	str	r3, [r7, #32]
 800d4a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	e198      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d11b      	bne.n	800d4fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	61fb      	str	r3, [r7, #28]
 800d4e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4f6:	601a      	str	r2, [r3, #0]
 800d4f8:	e178      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d11b      	bne.n	800d53a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d510:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d520:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d522:	2300      	movs	r3, #0
 800d524:	61bb      	str	r3, [r7, #24]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	695b      	ldr	r3, [r3, #20]
 800d52c:	61bb      	str	r3, [r7, #24]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	61bb      	str	r3, [r7, #24]
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	e158      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d548:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d54a:	2300      	movs	r3, #0
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	617b      	str	r3, [r7, #20]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	617b      	str	r3, [r7, #20]
 800d55e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d560:	e144      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d566:	2b03      	cmp	r3, #3
 800d568:	f200 80f1 	bhi.w	800d74e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d570:	2b01      	cmp	r3, #1
 800d572:	d123      	bne.n	800d5bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d576:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f001 f90f 	bl	800e79c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e145      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	691a      	ldr	r2, [r3, #16]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d592:	b2d2      	uxtb	r2, r2
 800d594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d5ba:	e117      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d14e      	bne.n	800d662 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	4906      	ldr	r1, [pc, #24]	@ (800d5e8 <HAL_I2C_Master_Receive+0x22c>)
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f000 ff3a 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d008      	beq.n	800d5ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e11a      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
 800d5de:	bf00      	nop
 800d5e0:	00100002 	.word	0x00100002
 800d5e4:	ffff0000 	.word	0xffff0000
 800d5e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	691a      	ldr	r2, [r3, #16]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d606:	b2d2      	uxtb	r2, r2
 800d608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d618:	3b01      	subs	r3, #1
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d624:	b29b      	uxth	r3, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	b29a      	uxth	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	691a      	ldr	r2, [r3, #16]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d638:	b2d2      	uxtb	r2, r2
 800d63a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d640:	1c5a      	adds	r2, r3, #1
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d64a:	3b01      	subs	r3, #1
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d656:	b29b      	uxth	r3, r3
 800d658:	3b01      	subs	r3, #1
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d660:	e0c4      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	2200      	movs	r2, #0
 800d66a:	496c      	ldr	r1, [pc, #432]	@ (800d81c <HAL_I2C_Master_Receive+0x460>)
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f000 feeb 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	e0cb      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d68a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	691a      	ldr	r2, [r3, #16]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d696:	b2d2      	uxtb	r2, r2
 800d698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4955      	ldr	r1, [pc, #340]	@ (800d81c <HAL_I2C_Master_Receive+0x460>)
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 febd 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e09d      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	691a      	ldr	r2, [r3, #16]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f2:	b2d2      	uxtb	r2, r2
 800d6f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d704:	3b01      	subs	r3, #1
 800d706:	b29a      	uxth	r2, r3
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d710:	b29b      	uxth	r3, r3
 800d712:	3b01      	subs	r3, #1
 800d714:	b29a      	uxth	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	691a      	ldr	r2, [r3, #16]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d724:	b2d2      	uxtb	r2, r2
 800d726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d736:	3b01      	subs	r3, #1
 800d738:	b29a      	uxth	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d742:	b29b      	uxth	r3, r3
 800d744:	3b01      	subs	r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d74c:	e04e      	b.n	800d7ec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d750:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f001 f822 	bl	800e79c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e058      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	691a      	ldr	r2, [r3, #16]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76c:	b2d2      	uxtb	r2, r2
 800d76e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d77e:	3b01      	subs	r3, #1
 800d780:	b29a      	uxth	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	3b01      	subs	r3, #1
 800d78e:	b29a      	uxth	r2, r3
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	f003 0304 	and.w	r3, r3, #4
 800d79e:	2b04      	cmp	r3, #4
 800d7a0:	d124      	bne.n	800d7ec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d107      	bne.n	800d7ba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7b8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	691a      	ldr	r2, [r3, #16]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c4:	b2d2      	uxtb	r2, r2
 800d7c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7cc:	1c5a      	adds	r2, r3, #1
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f47f aeb6 	bne.w	800d562 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	e000      	b.n	800d814 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800d812:	2302      	movs	r3, #2
  }
}
 800d814:	4618      	mov	r0, r3
 800d816:	3728      	adds	r7, #40	@ 0x28
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	00010004 	.word	0x00010004

0800d820 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af02      	add	r7, sp, #8
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	4608      	mov	r0, r1
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	4603      	mov	r3, r0
 800d830:	817b      	strh	r3, [r7, #10]
 800d832:	460b      	mov	r3, r1
 800d834:	813b      	strh	r3, [r7, #8]
 800d836:	4613      	mov	r3, r2
 800d838:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d83a:	f7fe fbbf 	bl	800bfbc <HAL_GetTick>
 800d83e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b20      	cmp	r3, #32
 800d84a:	f040 80d9 	bne.w	800da00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	2319      	movs	r3, #25
 800d854:	2201      	movs	r2, #1
 800d856:	496d      	ldr	r1, [pc, #436]	@ (800da0c <HAL_I2C_Mem_Write+0x1ec>)
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f000 fdf5 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d864:	2302      	movs	r3, #2
 800d866:	e0cc      	b.n	800da02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d101      	bne.n	800d876 <HAL_I2C_Mem_Write+0x56>
 800d872:	2302      	movs	r3, #2
 800d874:	e0c5      	b.n	800da02 <HAL_I2C_Mem_Write+0x1e2>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d007      	beq.n	800d89c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f042 0201 	orr.w	r2, r2, #1
 800d89a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d8aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2221      	movs	r2, #33	@ 0x21
 800d8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2240      	movs	r2, #64	@ 0x40
 800d8b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6a3a      	ldr	r2, [r7, #32]
 800d8c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d8cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	4a4d      	ldr	r2, [pc, #308]	@ (800da10 <HAL_I2C_Mem_Write+0x1f0>)
 800d8dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d8de:	88f8      	ldrh	r0, [r7, #6]
 800d8e0:	893a      	ldrh	r2, [r7, #8]
 800d8e2:	8979      	ldrh	r1, [r7, #10]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f000 fc2c 	bl	800e14c <I2C_RequestMemoryWrite>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d052      	beq.n	800d9a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e081      	b.n	800da02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 feba 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00d      	beq.n	800d92a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d912:	2b04      	cmp	r3, #4
 800d914:	d107      	bne.n	800d926 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d924:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	e06b      	b.n	800da02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d92e:	781a      	ldrb	r2, [r3, #0]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d944:	3b01      	subs	r3, #1
 800d946:	b29a      	uxth	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d950:	b29b      	uxth	r3, r3
 800d952:	3b01      	subs	r3, #1
 800d954:	b29a      	uxth	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	695b      	ldr	r3, [r3, #20]
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b04      	cmp	r3, #4
 800d966:	d11b      	bne.n	800d9a0 <HAL_I2C_Mem_Write+0x180>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d017      	beq.n	800d9a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d974:	781a      	ldrb	r2, [r3, #0]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d98a:	3b01      	subs	r3, #1
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d996:	b29b      	uxth	r3, r3
 800d998:	3b01      	subs	r3, #1
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1aa      	bne.n	800d8fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f000 fead 	bl	800e70c <I2C_WaitOnBTFFlagUntilTimeout>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00d      	beq.n	800d9d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	d107      	bne.n	800d9d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e016      	b.n	800da02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e000      	b.n	800da02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800da00:	2302      	movs	r3, #2
  }
}
 800da02:	4618      	mov	r0, r3
 800da04:	3718      	adds	r7, #24
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	00100002 	.word	0x00100002
 800da10:	ffff0000 	.word	0xffff0000

0800da14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08c      	sub	sp, #48	@ 0x30
 800da18:	af02      	add	r7, sp, #8
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	4608      	mov	r0, r1
 800da1e:	4611      	mov	r1, r2
 800da20:	461a      	mov	r2, r3
 800da22:	4603      	mov	r3, r0
 800da24:	817b      	strh	r3, [r7, #10]
 800da26:	460b      	mov	r3, r1
 800da28:	813b      	strh	r3, [r7, #8]
 800da2a:	4613      	mov	r3, r2
 800da2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800da2e:	f7fe fac5 	bl	800bfbc <HAL_GetTick>
 800da32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	f040 8214 	bne.w	800de6a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800da42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	2319      	movs	r3, #25
 800da48:	2201      	movs	r2, #1
 800da4a:	497b      	ldr	r1, [pc, #492]	@ (800dc38 <HAL_I2C_Mem_Read+0x224>)
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fcfb 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800da58:	2302      	movs	r3, #2
 800da5a:	e207      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da62:	2b01      	cmp	r3, #1
 800da64:	d101      	bne.n	800da6a <HAL_I2C_Mem_Read+0x56>
 800da66:	2302      	movs	r3, #2
 800da68:	e200      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f003 0301 	and.w	r3, r3, #1
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d007      	beq.n	800da90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f042 0201 	orr.w	r2, r2, #1
 800da8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800da9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2222      	movs	r2, #34	@ 0x22
 800daa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2240      	movs	r2, #64	@ 0x40
 800daac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800dac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4a5b      	ldr	r2, [pc, #364]	@ (800dc3c <HAL_I2C_Mem_Read+0x228>)
 800dad0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dad2:	88f8      	ldrh	r0, [r7, #6]
 800dad4:	893a      	ldrh	r2, [r7, #8]
 800dad6:	8979      	ldrh	r1, [r7, #10]
 800dad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	4603      	mov	r3, r0
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fbc8 	bl	800e278 <I2C_RequestMemoryRead>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	e1bc      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d113      	bne.n	800db22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dafa:	2300      	movs	r3, #0
 800dafc:	623b      	str	r3, [r7, #32]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	623b      	str	r3, [r7, #32]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	623b      	str	r3, [r7, #32]
 800db0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	e190      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db26:	2b01      	cmp	r3, #1
 800db28:	d11b      	bne.n	800db62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	61fb      	str	r3, [r7, #28]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	61fb      	str	r3, [r7, #28]
 800db4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db5e:	601a      	str	r2, [r3, #0]
 800db60:	e170      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db66:	2b02      	cmp	r3, #2
 800db68:	d11b      	bne.n	800dba2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db8a:	2300      	movs	r3, #0
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	695b      	ldr	r3, [r3, #20]
 800db94:	61bb      	str	r3, [r7, #24]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	e150      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	617b      	str	r3, [r7, #20]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800dbb8:	e144      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	f200 80f1 	bhi.w	800dda6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d123      	bne.n	800dc14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f000 fde3 	bl	800e79c <I2C_WaitOnRXNEFlagUntilTimeout>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e145      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	691a      	ldr	r2, [r3, #16]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbea:	b2d2      	uxtb	r2, r2
 800dbec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc12:	e117      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d14e      	bne.n	800dcba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc22:	2200      	movs	r2, #0
 800dc24:	4906      	ldr	r1, [pc, #24]	@ (800dc40 <HAL_I2C_Mem_Read+0x22c>)
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f000 fc0e 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d008      	beq.n	800dc44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e11a      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
 800dc36:	bf00      	nop
 800dc38:	00100002 	.word	0x00100002
 800dc3c:	ffff0000 	.word	0xffff0000
 800dc40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	691a      	ldr	r2, [r3, #16]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc5e:	b2d2      	uxtb	r2, r2
 800dc60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc70:	3b01      	subs	r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	691a      	ldr	r2, [r3, #16]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc90:	b2d2      	uxtb	r2, r2
 800dc92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc98:	1c5a      	adds	r2, r3, #1
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dca2:	3b01      	subs	r3, #1
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcb8:	e0c4      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	496c      	ldr	r1, [pc, #432]	@ (800de74 <HAL_I2C_Mem_Read+0x460>)
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 fbbf 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e0cb      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	691a      	ldr	r2, [r3, #16]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcee:	b2d2      	uxtb	r2, r2
 800dcf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf6:	1c5a      	adds	r2, r3, #1
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd00:	3b01      	subs	r3, #1
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4955      	ldr	r1, [pc, #340]	@ (800de74 <HAL_I2C_Mem_Read+0x460>)
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f000 fb91 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e09d      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	691a      	ldr	r2, [r3, #16]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd4a:	b2d2      	uxtb	r2, r2
 800dd4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	691a      	ldr	r2, [r3, #16]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd7c:	b2d2      	uxtb	r2, r2
 800dd7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dda4:	e04e      	b.n	800de44 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dda6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dda8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 fcf6 	bl	800e79c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e058      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	691a      	ldr	r2, [r3, #16]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddcc:	1c5a      	adds	r2, r3, #1
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	3b01      	subs	r3, #1
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	f003 0304 	and.w	r3, r3, #4
 800ddf6:	2b04      	cmp	r3, #4
 800ddf8:	d124      	bne.n	800de44 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddfe:	2b03      	cmp	r3, #3
 800de00:	d107      	bne.n	800de12 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	691a      	ldr	r2, [r3, #16]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de1c:	b2d2      	uxtb	r2, r2
 800de1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de2e:	3b01      	subs	r3, #1
 800de30:	b29a      	uxth	r2, r3
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	3b01      	subs	r3, #1
 800de3e:	b29a      	uxth	r2, r3
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f47f aeb6 	bne.w	800dbba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2220      	movs	r2, #32
 800de52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	e000      	b.n	800de6c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800de6a:	2302      	movs	r3, #2
  }
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3728      	adds	r7, #40	@ 0x28
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	00010004 	.word	0x00010004

0800de78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de86:	b2db      	uxtb	r3, r3
}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	607a      	str	r2, [r7, #4]
 800deb6:	603b      	str	r3, [r7, #0]
 800deb8:	460b      	mov	r3, r1
 800deba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b08      	cmp	r3, #8
 800dec6:	d006      	beq.n	800ded6 <I2C_MasterRequestWrite+0x2a>
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d003      	beq.n	800ded6 <I2C_MasterRequestWrite+0x2a>
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ded4:	d108      	bne.n	800dee8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	e00b      	b.n	800df00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deec:	2b12      	cmp	r3, #18
 800deee:	d107      	bne.n	800df00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800defe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f000 fa9b 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00d      	beq.n	800df34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df26:	d103      	bne.n	800df30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800df30:	2303      	movs	r3, #3
 800df32:	e035      	b.n	800dfa0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df3c:	d108      	bne.n	800df50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800df3e:	897b      	ldrh	r3, [r7, #10]
 800df40:	b2db      	uxtb	r3, r3
 800df42:	461a      	mov	r2, r3
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800df4c:	611a      	str	r2, [r3, #16]
 800df4e:	e01b      	b.n	800df88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800df50:	897b      	ldrh	r3, [r7, #10]
 800df52:	11db      	asrs	r3, r3, #7
 800df54:	b2db      	uxtb	r3, r3
 800df56:	f003 0306 	and.w	r3, r3, #6
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f063 030f 	orn	r3, r3, #15
 800df60:	b2da      	uxtb	r2, r3
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	490e      	ldr	r1, [pc, #56]	@ (800dfa8 <I2C_MasterRequestWrite+0xfc>)
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f000 fae4 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e010      	b.n	800dfa0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800df7e:	897b      	ldrh	r3, [r7, #10]
 800df80:	b2da      	uxtb	r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	4907      	ldr	r1, [pc, #28]	@ (800dfac <I2C_MasterRequestWrite+0x100>)
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f000 fad4 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e000      	b.n	800dfa0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3718      	adds	r7, #24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	00010008 	.word	0x00010008
 800dfac:	00010002 	.word	0x00010002

0800dfb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af02      	add	r7, sp, #8
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	607a      	str	r2, [r7, #4]
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b08      	cmp	r3, #8
 800dfda:	d006      	beq.n	800dfea <I2C_MasterRequestRead+0x3a>
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d003      	beq.n	800dfea <I2C_MasterRequestRead+0x3a>
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dfe8:	d108      	bne.n	800dffc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	e00b      	b.n	800e014 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e000:	2b11      	cmp	r3, #17
 800e002:	d107      	bne.n	800e014 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e012:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f000 fa11 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00d      	beq.n	800e048 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e03a:	d103      	bne.n	800e044 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e044:	2303      	movs	r3, #3
 800e046:	e079      	b.n	800e13c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e050:	d108      	bne.n	800e064 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e052:	897b      	ldrh	r3, [r7, #10]
 800e054:	b2db      	uxtb	r3, r3
 800e056:	f043 0301 	orr.w	r3, r3, #1
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	611a      	str	r2, [r3, #16]
 800e062:	e05f      	b.n	800e124 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e064:	897b      	ldrh	r3, [r7, #10]
 800e066:	11db      	asrs	r3, r3, #7
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	f003 0306 	and.w	r3, r3, #6
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	f063 030f 	orn	r3, r3, #15
 800e074:	b2da      	uxtb	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	4930      	ldr	r1, [pc, #192]	@ (800e144 <I2C_MasterRequestRead+0x194>)
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f000 fa5a 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e054      	b.n	800e13c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e092:	897b      	ldrh	r3, [r7, #10]
 800e094:	b2da      	uxtb	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	4929      	ldr	r1, [pc, #164]	@ (800e148 <I2C_MasterRequestRead+0x198>)
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f000 fa4a 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e044      	b.n	800e13c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	613b      	str	r3, [r7, #16]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	695b      	ldr	r3, [r3, #20]
 800e0bc:	613b      	str	r3, [r7, #16]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	613b      	str	r3, [r7, #16]
 800e0c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e0d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f9af 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00d      	beq.n	800e10c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0fe:	d103      	bne.n	800e108 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e106:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e108:	2303      	movs	r3, #3
 800e10a:	e017      	b.n	800e13c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e10c:	897b      	ldrh	r3, [r7, #10]
 800e10e:	11db      	asrs	r3, r3, #7
 800e110:	b2db      	uxtb	r3, r3
 800e112:	f003 0306 	and.w	r3, r3, #6
 800e116:	b2db      	uxtb	r3, r3
 800e118:	f063 030e 	orn	r3, r3, #14
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	4907      	ldr	r1, [pc, #28]	@ (800e148 <I2C_MasterRequestRead+0x198>)
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f000 fa06 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e000      	b.n	800e13c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	00010008 	.word	0x00010008
 800e148:	00010002 	.word	0x00010002

0800e14c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b088      	sub	sp, #32
 800e150:	af02      	add	r7, sp, #8
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	461a      	mov	r2, r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	817b      	strh	r3, [r7, #10]
 800e15e:	460b      	mov	r3, r1
 800e160:	813b      	strh	r3, [r7, #8]
 800e162:	4613      	mov	r3, r2
 800e164:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e174:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	6a3b      	ldr	r3, [r7, #32]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f000 f960 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00d      	beq.n	800e1aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e19c:	d103      	bne.n	800e1a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	e05f      	b.n	800e26a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e1aa:	897b      	ldrh	r3, [r7, #10]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e1b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1bc:	6a3a      	ldr	r2, [r7, #32]
 800e1be:	492d      	ldr	r1, [pc, #180]	@ (800e274 <I2C_RequestMemoryWrite+0x128>)
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 f9bb 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e04c      	b.n	800e26a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	617b      	str	r3, [r7, #20]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	617b      	str	r3, [r7, #20]
 800e1e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1e8:	6a39      	ldr	r1, [r7, #32]
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f000 fa46 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1fa:	2b04      	cmp	r3, #4
 800e1fc:	d107      	bne.n	800e20e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e20c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e02b      	b.n	800e26a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d105      	bne.n	800e224 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e218:	893b      	ldrh	r3, [r7, #8]
 800e21a:	b2da      	uxtb	r2, r3
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	611a      	str	r2, [r3, #16]
 800e222:	e021      	b.n	800e268 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e224:	893b      	ldrh	r3, [r7, #8]
 800e226:	0a1b      	lsrs	r3, r3, #8
 800e228:	b29b      	uxth	r3, r3
 800e22a:	b2da      	uxtb	r2, r3
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e234:	6a39      	ldr	r1, [r7, #32]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 fa20 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00d      	beq.n	800e25e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e246:	2b04      	cmp	r3, #4
 800e248:	d107      	bne.n	800e25a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e005      	b.n	800e26a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e25e:	893b      	ldrh	r3, [r7, #8]
 800e260:	b2da      	uxtb	r2, r3
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	00010002 	.word	0x00010002

0800e278 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	4608      	mov	r0, r1
 800e282:	4611      	mov	r1, r2
 800e284:	461a      	mov	r2, r3
 800e286:	4603      	mov	r3, r0
 800e288:	817b      	strh	r3, [r7, #10]
 800e28a:	460b      	mov	r3, r1
 800e28c:	813b      	strh	r3, [r7, #8]
 800e28e:	4613      	mov	r3, r2
 800e290:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e2a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e2b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 f8c2 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00d      	beq.n	800e2e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2d8:	d103      	bne.n	800e2e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e0aa      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e2e6:	897b      	ldrh	r3, [r7, #10]
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e2f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f8:	6a3a      	ldr	r2, [r7, #32]
 800e2fa:	4952      	ldr	r1, [pc, #328]	@ (800e444 <I2C_RequestMemoryRead+0x1cc>)
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 f91d 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e308:	2301      	movs	r3, #1
 800e30a:	e097      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e30c:	2300      	movs	r3, #0
 800e30e:	617b      	str	r3, [r7, #20]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	695b      	ldr	r3, [r3, #20]
 800e316:	617b      	str	r3, [r7, #20]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	617b      	str	r3, [r7, #20]
 800e320:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e324:	6a39      	ldr	r1, [r7, #32]
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f000 f9a8 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00d      	beq.n	800e34e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e336:	2b04      	cmp	r3, #4
 800e338:	d107      	bne.n	800e34a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	e076      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e34e:	88fb      	ldrh	r3, [r7, #6]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d105      	bne.n	800e360 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e354:	893b      	ldrh	r3, [r7, #8]
 800e356:	b2da      	uxtb	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	611a      	str	r2, [r3, #16]
 800e35e:	e021      	b.n	800e3a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e360:	893b      	ldrh	r3, [r7, #8]
 800e362:	0a1b      	lsrs	r3, r3, #8
 800e364:	b29b      	uxth	r3, r3
 800e366:	b2da      	uxtb	r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e370:	6a39      	ldr	r1, [r7, #32]
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f000 f982 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00d      	beq.n	800e39a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e382:	2b04      	cmp	r3, #4
 800e384:	d107      	bne.n	800e396 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e394:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e396:	2301      	movs	r3, #1
 800e398:	e050      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e39a:	893b      	ldrh	r3, [r7, #8]
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3a6:	6a39      	ldr	r1, [r7, #32]
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f000 f967 	bl	800e67c <I2C_WaitOnTXEFlagUntilTimeout>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00d      	beq.n	800e3d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d107      	bne.n	800e3cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e035      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e3de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	6a3b      	ldr	r3, [r7, #32]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 f82b 	bl	800e448 <I2C_WaitOnFlagUntilTimeout>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00d      	beq.n	800e414 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e406:	d103      	bne.n	800e410 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e40e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e410:	2303      	movs	r3, #3
 800e412:	e013      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e414:	897b      	ldrh	r3, [r7, #10]
 800e416:	b2db      	uxtb	r3, r3
 800e418:	f043 0301 	orr.w	r3, r3, #1
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e426:	6a3a      	ldr	r2, [r7, #32]
 800e428:	4906      	ldr	r1, [pc, #24]	@ (800e444 <I2C_RequestMemoryRead+0x1cc>)
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f000 f886 	bl	800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e436:	2301      	movs	r3, #1
 800e438:	e000      	b.n	800e43c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3718      	adds	r7, #24
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	00010002 	.word	0x00010002

0800e448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	4613      	mov	r3, r2
 800e456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e458:	e048      	b.n	800e4ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e460:	d044      	beq.n	800e4ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e462:	f7fd fdab 	bl	800bfbc <HAL_GetTick>
 800e466:	4602      	mov	r2, r0
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	683a      	ldr	r2, [r7, #0]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d302      	bcc.n	800e478 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d139      	bne.n	800e4ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	0c1b      	lsrs	r3, r3, #16
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d10d      	bne.n	800e49e <I2C_WaitOnFlagUntilTimeout+0x56>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	695b      	ldr	r3, [r3, #20]
 800e488:	43da      	mvns	r2, r3
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	4013      	ands	r3, r2
 800e48e:	b29b      	uxth	r3, r3
 800e490:	2b00      	cmp	r3, #0
 800e492:	bf0c      	ite	eq
 800e494:	2301      	moveq	r3, #1
 800e496:	2300      	movne	r3, #0
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	461a      	mov	r2, r3
 800e49c:	e00c      	b.n	800e4b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	43da      	mvns	r2, r3
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	bf0c      	ite	eq
 800e4b0:	2301      	moveq	r3, #1
 800e4b2:	2300      	movne	r3, #0
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d116      	bne.n	800e4ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2220      	movs	r2, #32
 800e4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d8:	f043 0220 	orr.w	r2, r3, #32
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e023      	b.n	800e534 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	0c1b      	lsrs	r3, r3, #16
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d10d      	bne.n	800e512 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	695b      	ldr	r3, [r3, #20]
 800e4fc:	43da      	mvns	r2, r3
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4013      	ands	r3, r2
 800e502:	b29b      	uxth	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	bf0c      	ite	eq
 800e508:	2301      	moveq	r3, #1
 800e50a:	2300      	movne	r3, #0
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	461a      	mov	r2, r3
 800e510:	e00c      	b.n	800e52c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	43da      	mvns	r2, r3
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	4013      	ands	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	2b00      	cmp	r3, #0
 800e522:	bf0c      	ite	eq
 800e524:	2301      	moveq	r3, #1
 800e526:	2300      	movne	r3, #0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	461a      	mov	r2, r3
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d093      	beq.n	800e45a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e54a:	e071      	b.n	800e630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e55a:	d123      	bne.n	800e5a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e56a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2220      	movs	r2, #32
 800e580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e590:	f043 0204 	orr.w	r2, r3, #4
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	e067      	b.n	800e674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5aa:	d041      	beq.n	800e630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5ac:	f7fd fd06 	bl	800bfbc <HAL_GetTick>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d302      	bcc.n	800e5c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d136      	bne.n	800e630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	0c1b      	lsrs	r3, r3, #16
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d10c      	bne.n	800e5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	695b      	ldr	r3, [r3, #20]
 800e5d2:	43da      	mvns	r2, r3
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bf14      	ite	ne
 800e5de:	2301      	movne	r3, #1
 800e5e0:	2300      	moveq	r3, #0
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	e00b      	b.n	800e5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	699b      	ldr	r3, [r3, #24]
 800e5ec:	43da      	mvns	r2, r3
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	bf14      	ite	ne
 800e5f8:	2301      	movne	r3, #1
 800e5fa:	2300      	moveq	r3, #0
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d016      	beq.n	800e630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2220      	movs	r2, #32
 800e60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e61c:	f043 0220 	orr.w	r2, r3, #32
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2200      	movs	r2, #0
 800e628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e62c:	2301      	movs	r3, #1
 800e62e:	e021      	b.n	800e674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	0c1b      	lsrs	r3, r3, #16
 800e634:	b2db      	uxtb	r3, r3
 800e636:	2b01      	cmp	r3, #1
 800e638:	d10c      	bne.n	800e654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	43da      	mvns	r2, r3
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	4013      	ands	r3, r2
 800e646:	b29b      	uxth	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	bf14      	ite	ne
 800e64c:	2301      	movne	r3, #1
 800e64e:	2300      	moveq	r3, #0
 800e650:	b2db      	uxtb	r3, r3
 800e652:	e00b      	b.n	800e66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	43da      	mvns	r2, r3
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	4013      	ands	r3, r2
 800e660:	b29b      	uxth	r3, r3
 800e662:	2b00      	cmp	r3, #0
 800e664:	bf14      	ite	ne
 800e666:	2301      	movne	r3, #1
 800e668:	2300      	moveq	r3, #0
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f47f af6d 	bne.w	800e54c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e672:	2300      	movs	r3, #0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e688:	e034      	b.n	800e6f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f000 f8e3 	bl	800e856 <I2C_IsAcknowledgeFailed>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e034      	b.n	800e704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a0:	d028      	beq.n	800e6f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6a2:	f7fd fc8b 	bl	800bfbc <HAL_GetTick>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d302      	bcc.n	800e6b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d11d      	bne.n	800e6f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6c2:	2b80      	cmp	r3, #128	@ 0x80
 800e6c4:	d016      	beq.n	800e6f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6e0:	f043 0220 	orr.w	r2, r3, #32
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e007      	b.n	800e704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	695b      	ldr	r3, [r3, #20]
 800e6fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6fe:	2b80      	cmp	r3, #128	@ 0x80
 800e700:	d1c3      	bne.n	800e68a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e718:	e034      	b.n	800e784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f000 f89b 	bl	800e856 <I2C_IsAcknowledgeFailed>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	e034      	b.n	800e794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e730:	d028      	beq.n	800e784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e732:	f7fd fc43 	bl	800bfbc <HAL_GetTick>
 800e736:	4602      	mov	r2, r0
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d302      	bcc.n	800e748 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d11d      	bne.n	800e784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	f003 0304 	and.w	r3, r3, #4
 800e752:	2b04      	cmp	r3, #4
 800e754:	d016      	beq.n	800e784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2220      	movs	r2, #32
 800e760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e770:	f043 0220 	orr.w	r2, r3, #32
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	e007      	b.n	800e794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	695b      	ldr	r3, [r3, #20]
 800e78a:	f003 0304 	and.w	r3, r3, #4
 800e78e:	2b04      	cmp	r3, #4
 800e790:	d1c3      	bne.n	800e71a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e792:	2300      	movs	r3, #0
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e7a8:	e049      	b.n	800e83e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	f003 0310 	and.w	r3, r3, #16
 800e7b4:	2b10      	cmp	r3, #16
 800e7b6:	d119      	bne.n	800e7ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f06f 0210 	mvn.w	r2, #16
 800e7c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e030      	b.n	800e84e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7ec:	f7fd fbe6 	bl	800bfbc <HAL_GetTick>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d302      	bcc.n	800e802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d11d      	bne.n	800e83e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80c:	2b40      	cmp	r3, #64	@ 0x40
 800e80e:	d016      	beq.n	800e83e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2220      	movs	r2, #32
 800e81a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e82a:	f043 0220 	orr.w	r2, r3, #32
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e007      	b.n	800e84e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	695b      	ldr	r3, [r3, #20]
 800e844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e848:	2b40      	cmp	r3, #64	@ 0x40
 800e84a:	d1ae      	bne.n	800e7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e856:	b480      	push	{r7}
 800e858:	b083      	sub	sp, #12
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	695b      	ldr	r3, [r3, #20]
 800e864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e86c:	d11b      	bne.n	800e8a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e876:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2220      	movs	r2, #32
 800e882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e892:	f043 0204 	orr.w	r2, r3, #4
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e000      	b.n	800e8a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d101      	bne.n	800e8c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e267      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d075      	beq.n	800e9be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e8d2:	4b88      	ldr	r3, [pc, #544]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	f003 030c 	and.w	r3, r3, #12
 800e8da:	2b04      	cmp	r3, #4
 800e8dc:	d00c      	beq.n	800e8f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e8de:	4b85      	ldr	r3, [pc, #532]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e8e6:	2b08      	cmp	r3, #8
 800e8e8:	d112      	bne.n	800e910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e8ea:	4b82      	ldr	r3, [pc, #520]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e8f6:	d10b      	bne.n	800e910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e8f8:	4b7e      	ldr	r3, [pc, #504]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d05b      	beq.n	800e9bc <HAL_RCC_OscConfig+0x108>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d157      	bne.n	800e9bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e90c:	2301      	movs	r3, #1
 800e90e:	e242      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e918:	d106      	bne.n	800e928 <HAL_RCC_OscConfig+0x74>
 800e91a:	4b76      	ldr	r3, [pc, #472]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a75      	ldr	r2, [pc, #468]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e924:	6013      	str	r3, [r2, #0]
 800e926:	e01d      	b.n	800e964 <HAL_RCC_OscConfig+0xb0>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e930:	d10c      	bne.n	800e94c <HAL_RCC_OscConfig+0x98>
 800e932:	4b70      	ldr	r3, [pc, #448]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a6f      	ldr	r2, [pc, #444]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	4b6d      	ldr	r3, [pc, #436]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a6c      	ldr	r2, [pc, #432]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	e00b      	b.n	800e964 <HAL_RCC_OscConfig+0xb0>
 800e94c:	4b69      	ldr	r3, [pc, #420]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a68      	ldr	r2, [pc, #416]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e956:	6013      	str	r3, [r2, #0]
 800e958:	4b66      	ldr	r3, [pc, #408]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a65      	ldr	r2, [pc, #404]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e95e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d013      	beq.n	800e994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e96c:	f7fd fb26 	bl	800bfbc <HAL_GetTick>
 800e970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e972:	e008      	b.n	800e986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e974:	f7fd fb22 	bl	800bfbc <HAL_GetTick>
 800e978:	4602      	mov	r2, r0
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	2b64      	cmp	r3, #100	@ 0x64
 800e980:	d901      	bls.n	800e986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e982:	2303      	movs	r3, #3
 800e984:	e207      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e986:	4b5b      	ldr	r3, [pc, #364]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d0f0      	beq.n	800e974 <HAL_RCC_OscConfig+0xc0>
 800e992:	e014      	b.n	800e9be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e994:	f7fd fb12 	bl	800bfbc <HAL_GetTick>
 800e998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e99a:	e008      	b.n	800e9ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e99c:	f7fd fb0e 	bl	800bfbc <HAL_GetTick>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b64      	cmp	r3, #100	@ 0x64
 800e9a8:	d901      	bls.n	800e9ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e1f3      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e9ae:	4b51      	ldr	r3, [pc, #324]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1f0      	bne.n	800e99c <HAL_RCC_OscConfig+0xe8>
 800e9ba:	e000      	b.n	800e9be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f003 0302 	and.w	r3, r3, #2
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d063      	beq.n	800ea92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e9ca:	4b4a      	ldr	r3, [pc, #296]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	f003 030c 	and.w	r3, r3, #12
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00b      	beq.n	800e9ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9d6:	4b47      	ldr	r3, [pc, #284]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e9de:	2b08      	cmp	r3, #8
 800e9e0:	d11c      	bne.n	800ea1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9e2:	4b44      	ldr	r3, [pc, #272]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d116      	bne.n	800ea1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e9ee:	4b41      	ldr	r3, [pc, #260]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d005      	beq.n	800ea06 <HAL_RCC_OscConfig+0x152>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d001      	beq.n	800ea06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e1c7      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea06:	4b3b      	ldr	r3, [pc, #236]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	4937      	ldr	r1, [pc, #220]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800ea16:	4313      	orrs	r3, r2
 800ea18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea1a:	e03a      	b.n	800ea92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d020      	beq.n	800ea66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea24:	4b34      	ldr	r3, [pc, #208]	@ (800eaf8 <HAL_RCC_OscConfig+0x244>)
 800ea26:	2201      	movs	r2, #1
 800ea28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea2a:	f7fd fac7 	bl	800bfbc <HAL_GetTick>
 800ea2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea30:	e008      	b.n	800ea44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea32:	f7fd fac3 	bl	800bfbc <HAL_GetTick>
 800ea36:	4602      	mov	r2, r0
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d901      	bls.n	800ea44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ea40:	2303      	movs	r3, #3
 800ea42:	e1a8      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea44:	4b2b      	ldr	r3, [pc, #172]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 0302 	and.w	r3, r3, #2
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d0f0      	beq.n	800ea32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea50:	4b28      	ldr	r3, [pc, #160]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	00db      	lsls	r3, r3, #3
 800ea5e:	4925      	ldr	r1, [pc, #148]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800ea60:	4313      	orrs	r3, r2
 800ea62:	600b      	str	r3, [r1, #0]
 800ea64:	e015      	b.n	800ea92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea66:	4b24      	ldr	r3, [pc, #144]	@ (800eaf8 <HAL_RCC_OscConfig+0x244>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea6c:	f7fd faa6 	bl	800bfbc <HAL_GetTick>
 800ea70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea72:	e008      	b.n	800ea86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea74:	f7fd faa2 	bl	800bfbc <HAL_GetTick>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d901      	bls.n	800ea86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ea82:	2303      	movs	r3, #3
 800ea84:	e187      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea86:	4b1b      	ldr	r3, [pc, #108]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1f0      	bne.n	800ea74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f003 0308 	and.w	r3, r3, #8
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d036      	beq.n	800eb0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	695b      	ldr	r3, [r3, #20]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d016      	beq.n	800ead4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eaa6:	4b15      	ldr	r3, [pc, #84]	@ (800eafc <HAL_RCC_OscConfig+0x248>)
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eaac:	f7fd fa86 	bl	800bfbc <HAL_GetTick>
 800eab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eab2:	e008      	b.n	800eac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eab4:	f7fd fa82 	bl	800bfbc <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d901      	bls.n	800eac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800eac2:	2303      	movs	r3, #3
 800eac4:	e167      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eac6:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf4 <HAL_RCC_OscConfig+0x240>)
 800eac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaca:	f003 0302 	and.w	r3, r3, #2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0f0      	beq.n	800eab4 <HAL_RCC_OscConfig+0x200>
 800ead2:	e01b      	b.n	800eb0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ead4:	4b09      	ldr	r3, [pc, #36]	@ (800eafc <HAL_RCC_OscConfig+0x248>)
 800ead6:	2200      	movs	r2, #0
 800ead8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eada:	f7fd fa6f 	bl	800bfbc <HAL_GetTick>
 800eade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eae0:	e00e      	b.n	800eb00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eae2:	f7fd fa6b 	bl	800bfbc <HAL_GetTick>
 800eae6:	4602      	mov	r2, r0
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d907      	bls.n	800eb00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	e150      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
 800eaf4:	40023800 	.word	0x40023800
 800eaf8:	42470000 	.word	0x42470000
 800eafc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb00:	4b88      	ldr	r3, [pc, #544]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb04:	f003 0302 	and.w	r3, r3, #2
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1ea      	bne.n	800eae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f003 0304 	and.w	r3, r3, #4
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	f000 8097 	beq.w	800ec48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb1e:	4b81      	ldr	r3, [pc, #516]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10f      	bne.n	800eb4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	60bb      	str	r3, [r7, #8]
 800eb2e:	4b7d      	ldr	r3, [pc, #500]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb32:	4a7c      	ldr	r2, [pc, #496]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb38:	6413      	str	r3, [r2, #64]	@ 0x40
 800eb3a:	4b7a      	ldr	r3, [pc, #488]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb42:	60bb      	str	r3, [r7, #8]
 800eb44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eb46:	2301      	movs	r3, #1
 800eb48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb4a:	4b77      	ldr	r3, [pc, #476]	@ (800ed28 <HAL_RCC_OscConfig+0x474>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d118      	bne.n	800eb88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eb56:	4b74      	ldr	r3, [pc, #464]	@ (800ed28 <HAL_RCC_OscConfig+0x474>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4a73      	ldr	r2, [pc, #460]	@ (800ed28 <HAL_RCC_OscConfig+0x474>)
 800eb5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eb62:	f7fd fa2b 	bl	800bfbc <HAL_GetTick>
 800eb66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb68:	e008      	b.n	800eb7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb6a:	f7fd fa27 	bl	800bfbc <HAL_GetTick>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d901      	bls.n	800eb7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	e10c      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb7c:	4b6a      	ldr	r3, [pc, #424]	@ (800ed28 <HAL_RCC_OscConfig+0x474>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d0f0      	beq.n	800eb6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d106      	bne.n	800eb9e <HAL_RCC_OscConfig+0x2ea>
 800eb90:	4b64      	ldr	r3, [pc, #400]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb94:	4a63      	ldr	r2, [pc, #396]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eb96:	f043 0301 	orr.w	r3, r3, #1
 800eb9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800eb9c:	e01c      	b.n	800ebd8 <HAL_RCC_OscConfig+0x324>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	2b05      	cmp	r3, #5
 800eba4:	d10c      	bne.n	800ebc0 <HAL_RCC_OscConfig+0x30c>
 800eba6:	4b5f      	ldr	r3, [pc, #380]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800eba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebaa:	4a5e      	ldr	r2, [pc, #376]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebac:	f043 0304 	orr.w	r3, r3, #4
 800ebb0:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebb2:	4b5c      	ldr	r3, [pc, #368]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebb6:	4a5b      	ldr	r2, [pc, #364]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebb8:	f043 0301 	orr.w	r3, r3, #1
 800ebbc:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebbe:	e00b      	b.n	800ebd8 <HAL_RCC_OscConfig+0x324>
 800ebc0:	4b58      	ldr	r3, [pc, #352]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebc4:	4a57      	ldr	r2, [pc, #348]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebc6:	f023 0301 	bic.w	r3, r3, #1
 800ebca:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebcc:	4b55      	ldr	r3, [pc, #340]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebd0:	4a54      	ldr	r2, [pc, #336]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ebd2:	f023 0304 	bic.w	r3, r3, #4
 800ebd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d015      	beq.n	800ec0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebe0:	f7fd f9ec 	bl	800bfbc <HAL_GetTick>
 800ebe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ebe6:	e00a      	b.n	800ebfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ebe8:	f7fd f9e8 	bl	800bfbc <HAL_GetTick>
 800ebec:	4602      	mov	r2, r0
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d901      	bls.n	800ebfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	e0cb      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ebfe:	4b49      	ldr	r3, [pc, #292]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ec00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec02:	f003 0302 	and.w	r3, r3, #2
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d0ee      	beq.n	800ebe8 <HAL_RCC_OscConfig+0x334>
 800ec0a:	e014      	b.n	800ec36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec0c:	f7fd f9d6 	bl	800bfbc <HAL_GetTick>
 800ec10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec12:	e00a      	b.n	800ec2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec14:	f7fd f9d2 	bl	800bfbc <HAL_GetTick>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d901      	bls.n	800ec2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	e0b5      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec2a:	4b3e      	ldr	r3, [pc, #248]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ec2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec2e:	f003 0302 	and.w	r3, r3, #2
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1ee      	bne.n	800ec14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d105      	bne.n	800ec48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec3c:	4b39      	ldr	r3, [pc, #228]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ec3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec40:	4a38      	ldr	r2, [pc, #224]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ec42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f000 80a1 	beq.w	800ed94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ec52:	4b34      	ldr	r3, [pc, #208]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	f003 030c 	and.w	r3, r3, #12
 800ec5a:	2b08      	cmp	r3, #8
 800ec5c:	d05c      	beq.n	800ed18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	699b      	ldr	r3, [r3, #24]
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d141      	bne.n	800ecea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec66:	4b31      	ldr	r3, [pc, #196]	@ (800ed2c <HAL_RCC_OscConfig+0x478>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec6c:	f7fd f9a6 	bl	800bfbc <HAL_GetTick>
 800ec70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec72:	e008      	b.n	800ec86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec74:	f7fd f9a2 	bl	800bfbc <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	d901      	bls.n	800ec86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ec82:	2303      	movs	r3, #3
 800ec84:	e087      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec86:	4b27      	ldr	r3, [pc, #156]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1f0      	bne.n	800ec74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	69da      	ldr	r2, [r3, #28]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	431a      	orrs	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca0:	019b      	lsls	r3, r3, #6
 800eca2:	431a      	orrs	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eca8:	085b      	lsrs	r3, r3, #1
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	041b      	lsls	r3, r3, #16
 800ecae:	431a      	orrs	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb4:	061b      	lsls	r3, r3, #24
 800ecb6:	491b      	ldr	r1, [pc, #108]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ecbc:	4b1b      	ldr	r3, [pc, #108]	@ (800ed2c <HAL_RCC_OscConfig+0x478>)
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecc2:	f7fd f97b 	bl	800bfbc <HAL_GetTick>
 800ecc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecc8:	e008      	b.n	800ecdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecca:	f7fd f977 	bl	800bfbc <HAL_GetTick>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d901      	bls.n	800ecdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ecd8:	2303      	movs	r3, #3
 800ecda:	e05c      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecdc:	4b11      	ldr	r3, [pc, #68]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d0f0      	beq.n	800ecca <HAL_RCC_OscConfig+0x416>
 800ece8:	e054      	b.n	800ed94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecea:	4b10      	ldr	r3, [pc, #64]	@ (800ed2c <HAL_RCC_OscConfig+0x478>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecf0:	f7fd f964 	bl	800bfbc <HAL_GetTick>
 800ecf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecf6:	e008      	b.n	800ed0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecf8:	f7fd f960 	bl	800bfbc <HAL_GetTick>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d901      	bls.n	800ed0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e045      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed0a:	4b06      	ldr	r3, [pc, #24]	@ (800ed24 <HAL_RCC_OscConfig+0x470>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1f0      	bne.n	800ecf8 <HAL_RCC_OscConfig+0x444>
 800ed16:	e03d      	b.n	800ed94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d107      	bne.n	800ed30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ed20:	2301      	movs	r3, #1
 800ed22:	e038      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
 800ed24:	40023800 	.word	0x40023800
 800ed28:	40007000 	.word	0x40007000
 800ed2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ed30:	4b1b      	ldr	r3, [pc, #108]	@ (800eda0 <HAL_RCC_OscConfig+0x4ec>)
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	699b      	ldr	r3, [r3, #24]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d028      	beq.n	800ed90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d121      	bne.n	800ed90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d11a      	bne.n	800ed90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ed60:	4013      	ands	r3, r2
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ed66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d111      	bne.n	800ed90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed76:	085b      	lsrs	r3, r3, #1
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d107      	bne.n	800ed90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d001      	beq.n	800ed94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ed90:	2301      	movs	r3, #1
 800ed92:	e000      	b.n	800ed96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	40023800 	.word	0x40023800

0800eda4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d101      	bne.n	800edb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800edb4:	2301      	movs	r3, #1
 800edb6:	e0cc      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800edb8:	4b68      	ldr	r3, [pc, #416]	@ (800ef5c <HAL_RCC_ClockConfig+0x1b8>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 0307 	and.w	r3, r3, #7
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d90c      	bls.n	800ede0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edc6:	4b65      	ldr	r3, [pc, #404]	@ (800ef5c <HAL_RCC_ClockConfig+0x1b8>)
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	b2d2      	uxtb	r2, r2
 800edcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800edce:	4b63      	ldr	r3, [pc, #396]	@ (800ef5c <HAL_RCC_ClockConfig+0x1b8>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f003 0307 	and.w	r3, r3, #7
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d001      	beq.n	800ede0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eddc:	2301      	movs	r3, #1
 800edde:	e0b8      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f003 0302 	and.w	r3, r3, #2
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d020      	beq.n	800ee2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 0304 	and.w	r3, r3, #4
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d005      	beq.n	800ee04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800edf8:	4b59      	ldr	r3, [pc, #356]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	4a58      	ldr	r2, [pc, #352]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800edfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ee02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f003 0308 	and.w	r3, r3, #8
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d005      	beq.n	800ee1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ee10:	4b53      	ldr	r3, [pc, #332]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	4a52      	ldr	r2, [pc, #328]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ee1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee1c:	4b50      	ldr	r3, [pc, #320]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	494d      	ldr	r1, [pc, #308]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f003 0301 	and.w	r3, r3, #1
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d044      	beq.n	800eec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d107      	bne.n	800ee52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee42:	4b47      	ldr	r3, [pc, #284]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d119      	bne.n	800ee82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e07f      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d003      	beq.n	800ee62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d107      	bne.n	800ee72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee62:	4b3f      	ldr	r3, [pc, #252]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d109      	bne.n	800ee82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e06f      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee72:	4b3b      	ldr	r3, [pc, #236]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f003 0302 	and.w	r3, r3, #2
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d101      	bne.n	800ee82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e067      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ee82:	4b37      	ldr	r3, [pc, #220]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	f023 0203 	bic.w	r2, r3, #3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	4934      	ldr	r1, [pc, #208]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ee90:	4313      	orrs	r3, r2
 800ee92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ee94:	f7fd f892 	bl	800bfbc <HAL_GetTick>
 800ee98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee9a:	e00a      	b.n	800eeb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee9c:	f7fd f88e 	bl	800bfbc <HAL_GetTick>
 800eea0:	4602      	mov	r2, r0
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d901      	bls.n	800eeb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	e04f      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eeb2:	4b2b      	ldr	r3, [pc, #172]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	f003 020c 	and.w	r2, r3, #12
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d1eb      	bne.n	800ee9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eec4:	4b25      	ldr	r3, [pc, #148]	@ (800ef5c <HAL_RCC_ClockConfig+0x1b8>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 0307 	and.w	r3, r3, #7
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d20c      	bcs.n	800eeec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eed2:	4b22      	ldr	r3, [pc, #136]	@ (800ef5c <HAL_RCC_ClockConfig+0x1b8>)
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	b2d2      	uxtb	r2, r2
 800eed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eeda:	4b20      	ldr	r3, [pc, #128]	@ (800ef5c <HAL_RCC_ClockConfig+0x1b8>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f003 0307 	and.w	r3, r3, #7
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d001      	beq.n	800eeec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800eee8:	2301      	movs	r3, #1
 800eeea:	e032      	b.n	800ef52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f003 0304 	and.w	r3, r3, #4
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d008      	beq.n	800ef0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eef8:	4b19      	ldr	r3, [pc, #100]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	4916      	ldr	r1, [pc, #88]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ef06:	4313      	orrs	r3, r2
 800ef08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f003 0308 	and.w	r3, r3, #8
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d009      	beq.n	800ef2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ef16:	4b12      	ldr	r3, [pc, #72]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	490e      	ldr	r1, [pc, #56]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ef26:	4313      	orrs	r3, r2
 800ef28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ef2a:	f000 f821 	bl	800ef70 <HAL_RCC_GetSysClockFreq>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	4b0b      	ldr	r3, [pc, #44]	@ (800ef60 <HAL_RCC_ClockConfig+0x1bc>)
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	091b      	lsrs	r3, r3, #4
 800ef36:	f003 030f 	and.w	r3, r3, #15
 800ef3a:	490a      	ldr	r1, [pc, #40]	@ (800ef64 <HAL_RCC_ClockConfig+0x1c0>)
 800ef3c:	5ccb      	ldrb	r3, [r1, r3]
 800ef3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef42:	4a09      	ldr	r2, [pc, #36]	@ (800ef68 <HAL_RCC_ClockConfig+0x1c4>)
 800ef44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ef46:	4b09      	ldr	r3, [pc, #36]	@ (800ef6c <HAL_RCC_ClockConfig+0x1c8>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fc fff2 	bl	800bf34 <HAL_InitTick>

  return HAL_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	40023c00 	.word	0x40023c00
 800ef60:	40023800 	.word	0x40023800
 800ef64:	080167a8 	.word	0x080167a8
 800ef68:	20000000 	.word	0x20000000
 800ef6c:	20000220 	.word	0x20000220

0800ef70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ef70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef74:	b094      	sub	sp, #80	@ 0x50
 800ef76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ef80:	2300      	movs	r3, #0
 800ef82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ef84:	2300      	movs	r3, #0
 800ef86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ef88:	4b79      	ldr	r3, [pc, #484]	@ (800f170 <HAL_RCC_GetSysClockFreq+0x200>)
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	f003 030c 	and.w	r3, r3, #12
 800ef90:	2b08      	cmp	r3, #8
 800ef92:	d00d      	beq.n	800efb0 <HAL_RCC_GetSysClockFreq+0x40>
 800ef94:	2b08      	cmp	r3, #8
 800ef96:	f200 80e1 	bhi.w	800f15c <HAL_RCC_GetSysClockFreq+0x1ec>
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d002      	beq.n	800efa4 <HAL_RCC_GetSysClockFreq+0x34>
 800ef9e:	2b04      	cmp	r3, #4
 800efa0:	d003      	beq.n	800efaa <HAL_RCC_GetSysClockFreq+0x3a>
 800efa2:	e0db      	b.n	800f15c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800efa4:	4b73      	ldr	r3, [pc, #460]	@ (800f174 <HAL_RCC_GetSysClockFreq+0x204>)
 800efa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800efa8:	e0db      	b.n	800f162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800efaa:	4b73      	ldr	r3, [pc, #460]	@ (800f178 <HAL_RCC_GetSysClockFreq+0x208>)
 800efac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800efae:	e0d8      	b.n	800f162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800efb0:	4b6f      	ldr	r3, [pc, #444]	@ (800f170 <HAL_RCC_GetSysClockFreq+0x200>)
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800efb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800efba:	4b6d      	ldr	r3, [pc, #436]	@ (800f170 <HAL_RCC_GetSysClockFreq+0x200>)
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d063      	beq.n	800f08e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800efc6:	4b6a      	ldr	r3, [pc, #424]	@ (800f170 <HAL_RCC_GetSysClockFreq+0x200>)
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	099b      	lsrs	r3, r3, #6
 800efcc:	2200      	movs	r2, #0
 800efce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800efd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800efd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800efda:	2300      	movs	r3, #0
 800efdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800efde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800efe2:	4622      	mov	r2, r4
 800efe4:	462b      	mov	r3, r5
 800efe6:	f04f 0000 	mov.w	r0, #0
 800efea:	f04f 0100 	mov.w	r1, #0
 800efee:	0159      	lsls	r1, r3, #5
 800eff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eff4:	0150      	lsls	r0, r2, #5
 800eff6:	4602      	mov	r2, r0
 800eff8:	460b      	mov	r3, r1
 800effa:	4621      	mov	r1, r4
 800effc:	1a51      	subs	r1, r2, r1
 800effe:	6139      	str	r1, [r7, #16]
 800f000:	4629      	mov	r1, r5
 800f002:	eb63 0301 	sbc.w	r3, r3, r1
 800f006:	617b      	str	r3, [r7, #20]
 800f008:	f04f 0200 	mov.w	r2, #0
 800f00c:	f04f 0300 	mov.w	r3, #0
 800f010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f014:	4659      	mov	r1, fp
 800f016:	018b      	lsls	r3, r1, #6
 800f018:	4651      	mov	r1, sl
 800f01a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f01e:	4651      	mov	r1, sl
 800f020:	018a      	lsls	r2, r1, #6
 800f022:	4651      	mov	r1, sl
 800f024:	ebb2 0801 	subs.w	r8, r2, r1
 800f028:	4659      	mov	r1, fp
 800f02a:	eb63 0901 	sbc.w	r9, r3, r1
 800f02e:	f04f 0200 	mov.w	r2, #0
 800f032:	f04f 0300 	mov.w	r3, #0
 800f036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f03a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f03e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f042:	4690      	mov	r8, r2
 800f044:	4699      	mov	r9, r3
 800f046:	4623      	mov	r3, r4
 800f048:	eb18 0303 	adds.w	r3, r8, r3
 800f04c:	60bb      	str	r3, [r7, #8]
 800f04e:	462b      	mov	r3, r5
 800f050:	eb49 0303 	adc.w	r3, r9, r3
 800f054:	60fb      	str	r3, [r7, #12]
 800f056:	f04f 0200 	mov.w	r2, #0
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f062:	4629      	mov	r1, r5
 800f064:	024b      	lsls	r3, r1, #9
 800f066:	4621      	mov	r1, r4
 800f068:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f06c:	4621      	mov	r1, r4
 800f06e:	024a      	lsls	r2, r1, #9
 800f070:	4610      	mov	r0, r2
 800f072:	4619      	mov	r1, r3
 800f074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f076:	2200      	movs	r2, #0
 800f078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f07a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f07c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f080:	f7f1 fdf2 	bl	8000c68 <__aeabi_uldivmod>
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	4613      	mov	r3, r2
 800f08a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f08c:	e058      	b.n	800f140 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f08e:	4b38      	ldr	r3, [pc, #224]	@ (800f170 <HAL_RCC_GetSysClockFreq+0x200>)
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	099b      	lsrs	r3, r3, #6
 800f094:	2200      	movs	r2, #0
 800f096:	4618      	mov	r0, r3
 800f098:	4611      	mov	r1, r2
 800f09a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f09e:	623b      	str	r3, [r7, #32]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f0a8:	4642      	mov	r2, r8
 800f0aa:	464b      	mov	r3, r9
 800f0ac:	f04f 0000 	mov.w	r0, #0
 800f0b0:	f04f 0100 	mov.w	r1, #0
 800f0b4:	0159      	lsls	r1, r3, #5
 800f0b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f0ba:	0150      	lsls	r0, r2, #5
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4641      	mov	r1, r8
 800f0c2:	ebb2 0a01 	subs.w	sl, r2, r1
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	eb63 0b01 	sbc.w	fp, r3, r1
 800f0cc:	f04f 0200 	mov.w	r2, #0
 800f0d0:	f04f 0300 	mov.w	r3, #0
 800f0d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f0d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f0dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f0e0:	ebb2 040a 	subs.w	r4, r2, sl
 800f0e4:	eb63 050b 	sbc.w	r5, r3, fp
 800f0e8:	f04f 0200 	mov.w	r2, #0
 800f0ec:	f04f 0300 	mov.w	r3, #0
 800f0f0:	00eb      	lsls	r3, r5, #3
 800f0f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f0f6:	00e2      	lsls	r2, r4, #3
 800f0f8:	4614      	mov	r4, r2
 800f0fa:	461d      	mov	r5, r3
 800f0fc:	4643      	mov	r3, r8
 800f0fe:	18e3      	adds	r3, r4, r3
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	464b      	mov	r3, r9
 800f104:	eb45 0303 	adc.w	r3, r5, r3
 800f108:	607b      	str	r3, [r7, #4]
 800f10a:	f04f 0200 	mov.w	r2, #0
 800f10e:	f04f 0300 	mov.w	r3, #0
 800f112:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f116:	4629      	mov	r1, r5
 800f118:	028b      	lsls	r3, r1, #10
 800f11a:	4621      	mov	r1, r4
 800f11c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f120:	4621      	mov	r1, r4
 800f122:	028a      	lsls	r2, r1, #10
 800f124:	4610      	mov	r0, r2
 800f126:	4619      	mov	r1, r3
 800f128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f12a:	2200      	movs	r2, #0
 800f12c:	61bb      	str	r3, [r7, #24]
 800f12e:	61fa      	str	r2, [r7, #28]
 800f130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f134:	f7f1 fd98 	bl	8000c68 <__aeabi_uldivmod>
 800f138:	4602      	mov	r2, r0
 800f13a:	460b      	mov	r3, r1
 800f13c:	4613      	mov	r3, r2
 800f13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f140:	4b0b      	ldr	r3, [pc, #44]	@ (800f170 <HAL_RCC_GetSysClockFreq+0x200>)
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	0c1b      	lsrs	r3, r3, #16
 800f146:	f003 0303 	and.w	r3, r3, #3
 800f14a:	3301      	adds	r3, #1
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800f150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f154:	fbb2 f3f3 	udiv	r3, r2, r3
 800f158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f15a:	e002      	b.n	800f162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f15c:	4b05      	ldr	r3, [pc, #20]	@ (800f174 <HAL_RCC_GetSysClockFreq+0x204>)
 800f15e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f160:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f164:	4618      	mov	r0, r3
 800f166:	3750      	adds	r7, #80	@ 0x50
 800f168:	46bd      	mov	sp, r7
 800f16a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f16e:	bf00      	nop
 800f170:	40023800 	.word	0x40023800
 800f174:	00f42400 	.word	0x00f42400
 800f178:	007a1200 	.word	0x007a1200

0800f17c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f17c:	b480      	push	{r7}
 800f17e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f180:	4b03      	ldr	r3, [pc, #12]	@ (800f190 <HAL_RCC_GetHCLKFreq+0x14>)
 800f182:	681b      	ldr	r3, [r3, #0]
}
 800f184:	4618      	mov	r0, r3
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20000000 	.word	0x20000000

0800f194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f198:	f7ff fff0 	bl	800f17c <HAL_RCC_GetHCLKFreq>
 800f19c:	4602      	mov	r2, r0
 800f19e:	4b05      	ldr	r3, [pc, #20]	@ (800f1b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	0a9b      	lsrs	r3, r3, #10
 800f1a4:	f003 0307 	and.w	r3, r3, #7
 800f1a8:	4903      	ldr	r1, [pc, #12]	@ (800f1b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f1aa:	5ccb      	ldrb	r3, [r1, r3]
 800f1ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	40023800 	.word	0x40023800
 800f1b8:	080167b8 	.word	0x080167b8

0800f1bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f1c0:	f7ff ffdc 	bl	800f17c <HAL_RCC_GetHCLKFreq>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	4b05      	ldr	r3, [pc, #20]	@ (800f1dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	0b5b      	lsrs	r3, r3, #13
 800f1cc:	f003 0307 	and.w	r3, r3, #7
 800f1d0:	4903      	ldr	r1, [pc, #12]	@ (800f1e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f1d2:	5ccb      	ldrb	r3, [r1, r3]
 800f1d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	40023800 	.word	0x40023800
 800f1e0:	080167b8 	.word	0x080167b8

0800f1e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d101      	bne.n	800f1f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e07b      	b.n	800f2ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d108      	bne.n	800f210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f206:	d009      	beq.n	800f21c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	61da      	str	r2, [r3, #28]
 800f20e:	e005      	b.n	800f21c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7f2 fe00 	bl	8001e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2202      	movs	r2, #2
 800f240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f264:	431a      	orrs	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f26e:	431a      	orrs	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	f003 0302 	and.w	r3, r3, #2
 800f278:	431a      	orrs	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	695b      	ldr	r3, [r3, #20]
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	431a      	orrs	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	699b      	ldr	r3, [r3, #24]
 800f288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f28c:	431a      	orrs	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	69db      	ldr	r3, [r3, #28]
 800f292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f296:	431a      	orrs	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6a1b      	ldr	r3, [r3, #32]
 800f29c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2a0:	ea42 0103 	orr.w	r1, r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	430a      	orrs	r2, r1
 800f2b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	0c1b      	lsrs	r3, r3, #16
 800f2ba:	f003 0104 	and.w	r1, r3, #4
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2c2:	f003 0210 	and.w	r2, r3, #16
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	69da      	ldr	r2, [r3, #28]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f2dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b088      	sub	sp, #32
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	60f8      	str	r0, [r7, #12]
 800f2fe:	60b9      	str	r1, [r7, #8]
 800f300:	603b      	str	r3, [r7, #0]
 800f302:	4613      	mov	r3, r2
 800f304:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f306:	f7fc fe59 	bl	800bfbc <HAL_GetTick>
 800f30a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d001      	beq.n	800f320 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f31c:	2302      	movs	r3, #2
 800f31e:	e12a      	b.n	800f576 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d002      	beq.n	800f32c <HAL_SPI_Transmit+0x36>
 800f326:	88fb      	ldrh	r3, [r7, #6]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e122      	b.n	800f576 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f336:	2b01      	cmp	r3, #1
 800f338:	d101      	bne.n	800f33e <HAL_SPI_Transmit+0x48>
 800f33a:	2302      	movs	r3, #2
 800f33c:	e11b      	b.n	800f576 <HAL_SPI_Transmit+0x280>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2203      	movs	r2, #3
 800f34a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	88fa      	ldrh	r2, [r7, #6]
 800f35e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	88fa      	ldrh	r2, [r7, #6]
 800f364:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2200      	movs	r2, #0
 800f370:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2200      	movs	r2, #0
 800f376:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f38c:	d10f      	bne.n	800f3ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f39c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f3ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3b8:	2b40      	cmp	r3, #64	@ 0x40
 800f3ba:	d007      	beq.n	800f3cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f3d4:	d152      	bne.n	800f47c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <HAL_SPI_Transmit+0xee>
 800f3de:	8b7b      	ldrh	r3, [r7, #26]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d145      	bne.n	800f470 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e8:	881a      	ldrh	r2, [r3, #0]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3f4:	1c9a      	adds	r2, r3, #2
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	3b01      	subs	r3, #1
 800f402:	b29a      	uxth	r2, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f408:	e032      	b.n	800f470 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	f003 0302 	and.w	r3, r3, #2
 800f414:	2b02      	cmp	r3, #2
 800f416:	d112      	bne.n	800f43e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f41c:	881a      	ldrh	r2, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f428:	1c9a      	adds	r2, r3, #2
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f432:	b29b      	uxth	r3, r3
 800f434:	3b01      	subs	r3, #1
 800f436:	b29a      	uxth	r2, r3
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f43c:	e018      	b.n	800f470 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f43e:	f7fc fdbd 	bl	800bfbc <HAL_GetTick>
 800f442:	4602      	mov	r2, r0
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d803      	bhi.n	800f456 <HAL_SPI_Transmit+0x160>
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f454:	d102      	bne.n	800f45c <HAL_SPI_Transmit+0x166>
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d109      	bne.n	800f470 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f46c:	2303      	movs	r3, #3
 800f46e:	e082      	b.n	800f576 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f474:	b29b      	uxth	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1c7      	bne.n	800f40a <HAL_SPI_Transmit+0x114>
 800f47a:	e053      	b.n	800f524 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <HAL_SPI_Transmit+0x194>
 800f484:	8b7b      	ldrh	r3, [r7, #26]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d147      	bne.n	800f51a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	330c      	adds	r3, #12
 800f494:	7812      	ldrb	r2, [r2, #0]
 800f496:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f49c:	1c5a      	adds	r2, r3, #1
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f4b0:	e033      	b.n	800f51a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	f003 0302 	and.w	r3, r3, #2
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	d113      	bne.n	800f4e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	330c      	adds	r3, #12
 800f4ca:	7812      	ldrb	r2, [r2, #0]
 800f4cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4d2:	1c5a      	adds	r2, r3, #1
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f4e6:	e018      	b.n	800f51a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4e8:	f7fc fd68 	bl	800bfbc <HAL_GetTick>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d803      	bhi.n	800f500 <HAL_SPI_Transmit+0x20a>
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fe:	d102      	bne.n	800f506 <HAL_SPI_Transmit+0x210>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d109      	bne.n	800f51a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f516:	2303      	movs	r3, #3
 800f518:	e02d      	b.n	800f576 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f51e:	b29b      	uxth	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1c6      	bne.n	800f4b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f524:	69fa      	ldr	r2, [r7, #28]
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f000 fdd9 	bl	80100e0 <SPI_EndRxTxTransaction>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d002      	beq.n	800f53a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2220      	movs	r2, #32
 800f538:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10a      	bne.n	800f558 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f542:	2300      	movs	r3, #0
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	617b      	str	r3, [r7, #20]
 800f556:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d001      	beq.n	800f574 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f570:	2301      	movs	r3, #1
 800f572:	e000      	b.n	800f576 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f574:	2300      	movs	r3, #0
  }
}
 800f576:	4618      	mov	r0, r3
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b08a      	sub	sp, #40	@ 0x28
 800f582:	af00      	add	r7, sp, #0
 800f584:	60f8      	str	r0, [r7, #12]
 800f586:	60b9      	str	r1, [r7, #8]
 800f588:	607a      	str	r2, [r7, #4]
 800f58a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f58c:	2301      	movs	r3, #1
 800f58e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f590:	f7fc fd14 	bl	800bfbc <HAL_GetTick>
 800f594:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f59c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f5a4:	887b      	ldrh	r3, [r7, #2]
 800f5a6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f5a8:	7ffb      	ldrb	r3, [r7, #31]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d00c      	beq.n	800f5c8 <HAL_SPI_TransmitReceive+0x4a>
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f5b4:	d106      	bne.n	800f5c4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d102      	bne.n	800f5c4 <HAL_SPI_TransmitReceive+0x46>
 800f5be:	7ffb      	ldrb	r3, [r7, #31]
 800f5c0:	2b04      	cmp	r3, #4
 800f5c2:	d001      	beq.n	800f5c8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	e17f      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d005      	beq.n	800f5da <HAL_SPI_TransmitReceive+0x5c>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <HAL_SPI_TransmitReceive+0x5c>
 800f5d4:	887b      	ldrh	r3, [r7, #2]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e174      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d101      	bne.n	800f5ec <HAL_SPI_TransmitReceive+0x6e>
 800f5e8:	2302      	movs	r3, #2
 800f5ea:	e16d      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	d003      	beq.n	800f608 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2205      	movs	r2, #5
 800f604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2200      	movs	r2, #0
 800f60c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	887a      	ldrh	r2, [r7, #2]
 800f618:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	887a      	ldrh	r2, [r7, #2]
 800f61e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	887a      	ldrh	r2, [r7, #2]
 800f62a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	887a      	ldrh	r2, [r7, #2]
 800f630:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f648:	2b40      	cmp	r3, #64	@ 0x40
 800f64a:	d007      	beq.n	800f65c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f65a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f664:	d17e      	bne.n	800f764 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d002      	beq.n	800f674 <HAL_SPI_TransmitReceive+0xf6>
 800f66e:	8afb      	ldrh	r3, [r7, #22]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d16c      	bne.n	800f74e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f678:	881a      	ldrh	r2, [r3, #0]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f684:	1c9a      	adds	r2, r3, #2
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f68e:	b29b      	uxth	r3, r3
 800f690:	3b01      	subs	r3, #1
 800f692:	b29a      	uxth	r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f698:	e059      	b.n	800f74e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	f003 0302 	and.w	r3, r3, #2
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d11b      	bne.n	800f6e0 <HAL_SPI_TransmitReceive+0x162>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d016      	beq.n	800f6e0 <HAL_SPI_TransmitReceive+0x162>
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d113      	bne.n	800f6e0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6bc:	881a      	ldrh	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6c8:	1c9a      	adds	r2, r3, #2
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d119      	bne.n	800f722 <HAL_SPI_TransmitReceive+0x1a4>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d014      	beq.n	800f722 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68da      	ldr	r2, [r3, #12]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f702:	b292      	uxth	r2, r2
 800f704:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70a:	1c9a      	adds	r2, r3, #2
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f714:	b29b      	uxth	r3, r3
 800f716:	3b01      	subs	r3, #1
 800f718:	b29a      	uxth	r2, r3
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f71e:	2301      	movs	r3, #1
 800f720:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f722:	f7fc fc4b 	bl	800bfbc <HAL_GetTick>
 800f726:	4602      	mov	r2, r0
 800f728:	6a3b      	ldr	r3, [r7, #32]
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f72e:	429a      	cmp	r2, r3
 800f730:	d80d      	bhi.n	800f74e <HAL_SPI_TransmitReceive+0x1d0>
 800f732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f738:	d009      	beq.n	800f74e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2201      	movs	r2, #1
 800f73e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f74a:	2303      	movs	r3, #3
 800f74c:	e0bc      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f752:	b29b      	uxth	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1a0      	bne.n	800f69a <HAL_SPI_TransmitReceive+0x11c>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d19b      	bne.n	800f69a <HAL_SPI_TransmitReceive+0x11c>
 800f762:	e082      	b.n	800f86a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d002      	beq.n	800f772 <HAL_SPI_TransmitReceive+0x1f4>
 800f76c:	8afb      	ldrh	r3, [r7, #22]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d171      	bne.n	800f856 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	330c      	adds	r3, #12
 800f77c:	7812      	ldrb	r2, [r2, #0]
 800f77e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f78e:	b29b      	uxth	r3, r3
 800f790:	3b01      	subs	r3, #1
 800f792:	b29a      	uxth	r2, r3
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f798:	e05d      	b.n	800f856 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	f003 0302 	and.w	r3, r3, #2
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d11c      	bne.n	800f7e2 <HAL_SPI_TransmitReceive+0x264>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d017      	beq.n	800f7e2 <HAL_SPI_TransmitReceive+0x264>
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d114      	bne.n	800f7e2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	7812      	ldrb	r2, [r2, #0]
 800f7c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	f003 0301 	and.w	r3, r3, #1
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d119      	bne.n	800f824 <HAL_SPI_TransmitReceive+0x2a6>
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d014      	beq.n	800f824 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	68da      	ldr	r2, [r3, #12]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f804:	b2d2      	uxtb	r2, r2
 800f806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f80c:	1c5a      	adds	r2, r3, #1
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f816:	b29b      	uxth	r3, r3
 800f818:	3b01      	subs	r3, #1
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f820:	2301      	movs	r3, #1
 800f822:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f824:	f7fc fbca 	bl	800bfbc <HAL_GetTick>
 800f828:	4602      	mov	r2, r0
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f830:	429a      	cmp	r2, r3
 800f832:	d803      	bhi.n	800f83c <HAL_SPI_TransmitReceive+0x2be>
 800f834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83a:	d102      	bne.n	800f842 <HAL_SPI_TransmitReceive+0x2c4>
 800f83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d109      	bne.n	800f856 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2201      	movs	r2, #1
 800f846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2200      	movs	r2, #0
 800f84e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f852:	2303      	movs	r3, #3
 800f854:	e038      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d19c      	bne.n	800f79a <HAL_SPI_TransmitReceive+0x21c>
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f864:	b29b      	uxth	r3, r3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d197      	bne.n	800f79a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f86a:	6a3a      	ldr	r2, [r7, #32]
 800f86c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f000 fc36 	bl	80100e0 <SPI_EndRxTxTransaction>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d008      	beq.n	800f88c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2220      	movs	r2, #32
 800f87e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2200      	movs	r2, #0
 800f884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f888:	2301      	movs	r3, #1
 800f88a:	e01d      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d10a      	bne.n	800f8aa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f894:	2300      	movs	r3, #0
 800f896:	613b      	str	r3, [r7, #16]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	613b      	str	r3, [r7, #16]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	613b      	str	r3, [r7, #16]
 800f8a8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e000      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f8c6:	2300      	movs	r3, #0
  }
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3728      	adds	r7, #40	@ 0x28
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	d001      	beq.n	800f8ee <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800f8ea:	2302      	movs	r3, #2
 800f8ec:	e097      	b.n	800fa1e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d002      	beq.n	800f8fa <HAL_SPI_Transmit_DMA+0x2a>
 800f8f4:	88fb      	ldrh	r3, [r7, #6]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e08f      	b.n	800fa1e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f904:	2b01      	cmp	r3, #1
 800f906:	d101      	bne.n	800f90c <HAL_SPI_Transmit_DMA+0x3c>
 800f908:	2302      	movs	r3, #2
 800f90a:	e088      	b.n	800fa1e <HAL_SPI_Transmit_DMA+0x14e>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2201      	movs	r2, #1
 800f910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2203      	movs	r2, #3
 800f918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2200      	movs	r2, #0
 800f920:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	88fa      	ldrh	r2, [r7, #6]
 800f92c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	88fa      	ldrh	r2, [r7, #6]
 800f932:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2200      	movs	r2, #0
 800f944:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f95a:	d10f      	bne.n	800f97c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f96a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f97a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f980:	4a29      	ldr	r2, [pc, #164]	@ (800fa28 <HAL_SPI_Transmit_DMA+0x158>)
 800f982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f988:	4a28      	ldr	r2, [pc, #160]	@ (800fa2c <HAL_SPI_Transmit_DMA+0x15c>)
 800f98a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f990:	4a27      	ldr	r2, [pc, #156]	@ (800fa30 <HAL_SPI_Transmit_DMA+0x160>)
 800f992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f998:	2200      	movs	r2, #0
 800f99a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	330c      	adds	r3, #12
 800f9ac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f9b4:	f7fc fcf2 	bl	800c39c <HAL_DMA_Start_IT>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00b      	beq.n	800f9d6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9c2:	f043 0210 	orr.w	r2, r3, #16
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e023      	b.n	800fa1e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9e0:	2b40      	cmp	r3, #64	@ 0x40
 800f9e2:	d007      	beq.n	800f9f4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9f2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0220 	orr.w	r2, r2, #32
 800fa0a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	685a      	ldr	r2, [r3, #4]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f042 0202 	orr.w	r2, r2, #2
 800fa1a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	0800fe71 	.word	0x0800fe71
 800fa2c:	0800fc91 	.word	0x0800fc91
 800fa30:	0800fec5 	.word	0x0800fec5

0800fa34 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
 800fa40:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fa48:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800fa50:	7dfb      	ldrb	r3, [r7, #23]
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d00c      	beq.n	800fa70 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa5c:	d106      	bne.n	800fa6c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d102      	bne.n	800fa6c <HAL_SPI_TransmitReceive_DMA+0x38>
 800fa66:	7dfb      	ldrb	r3, [r7, #23]
 800fa68:	2b04      	cmp	r3, #4
 800fa6a:	d001      	beq.n	800fa70 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800fa6c:	2302      	movs	r3, #2
 800fa6e:	e0cf      	b.n	800fc10 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d005      	beq.n	800fa82 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800fa7c:	887b      	ldrh	r3, [r7, #2]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800fa82:	2301      	movs	r3, #1
 800fa84:	e0c4      	b.n	800fc10 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d101      	bne.n	800fa94 <HAL_SPI_TransmitReceive_DMA+0x60>
 800fa90:	2302      	movs	r3, #2
 800fa92:	e0bd      	b.n	800fc10 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2201      	movs	r2, #1
 800fa98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	2b04      	cmp	r3, #4
 800faa6:	d003      	beq.n	800fab0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2205      	movs	r2, #5
 800faac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2200      	movs	r2, #0
 800fab4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	887a      	ldrh	r2, [r7, #2]
 800fac0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	887a      	ldrh	r2, [r7, #2]
 800fac6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	887a      	ldrh	r2, [r7, #2]
 800fad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	887a      	ldrh	r2, [r7, #2]
 800fad8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2200      	movs	r2, #0
 800fae4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b04      	cmp	r3, #4
 800faf0:	d108      	bne.n	800fb04 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faf6:	4a48      	ldr	r2, [pc, #288]	@ (800fc18 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800faf8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fafe:	4a47      	ldr	r2, [pc, #284]	@ (800fc1c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800fb00:	63da      	str	r2, [r3, #60]	@ 0x3c
 800fb02:	e007      	b.n	800fb14 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb08:	4a45      	ldr	r2, [pc, #276]	@ (800fc20 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800fb0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb10:	4a44      	ldr	r2, [pc, #272]	@ (800fc24 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800fb12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb18:	4a43      	ldr	r2, [pc, #268]	@ (800fc28 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800fb1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb20:	2200      	movs	r2, #0
 800fb22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	4619      	mov	r1, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800fb3c:	f7fc fc2e 	bl	800c39c <HAL_DMA_Start_IT>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00b      	beq.n	800fb5e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb4a:	f043 0210 	orr.w	r2, r3, #16
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e058      	b.n	800fc10 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f042 0201 	orr.w	r2, r2, #1
 800fb6c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb72:	2200      	movs	r2, #0
 800fb74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb82:	2200      	movs	r2, #0
 800fb84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb96:	4619      	mov	r1, r3
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	330c      	adds	r3, #12
 800fb9e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fba4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fba6:	f7fc fbf9 	bl	800c39c <HAL_DMA_Start_IT>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00b      	beq.n	800fbc8 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbb4:	f043 0210 	orr.w	r2, r3, #16
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e023      	b.n	800fc10 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbd2:	2b40      	cmp	r3, #64	@ 0x40
 800fbd4:	d007      	beq.n	800fbe6 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fbe4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f042 0220 	orr.w	r2, r2, #32
 800fbfc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	685a      	ldr	r2, [r3, #4]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	f042 0202 	orr.w	r2, r2, #2
 800fc0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3718      	adds	r7, #24
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	0800fe8d 	.word	0x0800fe8d
 800fc1c:	0800fd39 	.word	0x0800fd39
 800fc20:	0800fea9 	.word	0x0800fea9
 800fc24:	0800fde1 	.word	0x0800fde1
 800fc28:	0800fec5 	.word	0x0800fec5

0800fc2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800fc34:	bf00      	nop
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc9e:	f7fc f98d 	bl	800bfbc <HAL_GetTick>
 800fca2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcb2:	d03b      	beq.n	800fd2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	685a      	ldr	r2, [r3, #4]
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f022 0220 	bic.w	r2, r2, #32
 800fcc2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f022 0202 	bic.w	r2, r2, #2
 800fcd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fcd4:	693a      	ldr	r2, [r7, #16]
 800fcd6:	2164      	movs	r1, #100	@ 0x64
 800fcd8:	6978      	ldr	r0, [r7, #20]
 800fcda:	f000 fa01 	bl	80100e0 <SPI_EndRxTxTransaction>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d005      	beq.n	800fcf0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fce8:	f043 0220 	orr.w	r2, r3, #32
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d10a      	bne.n	800fd0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	60fb      	str	r3, [r7, #12]
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	60fb      	str	r3, [r7, #12]
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	2200      	movs	r2, #0
 800fd12:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d003      	beq.n	800fd2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fd24:	6978      	ldr	r0, [r7, #20]
 800fd26:	f7ff ffa9 	bl	800fc7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fd2a:	e002      	b.n	800fd32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800fd2c:	6978      	ldr	r0, [r7, #20]
 800fd2e:	f7f1 fcb7 	bl	80016a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fd32:	3718      	adds	r7, #24
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd44:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd46:	f7fc f939 	bl	800bfbc <HAL_GetTick>
 800fd4a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd5a:	d03b      	beq.n	800fdd4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	685a      	ldr	r2, [r3, #4]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f022 0220 	bic.w	r2, r2, #32
 800fd6a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d10d      	bne.n	800fd90 <SPI_DMAReceiveCplt+0x58>
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd7c:	d108      	bne.n	800fd90 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f022 0203 	bic.w	r2, r2, #3
 800fd8c:	605a      	str	r2, [r3, #4]
 800fd8e:	e007      	b.n	800fda0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f022 0201 	bic.w	r2, r2, #1
 800fd9e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	2164      	movs	r1, #100	@ 0x64
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f000 f935 	bl	8010014 <SPI_EndRxTransaction>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2220      	movs	r2, #32
 800fdb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d003      	beq.n	800fdd4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f7ff ff55 	bl	800fc7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fdd2:	e002      	b.n	800fdda <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f7ff ff29 	bl	800fc2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fdee:	f7fc f8e5 	bl	800bfbc <HAL_GetTick>
 800fdf2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe02:	d02f      	beq.n	800fe64 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f022 0220 	bic.w	r2, r2, #32
 800fe12:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	2164      	movs	r1, #100	@ 0x64
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f000 f961 	bl	80100e0 <SPI_EndRxTxTransaction>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d005      	beq.n	800fe30 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe28:	f043 0220 	orr.w	r2, r3, #32
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f022 0203 	bic.w	r2, r2, #3
 800fe3e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fe5c:	68f8      	ldr	r0, [r7, #12]
 800fe5e:	f7ff ff0d 	bl	800fc7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fe62:	e002      	b.n	800fe6a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f7f1 fc31 	bl	80016cc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe7c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	f7ff fede 	bl	800fc40 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fe84:	bf00      	nop
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe98:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	f7ff feda 	bl	800fc54 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fea0:	bf00      	nop
 800fea2:	3710      	adds	r7, #16
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f7ff fed6 	bl	800fc68 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800febc:	bf00      	nop
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f022 0203 	bic.w	r2, r2, #3
 800fee0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fee6:	f043 0210 	orr.w	r2, r3, #16
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2201      	movs	r2, #1
 800fef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7ff fec0 	bl	800fc7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fefc:	bf00      	nop
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b088      	sub	sp, #32
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	603b      	str	r3, [r7, #0]
 800ff10:	4613      	mov	r3, r2
 800ff12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ff14:	f7fc f852 	bl	800bfbc <HAL_GetTick>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1c:	1a9b      	subs	r3, r3, r2
 800ff1e:	683a      	ldr	r2, [r7, #0]
 800ff20:	4413      	add	r3, r2
 800ff22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ff24:	f7fc f84a 	bl	800bfbc <HAL_GetTick>
 800ff28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ff2a:	4b39      	ldr	r3, [pc, #228]	@ (8010010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	015b      	lsls	r3, r3, #5
 800ff30:	0d1b      	lsrs	r3, r3, #20
 800ff32:	69fa      	ldr	r2, [r7, #28]
 800ff34:	fb02 f303 	mul.w	r3, r2, r3
 800ff38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ff3a:	e055      	b.n	800ffe8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff42:	d051      	beq.n	800ffe8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ff44:	f7fc f83a 	bl	800bfbc <HAL_GetTick>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	1ad3      	subs	r3, r2, r3
 800ff4e:	69fa      	ldr	r2, [r7, #28]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d902      	bls.n	800ff5a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d13d      	bne.n	800ffd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	685a      	ldr	r2, [r3, #4]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ff68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ff72:	d111      	bne.n	800ff98 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff7c:	d004      	beq.n	800ff88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff86:	d107      	bne.n	800ff98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ff96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffa0:	d10f      	bne.n	800ffc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ffc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ffd2:	2303      	movs	r3, #3
 800ffd4:	e018      	b.n	8010008 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d102      	bne.n	800ffe2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	61fb      	str	r3, [r7, #28]
 800ffe0:	e002      	b.n	800ffe8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	689a      	ldr	r2, [r3, #8]
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	4013      	ands	r3, r2
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	bf0c      	ite	eq
 800fff8:	2301      	moveq	r3, #1
 800fffa:	2300      	movne	r3, #0
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	461a      	mov	r2, r3
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	429a      	cmp	r2, r3
 8010004:	d19a      	bne.n	800ff3c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3720      	adds	r7, #32
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	20000000 	.word	0x20000000

08010014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af02      	add	r7, sp, #8
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010028:	d111      	bne.n	801004e <SPI_EndRxTransaction+0x3a>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010032:	d004      	beq.n	801003e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801003c:	d107      	bne.n	801004e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801004c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010056:	d12a      	bne.n	80100ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010060:	d012      	beq.n	8010088 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	9300      	str	r3, [sp, #0]
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2200      	movs	r2, #0
 801006a:	2180      	movs	r1, #128	@ 0x80
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f7ff ff49 	bl	800ff04 <SPI_WaitFlagStateUntilTimeout>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d02d      	beq.n	80100d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801007c:	f043 0220 	orr.w	r2, r3, #32
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010084:	2303      	movs	r3, #3
 8010086:	e026      	b.n	80100d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	2200      	movs	r2, #0
 8010090:	2101      	movs	r1, #1
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7ff ff36 	bl	800ff04 <SPI_WaitFlagStateUntilTimeout>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d01a      	beq.n	80100d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100a2:	f043 0220 	orr.w	r2, r3, #32
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80100aa:	2303      	movs	r3, #3
 80100ac:	e013      	b.n	80100d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	9300      	str	r3, [sp, #0]
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	2200      	movs	r2, #0
 80100b6:	2101      	movs	r1, #1
 80100b8:	68f8      	ldr	r0, [r7, #12]
 80100ba:	f7ff ff23 	bl	800ff04 <SPI_WaitFlagStateUntilTimeout>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d007      	beq.n	80100d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100c8:	f043 0220 	orr.w	r2, r3, #32
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80100d0:	2303      	movs	r3, #3
 80100d2:	e000      	b.n	80100d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
	...

080100e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af02      	add	r7, sp, #8
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2201      	movs	r2, #1
 80100f4:	2102      	movs	r1, #2
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f7ff ff04 	bl	800ff04 <SPI_WaitFlagStateUntilTimeout>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d007      	beq.n	8010112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010106:	f043 0220 	orr.w	r2, r3, #32
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801010e:	2303      	movs	r3, #3
 8010110:	e032      	b.n	8010178 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010112:	4b1b      	ldr	r3, [pc, #108]	@ (8010180 <SPI_EndRxTxTransaction+0xa0>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a1b      	ldr	r2, [pc, #108]	@ (8010184 <SPI_EndRxTxTransaction+0xa4>)
 8010118:	fba2 2303 	umull	r2, r3, r2, r3
 801011c:	0d5b      	lsrs	r3, r3, #21
 801011e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010122:	fb02 f303 	mul.w	r3, r2, r3
 8010126:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010130:	d112      	bne.n	8010158 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	9300      	str	r3, [sp, #0]
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	2200      	movs	r2, #0
 801013a:	2180      	movs	r1, #128	@ 0x80
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	f7ff fee1 	bl	800ff04 <SPI_WaitFlagStateUntilTimeout>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d016      	beq.n	8010176 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801014c:	f043 0220 	orr.w	r2, r3, #32
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010154:	2303      	movs	r3, #3
 8010156:	e00f      	b.n	8010178 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	3b01      	subs	r3, #1
 8010162:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801016e:	2b80      	cmp	r3, #128	@ 0x80
 8010170:	d0f2      	beq.n	8010158 <SPI_EndRxTxTransaction+0x78>
 8010172:	e000      	b.n	8010176 <SPI_EndRxTxTransaction+0x96>
        break;
 8010174:	bf00      	nop
  }

  return HAL_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3718      	adds	r7, #24
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	20000000 	.word	0x20000000
 8010184:	165e9f81 	.word	0x165e9f81

08010188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d101      	bne.n	801019a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010196:	2301      	movs	r3, #1
 8010198:	e042      	b.n	8010220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d106      	bne.n	80101b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 f83a 	bl	8010228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2224      	movs	r2, #36	@ 0x24
 80101b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68da      	ldr	r2, [r3, #12]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80101ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 f97d 	bl	80104cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	691a      	ldr	r2, [r3, #16]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80101e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	695a      	ldr	r2, [r3, #20]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80101f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	68da      	ldr	r2, [r3, #12]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2200      	movs	r2, #0
 8010206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2220      	movs	r2, #32
 801020c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2220      	movs	r2, #32
 8010214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b08a      	sub	sp, #40	@ 0x28
 8010240:	af02      	add	r7, sp, #8
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	4613      	mov	r3, r2
 801024a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801024c:	2300      	movs	r3, #0
 801024e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010256:	b2db      	uxtb	r3, r3
 8010258:	2b20      	cmp	r3, #32
 801025a:	d175      	bne.n	8010348 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d002      	beq.n	8010268 <HAL_UART_Transmit+0x2c>
 8010262:	88fb      	ldrh	r3, [r7, #6]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d101      	bne.n	801026c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010268:	2301      	movs	r3, #1
 801026a:	e06e      	b.n	801034a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2221      	movs	r2, #33	@ 0x21
 8010276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801027a:	f7fb fe9f 	bl	800bfbc <HAL_GetTick>
 801027e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	88fa      	ldrh	r2, [r7, #6]
 8010284:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	88fa      	ldrh	r2, [r7, #6]
 801028a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010294:	d108      	bne.n	80102a8 <HAL_UART_Transmit+0x6c>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d104      	bne.n	80102a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801029e:	2300      	movs	r3, #0
 80102a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	61bb      	str	r3, [r7, #24]
 80102a6:	e003      	b.n	80102b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102ac:	2300      	movs	r3, #0
 80102ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102b0:	e02e      	b.n	8010310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	2200      	movs	r2, #0
 80102ba:	2180      	movs	r1, #128	@ 0x80
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f000 f848 	bl	8010352 <UART_WaitOnFlagUntilTimeout>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d005      	beq.n	80102d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2220      	movs	r2, #32
 80102cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80102d0:	2303      	movs	r3, #3
 80102d2:	e03a      	b.n	801034a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10b      	bne.n	80102f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	3302      	adds	r3, #2
 80102ee:	61bb      	str	r3, [r7, #24]
 80102f0:	e007      	b.n	8010302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	781a      	ldrb	r2, [r3, #0]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	3301      	adds	r3, #1
 8010300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010306:	b29b      	uxth	r3, r3
 8010308:	3b01      	subs	r3, #1
 801030a:	b29a      	uxth	r2, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010314:	b29b      	uxth	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d1cb      	bne.n	80102b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2200      	movs	r2, #0
 8010322:	2140      	movs	r1, #64	@ 0x40
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f000 f814 	bl	8010352 <UART_WaitOnFlagUntilTimeout>
 801032a:	4603      	mov	r3, r0
 801032c:	2b00      	cmp	r3, #0
 801032e:	d005      	beq.n	801033c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2220      	movs	r2, #32
 8010334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8010338:	2303      	movs	r3, #3
 801033a:	e006      	b.n	801034a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2220      	movs	r2, #32
 8010340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	e000      	b.n	801034a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8010348:	2302      	movs	r3, #2
  }
}
 801034a:	4618      	mov	r0, r3
 801034c:	3720      	adds	r7, #32
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b086      	sub	sp, #24
 8010356:	af00      	add	r7, sp, #0
 8010358:	60f8      	str	r0, [r7, #12]
 801035a:	60b9      	str	r1, [r7, #8]
 801035c:	603b      	str	r3, [r7, #0]
 801035e:	4613      	mov	r3, r2
 8010360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010362:	e03b      	b.n	80103dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010364:	6a3b      	ldr	r3, [r7, #32]
 8010366:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036a:	d037      	beq.n	80103dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801036c:	f7fb fe26 	bl	800bfbc <HAL_GetTick>
 8010370:	4602      	mov	r2, r0
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	1ad3      	subs	r3, r2, r3
 8010376:	6a3a      	ldr	r2, [r7, #32]
 8010378:	429a      	cmp	r2, r3
 801037a:	d302      	bcc.n	8010382 <UART_WaitOnFlagUntilTimeout+0x30>
 801037c:	6a3b      	ldr	r3, [r7, #32]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d101      	bne.n	8010386 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010382:	2303      	movs	r3, #3
 8010384:	e03a      	b.n	80103fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	f003 0304 	and.w	r3, r3, #4
 8010390:	2b00      	cmp	r3, #0
 8010392:	d023      	beq.n	80103dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	2b80      	cmp	r3, #128	@ 0x80
 8010398:	d020      	beq.n	80103dc <UART_WaitOnFlagUntilTimeout+0x8a>
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	2b40      	cmp	r3, #64	@ 0x40
 801039e:	d01d      	beq.n	80103dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f003 0308 	and.w	r3, r3, #8
 80103aa:	2b08      	cmp	r3, #8
 80103ac:	d116      	bne.n	80103dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80103ae:	2300      	movs	r3, #0
 80103b0:	617b      	str	r3, [r7, #20]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	617b      	str	r3, [r7, #20]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	617b      	str	r3, [r7, #20]
 80103c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f000 f81d 	bl	8010404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2208      	movs	r2, #8
 80103ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80103d8:	2301      	movs	r3, #1
 80103da:	e00f      	b.n	80103fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	4013      	ands	r3, r2
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	bf0c      	ite	eq
 80103ec:	2301      	moveq	r3, #1
 80103ee:	2300      	movne	r3, #0
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	461a      	mov	r2, r3
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d0b4      	beq.n	8010364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3718      	adds	r7, #24
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010404:	b480      	push	{r7}
 8010406:	b095      	sub	sp, #84	@ 0x54
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	330c      	adds	r3, #12
 8010412:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010416:	e853 3f00 	ldrex	r3, [r3]
 801041a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801041c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801041e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	330c      	adds	r3, #12
 801042a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801042c:	643a      	str	r2, [r7, #64]	@ 0x40
 801042e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010430:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010432:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010434:	e841 2300 	strex	r3, r2, [r1]
 8010438:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801043a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801043c:	2b00      	cmp	r3, #0
 801043e:	d1e5      	bne.n	801040c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3314      	adds	r3, #20
 8010446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010448:	6a3b      	ldr	r3, [r7, #32]
 801044a:	e853 3f00 	ldrex	r3, [r3]
 801044e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	f023 0301 	bic.w	r3, r3, #1
 8010456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3314      	adds	r3, #20
 801045e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010460:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010468:	e841 2300 	strex	r3, r2, [r1]
 801046c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801046e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1e5      	bne.n	8010440 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010478:	2b01      	cmp	r3, #1
 801047a:	d119      	bne.n	80104b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	330c      	adds	r3, #12
 8010482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	e853 3f00 	ldrex	r3, [r3]
 801048a:	60bb      	str	r3, [r7, #8]
   return(result);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f023 0310 	bic.w	r3, r3, #16
 8010492:	647b      	str	r3, [r7, #68]	@ 0x44
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	330c      	adds	r3, #12
 801049a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801049c:	61ba      	str	r2, [r7, #24]
 801049e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a0:	6979      	ldr	r1, [r7, #20]
 80104a2:	69ba      	ldr	r2, [r7, #24]
 80104a4:	e841 2300 	strex	r3, r2, [r1]
 80104a8:	613b      	str	r3, [r7, #16]
   return(result);
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1e5      	bne.n	801047c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2220      	movs	r2, #32
 80104b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80104be:	bf00      	nop
 80104c0:	3754      	adds	r7, #84	@ 0x54
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
	...

080104cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104d0:	b0c0      	sub	sp, #256	@ 0x100
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	691b      	ldr	r3, [r3, #16]
 80104e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80104e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104e8:	68d9      	ldr	r1, [r3, #12]
 80104ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	ea40 0301 	orr.w	r3, r0, r1
 80104f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80104f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104fa:	689a      	ldr	r2, [r3, #8]
 80104fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	431a      	orrs	r2, r3
 8010504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	431a      	orrs	r2, r3
 801050c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010510:	69db      	ldr	r3, [r3, #28]
 8010512:	4313      	orrs	r3, r2
 8010514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010524:	f021 010c 	bic.w	r1, r1, #12
 8010528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010532:	430b      	orrs	r3, r1
 8010534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	695b      	ldr	r3, [r3, #20]
 801053e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010546:	6999      	ldr	r1, [r3, #24]
 8010548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	ea40 0301 	orr.w	r3, r0, r1
 8010552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	4b8f      	ldr	r3, [pc, #572]	@ (8010798 <UART_SetConfig+0x2cc>)
 801055c:	429a      	cmp	r2, r3
 801055e:	d005      	beq.n	801056c <UART_SetConfig+0xa0>
 8010560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	4b8d      	ldr	r3, [pc, #564]	@ (801079c <UART_SetConfig+0x2d0>)
 8010568:	429a      	cmp	r2, r3
 801056a:	d104      	bne.n	8010576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801056c:	f7fe fe26 	bl	800f1bc <HAL_RCC_GetPCLK2Freq>
 8010570:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010574:	e003      	b.n	801057e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010576:	f7fe fe0d 	bl	800f194 <HAL_RCC_GetPCLK1Freq>
 801057a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801057e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010582:	69db      	ldr	r3, [r3, #28]
 8010584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010588:	f040 810c 	bne.w	80107a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801058c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010590:	2200      	movs	r2, #0
 8010592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010596:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801059a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801059e:	4622      	mov	r2, r4
 80105a0:	462b      	mov	r3, r5
 80105a2:	1891      	adds	r1, r2, r2
 80105a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80105a6:	415b      	adcs	r3, r3
 80105a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80105aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80105ae:	4621      	mov	r1, r4
 80105b0:	eb12 0801 	adds.w	r8, r2, r1
 80105b4:	4629      	mov	r1, r5
 80105b6:	eb43 0901 	adc.w	r9, r3, r1
 80105ba:	f04f 0200 	mov.w	r2, #0
 80105be:	f04f 0300 	mov.w	r3, #0
 80105c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80105c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80105ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80105ce:	4690      	mov	r8, r2
 80105d0:	4699      	mov	r9, r3
 80105d2:	4623      	mov	r3, r4
 80105d4:	eb18 0303 	adds.w	r3, r8, r3
 80105d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80105dc:	462b      	mov	r3, r5
 80105de:	eb49 0303 	adc.w	r3, r9, r3
 80105e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80105e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80105f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80105f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80105fa:	460b      	mov	r3, r1
 80105fc:	18db      	adds	r3, r3, r3
 80105fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010600:	4613      	mov	r3, r2
 8010602:	eb42 0303 	adc.w	r3, r2, r3
 8010606:	657b      	str	r3, [r7, #84]	@ 0x54
 8010608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801060c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010610:	f7f0 fb2a 	bl	8000c68 <__aeabi_uldivmod>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4b61      	ldr	r3, [pc, #388]	@ (80107a0 <UART_SetConfig+0x2d4>)
 801061a:	fba3 2302 	umull	r2, r3, r3, r2
 801061e:	095b      	lsrs	r3, r3, #5
 8010620:	011c      	lsls	r4, r3, #4
 8010622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010626:	2200      	movs	r2, #0
 8010628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801062c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010634:	4642      	mov	r2, r8
 8010636:	464b      	mov	r3, r9
 8010638:	1891      	adds	r1, r2, r2
 801063a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801063c:	415b      	adcs	r3, r3
 801063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010644:	4641      	mov	r1, r8
 8010646:	eb12 0a01 	adds.w	sl, r2, r1
 801064a:	4649      	mov	r1, r9
 801064c:	eb43 0b01 	adc.w	fp, r3, r1
 8010650:	f04f 0200 	mov.w	r2, #0
 8010654:	f04f 0300 	mov.w	r3, #0
 8010658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801065c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010664:	4692      	mov	sl, r2
 8010666:	469b      	mov	fp, r3
 8010668:	4643      	mov	r3, r8
 801066a:	eb1a 0303 	adds.w	r3, sl, r3
 801066e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010672:	464b      	mov	r3, r9
 8010674:	eb4b 0303 	adc.w	r3, fp, r3
 8010678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801067c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010688:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801068c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010690:	460b      	mov	r3, r1
 8010692:	18db      	adds	r3, r3, r3
 8010694:	643b      	str	r3, [r7, #64]	@ 0x40
 8010696:	4613      	mov	r3, r2
 8010698:	eb42 0303 	adc.w	r3, r2, r3
 801069c:	647b      	str	r3, [r7, #68]	@ 0x44
 801069e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80106a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80106a6:	f7f0 fadf 	bl	8000c68 <__aeabi_uldivmod>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	4611      	mov	r1, r2
 80106b0:	4b3b      	ldr	r3, [pc, #236]	@ (80107a0 <UART_SetConfig+0x2d4>)
 80106b2:	fba3 2301 	umull	r2, r3, r3, r1
 80106b6:	095b      	lsrs	r3, r3, #5
 80106b8:	2264      	movs	r2, #100	@ 0x64
 80106ba:	fb02 f303 	mul.w	r3, r2, r3
 80106be:	1acb      	subs	r3, r1, r3
 80106c0:	00db      	lsls	r3, r3, #3
 80106c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80106c6:	4b36      	ldr	r3, [pc, #216]	@ (80107a0 <UART_SetConfig+0x2d4>)
 80106c8:	fba3 2302 	umull	r2, r3, r3, r2
 80106cc:	095b      	lsrs	r3, r3, #5
 80106ce:	005b      	lsls	r3, r3, #1
 80106d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80106d4:	441c      	add	r4, r3
 80106d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106da:	2200      	movs	r2, #0
 80106dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80106e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80106e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80106e8:	4642      	mov	r2, r8
 80106ea:	464b      	mov	r3, r9
 80106ec:	1891      	adds	r1, r2, r2
 80106ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80106f0:	415b      	adcs	r3, r3
 80106f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80106f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80106f8:	4641      	mov	r1, r8
 80106fa:	1851      	adds	r1, r2, r1
 80106fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80106fe:	4649      	mov	r1, r9
 8010700:	414b      	adcs	r3, r1
 8010702:	637b      	str	r3, [r7, #52]	@ 0x34
 8010704:	f04f 0200 	mov.w	r2, #0
 8010708:	f04f 0300 	mov.w	r3, #0
 801070c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010710:	4659      	mov	r1, fp
 8010712:	00cb      	lsls	r3, r1, #3
 8010714:	4651      	mov	r1, sl
 8010716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801071a:	4651      	mov	r1, sl
 801071c:	00ca      	lsls	r2, r1, #3
 801071e:	4610      	mov	r0, r2
 8010720:	4619      	mov	r1, r3
 8010722:	4603      	mov	r3, r0
 8010724:	4642      	mov	r2, r8
 8010726:	189b      	adds	r3, r3, r2
 8010728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801072c:	464b      	mov	r3, r9
 801072e:	460a      	mov	r2, r1
 8010730:	eb42 0303 	adc.w	r3, r2, r3
 8010734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010744:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801074c:	460b      	mov	r3, r1
 801074e:	18db      	adds	r3, r3, r3
 8010750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010752:	4613      	mov	r3, r2
 8010754:	eb42 0303 	adc.w	r3, r2, r3
 8010758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801075a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801075e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010762:	f7f0 fa81 	bl	8000c68 <__aeabi_uldivmod>
 8010766:	4602      	mov	r2, r0
 8010768:	460b      	mov	r3, r1
 801076a:	4b0d      	ldr	r3, [pc, #52]	@ (80107a0 <UART_SetConfig+0x2d4>)
 801076c:	fba3 1302 	umull	r1, r3, r3, r2
 8010770:	095b      	lsrs	r3, r3, #5
 8010772:	2164      	movs	r1, #100	@ 0x64
 8010774:	fb01 f303 	mul.w	r3, r1, r3
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	00db      	lsls	r3, r3, #3
 801077c:	3332      	adds	r3, #50	@ 0x32
 801077e:	4a08      	ldr	r2, [pc, #32]	@ (80107a0 <UART_SetConfig+0x2d4>)
 8010780:	fba2 2303 	umull	r2, r3, r2, r3
 8010784:	095b      	lsrs	r3, r3, #5
 8010786:	f003 0207 	and.w	r2, r3, #7
 801078a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4422      	add	r2, r4
 8010792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010794:	e106      	b.n	80109a4 <UART_SetConfig+0x4d8>
 8010796:	bf00      	nop
 8010798:	40011000 	.word	0x40011000
 801079c:	40011400 	.word	0x40011400
 80107a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80107a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80107a8:	2200      	movs	r2, #0
 80107aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80107ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80107b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80107b6:	4642      	mov	r2, r8
 80107b8:	464b      	mov	r3, r9
 80107ba:	1891      	adds	r1, r2, r2
 80107bc:	6239      	str	r1, [r7, #32]
 80107be:	415b      	adcs	r3, r3
 80107c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80107c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80107c6:	4641      	mov	r1, r8
 80107c8:	1854      	adds	r4, r2, r1
 80107ca:	4649      	mov	r1, r9
 80107cc:	eb43 0501 	adc.w	r5, r3, r1
 80107d0:	f04f 0200 	mov.w	r2, #0
 80107d4:	f04f 0300 	mov.w	r3, #0
 80107d8:	00eb      	lsls	r3, r5, #3
 80107da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80107de:	00e2      	lsls	r2, r4, #3
 80107e0:	4614      	mov	r4, r2
 80107e2:	461d      	mov	r5, r3
 80107e4:	4643      	mov	r3, r8
 80107e6:	18e3      	adds	r3, r4, r3
 80107e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80107ec:	464b      	mov	r3, r9
 80107ee:	eb45 0303 	adc.w	r3, r5, r3
 80107f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80107f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010806:	f04f 0200 	mov.w	r2, #0
 801080a:	f04f 0300 	mov.w	r3, #0
 801080e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010812:	4629      	mov	r1, r5
 8010814:	008b      	lsls	r3, r1, #2
 8010816:	4621      	mov	r1, r4
 8010818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801081c:	4621      	mov	r1, r4
 801081e:	008a      	lsls	r2, r1, #2
 8010820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010824:	f7f0 fa20 	bl	8000c68 <__aeabi_uldivmod>
 8010828:	4602      	mov	r2, r0
 801082a:	460b      	mov	r3, r1
 801082c:	4b60      	ldr	r3, [pc, #384]	@ (80109b0 <UART_SetConfig+0x4e4>)
 801082e:	fba3 2302 	umull	r2, r3, r3, r2
 8010832:	095b      	lsrs	r3, r3, #5
 8010834:	011c      	lsls	r4, r3, #4
 8010836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801083a:	2200      	movs	r2, #0
 801083c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010840:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010848:	4642      	mov	r2, r8
 801084a:	464b      	mov	r3, r9
 801084c:	1891      	adds	r1, r2, r2
 801084e:	61b9      	str	r1, [r7, #24]
 8010850:	415b      	adcs	r3, r3
 8010852:	61fb      	str	r3, [r7, #28]
 8010854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010858:	4641      	mov	r1, r8
 801085a:	1851      	adds	r1, r2, r1
 801085c:	6139      	str	r1, [r7, #16]
 801085e:	4649      	mov	r1, r9
 8010860:	414b      	adcs	r3, r1
 8010862:	617b      	str	r3, [r7, #20]
 8010864:	f04f 0200 	mov.w	r2, #0
 8010868:	f04f 0300 	mov.w	r3, #0
 801086c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010870:	4659      	mov	r1, fp
 8010872:	00cb      	lsls	r3, r1, #3
 8010874:	4651      	mov	r1, sl
 8010876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801087a:	4651      	mov	r1, sl
 801087c:	00ca      	lsls	r2, r1, #3
 801087e:	4610      	mov	r0, r2
 8010880:	4619      	mov	r1, r3
 8010882:	4603      	mov	r3, r0
 8010884:	4642      	mov	r2, r8
 8010886:	189b      	adds	r3, r3, r2
 8010888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801088c:	464b      	mov	r3, r9
 801088e:	460a      	mov	r2, r1
 8010890:	eb42 0303 	adc.w	r3, r2, r3
 8010894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80108a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80108a4:	f04f 0200 	mov.w	r2, #0
 80108a8:	f04f 0300 	mov.w	r3, #0
 80108ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80108b0:	4649      	mov	r1, r9
 80108b2:	008b      	lsls	r3, r1, #2
 80108b4:	4641      	mov	r1, r8
 80108b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80108ba:	4641      	mov	r1, r8
 80108bc:	008a      	lsls	r2, r1, #2
 80108be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80108c2:	f7f0 f9d1 	bl	8000c68 <__aeabi_uldivmod>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	4611      	mov	r1, r2
 80108cc:	4b38      	ldr	r3, [pc, #224]	@ (80109b0 <UART_SetConfig+0x4e4>)
 80108ce:	fba3 2301 	umull	r2, r3, r3, r1
 80108d2:	095b      	lsrs	r3, r3, #5
 80108d4:	2264      	movs	r2, #100	@ 0x64
 80108d6:	fb02 f303 	mul.w	r3, r2, r3
 80108da:	1acb      	subs	r3, r1, r3
 80108dc:	011b      	lsls	r3, r3, #4
 80108de:	3332      	adds	r3, #50	@ 0x32
 80108e0:	4a33      	ldr	r2, [pc, #204]	@ (80109b0 <UART_SetConfig+0x4e4>)
 80108e2:	fba2 2303 	umull	r2, r3, r2, r3
 80108e6:	095b      	lsrs	r3, r3, #5
 80108e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80108ec:	441c      	add	r4, r3
 80108ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80108f2:	2200      	movs	r2, #0
 80108f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80108f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80108f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80108fc:	4642      	mov	r2, r8
 80108fe:	464b      	mov	r3, r9
 8010900:	1891      	adds	r1, r2, r2
 8010902:	60b9      	str	r1, [r7, #8]
 8010904:	415b      	adcs	r3, r3
 8010906:	60fb      	str	r3, [r7, #12]
 8010908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801090c:	4641      	mov	r1, r8
 801090e:	1851      	adds	r1, r2, r1
 8010910:	6039      	str	r1, [r7, #0]
 8010912:	4649      	mov	r1, r9
 8010914:	414b      	adcs	r3, r1
 8010916:	607b      	str	r3, [r7, #4]
 8010918:	f04f 0200 	mov.w	r2, #0
 801091c:	f04f 0300 	mov.w	r3, #0
 8010920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010924:	4659      	mov	r1, fp
 8010926:	00cb      	lsls	r3, r1, #3
 8010928:	4651      	mov	r1, sl
 801092a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801092e:	4651      	mov	r1, sl
 8010930:	00ca      	lsls	r2, r1, #3
 8010932:	4610      	mov	r0, r2
 8010934:	4619      	mov	r1, r3
 8010936:	4603      	mov	r3, r0
 8010938:	4642      	mov	r2, r8
 801093a:	189b      	adds	r3, r3, r2
 801093c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801093e:	464b      	mov	r3, r9
 8010940:	460a      	mov	r2, r1
 8010942:	eb42 0303 	adc.w	r3, r2, r3
 8010946:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	663b      	str	r3, [r7, #96]	@ 0x60
 8010952:	667a      	str	r2, [r7, #100]	@ 0x64
 8010954:	f04f 0200 	mov.w	r2, #0
 8010958:	f04f 0300 	mov.w	r3, #0
 801095c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010960:	4649      	mov	r1, r9
 8010962:	008b      	lsls	r3, r1, #2
 8010964:	4641      	mov	r1, r8
 8010966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801096a:	4641      	mov	r1, r8
 801096c:	008a      	lsls	r2, r1, #2
 801096e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010972:	f7f0 f979 	bl	8000c68 <__aeabi_uldivmod>
 8010976:	4602      	mov	r2, r0
 8010978:	460b      	mov	r3, r1
 801097a:	4b0d      	ldr	r3, [pc, #52]	@ (80109b0 <UART_SetConfig+0x4e4>)
 801097c:	fba3 1302 	umull	r1, r3, r3, r2
 8010980:	095b      	lsrs	r3, r3, #5
 8010982:	2164      	movs	r1, #100	@ 0x64
 8010984:	fb01 f303 	mul.w	r3, r1, r3
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	011b      	lsls	r3, r3, #4
 801098c:	3332      	adds	r3, #50	@ 0x32
 801098e:	4a08      	ldr	r2, [pc, #32]	@ (80109b0 <UART_SetConfig+0x4e4>)
 8010990:	fba2 2303 	umull	r2, r3, r2, r3
 8010994:	095b      	lsrs	r3, r3, #5
 8010996:	f003 020f 	and.w	r2, r3, #15
 801099a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4422      	add	r2, r4
 80109a2:	609a      	str	r2, [r3, #8]
}
 80109a4:	bf00      	nop
 80109a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80109aa:	46bd      	mov	sp, r7
 80109ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80109b0:	51eb851f 	.word	0x51eb851f

080109b4 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 80109b8:	f000 f808 	bl	80109cc <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 80109bc:	bf00      	nop
 80109be:	bd80      	pop	{r7, pc}

080109c0 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 80109c4:	f000 fa0a 	bl	8010ddc <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 80109c8:	bf00      	nop
 80109ca:	bd80      	pop	{r7, pc}

080109cc <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 80109cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ce:	b089      	sub	sp, #36	@ 0x24
 80109d0:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 80109d2:	2000      	movs	r0, #0
 80109d4:	f7fb f8b2 	bl	800bb3c <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80109d8:	2101      	movs	r1, #1
 80109da:	2000      	movs	r0, #0
 80109dc:	f7fb f902 	bl	800bbe4 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 80109e0:	2000      	movs	r0, #0
 80109e2:	f7fb f953 	bl	800bc8c <BSP_PB_GetState>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bf0c      	ite	eq
 80109ec:	2301      	moveq	r3, #1
 80109ee:	2300      	movne	r3, #0
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	461a      	mov	r2, r3
 80109f4:	4b84      	ldr	r3, [pc, #528]	@ (8010c08 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 80109f6:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80109f8:	2000      	movs	r0, #0
 80109fa:	f7fb f9a9 	bl	800bd50 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 80109fe:	4a83      	ldr	r2, [pc, #524]	@ (8010c0c <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 8010a00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a04:	4882      	ldr	r0, [pc, #520]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010a06:	f003 fb3b 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 8010a0a:	4981      	ldr	r1, [pc, #516]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010a0c:	4881      	ldr	r0, [pc, #516]	@ (8010c14 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010a0e:	f003 fac7 	bl	8013fa0 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 8010a12:	2103      	movs	r1, #3
 8010a14:	2001      	movs	r0, #1
 8010a16:	f7fa fb49 	bl	800b0ac <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 8010a1a:	2103      	movs	r1, #3
 8010a1c:	2003      	movs	r0, #3
 8010a1e:	f7fa fb45 	bl	800b0ac <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 8010a22:	2102      	movs	r1, #2
 8010a24:	2002      	movs	r0, #2
 8010a26:	f7fa fb41 	bl	800b0ac <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8010a2a:	2104      	movs	r1, #4
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	f7fa fb3d 	bl	800b0ac <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010a32:	2300      	movs	r3, #0
 8010a34:	81fb      	strh	r3, [r7, #14]
 8010a36:	e0d4      	b.n	8010be2 <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8010a38:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010a3c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a40:	4613      	mov	r3, r2
 8010a42:	00db      	lsls	r3, r3, #3
 8010a44:	1a9b      	subs	r3, r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4a73      	ldr	r2, [pc, #460]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a4a:	4413      	add	r3, r2
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	f7fa fc5f 	bl	800b310 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a52:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010a56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a5a:	486f      	ldr	r0, [pc, #444]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	1a9b      	subs	r3, r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4403      	add	r3, r0
 8010a66:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a68:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010a6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a6e:	486a      	ldr	r0, [pc, #424]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a70:	4613      	mov	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	1a9b      	subs	r3, r3, r2
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4403      	add	r3, r0
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a7e:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010a80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a84:	4864      	ldr	r0, [pc, #400]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a86:	4613      	mov	r3, r2
 8010a88:	00db      	lsls	r3, r3, #3
 8010a8a:	1a9b      	subs	r3, r3, r2
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	4403      	add	r3, r0
 8010a90:	3302      	adds	r3, #2
 8010a92:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a94:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010a96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a9a:	485f      	ldr	r0, [pc, #380]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	00db      	lsls	r3, r3, #3
 8010aa0:	1a9b      	subs	r3, r3, r2
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4403      	add	r3, r0
 8010aa6:	3303      	adds	r3, #3
 8010aa8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010aaa:	9303      	str	r3, [sp, #12]
 8010aac:	9602      	str	r6, [sp, #8]
 8010aae:	9501      	str	r5, [sp, #4]
 8010ab0:	9400      	str	r4, [sp, #0]
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	4a59      	ldr	r2, [pc, #356]	@ (8010c1c <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 8010ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010aba:	4855      	ldr	r0, [pc, #340]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010abc:	f003 fae0 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010ac0:	4953      	ldr	r1, [pc, #332]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010ac2:	4854      	ldr	r0, [pc, #336]	@ (8010c14 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010ac4:	f003 fa6c 	bl	8013fa0 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8010ac8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010acc:	4952      	ldr	r1, [pc, #328]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010ace:	4613      	mov	r3, r2
 8010ad0:	00db      	lsls	r3, r3, #3
 8010ad2:	1a9b      	subs	r3, r3, r2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	440b      	add	r3, r1
 8010ad8:	3314      	adds	r3, #20
 8010ada:	edd3 7a00 	vldr	s15, [r3]
 8010ade:	463b      	mov	r3, r7
 8010ae0:	2103      	movs	r1, #3
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8010ae8:	f000 fa1e 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010af0:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010af2:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010af4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010af8:	4947      	ldr	r1, [pc, #284]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010afa:	4613      	mov	r3, r2
 8010afc:	00db      	lsls	r3, r3, #3
 8010afe:	1a9b      	subs	r3, r3, r2
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	440b      	add	r3, r1
 8010b04:	3308      	adds	r3, #8
 8010b06:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	9000      	str	r0, [sp, #0]
 8010b0c:	4623      	mov	r3, r4
 8010b0e:	4a44      	ldr	r2, [pc, #272]	@ (8010c20 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 8010b10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b14:	483e      	ldr	r0, [pc, #248]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010b16:	f003 fab3 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010b1a:	493d      	ldr	r1, [pc, #244]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010b1c:	483d      	ldr	r0, [pc, #244]	@ (8010c14 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010b1e:	f003 fa3f 	bl	8013fa0 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8010b22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b26:	493c      	ldr	r1, [pc, #240]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010b28:	4613      	mov	r3, r2
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	1a9b      	subs	r3, r3, r2
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	440b      	add	r3, r1
 8010b32:	3310      	adds	r3, #16
 8010b34:	edd3 7a00 	vldr	s15, [r3]
 8010b38:	463b      	mov	r3, r7
 8010b3a:	2103      	movs	r1, #3
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8010b42:	f000 f9f1 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010b4a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010b4c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010b4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b52:	4931      	ldr	r1, [pc, #196]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010b54:	4613      	mov	r3, r2
 8010b56:	00db      	lsls	r3, r3, #3
 8010b58:	1a9b      	subs	r3, r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	440b      	add	r3, r1
 8010b5e:	3304      	adds	r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010b62:	9301      	str	r3, [sp, #4]
 8010b64:	9000      	str	r0, [sp, #0]
 8010b66:	4623      	mov	r3, r4
 8010b68:	4a2e      	ldr	r2, [pc, #184]	@ (8010c24 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 8010b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b6e:	4828      	ldr	r0, [pc, #160]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010b70:	f003 fa86 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010b74:	4926      	ldr	r1, [pc, #152]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010b76:	4827      	ldr	r0, [pc, #156]	@ (8010c14 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010b78:	f003 fa12 	bl	8013fa0 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8010b7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b80:	4925      	ldr	r1, [pc, #148]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010b82:	4613      	mov	r3, r2
 8010b84:	00db      	lsls	r3, r3, #3
 8010b86:	1a9b      	subs	r3, r3, r2
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	440b      	add	r3, r1
 8010b8c:	3318      	adds	r3, #24
 8010b8e:	edd3 7a00 	vldr	s15, [r3]
 8010b92:	463b      	mov	r3, r7
 8010b94:	2103      	movs	r1, #3
 8010b96:	4618      	mov	r0, r3
 8010b98:	eeb0 0a67 	vmov.f32	s0, s15
 8010b9c:	f000 f9c4 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010ba4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010ba6:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010ba8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010bac:	491a      	ldr	r1, [pc, #104]	@ (8010c18 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010bae:	4613      	mov	r3, r2
 8010bb0:	00db      	lsls	r3, r3, #3
 8010bb2:	1a9b      	subs	r3, r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	440b      	add	r3, r1
 8010bb8:	330c      	adds	r3, #12
 8010bba:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010bbc:	9301      	str	r3, [sp, #4]
 8010bbe:	9000      	str	r0, [sp, #0]
 8010bc0:	4623      	mov	r3, r4
 8010bc2:	4a19      	ldr	r2, [pc, #100]	@ (8010c28 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 8010bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010bc8:	4811      	ldr	r0, [pc, #68]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010bca:	f003 fa59 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010bce:	4910      	ldr	r1, [pc, #64]	@ (8010c10 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010bd0:	4810      	ldr	r0, [pc, #64]	@ (8010c14 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010bd2:	f003 f9e5 	bl	8013fa0 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	3301      	adds	r3, #1
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	81fb      	strh	r3, [r7, #14]
 8010be2:	89fb      	ldrh	r3, [r7, #14]
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	f67f af27 	bls.w	8010a38 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8010bea:	2105      	movs	r1, #5
 8010bec:	2002      	movs	r0, #2
 8010bee:	f7f9 fe21 	bl	800a834 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8010bf2:	2103      	movs	r1, #3
 8010bf4:	2001      	movs	r0, #1
 8010bf6:	f7f9 fe1d 	bl	800a834 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	f7f9 fe19 	bl	800a834 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010c02:	2300      	movs	r3, #0
 8010c04:	81fb      	strh	r3, [r7, #14]
 8010c06:	e0c2      	b.n	8010d8e <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 8010c08:	20000cac 	.word	0x20000cac
 8010c0c:	080162dc 	.word	0x080162dc
 8010c10:	20000bac 	.word	0x20000bac
 8010c14:	0801632c 	.word	0x0801632c
 8010c18:	20000af4 	.word	0x20000af4
 8010c1c:	08016330 	.word	0x08016330
 8010c20:	080163a4 	.word	0x080163a4
 8010c24:	080163d0 	.word	0x080163d0
 8010c28:	08016400 	.word	0x08016400
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8010c2c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010c30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c34:	4613      	mov	r3, r2
 8010c36:	005b      	lsls	r3, r3, #1
 8010c38:	4413      	add	r3, r2
 8010c3a:	00db      	lsls	r3, r3, #3
 8010c3c:	4a58      	ldr	r2, [pc, #352]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c3e:	4413      	add	r3, r2
 8010c40:	4619      	mov	r1, r3
 8010c42:	f7f9 ff05 	bl	800aa50 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8010c46:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010c4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c4e:	4854      	ldr	r0, [pc, #336]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c50:	4613      	mov	r3, r2
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	4413      	add	r3, r2
 8010c56:	00db      	lsls	r3, r3, #3
 8010c58:	4403      	add	r3, r0
 8010c5a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010c5c:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010c5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c62:	484f      	ldr	r0, [pc, #316]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c64:	4613      	mov	r3, r2
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	4413      	add	r3, r2
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	4403      	add	r3, r0
 8010c6e:	3301      	adds	r3, #1
 8010c70:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010c72:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010c74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c78:	4849      	ldr	r0, [pc, #292]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	4413      	add	r3, r2
 8010c80:	00db      	lsls	r3, r3, #3
 8010c82:	4403      	add	r3, r0
 8010c84:	3302      	adds	r3, #2
 8010c86:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010c88:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010c8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c8e:	4844      	ldr	r0, [pc, #272]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c90:	4613      	mov	r3, r2
 8010c92:	005b      	lsls	r3, r3, #1
 8010c94:	4413      	add	r3, r2
 8010c96:	00db      	lsls	r3, r3, #3
 8010c98:	4403      	add	r3, r0
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010c9e:	9303      	str	r3, [sp, #12]
 8010ca0:	9602      	str	r6, [sp, #8]
 8010ca2:	9501      	str	r5, [sp, #4]
 8010ca4:	9400      	str	r4, [sp, #0]
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8010da4 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 8010caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cae:	483e      	ldr	r0, [pc, #248]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010cb0:	f003 f9e6 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010cb4:	493c      	ldr	r1, [pc, #240]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010cb6:	483d      	ldr	r0, [pc, #244]	@ (8010dac <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010cb8:	f003 f972 	bl	8013fa0 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8010cbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010cc0:	4937      	ldr	r1, [pc, #220]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	4413      	add	r3, r2
 8010cc8:	00db      	lsls	r3, r3, #3
 8010cca:	440b      	add	r3, r1
 8010ccc:	330c      	adds	r3, #12
 8010cce:	edd3 7a00 	vldr	s15, [r3]
 8010cd2:	463b      	mov	r3, r7
 8010cd4:	2103      	movs	r1, #3
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8010cdc:	f000 f924 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010ce4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	4613      	mov	r3, r2
 8010cea:	4a31      	ldr	r2, [pc, #196]	@ (8010db0 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8010cec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cf0:	482d      	ldr	r0, [pc, #180]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010cf2:	f003 f9c5 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010cf6:	492c      	ldr	r1, [pc, #176]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010cf8:	482c      	ldr	r0, [pc, #176]	@ (8010dac <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010cfa:	f003 f951 	bl	8013fa0 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8010cfe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010d02:	4927      	ldr	r1, [pc, #156]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010d04:	4613      	mov	r3, r2
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	4413      	add	r3, r2
 8010d0a:	00db      	lsls	r3, r3, #3
 8010d0c:	440b      	add	r3, r1
 8010d0e:	3310      	adds	r3, #16
 8010d10:	edd3 7a00 	vldr	s15, [r3]
 8010d14:	463b      	mov	r3, r7
 8010d16:	2103      	movs	r1, #3
 8010d18:	4618      	mov	r0, r3
 8010d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d1e:	f000 f903 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010d26:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	4a21      	ldr	r2, [pc, #132]	@ (8010db4 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 8010d2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d32:	481d      	ldr	r0, [pc, #116]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010d34:	f003 f9a4 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010d38:	491b      	ldr	r1, [pc, #108]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010d3a:	481c      	ldr	r0, [pc, #112]	@ (8010dac <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010d3c:	f003 f930 	bl	8013fa0 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8010d40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010d44:	4916      	ldr	r1, [pc, #88]	@ (8010da0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010d46:	4613      	mov	r3, r2
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	00db      	lsls	r3, r3, #3
 8010d4e:	440b      	add	r3, r1
 8010d50:	3308      	adds	r3, #8
 8010d52:	edd3 7a00 	vldr	s15, [r3]
 8010d56:	463b      	mov	r3, r7
 8010d58:	2103      	movs	r1, #3
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8010d60:	f000 f8e2 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	461a      	mov	r2, r3
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	4a12      	ldr	r2, [pc, #72]	@ (8010db8 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 8010d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d74:	480c      	ldr	r0, [pc, #48]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010d76:	f003 f983 	bl	8014080 <sniprintf>
    printf("%s", dataOut);
 8010d7a:	490b      	ldr	r1, [pc, #44]	@ (8010da8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010d7c:	480b      	ldr	r0, [pc, #44]	@ (8010dac <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010d7e:	f003 f90f 	bl	8013fa0 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	3301      	adds	r3, #1
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	81fb      	strh	r3, [r7, #14]
 8010d8e:	89fb      	ldrh	r3, [r7, #14]
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	f67f af4b 	bls.w	8010c2c <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 8010d96:	bf00      	nop
 8010d98:	bf00      	nop
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da0:	20000b64 	.word	0x20000b64
 8010da4:	0801642c 	.word	0x0801642c
 8010da8:	20000bac 	.word	0x20000bac
 8010dac:	0801632c 	.word	0x0801632c
 8010db0:	080164a0 	.word	0x080164a0
 8010db4:	080164bc 	.word	0x080164bc
 8010db8:	080164dc 	.word	0x080164dc

08010dbc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8010dc6:	4b04      	ldr	r3, [pc, #16]	@ (8010dd8 <BSP_PB_Callback+0x1c>)
 8010dc8:	2201      	movs	r2, #1
 8010dca:	701a      	strb	r2, [r3, #0]
}
 8010dcc:	bf00      	nop
 8010dce:	370c      	adds	r7, #12
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr
 8010dd8:	20000af0 	.word	0x20000af0

08010ddc <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 8010de2:	4b4a      	ldr	r3, [pc, #296]	@ (8010f0c <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d013      	beq.n	8010e14 <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 8010dec:	2032      	movs	r0, #50	@ 0x32
 8010dee:	f7fb f8f1 	bl	800bfd4 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 8010df2:	bf00      	nop
 8010df4:	2000      	movs	r0, #0
 8010df6:	f7fa ff49 	bl	800bc8c <BSP_PB_GetState>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	4b44      	ldr	r3, [pc, #272]	@ (8010f10 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d0f7      	beq.n	8010df4 <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8010e04:	2032      	movs	r0, #50	@ 0x32
 8010e06:	f7fb f8e5 	bl	800bfd4 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8010e0a:	4b40      	ldr	r3, [pc, #256]	@ (8010f0c <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 8010e10:	f7ff fddc 	bl	80109cc <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8010e14:	4a3f      	ldr	r2, [pc, #252]	@ (8010f14 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 8010e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e1a:	483f      	ldr	r0, [pc, #252]	@ (8010f18 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8010e1c:	f003 f930 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 8010e20:	493d      	ldr	r1, [pc, #244]	@ (8010f18 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8010e22:	483e      	ldr	r0, [pc, #248]	@ (8010f1c <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 8010e24:	f003 f8bc 	bl	8013fa0 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010e28:	2300      	movs	r3, #0
 8010e2a:	607b      	str	r3, [r7, #4]
 8010e2c:	e02e      	b.n	8010e8c <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 8010e2e:	493c      	ldr	r1, [pc, #240]	@ (8010f20 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	4613      	mov	r3, r2
 8010e34:	00db      	lsls	r3, r3, #3
 8010e36:	1a9b      	subs	r3, r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	440b      	add	r3, r1
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f000 f8ef 	bl	8011028 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 8010e4a:	4935      	ldr	r1, [pc, #212]	@ (8010f20 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	00db      	lsls	r3, r3, #3
 8010e52:	1a9b      	subs	r3, r3, r2
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	440b      	add	r3, r1
 8010e58:	3301      	adds	r3, #1
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d003      	beq.n	8010e68 <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	4618      	mov	r0, r3
 8010e64:	f000 f9a0 	bl	80111a8 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8010e68:	492d      	ldr	r1, [pc, #180]	@ (8010f20 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	00db      	lsls	r3, r3, #3
 8010e70:	1a9b      	subs	r3, r3, r2
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	440b      	add	r3, r1
 8010e76:	3302      	adds	r3, #2
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d003      	beq.n	8010e86 <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f000 fa51 	bl	8011328 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	607b      	str	r3, [r7, #4]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d9cd      	bls.n	8010e2e <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010e92:	2300      	movs	r3, #0
 8010e94:	607b      	str	r3, [r7, #4]
 8010e96:	e02e      	b.n	8010ef6 <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 8010e98:	4922      	ldr	r1, [pc, #136]	@ (8010f24 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	4413      	add	r3, r2
 8010ea2:	00db      	lsls	r3, r3, #3
 8010ea4:	440b      	add	r3, r1
 8010ea6:	3302      	adds	r3, #2
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 fc41 	bl	8011738 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 8010eb6:	491b      	ldr	r1, [pc, #108]	@ (8010f24 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	005b      	lsls	r3, r3, #1
 8010ebe:	4413      	add	r3, r2
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	440b      	add	r3, r1
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d003      	beq.n	8010ed2 <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 faeb 	bl	80114a8 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 8010ed2:	4914      	ldr	r1, [pc, #80]	@ (8010f24 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	4413      	add	r3, r2
 8010edc:	00db      	lsls	r3, r3, #3
 8010ede:	440b      	add	r3, r1
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d003      	beq.n	8010ef0 <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f000 fb84 	bl	80115f8 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	607b      	str	r3, [r7, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d9cd      	bls.n	8010e98 <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 8010efc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010f00:	f7fb f868 	bl	800bfd4 <HAL_Delay>
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20000af0 	.word	0x20000af0
 8010f10:	20000cac 	.word	0x20000cac
 8010f14:	080162dc 	.word	0x080162dc
 8010f18:	20000bac 	.word	0x20000bac
 8010f1c:	0801632c 	.word	0x0801632c
 8010f20:	20000af4 	.word	0x20000af4
 8010f24:	20000b64 	.word	0x20000b64

08010f28 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8010f28:	b5b0      	push	{r4, r5, r7, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8010f32:	60b8      	str	r0, [r7, #8]
 8010f34:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 8010f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f42:	db03      	blt.n	8010f4c <floatToInt+0x24>
  {
    out_value->sign = 0;
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	2200      	movs	r2, #0
 8010f48:	701a      	strb	r2, [r3, #0]
 8010f4a:	e008      	b.n	8010f5e <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	701a      	strb	r2, [r3, #0]
    in = -in;
 8010f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f56:	eef1 7a67 	vneg.f32	s15, s15
 8010f5a:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7ef faf0 	bl	8000544 <__aeabi_i2d>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	ec43 2b11 	vmov	d1, r2, r3
 8010f6c:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8011020 <floatToInt+0xf8>
 8010f70:	f004 f81e 	bl	8014fb0 <pow>
 8010f74:	ec53 2b10 	vmov	r2, r3, d0
 8010f78:	4610      	mov	r0, r2
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	f7ef fe24 	bl	8000bc8 <__aeabi_d2f>
 8010f80:	ee06 0a90 	vmov	s13, r0
 8010f84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8010f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f94:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8010f98:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fa0:	ee17 2a90 	vmov	r2, s15
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	ee07 3a90 	vmov	s15, r3
 8010fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8010fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fbc:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ef fad1 	bl	8000568 <__aeabi_f2d>
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	460d      	mov	r5, r1
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7ef faba 	bl	8000544 <__aeabi_i2d>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	ec43 2b11 	vmov	d1, r2, r3
 8010fd8:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8011020 <floatToInt+0xf8>
 8010fdc:	f003 ffe8 	bl	8014fb0 <pow>
 8010fe0:	ec53 2b10 	vmov	r2, r3, d0
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	f7ef fb16 	bl	8000618 <__aeabi_dmul>
 8010fec:	4602      	mov	r2, r0
 8010fee:	460b      	mov	r3, r1
 8010ff0:	ec43 2b17 	vmov	d7, r2, r3
 8010ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8010ff8:	eef0 0a67 	vmov.f32	s1, s15
 8010ffc:	f004 f854 	bl	80150a8 <trunc>
 8011000:	ec53 2b10 	vmov	r2, r3, d0
 8011004:	4610      	mov	r0, r2
 8011006:	4619      	mov	r1, r3
 8011008:	f7ef fdb6 	bl	8000b78 <__aeabi_d2iz>
 801100c:	4603      	mov	r3, r0
 801100e:	461a      	mov	r2, r3
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	609a      	str	r2, [r3, #8]
}
 8011014:	bf00      	nop
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bdb0      	pop	{r4, r5, r7, pc}
 801101c:	f3af 8000 	nop.w
 8011020:	00000000 	.word	0x00000000
 8011024:	40240000 	.word	0x40240000

08011028 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 8011028:	b5b0      	push	{r4, r5, r7, lr}
 801102a:	b092      	sub	sp, #72	@ 0x48
 801102c:	af06      	add	r7, sp, #24
 801102e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	4a51      	ldr	r2, [pc, #324]	@ (8011178 <Accelero_Sensor_Handler+0x150>)
 8011034:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011038:	4850      	ldr	r0, [pc, #320]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 801103a:	f003 f821 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 801103e:	494f      	ldr	r1, [pc, #316]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 8011040:	484f      	ldr	r0, [pc, #316]	@ (8011180 <Accelero_Sensor_Handler+0x158>)
 8011042:	f002 ffad 	bl	8013fa0 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8011046:	f107 031c 	add.w	r3, r7, #28
 801104a:	461a      	mov	r2, r3
 801104c:	2102      	movs	r1, #2
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7fa f9b2 	bl	800b3b8 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d007      	beq.n	801106a <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4a49      	ldr	r2, [pc, #292]	@ (8011184 <Accelero_Sensor_Handler+0x15c>)
 801105e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011062:	4846      	ldr	r0, [pc, #280]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 8011064:	f003 f80c 	bl	8014080 <sniprintf>
 8011068:	e011      	b.n	801108e <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 801106a:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 801106c:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 801106e:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011070:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011072:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011074:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011076:	9404      	str	r4, [sp, #16]
 8011078:	9003      	str	r0, [sp, #12]
 801107a:	9102      	str	r1, [sp, #8]
 801107c:	9201      	str	r2, [sp, #4]
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	462b      	mov	r3, r5
 8011082:	4a41      	ldr	r2, [pc, #260]	@ (8011188 <Accelero_Sensor_Handler+0x160>)
 8011084:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011088:	483c      	ldr	r0, [pc, #240]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 801108a:	f002 fff9 	bl	8014080 <sniprintf>
  }

  printf("%s", dataOut);
 801108e:	493b      	ldr	r1, [pc, #236]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 8011090:	483b      	ldr	r0, [pc, #236]	@ (8011180 <Accelero_Sensor_Handler+0x158>)
 8011092:	f002 ff85 	bl	8013fa0 <iprintf>

  if (verbose == 1)
 8011096:	4b3d      	ldr	r3, [pc, #244]	@ (801118c <Accelero_Sensor_Handler+0x164>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	2b01      	cmp	r3, #1
 801109c:	d168      	bne.n	8011170 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 801109e:	f107 030f 	add.w	r3, r7, #15
 80110a2:	4619      	mov	r1, r3
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7fa f95d 	bl	800b364 <IKS4A1_MOTION_SENSOR_ReadID>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a37      	ldr	r2, [pc, #220]	@ (8011190 <Accelero_Sensor_Handler+0x168>)
 80110b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110b8:	4830      	ldr	r0, [pc, #192]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 80110ba:	f002 ffe1 	bl	8014080 <sniprintf>
 80110be:	e008      	b.n	80110d2 <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	7bfa      	ldrb	r2, [r7, #15]
 80110c4:	9200      	str	r2, [sp, #0]
 80110c6:	4a33      	ldr	r2, [pc, #204]	@ (8011194 <Accelero_Sensor_Handler+0x16c>)
 80110c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110cc:	482b      	ldr	r0, [pc, #172]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 80110ce:	f002 ffd7 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80110d2:	492a      	ldr	r1, [pc, #168]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 80110d4:	482a      	ldr	r0, [pc, #168]	@ (8011180 <Accelero_Sensor_Handler+0x158>)
 80110d6:	f002 ff63 	bl	8013fa0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 80110da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80110de:	461a      	mov	r2, r3
 80110e0:	2102      	movs	r1, #2
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7fa f9ac 	bl	800b440 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d007      	beq.n	80110fe <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4a29      	ldr	r2, [pc, #164]	@ (8011198 <Accelero_Sensor_Handler+0x170>)
 80110f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110f6:	4821      	ldr	r0, [pc, #132]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 80110f8:	f002 ffc2 	bl	8014080 <sniprintf>
 80110fc:	e014      	b.n	8011128 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80110fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011102:	f107 0310 	add.w	r3, r7, #16
 8011106:	2103      	movs	r1, #3
 8011108:	4618      	mov	r0, r3
 801110a:	eeb0 0a67 	vmov.f32	s0, s15
 801110e:	f7ff ff0b 	bl	8010f28 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011116:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011118:	9101      	str	r1, [sp, #4]
 801111a:	9200      	str	r2, [sp, #0]
 801111c:	4a1f      	ldr	r2, [pc, #124]	@ (801119c <Accelero_Sensor_Handler+0x174>)
 801111e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011122:	4816      	ldr	r0, [pc, #88]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 8011124:	f002 ffac 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 8011128:	4914      	ldr	r1, [pc, #80]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 801112a:	4815      	ldr	r0, [pc, #84]	@ (8011180 <Accelero_Sensor_Handler+0x158>)
 801112c:	f002 ff38 	bl	8013fa0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8011130:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011134:	461a      	mov	r2, r3
 8011136:	2102      	movs	r1, #2
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7fa f9c5 	bl	800b4c8 <IKS4A1_MOTION_SENSOR_GetFullScale>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d007      	beq.n	8011154 <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a16      	ldr	r2, [pc, #88]	@ (80111a0 <Accelero_Sensor_Handler+0x178>)
 8011148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801114c:	480b      	ldr	r0, [pc, #44]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 801114e:	f002 ff97 	bl	8014080 <sniprintf>
 8011152:	e009      	b.n	8011168 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	4613      	mov	r3, r2
 801115c:	4a11      	ldr	r2, [pc, #68]	@ (80111a4 <Accelero_Sensor_Handler+0x17c>)
 801115e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011162:	4806      	ldr	r0, [pc, #24]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 8011164:	f002 ff8c 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 8011168:	4904      	ldr	r1, [pc, #16]	@ (801117c <Accelero_Sensor_Handler+0x154>)
 801116a:	4805      	ldr	r0, [pc, #20]	@ (8011180 <Accelero_Sensor_Handler+0x158>)
 801116c:	f002 ff18 	bl	8013fa0 <iprintf>
  }
}
 8011170:	bf00      	nop
 8011172:	3730      	adds	r7, #48	@ 0x30
 8011174:	46bd      	mov	sp, r7
 8011176:	bdb0      	pop	{r4, r5, r7, pc}
 8011178:	080164f8 	.word	0x080164f8
 801117c:	20000bac 	.word	0x20000bac
 8011180:	0801632c 	.word	0x0801632c
 8011184:	08016518 	.word	0x08016518
 8011188:	0801652c 	.word	0x0801652c
 801118c:	20000225 	.word	0x20000225
 8011190:	0801655c 	.word	0x0801655c
 8011194:	08016570 	.word	0x08016570
 8011198:	08016584 	.word	0x08016584
 801119c:	08016598 	.word	0x08016598
 80111a0:	080165b0 	.word	0x080165b0
 80111a4:	080165c0 	.word	0x080165c0

080111a8 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 80111a8:	b5b0      	push	{r4, r5, r7, lr}
 80111aa:	b092      	sub	sp, #72	@ 0x48
 80111ac:	af06      	add	r7, sp, #24
 80111ae:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a51      	ldr	r2, [pc, #324]	@ (80112f8 <Gyro_Sensor_Handler+0x150>)
 80111b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111b8:	4850      	ldr	r0, [pc, #320]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80111ba:	f002 ff61 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 80111be:	494f      	ldr	r1, [pc, #316]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80111c0:	484f      	ldr	r0, [pc, #316]	@ (8011300 <Gyro_Sensor_Handler+0x158>)
 80111c2:	f002 feed 	bl	8013fa0 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 80111c6:	f107 031c 	add.w	r3, r7, #28
 80111ca:	461a      	mov	r2, r3
 80111cc:	2101      	movs	r1, #1
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7fa f8f2 	bl	800b3b8 <IKS4A1_MOTION_SENSOR_GetAxes>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d007      	beq.n	80111ea <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4a49      	ldr	r2, [pc, #292]	@ (8011304 <Gyro_Sensor_Handler+0x15c>)
 80111de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111e2:	4846      	ldr	r0, [pc, #280]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80111e4:	f002 ff4c 	bl	8014080 <sniprintf>
 80111e8:	e011      	b.n	801120e <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80111ea:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 80111ec:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80111ee:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 80111f0:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80111f2:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 80111f4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80111f6:	9404      	str	r4, [sp, #16]
 80111f8:	9003      	str	r0, [sp, #12]
 80111fa:	9102      	str	r1, [sp, #8]
 80111fc:	9201      	str	r2, [sp, #4]
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	462b      	mov	r3, r5
 8011202:	4a41      	ldr	r2, [pc, #260]	@ (8011308 <Gyro_Sensor_Handler+0x160>)
 8011204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011208:	483c      	ldr	r0, [pc, #240]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 801120a:	f002 ff39 	bl	8014080 <sniprintf>
  }

  printf("%s", dataOut);
 801120e:	493b      	ldr	r1, [pc, #236]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 8011210:	483b      	ldr	r0, [pc, #236]	@ (8011300 <Gyro_Sensor_Handler+0x158>)
 8011212:	f002 fec5 	bl	8013fa0 <iprintf>

  if (verbose == 1)
 8011216:	4b3d      	ldr	r3, [pc, #244]	@ (801130c <Gyro_Sensor_Handler+0x164>)
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d168      	bne.n	80112f0 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 801121e:	f107 030f 	add.w	r3, r7, #15
 8011222:	4619      	mov	r1, r3
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7fa f89d 	bl	800b364 <IKS4A1_MOTION_SENSOR_ReadID>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d007      	beq.n	8011240 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4a37      	ldr	r2, [pc, #220]	@ (8011310 <Gyro_Sensor_Handler+0x168>)
 8011234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011238:	4830      	ldr	r0, [pc, #192]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 801123a:	f002 ff21 	bl	8014080 <sniprintf>
 801123e:	e008      	b.n	8011252 <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	7bfa      	ldrb	r2, [r7, #15]
 8011244:	9200      	str	r2, [sp, #0]
 8011246:	4a33      	ldr	r2, [pc, #204]	@ (8011314 <Gyro_Sensor_Handler+0x16c>)
 8011248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801124c:	482b      	ldr	r0, [pc, #172]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 801124e:	f002 ff17 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 8011252:	492a      	ldr	r1, [pc, #168]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 8011254:	482a      	ldr	r0, [pc, #168]	@ (8011300 <Gyro_Sensor_Handler+0x158>)
 8011256:	f002 fea3 	bl	8013fa0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 801125a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801125e:	461a      	mov	r2, r3
 8011260:	2101      	movs	r1, #1
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f7fa f8ec 	bl	800b440 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d007      	beq.n	801127e <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4a29      	ldr	r2, [pc, #164]	@ (8011318 <Gyro_Sensor_Handler+0x170>)
 8011272:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011276:	4821      	ldr	r0, [pc, #132]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 8011278:	f002 ff02 	bl	8014080 <sniprintf>
 801127c:	e014      	b.n	80112a8 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801127e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011282:	f107 0310 	add.w	r3, r7, #16
 8011286:	2103      	movs	r1, #3
 8011288:	4618      	mov	r0, r3
 801128a:	eeb0 0a67 	vmov.f32	s0, s15
 801128e:	f7ff fe4b 	bl	8010f28 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011296:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011298:	9101      	str	r1, [sp, #4]
 801129a:	9200      	str	r2, [sp, #0]
 801129c:	4a1f      	ldr	r2, [pc, #124]	@ (801131c <Gyro_Sensor_Handler+0x174>)
 801129e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112a2:	4816      	ldr	r0, [pc, #88]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80112a4:	f002 feec 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80112a8:	4914      	ldr	r1, [pc, #80]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80112aa:	4815      	ldr	r0, [pc, #84]	@ (8011300 <Gyro_Sensor_Handler+0x158>)
 80112ac:	f002 fe78 	bl	8013fa0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 80112b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80112b4:	461a      	mov	r2, r3
 80112b6:	2101      	movs	r1, #1
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f7fa f905 	bl	800b4c8 <IKS4A1_MOTION_SENSOR_GetFullScale>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d007      	beq.n	80112d4 <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4a16      	ldr	r2, [pc, #88]	@ (8011320 <Gyro_Sensor_Handler+0x178>)
 80112c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112cc:	480b      	ldr	r0, [pc, #44]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80112ce:	f002 fed7 	bl	8014080 <sniprintf>
 80112d2:	e009      	b.n	80112e8 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	4613      	mov	r3, r2
 80112dc:	4a11      	ldr	r2, [pc, #68]	@ (8011324 <Gyro_Sensor_Handler+0x17c>)
 80112de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112e2:	4806      	ldr	r0, [pc, #24]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80112e4:	f002 fecc 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80112e8:	4904      	ldr	r1, [pc, #16]	@ (80112fc <Gyro_Sensor_Handler+0x154>)
 80112ea:	4805      	ldr	r0, [pc, #20]	@ (8011300 <Gyro_Sensor_Handler+0x158>)
 80112ec:	f002 fe58 	bl	8013fa0 <iprintf>
  }
}
 80112f0:	bf00      	nop
 80112f2:	3730      	adds	r7, #48	@ 0x30
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bdb0      	pop	{r4, r5, r7, pc}
 80112f8:	080164f8 	.word	0x080164f8
 80112fc:	20000bac 	.word	0x20000bac
 8011300:	0801632c 	.word	0x0801632c
 8011304:	080165d0 	.word	0x080165d0
 8011308:	080165e4 	.word	0x080165e4
 801130c:	20000225 	.word	0x20000225
 8011310:	0801655c 	.word	0x0801655c
 8011314:	08016570 	.word	0x08016570
 8011318:	08016584 	.word	0x08016584
 801131c:	08016598 	.word	0x08016598
 8011320:	080165b0 	.word	0x080165b0
 8011324:	08016614 	.word	0x08016614

08011328 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8011328:	b5b0      	push	{r4, r5, r7, lr}
 801132a:	b092      	sub	sp, #72	@ 0x48
 801132c:	af06      	add	r7, sp, #24
 801132e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4a51      	ldr	r2, [pc, #324]	@ (8011478 <Magneto_Sensor_Handler+0x150>)
 8011334:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011338:	4850      	ldr	r0, [pc, #320]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 801133a:	f002 fea1 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 801133e:	494f      	ldr	r1, [pc, #316]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 8011340:	484f      	ldr	r0, [pc, #316]	@ (8011480 <Magneto_Sensor_Handler+0x158>)
 8011342:	f002 fe2d 	bl	8013fa0 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8011346:	f107 031c 	add.w	r3, r7, #28
 801134a:	461a      	mov	r2, r3
 801134c:	2104      	movs	r1, #4
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7fa f832 	bl	800b3b8 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d007      	beq.n	801136a <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4a49      	ldr	r2, [pc, #292]	@ (8011484 <Magneto_Sensor_Handler+0x15c>)
 801135e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011362:	4846      	ldr	r0, [pc, #280]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 8011364:	f002 fe8c 	bl	8014080 <sniprintf>
 8011368:	e011      	b.n	801138e <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 801136a:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 801136c:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 801136e:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011370:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011372:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011374:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011376:	9404      	str	r4, [sp, #16]
 8011378:	9003      	str	r0, [sp, #12]
 801137a:	9102      	str	r1, [sp, #8]
 801137c:	9201      	str	r2, [sp, #4]
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	462b      	mov	r3, r5
 8011382:	4a41      	ldr	r2, [pc, #260]	@ (8011488 <Magneto_Sensor_Handler+0x160>)
 8011384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011388:	483c      	ldr	r0, [pc, #240]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 801138a:	f002 fe79 	bl	8014080 <sniprintf>
  }

  printf("%s", dataOut);
 801138e:	493b      	ldr	r1, [pc, #236]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 8011390:	483b      	ldr	r0, [pc, #236]	@ (8011480 <Magneto_Sensor_Handler+0x158>)
 8011392:	f002 fe05 	bl	8013fa0 <iprintf>

  if (verbose == 1)
 8011396:	4b3d      	ldr	r3, [pc, #244]	@ (801148c <Magneto_Sensor_Handler+0x164>)
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d168      	bne.n	8011470 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 801139e:	f107 030f 	add.w	r3, r7, #15
 80113a2:	4619      	mov	r1, r3
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f7f9 ffdd 	bl	800b364 <IKS4A1_MOTION_SENSOR_ReadID>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d007      	beq.n	80113c0 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4a37      	ldr	r2, [pc, #220]	@ (8011490 <Magneto_Sensor_Handler+0x168>)
 80113b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113b8:	4830      	ldr	r0, [pc, #192]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 80113ba:	f002 fe61 	bl	8014080 <sniprintf>
 80113be:	e008      	b.n	80113d2 <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	7bfa      	ldrb	r2, [r7, #15]
 80113c4:	9200      	str	r2, [sp, #0]
 80113c6:	4a33      	ldr	r2, [pc, #204]	@ (8011494 <Magneto_Sensor_Handler+0x16c>)
 80113c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113cc:	482b      	ldr	r0, [pc, #172]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 80113ce:	f002 fe57 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80113d2:	492a      	ldr	r1, [pc, #168]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 80113d4:	482a      	ldr	r0, [pc, #168]	@ (8011480 <Magneto_Sensor_Handler+0x158>)
 80113d6:	f002 fde3 	bl	8013fa0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 80113da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80113de:	461a      	mov	r2, r3
 80113e0:	2104      	movs	r1, #4
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f7fa f82c 	bl	800b440 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d007      	beq.n	80113fe <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4a29      	ldr	r2, [pc, #164]	@ (8011498 <Magneto_Sensor_Handler+0x170>)
 80113f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113f6:	4821      	ldr	r0, [pc, #132]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 80113f8:	f002 fe42 	bl	8014080 <sniprintf>
 80113fc:	e014      	b.n	8011428 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80113fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011402:	f107 0310 	add.w	r3, r7, #16
 8011406:	2103      	movs	r1, #3
 8011408:	4618      	mov	r0, r3
 801140a:	eeb0 0a67 	vmov.f32	s0, s15
 801140e:	f7ff fd8b 	bl	8010f28 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011416:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011418:	9101      	str	r1, [sp, #4]
 801141a:	9200      	str	r2, [sp, #0]
 801141c:	4a1f      	ldr	r2, [pc, #124]	@ (801149c <Magneto_Sensor_Handler+0x174>)
 801141e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011422:	4816      	ldr	r0, [pc, #88]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 8011424:	f002 fe2c 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 8011428:	4914      	ldr	r1, [pc, #80]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 801142a:	4815      	ldr	r0, [pc, #84]	@ (8011480 <Magneto_Sensor_Handler+0x158>)
 801142c:	f002 fdb8 	bl	8013fa0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8011430:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011434:	461a      	mov	r2, r3
 8011436:	2104      	movs	r1, #4
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7fa f845 	bl	800b4c8 <IKS4A1_MOTION_SENSOR_GetFullScale>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d007      	beq.n	8011454 <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4a16      	ldr	r2, [pc, #88]	@ (80114a0 <Magneto_Sensor_Handler+0x178>)
 8011448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801144c:	480b      	ldr	r0, [pc, #44]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 801144e:	f002 fe17 	bl	8014080 <sniprintf>
 8011452:	e009      	b.n	8011468 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	4613      	mov	r3, r2
 801145c:	4a11      	ldr	r2, [pc, #68]	@ (80114a4 <Magneto_Sensor_Handler+0x17c>)
 801145e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011462:	4806      	ldr	r0, [pc, #24]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 8011464:	f002 fe0c 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 8011468:	4904      	ldr	r1, [pc, #16]	@ (801147c <Magneto_Sensor_Handler+0x154>)
 801146a:	4805      	ldr	r0, [pc, #20]	@ (8011480 <Magneto_Sensor_Handler+0x158>)
 801146c:	f002 fd98 	bl	8013fa0 <iprintf>
  }
}
 8011470:	bf00      	nop
 8011472:	3730      	adds	r7, #48	@ 0x30
 8011474:	46bd      	mov	sp, r7
 8011476:	bdb0      	pop	{r4, r5, r7, pc}
 8011478:	080164f8 	.word	0x080164f8
 801147c:	20000bac 	.word	0x20000bac
 8011480:	0801632c 	.word	0x0801632c
 8011484:	08016628 	.word	0x08016628
 8011488:	0801663c 	.word	0x0801663c
 801148c:	20000225 	.word	0x20000225
 8011490:	0801655c 	.word	0x0801655c
 8011494:	08016570 	.word	0x08016570
 8011498:	08016584 	.word	0x08016584
 801149c:	08016598 	.word	0x08016598
 80114a0:	080165b0 	.word	0x080165b0
 80114a4:	0801666c 	.word	0x0801666c

080114a8 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b08c      	sub	sp, #48	@ 0x30
 80114ac:	af04      	add	r7, sp, #16
 80114ae:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4a47      	ldr	r2, [pc, #284]	@ (80115d0 <Temp_Sensor_Handler+0x128>)
 80114b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114b8:	4846      	ldr	r0, [pc, #280]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 80114ba:	f002 fde1 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 80114be:	4945      	ldr	r1, [pc, #276]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 80114c0:	4845      	ldr	r0, [pc, #276]	@ (80115d8 <Temp_Sensor_Handler+0x130>)
 80114c2:	f002 fd6d 	bl	8013fa0 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 80114c6:	f107 0318 	add.w	r3, r7, #24
 80114ca:	461a      	mov	r2, r3
 80114cc:	2101      	movs	r1, #1
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f7f9 fb54 	bl	800ab7c <IKS4A1_ENV_SENSOR_GetValue>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d007      	beq.n	80114ea <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4a3f      	ldr	r2, [pc, #252]	@ (80115dc <Temp_Sensor_Handler+0x134>)
 80114de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114e2:	483c      	ldr	r0, [pc, #240]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 80114e4:	f002 fdcc 	bl	8014080 <sniprintf>
 80114e8:	e01d      	b.n	8011526 <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 80114ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80114ee:	f107 030c 	add.w	r3, r7, #12
 80114f2:	2102      	movs	r1, #2
 80114f4:	4618      	mov	r0, r3
 80114f6:	eeb0 0a67 	vmov.f32	s0, s15
 80114fa:	f7ff fd15 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <Temp_Sensor_Handler+0x64>
 8011508:	232d      	movs	r3, #45	@ 0x2d
 801150a:	e000      	b.n	801150e <Temp_Sensor_Handler+0x66>
 801150c:	232b      	movs	r3, #43	@ 0x2b
 801150e:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 8011510:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011512:	9002      	str	r0, [sp, #8]
 8011514:	9101      	str	r1, [sp, #4]
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	4613      	mov	r3, r2
 801151a:	4a31      	ldr	r2, [pc, #196]	@ (80115e0 <Temp_Sensor_Handler+0x138>)
 801151c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011520:	482c      	ldr	r0, [pc, #176]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 8011522:	f002 fdad 	bl	8014080 <sniprintf>
  }

  printf("%s", dataOut);
 8011526:	492b      	ldr	r1, [pc, #172]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 8011528:	482b      	ldr	r0, [pc, #172]	@ (80115d8 <Temp_Sensor_Handler+0x130>)
 801152a:	f002 fd39 	bl	8013fa0 <iprintf>

  if (verbose == 1)
 801152e:	4b2d      	ldr	r3, [pc, #180]	@ (80115e4 <Temp_Sensor_Handler+0x13c>)
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	2b01      	cmp	r3, #1
 8011534:	d148      	bne.n	80115c8 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011536:	f107 030b 	add.w	r3, r7, #11
 801153a:	4619      	mov	r1, r3
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7f9 fab1 	bl	800aaa4 <IKS4A1_ENV_SENSOR_ReadID>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d007      	beq.n	8011558 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4a27      	ldr	r2, [pc, #156]	@ (80115e8 <Temp_Sensor_Handler+0x140>)
 801154c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011550:	4820      	ldr	r0, [pc, #128]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 8011552:	f002 fd95 	bl	8014080 <sniprintf>
 8011556:	e008      	b.n	801156a <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7afa      	ldrb	r2, [r7, #11]
 801155c:	9200      	str	r2, [sp, #0]
 801155e:	4a23      	ldr	r2, [pc, #140]	@ (80115ec <Temp_Sensor_Handler+0x144>)
 8011560:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011564:	481b      	ldr	r0, [pc, #108]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 8011566:	f002 fd8b 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 801156a:	491a      	ldr	r1, [pc, #104]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 801156c:	481a      	ldr	r0, [pc, #104]	@ (80115d8 <Temp_Sensor_Handler+0x130>)
 801156e:	f002 fd17 	bl	8013fa0 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 8011572:	f107 031c 	add.w	r3, r7, #28
 8011576:	461a      	mov	r2, r3
 8011578:	2101      	movs	r1, #1
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f7f9 fabc 	bl	800aaf8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d007      	beq.n	8011596 <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a19      	ldr	r2, [pc, #100]	@ (80115f0 <Temp_Sensor_Handler+0x148>)
 801158a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801158e:	4811      	ldr	r0, [pc, #68]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 8011590:	f002 fd76 	bl	8014080 <sniprintf>
 8011594:	e014      	b.n	80115c0 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011596:	edd7 7a07 	vldr	s15, [r7, #28]
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	2103      	movs	r1, #3
 80115a0:	4618      	mov	r0, r3
 80115a2:	eeb0 0a67 	vmov.f32	s0, s15
 80115a6:	f7ff fcbf 	bl	8010f28 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 80115ae:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80115b0:	9101      	str	r1, [sp, #4]
 80115b2:	9200      	str	r2, [sp, #0]
 80115b4:	4a0f      	ldr	r2, [pc, #60]	@ (80115f4 <Temp_Sensor_Handler+0x14c>)
 80115b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115ba:	4806      	ldr	r0, [pc, #24]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 80115bc:	f002 fd60 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80115c0:	4904      	ldr	r1, [pc, #16]	@ (80115d4 <Temp_Sensor_Handler+0x12c>)
 80115c2:	4805      	ldr	r0, [pc, #20]	@ (80115d8 <Temp_Sensor_Handler+0x130>)
 80115c4:	f002 fcec 	bl	8013fa0 <iprintf>
  }
}
 80115c8:	bf00      	nop
 80115ca:	3720      	adds	r7, #32
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	08016680 	.word	0x08016680
 80115d4:	20000bac 	.word	0x20000bac
 80115d8:	0801632c 	.word	0x0801632c
 80115dc:	080166a4 	.word	0x080166a4
 80115e0:	080166b8 	.word	0x080166b8
 80115e4:	20000225 	.word	0x20000225
 80115e8:	0801655c 	.word	0x0801655c
 80115ec:	08016570 	.word	0x08016570
 80115f0:	080166d8 	.word	0x080166d8
 80115f4:	08016598 	.word	0x08016598

080115f8 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08a      	sub	sp, #40	@ 0x28
 80115fc:	af02      	add	r7, sp, #8
 80115fe:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	4a43      	ldr	r2, [pc, #268]	@ (8011710 <Press_Sensor_Handler+0x118>)
 8011604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011608:	4842      	ldr	r0, [pc, #264]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 801160a:	f002 fd39 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 801160e:	4941      	ldr	r1, [pc, #260]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 8011610:	4841      	ldr	r0, [pc, #260]	@ (8011718 <Press_Sensor_Handler+0x120>)
 8011612:	f002 fcc5 	bl	8013fa0 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 8011616:	f107 0318 	add.w	r3, r7, #24
 801161a:	461a      	mov	r2, r3
 801161c:	2102      	movs	r1, #2
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7f9 faac 	bl	800ab7c <IKS4A1_ENV_SENSOR_GetValue>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d007      	beq.n	801163a <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4a3b      	ldr	r2, [pc, #236]	@ (801171c <Press_Sensor_Handler+0x124>)
 801162e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011632:	4838      	ldr	r0, [pc, #224]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 8011634:	f002 fd24 	bl	8014080 <sniprintf>
 8011638:	e014      	b.n	8011664 <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 801163a:	edd7 7a06 	vldr	s15, [r7, #24]
 801163e:	f107 030c 	add.w	r3, r7, #12
 8011642:	2102      	movs	r1, #2
 8011644:	4618      	mov	r0, r3
 8011646:	eeb0 0a67 	vmov.f32	s0, s15
 801164a:	f7ff fc6d 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8011652:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8011654:	9101      	str	r1, [sp, #4]
 8011656:	9200      	str	r2, [sp, #0]
 8011658:	4a31      	ldr	r2, [pc, #196]	@ (8011720 <Press_Sensor_Handler+0x128>)
 801165a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801165e:	482d      	ldr	r0, [pc, #180]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 8011660:	f002 fd0e 	bl	8014080 <sniprintf>
  }

  printf("%s", dataOut);
 8011664:	492b      	ldr	r1, [pc, #172]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 8011666:	482c      	ldr	r0, [pc, #176]	@ (8011718 <Press_Sensor_Handler+0x120>)
 8011668:	f002 fc9a 	bl	8013fa0 <iprintf>

  if (verbose == 1)
 801166c:	4b2d      	ldr	r3, [pc, #180]	@ (8011724 <Press_Sensor_Handler+0x12c>)
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d148      	bne.n	8011706 <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011674:	f107 030b 	add.w	r3, r7, #11
 8011678:	4619      	mov	r1, r3
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7f9 fa12 	bl	800aaa4 <IKS4A1_ENV_SENSOR_ReadID>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d007      	beq.n	8011696 <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a27      	ldr	r2, [pc, #156]	@ (8011728 <Press_Sensor_Handler+0x130>)
 801168a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801168e:	4821      	ldr	r0, [pc, #132]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 8011690:	f002 fcf6 	bl	8014080 <sniprintf>
 8011694:	e008      	b.n	80116a8 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	7afa      	ldrb	r2, [r7, #11]
 801169a:	9200      	str	r2, [sp, #0]
 801169c:	4a23      	ldr	r2, [pc, #140]	@ (801172c <Press_Sensor_Handler+0x134>)
 801169e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80116a2:	481c      	ldr	r0, [pc, #112]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 80116a4:	f002 fcec 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80116a8:	491a      	ldr	r1, [pc, #104]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 80116aa:	481b      	ldr	r0, [pc, #108]	@ (8011718 <Press_Sensor_Handler+0x120>)
 80116ac:	f002 fc78 	bl	8013fa0 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 80116b0:	f107 031c 	add.w	r3, r7, #28
 80116b4:	461a      	mov	r2, r3
 80116b6:	2102      	movs	r1, #2
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7f9 fa1d 	bl	800aaf8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d007      	beq.n	80116d4 <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4a1a      	ldr	r2, [pc, #104]	@ (8011730 <Press_Sensor_Handler+0x138>)
 80116c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80116cc:	4811      	ldr	r0, [pc, #68]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 80116ce:	f002 fcd7 	bl	8014080 <sniprintf>
 80116d2:	e014      	b.n	80116fe <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80116d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80116d8:	f107 030c 	add.w	r3, r7, #12
 80116dc:	2103      	movs	r1, #3
 80116de:	4618      	mov	r0, r3
 80116e0:	eeb0 0a67 	vmov.f32	s0, s15
 80116e4:	f7ff fc20 	bl	8010f28 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 80116ec:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80116ee:	9101      	str	r1, [sp, #4]
 80116f0:	9200      	str	r2, [sp, #0]
 80116f2:	4a10      	ldr	r2, [pc, #64]	@ (8011734 <Press_Sensor_Handler+0x13c>)
 80116f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80116f8:	4806      	ldr	r0, [pc, #24]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 80116fa:	f002 fcc1 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80116fe:	4905      	ldr	r1, [pc, #20]	@ (8011714 <Press_Sensor_Handler+0x11c>)
 8011700:	4805      	ldr	r0, [pc, #20]	@ (8011718 <Press_Sensor_Handler+0x120>)
 8011702:	f002 fc4d 	bl	8013fa0 <iprintf>
  }
}
 8011706:	bf00      	nop
 8011708:	3720      	adds	r7, #32
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	08016680 	.word	0x08016680
 8011714:	20000bac 	.word	0x20000bac
 8011718:	0801632c 	.word	0x0801632c
 801171c:	080166ec 	.word	0x080166ec
 8011720:	08016704 	.word	0x08016704
 8011724:	20000225 	.word	0x20000225
 8011728:	0801655c 	.word	0x0801655c
 801172c:	08016570 	.word	0x08016570
 8011730:	080166d8 	.word	0x080166d8
 8011734:	08016598 	.word	0x08016598

08011738 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08a      	sub	sp, #40	@ 0x28
 801173c:	af02      	add	r7, sp, #8
 801173e:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4a43      	ldr	r2, [pc, #268]	@ (8011850 <Hum_Sensor_Handler+0x118>)
 8011744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011748:	4842      	ldr	r0, [pc, #264]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 801174a:	f002 fc99 	bl	8014080 <sniprintf>
  printf("%s", dataOut);
 801174e:	4941      	ldr	r1, [pc, #260]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 8011750:	4841      	ldr	r0, [pc, #260]	@ (8011858 <Hum_Sensor_Handler+0x120>)
 8011752:	f002 fc25 	bl	8013fa0 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 8011756:	f107 0318 	add.w	r3, r7, #24
 801175a:	461a      	mov	r2, r3
 801175c:	2104      	movs	r1, #4
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7f9 fa0c 	bl	800ab7c <IKS4A1_ENV_SENSOR_GetValue>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	d007      	beq.n	801177a <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4a3b      	ldr	r2, [pc, #236]	@ (801185c <Hum_Sensor_Handler+0x124>)
 801176e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011772:	4838      	ldr	r0, [pc, #224]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 8011774:	f002 fc84 	bl	8014080 <sniprintf>
 8011778:	e014      	b.n	80117a4 <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 801177a:	edd7 7a06 	vldr	s15, [r7, #24]
 801177e:	f107 030c 	add.w	r3, r7, #12
 8011782:	2102      	movs	r1, #2
 8011784:	4618      	mov	r0, r3
 8011786:	eeb0 0a67 	vmov.f32	s0, s15
 801178a:	f7ff fbcd 	bl	8010f28 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8011792:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8011794:	9101      	str	r1, [sp, #4]
 8011796:	9200      	str	r2, [sp, #0]
 8011798:	4a31      	ldr	r2, [pc, #196]	@ (8011860 <Hum_Sensor_Handler+0x128>)
 801179a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801179e:	482d      	ldr	r0, [pc, #180]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 80117a0:	f002 fc6e 	bl	8014080 <sniprintf>
  }

  printf("%s", dataOut);
 80117a4:	492b      	ldr	r1, [pc, #172]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 80117a6:	482c      	ldr	r0, [pc, #176]	@ (8011858 <Hum_Sensor_Handler+0x120>)
 80117a8:	f002 fbfa 	bl	8013fa0 <iprintf>

  if (verbose == 1)
 80117ac:	4b2d      	ldr	r3, [pc, #180]	@ (8011864 <Hum_Sensor_Handler+0x12c>)
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d148      	bne.n	8011846 <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 80117b4:	f107 030b 	add.w	r3, r7, #11
 80117b8:	4619      	mov	r1, r3
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7f9 f972 	bl	800aaa4 <IKS4A1_ENV_SENSOR_ReadID>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d007      	beq.n	80117d6 <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	4a27      	ldr	r2, [pc, #156]	@ (8011868 <Hum_Sensor_Handler+0x130>)
 80117ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80117ce:	4821      	ldr	r0, [pc, #132]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 80117d0:	f002 fc56 	bl	8014080 <sniprintf>
 80117d4:	e008      	b.n	80117e8 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	7afa      	ldrb	r2, [r7, #11]
 80117da:	9200      	str	r2, [sp, #0]
 80117dc:	4a23      	ldr	r2, [pc, #140]	@ (801186c <Hum_Sensor_Handler+0x134>)
 80117de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80117e2:	481c      	ldr	r0, [pc, #112]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 80117e4:	f002 fc4c 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 80117e8:	491a      	ldr	r1, [pc, #104]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 80117ea:	481b      	ldr	r0, [pc, #108]	@ (8011858 <Hum_Sensor_Handler+0x120>)
 80117ec:	f002 fbd8 	bl	8013fa0 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 80117f0:	f107 031c 	add.w	r3, r7, #28
 80117f4:	461a      	mov	r2, r3
 80117f6:	2104      	movs	r1, #4
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7f9 f97d 	bl	800aaf8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d007      	beq.n	8011814 <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4a1a      	ldr	r2, [pc, #104]	@ (8011870 <Hum_Sensor_Handler+0x138>)
 8011808:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801180c:	4811      	ldr	r0, [pc, #68]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 801180e:	f002 fc37 	bl	8014080 <sniprintf>
 8011812:	e014      	b.n	801183e <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011814:	edd7 7a07 	vldr	s15, [r7, #28]
 8011818:	f107 030c 	add.w	r3, r7, #12
 801181c:	2103      	movs	r1, #3
 801181e:	4618      	mov	r0, r3
 8011820:	eeb0 0a67 	vmov.f32	s0, s15
 8011824:	f7ff fb80 	bl	8010f28 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 801182c:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 801182e:	9101      	str	r1, [sp, #4]
 8011830:	9200      	str	r2, [sp, #0]
 8011832:	4a10      	ldr	r2, [pc, #64]	@ (8011874 <Hum_Sensor_Handler+0x13c>)
 8011834:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011838:	4806      	ldr	r0, [pc, #24]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 801183a:	f002 fc21 	bl	8014080 <sniprintf>
    }

    printf("%s", dataOut);
 801183e:	4905      	ldr	r1, [pc, #20]	@ (8011854 <Hum_Sensor_Handler+0x11c>)
 8011840:	4805      	ldr	r0, [pc, #20]	@ (8011858 <Hum_Sensor_Handler+0x120>)
 8011842:	f002 fbad 	bl	8013fa0 <iprintf>
  }
}
 8011846:	bf00      	nop
 8011848:	3720      	adds	r7, #32
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	08016680 	.word	0x08016680
 8011854:	20000bac 	.word	0x20000bac
 8011858:	0801632c 	.word	0x0801632c
 801185c:	08016720 	.word	0x08016720
 8011860:	08016734 	.word	0x08016734
 8011864:	20000225 	.word	0x20000225
 8011868:	0801655c 	.word	0x0801655c
 801186c:	08016570 	.word	0x08016570
 8011870:	080166d8 	.word	0x080166d8
 8011874:	08016598 	.word	0x08016598

08011878 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	4603      	mov	r3, r0
 8011880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011882:	79fb      	ldrb	r3, [r7, #7]
 8011884:	4a08      	ldr	r2, [pc, #32]	@ (80118a8 <disk_status+0x30>)
 8011886:	009b      	lsls	r3, r3, #2
 8011888:	4413      	add	r3, r2
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	79fa      	ldrb	r2, [r7, #7]
 8011890:	4905      	ldr	r1, [pc, #20]	@ (80118a8 <disk_status+0x30>)
 8011892:	440a      	add	r2, r1
 8011894:	7a12      	ldrb	r2, [r2, #8]
 8011896:	4610      	mov	r0, r2
 8011898:	4798      	blx	r3
 801189a:	4603      	mov	r3, r0
 801189c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	20000cd8 	.word	0x20000cd8

080118ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	4603      	mov	r3, r0
 80118b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80118b6:	2300      	movs	r3, #0
 80118b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80118ba:	79fb      	ldrb	r3, [r7, #7]
 80118bc:	4a0e      	ldr	r2, [pc, #56]	@ (80118f8 <disk_initialize+0x4c>)
 80118be:	5cd3      	ldrb	r3, [r2, r3]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d114      	bne.n	80118ee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80118c4:	79fb      	ldrb	r3, [r7, #7]
 80118c6:	4a0c      	ldr	r2, [pc, #48]	@ (80118f8 <disk_initialize+0x4c>)
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	79fa      	ldrb	r2, [r7, #7]
 80118d2:	4909      	ldr	r1, [pc, #36]	@ (80118f8 <disk_initialize+0x4c>)
 80118d4:	440a      	add	r2, r1
 80118d6:	7a12      	ldrb	r2, [r2, #8]
 80118d8:	4610      	mov	r0, r2
 80118da:	4798      	blx	r3
 80118dc:	4603      	mov	r3, r0
 80118de:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d103      	bne.n	80118ee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80118e6:	79fb      	ldrb	r3, [r7, #7]
 80118e8:	4a03      	ldr	r2, [pc, #12]	@ (80118f8 <disk_initialize+0x4c>)
 80118ea:	2101      	movs	r1, #1
 80118ec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80118ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	20000cd8 	.word	0x20000cd8

080118fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80118fc:	b590      	push	{r4, r7, lr}
 80118fe:	b087      	sub	sp, #28
 8011900:	af00      	add	r7, sp, #0
 8011902:	60b9      	str	r1, [r7, #8]
 8011904:	607a      	str	r2, [r7, #4]
 8011906:	603b      	str	r3, [r7, #0]
 8011908:	4603      	mov	r3, r0
 801190a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801190c:	7bfb      	ldrb	r3, [r7, #15]
 801190e:	4a0a      	ldr	r2, [pc, #40]	@ (8011938 <disk_read+0x3c>)
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	689c      	ldr	r4, [r3, #8]
 8011918:	7bfb      	ldrb	r3, [r7, #15]
 801191a:	4a07      	ldr	r2, [pc, #28]	@ (8011938 <disk_read+0x3c>)
 801191c:	4413      	add	r3, r2
 801191e:	7a18      	ldrb	r0, [r3, #8]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	68b9      	ldr	r1, [r7, #8]
 8011926:	47a0      	blx	r4
 8011928:	4603      	mov	r3, r0
 801192a:	75fb      	strb	r3, [r7, #23]
  return res;
 801192c:	7dfb      	ldrb	r3, [r7, #23]
}
 801192e:	4618      	mov	r0, r3
 8011930:	371c      	adds	r7, #28
 8011932:	46bd      	mov	sp, r7
 8011934:	bd90      	pop	{r4, r7, pc}
 8011936:	bf00      	nop
 8011938:	20000cd8 	.word	0x20000cd8

0801193c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801193c:	b590      	push	{r4, r7, lr}
 801193e:	b087      	sub	sp, #28
 8011940:	af00      	add	r7, sp, #0
 8011942:	60b9      	str	r1, [r7, #8]
 8011944:	607a      	str	r2, [r7, #4]
 8011946:	603b      	str	r3, [r7, #0]
 8011948:	4603      	mov	r3, r0
 801194a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801194c:	7bfb      	ldrb	r3, [r7, #15]
 801194e:	4a0a      	ldr	r2, [pc, #40]	@ (8011978 <disk_write+0x3c>)
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	4413      	add	r3, r2
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	68dc      	ldr	r4, [r3, #12]
 8011958:	7bfb      	ldrb	r3, [r7, #15]
 801195a:	4a07      	ldr	r2, [pc, #28]	@ (8011978 <disk_write+0x3c>)
 801195c:	4413      	add	r3, r2
 801195e:	7a18      	ldrb	r0, [r3, #8]
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	68b9      	ldr	r1, [r7, #8]
 8011966:	47a0      	blx	r4
 8011968:	4603      	mov	r3, r0
 801196a:	75fb      	strb	r3, [r7, #23]
  return res;
 801196c:	7dfb      	ldrb	r3, [r7, #23]
}
 801196e:	4618      	mov	r0, r3
 8011970:	371c      	adds	r7, #28
 8011972:	46bd      	mov	sp, r7
 8011974:	bd90      	pop	{r4, r7, pc}
 8011976:	bf00      	nop
 8011978:	20000cd8 	.word	0x20000cd8

0801197c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	3301      	adds	r3, #1
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801198c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011990:	021b      	lsls	r3, r3, #8
 8011992:	b21a      	sxth	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	b21b      	sxth	r3, r3
 801199a:	4313      	orrs	r3, r2
 801199c:	b21b      	sxth	r3, r3
 801199e:	81fb      	strh	r3, [r7, #14]
	return rv;
 80119a0:	89fb      	ldrh	r3, [r7, #14]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3714      	adds	r7, #20
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr

080119ae <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80119ae:	b480      	push	{r7}
 80119b0:	b085      	sub	sp, #20
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	3303      	adds	r3, #3
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	021b      	lsls	r3, r3, #8
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	3202      	adds	r2, #2
 80119c6:	7812      	ldrb	r2, [r2, #0]
 80119c8:	4313      	orrs	r3, r2
 80119ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	021b      	lsls	r3, r3, #8
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	3201      	adds	r2, #1
 80119d4:	7812      	ldrb	r2, [r2, #0]
 80119d6:	4313      	orrs	r3, r2
 80119d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	021b      	lsls	r3, r3, #8
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	7812      	ldrb	r2, [r2, #0]
 80119e2:	4313      	orrs	r3, r2
 80119e4:	60fb      	str	r3, [r7, #12]
	return rv;
 80119e6:	68fb      	ldr	r3, [r7, #12]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3714      	adds	r7, #20
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	1c5a      	adds	r2, r3, #1
 8011a04:	607a      	str	r2, [r7, #4]
 8011a06:	887a      	ldrh	r2, [r7, #2]
 8011a08:	b2d2      	uxtb	r2, r2
 8011a0a:	701a      	strb	r2, [r3, #0]
 8011a0c:	887b      	ldrh	r3, [r7, #2]
 8011a0e:	0a1b      	lsrs	r3, r3, #8
 8011a10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	1c5a      	adds	r2, r3, #1
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	887a      	ldrh	r2, [r7, #2]
 8011a1a:	b2d2      	uxtb	r2, r2
 8011a1c:	701a      	strb	r2, [r3, #0]
}
 8011a1e:	bf00      	nop
 8011a20:	370c      	adds	r7, #12
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr

08011a2a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a2a:	b480      	push	{r7}
 8011a2c:	b083      	sub	sp, #12
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
 8011a32:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	1c5a      	adds	r2, r3, #1
 8011a38:	607a      	str	r2, [r7, #4]
 8011a3a:	683a      	ldr	r2, [r7, #0]
 8011a3c:	b2d2      	uxtb	r2, r2
 8011a3e:	701a      	strb	r2, [r3, #0]
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	0a1b      	lsrs	r3, r3, #8
 8011a44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	1c5a      	adds	r2, r3, #1
 8011a4a:	607a      	str	r2, [r7, #4]
 8011a4c:	683a      	ldr	r2, [r7, #0]
 8011a4e:	b2d2      	uxtb	r2, r2
 8011a50:	701a      	strb	r2, [r3, #0]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	0a1b      	lsrs	r3, r3, #8
 8011a56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	607a      	str	r2, [r7, #4]
 8011a5e:	683a      	ldr	r2, [r7, #0]
 8011a60:	b2d2      	uxtb	r2, r2
 8011a62:	701a      	strb	r2, [r3, #0]
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	0a1b      	lsrs	r3, r3, #8
 8011a68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	1c5a      	adds	r2, r3, #1
 8011a6e:	607a      	str	r2, [r7, #4]
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	b2d2      	uxtb	r2, r2
 8011a74:	701a      	strb	r2, [r3, #0]
}
 8011a76:	bf00      	nop
 8011a78:	370c      	adds	r7, #12
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011a82:	b480      	push	{r7}
 8011a84:	b087      	sub	sp, #28
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	1c5a      	adds	r2, r3, #1
 8011a96:	617a      	str	r2, [r7, #20]
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	b2d2      	uxtb	r2, r2
 8011a9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	607b      	str	r3, [r7, #4]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1f3      	bne.n	8011a92 <mem_set+0x10>
}
 8011aaa:	bf00      	nop
 8011aac:	bf00      	nop
 8011aae:	371c      	adds	r7, #28
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011ab8:	b480      	push	{r7}
 8011aba:	b089      	sub	sp, #36	@ 0x24
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	61fb      	str	r3, [r7, #28]
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011acc:	2300      	movs	r3, #0
 8011ace:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	1c5a      	adds	r2, r3, #1
 8011ad4:	61fa      	str	r2, [r7, #28]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	4619      	mov	r1, r3
 8011ada:	69bb      	ldr	r3, [r7, #24]
 8011adc:	1c5a      	adds	r2, r3, #1
 8011ade:	61ba      	str	r2, [r7, #24]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	1acb      	subs	r3, r1, r3
 8011ae4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	607b      	str	r3, [r7, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d002      	beq.n	8011af8 <mem_cmp+0x40>
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d0eb      	beq.n	8011ad0 <mem_cmp+0x18>

	return r;
 8011af8:	697b      	ldr	r3, [r7, #20]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3724      	adds	r7, #36	@ 0x24
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b10:	e002      	b.n	8011b18 <chk_chr+0x12>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	3301      	adds	r3, #1
 8011b16:	607b      	str	r3, [r7, #4]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d005      	beq.n	8011b2c <chk_chr+0x26>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	461a      	mov	r2, r3
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d1f2      	bne.n	8011b12 <chk_chr+0xc>
	return *str;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b46:	2300      	movs	r3, #0
 8011b48:	60fb      	str	r3, [r7, #12]
 8011b4a:	e01f      	b.n	8011b8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011b4c:	4a41      	ldr	r2, [pc, #260]	@ (8011c54 <inc_lock+0x118>)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	011b      	lsls	r3, r3, #4
 8011b52:	4413      	add	r3, r2
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d113      	bne.n	8011b86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8011c54 <inc_lock+0x118>)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	011b      	lsls	r3, r3, #4
 8011b64:	4413      	add	r3, r2
 8011b66:	3304      	adds	r3, #4
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d109      	bne.n	8011b86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011b72:	4a38      	ldr	r2, [pc, #224]	@ (8011c54 <inc_lock+0x118>)
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	4413      	add	r3, r2
 8011b7a:	3308      	adds	r3, #8
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d006      	beq.n	8011b94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	60fb      	str	r3, [r7, #12]
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d9dc      	bls.n	8011b4c <inc_lock+0x10>
 8011b92:	e000      	b.n	8011b96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011b94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2b02      	cmp	r3, #2
 8011b9a:	d132      	bne.n	8011c02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	e002      	b.n	8011ba8 <inc_lock+0x6c>
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	60fb      	str	r3, [r7, #12]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d806      	bhi.n	8011bbc <inc_lock+0x80>
 8011bae:	4a29      	ldr	r2, [pc, #164]	@ (8011c54 <inc_lock+0x118>)
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	011b      	lsls	r3, r3, #4
 8011bb4:	4413      	add	r3, r2
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1f2      	bne.n	8011ba2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2b02      	cmp	r3, #2
 8011bc0:	d101      	bne.n	8011bc6 <inc_lock+0x8a>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	e040      	b.n	8011c48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	4922      	ldr	r1, [pc, #136]	@ (8011c54 <inc_lock+0x118>)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	011b      	lsls	r3, r3, #4
 8011bd0:	440b      	add	r3, r1
 8011bd2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	689a      	ldr	r2, [r3, #8]
 8011bd8:	491e      	ldr	r1, [pc, #120]	@ (8011c54 <inc_lock+0x118>)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	011b      	lsls	r3, r3, #4
 8011bde:	440b      	add	r3, r1
 8011be0:	3304      	adds	r3, #4
 8011be2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	695a      	ldr	r2, [r3, #20]
 8011be8:	491a      	ldr	r1, [pc, #104]	@ (8011c54 <inc_lock+0x118>)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	011b      	lsls	r3, r3, #4
 8011bee:	440b      	add	r3, r1
 8011bf0:	3308      	adds	r3, #8
 8011bf2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011bf4:	4a17      	ldr	r2, [pc, #92]	@ (8011c54 <inc_lock+0x118>)
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	011b      	lsls	r3, r3, #4
 8011bfa:	4413      	add	r3, r2
 8011bfc:	330c      	adds	r3, #12
 8011bfe:	2200      	movs	r2, #0
 8011c00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d009      	beq.n	8011c1c <inc_lock+0xe0>
 8011c08:	4a12      	ldr	r2, [pc, #72]	@ (8011c54 <inc_lock+0x118>)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	011b      	lsls	r3, r3, #4
 8011c0e:	4413      	add	r3, r2
 8011c10:	330c      	adds	r3, #12
 8011c12:	881b      	ldrh	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d001      	beq.n	8011c1c <inc_lock+0xe0>
 8011c18:	2300      	movs	r3, #0
 8011c1a:	e015      	b.n	8011c48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d108      	bne.n	8011c34 <inc_lock+0xf8>
 8011c22:	4a0c      	ldr	r2, [pc, #48]	@ (8011c54 <inc_lock+0x118>)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	4413      	add	r3, r2
 8011c2a:	330c      	adds	r3, #12
 8011c2c:	881b      	ldrh	r3, [r3, #0]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	e001      	b.n	8011c38 <inc_lock+0xfc>
 8011c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011c38:	4906      	ldr	r1, [pc, #24]	@ (8011c54 <inc_lock+0x118>)
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	011b      	lsls	r3, r3, #4
 8011c3e:	440b      	add	r3, r1
 8011c40:	330c      	adds	r3, #12
 8011c42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	3301      	adds	r3, #1
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3714      	adds	r7, #20
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	20000cb8 	.word	0x20000cb8

08011c58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	3b01      	subs	r3, #1
 8011c64:	607b      	str	r3, [r7, #4]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d825      	bhi.n	8011cb8 <dec_lock+0x60>
		n = Files[i].ctr;
 8011c6c:	4a17      	ldr	r2, [pc, #92]	@ (8011ccc <dec_lock+0x74>)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	011b      	lsls	r3, r3, #4
 8011c72:	4413      	add	r3, r2
 8011c74:	330c      	adds	r3, #12
 8011c76:	881b      	ldrh	r3, [r3, #0]
 8011c78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011c7a:	89fb      	ldrh	r3, [r7, #14]
 8011c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c80:	d101      	bne.n	8011c86 <dec_lock+0x2e>
 8011c82:	2300      	movs	r3, #0
 8011c84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011c86:	89fb      	ldrh	r3, [r7, #14]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d002      	beq.n	8011c92 <dec_lock+0x3a>
 8011c8c:	89fb      	ldrh	r3, [r7, #14]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011c92:	4a0e      	ldr	r2, [pc, #56]	@ (8011ccc <dec_lock+0x74>)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	011b      	lsls	r3, r3, #4
 8011c98:	4413      	add	r3, r2
 8011c9a:	330c      	adds	r3, #12
 8011c9c:	89fa      	ldrh	r2, [r7, #14]
 8011c9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011ca0:	89fb      	ldrh	r3, [r7, #14]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d105      	bne.n	8011cb2 <dec_lock+0x5a>
 8011ca6:	4a09      	ldr	r2, [pc, #36]	@ (8011ccc <dec_lock+0x74>)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	011b      	lsls	r3, r3, #4
 8011cac:	4413      	add	r3, r2
 8011cae:	2200      	movs	r2, #0
 8011cb0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	737b      	strb	r3, [r7, #13]
 8011cb6:	e001      	b.n	8011cbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011cb8:	2302      	movs	r3, #2
 8011cba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011cbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3714      	adds	r7, #20
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc8:	4770      	bx	lr
 8011cca:	bf00      	nop
 8011ccc:	20000cb8 	.word	0x20000cb8

08011cd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011cd8:	2300      	movs	r3, #0
 8011cda:	60fb      	str	r3, [r7, #12]
 8011cdc:	e010      	b.n	8011d00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011cde:	4a0d      	ldr	r2, [pc, #52]	@ (8011d14 <clear_lock+0x44>)
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	011b      	lsls	r3, r3, #4
 8011ce4:	4413      	add	r3, r2
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d105      	bne.n	8011cfa <clear_lock+0x2a>
 8011cee:	4a09      	ldr	r2, [pc, #36]	@ (8011d14 <clear_lock+0x44>)
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	011b      	lsls	r3, r3, #4
 8011cf4:	4413      	add	r3, r2
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	60fb      	str	r3, [r7, #12]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d9eb      	bls.n	8011cde <clear_lock+0xe>
	}
}
 8011d06:	bf00      	nop
 8011d08:	bf00      	nop
 8011d0a:	3714      	adds	r7, #20
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr
 8011d14:	20000cb8 	.word	0x20000cb8

08011d18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b086      	sub	sp, #24
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	78db      	ldrb	r3, [r3, #3]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d034      	beq.n	8011d96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	7858      	ldrb	r0, [r3, #1]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	697a      	ldr	r2, [r7, #20]
 8011d40:	f7ff fdfc 	bl	801193c <disk_write>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	73fb      	strb	r3, [r7, #15]
 8011d4e:	e022      	b.n	8011d96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d5a:	697a      	ldr	r2, [r7, #20]
 8011d5c:	1ad2      	subs	r2, r2, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	69db      	ldr	r3, [r3, #28]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d217      	bcs.n	8011d96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	789b      	ldrb	r3, [r3, #2]
 8011d6a:	613b      	str	r3, [r7, #16]
 8011d6c:	e010      	b.n	8011d90 <sync_window+0x78>
					wsect += fs->fsize;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	69db      	ldr	r3, [r3, #28]
 8011d72:	697a      	ldr	r2, [r7, #20]
 8011d74:	4413      	add	r3, r2
 8011d76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	7858      	ldrb	r0, [r3, #1]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011d82:	2301      	movs	r3, #1
 8011d84:	697a      	ldr	r2, [r7, #20]
 8011d86:	f7ff fdd9 	bl	801193c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	3b01      	subs	r3, #1
 8011d8e:	613b      	str	r3, [r7, #16]
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d8eb      	bhi.n	8011d6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3718      	adds	r7, #24
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011daa:	2300      	movs	r3, #0
 8011dac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011db2:	683a      	ldr	r2, [r7, #0]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d01b      	beq.n	8011df0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f7ff ffad 	bl	8011d18 <sync_window>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011dc2:	7bfb      	ldrb	r3, [r7, #15]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d113      	bne.n	8011df0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	7858      	ldrb	r0, [r3, #1]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	683a      	ldr	r2, [r7, #0]
 8011dd6:	f7ff fd91 	bl	80118fc <disk_read>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d004      	beq.n	8011dea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011de0:	f04f 33ff 	mov.w	r3, #4294967295
 8011de4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011de6:	2301      	movs	r3, #1
 8011de8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
 8011e02:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	3b02      	subs	r3, #2
 8011e08:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	699b      	ldr	r3, [r3, #24]
 8011e0e:	3b02      	subs	r3, #2
 8011e10:	683a      	ldr	r2, [r7, #0]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d301      	bcc.n	8011e1a <clust2sect+0x20>
 8011e16:	2300      	movs	r3, #0
 8011e18:	e008      	b.n	8011e2c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	895b      	ldrh	r3, [r3, #10]
 8011e1e:	461a      	mov	r2, r3
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	fb03 f202 	mul.w	r2, r3, r2
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e2a:	4413      	add	r3, r2
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d904      	bls.n	8011e58 <get_fat+0x20>
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	683a      	ldr	r2, [r7, #0]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d302      	bcc.n	8011e5e <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e58:	2301      	movs	r3, #1
 8011e5a:	617b      	str	r3, [r7, #20]
 8011e5c:	e08e      	b.n	8011f7c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e62:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	2b03      	cmp	r3, #3
 8011e6a:	d061      	beq.n	8011f30 <get_fat+0xf8>
 8011e6c:	2b03      	cmp	r3, #3
 8011e6e:	dc7b      	bgt.n	8011f68 <get_fat+0x130>
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d002      	beq.n	8011e7a <get_fat+0x42>
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d041      	beq.n	8011efc <get_fat+0xc4>
 8011e78:	e076      	b.n	8011f68 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	60fb      	str	r3, [r7, #12]
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	085b      	lsrs	r3, r3, #1
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	4413      	add	r3, r2
 8011e86:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	0a5b      	lsrs	r3, r3, #9
 8011e90:	4413      	add	r3, r2
 8011e92:	4619      	mov	r1, r3
 8011e94:	6938      	ldr	r0, [r7, #16]
 8011e96:	f7ff ff83 	bl	8011da0 <move_window>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d166      	bne.n	8011f6e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	60fa      	str	r2, [r7, #12]
 8011ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eaa:	693a      	ldr	r2, [r7, #16]
 8011eac:	4413      	add	r3, r2
 8011eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011eb2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	0a5b      	lsrs	r3, r3, #9
 8011ebc:	4413      	add	r3, r2
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	6938      	ldr	r0, [r7, #16]
 8011ec2:	f7ff ff6d 	bl	8011da0 <move_window>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d152      	bne.n	8011f72 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ed2:	693a      	ldr	r2, [r7, #16]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011eda:	021b      	lsls	r3, r3, #8
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	f003 0301 	and.w	r3, r3, #1
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <get_fat+0xba>
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	091b      	lsrs	r3, r3, #4
 8011ef0:	e002      	b.n	8011ef8 <get_fat+0xc0>
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011ef8:	617b      	str	r3, [r7, #20]
			break;
 8011efa:	e03f      	b.n	8011f7c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	0a1b      	lsrs	r3, r3, #8
 8011f04:	4413      	add	r3, r2
 8011f06:	4619      	mov	r1, r3
 8011f08:	6938      	ldr	r0, [r7, #16]
 8011f0a:	f7ff ff49 	bl	8011da0 <move_window>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d130      	bne.n	8011f76 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	005b      	lsls	r3, r3, #1
 8011f1e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011f22:	4413      	add	r3, r2
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ff fd29 	bl	801197c <ld_word>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	617b      	str	r3, [r7, #20]
			break;
 8011f2e:	e025      	b.n	8011f7c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	09db      	lsrs	r3, r3, #7
 8011f38:	4413      	add	r3, r2
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	6938      	ldr	r0, [r7, #16]
 8011f3e:	f7ff ff2f 	bl	8011da0 <move_window>
 8011f42:	4603      	mov	r3, r0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d118      	bne.n	8011f7a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011f56:	4413      	add	r3, r2
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7ff fd28 	bl	80119ae <ld_dword>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011f64:	617b      	str	r3, [r7, #20]
			break;
 8011f66:	e009      	b.n	8011f7c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011f68:	2301      	movs	r3, #1
 8011f6a:	617b      	str	r3, [r7, #20]
 8011f6c:	e006      	b.n	8011f7c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f6e:	bf00      	nop
 8011f70:	e004      	b.n	8011f7c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f72:	bf00      	nop
 8011f74:	e002      	b.n	8011f7c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f76:	bf00      	nop
 8011f78:	e000      	b.n	8011f7c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f7a:	bf00      	nop
		}
	}

	return val;
 8011f7c:	697b      	ldr	r3, [r7, #20]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3718      	adds	r7, #24
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}

08011f86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011f86:	b590      	push	{r4, r7, lr}
 8011f88:	b089      	sub	sp, #36	@ 0x24
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	60f8      	str	r0, [r7, #12]
 8011f8e:	60b9      	str	r1, [r7, #8]
 8011f90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011f92:	2302      	movs	r3, #2
 8011f94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	f240 80d9 	bls.w	8012150 <put_fat+0x1ca>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	699b      	ldr	r3, [r3, #24]
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	f080 80d3 	bcs.w	8012150 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	f000 8096 	beq.w	80120e0 <put_fat+0x15a>
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	f300 80cb 	bgt.w	8012150 <put_fat+0x1ca>
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d002      	beq.n	8011fc4 <put_fat+0x3e>
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d06e      	beq.n	80120a0 <put_fat+0x11a>
 8011fc2:	e0c5      	b.n	8012150 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	61bb      	str	r3, [r7, #24]
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	085b      	lsrs	r3, r3, #1
 8011fcc:	69ba      	ldr	r2, [r7, #24]
 8011fce:	4413      	add	r3, r2
 8011fd0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	0a5b      	lsrs	r3, r3, #9
 8011fda:	4413      	add	r3, r2
 8011fdc:	4619      	mov	r1, r3
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f7ff fede 	bl	8011da0 <move_window>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fe8:	7ffb      	ldrb	r3, [r7, #31]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f040 80a9 	bne.w	8012142 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	1c59      	adds	r1, r3, #1
 8011ffa:	61b9      	str	r1, [r7, #24]
 8011ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012000:	4413      	add	r3, r2
 8012002:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00d      	beq.n	801202a <put_fat+0xa4>
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	b25b      	sxtb	r3, r3
 8012014:	f003 030f 	and.w	r3, r3, #15
 8012018:	b25a      	sxtb	r2, r3
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	b25b      	sxtb	r3, r3
 801201e:	011b      	lsls	r3, r3, #4
 8012020:	b25b      	sxtb	r3, r3
 8012022:	4313      	orrs	r3, r2
 8012024:	b25b      	sxtb	r3, r3
 8012026:	b2db      	uxtb	r3, r3
 8012028:	e001      	b.n	801202e <put_fat+0xa8>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	b2db      	uxtb	r3, r3
 801202e:	697a      	ldr	r2, [r7, #20]
 8012030:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2201      	movs	r2, #1
 8012036:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801203c:	69bb      	ldr	r3, [r7, #24]
 801203e:	0a5b      	lsrs	r3, r3, #9
 8012040:	4413      	add	r3, r2
 8012042:	4619      	mov	r1, r3
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f7ff feab 	bl	8011da0 <move_window>
 801204a:	4603      	mov	r3, r0
 801204c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801204e:	7ffb      	ldrb	r3, [r7, #31]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d178      	bne.n	8012146 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012060:	4413      	add	r3, r2
 8012062:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	f003 0301 	and.w	r3, r3, #1
 801206a:	2b00      	cmp	r3, #0
 801206c:	d003      	beq.n	8012076 <put_fat+0xf0>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	091b      	lsrs	r3, r3, #4
 8012072:	b2db      	uxtb	r3, r3
 8012074:	e00e      	b.n	8012094 <put_fat+0x10e>
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	b25b      	sxtb	r3, r3
 801207c:	f023 030f 	bic.w	r3, r3, #15
 8012080:	b25a      	sxtb	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	0a1b      	lsrs	r3, r3, #8
 8012086:	b25b      	sxtb	r3, r3
 8012088:	f003 030f 	and.w	r3, r3, #15
 801208c:	b25b      	sxtb	r3, r3
 801208e:	4313      	orrs	r3, r2
 8012090:	b25b      	sxtb	r3, r3
 8012092:	b2db      	uxtb	r3, r3
 8012094:	697a      	ldr	r2, [r7, #20]
 8012096:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2201      	movs	r2, #1
 801209c:	70da      	strb	r2, [r3, #3]
			break;
 801209e:	e057      	b.n	8012150 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	0a1b      	lsrs	r3, r3, #8
 80120a8:	4413      	add	r3, r2
 80120aa:	4619      	mov	r1, r3
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7ff fe77 	bl	8011da0 <move_window>
 80120b2:	4603      	mov	r3, r0
 80120b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120b6:	7ffb      	ldrb	r3, [r7, #31]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d146      	bne.n	801214a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80120ca:	4413      	add	r3, r2
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	b292      	uxth	r2, r2
 80120d0:	4611      	mov	r1, r2
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7ff fc8e 	bl	80119f4 <st_word>
			fs->wflag = 1;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2201      	movs	r2, #1
 80120dc:	70da      	strb	r2, [r3, #3]
			break;
 80120de:	e037      	b.n	8012150 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	09db      	lsrs	r3, r3, #7
 80120e8:	4413      	add	r3, r2
 80120ea:	4619      	mov	r1, r3
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7ff fe57 	bl	8011da0 <move_window>
 80120f2:	4603      	mov	r3, r0
 80120f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120f6:	7ffb      	ldrb	r3, [r7, #31]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d128      	bne.n	801214e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012110:	4413      	add	r3, r2
 8012112:	4618      	mov	r0, r3
 8012114:	f7ff fc4b 	bl	80119ae <ld_dword>
 8012118:	4603      	mov	r3, r0
 801211a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801211e:	4323      	orrs	r3, r4
 8012120:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012130:	4413      	add	r3, r2
 8012132:	6879      	ldr	r1, [r7, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	f7ff fc78 	bl	8011a2a <st_dword>
			fs->wflag = 1;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2201      	movs	r2, #1
 801213e:	70da      	strb	r2, [r3, #3]
			break;
 8012140:	e006      	b.n	8012150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012142:	bf00      	nop
 8012144:	e004      	b.n	8012150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012146:	bf00      	nop
 8012148:	e002      	b.n	8012150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801214a:	bf00      	nop
 801214c:	e000      	b.n	8012150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801214e:	bf00      	nop
		}
	}
	return res;
 8012150:	7ffb      	ldrb	r3, [r7, #31]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3724      	adds	r7, #36	@ 0x24
 8012156:	46bd      	mov	sp, r7
 8012158:	bd90      	pop	{r4, r7, pc}

0801215a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b088      	sub	sp, #32
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
 8012162:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d10d      	bne.n	801218c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	691b      	ldr	r3, [r3, #16]
 8012174:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012176:	69bb      	ldr	r3, [r7, #24]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d004      	beq.n	8012186 <create_chain+0x2c>
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	699b      	ldr	r3, [r3, #24]
 8012180:	69ba      	ldr	r2, [r7, #24]
 8012182:	429a      	cmp	r2, r3
 8012184:	d31b      	bcc.n	80121be <create_chain+0x64>
 8012186:	2301      	movs	r3, #1
 8012188:	61bb      	str	r3, [r7, #24]
 801218a:	e018      	b.n	80121be <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7ff fe52 	bl	8011e38 <get_fat>
 8012194:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2b01      	cmp	r3, #1
 801219a:	d801      	bhi.n	80121a0 <create_chain+0x46>
 801219c:	2301      	movs	r3, #1
 801219e:	e070      	b.n	8012282 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a6:	d101      	bne.n	80121ac <create_chain+0x52>
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	e06a      	b.n	8012282 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	68fa      	ldr	r2, [r7, #12]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d201      	bcs.n	80121ba <create_chain+0x60>
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	e063      	b.n	8012282 <create_chain+0x128>
		scl = clst;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	3301      	adds	r3, #1
 80121c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	699b      	ldr	r3, [r3, #24]
 80121cc:	69fa      	ldr	r2, [r7, #28]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d307      	bcc.n	80121e2 <create_chain+0x88>
				ncl = 2;
 80121d2:	2302      	movs	r3, #2
 80121d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121d6:	69fa      	ldr	r2, [r7, #28]
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d901      	bls.n	80121e2 <create_chain+0x88>
 80121de:	2300      	movs	r3, #0
 80121e0:	e04f      	b.n	8012282 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121e2:	69f9      	ldr	r1, [r7, #28]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff fe27 	bl	8011e38 <get_fat>
 80121ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d00e      	beq.n	8012210 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d003      	beq.n	8012200 <create_chain+0xa6>
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121fe:	d101      	bne.n	8012204 <create_chain+0xaa>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	e03e      	b.n	8012282 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012204:	69fa      	ldr	r2, [r7, #28]
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	429a      	cmp	r2, r3
 801220a:	d1da      	bne.n	80121c2 <create_chain+0x68>
 801220c:	2300      	movs	r3, #0
 801220e:	e038      	b.n	8012282 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012210:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012212:	f04f 32ff 	mov.w	r2, #4294967295
 8012216:	69f9      	ldr	r1, [r7, #28]
 8012218:	6938      	ldr	r0, [r7, #16]
 801221a:	f7ff feb4 	bl	8011f86 <put_fat>
 801221e:	4603      	mov	r3, r0
 8012220:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012222:	7dfb      	ldrb	r3, [r7, #23]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d109      	bne.n	801223c <create_chain+0xe2>
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d006      	beq.n	801223c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801222e:	69fa      	ldr	r2, [r7, #28]
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6938      	ldr	r0, [r7, #16]
 8012234:	f7ff fea7 	bl	8011f86 <put_fat>
 8012238:	4603      	mov	r3, r0
 801223a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801223c:	7dfb      	ldrb	r3, [r7, #23]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d116      	bne.n	8012270 <create_chain+0x116>
		fs->last_clst = ncl;
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	69fa      	ldr	r2, [r7, #28]
 8012246:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	695a      	ldr	r2, [r3, #20]
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	699b      	ldr	r3, [r3, #24]
 8012250:	3b02      	subs	r3, #2
 8012252:	429a      	cmp	r2, r3
 8012254:	d804      	bhi.n	8012260 <create_chain+0x106>
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	695b      	ldr	r3, [r3, #20]
 801225a:	1e5a      	subs	r2, r3, #1
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	791b      	ldrb	r3, [r3, #4]
 8012264:	f043 0301 	orr.w	r3, r3, #1
 8012268:	b2da      	uxtb	r2, r3
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	711a      	strb	r2, [r3, #4]
 801226e:	e007      	b.n	8012280 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012270:	7dfb      	ldrb	r3, [r7, #23]
 8012272:	2b01      	cmp	r3, #1
 8012274:	d102      	bne.n	801227c <create_chain+0x122>
 8012276:	f04f 33ff 	mov.w	r3, #4294967295
 801227a:	e000      	b.n	801227e <create_chain+0x124>
 801227c:	2301      	movs	r3, #1
 801227e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012280:	69fb      	ldr	r3, [r7, #28]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3720      	adds	r7, #32
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b086      	sub	sp, #24
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80122a0:	d204      	bcs.n	80122ac <dir_sdi+0x22>
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	f003 031f 	and.w	r3, r3, #31
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d001      	beq.n	80122b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80122ac:	2302      	movs	r3, #2
 80122ae:	e063      	b.n	8012378 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	683a      	ldr	r2, [r7, #0]
 80122b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	689b      	ldr	r3, [r3, #8]
 80122ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d106      	bne.n	80122d0 <dir_sdi+0x46>
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d902      	bls.n	80122d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d10c      	bne.n	80122f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	095b      	lsrs	r3, r3, #5
 80122da:	693a      	ldr	r2, [r7, #16]
 80122dc:	8912      	ldrh	r2, [r2, #8]
 80122de:	4293      	cmp	r3, r2
 80122e0:	d301      	bcc.n	80122e6 <dir_sdi+0x5c>
 80122e2:	2302      	movs	r3, #2
 80122e4:	e048      	b.n	8012378 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	61da      	str	r2, [r3, #28]
 80122ee:	e029      	b.n	8012344 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	895b      	ldrh	r3, [r3, #10]
 80122f4:	025b      	lsls	r3, r3, #9
 80122f6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122f8:	e019      	b.n	801232e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6979      	ldr	r1, [r7, #20]
 80122fe:	4618      	mov	r0, r3
 8012300:	f7ff fd9a 	bl	8011e38 <get_fat>
 8012304:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801230c:	d101      	bne.n	8012312 <dir_sdi+0x88>
 801230e:	2301      	movs	r3, #1
 8012310:	e032      	b.n	8012378 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d904      	bls.n	8012322 <dir_sdi+0x98>
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	699b      	ldr	r3, [r3, #24]
 801231c:	697a      	ldr	r2, [r7, #20]
 801231e:	429a      	cmp	r2, r3
 8012320:	d301      	bcc.n	8012326 <dir_sdi+0x9c>
 8012322:	2302      	movs	r3, #2
 8012324:	e028      	b.n	8012378 <dir_sdi+0xee>
			ofs -= csz;
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	429a      	cmp	r2, r3
 8012334:	d2e1      	bcs.n	80122fa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012336:	6979      	ldr	r1, [r7, #20]
 8012338:	6938      	ldr	r0, [r7, #16]
 801233a:	f7ff fd5e 	bl	8011dfa <clust2sect>
 801233e:	4602      	mov	r2, r0
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	697a      	ldr	r2, [r7, #20]
 8012348:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	69db      	ldr	r3, [r3, #28]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d101      	bne.n	8012356 <dir_sdi+0xcc>
 8012352:	2302      	movs	r3, #2
 8012354:	e010      	b.n	8012378 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	69da      	ldr	r2, [r3, #28]
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	0a5b      	lsrs	r3, r3, #9
 801235e:	441a      	add	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012370:	441a      	add	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3718      	adds	r7, #24
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b086      	sub	sp, #24
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	3320      	adds	r3, #32
 8012396:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	69db      	ldr	r3, [r3, #28]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d003      	beq.n	80123a8 <dir_next+0x28>
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80123a6:	d301      	bcc.n	80123ac <dir_next+0x2c>
 80123a8:	2304      	movs	r3, #4
 80123aa:	e0aa      	b.n	8012502 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f040 8098 	bne.w	80124e8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	69db      	ldr	r3, [r3, #28]
 80123bc:	1c5a      	adds	r2, r3, #1
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	699b      	ldr	r3, [r3, #24]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d10b      	bne.n	80123e2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	095b      	lsrs	r3, r3, #5
 80123ce:	68fa      	ldr	r2, [r7, #12]
 80123d0:	8912      	ldrh	r2, [r2, #8]
 80123d2:	4293      	cmp	r3, r2
 80123d4:	f0c0 8088 	bcc.w	80124e8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	61da      	str	r2, [r3, #28]
 80123de:	2304      	movs	r3, #4
 80123e0:	e08f      	b.n	8012502 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	0a5b      	lsrs	r3, r3, #9
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	8952      	ldrh	r2, [r2, #10]
 80123ea:	3a01      	subs	r2, #1
 80123ec:	4013      	ands	r3, r2
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d17a      	bne.n	80124e8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	699b      	ldr	r3, [r3, #24]
 80123f8:	4619      	mov	r1, r3
 80123fa:	4610      	mov	r0, r2
 80123fc:	f7ff fd1c 	bl	8011e38 <get_fat>
 8012400:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d801      	bhi.n	801240c <dir_next+0x8c>
 8012408:	2302      	movs	r3, #2
 801240a:	e07a      	b.n	8012502 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012412:	d101      	bne.n	8012418 <dir_next+0x98>
 8012414:	2301      	movs	r3, #1
 8012416:	e074      	b.n	8012502 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	699b      	ldr	r3, [r3, #24]
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	429a      	cmp	r2, r3
 8012420:	d358      	bcc.n	80124d4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d104      	bne.n	8012432 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2200      	movs	r2, #0
 801242c:	61da      	str	r2, [r3, #28]
 801242e:	2304      	movs	r3, #4
 8012430:	e067      	b.n	8012502 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	4619      	mov	r1, r3
 801243a:	4610      	mov	r0, r2
 801243c:	f7ff fe8d 	bl	801215a <create_chain>
 8012440:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d101      	bne.n	801244c <dir_next+0xcc>
 8012448:	2307      	movs	r3, #7
 801244a:	e05a      	b.n	8012502 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	2b01      	cmp	r3, #1
 8012450:	d101      	bne.n	8012456 <dir_next+0xd6>
 8012452:	2302      	movs	r3, #2
 8012454:	e055      	b.n	8012502 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245c:	d101      	bne.n	8012462 <dir_next+0xe2>
 801245e:	2301      	movs	r3, #1
 8012460:	e04f      	b.n	8012502 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012462:	68f8      	ldr	r0, [r7, #12]
 8012464:	f7ff fc58 	bl	8011d18 <sync_window>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <dir_next+0xf2>
 801246e:	2301      	movs	r3, #1
 8012470:	e047      	b.n	8012502 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	3334      	adds	r3, #52	@ 0x34
 8012476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801247a:	2100      	movs	r1, #0
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff fb00 	bl	8011a82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012482:	2300      	movs	r3, #0
 8012484:	613b      	str	r3, [r7, #16]
 8012486:	6979      	ldr	r1, [r7, #20]
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	f7ff fcb6 	bl	8011dfa <clust2sect>
 801248e:	4602      	mov	r2, r0
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	631a      	str	r2, [r3, #48]	@ 0x30
 8012494:	e012      	b.n	80124bc <dir_next+0x13c>
						fs->wflag = 1;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2201      	movs	r2, #1
 801249a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f7ff fc3b 	bl	8011d18 <sync_window>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d001      	beq.n	80124ac <dir_next+0x12c>
 80124a8:	2301      	movs	r3, #1
 80124aa:	e02a      	b.n	8012502 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	3301      	adds	r3, #1
 80124b0:	613b      	str	r3, [r7, #16]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124b6:	1c5a      	adds	r2, r3, #1
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	895b      	ldrh	r3, [r3, #10]
 80124c0:	461a      	mov	r2, r3
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	4293      	cmp	r3, r2
 80124c6:	d3e6      	bcc.n	8012496 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	1ad2      	subs	r2, r2, r3
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	697a      	ldr	r2, [r7, #20]
 80124d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80124da:	6979      	ldr	r1, [r7, #20]
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f7ff fc8c 	bl	8011dfa <clust2sect>
 80124e2:	4602      	mov	r2, r0
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	68ba      	ldr	r2, [r7, #8]
 80124ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124fa:	441a      	add	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012500:	2300      	movs	r3, #0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3718      	adds	r7, #24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b084      	sub	sp, #16
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
 8012512:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	331a      	adds	r3, #26
 8012518:	4618      	mov	r0, r3
 801251a:	f7ff fa2f 	bl	801197c <ld_word>
 801251e:	4603      	mov	r3, r0
 8012520:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	2b03      	cmp	r3, #3
 8012528:	d109      	bne.n	801253e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	3314      	adds	r3, #20
 801252e:	4618      	mov	r0, r3
 8012530:	f7ff fa24 	bl	801197c <ld_word>
 8012534:	4603      	mov	r3, r0
 8012536:	041b      	lsls	r3, r3, #16
 8012538:	68fa      	ldr	r2, [r7, #12]
 801253a:	4313      	orrs	r3, r2
 801253c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801253e:	68fb      	ldr	r3, [r7, #12]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012548:	b590      	push	{r4, r7, lr}
 801254a:	b087      	sub	sp, #28
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	331a      	adds	r3, #26
 8012556:	4618      	mov	r0, r3
 8012558:	f7ff fa10 	bl	801197c <ld_word>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d001      	beq.n	8012566 <cmp_lfn+0x1e>
 8012562:	2300      	movs	r3, #0
 8012564:	e059      	b.n	801261a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801256e:	1e5a      	subs	r2, r3, #1
 8012570:	4613      	mov	r3, r2
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	4413      	add	r3, r2
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	4413      	add	r3, r2
 801257a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801257c:	2301      	movs	r3, #1
 801257e:	81fb      	strh	r3, [r7, #14]
 8012580:	2300      	movs	r3, #0
 8012582:	613b      	str	r3, [r7, #16]
 8012584:	e033      	b.n	80125ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012586:	4a27      	ldr	r2, [pc, #156]	@ (8012624 <cmp_lfn+0xdc>)
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	4413      	add	r3, r2
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	461a      	mov	r2, r3
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	4413      	add	r3, r2
 8012594:	4618      	mov	r0, r3
 8012596:	f7ff f9f1 	bl	801197c <ld_word>
 801259a:	4603      	mov	r3, r0
 801259c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801259e:	89fb      	ldrh	r3, [r7, #14]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d01a      	beq.n	80125da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80125a8:	d812      	bhi.n	80125d0 <cmp_lfn+0x88>
 80125aa:	89bb      	ldrh	r3, [r7, #12]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f001 fad5 	bl	8013b5c <ff_wtoupper>
 80125b2:	4603      	mov	r3, r0
 80125b4:	461c      	mov	r4, r3
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	1c5a      	adds	r2, r3, #1
 80125ba:	617a      	str	r2, [r7, #20]
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	4413      	add	r3, r2
 80125c2:	881b      	ldrh	r3, [r3, #0]
 80125c4:	4618      	mov	r0, r3
 80125c6:	f001 fac9 	bl	8013b5c <ff_wtoupper>
 80125ca:	4603      	mov	r3, r0
 80125cc:	429c      	cmp	r4, r3
 80125ce:	d001      	beq.n	80125d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80125d0:	2300      	movs	r3, #0
 80125d2:	e022      	b.n	801261a <cmp_lfn+0xd2>
			}
			wc = uc;
 80125d4:	89bb      	ldrh	r3, [r7, #12]
 80125d6:	81fb      	strh	r3, [r7, #14]
 80125d8:	e006      	b.n	80125e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80125da:	89bb      	ldrh	r3, [r7, #12]
 80125dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d001      	beq.n	80125e8 <cmp_lfn+0xa0>
 80125e4:	2300      	movs	r3, #0
 80125e6:	e018      	b.n	801261a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	3301      	adds	r3, #1
 80125ec:	613b      	str	r3, [r7, #16]
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	2b0c      	cmp	r3, #12
 80125f2:	d9c8      	bls.n	8012586 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d00b      	beq.n	8012618 <cmp_lfn+0xd0>
 8012600:	89fb      	ldrh	r3, [r7, #14]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d008      	beq.n	8012618 <cmp_lfn+0xd0>
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	4413      	add	r3, r2
 801260e:	881b      	ldrh	r3, [r3, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <cmp_lfn+0xd0>
 8012614:	2300      	movs	r3, #0
 8012616:	e000      	b.n	801261a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012618:	2301      	movs	r3, #1
}
 801261a:	4618      	mov	r0, r3
 801261c:	371c      	adds	r7, #28
 801261e:	46bd      	mov	sp, r7
 8012620:	bd90      	pop	{r4, r7, pc}
 8012622:	bf00      	nop
 8012624:	0801685c 	.word	0x0801685c

08012628 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b086      	sub	sp, #24
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	331a      	adds	r3, #26
 8012636:	4618      	mov	r0, r3
 8012638:	f7ff f9a0 	bl	801197c <ld_word>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d001      	beq.n	8012646 <pick_lfn+0x1e>
 8012642:	2300      	movs	r3, #0
 8012644:	e04d      	b.n	80126e2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801264e:	1e5a      	subs	r2, r3, #1
 8012650:	4613      	mov	r3, r2
 8012652:	005b      	lsls	r3, r3, #1
 8012654:	4413      	add	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801265c:	2301      	movs	r3, #1
 801265e:	81fb      	strh	r3, [r7, #14]
 8012660:	2300      	movs	r3, #0
 8012662:	613b      	str	r3, [r7, #16]
 8012664:	e028      	b.n	80126b8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012666:	4a21      	ldr	r2, [pc, #132]	@ (80126ec <pick_lfn+0xc4>)
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	4413      	add	r3, r2
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	461a      	mov	r2, r3
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	4413      	add	r3, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff f981 	bl	801197c <ld_word>
 801267a:	4603      	mov	r3, r0
 801267c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801267e:	89fb      	ldrh	r3, [r7, #14]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00f      	beq.n	80126a4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2bfe      	cmp	r3, #254	@ 0xfe
 8012688:	d901      	bls.n	801268e <pick_lfn+0x66>
 801268a:	2300      	movs	r3, #0
 801268c:	e029      	b.n	80126e2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801268e:	89bb      	ldrh	r3, [r7, #12]
 8012690:	81fb      	strh	r3, [r7, #14]
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	1c5a      	adds	r2, r3, #1
 8012696:	617a      	str	r2, [r7, #20]
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	4413      	add	r3, r2
 801269e:	89fa      	ldrh	r2, [r7, #14]
 80126a0:	801a      	strh	r2, [r3, #0]
 80126a2:	e006      	b.n	80126b2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80126a4:	89bb      	ldrh	r3, [r7, #12]
 80126a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80126aa:	4293      	cmp	r3, r2
 80126ac:	d001      	beq.n	80126b2 <pick_lfn+0x8a>
 80126ae:	2300      	movs	r3, #0
 80126b0:	e017      	b.n	80126e2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	3301      	adds	r3, #1
 80126b6:	613b      	str	r3, [r7, #16]
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	2b0c      	cmp	r3, #12
 80126bc:	d9d3      	bls.n	8012666 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d00a      	beq.n	80126e0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80126ce:	d901      	bls.n	80126d4 <pick_lfn+0xac>
 80126d0:	2300      	movs	r3, #0
 80126d2:	e006      	b.n	80126e2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	005b      	lsls	r3, r3, #1
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	4413      	add	r3, r2
 80126dc:	2200      	movs	r2, #0
 80126de:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80126e0:	2301      	movs	r3, #1
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3718      	adds	r7, #24
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0801685c 	.word	0x0801685c

080126f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b085      	sub	sp, #20
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80126f8:	2300      	movs	r3, #0
 80126fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80126fc:	230b      	movs	r3, #11
 80126fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012700:	7bfb      	ldrb	r3, [r7, #15]
 8012702:	b2da      	uxtb	r2, r3
 8012704:	0852      	lsrs	r2, r2, #1
 8012706:	01db      	lsls	r3, r3, #7
 8012708:	4313      	orrs	r3, r2
 801270a:	b2da      	uxtb	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	1c59      	adds	r1, r3, #1
 8012710:	6079      	str	r1, [r7, #4]
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	4413      	add	r3, r2
 8012716:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	3b01      	subs	r3, #1
 801271c:	60bb      	str	r3, [r7, #8]
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d1ed      	bne.n	8012700 <sum_sfn+0x10>
	return sum;
 8012724:	7bfb      	ldrb	r3, [r7, #15]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3714      	adds	r7, #20
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr

08012732 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012732:	b580      	push	{r7, lr}
 8012734:	b086      	sub	sp, #24
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
 801273a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801273c:	2304      	movs	r3, #4
 801273e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012746:	23ff      	movs	r3, #255	@ 0xff
 8012748:	757b      	strb	r3, [r7, #21]
 801274a:	23ff      	movs	r3, #255	@ 0xff
 801274c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801274e:	e081      	b.n	8012854 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	69db      	ldr	r3, [r3, #28]
 8012754:	4619      	mov	r1, r3
 8012756:	6938      	ldr	r0, [r7, #16]
 8012758:	f7ff fb22 	bl	8011da0 <move_window>
 801275c:	4603      	mov	r3, r0
 801275e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012760:	7dfb      	ldrb	r3, [r7, #23]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d17c      	bne.n	8012860 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6a1b      	ldr	r3, [r3, #32]
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801276e:	7dbb      	ldrb	r3, [r7, #22]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d102      	bne.n	801277a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012774:	2304      	movs	r3, #4
 8012776:	75fb      	strb	r3, [r7, #23]
 8012778:	e077      	b.n	801286a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6a1b      	ldr	r3, [r3, #32]
 801277e:	330b      	adds	r3, #11
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012786:	73fb      	strb	r3, [r7, #15]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	7bfa      	ldrb	r2, [r7, #15]
 801278c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801278e:	7dbb      	ldrb	r3, [r7, #22]
 8012790:	2be5      	cmp	r3, #229	@ 0xe5
 8012792:	d00e      	beq.n	80127b2 <dir_read+0x80>
 8012794:	7dbb      	ldrb	r3, [r7, #22]
 8012796:	2b2e      	cmp	r3, #46	@ 0x2e
 8012798:	d00b      	beq.n	80127b2 <dir_read+0x80>
 801279a:	7bfb      	ldrb	r3, [r7, #15]
 801279c:	f023 0320 	bic.w	r3, r3, #32
 80127a0:	2b08      	cmp	r3, #8
 80127a2:	bf0c      	ite	eq
 80127a4:	2301      	moveq	r3, #1
 80127a6:	2300      	movne	r3, #0
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	461a      	mov	r2, r3
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d002      	beq.n	80127b8 <dir_read+0x86>
				ord = 0xFF;
 80127b2:	23ff      	movs	r3, #255	@ 0xff
 80127b4:	757b      	strb	r3, [r7, #21]
 80127b6:	e044      	b.n	8012842 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	2b0f      	cmp	r3, #15
 80127bc:	d12f      	bne.n	801281e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80127be:	7dbb      	ldrb	r3, [r7, #22]
 80127c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d00d      	beq.n	80127e4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6a1b      	ldr	r3, [r3, #32]
 80127cc:	7b5b      	ldrb	r3, [r3, #13]
 80127ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80127d0:	7dbb      	ldrb	r3, [r7, #22]
 80127d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80127d6:	75bb      	strb	r3, [r7, #22]
 80127d8:	7dbb      	ldrb	r3, [r7, #22]
 80127da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	695a      	ldr	r2, [r3, #20]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80127e4:	7dba      	ldrb	r2, [r7, #22]
 80127e6:	7d7b      	ldrb	r3, [r7, #21]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d115      	bne.n	8012818 <dir_read+0xe6>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6a1b      	ldr	r3, [r3, #32]
 80127f0:	330d      	adds	r3, #13
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	7d3a      	ldrb	r2, [r7, #20]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d10e      	bne.n	8012818 <dir_read+0xe6>
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	68da      	ldr	r2, [r3, #12]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6a1b      	ldr	r3, [r3, #32]
 8012802:	4619      	mov	r1, r3
 8012804:	4610      	mov	r0, r2
 8012806:	f7ff ff0f 	bl	8012628 <pick_lfn>
 801280a:	4603      	mov	r3, r0
 801280c:	2b00      	cmp	r3, #0
 801280e:	d003      	beq.n	8012818 <dir_read+0xe6>
 8012810:	7d7b      	ldrb	r3, [r7, #21]
 8012812:	3b01      	subs	r3, #1
 8012814:	b2db      	uxtb	r3, r3
 8012816:	e000      	b.n	801281a <dir_read+0xe8>
 8012818:	23ff      	movs	r3, #255	@ 0xff
 801281a:	757b      	strb	r3, [r7, #21]
 801281c:	e011      	b.n	8012842 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801281e:	7d7b      	ldrb	r3, [r7, #21]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d109      	bne.n	8012838 <dir_read+0x106>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6a1b      	ldr	r3, [r3, #32]
 8012828:	4618      	mov	r0, r3
 801282a:	f7ff ff61 	bl	80126f0 <sum_sfn>
 801282e:	4603      	mov	r3, r0
 8012830:	461a      	mov	r2, r3
 8012832:	7d3b      	ldrb	r3, [r7, #20]
 8012834:	4293      	cmp	r3, r2
 8012836:	d015      	beq.n	8012864 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f04f 32ff 	mov.w	r2, #4294967295
 801283e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8012840:	e010      	b.n	8012864 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012842:	2100      	movs	r1, #0
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7ff fd9b 	bl	8012380 <dir_next>
 801284a:	4603      	mov	r3, r0
 801284c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801284e:	7dfb      	ldrb	r3, [r7, #23]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d109      	bne.n	8012868 <dir_read+0x136>
	while (dp->sect) {
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	69db      	ldr	r3, [r3, #28]
 8012858:	2b00      	cmp	r3, #0
 801285a:	f47f af79 	bne.w	8012750 <dir_read+0x1e>
 801285e:	e004      	b.n	801286a <dir_read+0x138>
		if (res != FR_OK) break;
 8012860:	bf00      	nop
 8012862:	e002      	b.n	801286a <dir_read+0x138>
					break;
 8012864:	bf00      	nop
 8012866:	e000      	b.n	801286a <dir_read+0x138>
		if (res != FR_OK) break;
 8012868:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <dir_read+0x144>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2200      	movs	r2, #0
 8012874:	61da      	str	r2, [r3, #28]
	return res;
 8012876:	7dfb      	ldrb	r3, [r7, #23]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3718      	adds	r7, #24
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801288e:	2100      	movs	r1, #0
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f7ff fcfa 	bl	801228a <dir_sdi>
 8012896:	4603      	mov	r3, r0
 8012898:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801289a:	7dfb      	ldrb	r3, [r7, #23]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <dir_find+0x24>
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	e0a9      	b.n	80129f8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80128a4:	23ff      	movs	r3, #255	@ 0xff
 80128a6:	753b      	strb	r3, [r7, #20]
 80128a8:	7d3b      	ldrb	r3, [r7, #20]
 80128aa:	757b      	strb	r3, [r7, #21]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f04f 32ff 	mov.w	r2, #4294967295
 80128b2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	69db      	ldr	r3, [r3, #28]
 80128b8:	4619      	mov	r1, r3
 80128ba:	6938      	ldr	r0, [r7, #16]
 80128bc:	f7ff fa70 	bl	8011da0 <move_window>
 80128c0:	4603      	mov	r3, r0
 80128c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128c4:	7dfb      	ldrb	r3, [r7, #23]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f040 8090 	bne.w	80129ec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6a1b      	ldr	r3, [r3, #32]
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80128d4:	7dbb      	ldrb	r3, [r7, #22]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d102      	bne.n	80128e0 <dir_find+0x60>
 80128da:	2304      	movs	r3, #4
 80128dc:	75fb      	strb	r3, [r7, #23]
 80128de:	e08a      	b.n	80129f6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6a1b      	ldr	r3, [r3, #32]
 80128e4:	330b      	adds	r3, #11
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80128ec:	73fb      	strb	r3, [r7, #15]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	7bfa      	ldrb	r2, [r7, #15]
 80128f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80128f4:	7dbb      	ldrb	r3, [r7, #22]
 80128f6:	2be5      	cmp	r3, #229	@ 0xe5
 80128f8:	d007      	beq.n	801290a <dir_find+0x8a>
 80128fa:	7bfb      	ldrb	r3, [r7, #15]
 80128fc:	f003 0308 	and.w	r3, r3, #8
 8012900:	2b00      	cmp	r3, #0
 8012902:	d009      	beq.n	8012918 <dir_find+0x98>
 8012904:	7bfb      	ldrb	r3, [r7, #15]
 8012906:	2b0f      	cmp	r3, #15
 8012908:	d006      	beq.n	8012918 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801290a:	23ff      	movs	r3, #255	@ 0xff
 801290c:	757b      	strb	r3, [r7, #21]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f04f 32ff 	mov.w	r2, #4294967295
 8012914:	631a      	str	r2, [r3, #48]	@ 0x30
 8012916:	e05e      	b.n	80129d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012918:	7bfb      	ldrb	r3, [r7, #15]
 801291a:	2b0f      	cmp	r3, #15
 801291c:	d136      	bne.n	801298c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012928:	2b00      	cmp	r3, #0
 801292a:	d154      	bne.n	80129d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801292c:	7dbb      	ldrb	r3, [r7, #22]
 801292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00d      	beq.n	8012952 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6a1b      	ldr	r3, [r3, #32]
 801293a:	7b5b      	ldrb	r3, [r3, #13]
 801293c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801293e:	7dbb      	ldrb	r3, [r7, #22]
 8012940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012944:	75bb      	strb	r3, [r7, #22]
 8012946:	7dbb      	ldrb	r3, [r7, #22]
 8012948:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	695a      	ldr	r2, [r3, #20]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012952:	7dba      	ldrb	r2, [r7, #22]
 8012954:	7d7b      	ldrb	r3, [r7, #21]
 8012956:	429a      	cmp	r2, r3
 8012958:	d115      	bne.n	8012986 <dir_find+0x106>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6a1b      	ldr	r3, [r3, #32]
 801295e:	330d      	adds	r3, #13
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	7d3a      	ldrb	r2, [r7, #20]
 8012964:	429a      	cmp	r2, r3
 8012966:	d10e      	bne.n	8012986 <dir_find+0x106>
 8012968:	693b      	ldr	r3, [r7, #16]
 801296a:	68da      	ldr	r2, [r3, #12]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6a1b      	ldr	r3, [r3, #32]
 8012970:	4619      	mov	r1, r3
 8012972:	4610      	mov	r0, r2
 8012974:	f7ff fde8 	bl	8012548 <cmp_lfn>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d003      	beq.n	8012986 <dir_find+0x106>
 801297e:	7d7b      	ldrb	r3, [r7, #21]
 8012980:	3b01      	subs	r3, #1
 8012982:	b2db      	uxtb	r3, r3
 8012984:	e000      	b.n	8012988 <dir_find+0x108>
 8012986:	23ff      	movs	r3, #255	@ 0xff
 8012988:	757b      	strb	r3, [r7, #21]
 801298a:	e024      	b.n	80129d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801298c:	7d7b      	ldrb	r3, [r7, #21]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d109      	bne.n	80129a6 <dir_find+0x126>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6a1b      	ldr	r3, [r3, #32]
 8012996:	4618      	mov	r0, r3
 8012998:	f7ff feaa 	bl	80126f0 <sum_sfn>
 801299c:	4603      	mov	r3, r0
 801299e:	461a      	mov	r2, r3
 80129a0:	7d3b      	ldrb	r3, [r7, #20]
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d024      	beq.n	80129f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80129ac:	f003 0301 	and.w	r3, r3, #1
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10a      	bne.n	80129ca <dir_find+0x14a>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6a18      	ldr	r0, [r3, #32]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	3324      	adds	r3, #36	@ 0x24
 80129bc:	220b      	movs	r2, #11
 80129be:	4619      	mov	r1, r3
 80129c0:	f7ff f87a 	bl	8011ab8 <mem_cmp>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d014      	beq.n	80129f4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80129ca:	23ff      	movs	r3, #255	@ 0xff
 80129cc:	757b      	strb	r3, [r7, #21]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f04f 32ff 	mov.w	r2, #4294967295
 80129d4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80129d6:	2100      	movs	r1, #0
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f7ff fcd1 	bl	8012380 <dir_next>
 80129de:	4603      	mov	r3, r0
 80129e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80129e2:	7dfb      	ldrb	r3, [r7, #23]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f43f af65 	beq.w	80128b4 <dir_find+0x34>
 80129ea:	e004      	b.n	80129f6 <dir_find+0x176>
		if (res != FR_OK) break;
 80129ec:	bf00      	nop
 80129ee:	e002      	b.n	80129f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80129f0:	bf00      	nop
 80129f2:	e000      	b.n	80129f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80129f4:	bf00      	nop

	return res;
 80129f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3718      	adds	r7, #24
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b088      	sub	sp, #32
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	2200      	movs	r2, #0
 8012a14:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	69db      	ldr	r3, [r3, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f000 80ca 	beq.w	8012bb4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a28:	d032      	beq.n	8012a90 <get_fileinfo+0x90>
			i = j = 0;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	61bb      	str	r3, [r7, #24]
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012a32:	e01b      	b.n	8012a6c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012a34:	89fb      	ldrh	r3, [r7, #14]
 8012a36:	2100      	movs	r1, #0
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f001 f853 	bl	8013ae4 <ff_convert>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012a42:	89fb      	ldrh	r3, [r7, #14]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d102      	bne.n	8012a4e <get_fileinfo+0x4e>
 8012a48:	2300      	movs	r3, #0
 8012a4a:	61fb      	str	r3, [r7, #28]
 8012a4c:	e01a      	b.n	8012a84 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	2bfe      	cmp	r3, #254	@ 0xfe
 8012a52:	d902      	bls.n	8012a5a <get_fileinfo+0x5a>
 8012a54:	2300      	movs	r3, #0
 8012a56:	61fb      	str	r3, [r7, #28]
 8012a58:	e014      	b.n	8012a84 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	1c5a      	adds	r2, r3, #1
 8012a5e:	61fa      	str	r2, [r7, #28]
 8012a60:	89fa      	ldrh	r2, [r7, #14]
 8012a62:	b2d1      	uxtb	r1, r2
 8012a64:	683a      	ldr	r2, [r7, #0]
 8012a66:	4413      	add	r3, r2
 8012a68:	460a      	mov	r2, r1
 8012a6a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	68da      	ldr	r2, [r3, #12]
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	1c59      	adds	r1, r3, #1
 8012a74:	61b9      	str	r1, [r7, #24]
 8012a76:	005b      	lsls	r3, r3, #1
 8012a78:	4413      	add	r3, r2
 8012a7a:	881b      	ldrh	r3, [r3, #0]
 8012a7c:	81fb      	strh	r3, [r7, #14]
 8012a7e:	89fb      	ldrh	r3, [r7, #14]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d1d7      	bne.n	8012a34 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	4413      	add	r3, r2
 8012a8a:	3316      	adds	r3, #22
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	61bb      	str	r3, [r7, #24]
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	3316      	adds	r3, #22
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012aa4:	e04d      	b.n	8012b42 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6a1a      	ldr	r2, [r3, #32]
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	1c59      	adds	r1, r3, #1
 8012aae:	61f9      	str	r1, [r7, #28]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012ab6:	7dfb      	ldrb	r3, [r7, #23]
 8012ab8:	2b20      	cmp	r3, #32
 8012aba:	d041      	beq.n	8012b40 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012abc:	7dfb      	ldrb	r3, [r7, #23]
 8012abe:	2b05      	cmp	r3, #5
 8012ac0:	d101      	bne.n	8012ac6 <get_fileinfo+0xc6>
 8012ac2:	23e5      	movs	r3, #229	@ 0xe5
 8012ac4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	2b09      	cmp	r3, #9
 8012aca:	d10f      	bne.n	8012aec <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8012acc:	89bb      	ldrh	r3, [r7, #12]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d105      	bne.n	8012ade <get_fileinfo+0xde>
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	69bb      	ldr	r3, [r7, #24]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	3316      	adds	r3, #22
 8012ada:	222e      	movs	r2, #46	@ 0x2e
 8012adc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	1c5a      	adds	r2, r3, #1
 8012ae2:	61ba      	str	r2, [r7, #24]
 8012ae4:	683a      	ldr	r2, [r7, #0]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	222e      	movs	r2, #46	@ 0x2e
 8012aea:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8012aec:	683a      	ldr	r2, [r7, #0]
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	4413      	add	r3, r2
 8012af2:	3309      	adds	r3, #9
 8012af4:	7dfa      	ldrb	r2, [r7, #23]
 8012af6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8012af8:	89bb      	ldrh	r3, [r7, #12]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d11c      	bne.n	8012b38 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012afe:	7dfb      	ldrb	r3, [r7, #23]
 8012b00:	2b40      	cmp	r3, #64	@ 0x40
 8012b02:	d913      	bls.n	8012b2c <get_fileinfo+0x12c>
 8012b04:	7dfb      	ldrb	r3, [r7, #23]
 8012b06:	2b5a      	cmp	r3, #90	@ 0x5a
 8012b08:	d810      	bhi.n	8012b2c <get_fileinfo+0x12c>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6a1b      	ldr	r3, [r3, #32]
 8012b0e:	330c      	adds	r3, #12
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	461a      	mov	r2, r3
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	2b08      	cmp	r3, #8
 8012b18:	d901      	bls.n	8012b1e <get_fileinfo+0x11e>
 8012b1a:	2310      	movs	r3, #16
 8012b1c:	e000      	b.n	8012b20 <get_fileinfo+0x120>
 8012b1e:	2308      	movs	r3, #8
 8012b20:	4013      	ands	r3, r2
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d002      	beq.n	8012b2c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8012b26:	7dfb      	ldrb	r3, [r7, #23]
 8012b28:	3320      	adds	r3, #32
 8012b2a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8012b2c:	683a      	ldr	r2, [r7, #0]
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	4413      	add	r3, r2
 8012b32:	3316      	adds	r3, #22
 8012b34:	7dfa      	ldrb	r2, [r7, #23]
 8012b36:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012b38:	69bb      	ldr	r3, [r7, #24]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	61bb      	str	r3, [r7, #24]
 8012b3e:	e000      	b.n	8012b42 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8012b40:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	2b0a      	cmp	r3, #10
 8012b46:	d9ae      	bls.n	8012aa6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8012b48:	89bb      	ldrh	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10d      	bne.n	8012b6a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	4413      	add	r3, r2
 8012b54:	3316      	adds	r3, #22
 8012b56:	2200      	movs	r2, #0
 8012b58:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a1b      	ldr	r3, [r3, #32]
 8012b5e:	330c      	adds	r3, #12
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d101      	bne.n	8012b6a <get_fileinfo+0x16a>
 8012b66:	2300      	movs	r3, #0
 8012b68:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	4413      	add	r3, r2
 8012b70:	3309      	adds	r3, #9
 8012b72:	2200      	movs	r2, #0
 8012b74:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6a1b      	ldr	r3, [r3, #32]
 8012b7a:	7ada      	ldrb	r2, [r3, #11]
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6a1b      	ldr	r3, [r3, #32]
 8012b84:	331c      	adds	r3, #28
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fe ff11 	bl	80119ae <ld_dword>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6a1b      	ldr	r3, [r3, #32]
 8012b96:	3316      	adds	r3, #22
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fe ff08 	bl	80119ae <ld_dword>
 8012b9e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	80da      	strh	r2, [r3, #6]
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	0c1b      	lsrs	r3, r3, #16
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	809a      	strh	r2, [r3, #4]
 8012bb2:	e000      	b.n	8012bb6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012bb4:	bf00      	nop
}
 8012bb6:	3720      	adds	r7, #32
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b08a      	sub	sp, #40	@ 0x28
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	613b      	str	r3, [r7, #16]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	60fb      	str	r3, [r7, #12]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	617b      	str	r3, [r7, #20]
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	61ba      	str	r2, [r7, #24]
 8012be2:	693a      	ldr	r2, [r7, #16]
 8012be4:	4413      	add	r3, r2
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bec:	2b1f      	cmp	r3, #31
 8012bee:	d940      	bls.n	8012c72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012bf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bf2:	2b2f      	cmp	r3, #47	@ 0x2f
 8012bf4:	d006      	beq.n	8012c04 <create_name+0x48>
 8012bf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bf8:	2b5c      	cmp	r3, #92	@ 0x5c
 8012bfa:	d110      	bne.n	8012c1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012bfc:	e002      	b.n	8012c04 <create_name+0x48>
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	3301      	adds	r3, #1
 8012c02:	61bb      	str	r3, [r7, #24]
 8012c04:	693a      	ldr	r2, [r7, #16]
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	4413      	add	r3, r2
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012c0e:	d0f6      	beq.n	8012bfe <create_name+0x42>
 8012c10:	693a      	ldr	r2, [r7, #16]
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	4413      	add	r3, r2
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	2b5c      	cmp	r3, #92	@ 0x5c
 8012c1a:	d0f0      	beq.n	8012bfe <create_name+0x42>
			break;
 8012c1c:	e02a      	b.n	8012c74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2bfe      	cmp	r3, #254	@ 0xfe
 8012c22:	d901      	bls.n	8012c28 <create_name+0x6c>
 8012c24:	2306      	movs	r3, #6
 8012c26:	e17d      	b.n	8012f24 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012c28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c30:	2101      	movs	r1, #1
 8012c32:	4618      	mov	r0, r3
 8012c34:	f000 ff56 	bl	8013ae4 <ff_convert>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012c3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <create_name+0x8a>
 8012c42:	2306      	movs	r3, #6
 8012c44:	e16e      	b.n	8012f24 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c4a:	d809      	bhi.n	8012c60 <create_name+0xa4>
 8012c4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c4e:	4619      	mov	r1, r3
 8012c50:	488d      	ldr	r0, [pc, #564]	@ (8012e88 <create_name+0x2cc>)
 8012c52:	f7fe ff58 	bl	8011b06 <chk_chr>
 8012c56:	4603      	mov	r3, r0
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d001      	beq.n	8012c60 <create_name+0xa4>
 8012c5c:	2306      	movs	r3, #6
 8012c5e:	e161      	b.n	8012f24 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	617a      	str	r2, [r7, #20]
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012c6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012c70:	e7b4      	b.n	8012bdc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012c72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012c74:	693a      	ldr	r2, [r7, #16]
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	441a      	add	r2, r3
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012c7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c80:	2b1f      	cmp	r3, #31
 8012c82:	d801      	bhi.n	8012c88 <create_name+0xcc>
 8012c84:	2304      	movs	r3, #4
 8012c86:	e000      	b.n	8012c8a <create_name+0xce>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012c8e:	e011      	b.n	8012cb4 <create_name+0xf8>
		w = lfn[di - 1];
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012c96:	3b01      	subs	r3, #1
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	68fa      	ldr	r2, [r7, #12]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8012ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ca4:	2b20      	cmp	r3, #32
 8012ca6:	d002      	beq.n	8012cae <create_name+0xf2>
 8012ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cac:	d106      	bne.n	8012cbc <create_name+0x100>
		di--;
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1ea      	bne.n	8012c90 <create_name+0xd4>
 8012cba:	e000      	b.n	8012cbe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012cbc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	005b      	lsls	r3, r3, #1
 8012cc2:	68fa      	ldr	r2, [r7, #12]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d101      	bne.n	8012cd4 <create_name+0x118>
 8012cd0:	2306      	movs	r3, #6
 8012cd2:	e127      	b.n	8012f24 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	3324      	adds	r3, #36	@ 0x24
 8012cd8:	220b      	movs	r2, #11
 8012cda:	2120      	movs	r1, #32
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7fe fed0 	bl	8011a82 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	61bb      	str	r3, [r7, #24]
 8012ce6:	e002      	b.n	8012cee <create_name+0x132>
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	3301      	adds	r3, #1
 8012cec:	61bb      	str	r3, [r7, #24]
 8012cee:	69bb      	ldr	r3, [r7, #24]
 8012cf0:	005b      	lsls	r3, r3, #1
 8012cf2:	68fa      	ldr	r2, [r7, #12]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	881b      	ldrh	r3, [r3, #0]
 8012cf8:	2b20      	cmp	r3, #32
 8012cfa:	d0f5      	beq.n	8012ce8 <create_name+0x12c>
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	005b      	lsls	r3, r3, #1
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	4413      	add	r3, r2
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d08:	d0ee      	beq.n	8012ce8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012d0a:	69bb      	ldr	r3, [r7, #24]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d009      	beq.n	8012d24 <create_name+0x168>
 8012d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d14:	f043 0303 	orr.w	r3, r3, #3
 8012d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012d1c:	e002      	b.n	8012d24 <create_name+0x168>
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	3b01      	subs	r3, #1
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d009      	beq.n	8012d3e <create_name+0x182>
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012d30:	3b01      	subs	r3, #1
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d3c:	d1ef      	bne.n	8012d1e <create_name+0x162>

	i = b = 0; ni = 8;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012d44:	2300      	movs	r3, #0
 8012d46:	623b      	str	r3, [r7, #32]
 8012d48:	2308      	movs	r3, #8
 8012d4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	1c5a      	adds	r2, r3, #1
 8012d50:	61ba      	str	r2, [r7, #24]
 8012d52:	005b      	lsls	r3, r3, #1
 8012d54:	68fa      	ldr	r2, [r7, #12]
 8012d56:	4413      	add	r3, r2
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012d5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 8090 	beq.w	8012e84 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012d64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d66:	2b20      	cmp	r3, #32
 8012d68:	d006      	beq.n	8012d78 <create_name+0x1bc>
 8012d6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d6e:	d10a      	bne.n	8012d86 <create_name+0x1ca>
 8012d70:	69ba      	ldr	r2, [r7, #24]
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d006      	beq.n	8012d86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d7c:	f043 0303 	orr.w	r3, r3, #3
 8012d80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d84:	e07d      	b.n	8012e82 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012d86:	6a3a      	ldr	r2, [r7, #32]
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d203      	bcs.n	8012d96 <create_name+0x1da>
 8012d8e:	69ba      	ldr	r2, [r7, #24]
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d123      	bne.n	8012dde <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	2b0b      	cmp	r3, #11
 8012d9a:	d106      	bne.n	8012daa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012da0:	f043 0303 	orr.w	r3, r3, #3
 8012da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012da8:	e075      	b.n	8012e96 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012daa:	69ba      	ldr	r2, [r7, #24]
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d005      	beq.n	8012dbe <create_name+0x202>
 8012db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012db6:	f043 0303 	orr.w	r3, r3, #3
 8012dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012dbe:	69ba      	ldr	r2, [r7, #24]
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d866      	bhi.n	8012e94 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	61bb      	str	r3, [r7, #24]
 8012dca:	2308      	movs	r3, #8
 8012dcc:	623b      	str	r3, [r7, #32]
 8012dce:	230b      	movs	r3, #11
 8012dd0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012ddc:	e051      	b.n	8012e82 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012dde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012de0:	2b7f      	cmp	r3, #127	@ 0x7f
 8012de2:	d914      	bls.n	8012e0e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012de6:	2100      	movs	r1, #0
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 fe7b 	bl	8013ae4 <ff_convert>
 8012dee:	4603      	mov	r3, r0
 8012df0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012df2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d004      	beq.n	8012e02 <create_name+0x246>
 8012df8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012dfa:	3b80      	subs	r3, #128	@ 0x80
 8012dfc:	4a23      	ldr	r2, [pc, #140]	@ (8012e8c <create_name+0x2d0>)
 8012dfe:	5cd3      	ldrb	r3, [r2, r3]
 8012e00:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e06:	f043 0302 	orr.w	r3, r3, #2
 8012e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d007      	beq.n	8012e24 <create_name+0x268>
 8012e14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e16:	4619      	mov	r1, r3
 8012e18:	481d      	ldr	r0, [pc, #116]	@ (8012e90 <create_name+0x2d4>)
 8012e1a:	f7fe fe74 	bl	8011b06 <chk_chr>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d008      	beq.n	8012e36 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012e24:	235f      	movs	r3, #95	@ 0x5f
 8012e26:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e2c:	f043 0303 	orr.w	r3, r3, #3
 8012e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012e34:	e01b      	b.n	8012e6e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012e36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e38:	2b40      	cmp	r3, #64	@ 0x40
 8012e3a:	d909      	bls.n	8012e50 <create_name+0x294>
 8012e3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e3e:	2b5a      	cmp	r3, #90	@ 0x5a
 8012e40:	d806      	bhi.n	8012e50 <create_name+0x294>
					b |= 2;
 8012e42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012e46:	f043 0302 	orr.w	r3, r3, #2
 8012e4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012e4e:	e00e      	b.n	8012e6e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e52:	2b60      	cmp	r3, #96	@ 0x60
 8012e54:	d90b      	bls.n	8012e6e <create_name+0x2b2>
 8012e56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e58:	2b7a      	cmp	r3, #122	@ 0x7a
 8012e5a:	d808      	bhi.n	8012e6e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012e60:	f043 0301 	orr.w	r3, r3, #1
 8012e64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012e68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e6a:	3b20      	subs	r3, #32
 8012e6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012e6e:	6a3b      	ldr	r3, [r7, #32]
 8012e70:	1c5a      	adds	r2, r3, #1
 8012e72:	623a      	str	r2, [r7, #32]
 8012e74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012e76:	b2d1      	uxtb	r1, r2
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	4413      	add	r3, r2
 8012e7c:	460a      	mov	r2, r1
 8012e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012e82:	e763      	b.n	8012d4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012e84:	bf00      	nop
 8012e86:	e006      	b.n	8012e96 <create_name+0x2da>
 8012e88:	0801674c 	.word	0x0801674c
 8012e8c:	080167dc 	.word	0x080167dc
 8012e90:	08016758 	.word	0x08016758
			if (si > di) break;			/* No extension */
 8012e94:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012e9c:	2be5      	cmp	r3, #229	@ 0xe5
 8012e9e:	d103      	bne.n	8012ea8 <create_name+0x2ec>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2205      	movs	r2, #5
 8012ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	2b08      	cmp	r3, #8
 8012eac:	d104      	bne.n	8012eb8 <create_name+0x2fc>
 8012eae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ebc:	f003 030c 	and.w	r3, r3, #12
 8012ec0:	2b0c      	cmp	r3, #12
 8012ec2:	d005      	beq.n	8012ed0 <create_name+0x314>
 8012ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ec8:	f003 0303 	and.w	r3, r3, #3
 8012ecc:	2b03      	cmp	r3, #3
 8012ece:	d105      	bne.n	8012edc <create_name+0x320>
 8012ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ed4:	f043 0302 	orr.w	r3, r3, #2
 8012ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ee0:	f003 0302 	and.w	r3, r3, #2
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d117      	bne.n	8012f18 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012eec:	f003 0303 	and.w	r3, r3, #3
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	d105      	bne.n	8012f00 <create_name+0x344>
 8012ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ef8:	f043 0310 	orr.w	r3, r3, #16
 8012efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012f00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012f04:	f003 030c 	and.w	r3, r3, #12
 8012f08:	2b04      	cmp	r3, #4
 8012f0a:	d105      	bne.n	8012f18 <create_name+0x35c>
 8012f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f10:	f043 0308 	orr.w	r3, r3, #8
 8012f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012f1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8012f22:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3728      	adds	r7, #40	@ 0x28
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}

08012f2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b086      	sub	sp, #24
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012f40:	e002      	b.n	8012f48 <follow_path+0x1c>
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	3301      	adds	r3, #1
 8012f46:	603b      	str	r3, [r7, #0]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f4e:	d0f8      	beq.n	8012f42 <follow_path+0x16>
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b5c      	cmp	r3, #92	@ 0x5c
 8012f56:	d0f4      	beq.n	8012f42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	2b1f      	cmp	r3, #31
 8012f64:	d80a      	bhi.n	8012f7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2280      	movs	r2, #128	@ 0x80
 8012f6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012f6e:	2100      	movs	r1, #0
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f7ff f98a 	bl	801228a <dir_sdi>
 8012f76:	4603      	mov	r3, r0
 8012f78:	75fb      	strb	r3, [r7, #23]
 8012f7a:	e043      	b.n	8013004 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012f7c:	463b      	mov	r3, r7
 8012f7e:	4619      	mov	r1, r3
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7ff fe1b 	bl	8012bbc <create_name>
 8012f86:	4603      	mov	r3, r0
 8012f88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d134      	bne.n	8012ffa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7ff fc75 	bl	8012880 <dir_find>
 8012f96:	4603      	mov	r3, r0
 8012f98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012fa0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012fa2:	7dfb      	ldrb	r3, [r7, #23]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d00a      	beq.n	8012fbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012fa8:	7dfb      	ldrb	r3, [r7, #23]
 8012faa:	2b04      	cmp	r3, #4
 8012fac:	d127      	bne.n	8012ffe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012fae:	7afb      	ldrb	r3, [r7, #11]
 8012fb0:	f003 0304 	and.w	r3, r3, #4
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d122      	bne.n	8012ffe <follow_path+0xd2>
 8012fb8:	2305      	movs	r3, #5
 8012fba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012fbc:	e01f      	b.n	8012ffe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012fbe:	7afb      	ldrb	r3, [r7, #11]
 8012fc0:	f003 0304 	and.w	r3, r3, #4
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d11c      	bne.n	8013002 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	799b      	ldrb	r3, [r3, #6]
 8012fcc:	f003 0310 	and.w	r3, r3, #16
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d102      	bne.n	8012fda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012fd4:	2305      	movs	r3, #5
 8012fd6:	75fb      	strb	r3, [r7, #23]
 8012fd8:	e014      	b.n	8013004 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	695b      	ldr	r3, [r3, #20]
 8012fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fe8:	4413      	add	r3, r2
 8012fea:	4619      	mov	r1, r3
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f7ff fa8c 	bl	801250a <ld_clust>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ff8:	e7c0      	b.n	8012f7c <follow_path+0x50>
			if (res != FR_OK) break;
 8012ffa:	bf00      	nop
 8012ffc:	e002      	b.n	8013004 <follow_path+0xd8>
				break;
 8012ffe:	bf00      	nop
 8013000:	e000      	b.n	8013004 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013002:	bf00      	nop
			}
		}
	}

	return res;
 8013004:	7dfb      	ldrb	r3, [r7, #23]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3718      	adds	r7, #24
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}

0801300e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801300e:	b480      	push	{r7}
 8013010:	b087      	sub	sp, #28
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013016:	f04f 33ff 	mov.w	r3, #4294967295
 801301a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d031      	beq.n	8013088 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	617b      	str	r3, [r7, #20]
 801302a:	e002      	b.n	8013032 <get_ldnumber+0x24>
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	3301      	adds	r3, #1
 8013030:	617b      	str	r3, [r7, #20]
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	2b1f      	cmp	r3, #31
 8013038:	d903      	bls.n	8013042 <get_ldnumber+0x34>
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013040:	d1f4      	bne.n	801302c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	2b3a      	cmp	r3, #58	@ 0x3a
 8013048:	d11c      	bne.n	8013084 <get_ldnumber+0x76>
			tp = *path;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	60fa      	str	r2, [r7, #12]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	3b30      	subs	r3, #48	@ 0x30
 801305a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	2b09      	cmp	r3, #9
 8013060:	d80e      	bhi.n	8013080 <get_ldnumber+0x72>
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	429a      	cmp	r2, r3
 8013068:	d10a      	bne.n	8013080 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d107      	bne.n	8013080 <get_ldnumber+0x72>
					vol = (int)i;
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	3301      	adds	r3, #1
 8013078:	617b      	str	r3, [r7, #20]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	e002      	b.n	801308a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013084:	2300      	movs	r3, #0
 8013086:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013088:	693b      	ldr	r3, [r7, #16]
}
 801308a:	4618      	mov	r0, r3
 801308c:	371c      	adds	r7, #28
 801308e:	46bd      	mov	sp, r7
 8013090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013094:	4770      	bx	lr
	...

08013098 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	70da      	strb	r2, [r3, #3]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f04f 32ff 	mov.w	r2, #4294967295
 80130ae:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7fe fe74 	bl	8011da0 <move_window>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d001      	beq.n	80130c2 <check_fs+0x2a>
 80130be:	2304      	movs	r3, #4
 80130c0:	e038      	b.n	8013134 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	3334      	adds	r3, #52	@ 0x34
 80130c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fe fc56 	bl	801197c <ld_word>
 80130d0:	4603      	mov	r3, r0
 80130d2:	461a      	mov	r2, r3
 80130d4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80130d8:	429a      	cmp	r2, r3
 80130da:	d001      	beq.n	80130e0 <check_fs+0x48>
 80130dc:	2303      	movs	r3, #3
 80130de:	e029      	b.n	8013134 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80130e6:	2be9      	cmp	r3, #233	@ 0xe9
 80130e8:	d009      	beq.n	80130fe <check_fs+0x66>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80130f0:	2beb      	cmp	r3, #235	@ 0xeb
 80130f2:	d11e      	bne.n	8013132 <check_fs+0x9a>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80130fa:	2b90      	cmp	r3, #144	@ 0x90
 80130fc:	d119      	bne.n	8013132 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	3334      	adds	r3, #52	@ 0x34
 8013102:	3336      	adds	r3, #54	@ 0x36
 8013104:	4618      	mov	r0, r3
 8013106:	f7fe fc52 	bl	80119ae <ld_dword>
 801310a:	4603      	mov	r3, r0
 801310c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013110:	4a0a      	ldr	r2, [pc, #40]	@ (801313c <check_fs+0xa4>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d101      	bne.n	801311a <check_fs+0x82>
 8013116:	2300      	movs	r3, #0
 8013118:	e00c      	b.n	8013134 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	3334      	adds	r3, #52	@ 0x34
 801311e:	3352      	adds	r3, #82	@ 0x52
 8013120:	4618      	mov	r0, r3
 8013122:	f7fe fc44 	bl	80119ae <ld_dword>
 8013126:	4603      	mov	r3, r0
 8013128:	4a05      	ldr	r2, [pc, #20]	@ (8013140 <check_fs+0xa8>)
 801312a:	4293      	cmp	r3, r2
 801312c:	d101      	bne.n	8013132 <check_fs+0x9a>
 801312e:	2300      	movs	r3, #0
 8013130:	e000      	b.n	8013134 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013132:	2302      	movs	r3, #2
}
 8013134:	4618      	mov	r0, r3
 8013136:	3708      	adds	r7, #8
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	00544146 	.word	0x00544146
 8013140:	33544146 	.word	0x33544146

08013144 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b096      	sub	sp, #88	@ 0x58
 8013148:	af00      	add	r7, sp, #0
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	4613      	mov	r3, r2
 8013150:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	2200      	movs	r2, #0
 8013156:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f7ff ff58 	bl	801300e <get_ldnumber>
 801315e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013162:	2b00      	cmp	r3, #0
 8013164:	da01      	bge.n	801316a <find_volume+0x26>
 8013166:	230b      	movs	r3, #11
 8013168:	e22d      	b.n	80135c6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801316a:	4aa1      	ldr	r2, [pc, #644]	@ (80133f0 <find_volume+0x2ac>)
 801316c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013172:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013176:	2b00      	cmp	r3, #0
 8013178:	d101      	bne.n	801317e <find_volume+0x3a>
 801317a:	230c      	movs	r3, #12
 801317c:	e223      	b.n	80135c6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013182:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013184:	79fb      	ldrb	r3, [r7, #7]
 8013186:	f023 0301 	bic.w	r3, r3, #1
 801318a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801318c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d01a      	beq.n	80131ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013196:	785b      	ldrb	r3, [r3, #1]
 8013198:	4618      	mov	r0, r3
 801319a:	f7fe fb6d 	bl	8011878 <disk_status>
 801319e:	4603      	mov	r3, r0
 80131a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80131a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80131a8:	f003 0301 	and.w	r3, r3, #1
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d10c      	bne.n	80131ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80131b0:	79fb      	ldrb	r3, [r7, #7]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d007      	beq.n	80131c6 <find_volume+0x82>
 80131b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80131ba:	f003 0304 	and.w	r3, r3, #4
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d001      	beq.n	80131c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80131c2:	230a      	movs	r3, #10
 80131c4:	e1ff      	b.n	80135c6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80131c6:	2300      	movs	r3, #0
 80131c8:	e1fd      	b.n	80135c6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80131ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131cc:	2200      	movs	r2, #0
 80131ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80131d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131d2:	b2da      	uxtb	r2, r3
 80131d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80131d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131da:	785b      	ldrb	r3, [r3, #1]
 80131dc:	4618      	mov	r0, r3
 80131de:	f7fe fb65 	bl	80118ac <disk_initialize>
 80131e2:	4603      	mov	r3, r0
 80131e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80131e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80131ec:	f003 0301 	and.w	r3, r3, #1
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d001      	beq.n	80131f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80131f4:	2303      	movs	r3, #3
 80131f6:	e1e6      	b.n	80135c6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80131f8:	79fb      	ldrb	r3, [r7, #7]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d007      	beq.n	801320e <find_volume+0xca>
 80131fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013202:	f003 0304 	and.w	r3, r3, #4
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801320a:	230a      	movs	r3, #10
 801320c:	e1db      	b.n	80135c6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013212:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013214:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013216:	f7ff ff3f 	bl	8013098 <check_fs>
 801321a:	4603      	mov	r3, r0
 801321c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013220:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013224:	2b02      	cmp	r3, #2
 8013226:	d149      	bne.n	80132bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013228:	2300      	movs	r3, #0
 801322a:	643b      	str	r3, [r7, #64]	@ 0x40
 801322c:	e01e      	b.n	801326c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013230:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013236:	011b      	lsls	r3, r3, #4
 8013238:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801323c:	4413      	add	r3, r2
 801323e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013242:	3304      	adds	r3, #4
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d006      	beq.n	8013258 <find_volume+0x114>
 801324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324c:	3308      	adds	r3, #8
 801324e:	4618      	mov	r0, r3
 8013250:	f7fe fbad 	bl	80119ae <ld_dword>
 8013254:	4602      	mov	r2, r0
 8013256:	e000      	b.n	801325a <find_volume+0x116>
 8013258:	2200      	movs	r2, #0
 801325a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	3358      	adds	r3, #88	@ 0x58
 8013260:	443b      	add	r3, r7
 8013262:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013268:	3301      	adds	r3, #1
 801326a:	643b      	str	r3, [r7, #64]	@ 0x40
 801326c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801326e:	2b03      	cmp	r3, #3
 8013270:	d9dd      	bls.n	801322e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013272:	2300      	movs	r3, #0
 8013274:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <find_volume+0x13e>
 801327c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801327e:	3b01      	subs	r3, #1
 8013280:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	3358      	adds	r3, #88	@ 0x58
 8013288:	443b      	add	r3, r7
 801328a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801328e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013292:	2b00      	cmp	r3, #0
 8013294:	d005      	beq.n	80132a2 <find_volume+0x15e>
 8013296:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013298:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801329a:	f7ff fefd 	bl	8013098 <check_fs>
 801329e:	4603      	mov	r3, r0
 80132a0:	e000      	b.n	80132a4 <find_volume+0x160>
 80132a2:	2303      	movs	r3, #3
 80132a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80132a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d905      	bls.n	80132bc <find_volume+0x178>
 80132b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132b2:	3301      	adds	r3, #1
 80132b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80132b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d9e2      	bls.n	8013282 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80132bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132c0:	2b04      	cmp	r3, #4
 80132c2:	d101      	bne.n	80132c8 <find_volume+0x184>
 80132c4:	2301      	movs	r3, #1
 80132c6:	e17e      	b.n	80135c6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80132c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d901      	bls.n	80132d4 <find_volume+0x190>
 80132d0:	230d      	movs	r3, #13
 80132d2:	e178      	b.n	80135c6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80132d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132d6:	3334      	adds	r3, #52	@ 0x34
 80132d8:	330b      	adds	r3, #11
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fe fb4e 	bl	801197c <ld_word>
 80132e0:	4603      	mov	r3, r0
 80132e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80132e6:	d001      	beq.n	80132ec <find_volume+0x1a8>
 80132e8:	230d      	movs	r3, #13
 80132ea:	e16c      	b.n	80135c6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80132ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ee:	3334      	adds	r3, #52	@ 0x34
 80132f0:	3316      	adds	r3, #22
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fe fb42 	bl	801197c <ld_word>
 80132f8:	4603      	mov	r3, r0
 80132fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80132fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d106      	bne.n	8013310 <find_volume+0x1cc>
 8013302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013304:	3334      	adds	r3, #52	@ 0x34
 8013306:	3324      	adds	r3, #36	@ 0x24
 8013308:	4618      	mov	r0, r3
 801330a:	f7fe fb50 	bl	80119ae <ld_dword>
 801330e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013312:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013314:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013318:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801331e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013322:	789b      	ldrb	r3, [r3, #2]
 8013324:	2b01      	cmp	r3, #1
 8013326:	d005      	beq.n	8013334 <find_volume+0x1f0>
 8013328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801332a:	789b      	ldrb	r3, [r3, #2]
 801332c:	2b02      	cmp	r3, #2
 801332e:	d001      	beq.n	8013334 <find_volume+0x1f0>
 8013330:	230d      	movs	r3, #13
 8013332:	e148      	b.n	80135c6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013336:	789b      	ldrb	r3, [r3, #2]
 8013338:	461a      	mov	r2, r3
 801333a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801333c:	fb02 f303 	mul.w	r3, r2, r3
 8013340:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013348:	461a      	mov	r2, r3
 801334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801334c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013350:	895b      	ldrh	r3, [r3, #10]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d008      	beq.n	8013368 <find_volume+0x224>
 8013356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013358:	895b      	ldrh	r3, [r3, #10]
 801335a:	461a      	mov	r2, r3
 801335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801335e:	895b      	ldrh	r3, [r3, #10]
 8013360:	3b01      	subs	r3, #1
 8013362:	4013      	ands	r3, r2
 8013364:	2b00      	cmp	r3, #0
 8013366:	d001      	beq.n	801336c <find_volume+0x228>
 8013368:	230d      	movs	r3, #13
 801336a:	e12c      	b.n	80135c6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336e:	3334      	adds	r3, #52	@ 0x34
 8013370:	3311      	adds	r3, #17
 8013372:	4618      	mov	r0, r3
 8013374:	f7fe fb02 	bl	801197c <ld_word>
 8013378:	4603      	mov	r3, r0
 801337a:	461a      	mov	r2, r3
 801337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801337e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013382:	891b      	ldrh	r3, [r3, #8]
 8013384:	f003 030f 	and.w	r3, r3, #15
 8013388:	b29b      	uxth	r3, r3
 801338a:	2b00      	cmp	r3, #0
 801338c:	d001      	beq.n	8013392 <find_volume+0x24e>
 801338e:	230d      	movs	r3, #13
 8013390:	e119      	b.n	80135c6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013394:	3334      	adds	r3, #52	@ 0x34
 8013396:	3313      	adds	r3, #19
 8013398:	4618      	mov	r0, r3
 801339a:	f7fe faef 	bl	801197c <ld_word>
 801339e:	4603      	mov	r3, r0
 80133a0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80133a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d106      	bne.n	80133b6 <find_volume+0x272>
 80133a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133aa:	3334      	adds	r3, #52	@ 0x34
 80133ac:	3320      	adds	r3, #32
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7fe fafd 	bl	80119ae <ld_dword>
 80133b4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80133b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b8:	3334      	adds	r3, #52	@ 0x34
 80133ba:	330e      	adds	r3, #14
 80133bc:	4618      	mov	r0, r3
 80133be:	f7fe fadd 	bl	801197c <ld_word>
 80133c2:	4603      	mov	r3, r0
 80133c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80133c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d101      	bne.n	80133d0 <find_volume+0x28c>
 80133cc:	230d      	movs	r3, #13
 80133ce:	e0fa      	b.n	80135c6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80133d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80133d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133d4:	4413      	add	r3, r2
 80133d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80133d8:	8912      	ldrh	r2, [r2, #8]
 80133da:	0912      	lsrs	r2, r2, #4
 80133dc:	b292      	uxth	r2, r2
 80133de:	4413      	add	r3, r2
 80133e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80133e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80133e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d204      	bcs.n	80133f4 <find_volume+0x2b0>
 80133ea:	230d      	movs	r3, #13
 80133ec:	e0eb      	b.n	80135c6 <find_volume+0x482>
 80133ee:	bf00      	nop
 80133f0:	20000cb0 	.word	0x20000cb0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80133f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80133f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f8:	1ad3      	subs	r3, r2, r3
 80133fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80133fc:	8952      	ldrh	r2, [r2, #10]
 80133fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8013402:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013406:	2b00      	cmp	r3, #0
 8013408:	d101      	bne.n	801340e <find_volume+0x2ca>
 801340a:	230d      	movs	r3, #13
 801340c:	e0db      	b.n	80135c6 <find_volume+0x482>
		fmt = FS_FAT32;
 801340e:	2303      	movs	r3, #3
 8013410:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013416:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801341a:	4293      	cmp	r3, r2
 801341c:	d802      	bhi.n	8013424 <find_volume+0x2e0>
 801341e:	2302      	movs	r3, #2
 8013420:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013426:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801342a:	4293      	cmp	r3, r2
 801342c:	d802      	bhi.n	8013434 <find_volume+0x2f0>
 801342e:	2301      	movs	r3, #1
 8013430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013436:	1c9a      	adds	r2, r3, #2
 8013438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013440:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013442:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013446:	441a      	add	r2, r3
 8013448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801344a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801344c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013450:	441a      	add	r2, r3
 8013452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013454:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8013456:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801345a:	2b03      	cmp	r3, #3
 801345c:	d11e      	bne.n	801349c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013460:	3334      	adds	r3, #52	@ 0x34
 8013462:	332a      	adds	r3, #42	@ 0x2a
 8013464:	4618      	mov	r0, r3
 8013466:	f7fe fa89 	bl	801197c <ld_word>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d001      	beq.n	8013474 <find_volume+0x330>
 8013470:	230d      	movs	r3, #13
 8013472:	e0a8      	b.n	80135c6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013476:	891b      	ldrh	r3, [r3, #8]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d001      	beq.n	8013480 <find_volume+0x33c>
 801347c:	230d      	movs	r3, #13
 801347e:	e0a2      	b.n	80135c6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013482:	3334      	adds	r3, #52	@ 0x34
 8013484:	332c      	adds	r3, #44	@ 0x2c
 8013486:	4618      	mov	r0, r3
 8013488:	f7fe fa91 	bl	80119ae <ld_dword>
 801348c:	4602      	mov	r2, r0
 801348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013490:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013494:	699b      	ldr	r3, [r3, #24]
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	647b      	str	r3, [r7, #68]	@ 0x44
 801349a:	e01f      	b.n	80134dc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801349c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349e:	891b      	ldrh	r3, [r3, #8]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d101      	bne.n	80134a8 <find_volume+0x364>
 80134a4:	230d      	movs	r3, #13
 80134a6:	e08e      	b.n	80135c6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80134a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80134ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134ae:	441a      	add	r2, r3
 80134b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80134b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80134b8:	2b02      	cmp	r3, #2
 80134ba:	d103      	bne.n	80134c4 <find_volume+0x380>
 80134bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134be:	699b      	ldr	r3, [r3, #24]
 80134c0:	005b      	lsls	r3, r3, #1
 80134c2:	e00a      	b.n	80134da <find_volume+0x396>
 80134c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c6:	699a      	ldr	r2, [r3, #24]
 80134c8:	4613      	mov	r3, r2
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	4413      	add	r3, r2
 80134ce:	085a      	lsrs	r2, r3, #1
 80134d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d2:	699b      	ldr	r3, [r3, #24]
 80134d4:	f003 0301 	and.w	r3, r3, #1
 80134d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80134da:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80134dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134de:	69da      	ldr	r2, [r3, #28]
 80134e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134e2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80134e6:	0a5b      	lsrs	r3, r3, #9
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d201      	bcs.n	80134f0 <find_volume+0x3ac>
 80134ec:	230d      	movs	r3, #13
 80134ee:	e06a      	b.n	80135c6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80134f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f2:	f04f 32ff 	mov.w	r2, #4294967295
 80134f6:	615a      	str	r2, [r3, #20]
 80134f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134fa:	695a      	ldr	r2, [r3, #20]
 80134fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134fe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013502:	2280      	movs	r2, #128	@ 0x80
 8013504:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013506:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801350a:	2b03      	cmp	r3, #3
 801350c:	d149      	bne.n	80135a2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013510:	3334      	adds	r3, #52	@ 0x34
 8013512:	3330      	adds	r3, #48	@ 0x30
 8013514:	4618      	mov	r0, r3
 8013516:	f7fe fa31 	bl	801197c <ld_word>
 801351a:	4603      	mov	r3, r0
 801351c:	2b01      	cmp	r3, #1
 801351e:	d140      	bne.n	80135a2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013522:	3301      	adds	r3, #1
 8013524:	4619      	mov	r1, r3
 8013526:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013528:	f7fe fc3a 	bl	8011da0 <move_window>
 801352c:	4603      	mov	r3, r0
 801352e:	2b00      	cmp	r3, #0
 8013530:	d137      	bne.n	80135a2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013534:	2200      	movs	r2, #0
 8013536:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801353a:	3334      	adds	r3, #52	@ 0x34
 801353c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013540:	4618      	mov	r0, r3
 8013542:	f7fe fa1b 	bl	801197c <ld_word>
 8013546:	4603      	mov	r3, r0
 8013548:	461a      	mov	r2, r3
 801354a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801354e:	429a      	cmp	r2, r3
 8013550:	d127      	bne.n	80135a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013554:	3334      	adds	r3, #52	@ 0x34
 8013556:	4618      	mov	r0, r3
 8013558:	f7fe fa29 	bl	80119ae <ld_dword>
 801355c:	4603      	mov	r3, r0
 801355e:	4a1c      	ldr	r2, [pc, #112]	@ (80135d0 <find_volume+0x48c>)
 8013560:	4293      	cmp	r3, r2
 8013562:	d11e      	bne.n	80135a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013566:	3334      	adds	r3, #52	@ 0x34
 8013568:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801356c:	4618      	mov	r0, r3
 801356e:	f7fe fa1e 	bl	80119ae <ld_dword>
 8013572:	4603      	mov	r3, r0
 8013574:	4a17      	ldr	r2, [pc, #92]	@ (80135d4 <find_volume+0x490>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d113      	bne.n	80135a2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801357c:	3334      	adds	r3, #52	@ 0x34
 801357e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013582:	4618      	mov	r0, r3
 8013584:	f7fe fa13 	bl	80119ae <ld_dword>
 8013588:	4602      	mov	r2, r0
 801358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801358c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013590:	3334      	adds	r3, #52	@ 0x34
 8013592:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013596:	4618      	mov	r0, r3
 8013598:	f7fe fa09 	bl	80119ae <ld_dword>
 801359c:	4602      	mov	r2, r0
 801359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80135a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80135a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80135aa:	4b0b      	ldr	r3, [pc, #44]	@ (80135d8 <find_volume+0x494>)
 80135ac:	881b      	ldrh	r3, [r3, #0]
 80135ae:	3301      	adds	r3, #1
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	4b09      	ldr	r3, [pc, #36]	@ (80135d8 <find_volume+0x494>)
 80135b4:	801a      	strh	r2, [r3, #0]
 80135b6:	4b08      	ldr	r3, [pc, #32]	@ (80135d8 <find_volume+0x494>)
 80135b8:	881a      	ldrh	r2, [r3, #0]
 80135ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80135be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80135c0:	f7fe fb86 	bl	8011cd0 <clear_lock>
#endif
	return FR_OK;
 80135c4:	2300      	movs	r3, #0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3758      	adds	r7, #88	@ 0x58
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	41615252 	.word	0x41615252
 80135d4:	61417272 	.word	0x61417272
 80135d8:	20000cb4 	.word	0x20000cb4

080135dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80135e6:	2309      	movs	r3, #9
 80135e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d01c      	beq.n	801362a <validate+0x4e>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d018      	beq.n	801362a <validate+0x4e>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d013      	beq.n	801362a <validate+0x4e>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	889a      	ldrh	r2, [r3, #4]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	88db      	ldrh	r3, [r3, #6]
 801360c:	429a      	cmp	r2, r3
 801360e:	d10c      	bne.n	801362a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	785b      	ldrb	r3, [r3, #1]
 8013616:	4618      	mov	r0, r3
 8013618:	f7fe f92e 	bl	8011878 <disk_status>
 801361c:	4603      	mov	r3, r0
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d101      	bne.n	801362a <validate+0x4e>
			res = FR_OK;
 8013626:	2300      	movs	r3, #0
 8013628:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801362a:	7bfb      	ldrb	r3, [r7, #15]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <validate+0x5a>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	e000      	b.n	8013638 <validate+0x5c>
 8013636:	2300      	movs	r3, #0
 8013638:	683a      	ldr	r2, [r7, #0]
 801363a:	6013      	str	r3, [r2, #0]
	return res;
 801363c:	7bfb      	ldrb	r3, [r7, #15]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
	...

08013648 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b088      	sub	sp, #32
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	4613      	mov	r3, r2
 8013654:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801365a:	f107 0310 	add.w	r3, r7, #16
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fcd5 	bl	801300e <get_ldnumber>
 8013664:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	2b00      	cmp	r3, #0
 801366a:	da01      	bge.n	8013670 <f_mount+0x28>
 801366c:	230b      	movs	r3, #11
 801366e:	e02b      	b.n	80136c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013670:	4a17      	ldr	r2, [pc, #92]	@ (80136d0 <f_mount+0x88>)
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013678:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d005      	beq.n	801368c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013680:	69b8      	ldr	r0, [r7, #24]
 8013682:	f7fe fb25 	bl	8011cd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013686:	69bb      	ldr	r3, [r7, #24]
 8013688:	2200      	movs	r2, #0
 801368a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2200      	movs	r2, #0
 8013696:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013698:	68fa      	ldr	r2, [r7, #12]
 801369a:	490d      	ldr	r1, [pc, #52]	@ (80136d0 <f_mount+0x88>)
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d002      	beq.n	80136ae <f_mount+0x66>
 80136a8:	79fb      	ldrb	r3, [r7, #7]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d001      	beq.n	80136b2 <f_mount+0x6a>
 80136ae:	2300      	movs	r3, #0
 80136b0:	e00a      	b.n	80136c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80136b2:	f107 010c 	add.w	r1, r7, #12
 80136b6:	f107 0308 	add.w	r3, r7, #8
 80136ba:	2200      	movs	r2, #0
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff fd41 	bl	8013144 <find_volume>
 80136c2:	4603      	mov	r3, r0
 80136c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80136c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3720      	adds	r7, #32
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	20000cb0 	.word	0x20000cb0

080136d4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <f_opendir+0x14>
 80136e4:	2309      	movs	r3, #9
 80136e6:	e074      	b.n	80137d2 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80136ec:	f107 0108 	add.w	r1, r7, #8
 80136f0:	463b      	mov	r3, r7
 80136f2:	2200      	movs	r2, #0
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7ff fd25 	bl	8013144 <find_volume>
 80136fa:	4603      	mov	r3, r0
 80136fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136fe:	7dfb      	ldrb	r3, [r7, #23]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d15f      	bne.n	80137c4 <f_opendir+0xf0>
		obj->fs = fs;
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 801370a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801370e:	f000 faaf 	bl	8013c70 <ff_memalloc>
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d101      	bne.n	801371e <f_opendir+0x4a>
 801371a:	2311      	movs	r3, #17
 801371c:	e059      	b.n	80137d2 <f_opendir+0xfe>
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	4619      	mov	r1, r3
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7ff fbff 	bl	8012f2c <follow_path>
 801372e:	4603      	mov	r3, r0
 8013730:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013732:	7dfb      	ldrb	r3, [r7, #23]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d13d      	bne.n	80137b4 <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801373e:	b25b      	sxtb	r3, r3
 8013740:	2b00      	cmp	r3, #0
 8013742:	db12      	blt.n	801376a <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	799b      	ldrb	r3, [r3, #6]
 8013748:	f003 0310 	and.w	r3, r3, #16
 801374c:	2b00      	cmp	r3, #0
 801374e:	d00a      	beq.n	8013766 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013750:	68ba      	ldr	r2, [r7, #8]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6a1b      	ldr	r3, [r3, #32]
 8013756:	4619      	mov	r1, r3
 8013758:	4610      	mov	r0, r2
 801375a:	f7fe fed6 	bl	801250a <ld_clust>
 801375e:	4602      	mov	r2, r0
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	609a      	str	r2, [r3, #8]
 8013764:	e001      	b.n	801376a <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013766:	2305      	movs	r3, #5
 8013768:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801376a:	7dfb      	ldrb	r3, [r7, #23]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d121      	bne.n	80137b4 <f_opendir+0xe0>
				obj->id = fs->id;
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	88da      	ldrh	r2, [r3, #6]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013778:	2100      	movs	r1, #0
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f7fe fd85 	bl	801228a <dir_sdi>
 8013780:	4603      	mov	r3, r0
 8013782:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013784:	7dfb      	ldrb	r3, [r7, #23]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d114      	bne.n	80137b4 <f_opendir+0xe0>
					if (obj->sclust) {
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	689b      	ldr	r3, [r3, #8]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00d      	beq.n	80137ae <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013792:	2100      	movs	r1, #0
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7fe f9d1 	bl	8011b3c <inc_lock>
 801379a:	4602      	mov	r2, r0
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	691b      	ldr	r3, [r3, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d105      	bne.n	80137b4 <f_opendir+0xe0>
 80137a8:	2312      	movs	r3, #18
 80137aa:	75fb      	strb	r3, [r7, #23]
 80137ac:	e002      	b.n	80137b4 <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	2200      	movs	r2, #0
 80137b2:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 80137b4:	68f8      	ldr	r0, [r7, #12]
 80137b6:	f000 fa67 	bl	8013c88 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80137ba:	7dfb      	ldrb	r3, [r7, #23]
 80137bc:	2b04      	cmp	r3, #4
 80137be:	d101      	bne.n	80137c4 <f_opendir+0xf0>
 80137c0:	2305      	movs	r3, #5
 80137c2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80137c4:	7dfb      	ldrb	r3, [r7, #23]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d002      	beq.n	80137d0 <f_opendir+0xfc>
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	2200      	movs	r2, #0
 80137ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3718      	adds	r7, #24
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b084      	sub	sp, #16
 80137de:	af00      	add	r7, sp, #0
 80137e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f107 0208 	add.w	r2, r7, #8
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff fef6 	bl	80135dc <validate>
 80137f0:	4603      	mov	r3, r0
 80137f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80137f4:	7bfb      	ldrb	r3, [r7, #15]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d110      	bne.n	801381c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d006      	beq.n	8013810 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	4618      	mov	r0, r3
 8013808:	f7fe fa26 	bl	8011c58 <dec_lock>
 801380c:	4603      	mov	r3, r0
 801380e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013810:	7bfb      	ldrb	r3, [r7, #15]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d102      	bne.n	801381c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2200      	movs	r2, #0
 801381a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801381c:	7bfb      	ldrb	r3, [r7, #15]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3710      	adds	r7, #16
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}

08013826 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013826:	b580      	push	{r7, lr}
 8013828:	b086      	sub	sp, #24
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
 801382e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f107 020c 	add.w	r2, r7, #12
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f7ff fecf 	bl	80135dc <validate>
 801383e:	4603      	mov	r3, r0
 8013840:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013842:	7dfb      	ldrb	r3, [r7, #23]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d136      	bne.n	80138b6 <f_readdir+0x90>
		if (!fno) {
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d106      	bne.n	801385c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801384e:	2100      	movs	r1, #0
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7fe fd1a 	bl	801228a <dir_sdi>
 8013856:	4603      	mov	r3, r0
 8013858:	75fb      	strb	r3, [r7, #23]
 801385a:	e02c      	b.n	80138b6 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 801385c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013860:	f000 fa06 	bl	8013c70 <ff_memalloc>
 8013864:	6138      	str	r0, [r7, #16]
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d101      	bne.n	8013870 <f_readdir+0x4a>
 801386c:	2311      	movs	r3, #17
 801386e:	e023      	b.n	80138b8 <f_readdir+0x92>
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	693a      	ldr	r2, [r7, #16]
 8013874:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8013876:	2100      	movs	r1, #0
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7fe ff5a 	bl	8012732 <dir_read>
 801387e:	4603      	mov	r3, r0
 8013880:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013882:	7dfb      	ldrb	r3, [r7, #23]
 8013884:	2b04      	cmp	r3, #4
 8013886:	d101      	bne.n	801388c <f_readdir+0x66>
 8013888:	2300      	movs	r3, #0
 801388a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 801388c:	7dfb      	ldrb	r3, [r7, #23]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d10e      	bne.n	80138b0 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013892:	6839      	ldr	r1, [r7, #0]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff f8b3 	bl	8012a00 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801389a:	2100      	movs	r1, #0
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f7fe fd6f 	bl	8012380 <dir_next>
 80138a2:	4603      	mov	r3, r0
 80138a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80138a6:	7dfb      	ldrb	r3, [r7, #23]
 80138a8:	2b04      	cmp	r3, #4
 80138aa:	d101      	bne.n	80138b0 <f_readdir+0x8a>
 80138ac:	2300      	movs	r3, #0
 80138ae:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 80138b0:	6938      	ldr	r0, [r7, #16]
 80138b2:	f000 f9e9 	bl	8013c88 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 80138b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3718      	adds	r7, #24
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b092      	sub	sp, #72	@ 0x48
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80138cc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80138d0:	f107 030c 	add.w	r3, r7, #12
 80138d4:	2200      	movs	r2, #0
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7ff fc34 	bl	8013144 <find_volume>
 80138dc:	4603      	mov	r3, r0
 80138de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80138e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f040 8099 	bne.w	8013a1e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80138ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80138f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f4:	695a      	ldr	r2, [r3, #20]
 80138f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f8:	699b      	ldr	r3, [r3, #24]
 80138fa:	3b02      	subs	r3, #2
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d804      	bhi.n	801390a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013902:	695a      	ldr	r2, [r3, #20]
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	601a      	str	r2, [r3, #0]
 8013908:	e089      	b.n	8013a1e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	2b01      	cmp	r3, #1
 8013914:	d128      	bne.n	8013968 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8013916:	2302      	movs	r3, #2
 8013918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801391c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801391e:	f107 0314 	add.w	r3, r7, #20
 8013922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013924:	4618      	mov	r0, r3
 8013926:	f7fe fa87 	bl	8011e38 <get_fat>
 801392a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013932:	d103      	bne.n	801393c <f_getfree+0x7c>
 8013934:	2301      	movs	r3, #1
 8013936:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801393a:	e063      	b.n	8013a04 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801393c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801393e:	2b01      	cmp	r3, #1
 8013940:	d103      	bne.n	801394a <f_getfree+0x8a>
 8013942:	2302      	movs	r3, #2
 8013944:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013948:	e05c      	b.n	8013a04 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394c:	2b00      	cmp	r3, #0
 801394e:	d102      	bne.n	8013956 <f_getfree+0x96>
 8013950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013952:	3301      	adds	r3, #1
 8013954:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8013956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013958:	3301      	adds	r3, #1
 801395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801395e:	699b      	ldr	r3, [r3, #24]
 8013960:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013962:	429a      	cmp	r2, r3
 8013964:	d3db      	bcc.n	801391e <f_getfree+0x5e>
 8013966:	e04d      	b.n	8013a04 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8013968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801396a:	699b      	ldr	r3, [r3, #24]
 801396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013972:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8013974:	2300      	movs	r3, #0
 8013976:	637b      	str	r3, [r7, #52]	@ 0x34
 8013978:	2300      	movs	r3, #0
 801397a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 801397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801397e:	2b00      	cmp	r3, #0
 8013980:	d113      	bne.n	80139aa <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013986:	1c5a      	adds	r2, r3, #1
 8013988:	63ba      	str	r2, [r7, #56]	@ 0x38
 801398a:	4619      	mov	r1, r3
 801398c:	f7fe fa08 	bl	8011da0 <move_window>
 8013990:	4603      	mov	r3, r0
 8013992:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8013996:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801399a:	2b00      	cmp	r3, #0
 801399c:	d131      	bne.n	8013a02 <f_getfree+0x142>
							p = fs->win;
 801399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a0:	3334      	adds	r3, #52	@ 0x34
 80139a2:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80139a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80139a8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80139aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	2b02      	cmp	r3, #2
 80139b0:	d10f      	bne.n	80139d2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80139b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139b4:	f7fd ffe2 	bl	801197c <ld_word>
 80139b8:	4603      	mov	r3, r0
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d102      	bne.n	80139c4 <f_getfree+0x104>
 80139be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139c0:	3301      	adds	r3, #1
 80139c2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80139c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c6:	3302      	adds	r3, #2
 80139c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80139ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139cc:	3b02      	subs	r3, #2
 80139ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80139d0:	e010      	b.n	80139f4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80139d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139d4:	f7fd ffeb 	bl	80119ae <ld_dword>
 80139d8:	4603      	mov	r3, r0
 80139da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d102      	bne.n	80139e8 <f_getfree+0x128>
 80139e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139e4:	3301      	adds	r3, #1
 80139e6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80139e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ea:	3304      	adds	r3, #4
 80139ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80139ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139f0:	3b04      	subs	r3, #4
 80139f2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80139f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139f6:	3b01      	subs	r3, #1
 80139f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d1bd      	bne.n	801397c <f_getfree+0xbc>
 8013a00:	e000      	b.n	8013a04 <f_getfree+0x144>
							if (res != FR_OK) break;
 8013a02:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013a08:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8013a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013a0e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8013a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a12:	791a      	ldrb	r2, [r3, #4]
 8013a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a16:	f042 0201 	orr.w	r2, r2, #1
 8013a1a:	b2d2      	uxtb	r2, r2
 8013a1c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013a1e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3748      	adds	r7, #72	@ 0x48
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
	...

08013a2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b087      	sub	sp, #28
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	4613      	mov	r3, r2
 8013a38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a42:	4b1f      	ldr	r3, [pc, #124]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a44:	7a5b      	ldrb	r3, [r3, #9]
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d131      	bne.n	8013ab0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a4e:	7a5b      	ldrb	r3, [r3, #9]
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	461a      	mov	r2, r3
 8013a54:	4b1a      	ldr	r3, [pc, #104]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a56:	2100      	movs	r1, #0
 8013a58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a5a:	4b19      	ldr	r3, [pc, #100]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a5c:	7a5b      	ldrb	r3, [r3, #9]
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	4a17      	ldr	r2, [pc, #92]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	4413      	add	r3, r2
 8013a66:	68fa      	ldr	r2, [r7, #12]
 8013a68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a6a:	4b15      	ldr	r3, [pc, #84]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a6c:	7a5b      	ldrb	r3, [r3, #9]
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	461a      	mov	r2, r3
 8013a72:	4b13      	ldr	r3, [pc, #76]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a74:	4413      	add	r3, r2
 8013a76:	79fa      	ldrb	r2, [r7, #7]
 8013a78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013a7a:	4b11      	ldr	r3, [pc, #68]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a7c:	7a5b      	ldrb	r3, [r3, #9]
 8013a7e:	b2db      	uxtb	r3, r3
 8013a80:	1c5a      	adds	r2, r3, #1
 8013a82:	b2d1      	uxtb	r1, r2
 8013a84:	4a0e      	ldr	r2, [pc, #56]	@ (8013ac0 <FATFS_LinkDriverEx+0x94>)
 8013a86:	7251      	strb	r1, [r2, #9]
 8013a88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013a8a:	7dbb      	ldrb	r3, [r7, #22]
 8013a8c:	3330      	adds	r3, #48	@ 0x30
 8013a8e:	b2da      	uxtb	r2, r3
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	3301      	adds	r3, #1
 8013a98:	223a      	movs	r2, #58	@ 0x3a
 8013a9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	3302      	adds	r3, #2
 8013aa0:	222f      	movs	r2, #47	@ 0x2f
 8013aa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	3303      	adds	r3, #3
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013aac:	2300      	movs	r3, #0
 8013aae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	371c      	adds	r7, #28
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr
 8013abe:	bf00      	nop
 8013ac0:	20000cd8 	.word	0x20000cd8

08013ac4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013ace:	2200      	movs	r2, #0
 8013ad0:	6839      	ldr	r1, [r7, #0]
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff ffaa 	bl	8013a2c <FATFS_LinkDriverEx>
 8013ad8:	4603      	mov	r3, r0
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3708      	adds	r7, #8
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
	...

08013ae4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b085      	sub	sp, #20
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	4603      	mov	r3, r0
 8013aec:	6039      	str	r1, [r7, #0]
 8013aee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013af0:	88fb      	ldrh	r3, [r7, #6]
 8013af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8013af4:	d802      	bhi.n	8013afc <ff_convert+0x18>
		c = chr;
 8013af6:	88fb      	ldrh	r3, [r7, #6]
 8013af8:	81fb      	strh	r3, [r7, #14]
 8013afa:	e025      	b.n	8013b48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00b      	beq.n	8013b1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013b02:	88fb      	ldrh	r3, [r7, #6]
 8013b04:	2bff      	cmp	r3, #255	@ 0xff
 8013b06:	d805      	bhi.n	8013b14 <ff_convert+0x30>
 8013b08:	88fb      	ldrh	r3, [r7, #6]
 8013b0a:	3b80      	subs	r3, #128	@ 0x80
 8013b0c:	4a12      	ldr	r2, [pc, #72]	@ (8013b58 <ff_convert+0x74>)
 8013b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b12:	e000      	b.n	8013b16 <ff_convert+0x32>
 8013b14:	2300      	movs	r3, #0
 8013b16:	81fb      	strh	r3, [r7, #14]
 8013b18:	e016      	b.n	8013b48 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	81fb      	strh	r3, [r7, #14]
 8013b1e:	e009      	b.n	8013b34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013b20:	89fb      	ldrh	r3, [r7, #14]
 8013b22:	4a0d      	ldr	r2, [pc, #52]	@ (8013b58 <ff_convert+0x74>)
 8013b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b28:	88fa      	ldrh	r2, [r7, #6]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d006      	beq.n	8013b3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8013b2e:	89fb      	ldrh	r3, [r7, #14]
 8013b30:	3301      	adds	r3, #1
 8013b32:	81fb      	strh	r3, [r7, #14]
 8013b34:	89fb      	ldrh	r3, [r7, #14]
 8013b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8013b38:	d9f2      	bls.n	8013b20 <ff_convert+0x3c>
 8013b3a:	e000      	b.n	8013b3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8013b3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8013b3e:	89fb      	ldrh	r3, [r7, #14]
 8013b40:	3380      	adds	r3, #128	@ 0x80
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	b2db      	uxtb	r3, r3
 8013b46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8013b48:	89fb      	ldrh	r3, [r7, #14]
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3714      	adds	r7, #20
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr
 8013b56:	bf00      	nop
 8013b58:	0801686c 	.word	0x0801686c

08013b5c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b087      	sub	sp, #28
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	4603      	mov	r3, r0
 8013b64:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013b66:	88fb      	ldrh	r3, [r7, #6]
 8013b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b6c:	d201      	bcs.n	8013b72 <ff_wtoupper+0x16>
 8013b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8013c68 <ff_wtoupper+0x10c>)
 8013b70:	e000      	b.n	8013b74 <ff_wtoupper+0x18>
 8013b72:	4b3e      	ldr	r3, [pc, #248]	@ (8013c6c <ff_wtoupper+0x110>)
 8013b74:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	1c9a      	adds	r2, r3, #2
 8013b7a:	617a      	str	r2, [r7, #20]
 8013b7c:	881b      	ldrh	r3, [r3, #0]
 8013b7e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013b80:	8a7b      	ldrh	r3, [r7, #18]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d068      	beq.n	8013c58 <ff_wtoupper+0xfc>
 8013b86:	88fa      	ldrh	r2, [r7, #6]
 8013b88:	8a7b      	ldrh	r3, [r7, #18]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d364      	bcc.n	8013c58 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	1c9a      	adds	r2, r3, #2
 8013b92:	617a      	str	r2, [r7, #20]
 8013b94:	881b      	ldrh	r3, [r3, #0]
 8013b96:	823b      	strh	r3, [r7, #16]
 8013b98:	8a3b      	ldrh	r3, [r7, #16]
 8013b9a:	0a1b      	lsrs	r3, r3, #8
 8013b9c:	81fb      	strh	r3, [r7, #14]
 8013b9e:	8a3b      	ldrh	r3, [r7, #16]
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8013ba4:	88fa      	ldrh	r2, [r7, #6]
 8013ba6:	8a79      	ldrh	r1, [r7, #18]
 8013ba8:	8a3b      	ldrh	r3, [r7, #16]
 8013baa:	440b      	add	r3, r1
 8013bac:	429a      	cmp	r2, r3
 8013bae:	da49      	bge.n	8013c44 <ff_wtoupper+0xe8>
			switch (cmd) {
 8013bb0:	89fb      	ldrh	r3, [r7, #14]
 8013bb2:	2b08      	cmp	r3, #8
 8013bb4:	d84f      	bhi.n	8013c56 <ff_wtoupper+0xfa>
 8013bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8013bbc <ff_wtoupper+0x60>)
 8013bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bbc:	08013be1 	.word	0x08013be1
 8013bc0:	08013bf3 	.word	0x08013bf3
 8013bc4:	08013c09 	.word	0x08013c09
 8013bc8:	08013c11 	.word	0x08013c11
 8013bcc:	08013c19 	.word	0x08013c19
 8013bd0:	08013c21 	.word	0x08013c21
 8013bd4:	08013c29 	.word	0x08013c29
 8013bd8:	08013c31 	.word	0x08013c31
 8013bdc:	08013c39 	.word	0x08013c39
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013be0:	88fa      	ldrh	r2, [r7, #6]
 8013be2:	8a7b      	ldrh	r3, [r7, #18]
 8013be4:	1ad3      	subs	r3, r2, r3
 8013be6:	005b      	lsls	r3, r3, #1
 8013be8:	697a      	ldr	r2, [r7, #20]
 8013bea:	4413      	add	r3, r2
 8013bec:	881b      	ldrh	r3, [r3, #0]
 8013bee:	80fb      	strh	r3, [r7, #6]
 8013bf0:	e027      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013bf2:	88fa      	ldrh	r2, [r7, #6]
 8013bf4:	8a7b      	ldrh	r3, [r7, #18]
 8013bf6:	1ad3      	subs	r3, r2, r3
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	f003 0301 	and.w	r3, r3, #1
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	88fa      	ldrh	r2, [r7, #6]
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	80fb      	strh	r3, [r7, #6]
 8013c06:	e01c      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8013c08:	88fb      	ldrh	r3, [r7, #6]
 8013c0a:	3b10      	subs	r3, #16
 8013c0c:	80fb      	strh	r3, [r7, #6]
 8013c0e:	e018      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013c10:	88fb      	ldrh	r3, [r7, #6]
 8013c12:	3b20      	subs	r3, #32
 8013c14:	80fb      	strh	r3, [r7, #6]
 8013c16:	e014      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013c18:	88fb      	ldrh	r3, [r7, #6]
 8013c1a:	3b30      	subs	r3, #48	@ 0x30
 8013c1c:	80fb      	strh	r3, [r7, #6]
 8013c1e:	e010      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013c20:	88fb      	ldrh	r3, [r7, #6]
 8013c22:	3b1a      	subs	r3, #26
 8013c24:	80fb      	strh	r3, [r7, #6]
 8013c26:	e00c      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8013c28:	88fb      	ldrh	r3, [r7, #6]
 8013c2a:	3308      	adds	r3, #8
 8013c2c:	80fb      	strh	r3, [r7, #6]
 8013c2e:	e008      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013c30:	88fb      	ldrh	r3, [r7, #6]
 8013c32:	3b50      	subs	r3, #80	@ 0x50
 8013c34:	80fb      	strh	r3, [r7, #6]
 8013c36:	e004      	b.n	8013c42 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013c38:	88fb      	ldrh	r3, [r7, #6]
 8013c3a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8013c3e:	80fb      	strh	r3, [r7, #6]
 8013c40:	bf00      	nop
			}
			break;
 8013c42:	e008      	b.n	8013c56 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013c44:	89fb      	ldrh	r3, [r7, #14]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d195      	bne.n	8013b76 <ff_wtoupper+0x1a>
 8013c4a:	8a3b      	ldrh	r3, [r7, #16]
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	697a      	ldr	r2, [r7, #20]
 8013c50:	4413      	add	r3, r2
 8013c52:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013c54:	e78f      	b.n	8013b76 <ff_wtoupper+0x1a>
			break;
 8013c56:	bf00      	nop
	}

	return chr;
 8013c58:	88fb      	ldrh	r3, [r7, #6]
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	371c      	adds	r7, #28
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c64:	4770      	bx	lr
 8013c66:	bf00      	nop
 8013c68:	0801696c 	.word	0x0801696c
 8013c6c:	08016b60 	.word	0x08016b60

08013c70 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f000 f811 	bl	8013ca0 <malloc>
 8013c7e:	4603      	mov	r3, r0
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	3708      	adds	r7, #8
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}

08013c88 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 f80d 	bl	8013cb0 <free>
}
 8013c96:	bf00      	nop
 8013c98:	3708      	adds	r7, #8
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
	...

08013ca0 <malloc>:
 8013ca0:	4b02      	ldr	r3, [pc, #8]	@ (8013cac <malloc+0xc>)
 8013ca2:	4601      	mov	r1, r0
 8013ca4:	6818      	ldr	r0, [r3, #0]
 8013ca6:	f000 b82d 	b.w	8013d04 <_malloc_r>
 8013caa:	bf00      	nop
 8013cac:	20000234 	.word	0x20000234

08013cb0 <free>:
 8013cb0:	4b02      	ldr	r3, [pc, #8]	@ (8013cbc <free+0xc>)
 8013cb2:	4601      	mov	r1, r0
 8013cb4:	6818      	ldr	r0, [r3, #0]
 8013cb6:	f000 bb7d 	b.w	80143b4 <_free_r>
 8013cba:	bf00      	nop
 8013cbc:	20000234 	.word	0x20000234

08013cc0 <sbrk_aligned>:
 8013cc0:	b570      	push	{r4, r5, r6, lr}
 8013cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8013d00 <sbrk_aligned+0x40>)
 8013cc4:	460c      	mov	r4, r1
 8013cc6:	6831      	ldr	r1, [r6, #0]
 8013cc8:	4605      	mov	r5, r0
 8013cca:	b911      	cbnz	r1, 8013cd2 <sbrk_aligned+0x12>
 8013ccc:	f000 fb22 	bl	8014314 <_sbrk_r>
 8013cd0:	6030      	str	r0, [r6, #0]
 8013cd2:	4621      	mov	r1, r4
 8013cd4:	4628      	mov	r0, r5
 8013cd6:	f000 fb1d 	bl	8014314 <_sbrk_r>
 8013cda:	1c43      	adds	r3, r0, #1
 8013cdc:	d103      	bne.n	8013ce6 <sbrk_aligned+0x26>
 8013cde:	f04f 34ff 	mov.w	r4, #4294967295
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	bd70      	pop	{r4, r5, r6, pc}
 8013ce6:	1cc4      	adds	r4, r0, #3
 8013ce8:	f024 0403 	bic.w	r4, r4, #3
 8013cec:	42a0      	cmp	r0, r4
 8013cee:	d0f8      	beq.n	8013ce2 <sbrk_aligned+0x22>
 8013cf0:	1a21      	subs	r1, r4, r0
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f000 fb0e 	bl	8014314 <_sbrk_r>
 8013cf8:	3001      	adds	r0, #1
 8013cfa:	d1f2      	bne.n	8013ce2 <sbrk_aligned+0x22>
 8013cfc:	e7ef      	b.n	8013cde <sbrk_aligned+0x1e>
 8013cfe:	bf00      	nop
 8013d00:	20000ce4 	.word	0x20000ce4

08013d04 <_malloc_r>:
 8013d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d08:	1ccd      	adds	r5, r1, #3
 8013d0a:	f025 0503 	bic.w	r5, r5, #3
 8013d0e:	3508      	adds	r5, #8
 8013d10:	2d0c      	cmp	r5, #12
 8013d12:	bf38      	it	cc
 8013d14:	250c      	movcc	r5, #12
 8013d16:	2d00      	cmp	r5, #0
 8013d18:	4606      	mov	r6, r0
 8013d1a:	db01      	blt.n	8013d20 <_malloc_r+0x1c>
 8013d1c:	42a9      	cmp	r1, r5
 8013d1e:	d904      	bls.n	8013d2a <_malloc_r+0x26>
 8013d20:	230c      	movs	r3, #12
 8013d22:	6033      	str	r3, [r6, #0]
 8013d24:	2000      	movs	r0, #0
 8013d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013e00 <_malloc_r+0xfc>
 8013d2e:	f000 f869 	bl	8013e04 <__malloc_lock>
 8013d32:	f8d8 3000 	ldr.w	r3, [r8]
 8013d36:	461c      	mov	r4, r3
 8013d38:	bb44      	cbnz	r4, 8013d8c <_malloc_r+0x88>
 8013d3a:	4629      	mov	r1, r5
 8013d3c:	4630      	mov	r0, r6
 8013d3e:	f7ff ffbf 	bl	8013cc0 <sbrk_aligned>
 8013d42:	1c43      	adds	r3, r0, #1
 8013d44:	4604      	mov	r4, r0
 8013d46:	d158      	bne.n	8013dfa <_malloc_r+0xf6>
 8013d48:	f8d8 4000 	ldr.w	r4, [r8]
 8013d4c:	4627      	mov	r7, r4
 8013d4e:	2f00      	cmp	r7, #0
 8013d50:	d143      	bne.n	8013dda <_malloc_r+0xd6>
 8013d52:	2c00      	cmp	r4, #0
 8013d54:	d04b      	beq.n	8013dee <_malloc_r+0xea>
 8013d56:	6823      	ldr	r3, [r4, #0]
 8013d58:	4639      	mov	r1, r7
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	eb04 0903 	add.w	r9, r4, r3
 8013d60:	f000 fad8 	bl	8014314 <_sbrk_r>
 8013d64:	4581      	cmp	r9, r0
 8013d66:	d142      	bne.n	8013dee <_malloc_r+0xea>
 8013d68:	6821      	ldr	r1, [r4, #0]
 8013d6a:	1a6d      	subs	r5, r5, r1
 8013d6c:	4629      	mov	r1, r5
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f7ff ffa6 	bl	8013cc0 <sbrk_aligned>
 8013d74:	3001      	adds	r0, #1
 8013d76:	d03a      	beq.n	8013dee <_malloc_r+0xea>
 8013d78:	6823      	ldr	r3, [r4, #0]
 8013d7a:	442b      	add	r3, r5
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8013d82:	685a      	ldr	r2, [r3, #4]
 8013d84:	bb62      	cbnz	r2, 8013de0 <_malloc_r+0xdc>
 8013d86:	f8c8 7000 	str.w	r7, [r8]
 8013d8a:	e00f      	b.n	8013dac <_malloc_r+0xa8>
 8013d8c:	6822      	ldr	r2, [r4, #0]
 8013d8e:	1b52      	subs	r2, r2, r5
 8013d90:	d420      	bmi.n	8013dd4 <_malloc_r+0xd0>
 8013d92:	2a0b      	cmp	r2, #11
 8013d94:	d917      	bls.n	8013dc6 <_malloc_r+0xc2>
 8013d96:	1961      	adds	r1, r4, r5
 8013d98:	42a3      	cmp	r3, r4
 8013d9a:	6025      	str	r5, [r4, #0]
 8013d9c:	bf18      	it	ne
 8013d9e:	6059      	strne	r1, [r3, #4]
 8013da0:	6863      	ldr	r3, [r4, #4]
 8013da2:	bf08      	it	eq
 8013da4:	f8c8 1000 	streq.w	r1, [r8]
 8013da8:	5162      	str	r2, [r4, r5]
 8013daa:	604b      	str	r3, [r1, #4]
 8013dac:	4630      	mov	r0, r6
 8013dae:	f000 f82f 	bl	8013e10 <__malloc_unlock>
 8013db2:	f104 000b 	add.w	r0, r4, #11
 8013db6:	1d23      	adds	r3, r4, #4
 8013db8:	f020 0007 	bic.w	r0, r0, #7
 8013dbc:	1ac2      	subs	r2, r0, r3
 8013dbe:	bf1c      	itt	ne
 8013dc0:	1a1b      	subne	r3, r3, r0
 8013dc2:	50a3      	strne	r3, [r4, r2]
 8013dc4:	e7af      	b.n	8013d26 <_malloc_r+0x22>
 8013dc6:	6862      	ldr	r2, [r4, #4]
 8013dc8:	42a3      	cmp	r3, r4
 8013dca:	bf0c      	ite	eq
 8013dcc:	f8c8 2000 	streq.w	r2, [r8]
 8013dd0:	605a      	strne	r2, [r3, #4]
 8013dd2:	e7eb      	b.n	8013dac <_malloc_r+0xa8>
 8013dd4:	4623      	mov	r3, r4
 8013dd6:	6864      	ldr	r4, [r4, #4]
 8013dd8:	e7ae      	b.n	8013d38 <_malloc_r+0x34>
 8013dda:	463c      	mov	r4, r7
 8013ddc:	687f      	ldr	r7, [r7, #4]
 8013dde:	e7b6      	b.n	8013d4e <_malloc_r+0x4a>
 8013de0:	461a      	mov	r2, r3
 8013de2:	685b      	ldr	r3, [r3, #4]
 8013de4:	42a3      	cmp	r3, r4
 8013de6:	d1fb      	bne.n	8013de0 <_malloc_r+0xdc>
 8013de8:	2300      	movs	r3, #0
 8013dea:	6053      	str	r3, [r2, #4]
 8013dec:	e7de      	b.n	8013dac <_malloc_r+0xa8>
 8013dee:	230c      	movs	r3, #12
 8013df0:	6033      	str	r3, [r6, #0]
 8013df2:	4630      	mov	r0, r6
 8013df4:	f000 f80c 	bl	8013e10 <__malloc_unlock>
 8013df8:	e794      	b.n	8013d24 <_malloc_r+0x20>
 8013dfa:	6005      	str	r5, [r0, #0]
 8013dfc:	e7d6      	b.n	8013dac <_malloc_r+0xa8>
 8013dfe:	bf00      	nop
 8013e00:	20000ce8 	.word	0x20000ce8

08013e04 <__malloc_lock>:
 8013e04:	4801      	ldr	r0, [pc, #4]	@ (8013e0c <__malloc_lock+0x8>)
 8013e06:	f000 bad2 	b.w	80143ae <__retarget_lock_acquire_recursive>
 8013e0a:	bf00      	nop
 8013e0c:	20000e2c 	.word	0x20000e2c

08013e10 <__malloc_unlock>:
 8013e10:	4801      	ldr	r0, [pc, #4]	@ (8013e18 <__malloc_unlock+0x8>)
 8013e12:	f000 bacd 	b.w	80143b0 <__retarget_lock_release_recursive>
 8013e16:	bf00      	nop
 8013e18:	20000e2c 	.word	0x20000e2c

08013e1c <std>:
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	b510      	push	{r4, lr}
 8013e20:	4604      	mov	r4, r0
 8013e22:	e9c0 3300 	strd	r3, r3, [r0]
 8013e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e2a:	6083      	str	r3, [r0, #8]
 8013e2c:	8181      	strh	r1, [r0, #12]
 8013e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013e30:	81c2      	strh	r2, [r0, #14]
 8013e32:	6183      	str	r3, [r0, #24]
 8013e34:	4619      	mov	r1, r3
 8013e36:	2208      	movs	r2, #8
 8013e38:	305c      	adds	r0, #92	@ 0x5c
 8013e3a:	f000 fa2f 	bl	801429c <memset>
 8013e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013e74 <std+0x58>)
 8013e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8013e42:	4b0d      	ldr	r3, [pc, #52]	@ (8013e78 <std+0x5c>)
 8013e44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013e46:	4b0d      	ldr	r3, [pc, #52]	@ (8013e7c <std+0x60>)
 8013e48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e80 <std+0x64>)
 8013e4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8013e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013e84 <std+0x68>)
 8013e50:	6224      	str	r4, [r4, #32]
 8013e52:	429c      	cmp	r4, r3
 8013e54:	d006      	beq.n	8013e64 <std+0x48>
 8013e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013e5a:	4294      	cmp	r4, r2
 8013e5c:	d002      	beq.n	8013e64 <std+0x48>
 8013e5e:	33d0      	adds	r3, #208	@ 0xd0
 8013e60:	429c      	cmp	r4, r3
 8013e62:	d105      	bne.n	8013e70 <std+0x54>
 8013e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e6c:	f000 ba9e 	b.w	80143ac <__retarget_lock_init_recursive>
 8013e70:	bd10      	pop	{r4, pc}
 8013e72:	bf00      	nop
 8013e74:	080140ed 	.word	0x080140ed
 8013e78:	0801410f 	.word	0x0801410f
 8013e7c:	08014147 	.word	0x08014147
 8013e80:	0801416b 	.word	0x0801416b
 8013e84:	20000cec 	.word	0x20000cec

08013e88 <stdio_exit_handler>:
 8013e88:	4a02      	ldr	r2, [pc, #8]	@ (8013e94 <stdio_exit_handler+0xc>)
 8013e8a:	4903      	ldr	r1, [pc, #12]	@ (8013e98 <stdio_exit_handler+0x10>)
 8013e8c:	4803      	ldr	r0, [pc, #12]	@ (8013e9c <stdio_exit_handler+0x14>)
 8013e8e:	f000 b869 	b.w	8013f64 <_fwalk_sglue>
 8013e92:	bf00      	nop
 8013e94:	20000228 	.word	0x20000228
 8013e98:	08014d9d 	.word	0x08014d9d
 8013e9c:	20000238 	.word	0x20000238

08013ea0 <cleanup_stdio>:
 8013ea0:	6841      	ldr	r1, [r0, #4]
 8013ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8013ed4 <cleanup_stdio+0x34>)
 8013ea4:	4299      	cmp	r1, r3
 8013ea6:	b510      	push	{r4, lr}
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	d001      	beq.n	8013eb0 <cleanup_stdio+0x10>
 8013eac:	f000 ff76 	bl	8014d9c <_fflush_r>
 8013eb0:	68a1      	ldr	r1, [r4, #8]
 8013eb2:	4b09      	ldr	r3, [pc, #36]	@ (8013ed8 <cleanup_stdio+0x38>)
 8013eb4:	4299      	cmp	r1, r3
 8013eb6:	d002      	beq.n	8013ebe <cleanup_stdio+0x1e>
 8013eb8:	4620      	mov	r0, r4
 8013eba:	f000 ff6f 	bl	8014d9c <_fflush_r>
 8013ebe:	68e1      	ldr	r1, [r4, #12]
 8013ec0:	4b06      	ldr	r3, [pc, #24]	@ (8013edc <cleanup_stdio+0x3c>)
 8013ec2:	4299      	cmp	r1, r3
 8013ec4:	d004      	beq.n	8013ed0 <cleanup_stdio+0x30>
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ecc:	f000 bf66 	b.w	8014d9c <_fflush_r>
 8013ed0:	bd10      	pop	{r4, pc}
 8013ed2:	bf00      	nop
 8013ed4:	20000cec 	.word	0x20000cec
 8013ed8:	20000d54 	.word	0x20000d54
 8013edc:	20000dbc 	.word	0x20000dbc

08013ee0 <global_stdio_init.part.0>:
 8013ee0:	b510      	push	{r4, lr}
 8013ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8013f10 <global_stdio_init.part.0+0x30>)
 8013ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8013f14 <global_stdio_init.part.0+0x34>)
 8013ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8013f18 <global_stdio_init.part.0+0x38>)
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	4620      	mov	r0, r4
 8013eec:	2200      	movs	r2, #0
 8013eee:	2104      	movs	r1, #4
 8013ef0:	f7ff ff94 	bl	8013e1c <std>
 8013ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013ef8:	2201      	movs	r2, #1
 8013efa:	2109      	movs	r1, #9
 8013efc:	f7ff ff8e 	bl	8013e1c <std>
 8013f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013f04:	2202      	movs	r2, #2
 8013f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f0a:	2112      	movs	r1, #18
 8013f0c:	f7ff bf86 	b.w	8013e1c <std>
 8013f10:	20000e24 	.word	0x20000e24
 8013f14:	20000cec 	.word	0x20000cec
 8013f18:	08013e89 	.word	0x08013e89

08013f1c <__sfp_lock_acquire>:
 8013f1c:	4801      	ldr	r0, [pc, #4]	@ (8013f24 <__sfp_lock_acquire+0x8>)
 8013f1e:	f000 ba46 	b.w	80143ae <__retarget_lock_acquire_recursive>
 8013f22:	bf00      	nop
 8013f24:	20000e2d 	.word	0x20000e2d

08013f28 <__sfp_lock_release>:
 8013f28:	4801      	ldr	r0, [pc, #4]	@ (8013f30 <__sfp_lock_release+0x8>)
 8013f2a:	f000 ba41 	b.w	80143b0 <__retarget_lock_release_recursive>
 8013f2e:	bf00      	nop
 8013f30:	20000e2d 	.word	0x20000e2d

08013f34 <__sinit>:
 8013f34:	b510      	push	{r4, lr}
 8013f36:	4604      	mov	r4, r0
 8013f38:	f7ff fff0 	bl	8013f1c <__sfp_lock_acquire>
 8013f3c:	6a23      	ldr	r3, [r4, #32]
 8013f3e:	b11b      	cbz	r3, 8013f48 <__sinit+0x14>
 8013f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f44:	f7ff bff0 	b.w	8013f28 <__sfp_lock_release>
 8013f48:	4b04      	ldr	r3, [pc, #16]	@ (8013f5c <__sinit+0x28>)
 8013f4a:	6223      	str	r3, [r4, #32]
 8013f4c:	4b04      	ldr	r3, [pc, #16]	@ (8013f60 <__sinit+0x2c>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d1f5      	bne.n	8013f40 <__sinit+0xc>
 8013f54:	f7ff ffc4 	bl	8013ee0 <global_stdio_init.part.0>
 8013f58:	e7f2      	b.n	8013f40 <__sinit+0xc>
 8013f5a:	bf00      	nop
 8013f5c:	08013ea1 	.word	0x08013ea1
 8013f60:	20000e24 	.word	0x20000e24

08013f64 <_fwalk_sglue>:
 8013f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f68:	4607      	mov	r7, r0
 8013f6a:	4688      	mov	r8, r1
 8013f6c:	4614      	mov	r4, r2
 8013f6e:	2600      	movs	r6, #0
 8013f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f74:	f1b9 0901 	subs.w	r9, r9, #1
 8013f78:	d505      	bpl.n	8013f86 <_fwalk_sglue+0x22>
 8013f7a:	6824      	ldr	r4, [r4, #0]
 8013f7c:	2c00      	cmp	r4, #0
 8013f7e:	d1f7      	bne.n	8013f70 <_fwalk_sglue+0xc>
 8013f80:	4630      	mov	r0, r6
 8013f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f86:	89ab      	ldrh	r3, [r5, #12]
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d907      	bls.n	8013f9c <_fwalk_sglue+0x38>
 8013f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f90:	3301      	adds	r3, #1
 8013f92:	d003      	beq.n	8013f9c <_fwalk_sglue+0x38>
 8013f94:	4629      	mov	r1, r5
 8013f96:	4638      	mov	r0, r7
 8013f98:	47c0      	blx	r8
 8013f9a:	4306      	orrs	r6, r0
 8013f9c:	3568      	adds	r5, #104	@ 0x68
 8013f9e:	e7e9      	b.n	8013f74 <_fwalk_sglue+0x10>

08013fa0 <iprintf>:
 8013fa0:	b40f      	push	{r0, r1, r2, r3}
 8013fa2:	b507      	push	{r0, r1, r2, lr}
 8013fa4:	4906      	ldr	r1, [pc, #24]	@ (8013fc0 <iprintf+0x20>)
 8013fa6:	ab04      	add	r3, sp, #16
 8013fa8:	6808      	ldr	r0, [r1, #0]
 8013faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fae:	6881      	ldr	r1, [r0, #8]
 8013fb0:	9301      	str	r3, [sp, #4]
 8013fb2:	f000 fbcb 	bl	801474c <_vfiprintf_r>
 8013fb6:	b003      	add	sp, #12
 8013fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fbc:	b004      	add	sp, #16
 8013fbe:	4770      	bx	lr
 8013fc0:	20000234 	.word	0x20000234

08013fc4 <_puts_r>:
 8013fc4:	6a03      	ldr	r3, [r0, #32]
 8013fc6:	b570      	push	{r4, r5, r6, lr}
 8013fc8:	6884      	ldr	r4, [r0, #8]
 8013fca:	4605      	mov	r5, r0
 8013fcc:	460e      	mov	r6, r1
 8013fce:	b90b      	cbnz	r3, 8013fd4 <_puts_r+0x10>
 8013fd0:	f7ff ffb0 	bl	8013f34 <__sinit>
 8013fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013fd6:	07db      	lsls	r3, r3, #31
 8013fd8:	d405      	bmi.n	8013fe6 <_puts_r+0x22>
 8013fda:	89a3      	ldrh	r3, [r4, #12]
 8013fdc:	0598      	lsls	r0, r3, #22
 8013fde:	d402      	bmi.n	8013fe6 <_puts_r+0x22>
 8013fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013fe2:	f000 f9e4 	bl	80143ae <__retarget_lock_acquire_recursive>
 8013fe6:	89a3      	ldrh	r3, [r4, #12]
 8013fe8:	0719      	lsls	r1, r3, #28
 8013fea:	d502      	bpl.n	8013ff2 <_puts_r+0x2e>
 8013fec:	6923      	ldr	r3, [r4, #16]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d135      	bne.n	801405e <_puts_r+0x9a>
 8013ff2:	4621      	mov	r1, r4
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	f000 f8fb 	bl	80141f0 <__swsetup_r>
 8013ffa:	b380      	cbz	r0, 801405e <_puts_r+0x9a>
 8013ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8014000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014002:	07da      	lsls	r2, r3, #31
 8014004:	d405      	bmi.n	8014012 <_puts_r+0x4e>
 8014006:	89a3      	ldrh	r3, [r4, #12]
 8014008:	059b      	lsls	r3, r3, #22
 801400a:	d402      	bmi.n	8014012 <_puts_r+0x4e>
 801400c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801400e:	f000 f9cf 	bl	80143b0 <__retarget_lock_release_recursive>
 8014012:	4628      	mov	r0, r5
 8014014:	bd70      	pop	{r4, r5, r6, pc}
 8014016:	2b00      	cmp	r3, #0
 8014018:	da04      	bge.n	8014024 <_puts_r+0x60>
 801401a:	69a2      	ldr	r2, [r4, #24]
 801401c:	429a      	cmp	r2, r3
 801401e:	dc17      	bgt.n	8014050 <_puts_r+0x8c>
 8014020:	290a      	cmp	r1, #10
 8014022:	d015      	beq.n	8014050 <_puts_r+0x8c>
 8014024:	6823      	ldr	r3, [r4, #0]
 8014026:	1c5a      	adds	r2, r3, #1
 8014028:	6022      	str	r2, [r4, #0]
 801402a:	7019      	strb	r1, [r3, #0]
 801402c:	68a3      	ldr	r3, [r4, #8]
 801402e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014032:	3b01      	subs	r3, #1
 8014034:	60a3      	str	r3, [r4, #8]
 8014036:	2900      	cmp	r1, #0
 8014038:	d1ed      	bne.n	8014016 <_puts_r+0x52>
 801403a:	2b00      	cmp	r3, #0
 801403c:	da11      	bge.n	8014062 <_puts_r+0x9e>
 801403e:	4622      	mov	r2, r4
 8014040:	210a      	movs	r1, #10
 8014042:	4628      	mov	r0, r5
 8014044:	f000 f895 	bl	8014172 <__swbuf_r>
 8014048:	3001      	adds	r0, #1
 801404a:	d0d7      	beq.n	8013ffc <_puts_r+0x38>
 801404c:	250a      	movs	r5, #10
 801404e:	e7d7      	b.n	8014000 <_puts_r+0x3c>
 8014050:	4622      	mov	r2, r4
 8014052:	4628      	mov	r0, r5
 8014054:	f000 f88d 	bl	8014172 <__swbuf_r>
 8014058:	3001      	adds	r0, #1
 801405a:	d1e7      	bne.n	801402c <_puts_r+0x68>
 801405c:	e7ce      	b.n	8013ffc <_puts_r+0x38>
 801405e:	3e01      	subs	r6, #1
 8014060:	e7e4      	b.n	801402c <_puts_r+0x68>
 8014062:	6823      	ldr	r3, [r4, #0]
 8014064:	1c5a      	adds	r2, r3, #1
 8014066:	6022      	str	r2, [r4, #0]
 8014068:	220a      	movs	r2, #10
 801406a:	701a      	strb	r2, [r3, #0]
 801406c:	e7ee      	b.n	801404c <_puts_r+0x88>
	...

08014070 <puts>:
 8014070:	4b02      	ldr	r3, [pc, #8]	@ (801407c <puts+0xc>)
 8014072:	4601      	mov	r1, r0
 8014074:	6818      	ldr	r0, [r3, #0]
 8014076:	f7ff bfa5 	b.w	8013fc4 <_puts_r>
 801407a:	bf00      	nop
 801407c:	20000234 	.word	0x20000234

08014080 <sniprintf>:
 8014080:	b40c      	push	{r2, r3}
 8014082:	b530      	push	{r4, r5, lr}
 8014084:	4b18      	ldr	r3, [pc, #96]	@ (80140e8 <sniprintf+0x68>)
 8014086:	1e0c      	subs	r4, r1, #0
 8014088:	681d      	ldr	r5, [r3, #0]
 801408a:	b09d      	sub	sp, #116	@ 0x74
 801408c:	da08      	bge.n	80140a0 <sniprintf+0x20>
 801408e:	238b      	movs	r3, #139	@ 0x8b
 8014090:	602b      	str	r3, [r5, #0]
 8014092:	f04f 30ff 	mov.w	r0, #4294967295
 8014096:	b01d      	add	sp, #116	@ 0x74
 8014098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801409c:	b002      	add	sp, #8
 801409e:	4770      	bx	lr
 80140a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80140a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80140a8:	f04f 0300 	mov.w	r3, #0
 80140ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80140ae:	bf14      	ite	ne
 80140b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80140b4:	4623      	moveq	r3, r4
 80140b6:	9304      	str	r3, [sp, #16]
 80140b8:	9307      	str	r3, [sp, #28]
 80140ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80140be:	9002      	str	r0, [sp, #8]
 80140c0:	9006      	str	r0, [sp, #24]
 80140c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80140c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80140c8:	ab21      	add	r3, sp, #132	@ 0x84
 80140ca:	a902      	add	r1, sp, #8
 80140cc:	4628      	mov	r0, r5
 80140ce:	9301      	str	r3, [sp, #4]
 80140d0:	f000 fa16 	bl	8014500 <_svfiprintf_r>
 80140d4:	1c43      	adds	r3, r0, #1
 80140d6:	bfbc      	itt	lt
 80140d8:	238b      	movlt	r3, #139	@ 0x8b
 80140da:	602b      	strlt	r3, [r5, #0]
 80140dc:	2c00      	cmp	r4, #0
 80140de:	d0da      	beq.n	8014096 <sniprintf+0x16>
 80140e0:	9b02      	ldr	r3, [sp, #8]
 80140e2:	2200      	movs	r2, #0
 80140e4:	701a      	strb	r2, [r3, #0]
 80140e6:	e7d6      	b.n	8014096 <sniprintf+0x16>
 80140e8:	20000234 	.word	0x20000234

080140ec <__sread>:
 80140ec:	b510      	push	{r4, lr}
 80140ee:	460c      	mov	r4, r1
 80140f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140f4:	f000 f8fc 	bl	80142f0 <_read_r>
 80140f8:	2800      	cmp	r0, #0
 80140fa:	bfab      	itete	ge
 80140fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80140fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014100:	181b      	addge	r3, r3, r0
 8014102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014106:	bfac      	ite	ge
 8014108:	6563      	strge	r3, [r4, #84]	@ 0x54
 801410a:	81a3      	strhlt	r3, [r4, #12]
 801410c:	bd10      	pop	{r4, pc}

0801410e <__swrite>:
 801410e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014112:	461f      	mov	r7, r3
 8014114:	898b      	ldrh	r3, [r1, #12]
 8014116:	05db      	lsls	r3, r3, #23
 8014118:	4605      	mov	r5, r0
 801411a:	460c      	mov	r4, r1
 801411c:	4616      	mov	r6, r2
 801411e:	d505      	bpl.n	801412c <__swrite+0x1e>
 8014120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014124:	2302      	movs	r3, #2
 8014126:	2200      	movs	r2, #0
 8014128:	f000 f8d0 	bl	80142cc <_lseek_r>
 801412c:	89a3      	ldrh	r3, [r4, #12]
 801412e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014136:	81a3      	strh	r3, [r4, #12]
 8014138:	4632      	mov	r2, r6
 801413a:	463b      	mov	r3, r7
 801413c:	4628      	mov	r0, r5
 801413e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014142:	f000 b8f7 	b.w	8014334 <_write_r>

08014146 <__sseek>:
 8014146:	b510      	push	{r4, lr}
 8014148:	460c      	mov	r4, r1
 801414a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801414e:	f000 f8bd 	bl	80142cc <_lseek_r>
 8014152:	1c43      	adds	r3, r0, #1
 8014154:	89a3      	ldrh	r3, [r4, #12]
 8014156:	bf15      	itete	ne
 8014158:	6560      	strne	r0, [r4, #84]	@ 0x54
 801415a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801415e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014162:	81a3      	strheq	r3, [r4, #12]
 8014164:	bf18      	it	ne
 8014166:	81a3      	strhne	r3, [r4, #12]
 8014168:	bd10      	pop	{r4, pc}

0801416a <__sclose>:
 801416a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801416e:	f000 b89d 	b.w	80142ac <_close_r>

08014172 <__swbuf_r>:
 8014172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014174:	460e      	mov	r6, r1
 8014176:	4614      	mov	r4, r2
 8014178:	4605      	mov	r5, r0
 801417a:	b118      	cbz	r0, 8014184 <__swbuf_r+0x12>
 801417c:	6a03      	ldr	r3, [r0, #32]
 801417e:	b90b      	cbnz	r3, 8014184 <__swbuf_r+0x12>
 8014180:	f7ff fed8 	bl	8013f34 <__sinit>
 8014184:	69a3      	ldr	r3, [r4, #24]
 8014186:	60a3      	str	r3, [r4, #8]
 8014188:	89a3      	ldrh	r3, [r4, #12]
 801418a:	071a      	lsls	r2, r3, #28
 801418c:	d501      	bpl.n	8014192 <__swbuf_r+0x20>
 801418e:	6923      	ldr	r3, [r4, #16]
 8014190:	b943      	cbnz	r3, 80141a4 <__swbuf_r+0x32>
 8014192:	4621      	mov	r1, r4
 8014194:	4628      	mov	r0, r5
 8014196:	f000 f82b 	bl	80141f0 <__swsetup_r>
 801419a:	b118      	cbz	r0, 80141a4 <__swbuf_r+0x32>
 801419c:	f04f 37ff 	mov.w	r7, #4294967295
 80141a0:	4638      	mov	r0, r7
 80141a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141a4:	6823      	ldr	r3, [r4, #0]
 80141a6:	6922      	ldr	r2, [r4, #16]
 80141a8:	1a98      	subs	r0, r3, r2
 80141aa:	6963      	ldr	r3, [r4, #20]
 80141ac:	b2f6      	uxtb	r6, r6
 80141ae:	4283      	cmp	r3, r0
 80141b0:	4637      	mov	r7, r6
 80141b2:	dc05      	bgt.n	80141c0 <__swbuf_r+0x4e>
 80141b4:	4621      	mov	r1, r4
 80141b6:	4628      	mov	r0, r5
 80141b8:	f000 fdf0 	bl	8014d9c <_fflush_r>
 80141bc:	2800      	cmp	r0, #0
 80141be:	d1ed      	bne.n	801419c <__swbuf_r+0x2a>
 80141c0:	68a3      	ldr	r3, [r4, #8]
 80141c2:	3b01      	subs	r3, #1
 80141c4:	60a3      	str	r3, [r4, #8]
 80141c6:	6823      	ldr	r3, [r4, #0]
 80141c8:	1c5a      	adds	r2, r3, #1
 80141ca:	6022      	str	r2, [r4, #0]
 80141cc:	701e      	strb	r6, [r3, #0]
 80141ce:	6962      	ldr	r2, [r4, #20]
 80141d0:	1c43      	adds	r3, r0, #1
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d004      	beq.n	80141e0 <__swbuf_r+0x6e>
 80141d6:	89a3      	ldrh	r3, [r4, #12]
 80141d8:	07db      	lsls	r3, r3, #31
 80141da:	d5e1      	bpl.n	80141a0 <__swbuf_r+0x2e>
 80141dc:	2e0a      	cmp	r6, #10
 80141de:	d1df      	bne.n	80141a0 <__swbuf_r+0x2e>
 80141e0:	4621      	mov	r1, r4
 80141e2:	4628      	mov	r0, r5
 80141e4:	f000 fdda 	bl	8014d9c <_fflush_r>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d0d9      	beq.n	80141a0 <__swbuf_r+0x2e>
 80141ec:	e7d6      	b.n	801419c <__swbuf_r+0x2a>
	...

080141f0 <__swsetup_r>:
 80141f0:	b538      	push	{r3, r4, r5, lr}
 80141f2:	4b29      	ldr	r3, [pc, #164]	@ (8014298 <__swsetup_r+0xa8>)
 80141f4:	4605      	mov	r5, r0
 80141f6:	6818      	ldr	r0, [r3, #0]
 80141f8:	460c      	mov	r4, r1
 80141fa:	b118      	cbz	r0, 8014204 <__swsetup_r+0x14>
 80141fc:	6a03      	ldr	r3, [r0, #32]
 80141fe:	b90b      	cbnz	r3, 8014204 <__swsetup_r+0x14>
 8014200:	f7ff fe98 	bl	8013f34 <__sinit>
 8014204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014208:	0719      	lsls	r1, r3, #28
 801420a:	d422      	bmi.n	8014252 <__swsetup_r+0x62>
 801420c:	06da      	lsls	r2, r3, #27
 801420e:	d407      	bmi.n	8014220 <__swsetup_r+0x30>
 8014210:	2209      	movs	r2, #9
 8014212:	602a      	str	r2, [r5, #0]
 8014214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014218:	81a3      	strh	r3, [r4, #12]
 801421a:	f04f 30ff 	mov.w	r0, #4294967295
 801421e:	e033      	b.n	8014288 <__swsetup_r+0x98>
 8014220:	0758      	lsls	r0, r3, #29
 8014222:	d512      	bpl.n	801424a <__swsetup_r+0x5a>
 8014224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014226:	b141      	cbz	r1, 801423a <__swsetup_r+0x4a>
 8014228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801422c:	4299      	cmp	r1, r3
 801422e:	d002      	beq.n	8014236 <__swsetup_r+0x46>
 8014230:	4628      	mov	r0, r5
 8014232:	f000 f8bf 	bl	80143b4 <_free_r>
 8014236:	2300      	movs	r3, #0
 8014238:	6363      	str	r3, [r4, #52]	@ 0x34
 801423a:	89a3      	ldrh	r3, [r4, #12]
 801423c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014240:	81a3      	strh	r3, [r4, #12]
 8014242:	2300      	movs	r3, #0
 8014244:	6063      	str	r3, [r4, #4]
 8014246:	6923      	ldr	r3, [r4, #16]
 8014248:	6023      	str	r3, [r4, #0]
 801424a:	89a3      	ldrh	r3, [r4, #12]
 801424c:	f043 0308 	orr.w	r3, r3, #8
 8014250:	81a3      	strh	r3, [r4, #12]
 8014252:	6923      	ldr	r3, [r4, #16]
 8014254:	b94b      	cbnz	r3, 801426a <__swsetup_r+0x7a>
 8014256:	89a3      	ldrh	r3, [r4, #12]
 8014258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801425c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014260:	d003      	beq.n	801426a <__swsetup_r+0x7a>
 8014262:	4621      	mov	r1, r4
 8014264:	4628      	mov	r0, r5
 8014266:	f000 fde7 	bl	8014e38 <__smakebuf_r>
 801426a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801426e:	f013 0201 	ands.w	r2, r3, #1
 8014272:	d00a      	beq.n	801428a <__swsetup_r+0x9a>
 8014274:	2200      	movs	r2, #0
 8014276:	60a2      	str	r2, [r4, #8]
 8014278:	6962      	ldr	r2, [r4, #20]
 801427a:	4252      	negs	r2, r2
 801427c:	61a2      	str	r2, [r4, #24]
 801427e:	6922      	ldr	r2, [r4, #16]
 8014280:	b942      	cbnz	r2, 8014294 <__swsetup_r+0xa4>
 8014282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014286:	d1c5      	bne.n	8014214 <__swsetup_r+0x24>
 8014288:	bd38      	pop	{r3, r4, r5, pc}
 801428a:	0799      	lsls	r1, r3, #30
 801428c:	bf58      	it	pl
 801428e:	6962      	ldrpl	r2, [r4, #20]
 8014290:	60a2      	str	r2, [r4, #8]
 8014292:	e7f4      	b.n	801427e <__swsetup_r+0x8e>
 8014294:	2000      	movs	r0, #0
 8014296:	e7f7      	b.n	8014288 <__swsetup_r+0x98>
 8014298:	20000234 	.word	0x20000234

0801429c <memset>:
 801429c:	4402      	add	r2, r0
 801429e:	4603      	mov	r3, r0
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d100      	bne.n	80142a6 <memset+0xa>
 80142a4:	4770      	bx	lr
 80142a6:	f803 1b01 	strb.w	r1, [r3], #1
 80142aa:	e7f9      	b.n	80142a0 <memset+0x4>

080142ac <_close_r>:
 80142ac:	b538      	push	{r3, r4, r5, lr}
 80142ae:	4d06      	ldr	r5, [pc, #24]	@ (80142c8 <_close_r+0x1c>)
 80142b0:	2300      	movs	r3, #0
 80142b2:	4604      	mov	r4, r0
 80142b4:	4608      	mov	r0, r1
 80142b6:	602b      	str	r3, [r5, #0]
 80142b8:	f7ee f899 	bl	80023ee <_close>
 80142bc:	1c43      	adds	r3, r0, #1
 80142be:	d102      	bne.n	80142c6 <_close_r+0x1a>
 80142c0:	682b      	ldr	r3, [r5, #0]
 80142c2:	b103      	cbz	r3, 80142c6 <_close_r+0x1a>
 80142c4:	6023      	str	r3, [r4, #0]
 80142c6:	bd38      	pop	{r3, r4, r5, pc}
 80142c8:	20000e28 	.word	0x20000e28

080142cc <_lseek_r>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	4d07      	ldr	r5, [pc, #28]	@ (80142ec <_lseek_r+0x20>)
 80142d0:	4604      	mov	r4, r0
 80142d2:	4608      	mov	r0, r1
 80142d4:	4611      	mov	r1, r2
 80142d6:	2200      	movs	r2, #0
 80142d8:	602a      	str	r2, [r5, #0]
 80142da:	461a      	mov	r2, r3
 80142dc:	f7ee f8ae 	bl	800243c <_lseek>
 80142e0:	1c43      	adds	r3, r0, #1
 80142e2:	d102      	bne.n	80142ea <_lseek_r+0x1e>
 80142e4:	682b      	ldr	r3, [r5, #0]
 80142e6:	b103      	cbz	r3, 80142ea <_lseek_r+0x1e>
 80142e8:	6023      	str	r3, [r4, #0]
 80142ea:	bd38      	pop	{r3, r4, r5, pc}
 80142ec:	20000e28 	.word	0x20000e28

080142f0 <_read_r>:
 80142f0:	b538      	push	{r3, r4, r5, lr}
 80142f2:	4d07      	ldr	r5, [pc, #28]	@ (8014310 <_read_r+0x20>)
 80142f4:	4604      	mov	r4, r0
 80142f6:	4608      	mov	r0, r1
 80142f8:	4611      	mov	r1, r2
 80142fa:	2200      	movs	r2, #0
 80142fc:	602a      	str	r2, [r5, #0]
 80142fe:	461a      	mov	r2, r3
 8014300:	f7ee f83c 	bl	800237c <_read>
 8014304:	1c43      	adds	r3, r0, #1
 8014306:	d102      	bne.n	801430e <_read_r+0x1e>
 8014308:	682b      	ldr	r3, [r5, #0]
 801430a:	b103      	cbz	r3, 801430e <_read_r+0x1e>
 801430c:	6023      	str	r3, [r4, #0]
 801430e:	bd38      	pop	{r3, r4, r5, pc}
 8014310:	20000e28 	.word	0x20000e28

08014314 <_sbrk_r>:
 8014314:	b538      	push	{r3, r4, r5, lr}
 8014316:	4d06      	ldr	r5, [pc, #24]	@ (8014330 <_sbrk_r+0x1c>)
 8014318:	2300      	movs	r3, #0
 801431a:	4604      	mov	r4, r0
 801431c:	4608      	mov	r0, r1
 801431e:	602b      	str	r3, [r5, #0]
 8014320:	f7ee f89a 	bl	8002458 <_sbrk>
 8014324:	1c43      	adds	r3, r0, #1
 8014326:	d102      	bne.n	801432e <_sbrk_r+0x1a>
 8014328:	682b      	ldr	r3, [r5, #0]
 801432a:	b103      	cbz	r3, 801432e <_sbrk_r+0x1a>
 801432c:	6023      	str	r3, [r4, #0]
 801432e:	bd38      	pop	{r3, r4, r5, pc}
 8014330:	20000e28 	.word	0x20000e28

08014334 <_write_r>:
 8014334:	b538      	push	{r3, r4, r5, lr}
 8014336:	4d07      	ldr	r5, [pc, #28]	@ (8014354 <_write_r+0x20>)
 8014338:	4604      	mov	r4, r0
 801433a:	4608      	mov	r0, r1
 801433c:	4611      	mov	r1, r2
 801433e:	2200      	movs	r2, #0
 8014340:	602a      	str	r2, [r5, #0]
 8014342:	461a      	mov	r2, r3
 8014344:	f7ee f837 	bl	80023b6 <_write>
 8014348:	1c43      	adds	r3, r0, #1
 801434a:	d102      	bne.n	8014352 <_write_r+0x1e>
 801434c:	682b      	ldr	r3, [r5, #0]
 801434e:	b103      	cbz	r3, 8014352 <_write_r+0x1e>
 8014350:	6023      	str	r3, [r4, #0]
 8014352:	bd38      	pop	{r3, r4, r5, pc}
 8014354:	20000e28 	.word	0x20000e28

08014358 <__errno>:
 8014358:	4b01      	ldr	r3, [pc, #4]	@ (8014360 <__errno+0x8>)
 801435a:	6818      	ldr	r0, [r3, #0]
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop
 8014360:	20000234 	.word	0x20000234

08014364 <__libc_init_array>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	4d0d      	ldr	r5, [pc, #52]	@ (801439c <__libc_init_array+0x38>)
 8014368:	4c0d      	ldr	r4, [pc, #52]	@ (80143a0 <__libc_init_array+0x3c>)
 801436a:	1b64      	subs	r4, r4, r5
 801436c:	10a4      	asrs	r4, r4, #2
 801436e:	2600      	movs	r6, #0
 8014370:	42a6      	cmp	r6, r4
 8014372:	d109      	bne.n	8014388 <__libc_init_array+0x24>
 8014374:	4d0b      	ldr	r5, [pc, #44]	@ (80143a4 <__libc_init_array+0x40>)
 8014376:	4c0c      	ldr	r4, [pc, #48]	@ (80143a8 <__libc_init_array+0x44>)
 8014378:	f001 fdb4 	bl	8015ee4 <_init>
 801437c:	1b64      	subs	r4, r4, r5
 801437e:	10a4      	asrs	r4, r4, #2
 8014380:	2600      	movs	r6, #0
 8014382:	42a6      	cmp	r6, r4
 8014384:	d105      	bne.n	8014392 <__libc_init_array+0x2e>
 8014386:	bd70      	pop	{r4, r5, r6, pc}
 8014388:	f855 3b04 	ldr.w	r3, [r5], #4
 801438c:	4798      	blx	r3
 801438e:	3601      	adds	r6, #1
 8014390:	e7ee      	b.n	8014370 <__libc_init_array+0xc>
 8014392:	f855 3b04 	ldr.w	r3, [r5], #4
 8014396:	4798      	blx	r3
 8014398:	3601      	adds	r6, #1
 801439a:	e7f2      	b.n	8014382 <__libc_init_array+0x1e>
 801439c:	08016c98 	.word	0x08016c98
 80143a0:	08016c98 	.word	0x08016c98
 80143a4:	08016c98 	.word	0x08016c98
 80143a8:	08016c9c 	.word	0x08016c9c

080143ac <__retarget_lock_init_recursive>:
 80143ac:	4770      	bx	lr

080143ae <__retarget_lock_acquire_recursive>:
 80143ae:	4770      	bx	lr

080143b0 <__retarget_lock_release_recursive>:
 80143b0:	4770      	bx	lr
	...

080143b4 <_free_r>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	4605      	mov	r5, r0
 80143b8:	2900      	cmp	r1, #0
 80143ba:	d041      	beq.n	8014440 <_free_r+0x8c>
 80143bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143c0:	1f0c      	subs	r4, r1, #4
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	bfb8      	it	lt
 80143c6:	18e4      	addlt	r4, r4, r3
 80143c8:	f7ff fd1c 	bl	8013e04 <__malloc_lock>
 80143cc:	4a1d      	ldr	r2, [pc, #116]	@ (8014444 <_free_r+0x90>)
 80143ce:	6813      	ldr	r3, [r2, #0]
 80143d0:	b933      	cbnz	r3, 80143e0 <_free_r+0x2c>
 80143d2:	6063      	str	r3, [r4, #4]
 80143d4:	6014      	str	r4, [r2, #0]
 80143d6:	4628      	mov	r0, r5
 80143d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143dc:	f7ff bd18 	b.w	8013e10 <__malloc_unlock>
 80143e0:	42a3      	cmp	r3, r4
 80143e2:	d908      	bls.n	80143f6 <_free_r+0x42>
 80143e4:	6820      	ldr	r0, [r4, #0]
 80143e6:	1821      	adds	r1, r4, r0
 80143e8:	428b      	cmp	r3, r1
 80143ea:	bf01      	itttt	eq
 80143ec:	6819      	ldreq	r1, [r3, #0]
 80143ee:	685b      	ldreq	r3, [r3, #4]
 80143f0:	1809      	addeq	r1, r1, r0
 80143f2:	6021      	streq	r1, [r4, #0]
 80143f4:	e7ed      	b.n	80143d2 <_free_r+0x1e>
 80143f6:	461a      	mov	r2, r3
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	b10b      	cbz	r3, 8014400 <_free_r+0x4c>
 80143fc:	42a3      	cmp	r3, r4
 80143fe:	d9fa      	bls.n	80143f6 <_free_r+0x42>
 8014400:	6811      	ldr	r1, [r2, #0]
 8014402:	1850      	adds	r0, r2, r1
 8014404:	42a0      	cmp	r0, r4
 8014406:	d10b      	bne.n	8014420 <_free_r+0x6c>
 8014408:	6820      	ldr	r0, [r4, #0]
 801440a:	4401      	add	r1, r0
 801440c:	1850      	adds	r0, r2, r1
 801440e:	4283      	cmp	r3, r0
 8014410:	6011      	str	r1, [r2, #0]
 8014412:	d1e0      	bne.n	80143d6 <_free_r+0x22>
 8014414:	6818      	ldr	r0, [r3, #0]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	6053      	str	r3, [r2, #4]
 801441a:	4408      	add	r0, r1
 801441c:	6010      	str	r0, [r2, #0]
 801441e:	e7da      	b.n	80143d6 <_free_r+0x22>
 8014420:	d902      	bls.n	8014428 <_free_r+0x74>
 8014422:	230c      	movs	r3, #12
 8014424:	602b      	str	r3, [r5, #0]
 8014426:	e7d6      	b.n	80143d6 <_free_r+0x22>
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	1821      	adds	r1, r4, r0
 801442c:	428b      	cmp	r3, r1
 801442e:	bf04      	itt	eq
 8014430:	6819      	ldreq	r1, [r3, #0]
 8014432:	685b      	ldreq	r3, [r3, #4]
 8014434:	6063      	str	r3, [r4, #4]
 8014436:	bf04      	itt	eq
 8014438:	1809      	addeq	r1, r1, r0
 801443a:	6021      	streq	r1, [r4, #0]
 801443c:	6054      	str	r4, [r2, #4]
 801443e:	e7ca      	b.n	80143d6 <_free_r+0x22>
 8014440:	bd38      	pop	{r3, r4, r5, pc}
 8014442:	bf00      	nop
 8014444:	20000ce8 	.word	0x20000ce8

08014448 <__ssputs_r>:
 8014448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801444c:	688e      	ldr	r6, [r1, #8]
 801444e:	461f      	mov	r7, r3
 8014450:	42be      	cmp	r6, r7
 8014452:	680b      	ldr	r3, [r1, #0]
 8014454:	4682      	mov	sl, r0
 8014456:	460c      	mov	r4, r1
 8014458:	4690      	mov	r8, r2
 801445a:	d82d      	bhi.n	80144b8 <__ssputs_r+0x70>
 801445c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014460:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014464:	d026      	beq.n	80144b4 <__ssputs_r+0x6c>
 8014466:	6965      	ldr	r5, [r4, #20]
 8014468:	6909      	ldr	r1, [r1, #16]
 801446a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801446e:	eba3 0901 	sub.w	r9, r3, r1
 8014472:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014476:	1c7b      	adds	r3, r7, #1
 8014478:	444b      	add	r3, r9
 801447a:	106d      	asrs	r5, r5, #1
 801447c:	429d      	cmp	r5, r3
 801447e:	bf38      	it	cc
 8014480:	461d      	movcc	r5, r3
 8014482:	0553      	lsls	r3, r2, #21
 8014484:	d527      	bpl.n	80144d6 <__ssputs_r+0x8e>
 8014486:	4629      	mov	r1, r5
 8014488:	f7ff fc3c 	bl	8013d04 <_malloc_r>
 801448c:	4606      	mov	r6, r0
 801448e:	b360      	cbz	r0, 80144ea <__ssputs_r+0xa2>
 8014490:	6921      	ldr	r1, [r4, #16]
 8014492:	464a      	mov	r2, r9
 8014494:	f000 fd48 	bl	8014f28 <memcpy>
 8014498:	89a3      	ldrh	r3, [r4, #12]
 801449a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801449e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144a2:	81a3      	strh	r3, [r4, #12]
 80144a4:	6126      	str	r6, [r4, #16]
 80144a6:	6165      	str	r5, [r4, #20]
 80144a8:	444e      	add	r6, r9
 80144aa:	eba5 0509 	sub.w	r5, r5, r9
 80144ae:	6026      	str	r6, [r4, #0]
 80144b0:	60a5      	str	r5, [r4, #8]
 80144b2:	463e      	mov	r6, r7
 80144b4:	42be      	cmp	r6, r7
 80144b6:	d900      	bls.n	80144ba <__ssputs_r+0x72>
 80144b8:	463e      	mov	r6, r7
 80144ba:	6820      	ldr	r0, [r4, #0]
 80144bc:	4632      	mov	r2, r6
 80144be:	4641      	mov	r1, r8
 80144c0:	f000 fcf6 	bl	8014eb0 <memmove>
 80144c4:	68a3      	ldr	r3, [r4, #8]
 80144c6:	1b9b      	subs	r3, r3, r6
 80144c8:	60a3      	str	r3, [r4, #8]
 80144ca:	6823      	ldr	r3, [r4, #0]
 80144cc:	4433      	add	r3, r6
 80144ce:	6023      	str	r3, [r4, #0]
 80144d0:	2000      	movs	r0, #0
 80144d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d6:	462a      	mov	r2, r5
 80144d8:	f000 fd34 	bl	8014f44 <_realloc_r>
 80144dc:	4606      	mov	r6, r0
 80144de:	2800      	cmp	r0, #0
 80144e0:	d1e0      	bne.n	80144a4 <__ssputs_r+0x5c>
 80144e2:	6921      	ldr	r1, [r4, #16]
 80144e4:	4650      	mov	r0, sl
 80144e6:	f7ff ff65 	bl	80143b4 <_free_r>
 80144ea:	230c      	movs	r3, #12
 80144ec:	f8ca 3000 	str.w	r3, [sl]
 80144f0:	89a3      	ldrh	r3, [r4, #12]
 80144f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144f6:	81a3      	strh	r3, [r4, #12]
 80144f8:	f04f 30ff 	mov.w	r0, #4294967295
 80144fc:	e7e9      	b.n	80144d2 <__ssputs_r+0x8a>
	...

08014500 <_svfiprintf_r>:
 8014500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014504:	4698      	mov	r8, r3
 8014506:	898b      	ldrh	r3, [r1, #12]
 8014508:	061b      	lsls	r3, r3, #24
 801450a:	b09d      	sub	sp, #116	@ 0x74
 801450c:	4607      	mov	r7, r0
 801450e:	460d      	mov	r5, r1
 8014510:	4614      	mov	r4, r2
 8014512:	d510      	bpl.n	8014536 <_svfiprintf_r+0x36>
 8014514:	690b      	ldr	r3, [r1, #16]
 8014516:	b973      	cbnz	r3, 8014536 <_svfiprintf_r+0x36>
 8014518:	2140      	movs	r1, #64	@ 0x40
 801451a:	f7ff fbf3 	bl	8013d04 <_malloc_r>
 801451e:	6028      	str	r0, [r5, #0]
 8014520:	6128      	str	r0, [r5, #16]
 8014522:	b930      	cbnz	r0, 8014532 <_svfiprintf_r+0x32>
 8014524:	230c      	movs	r3, #12
 8014526:	603b      	str	r3, [r7, #0]
 8014528:	f04f 30ff 	mov.w	r0, #4294967295
 801452c:	b01d      	add	sp, #116	@ 0x74
 801452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014532:	2340      	movs	r3, #64	@ 0x40
 8014534:	616b      	str	r3, [r5, #20]
 8014536:	2300      	movs	r3, #0
 8014538:	9309      	str	r3, [sp, #36]	@ 0x24
 801453a:	2320      	movs	r3, #32
 801453c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014540:	f8cd 800c 	str.w	r8, [sp, #12]
 8014544:	2330      	movs	r3, #48	@ 0x30
 8014546:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80146e4 <_svfiprintf_r+0x1e4>
 801454a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801454e:	f04f 0901 	mov.w	r9, #1
 8014552:	4623      	mov	r3, r4
 8014554:	469a      	mov	sl, r3
 8014556:	f813 2b01 	ldrb.w	r2, [r3], #1
 801455a:	b10a      	cbz	r2, 8014560 <_svfiprintf_r+0x60>
 801455c:	2a25      	cmp	r2, #37	@ 0x25
 801455e:	d1f9      	bne.n	8014554 <_svfiprintf_r+0x54>
 8014560:	ebba 0b04 	subs.w	fp, sl, r4
 8014564:	d00b      	beq.n	801457e <_svfiprintf_r+0x7e>
 8014566:	465b      	mov	r3, fp
 8014568:	4622      	mov	r2, r4
 801456a:	4629      	mov	r1, r5
 801456c:	4638      	mov	r0, r7
 801456e:	f7ff ff6b 	bl	8014448 <__ssputs_r>
 8014572:	3001      	adds	r0, #1
 8014574:	f000 80a7 	beq.w	80146c6 <_svfiprintf_r+0x1c6>
 8014578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801457a:	445a      	add	r2, fp
 801457c:	9209      	str	r2, [sp, #36]	@ 0x24
 801457e:	f89a 3000 	ldrb.w	r3, [sl]
 8014582:	2b00      	cmp	r3, #0
 8014584:	f000 809f 	beq.w	80146c6 <_svfiprintf_r+0x1c6>
 8014588:	2300      	movs	r3, #0
 801458a:	f04f 32ff 	mov.w	r2, #4294967295
 801458e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014592:	f10a 0a01 	add.w	sl, sl, #1
 8014596:	9304      	str	r3, [sp, #16]
 8014598:	9307      	str	r3, [sp, #28]
 801459a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801459e:	931a      	str	r3, [sp, #104]	@ 0x68
 80145a0:	4654      	mov	r4, sl
 80145a2:	2205      	movs	r2, #5
 80145a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145a8:	484e      	ldr	r0, [pc, #312]	@ (80146e4 <_svfiprintf_r+0x1e4>)
 80145aa:	f7eb fe29 	bl	8000200 <memchr>
 80145ae:	9a04      	ldr	r2, [sp, #16]
 80145b0:	b9d8      	cbnz	r0, 80145ea <_svfiprintf_r+0xea>
 80145b2:	06d0      	lsls	r0, r2, #27
 80145b4:	bf44      	itt	mi
 80145b6:	2320      	movmi	r3, #32
 80145b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145bc:	0711      	lsls	r1, r2, #28
 80145be:	bf44      	itt	mi
 80145c0:	232b      	movmi	r3, #43	@ 0x2b
 80145c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145c6:	f89a 3000 	ldrb.w	r3, [sl]
 80145ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80145cc:	d015      	beq.n	80145fa <_svfiprintf_r+0xfa>
 80145ce:	9a07      	ldr	r2, [sp, #28]
 80145d0:	4654      	mov	r4, sl
 80145d2:	2000      	movs	r0, #0
 80145d4:	f04f 0c0a 	mov.w	ip, #10
 80145d8:	4621      	mov	r1, r4
 80145da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145de:	3b30      	subs	r3, #48	@ 0x30
 80145e0:	2b09      	cmp	r3, #9
 80145e2:	d94b      	bls.n	801467c <_svfiprintf_r+0x17c>
 80145e4:	b1b0      	cbz	r0, 8014614 <_svfiprintf_r+0x114>
 80145e6:	9207      	str	r2, [sp, #28]
 80145e8:	e014      	b.n	8014614 <_svfiprintf_r+0x114>
 80145ea:	eba0 0308 	sub.w	r3, r0, r8
 80145ee:	fa09 f303 	lsl.w	r3, r9, r3
 80145f2:	4313      	orrs	r3, r2
 80145f4:	9304      	str	r3, [sp, #16]
 80145f6:	46a2      	mov	sl, r4
 80145f8:	e7d2      	b.n	80145a0 <_svfiprintf_r+0xa0>
 80145fa:	9b03      	ldr	r3, [sp, #12]
 80145fc:	1d19      	adds	r1, r3, #4
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	9103      	str	r1, [sp, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	bfbb      	ittet	lt
 8014606:	425b      	neglt	r3, r3
 8014608:	f042 0202 	orrlt.w	r2, r2, #2
 801460c:	9307      	strge	r3, [sp, #28]
 801460e:	9307      	strlt	r3, [sp, #28]
 8014610:	bfb8      	it	lt
 8014612:	9204      	strlt	r2, [sp, #16]
 8014614:	7823      	ldrb	r3, [r4, #0]
 8014616:	2b2e      	cmp	r3, #46	@ 0x2e
 8014618:	d10a      	bne.n	8014630 <_svfiprintf_r+0x130>
 801461a:	7863      	ldrb	r3, [r4, #1]
 801461c:	2b2a      	cmp	r3, #42	@ 0x2a
 801461e:	d132      	bne.n	8014686 <_svfiprintf_r+0x186>
 8014620:	9b03      	ldr	r3, [sp, #12]
 8014622:	1d1a      	adds	r2, r3, #4
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	9203      	str	r2, [sp, #12]
 8014628:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801462c:	3402      	adds	r4, #2
 801462e:	9305      	str	r3, [sp, #20]
 8014630:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80146f4 <_svfiprintf_r+0x1f4>
 8014634:	7821      	ldrb	r1, [r4, #0]
 8014636:	2203      	movs	r2, #3
 8014638:	4650      	mov	r0, sl
 801463a:	f7eb fde1 	bl	8000200 <memchr>
 801463e:	b138      	cbz	r0, 8014650 <_svfiprintf_r+0x150>
 8014640:	9b04      	ldr	r3, [sp, #16]
 8014642:	eba0 000a 	sub.w	r0, r0, sl
 8014646:	2240      	movs	r2, #64	@ 0x40
 8014648:	4082      	lsls	r2, r0
 801464a:	4313      	orrs	r3, r2
 801464c:	3401      	adds	r4, #1
 801464e:	9304      	str	r3, [sp, #16]
 8014650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014654:	4824      	ldr	r0, [pc, #144]	@ (80146e8 <_svfiprintf_r+0x1e8>)
 8014656:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801465a:	2206      	movs	r2, #6
 801465c:	f7eb fdd0 	bl	8000200 <memchr>
 8014660:	2800      	cmp	r0, #0
 8014662:	d036      	beq.n	80146d2 <_svfiprintf_r+0x1d2>
 8014664:	4b21      	ldr	r3, [pc, #132]	@ (80146ec <_svfiprintf_r+0x1ec>)
 8014666:	bb1b      	cbnz	r3, 80146b0 <_svfiprintf_r+0x1b0>
 8014668:	9b03      	ldr	r3, [sp, #12]
 801466a:	3307      	adds	r3, #7
 801466c:	f023 0307 	bic.w	r3, r3, #7
 8014670:	3308      	adds	r3, #8
 8014672:	9303      	str	r3, [sp, #12]
 8014674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014676:	4433      	add	r3, r6
 8014678:	9309      	str	r3, [sp, #36]	@ 0x24
 801467a:	e76a      	b.n	8014552 <_svfiprintf_r+0x52>
 801467c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014680:	460c      	mov	r4, r1
 8014682:	2001      	movs	r0, #1
 8014684:	e7a8      	b.n	80145d8 <_svfiprintf_r+0xd8>
 8014686:	2300      	movs	r3, #0
 8014688:	3401      	adds	r4, #1
 801468a:	9305      	str	r3, [sp, #20]
 801468c:	4619      	mov	r1, r3
 801468e:	f04f 0c0a 	mov.w	ip, #10
 8014692:	4620      	mov	r0, r4
 8014694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014698:	3a30      	subs	r2, #48	@ 0x30
 801469a:	2a09      	cmp	r2, #9
 801469c:	d903      	bls.n	80146a6 <_svfiprintf_r+0x1a6>
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d0c6      	beq.n	8014630 <_svfiprintf_r+0x130>
 80146a2:	9105      	str	r1, [sp, #20]
 80146a4:	e7c4      	b.n	8014630 <_svfiprintf_r+0x130>
 80146a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80146aa:	4604      	mov	r4, r0
 80146ac:	2301      	movs	r3, #1
 80146ae:	e7f0      	b.n	8014692 <_svfiprintf_r+0x192>
 80146b0:	ab03      	add	r3, sp, #12
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	462a      	mov	r2, r5
 80146b6:	4b0e      	ldr	r3, [pc, #56]	@ (80146f0 <_svfiprintf_r+0x1f0>)
 80146b8:	a904      	add	r1, sp, #16
 80146ba:	4638      	mov	r0, r7
 80146bc:	f3af 8000 	nop.w
 80146c0:	1c42      	adds	r2, r0, #1
 80146c2:	4606      	mov	r6, r0
 80146c4:	d1d6      	bne.n	8014674 <_svfiprintf_r+0x174>
 80146c6:	89ab      	ldrh	r3, [r5, #12]
 80146c8:	065b      	lsls	r3, r3, #25
 80146ca:	f53f af2d 	bmi.w	8014528 <_svfiprintf_r+0x28>
 80146ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146d0:	e72c      	b.n	801452c <_svfiprintf_r+0x2c>
 80146d2:	ab03      	add	r3, sp, #12
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	462a      	mov	r2, r5
 80146d8:	4b05      	ldr	r3, [pc, #20]	@ (80146f0 <_svfiprintf_r+0x1f0>)
 80146da:	a904      	add	r1, sp, #16
 80146dc:	4638      	mov	r0, r7
 80146de:	f000 f9bb 	bl	8014a58 <_printf_i>
 80146e2:	e7ed      	b.n	80146c0 <_svfiprintf_r+0x1c0>
 80146e4:	08016c1c 	.word	0x08016c1c
 80146e8:	08016c26 	.word	0x08016c26
 80146ec:	00000000 	.word	0x00000000
 80146f0:	08014449 	.word	0x08014449
 80146f4:	08016c22 	.word	0x08016c22

080146f8 <__sfputc_r>:
 80146f8:	6893      	ldr	r3, [r2, #8]
 80146fa:	3b01      	subs	r3, #1
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	b410      	push	{r4}
 8014700:	6093      	str	r3, [r2, #8]
 8014702:	da08      	bge.n	8014716 <__sfputc_r+0x1e>
 8014704:	6994      	ldr	r4, [r2, #24]
 8014706:	42a3      	cmp	r3, r4
 8014708:	db01      	blt.n	801470e <__sfputc_r+0x16>
 801470a:	290a      	cmp	r1, #10
 801470c:	d103      	bne.n	8014716 <__sfputc_r+0x1e>
 801470e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014712:	f7ff bd2e 	b.w	8014172 <__swbuf_r>
 8014716:	6813      	ldr	r3, [r2, #0]
 8014718:	1c58      	adds	r0, r3, #1
 801471a:	6010      	str	r0, [r2, #0]
 801471c:	7019      	strb	r1, [r3, #0]
 801471e:	4608      	mov	r0, r1
 8014720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014724:	4770      	bx	lr

08014726 <__sfputs_r>:
 8014726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014728:	4606      	mov	r6, r0
 801472a:	460f      	mov	r7, r1
 801472c:	4614      	mov	r4, r2
 801472e:	18d5      	adds	r5, r2, r3
 8014730:	42ac      	cmp	r4, r5
 8014732:	d101      	bne.n	8014738 <__sfputs_r+0x12>
 8014734:	2000      	movs	r0, #0
 8014736:	e007      	b.n	8014748 <__sfputs_r+0x22>
 8014738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801473c:	463a      	mov	r2, r7
 801473e:	4630      	mov	r0, r6
 8014740:	f7ff ffda 	bl	80146f8 <__sfputc_r>
 8014744:	1c43      	adds	r3, r0, #1
 8014746:	d1f3      	bne.n	8014730 <__sfputs_r+0xa>
 8014748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801474c <_vfiprintf_r>:
 801474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014750:	460d      	mov	r5, r1
 8014752:	b09d      	sub	sp, #116	@ 0x74
 8014754:	4614      	mov	r4, r2
 8014756:	4698      	mov	r8, r3
 8014758:	4606      	mov	r6, r0
 801475a:	b118      	cbz	r0, 8014764 <_vfiprintf_r+0x18>
 801475c:	6a03      	ldr	r3, [r0, #32]
 801475e:	b90b      	cbnz	r3, 8014764 <_vfiprintf_r+0x18>
 8014760:	f7ff fbe8 	bl	8013f34 <__sinit>
 8014764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014766:	07d9      	lsls	r1, r3, #31
 8014768:	d405      	bmi.n	8014776 <_vfiprintf_r+0x2a>
 801476a:	89ab      	ldrh	r3, [r5, #12]
 801476c:	059a      	lsls	r2, r3, #22
 801476e:	d402      	bmi.n	8014776 <_vfiprintf_r+0x2a>
 8014770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014772:	f7ff fe1c 	bl	80143ae <__retarget_lock_acquire_recursive>
 8014776:	89ab      	ldrh	r3, [r5, #12]
 8014778:	071b      	lsls	r3, r3, #28
 801477a:	d501      	bpl.n	8014780 <_vfiprintf_r+0x34>
 801477c:	692b      	ldr	r3, [r5, #16]
 801477e:	b99b      	cbnz	r3, 80147a8 <_vfiprintf_r+0x5c>
 8014780:	4629      	mov	r1, r5
 8014782:	4630      	mov	r0, r6
 8014784:	f7ff fd34 	bl	80141f0 <__swsetup_r>
 8014788:	b170      	cbz	r0, 80147a8 <_vfiprintf_r+0x5c>
 801478a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801478c:	07dc      	lsls	r4, r3, #31
 801478e:	d504      	bpl.n	801479a <_vfiprintf_r+0x4e>
 8014790:	f04f 30ff 	mov.w	r0, #4294967295
 8014794:	b01d      	add	sp, #116	@ 0x74
 8014796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801479a:	89ab      	ldrh	r3, [r5, #12]
 801479c:	0598      	lsls	r0, r3, #22
 801479e:	d4f7      	bmi.n	8014790 <_vfiprintf_r+0x44>
 80147a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80147a2:	f7ff fe05 	bl	80143b0 <__retarget_lock_release_recursive>
 80147a6:	e7f3      	b.n	8014790 <_vfiprintf_r+0x44>
 80147a8:	2300      	movs	r3, #0
 80147aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80147ac:	2320      	movs	r3, #32
 80147ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80147b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80147b6:	2330      	movs	r3, #48	@ 0x30
 80147b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014968 <_vfiprintf_r+0x21c>
 80147bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80147c0:	f04f 0901 	mov.w	r9, #1
 80147c4:	4623      	mov	r3, r4
 80147c6:	469a      	mov	sl, r3
 80147c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147cc:	b10a      	cbz	r2, 80147d2 <_vfiprintf_r+0x86>
 80147ce:	2a25      	cmp	r2, #37	@ 0x25
 80147d0:	d1f9      	bne.n	80147c6 <_vfiprintf_r+0x7a>
 80147d2:	ebba 0b04 	subs.w	fp, sl, r4
 80147d6:	d00b      	beq.n	80147f0 <_vfiprintf_r+0xa4>
 80147d8:	465b      	mov	r3, fp
 80147da:	4622      	mov	r2, r4
 80147dc:	4629      	mov	r1, r5
 80147de:	4630      	mov	r0, r6
 80147e0:	f7ff ffa1 	bl	8014726 <__sfputs_r>
 80147e4:	3001      	adds	r0, #1
 80147e6:	f000 80a7 	beq.w	8014938 <_vfiprintf_r+0x1ec>
 80147ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147ec:	445a      	add	r2, fp
 80147ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80147f0:	f89a 3000 	ldrb.w	r3, [sl]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	f000 809f 	beq.w	8014938 <_vfiprintf_r+0x1ec>
 80147fa:	2300      	movs	r3, #0
 80147fc:	f04f 32ff 	mov.w	r2, #4294967295
 8014800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014804:	f10a 0a01 	add.w	sl, sl, #1
 8014808:	9304      	str	r3, [sp, #16]
 801480a:	9307      	str	r3, [sp, #28]
 801480c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014810:	931a      	str	r3, [sp, #104]	@ 0x68
 8014812:	4654      	mov	r4, sl
 8014814:	2205      	movs	r2, #5
 8014816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801481a:	4853      	ldr	r0, [pc, #332]	@ (8014968 <_vfiprintf_r+0x21c>)
 801481c:	f7eb fcf0 	bl	8000200 <memchr>
 8014820:	9a04      	ldr	r2, [sp, #16]
 8014822:	b9d8      	cbnz	r0, 801485c <_vfiprintf_r+0x110>
 8014824:	06d1      	lsls	r1, r2, #27
 8014826:	bf44      	itt	mi
 8014828:	2320      	movmi	r3, #32
 801482a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801482e:	0713      	lsls	r3, r2, #28
 8014830:	bf44      	itt	mi
 8014832:	232b      	movmi	r3, #43	@ 0x2b
 8014834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014838:	f89a 3000 	ldrb.w	r3, [sl]
 801483c:	2b2a      	cmp	r3, #42	@ 0x2a
 801483e:	d015      	beq.n	801486c <_vfiprintf_r+0x120>
 8014840:	9a07      	ldr	r2, [sp, #28]
 8014842:	4654      	mov	r4, sl
 8014844:	2000      	movs	r0, #0
 8014846:	f04f 0c0a 	mov.w	ip, #10
 801484a:	4621      	mov	r1, r4
 801484c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014850:	3b30      	subs	r3, #48	@ 0x30
 8014852:	2b09      	cmp	r3, #9
 8014854:	d94b      	bls.n	80148ee <_vfiprintf_r+0x1a2>
 8014856:	b1b0      	cbz	r0, 8014886 <_vfiprintf_r+0x13a>
 8014858:	9207      	str	r2, [sp, #28]
 801485a:	e014      	b.n	8014886 <_vfiprintf_r+0x13a>
 801485c:	eba0 0308 	sub.w	r3, r0, r8
 8014860:	fa09 f303 	lsl.w	r3, r9, r3
 8014864:	4313      	orrs	r3, r2
 8014866:	9304      	str	r3, [sp, #16]
 8014868:	46a2      	mov	sl, r4
 801486a:	e7d2      	b.n	8014812 <_vfiprintf_r+0xc6>
 801486c:	9b03      	ldr	r3, [sp, #12]
 801486e:	1d19      	adds	r1, r3, #4
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	9103      	str	r1, [sp, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	bfbb      	ittet	lt
 8014878:	425b      	neglt	r3, r3
 801487a:	f042 0202 	orrlt.w	r2, r2, #2
 801487e:	9307      	strge	r3, [sp, #28]
 8014880:	9307      	strlt	r3, [sp, #28]
 8014882:	bfb8      	it	lt
 8014884:	9204      	strlt	r2, [sp, #16]
 8014886:	7823      	ldrb	r3, [r4, #0]
 8014888:	2b2e      	cmp	r3, #46	@ 0x2e
 801488a:	d10a      	bne.n	80148a2 <_vfiprintf_r+0x156>
 801488c:	7863      	ldrb	r3, [r4, #1]
 801488e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014890:	d132      	bne.n	80148f8 <_vfiprintf_r+0x1ac>
 8014892:	9b03      	ldr	r3, [sp, #12]
 8014894:	1d1a      	adds	r2, r3, #4
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	9203      	str	r2, [sp, #12]
 801489a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801489e:	3402      	adds	r4, #2
 80148a0:	9305      	str	r3, [sp, #20]
 80148a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014978 <_vfiprintf_r+0x22c>
 80148a6:	7821      	ldrb	r1, [r4, #0]
 80148a8:	2203      	movs	r2, #3
 80148aa:	4650      	mov	r0, sl
 80148ac:	f7eb fca8 	bl	8000200 <memchr>
 80148b0:	b138      	cbz	r0, 80148c2 <_vfiprintf_r+0x176>
 80148b2:	9b04      	ldr	r3, [sp, #16]
 80148b4:	eba0 000a 	sub.w	r0, r0, sl
 80148b8:	2240      	movs	r2, #64	@ 0x40
 80148ba:	4082      	lsls	r2, r0
 80148bc:	4313      	orrs	r3, r2
 80148be:	3401      	adds	r4, #1
 80148c0:	9304      	str	r3, [sp, #16]
 80148c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c6:	4829      	ldr	r0, [pc, #164]	@ (801496c <_vfiprintf_r+0x220>)
 80148c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80148cc:	2206      	movs	r2, #6
 80148ce:	f7eb fc97 	bl	8000200 <memchr>
 80148d2:	2800      	cmp	r0, #0
 80148d4:	d03f      	beq.n	8014956 <_vfiprintf_r+0x20a>
 80148d6:	4b26      	ldr	r3, [pc, #152]	@ (8014970 <_vfiprintf_r+0x224>)
 80148d8:	bb1b      	cbnz	r3, 8014922 <_vfiprintf_r+0x1d6>
 80148da:	9b03      	ldr	r3, [sp, #12]
 80148dc:	3307      	adds	r3, #7
 80148de:	f023 0307 	bic.w	r3, r3, #7
 80148e2:	3308      	adds	r3, #8
 80148e4:	9303      	str	r3, [sp, #12]
 80148e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148e8:	443b      	add	r3, r7
 80148ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80148ec:	e76a      	b.n	80147c4 <_vfiprintf_r+0x78>
 80148ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80148f2:	460c      	mov	r4, r1
 80148f4:	2001      	movs	r0, #1
 80148f6:	e7a8      	b.n	801484a <_vfiprintf_r+0xfe>
 80148f8:	2300      	movs	r3, #0
 80148fa:	3401      	adds	r4, #1
 80148fc:	9305      	str	r3, [sp, #20]
 80148fe:	4619      	mov	r1, r3
 8014900:	f04f 0c0a 	mov.w	ip, #10
 8014904:	4620      	mov	r0, r4
 8014906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801490a:	3a30      	subs	r2, #48	@ 0x30
 801490c:	2a09      	cmp	r2, #9
 801490e:	d903      	bls.n	8014918 <_vfiprintf_r+0x1cc>
 8014910:	2b00      	cmp	r3, #0
 8014912:	d0c6      	beq.n	80148a2 <_vfiprintf_r+0x156>
 8014914:	9105      	str	r1, [sp, #20]
 8014916:	e7c4      	b.n	80148a2 <_vfiprintf_r+0x156>
 8014918:	fb0c 2101 	mla	r1, ip, r1, r2
 801491c:	4604      	mov	r4, r0
 801491e:	2301      	movs	r3, #1
 8014920:	e7f0      	b.n	8014904 <_vfiprintf_r+0x1b8>
 8014922:	ab03      	add	r3, sp, #12
 8014924:	9300      	str	r3, [sp, #0]
 8014926:	462a      	mov	r2, r5
 8014928:	4b12      	ldr	r3, [pc, #72]	@ (8014974 <_vfiprintf_r+0x228>)
 801492a:	a904      	add	r1, sp, #16
 801492c:	4630      	mov	r0, r6
 801492e:	f3af 8000 	nop.w
 8014932:	4607      	mov	r7, r0
 8014934:	1c78      	adds	r0, r7, #1
 8014936:	d1d6      	bne.n	80148e6 <_vfiprintf_r+0x19a>
 8014938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801493a:	07d9      	lsls	r1, r3, #31
 801493c:	d405      	bmi.n	801494a <_vfiprintf_r+0x1fe>
 801493e:	89ab      	ldrh	r3, [r5, #12]
 8014940:	059a      	lsls	r2, r3, #22
 8014942:	d402      	bmi.n	801494a <_vfiprintf_r+0x1fe>
 8014944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014946:	f7ff fd33 	bl	80143b0 <__retarget_lock_release_recursive>
 801494a:	89ab      	ldrh	r3, [r5, #12]
 801494c:	065b      	lsls	r3, r3, #25
 801494e:	f53f af1f 	bmi.w	8014790 <_vfiprintf_r+0x44>
 8014952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014954:	e71e      	b.n	8014794 <_vfiprintf_r+0x48>
 8014956:	ab03      	add	r3, sp, #12
 8014958:	9300      	str	r3, [sp, #0]
 801495a:	462a      	mov	r2, r5
 801495c:	4b05      	ldr	r3, [pc, #20]	@ (8014974 <_vfiprintf_r+0x228>)
 801495e:	a904      	add	r1, sp, #16
 8014960:	4630      	mov	r0, r6
 8014962:	f000 f879 	bl	8014a58 <_printf_i>
 8014966:	e7e4      	b.n	8014932 <_vfiprintf_r+0x1e6>
 8014968:	08016c1c 	.word	0x08016c1c
 801496c:	08016c26 	.word	0x08016c26
 8014970:	00000000 	.word	0x00000000
 8014974:	08014727 	.word	0x08014727
 8014978:	08016c22 	.word	0x08016c22

0801497c <_printf_common>:
 801497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014980:	4616      	mov	r6, r2
 8014982:	4698      	mov	r8, r3
 8014984:	688a      	ldr	r2, [r1, #8]
 8014986:	690b      	ldr	r3, [r1, #16]
 8014988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801498c:	4293      	cmp	r3, r2
 801498e:	bfb8      	it	lt
 8014990:	4613      	movlt	r3, r2
 8014992:	6033      	str	r3, [r6, #0]
 8014994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014998:	4607      	mov	r7, r0
 801499a:	460c      	mov	r4, r1
 801499c:	b10a      	cbz	r2, 80149a2 <_printf_common+0x26>
 801499e:	3301      	adds	r3, #1
 80149a0:	6033      	str	r3, [r6, #0]
 80149a2:	6823      	ldr	r3, [r4, #0]
 80149a4:	0699      	lsls	r1, r3, #26
 80149a6:	bf42      	ittt	mi
 80149a8:	6833      	ldrmi	r3, [r6, #0]
 80149aa:	3302      	addmi	r3, #2
 80149ac:	6033      	strmi	r3, [r6, #0]
 80149ae:	6825      	ldr	r5, [r4, #0]
 80149b0:	f015 0506 	ands.w	r5, r5, #6
 80149b4:	d106      	bne.n	80149c4 <_printf_common+0x48>
 80149b6:	f104 0a19 	add.w	sl, r4, #25
 80149ba:	68e3      	ldr	r3, [r4, #12]
 80149bc:	6832      	ldr	r2, [r6, #0]
 80149be:	1a9b      	subs	r3, r3, r2
 80149c0:	42ab      	cmp	r3, r5
 80149c2:	dc26      	bgt.n	8014a12 <_printf_common+0x96>
 80149c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80149c8:	6822      	ldr	r2, [r4, #0]
 80149ca:	3b00      	subs	r3, #0
 80149cc:	bf18      	it	ne
 80149ce:	2301      	movne	r3, #1
 80149d0:	0692      	lsls	r2, r2, #26
 80149d2:	d42b      	bmi.n	8014a2c <_printf_common+0xb0>
 80149d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80149d8:	4641      	mov	r1, r8
 80149da:	4638      	mov	r0, r7
 80149dc:	47c8      	blx	r9
 80149de:	3001      	adds	r0, #1
 80149e0:	d01e      	beq.n	8014a20 <_printf_common+0xa4>
 80149e2:	6823      	ldr	r3, [r4, #0]
 80149e4:	6922      	ldr	r2, [r4, #16]
 80149e6:	f003 0306 	and.w	r3, r3, #6
 80149ea:	2b04      	cmp	r3, #4
 80149ec:	bf02      	ittt	eq
 80149ee:	68e5      	ldreq	r5, [r4, #12]
 80149f0:	6833      	ldreq	r3, [r6, #0]
 80149f2:	1aed      	subeq	r5, r5, r3
 80149f4:	68a3      	ldr	r3, [r4, #8]
 80149f6:	bf0c      	ite	eq
 80149f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80149fc:	2500      	movne	r5, #0
 80149fe:	4293      	cmp	r3, r2
 8014a00:	bfc4      	itt	gt
 8014a02:	1a9b      	subgt	r3, r3, r2
 8014a04:	18ed      	addgt	r5, r5, r3
 8014a06:	2600      	movs	r6, #0
 8014a08:	341a      	adds	r4, #26
 8014a0a:	42b5      	cmp	r5, r6
 8014a0c:	d11a      	bne.n	8014a44 <_printf_common+0xc8>
 8014a0e:	2000      	movs	r0, #0
 8014a10:	e008      	b.n	8014a24 <_printf_common+0xa8>
 8014a12:	2301      	movs	r3, #1
 8014a14:	4652      	mov	r2, sl
 8014a16:	4641      	mov	r1, r8
 8014a18:	4638      	mov	r0, r7
 8014a1a:	47c8      	blx	r9
 8014a1c:	3001      	adds	r0, #1
 8014a1e:	d103      	bne.n	8014a28 <_printf_common+0xac>
 8014a20:	f04f 30ff 	mov.w	r0, #4294967295
 8014a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a28:	3501      	adds	r5, #1
 8014a2a:	e7c6      	b.n	80149ba <_printf_common+0x3e>
 8014a2c:	18e1      	adds	r1, r4, r3
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	2030      	movs	r0, #48	@ 0x30
 8014a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014a36:	4422      	add	r2, r4
 8014a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014a40:	3302      	adds	r3, #2
 8014a42:	e7c7      	b.n	80149d4 <_printf_common+0x58>
 8014a44:	2301      	movs	r3, #1
 8014a46:	4622      	mov	r2, r4
 8014a48:	4641      	mov	r1, r8
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	47c8      	blx	r9
 8014a4e:	3001      	adds	r0, #1
 8014a50:	d0e6      	beq.n	8014a20 <_printf_common+0xa4>
 8014a52:	3601      	adds	r6, #1
 8014a54:	e7d9      	b.n	8014a0a <_printf_common+0x8e>
	...

08014a58 <_printf_i>:
 8014a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a5c:	7e0f      	ldrb	r7, [r1, #24]
 8014a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014a60:	2f78      	cmp	r7, #120	@ 0x78
 8014a62:	4691      	mov	r9, r2
 8014a64:	4680      	mov	r8, r0
 8014a66:	460c      	mov	r4, r1
 8014a68:	469a      	mov	sl, r3
 8014a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014a6e:	d807      	bhi.n	8014a80 <_printf_i+0x28>
 8014a70:	2f62      	cmp	r7, #98	@ 0x62
 8014a72:	d80a      	bhi.n	8014a8a <_printf_i+0x32>
 8014a74:	2f00      	cmp	r7, #0
 8014a76:	f000 80d1 	beq.w	8014c1c <_printf_i+0x1c4>
 8014a7a:	2f58      	cmp	r7, #88	@ 0x58
 8014a7c:	f000 80b8 	beq.w	8014bf0 <_printf_i+0x198>
 8014a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014a88:	e03a      	b.n	8014b00 <_printf_i+0xa8>
 8014a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014a8e:	2b15      	cmp	r3, #21
 8014a90:	d8f6      	bhi.n	8014a80 <_printf_i+0x28>
 8014a92:	a101      	add	r1, pc, #4	@ (adr r1, 8014a98 <_printf_i+0x40>)
 8014a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014a98:	08014af1 	.word	0x08014af1
 8014a9c:	08014b05 	.word	0x08014b05
 8014aa0:	08014a81 	.word	0x08014a81
 8014aa4:	08014a81 	.word	0x08014a81
 8014aa8:	08014a81 	.word	0x08014a81
 8014aac:	08014a81 	.word	0x08014a81
 8014ab0:	08014b05 	.word	0x08014b05
 8014ab4:	08014a81 	.word	0x08014a81
 8014ab8:	08014a81 	.word	0x08014a81
 8014abc:	08014a81 	.word	0x08014a81
 8014ac0:	08014a81 	.word	0x08014a81
 8014ac4:	08014c03 	.word	0x08014c03
 8014ac8:	08014b2f 	.word	0x08014b2f
 8014acc:	08014bbd 	.word	0x08014bbd
 8014ad0:	08014a81 	.word	0x08014a81
 8014ad4:	08014a81 	.word	0x08014a81
 8014ad8:	08014c25 	.word	0x08014c25
 8014adc:	08014a81 	.word	0x08014a81
 8014ae0:	08014b2f 	.word	0x08014b2f
 8014ae4:	08014a81 	.word	0x08014a81
 8014ae8:	08014a81 	.word	0x08014a81
 8014aec:	08014bc5 	.word	0x08014bc5
 8014af0:	6833      	ldr	r3, [r6, #0]
 8014af2:	1d1a      	adds	r2, r3, #4
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	6032      	str	r2, [r6, #0]
 8014af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014b00:	2301      	movs	r3, #1
 8014b02:	e09c      	b.n	8014c3e <_printf_i+0x1e6>
 8014b04:	6833      	ldr	r3, [r6, #0]
 8014b06:	6820      	ldr	r0, [r4, #0]
 8014b08:	1d19      	adds	r1, r3, #4
 8014b0a:	6031      	str	r1, [r6, #0]
 8014b0c:	0606      	lsls	r6, r0, #24
 8014b0e:	d501      	bpl.n	8014b14 <_printf_i+0xbc>
 8014b10:	681d      	ldr	r5, [r3, #0]
 8014b12:	e003      	b.n	8014b1c <_printf_i+0xc4>
 8014b14:	0645      	lsls	r5, r0, #25
 8014b16:	d5fb      	bpl.n	8014b10 <_printf_i+0xb8>
 8014b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014b1c:	2d00      	cmp	r5, #0
 8014b1e:	da03      	bge.n	8014b28 <_printf_i+0xd0>
 8014b20:	232d      	movs	r3, #45	@ 0x2d
 8014b22:	426d      	negs	r5, r5
 8014b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014b28:	4858      	ldr	r0, [pc, #352]	@ (8014c8c <_printf_i+0x234>)
 8014b2a:	230a      	movs	r3, #10
 8014b2c:	e011      	b.n	8014b52 <_printf_i+0xfa>
 8014b2e:	6821      	ldr	r1, [r4, #0]
 8014b30:	6833      	ldr	r3, [r6, #0]
 8014b32:	0608      	lsls	r0, r1, #24
 8014b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8014b38:	d402      	bmi.n	8014b40 <_printf_i+0xe8>
 8014b3a:	0649      	lsls	r1, r1, #25
 8014b3c:	bf48      	it	mi
 8014b3e:	b2ad      	uxthmi	r5, r5
 8014b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8014b42:	4852      	ldr	r0, [pc, #328]	@ (8014c8c <_printf_i+0x234>)
 8014b44:	6033      	str	r3, [r6, #0]
 8014b46:	bf14      	ite	ne
 8014b48:	230a      	movne	r3, #10
 8014b4a:	2308      	moveq	r3, #8
 8014b4c:	2100      	movs	r1, #0
 8014b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014b52:	6866      	ldr	r6, [r4, #4]
 8014b54:	60a6      	str	r6, [r4, #8]
 8014b56:	2e00      	cmp	r6, #0
 8014b58:	db05      	blt.n	8014b66 <_printf_i+0x10e>
 8014b5a:	6821      	ldr	r1, [r4, #0]
 8014b5c:	432e      	orrs	r6, r5
 8014b5e:	f021 0104 	bic.w	r1, r1, #4
 8014b62:	6021      	str	r1, [r4, #0]
 8014b64:	d04b      	beq.n	8014bfe <_printf_i+0x1a6>
 8014b66:	4616      	mov	r6, r2
 8014b68:	fbb5 f1f3 	udiv	r1, r5, r3
 8014b6c:	fb03 5711 	mls	r7, r3, r1, r5
 8014b70:	5dc7      	ldrb	r7, [r0, r7]
 8014b72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014b76:	462f      	mov	r7, r5
 8014b78:	42bb      	cmp	r3, r7
 8014b7a:	460d      	mov	r5, r1
 8014b7c:	d9f4      	bls.n	8014b68 <_printf_i+0x110>
 8014b7e:	2b08      	cmp	r3, #8
 8014b80:	d10b      	bne.n	8014b9a <_printf_i+0x142>
 8014b82:	6823      	ldr	r3, [r4, #0]
 8014b84:	07df      	lsls	r7, r3, #31
 8014b86:	d508      	bpl.n	8014b9a <_printf_i+0x142>
 8014b88:	6923      	ldr	r3, [r4, #16]
 8014b8a:	6861      	ldr	r1, [r4, #4]
 8014b8c:	4299      	cmp	r1, r3
 8014b8e:	bfde      	ittt	le
 8014b90:	2330      	movle	r3, #48	@ 0x30
 8014b92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014b96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014b9a:	1b92      	subs	r2, r2, r6
 8014b9c:	6122      	str	r2, [r4, #16]
 8014b9e:	f8cd a000 	str.w	sl, [sp]
 8014ba2:	464b      	mov	r3, r9
 8014ba4:	aa03      	add	r2, sp, #12
 8014ba6:	4621      	mov	r1, r4
 8014ba8:	4640      	mov	r0, r8
 8014baa:	f7ff fee7 	bl	801497c <_printf_common>
 8014bae:	3001      	adds	r0, #1
 8014bb0:	d14a      	bne.n	8014c48 <_printf_i+0x1f0>
 8014bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb6:	b004      	add	sp, #16
 8014bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bbc:	6823      	ldr	r3, [r4, #0]
 8014bbe:	f043 0320 	orr.w	r3, r3, #32
 8014bc2:	6023      	str	r3, [r4, #0]
 8014bc4:	4832      	ldr	r0, [pc, #200]	@ (8014c90 <_printf_i+0x238>)
 8014bc6:	2778      	movs	r7, #120	@ 0x78
 8014bc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014bcc:	6823      	ldr	r3, [r4, #0]
 8014bce:	6831      	ldr	r1, [r6, #0]
 8014bd0:	061f      	lsls	r7, r3, #24
 8014bd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8014bd6:	d402      	bmi.n	8014bde <_printf_i+0x186>
 8014bd8:	065f      	lsls	r7, r3, #25
 8014bda:	bf48      	it	mi
 8014bdc:	b2ad      	uxthmi	r5, r5
 8014bde:	6031      	str	r1, [r6, #0]
 8014be0:	07d9      	lsls	r1, r3, #31
 8014be2:	bf44      	itt	mi
 8014be4:	f043 0320 	orrmi.w	r3, r3, #32
 8014be8:	6023      	strmi	r3, [r4, #0]
 8014bea:	b11d      	cbz	r5, 8014bf4 <_printf_i+0x19c>
 8014bec:	2310      	movs	r3, #16
 8014bee:	e7ad      	b.n	8014b4c <_printf_i+0xf4>
 8014bf0:	4826      	ldr	r0, [pc, #152]	@ (8014c8c <_printf_i+0x234>)
 8014bf2:	e7e9      	b.n	8014bc8 <_printf_i+0x170>
 8014bf4:	6823      	ldr	r3, [r4, #0]
 8014bf6:	f023 0320 	bic.w	r3, r3, #32
 8014bfa:	6023      	str	r3, [r4, #0]
 8014bfc:	e7f6      	b.n	8014bec <_printf_i+0x194>
 8014bfe:	4616      	mov	r6, r2
 8014c00:	e7bd      	b.n	8014b7e <_printf_i+0x126>
 8014c02:	6833      	ldr	r3, [r6, #0]
 8014c04:	6825      	ldr	r5, [r4, #0]
 8014c06:	6961      	ldr	r1, [r4, #20]
 8014c08:	1d18      	adds	r0, r3, #4
 8014c0a:	6030      	str	r0, [r6, #0]
 8014c0c:	062e      	lsls	r6, r5, #24
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	d501      	bpl.n	8014c16 <_printf_i+0x1be>
 8014c12:	6019      	str	r1, [r3, #0]
 8014c14:	e002      	b.n	8014c1c <_printf_i+0x1c4>
 8014c16:	0668      	lsls	r0, r5, #25
 8014c18:	d5fb      	bpl.n	8014c12 <_printf_i+0x1ba>
 8014c1a:	8019      	strh	r1, [r3, #0]
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	6123      	str	r3, [r4, #16]
 8014c20:	4616      	mov	r6, r2
 8014c22:	e7bc      	b.n	8014b9e <_printf_i+0x146>
 8014c24:	6833      	ldr	r3, [r6, #0]
 8014c26:	1d1a      	adds	r2, r3, #4
 8014c28:	6032      	str	r2, [r6, #0]
 8014c2a:	681e      	ldr	r6, [r3, #0]
 8014c2c:	6862      	ldr	r2, [r4, #4]
 8014c2e:	2100      	movs	r1, #0
 8014c30:	4630      	mov	r0, r6
 8014c32:	f7eb fae5 	bl	8000200 <memchr>
 8014c36:	b108      	cbz	r0, 8014c3c <_printf_i+0x1e4>
 8014c38:	1b80      	subs	r0, r0, r6
 8014c3a:	6060      	str	r0, [r4, #4]
 8014c3c:	6863      	ldr	r3, [r4, #4]
 8014c3e:	6123      	str	r3, [r4, #16]
 8014c40:	2300      	movs	r3, #0
 8014c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014c46:	e7aa      	b.n	8014b9e <_printf_i+0x146>
 8014c48:	6923      	ldr	r3, [r4, #16]
 8014c4a:	4632      	mov	r2, r6
 8014c4c:	4649      	mov	r1, r9
 8014c4e:	4640      	mov	r0, r8
 8014c50:	47d0      	blx	sl
 8014c52:	3001      	adds	r0, #1
 8014c54:	d0ad      	beq.n	8014bb2 <_printf_i+0x15a>
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	079b      	lsls	r3, r3, #30
 8014c5a:	d413      	bmi.n	8014c84 <_printf_i+0x22c>
 8014c5c:	68e0      	ldr	r0, [r4, #12]
 8014c5e:	9b03      	ldr	r3, [sp, #12]
 8014c60:	4298      	cmp	r0, r3
 8014c62:	bfb8      	it	lt
 8014c64:	4618      	movlt	r0, r3
 8014c66:	e7a6      	b.n	8014bb6 <_printf_i+0x15e>
 8014c68:	2301      	movs	r3, #1
 8014c6a:	4632      	mov	r2, r6
 8014c6c:	4649      	mov	r1, r9
 8014c6e:	4640      	mov	r0, r8
 8014c70:	47d0      	blx	sl
 8014c72:	3001      	adds	r0, #1
 8014c74:	d09d      	beq.n	8014bb2 <_printf_i+0x15a>
 8014c76:	3501      	adds	r5, #1
 8014c78:	68e3      	ldr	r3, [r4, #12]
 8014c7a:	9903      	ldr	r1, [sp, #12]
 8014c7c:	1a5b      	subs	r3, r3, r1
 8014c7e:	42ab      	cmp	r3, r5
 8014c80:	dcf2      	bgt.n	8014c68 <_printf_i+0x210>
 8014c82:	e7eb      	b.n	8014c5c <_printf_i+0x204>
 8014c84:	2500      	movs	r5, #0
 8014c86:	f104 0619 	add.w	r6, r4, #25
 8014c8a:	e7f5      	b.n	8014c78 <_printf_i+0x220>
 8014c8c:	08016c2d 	.word	0x08016c2d
 8014c90:	08016c3e 	.word	0x08016c3e

08014c94 <__sflush_r>:
 8014c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9c:	0716      	lsls	r6, r2, #28
 8014c9e:	4605      	mov	r5, r0
 8014ca0:	460c      	mov	r4, r1
 8014ca2:	d454      	bmi.n	8014d4e <__sflush_r+0xba>
 8014ca4:	684b      	ldr	r3, [r1, #4]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	dc02      	bgt.n	8014cb0 <__sflush_r+0x1c>
 8014caa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	dd48      	ble.n	8014d42 <__sflush_r+0xae>
 8014cb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014cb2:	2e00      	cmp	r6, #0
 8014cb4:	d045      	beq.n	8014d42 <__sflush_r+0xae>
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014cbc:	682f      	ldr	r7, [r5, #0]
 8014cbe:	6a21      	ldr	r1, [r4, #32]
 8014cc0:	602b      	str	r3, [r5, #0]
 8014cc2:	d030      	beq.n	8014d26 <__sflush_r+0x92>
 8014cc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014cc6:	89a3      	ldrh	r3, [r4, #12]
 8014cc8:	0759      	lsls	r1, r3, #29
 8014cca:	d505      	bpl.n	8014cd8 <__sflush_r+0x44>
 8014ccc:	6863      	ldr	r3, [r4, #4]
 8014cce:	1ad2      	subs	r2, r2, r3
 8014cd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014cd2:	b10b      	cbz	r3, 8014cd8 <__sflush_r+0x44>
 8014cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014cd6:	1ad2      	subs	r2, r2, r3
 8014cd8:	2300      	movs	r3, #0
 8014cda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014cdc:	6a21      	ldr	r1, [r4, #32]
 8014cde:	4628      	mov	r0, r5
 8014ce0:	47b0      	blx	r6
 8014ce2:	1c43      	adds	r3, r0, #1
 8014ce4:	89a3      	ldrh	r3, [r4, #12]
 8014ce6:	d106      	bne.n	8014cf6 <__sflush_r+0x62>
 8014ce8:	6829      	ldr	r1, [r5, #0]
 8014cea:	291d      	cmp	r1, #29
 8014cec:	d82b      	bhi.n	8014d46 <__sflush_r+0xb2>
 8014cee:	4a2a      	ldr	r2, [pc, #168]	@ (8014d98 <__sflush_r+0x104>)
 8014cf0:	40ca      	lsrs	r2, r1
 8014cf2:	07d6      	lsls	r6, r2, #31
 8014cf4:	d527      	bpl.n	8014d46 <__sflush_r+0xb2>
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	6062      	str	r2, [r4, #4]
 8014cfa:	04d9      	lsls	r1, r3, #19
 8014cfc:	6922      	ldr	r2, [r4, #16]
 8014cfe:	6022      	str	r2, [r4, #0]
 8014d00:	d504      	bpl.n	8014d0c <__sflush_r+0x78>
 8014d02:	1c42      	adds	r2, r0, #1
 8014d04:	d101      	bne.n	8014d0a <__sflush_r+0x76>
 8014d06:	682b      	ldr	r3, [r5, #0]
 8014d08:	b903      	cbnz	r3, 8014d0c <__sflush_r+0x78>
 8014d0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d0e:	602f      	str	r7, [r5, #0]
 8014d10:	b1b9      	cbz	r1, 8014d42 <__sflush_r+0xae>
 8014d12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d16:	4299      	cmp	r1, r3
 8014d18:	d002      	beq.n	8014d20 <__sflush_r+0x8c>
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f7ff fb4a 	bl	80143b4 <_free_r>
 8014d20:	2300      	movs	r3, #0
 8014d22:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d24:	e00d      	b.n	8014d42 <__sflush_r+0xae>
 8014d26:	2301      	movs	r3, #1
 8014d28:	4628      	mov	r0, r5
 8014d2a:	47b0      	blx	r6
 8014d2c:	4602      	mov	r2, r0
 8014d2e:	1c50      	adds	r0, r2, #1
 8014d30:	d1c9      	bne.n	8014cc6 <__sflush_r+0x32>
 8014d32:	682b      	ldr	r3, [r5, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d0c6      	beq.n	8014cc6 <__sflush_r+0x32>
 8014d38:	2b1d      	cmp	r3, #29
 8014d3a:	d001      	beq.n	8014d40 <__sflush_r+0xac>
 8014d3c:	2b16      	cmp	r3, #22
 8014d3e:	d11e      	bne.n	8014d7e <__sflush_r+0xea>
 8014d40:	602f      	str	r7, [r5, #0]
 8014d42:	2000      	movs	r0, #0
 8014d44:	e022      	b.n	8014d8c <__sflush_r+0xf8>
 8014d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d4a:	b21b      	sxth	r3, r3
 8014d4c:	e01b      	b.n	8014d86 <__sflush_r+0xf2>
 8014d4e:	690f      	ldr	r7, [r1, #16]
 8014d50:	2f00      	cmp	r7, #0
 8014d52:	d0f6      	beq.n	8014d42 <__sflush_r+0xae>
 8014d54:	0793      	lsls	r3, r2, #30
 8014d56:	680e      	ldr	r6, [r1, #0]
 8014d58:	bf08      	it	eq
 8014d5a:	694b      	ldreq	r3, [r1, #20]
 8014d5c:	600f      	str	r7, [r1, #0]
 8014d5e:	bf18      	it	ne
 8014d60:	2300      	movne	r3, #0
 8014d62:	eba6 0807 	sub.w	r8, r6, r7
 8014d66:	608b      	str	r3, [r1, #8]
 8014d68:	f1b8 0f00 	cmp.w	r8, #0
 8014d6c:	dde9      	ble.n	8014d42 <__sflush_r+0xae>
 8014d6e:	6a21      	ldr	r1, [r4, #32]
 8014d70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014d72:	4643      	mov	r3, r8
 8014d74:	463a      	mov	r2, r7
 8014d76:	4628      	mov	r0, r5
 8014d78:	47b0      	blx	r6
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	dc08      	bgt.n	8014d90 <__sflush_r+0xfc>
 8014d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d86:	81a3      	strh	r3, [r4, #12]
 8014d88:	f04f 30ff 	mov.w	r0, #4294967295
 8014d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d90:	4407      	add	r7, r0
 8014d92:	eba8 0800 	sub.w	r8, r8, r0
 8014d96:	e7e7      	b.n	8014d68 <__sflush_r+0xd4>
 8014d98:	20400001 	.word	0x20400001

08014d9c <_fflush_r>:
 8014d9c:	b538      	push	{r3, r4, r5, lr}
 8014d9e:	690b      	ldr	r3, [r1, #16]
 8014da0:	4605      	mov	r5, r0
 8014da2:	460c      	mov	r4, r1
 8014da4:	b913      	cbnz	r3, 8014dac <_fflush_r+0x10>
 8014da6:	2500      	movs	r5, #0
 8014da8:	4628      	mov	r0, r5
 8014daa:	bd38      	pop	{r3, r4, r5, pc}
 8014dac:	b118      	cbz	r0, 8014db6 <_fflush_r+0x1a>
 8014dae:	6a03      	ldr	r3, [r0, #32]
 8014db0:	b90b      	cbnz	r3, 8014db6 <_fflush_r+0x1a>
 8014db2:	f7ff f8bf 	bl	8013f34 <__sinit>
 8014db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d0f3      	beq.n	8014da6 <_fflush_r+0xa>
 8014dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014dc0:	07d0      	lsls	r0, r2, #31
 8014dc2:	d404      	bmi.n	8014dce <_fflush_r+0x32>
 8014dc4:	0599      	lsls	r1, r3, #22
 8014dc6:	d402      	bmi.n	8014dce <_fflush_r+0x32>
 8014dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014dca:	f7ff faf0 	bl	80143ae <__retarget_lock_acquire_recursive>
 8014dce:	4628      	mov	r0, r5
 8014dd0:	4621      	mov	r1, r4
 8014dd2:	f7ff ff5f 	bl	8014c94 <__sflush_r>
 8014dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014dd8:	07da      	lsls	r2, r3, #31
 8014dda:	4605      	mov	r5, r0
 8014ddc:	d4e4      	bmi.n	8014da8 <_fflush_r+0xc>
 8014dde:	89a3      	ldrh	r3, [r4, #12]
 8014de0:	059b      	lsls	r3, r3, #22
 8014de2:	d4e1      	bmi.n	8014da8 <_fflush_r+0xc>
 8014de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014de6:	f7ff fae3 	bl	80143b0 <__retarget_lock_release_recursive>
 8014dea:	e7dd      	b.n	8014da8 <_fflush_r+0xc>

08014dec <__swhatbuf_r>:
 8014dec:	b570      	push	{r4, r5, r6, lr}
 8014dee:	460c      	mov	r4, r1
 8014df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014df4:	2900      	cmp	r1, #0
 8014df6:	b096      	sub	sp, #88	@ 0x58
 8014df8:	4615      	mov	r5, r2
 8014dfa:	461e      	mov	r6, r3
 8014dfc:	da0d      	bge.n	8014e1a <__swhatbuf_r+0x2e>
 8014dfe:	89a3      	ldrh	r3, [r4, #12]
 8014e00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e04:	f04f 0100 	mov.w	r1, #0
 8014e08:	bf14      	ite	ne
 8014e0a:	2340      	movne	r3, #64	@ 0x40
 8014e0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e10:	2000      	movs	r0, #0
 8014e12:	6031      	str	r1, [r6, #0]
 8014e14:	602b      	str	r3, [r5, #0]
 8014e16:	b016      	add	sp, #88	@ 0x58
 8014e18:	bd70      	pop	{r4, r5, r6, pc}
 8014e1a:	466a      	mov	r2, sp
 8014e1c:	f000 f862 	bl	8014ee4 <_fstat_r>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	dbec      	blt.n	8014dfe <__swhatbuf_r+0x12>
 8014e24:	9901      	ldr	r1, [sp, #4]
 8014e26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e2e:	4259      	negs	r1, r3
 8014e30:	4159      	adcs	r1, r3
 8014e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e36:	e7eb      	b.n	8014e10 <__swhatbuf_r+0x24>

08014e38 <__smakebuf_r>:
 8014e38:	898b      	ldrh	r3, [r1, #12]
 8014e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e3c:	079d      	lsls	r5, r3, #30
 8014e3e:	4606      	mov	r6, r0
 8014e40:	460c      	mov	r4, r1
 8014e42:	d507      	bpl.n	8014e54 <__smakebuf_r+0x1c>
 8014e44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e48:	6023      	str	r3, [r4, #0]
 8014e4a:	6123      	str	r3, [r4, #16]
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	6163      	str	r3, [r4, #20]
 8014e50:	b003      	add	sp, #12
 8014e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e54:	ab01      	add	r3, sp, #4
 8014e56:	466a      	mov	r2, sp
 8014e58:	f7ff ffc8 	bl	8014dec <__swhatbuf_r>
 8014e5c:	9f00      	ldr	r7, [sp, #0]
 8014e5e:	4605      	mov	r5, r0
 8014e60:	4639      	mov	r1, r7
 8014e62:	4630      	mov	r0, r6
 8014e64:	f7fe ff4e 	bl	8013d04 <_malloc_r>
 8014e68:	b948      	cbnz	r0, 8014e7e <__smakebuf_r+0x46>
 8014e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e6e:	059a      	lsls	r2, r3, #22
 8014e70:	d4ee      	bmi.n	8014e50 <__smakebuf_r+0x18>
 8014e72:	f023 0303 	bic.w	r3, r3, #3
 8014e76:	f043 0302 	orr.w	r3, r3, #2
 8014e7a:	81a3      	strh	r3, [r4, #12]
 8014e7c:	e7e2      	b.n	8014e44 <__smakebuf_r+0xc>
 8014e7e:	89a3      	ldrh	r3, [r4, #12]
 8014e80:	6020      	str	r0, [r4, #0]
 8014e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e86:	81a3      	strh	r3, [r4, #12]
 8014e88:	9b01      	ldr	r3, [sp, #4]
 8014e8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e8e:	b15b      	cbz	r3, 8014ea8 <__smakebuf_r+0x70>
 8014e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e94:	4630      	mov	r0, r6
 8014e96:	f000 f837 	bl	8014f08 <_isatty_r>
 8014e9a:	b128      	cbz	r0, 8014ea8 <__smakebuf_r+0x70>
 8014e9c:	89a3      	ldrh	r3, [r4, #12]
 8014e9e:	f023 0303 	bic.w	r3, r3, #3
 8014ea2:	f043 0301 	orr.w	r3, r3, #1
 8014ea6:	81a3      	strh	r3, [r4, #12]
 8014ea8:	89a3      	ldrh	r3, [r4, #12]
 8014eaa:	431d      	orrs	r5, r3
 8014eac:	81a5      	strh	r5, [r4, #12]
 8014eae:	e7cf      	b.n	8014e50 <__smakebuf_r+0x18>

08014eb0 <memmove>:
 8014eb0:	4288      	cmp	r0, r1
 8014eb2:	b510      	push	{r4, lr}
 8014eb4:	eb01 0402 	add.w	r4, r1, r2
 8014eb8:	d902      	bls.n	8014ec0 <memmove+0x10>
 8014eba:	4284      	cmp	r4, r0
 8014ebc:	4623      	mov	r3, r4
 8014ebe:	d807      	bhi.n	8014ed0 <memmove+0x20>
 8014ec0:	1e43      	subs	r3, r0, #1
 8014ec2:	42a1      	cmp	r1, r4
 8014ec4:	d008      	beq.n	8014ed8 <memmove+0x28>
 8014ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ece:	e7f8      	b.n	8014ec2 <memmove+0x12>
 8014ed0:	4402      	add	r2, r0
 8014ed2:	4601      	mov	r1, r0
 8014ed4:	428a      	cmp	r2, r1
 8014ed6:	d100      	bne.n	8014eda <memmove+0x2a>
 8014ed8:	bd10      	pop	{r4, pc}
 8014eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ee2:	e7f7      	b.n	8014ed4 <memmove+0x24>

08014ee4 <_fstat_r>:
 8014ee4:	b538      	push	{r3, r4, r5, lr}
 8014ee6:	4d07      	ldr	r5, [pc, #28]	@ (8014f04 <_fstat_r+0x20>)
 8014ee8:	2300      	movs	r3, #0
 8014eea:	4604      	mov	r4, r0
 8014eec:	4608      	mov	r0, r1
 8014eee:	4611      	mov	r1, r2
 8014ef0:	602b      	str	r3, [r5, #0]
 8014ef2:	f7ed fa88 	bl	8002406 <_fstat>
 8014ef6:	1c43      	adds	r3, r0, #1
 8014ef8:	d102      	bne.n	8014f00 <_fstat_r+0x1c>
 8014efa:	682b      	ldr	r3, [r5, #0]
 8014efc:	b103      	cbz	r3, 8014f00 <_fstat_r+0x1c>
 8014efe:	6023      	str	r3, [r4, #0]
 8014f00:	bd38      	pop	{r3, r4, r5, pc}
 8014f02:	bf00      	nop
 8014f04:	20000e28 	.word	0x20000e28

08014f08 <_isatty_r>:
 8014f08:	b538      	push	{r3, r4, r5, lr}
 8014f0a:	4d06      	ldr	r5, [pc, #24]	@ (8014f24 <_isatty_r+0x1c>)
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	4604      	mov	r4, r0
 8014f10:	4608      	mov	r0, r1
 8014f12:	602b      	str	r3, [r5, #0]
 8014f14:	f7ed fa87 	bl	8002426 <_isatty>
 8014f18:	1c43      	adds	r3, r0, #1
 8014f1a:	d102      	bne.n	8014f22 <_isatty_r+0x1a>
 8014f1c:	682b      	ldr	r3, [r5, #0]
 8014f1e:	b103      	cbz	r3, 8014f22 <_isatty_r+0x1a>
 8014f20:	6023      	str	r3, [r4, #0]
 8014f22:	bd38      	pop	{r3, r4, r5, pc}
 8014f24:	20000e28 	.word	0x20000e28

08014f28 <memcpy>:
 8014f28:	440a      	add	r2, r1
 8014f2a:	4291      	cmp	r1, r2
 8014f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014f30:	d100      	bne.n	8014f34 <memcpy+0xc>
 8014f32:	4770      	bx	lr
 8014f34:	b510      	push	{r4, lr}
 8014f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f3e:	4291      	cmp	r1, r2
 8014f40:	d1f9      	bne.n	8014f36 <memcpy+0xe>
 8014f42:	bd10      	pop	{r4, pc}

08014f44 <_realloc_r>:
 8014f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f48:	4607      	mov	r7, r0
 8014f4a:	4614      	mov	r4, r2
 8014f4c:	460d      	mov	r5, r1
 8014f4e:	b921      	cbnz	r1, 8014f5a <_realloc_r+0x16>
 8014f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f54:	4611      	mov	r1, r2
 8014f56:	f7fe bed5 	b.w	8013d04 <_malloc_r>
 8014f5a:	b92a      	cbnz	r2, 8014f68 <_realloc_r+0x24>
 8014f5c:	f7ff fa2a 	bl	80143b4 <_free_r>
 8014f60:	4625      	mov	r5, r4
 8014f62:	4628      	mov	r0, r5
 8014f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f68:	f000 f81a 	bl	8014fa0 <_malloc_usable_size_r>
 8014f6c:	4284      	cmp	r4, r0
 8014f6e:	4606      	mov	r6, r0
 8014f70:	d802      	bhi.n	8014f78 <_realloc_r+0x34>
 8014f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014f76:	d8f4      	bhi.n	8014f62 <_realloc_r+0x1e>
 8014f78:	4621      	mov	r1, r4
 8014f7a:	4638      	mov	r0, r7
 8014f7c:	f7fe fec2 	bl	8013d04 <_malloc_r>
 8014f80:	4680      	mov	r8, r0
 8014f82:	b908      	cbnz	r0, 8014f88 <_realloc_r+0x44>
 8014f84:	4645      	mov	r5, r8
 8014f86:	e7ec      	b.n	8014f62 <_realloc_r+0x1e>
 8014f88:	42b4      	cmp	r4, r6
 8014f8a:	4622      	mov	r2, r4
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	bf28      	it	cs
 8014f90:	4632      	movcs	r2, r6
 8014f92:	f7ff ffc9 	bl	8014f28 <memcpy>
 8014f96:	4629      	mov	r1, r5
 8014f98:	4638      	mov	r0, r7
 8014f9a:	f7ff fa0b 	bl	80143b4 <_free_r>
 8014f9e:	e7f1      	b.n	8014f84 <_realloc_r+0x40>

08014fa0 <_malloc_usable_size_r>:
 8014fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fa4:	1f18      	subs	r0, r3, #4
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	bfbc      	itt	lt
 8014faa:	580b      	ldrlt	r3, [r1, r0]
 8014fac:	18c0      	addlt	r0, r0, r3
 8014fae:	4770      	bx	lr

08014fb0 <pow>:
 8014fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fb2:	ed2d 8b02 	vpush	{d8}
 8014fb6:	eeb0 8a40 	vmov.f32	s16, s0
 8014fba:	eef0 8a60 	vmov.f32	s17, s1
 8014fbe:	ec55 4b11 	vmov	r4, r5, d1
 8014fc2:	f000 f8ad 	bl	8015120 <__ieee754_pow>
 8014fc6:	4622      	mov	r2, r4
 8014fc8:	462b      	mov	r3, r5
 8014fca:	4620      	mov	r0, r4
 8014fcc:	4629      	mov	r1, r5
 8014fce:	ec57 6b10 	vmov	r6, r7, d0
 8014fd2:	f7eb fdbb 	bl	8000b4c <__aeabi_dcmpun>
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d13b      	bne.n	8015052 <pow+0xa2>
 8014fda:	ec51 0b18 	vmov	r0, r1, d8
 8014fde:	2200      	movs	r2, #0
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	f7eb fd81 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fe6:	b1b8      	cbz	r0, 8015018 <pow+0x68>
 8014fe8:	2200      	movs	r2, #0
 8014fea:	2300      	movs	r3, #0
 8014fec:	4620      	mov	r0, r4
 8014fee:	4629      	mov	r1, r5
 8014ff0:	f7eb fd7a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d146      	bne.n	8015086 <pow+0xd6>
 8014ff8:	ec45 4b10 	vmov	d0, r4, r5
 8014ffc:	f000 f848 	bl	8015090 <finite>
 8015000:	b338      	cbz	r0, 8015052 <pow+0xa2>
 8015002:	2200      	movs	r2, #0
 8015004:	2300      	movs	r3, #0
 8015006:	4620      	mov	r0, r4
 8015008:	4629      	mov	r1, r5
 801500a:	f7eb fd77 	bl	8000afc <__aeabi_dcmplt>
 801500e:	b300      	cbz	r0, 8015052 <pow+0xa2>
 8015010:	f7ff f9a2 	bl	8014358 <__errno>
 8015014:	2322      	movs	r3, #34	@ 0x22
 8015016:	e01b      	b.n	8015050 <pow+0xa0>
 8015018:	ec47 6b10 	vmov	d0, r6, r7
 801501c:	f000 f838 	bl	8015090 <finite>
 8015020:	b9e0      	cbnz	r0, 801505c <pow+0xac>
 8015022:	eeb0 0a48 	vmov.f32	s0, s16
 8015026:	eef0 0a68 	vmov.f32	s1, s17
 801502a:	f000 f831 	bl	8015090 <finite>
 801502e:	b1a8      	cbz	r0, 801505c <pow+0xac>
 8015030:	ec45 4b10 	vmov	d0, r4, r5
 8015034:	f000 f82c 	bl	8015090 <finite>
 8015038:	b180      	cbz	r0, 801505c <pow+0xac>
 801503a:	4632      	mov	r2, r6
 801503c:	463b      	mov	r3, r7
 801503e:	4630      	mov	r0, r6
 8015040:	4639      	mov	r1, r7
 8015042:	f7eb fd83 	bl	8000b4c <__aeabi_dcmpun>
 8015046:	2800      	cmp	r0, #0
 8015048:	d0e2      	beq.n	8015010 <pow+0x60>
 801504a:	f7ff f985 	bl	8014358 <__errno>
 801504e:	2321      	movs	r3, #33	@ 0x21
 8015050:	6003      	str	r3, [r0, #0]
 8015052:	ecbd 8b02 	vpop	{d8}
 8015056:	ec47 6b10 	vmov	d0, r6, r7
 801505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801505c:	2200      	movs	r2, #0
 801505e:	2300      	movs	r3, #0
 8015060:	4630      	mov	r0, r6
 8015062:	4639      	mov	r1, r7
 8015064:	f7eb fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 8015068:	2800      	cmp	r0, #0
 801506a:	d0f2      	beq.n	8015052 <pow+0xa2>
 801506c:	eeb0 0a48 	vmov.f32	s0, s16
 8015070:	eef0 0a68 	vmov.f32	s1, s17
 8015074:	f000 f80c 	bl	8015090 <finite>
 8015078:	2800      	cmp	r0, #0
 801507a:	d0ea      	beq.n	8015052 <pow+0xa2>
 801507c:	ec45 4b10 	vmov	d0, r4, r5
 8015080:	f000 f806 	bl	8015090 <finite>
 8015084:	e7c3      	b.n	801500e <pow+0x5e>
 8015086:	4f01      	ldr	r7, [pc, #4]	@ (801508c <pow+0xdc>)
 8015088:	2600      	movs	r6, #0
 801508a:	e7e2      	b.n	8015052 <pow+0xa2>
 801508c:	3ff00000 	.word	0x3ff00000

08015090 <finite>:
 8015090:	b082      	sub	sp, #8
 8015092:	ed8d 0b00 	vstr	d0, [sp]
 8015096:	9801      	ldr	r0, [sp, #4]
 8015098:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801509c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80150a0:	0fc0      	lsrs	r0, r0, #31
 80150a2:	b002      	add	sp, #8
 80150a4:	4770      	bx	lr
	...

080150a8 <trunc>:
 80150a8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80150ac:	ec5c bb10 	vmov	fp, ip, d0
 80150b0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80150b4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80150b8:	2913      	cmp	r1, #19
 80150ba:	4664      	mov	r4, ip
 80150bc:	dc14      	bgt.n	80150e8 <trunc+0x40>
 80150be:	2900      	cmp	r1, #0
 80150c0:	bfa4      	itt	ge
 80150c2:	4b15      	ldrge	r3, [pc, #84]	@ (8015118 <trunc+0x70>)
 80150c4:	fa43 f101 	asrge.w	r1, r3, r1
 80150c8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80150cc:	bfad      	iteet	ge
 80150ce:	4021      	andge	r1, r4
 80150d0:	2200      	movlt	r2, #0
 80150d2:	4603      	movlt	r3, r0
 80150d4:	2200      	movge	r2, #0
 80150d6:	bfa8      	it	ge
 80150d8:	ea41 0300 	orrge.w	r3, r1, r0
 80150dc:	4693      	mov	fp, r2
 80150de:	469c      	mov	ip, r3
 80150e0:	ec4c bb10 	vmov	d0, fp, ip
 80150e4:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80150e8:	2933      	cmp	r1, #51	@ 0x33
 80150ea:	dd0b      	ble.n	8015104 <trunc+0x5c>
 80150ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80150f0:	d1f6      	bne.n	80150e0 <trunc+0x38>
 80150f2:	465a      	mov	r2, fp
 80150f4:	4663      	mov	r3, ip
 80150f6:	4658      	mov	r0, fp
 80150f8:	4621      	mov	r1, r4
 80150fa:	f7eb f8d7 	bl	80002ac <__adddf3>
 80150fe:	4683      	mov	fp, r0
 8015100:	468c      	mov	ip, r1
 8015102:	e7ed      	b.n	80150e0 <trunc+0x38>
 8015104:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8015108:	f04f 33ff 	mov.w	r3, #4294967295
 801510c:	40c3      	lsrs	r3, r0
 801510e:	ea2b 0603 	bic.w	r6, fp, r3
 8015112:	46b3      	mov	fp, r6
 8015114:	46a4      	mov	ip, r4
 8015116:	e7e3      	b.n	80150e0 <trunc+0x38>
 8015118:	fff00000 	.word	0xfff00000
 801511c:	00000000 	.word	0x00000000

08015120 <__ieee754_pow>:
 8015120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	b091      	sub	sp, #68	@ 0x44
 8015126:	ed8d 1b00 	vstr	d1, [sp]
 801512a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801512e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015132:	ea5a 0001 	orrs.w	r0, sl, r1
 8015136:	ec57 6b10 	vmov	r6, r7, d0
 801513a:	d113      	bne.n	8015164 <__ieee754_pow+0x44>
 801513c:	19b3      	adds	r3, r6, r6
 801513e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015142:	4152      	adcs	r2, r2
 8015144:	4298      	cmp	r0, r3
 8015146:	4b9a      	ldr	r3, [pc, #616]	@ (80153b0 <__ieee754_pow+0x290>)
 8015148:	4193      	sbcs	r3, r2
 801514a:	f080 84ee 	bcs.w	8015b2a <__ieee754_pow+0xa0a>
 801514e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015152:	4630      	mov	r0, r6
 8015154:	4639      	mov	r1, r7
 8015156:	f7eb f8a9 	bl	80002ac <__adddf3>
 801515a:	ec41 0b10 	vmov	d0, r0, r1
 801515e:	b011      	add	sp, #68	@ 0x44
 8015160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015164:	4a93      	ldr	r2, [pc, #588]	@ (80153b4 <__ieee754_pow+0x294>)
 8015166:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 801516a:	4295      	cmp	r5, r2
 801516c:	46b8      	mov	r8, r7
 801516e:	4633      	mov	r3, r6
 8015170:	d80a      	bhi.n	8015188 <__ieee754_pow+0x68>
 8015172:	d104      	bne.n	801517e <__ieee754_pow+0x5e>
 8015174:	2e00      	cmp	r6, #0
 8015176:	d1ea      	bne.n	801514e <__ieee754_pow+0x2e>
 8015178:	45aa      	cmp	sl, r5
 801517a:	d8e8      	bhi.n	801514e <__ieee754_pow+0x2e>
 801517c:	e001      	b.n	8015182 <__ieee754_pow+0x62>
 801517e:	4592      	cmp	sl, r2
 8015180:	d802      	bhi.n	8015188 <__ieee754_pow+0x68>
 8015182:	4592      	cmp	sl, r2
 8015184:	d10f      	bne.n	80151a6 <__ieee754_pow+0x86>
 8015186:	b171      	cbz	r1, 80151a6 <__ieee754_pow+0x86>
 8015188:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801518c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015190:	ea58 0803 	orrs.w	r8, r8, r3
 8015194:	d1db      	bne.n	801514e <__ieee754_pow+0x2e>
 8015196:	e9dd 3200 	ldrd	r3, r2, [sp]
 801519a:	18db      	adds	r3, r3, r3
 801519c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80151a0:	4152      	adcs	r2, r2
 80151a2:	4598      	cmp	r8, r3
 80151a4:	e7cf      	b.n	8015146 <__ieee754_pow+0x26>
 80151a6:	f1b8 0f00 	cmp.w	r8, #0
 80151aa:	46ab      	mov	fp, r5
 80151ac:	da43      	bge.n	8015236 <__ieee754_pow+0x116>
 80151ae:	4a82      	ldr	r2, [pc, #520]	@ (80153b8 <__ieee754_pow+0x298>)
 80151b0:	4592      	cmp	sl, r2
 80151b2:	d856      	bhi.n	8015262 <__ieee754_pow+0x142>
 80151b4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80151b8:	4592      	cmp	sl, r2
 80151ba:	f240 84c5 	bls.w	8015b48 <__ieee754_pow+0xa28>
 80151be:	ea4f 522a 	mov.w	r2, sl, asr #20
 80151c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80151c6:	2a14      	cmp	r2, #20
 80151c8:	dd18      	ble.n	80151fc <__ieee754_pow+0xdc>
 80151ca:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80151ce:	fa21 f402 	lsr.w	r4, r1, r2
 80151d2:	fa04 f202 	lsl.w	r2, r4, r2
 80151d6:	428a      	cmp	r2, r1
 80151d8:	f040 84b6 	bne.w	8015b48 <__ieee754_pow+0xa28>
 80151dc:	f004 0401 	and.w	r4, r4, #1
 80151e0:	f1c4 0402 	rsb	r4, r4, #2
 80151e4:	2900      	cmp	r1, #0
 80151e6:	d159      	bne.n	801529c <__ieee754_pow+0x17c>
 80151e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80151ec:	d148      	bne.n	8015280 <__ieee754_pow+0x160>
 80151ee:	4632      	mov	r2, r6
 80151f0:	463b      	mov	r3, r7
 80151f2:	4630      	mov	r0, r6
 80151f4:	4639      	mov	r1, r7
 80151f6:	f7eb fa0f 	bl	8000618 <__aeabi_dmul>
 80151fa:	e7ae      	b.n	801515a <__ieee754_pow+0x3a>
 80151fc:	2900      	cmp	r1, #0
 80151fe:	d14c      	bne.n	801529a <__ieee754_pow+0x17a>
 8015200:	f1c2 0214 	rsb	r2, r2, #20
 8015204:	fa4a f402 	asr.w	r4, sl, r2
 8015208:	fa04 f202 	lsl.w	r2, r4, r2
 801520c:	4552      	cmp	r2, sl
 801520e:	f040 8498 	bne.w	8015b42 <__ieee754_pow+0xa22>
 8015212:	f004 0401 	and.w	r4, r4, #1
 8015216:	f1c4 0402 	rsb	r4, r4, #2
 801521a:	4a68      	ldr	r2, [pc, #416]	@ (80153bc <__ieee754_pow+0x29c>)
 801521c:	4592      	cmp	sl, r2
 801521e:	d1e3      	bne.n	80151e8 <__ieee754_pow+0xc8>
 8015220:	f1b9 0f00 	cmp.w	r9, #0
 8015224:	f280 8489 	bge.w	8015b3a <__ieee754_pow+0xa1a>
 8015228:	4964      	ldr	r1, [pc, #400]	@ (80153bc <__ieee754_pow+0x29c>)
 801522a:	4632      	mov	r2, r6
 801522c:	463b      	mov	r3, r7
 801522e:	2000      	movs	r0, #0
 8015230:	f7eb fb1c 	bl	800086c <__aeabi_ddiv>
 8015234:	e791      	b.n	801515a <__ieee754_pow+0x3a>
 8015236:	2400      	movs	r4, #0
 8015238:	bb81      	cbnz	r1, 801529c <__ieee754_pow+0x17c>
 801523a:	4a5e      	ldr	r2, [pc, #376]	@ (80153b4 <__ieee754_pow+0x294>)
 801523c:	4592      	cmp	sl, r2
 801523e:	d1ec      	bne.n	801521a <__ieee754_pow+0xfa>
 8015240:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8015244:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015248:	431a      	orrs	r2, r3
 801524a:	f000 846e 	beq.w	8015b2a <__ieee754_pow+0xa0a>
 801524e:	4b5c      	ldr	r3, [pc, #368]	@ (80153c0 <__ieee754_pow+0x2a0>)
 8015250:	429d      	cmp	r5, r3
 8015252:	d908      	bls.n	8015266 <__ieee754_pow+0x146>
 8015254:	f1b9 0f00 	cmp.w	r9, #0
 8015258:	f280 846b 	bge.w	8015b32 <__ieee754_pow+0xa12>
 801525c:	2000      	movs	r0, #0
 801525e:	2100      	movs	r1, #0
 8015260:	e77b      	b.n	801515a <__ieee754_pow+0x3a>
 8015262:	2402      	movs	r4, #2
 8015264:	e7e8      	b.n	8015238 <__ieee754_pow+0x118>
 8015266:	f1b9 0f00 	cmp.w	r9, #0
 801526a:	f04f 0000 	mov.w	r0, #0
 801526e:	f04f 0100 	mov.w	r1, #0
 8015272:	f6bf af72 	bge.w	801515a <__ieee754_pow+0x3a>
 8015276:	e9dd 0300 	ldrd	r0, r3, [sp]
 801527a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801527e:	e76c      	b.n	801515a <__ieee754_pow+0x3a>
 8015280:	4a50      	ldr	r2, [pc, #320]	@ (80153c4 <__ieee754_pow+0x2a4>)
 8015282:	4591      	cmp	r9, r2
 8015284:	d10a      	bne.n	801529c <__ieee754_pow+0x17c>
 8015286:	f1b8 0f00 	cmp.w	r8, #0
 801528a:	db07      	blt.n	801529c <__ieee754_pow+0x17c>
 801528c:	ec47 6b10 	vmov	d0, r6, r7
 8015290:	b011      	add	sp, #68	@ 0x44
 8015292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015296:	f000 bd4f 	b.w	8015d38 <__ieee754_sqrt>
 801529a:	2400      	movs	r4, #0
 801529c:	ec47 6b10 	vmov	d0, r6, r7
 80152a0:	9302      	str	r3, [sp, #8]
 80152a2:	f000 fc87 	bl	8015bb4 <fabs>
 80152a6:	9b02      	ldr	r3, [sp, #8]
 80152a8:	ec51 0b10 	vmov	r0, r1, d0
 80152ac:	bb43      	cbnz	r3, 8015300 <__ieee754_pow+0x1e0>
 80152ae:	4b43      	ldr	r3, [pc, #268]	@ (80153bc <__ieee754_pow+0x29c>)
 80152b0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d000      	beq.n	80152ba <__ieee754_pow+0x19a>
 80152b8:	bb15      	cbnz	r5, 8015300 <__ieee754_pow+0x1e0>
 80152ba:	f1b9 0f00 	cmp.w	r9, #0
 80152be:	da05      	bge.n	80152cc <__ieee754_pow+0x1ac>
 80152c0:	4602      	mov	r2, r0
 80152c2:	460b      	mov	r3, r1
 80152c4:	2000      	movs	r0, #0
 80152c6:	493d      	ldr	r1, [pc, #244]	@ (80153bc <__ieee754_pow+0x29c>)
 80152c8:	f7eb fad0 	bl	800086c <__aeabi_ddiv>
 80152cc:	f1b8 0f00 	cmp.w	r8, #0
 80152d0:	f6bf af43 	bge.w	801515a <__ieee754_pow+0x3a>
 80152d4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80152d8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80152dc:	4325      	orrs	r5, r4
 80152de:	d108      	bne.n	80152f2 <__ieee754_pow+0x1d2>
 80152e0:	4602      	mov	r2, r0
 80152e2:	460b      	mov	r3, r1
 80152e4:	4610      	mov	r0, r2
 80152e6:	4619      	mov	r1, r3
 80152e8:	f7ea ffde 	bl	80002a8 <__aeabi_dsub>
 80152ec:	4602      	mov	r2, r0
 80152ee:	460b      	mov	r3, r1
 80152f0:	e79e      	b.n	8015230 <__ieee754_pow+0x110>
 80152f2:	2c01      	cmp	r4, #1
 80152f4:	f47f af31 	bne.w	801515a <__ieee754_pow+0x3a>
 80152f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80152fc:	4619      	mov	r1, r3
 80152fe:	e72c      	b.n	801515a <__ieee754_pow+0x3a>
 8015300:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8015304:	3b01      	subs	r3, #1
 8015306:	ea53 0204 	orrs.w	r2, r3, r4
 801530a:	d102      	bne.n	8015312 <__ieee754_pow+0x1f2>
 801530c:	4632      	mov	r2, r6
 801530e:	463b      	mov	r3, r7
 8015310:	e7e8      	b.n	80152e4 <__ieee754_pow+0x1c4>
 8015312:	3c01      	subs	r4, #1
 8015314:	431c      	orrs	r4, r3
 8015316:	d016      	beq.n	8015346 <__ieee754_pow+0x226>
 8015318:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80153a0 <__ieee754_pow+0x280>
 801531c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015320:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015324:	f240 8110 	bls.w	8015548 <__ieee754_pow+0x428>
 8015328:	4b27      	ldr	r3, [pc, #156]	@ (80153c8 <__ieee754_pow+0x2a8>)
 801532a:	459a      	cmp	sl, r3
 801532c:	4b24      	ldr	r3, [pc, #144]	@ (80153c0 <__ieee754_pow+0x2a0>)
 801532e:	d916      	bls.n	801535e <__ieee754_pow+0x23e>
 8015330:	429d      	cmp	r5, r3
 8015332:	d80b      	bhi.n	801534c <__ieee754_pow+0x22c>
 8015334:	f1b9 0f00 	cmp.w	r9, #0
 8015338:	da0b      	bge.n	8015352 <__ieee754_pow+0x232>
 801533a:	2000      	movs	r0, #0
 801533c:	b011      	add	sp, #68	@ 0x44
 801533e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015342:	f000 bcf1 	b.w	8015d28 <__math_oflow>
 8015346:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80153a8 <__ieee754_pow+0x288>
 801534a:	e7e7      	b.n	801531c <__ieee754_pow+0x1fc>
 801534c:	f1b9 0f00 	cmp.w	r9, #0
 8015350:	dcf3      	bgt.n	801533a <__ieee754_pow+0x21a>
 8015352:	2000      	movs	r0, #0
 8015354:	b011      	add	sp, #68	@ 0x44
 8015356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535a:	f000 bcdd 	b.w	8015d18 <__math_uflow>
 801535e:	429d      	cmp	r5, r3
 8015360:	d20c      	bcs.n	801537c <__ieee754_pow+0x25c>
 8015362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015366:	2200      	movs	r2, #0
 8015368:	2300      	movs	r3, #0
 801536a:	f7eb fbc7 	bl	8000afc <__aeabi_dcmplt>
 801536e:	3800      	subs	r0, #0
 8015370:	bf18      	it	ne
 8015372:	2001      	movne	r0, #1
 8015374:	f1b9 0f00 	cmp.w	r9, #0
 8015378:	daec      	bge.n	8015354 <__ieee754_pow+0x234>
 801537a:	e7df      	b.n	801533c <__ieee754_pow+0x21c>
 801537c:	4b0f      	ldr	r3, [pc, #60]	@ (80153bc <__ieee754_pow+0x29c>)
 801537e:	429d      	cmp	r5, r3
 8015380:	f04f 0200 	mov.w	r2, #0
 8015384:	d922      	bls.n	80153cc <__ieee754_pow+0x2ac>
 8015386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801538a:	2300      	movs	r3, #0
 801538c:	f7eb fbb6 	bl	8000afc <__aeabi_dcmplt>
 8015390:	3800      	subs	r0, #0
 8015392:	bf18      	it	ne
 8015394:	2001      	movne	r0, #1
 8015396:	f1b9 0f00 	cmp.w	r9, #0
 801539a:	dccf      	bgt.n	801533c <__ieee754_pow+0x21c>
 801539c:	e7da      	b.n	8015354 <__ieee754_pow+0x234>
 801539e:	bf00      	nop
 80153a0:	00000000 	.word	0x00000000
 80153a4:	3ff00000 	.word	0x3ff00000
 80153a8:	00000000 	.word	0x00000000
 80153ac:	bff00000 	.word	0xbff00000
 80153b0:	fff00000 	.word	0xfff00000
 80153b4:	7ff00000 	.word	0x7ff00000
 80153b8:	433fffff 	.word	0x433fffff
 80153bc:	3ff00000 	.word	0x3ff00000
 80153c0:	3fefffff 	.word	0x3fefffff
 80153c4:	3fe00000 	.word	0x3fe00000
 80153c8:	43f00000 	.word	0x43f00000
 80153cc:	4b5a      	ldr	r3, [pc, #360]	@ (8015538 <__ieee754_pow+0x418>)
 80153ce:	f7ea ff6b 	bl	80002a8 <__aeabi_dsub>
 80153d2:	a351      	add	r3, pc, #324	@ (adr r3, 8015518 <__ieee754_pow+0x3f8>)
 80153d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d8:	4604      	mov	r4, r0
 80153da:	460d      	mov	r5, r1
 80153dc:	f7eb f91c 	bl	8000618 <__aeabi_dmul>
 80153e0:	a34f      	add	r3, pc, #316	@ (adr r3, 8015520 <__ieee754_pow+0x400>)
 80153e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e6:	4606      	mov	r6, r0
 80153e8:	460f      	mov	r7, r1
 80153ea:	4620      	mov	r0, r4
 80153ec:	4629      	mov	r1, r5
 80153ee:	f7eb f913 	bl	8000618 <__aeabi_dmul>
 80153f2:	4b52      	ldr	r3, [pc, #328]	@ (801553c <__ieee754_pow+0x41c>)
 80153f4:	4682      	mov	sl, r0
 80153f6:	468b      	mov	fp, r1
 80153f8:	2200      	movs	r2, #0
 80153fa:	4620      	mov	r0, r4
 80153fc:	4629      	mov	r1, r5
 80153fe:	f7eb f90b 	bl	8000618 <__aeabi_dmul>
 8015402:	4602      	mov	r2, r0
 8015404:	460b      	mov	r3, r1
 8015406:	a148      	add	r1, pc, #288	@ (adr r1, 8015528 <__ieee754_pow+0x408>)
 8015408:	e9d1 0100 	ldrd	r0, r1, [r1]
 801540c:	f7ea ff4c 	bl	80002a8 <__aeabi_dsub>
 8015410:	4622      	mov	r2, r4
 8015412:	462b      	mov	r3, r5
 8015414:	f7eb f900 	bl	8000618 <__aeabi_dmul>
 8015418:	4602      	mov	r2, r0
 801541a:	460b      	mov	r3, r1
 801541c:	2000      	movs	r0, #0
 801541e:	4948      	ldr	r1, [pc, #288]	@ (8015540 <__ieee754_pow+0x420>)
 8015420:	f7ea ff42 	bl	80002a8 <__aeabi_dsub>
 8015424:	4622      	mov	r2, r4
 8015426:	4680      	mov	r8, r0
 8015428:	4689      	mov	r9, r1
 801542a:	462b      	mov	r3, r5
 801542c:	4620      	mov	r0, r4
 801542e:	4629      	mov	r1, r5
 8015430:	f7eb f8f2 	bl	8000618 <__aeabi_dmul>
 8015434:	4602      	mov	r2, r0
 8015436:	460b      	mov	r3, r1
 8015438:	4640      	mov	r0, r8
 801543a:	4649      	mov	r1, r9
 801543c:	f7eb f8ec 	bl	8000618 <__aeabi_dmul>
 8015440:	a33b      	add	r3, pc, #236	@ (adr r3, 8015530 <__ieee754_pow+0x410>)
 8015442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015446:	f7eb f8e7 	bl	8000618 <__aeabi_dmul>
 801544a:	4602      	mov	r2, r0
 801544c:	460b      	mov	r3, r1
 801544e:	4650      	mov	r0, sl
 8015450:	4659      	mov	r1, fp
 8015452:	f7ea ff29 	bl	80002a8 <__aeabi_dsub>
 8015456:	4602      	mov	r2, r0
 8015458:	460b      	mov	r3, r1
 801545a:	4680      	mov	r8, r0
 801545c:	4689      	mov	r9, r1
 801545e:	4630      	mov	r0, r6
 8015460:	4639      	mov	r1, r7
 8015462:	f7ea ff23 	bl	80002ac <__adddf3>
 8015466:	2400      	movs	r4, #0
 8015468:	4632      	mov	r2, r6
 801546a:	463b      	mov	r3, r7
 801546c:	4620      	mov	r0, r4
 801546e:	460d      	mov	r5, r1
 8015470:	f7ea ff1a 	bl	80002a8 <__aeabi_dsub>
 8015474:	4602      	mov	r2, r0
 8015476:	460b      	mov	r3, r1
 8015478:	4640      	mov	r0, r8
 801547a:	4649      	mov	r1, r9
 801547c:	f7ea ff14 	bl	80002a8 <__aeabi_dsub>
 8015480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015484:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015488:	2300      	movs	r3, #0
 801548a:	9304      	str	r3, [sp, #16]
 801548c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015490:	4606      	mov	r6, r0
 8015492:	460f      	mov	r7, r1
 8015494:	465b      	mov	r3, fp
 8015496:	4652      	mov	r2, sl
 8015498:	e9dd 0100 	ldrd	r0, r1, [sp]
 801549c:	f7ea ff04 	bl	80002a8 <__aeabi_dsub>
 80154a0:	4622      	mov	r2, r4
 80154a2:	462b      	mov	r3, r5
 80154a4:	f7eb f8b8 	bl	8000618 <__aeabi_dmul>
 80154a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154ac:	4680      	mov	r8, r0
 80154ae:	4689      	mov	r9, r1
 80154b0:	4630      	mov	r0, r6
 80154b2:	4639      	mov	r1, r7
 80154b4:	f7eb f8b0 	bl	8000618 <__aeabi_dmul>
 80154b8:	4602      	mov	r2, r0
 80154ba:	460b      	mov	r3, r1
 80154bc:	4640      	mov	r0, r8
 80154be:	4649      	mov	r1, r9
 80154c0:	f7ea fef4 	bl	80002ac <__adddf3>
 80154c4:	465b      	mov	r3, fp
 80154c6:	4606      	mov	r6, r0
 80154c8:	460f      	mov	r7, r1
 80154ca:	4652      	mov	r2, sl
 80154cc:	4620      	mov	r0, r4
 80154ce:	4629      	mov	r1, r5
 80154d0:	f7eb f8a2 	bl	8000618 <__aeabi_dmul>
 80154d4:	460b      	mov	r3, r1
 80154d6:	4602      	mov	r2, r0
 80154d8:	4680      	mov	r8, r0
 80154da:	4689      	mov	r9, r1
 80154dc:	4630      	mov	r0, r6
 80154de:	4639      	mov	r1, r7
 80154e0:	f7ea fee4 	bl	80002ac <__adddf3>
 80154e4:	4b17      	ldr	r3, [pc, #92]	@ (8015544 <__ieee754_pow+0x424>)
 80154e6:	4299      	cmp	r1, r3
 80154e8:	4604      	mov	r4, r0
 80154ea:	460d      	mov	r5, r1
 80154ec:	468b      	mov	fp, r1
 80154ee:	f340 820b 	ble.w	8015908 <__ieee754_pow+0x7e8>
 80154f2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80154f6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80154fa:	4303      	orrs	r3, r0
 80154fc:	f000 81ea 	beq.w	80158d4 <__ieee754_pow+0x7b4>
 8015500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015504:	2200      	movs	r2, #0
 8015506:	2300      	movs	r3, #0
 8015508:	f7eb faf8 	bl	8000afc <__aeabi_dcmplt>
 801550c:	3800      	subs	r0, #0
 801550e:	bf18      	it	ne
 8015510:	2001      	movne	r0, #1
 8015512:	e713      	b.n	801533c <__ieee754_pow+0x21c>
 8015514:	f3af 8000 	nop.w
 8015518:	60000000 	.word	0x60000000
 801551c:	3ff71547 	.word	0x3ff71547
 8015520:	f85ddf44 	.word	0xf85ddf44
 8015524:	3e54ae0b 	.word	0x3e54ae0b
 8015528:	55555555 	.word	0x55555555
 801552c:	3fd55555 	.word	0x3fd55555
 8015530:	652b82fe 	.word	0x652b82fe
 8015534:	3ff71547 	.word	0x3ff71547
 8015538:	3ff00000 	.word	0x3ff00000
 801553c:	3fd00000 	.word	0x3fd00000
 8015540:	3fe00000 	.word	0x3fe00000
 8015544:	408fffff 	.word	0x408fffff
 8015548:	4bd5      	ldr	r3, [pc, #852]	@ (80158a0 <__ieee754_pow+0x780>)
 801554a:	ea08 0303 	and.w	r3, r8, r3
 801554e:	2200      	movs	r2, #0
 8015550:	b92b      	cbnz	r3, 801555e <__ieee754_pow+0x43e>
 8015552:	4bd4      	ldr	r3, [pc, #848]	@ (80158a4 <__ieee754_pow+0x784>)
 8015554:	f7eb f860 	bl	8000618 <__aeabi_dmul>
 8015558:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801555c:	468b      	mov	fp, r1
 801555e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8015562:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015566:	4413      	add	r3, r2
 8015568:	930a      	str	r3, [sp, #40]	@ 0x28
 801556a:	4bcf      	ldr	r3, [pc, #828]	@ (80158a8 <__ieee754_pow+0x788>)
 801556c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8015570:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8015574:	459b      	cmp	fp, r3
 8015576:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801557a:	dd08      	ble.n	801558e <__ieee754_pow+0x46e>
 801557c:	4bcb      	ldr	r3, [pc, #812]	@ (80158ac <__ieee754_pow+0x78c>)
 801557e:	459b      	cmp	fp, r3
 8015580:	f340 81a5 	ble.w	80158ce <__ieee754_pow+0x7ae>
 8015584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015586:	3301      	adds	r3, #1
 8015588:	930a      	str	r3, [sp, #40]	@ 0x28
 801558a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801558e:	f04f 0a00 	mov.w	sl, #0
 8015592:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015598:	4bc5      	ldr	r3, [pc, #788]	@ (80158b0 <__ieee754_pow+0x790>)
 801559a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801559e:	ed93 7b00 	vldr	d7, [r3]
 80155a2:	4629      	mov	r1, r5
 80155a4:	ec53 2b17 	vmov	r2, r3, d7
 80155a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80155ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80155b0:	f7ea fe7a 	bl	80002a8 <__aeabi_dsub>
 80155b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80155b8:	4606      	mov	r6, r0
 80155ba:	460f      	mov	r7, r1
 80155bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80155c0:	f7ea fe74 	bl	80002ac <__adddf3>
 80155c4:	4602      	mov	r2, r0
 80155c6:	460b      	mov	r3, r1
 80155c8:	2000      	movs	r0, #0
 80155ca:	49ba      	ldr	r1, [pc, #744]	@ (80158b4 <__ieee754_pow+0x794>)
 80155cc:	f7eb f94e 	bl	800086c <__aeabi_ddiv>
 80155d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	4630      	mov	r0, r6
 80155da:	4639      	mov	r1, r7
 80155dc:	f7eb f81c 	bl	8000618 <__aeabi_dmul>
 80155e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80155e4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80155e8:	106d      	asrs	r5, r5, #1
 80155ea:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80155ee:	f04f 0b00 	mov.w	fp, #0
 80155f2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80155f6:	4661      	mov	r1, ip
 80155f8:	2200      	movs	r2, #0
 80155fa:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80155fe:	4658      	mov	r0, fp
 8015600:	46e1      	mov	r9, ip
 8015602:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8015606:	4614      	mov	r4, r2
 8015608:	461d      	mov	r5, r3
 801560a:	f7eb f805 	bl	8000618 <__aeabi_dmul>
 801560e:	4602      	mov	r2, r0
 8015610:	460b      	mov	r3, r1
 8015612:	4630      	mov	r0, r6
 8015614:	4639      	mov	r1, r7
 8015616:	f7ea fe47 	bl	80002a8 <__aeabi_dsub>
 801561a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801561e:	4606      	mov	r6, r0
 8015620:	460f      	mov	r7, r1
 8015622:	4620      	mov	r0, r4
 8015624:	4629      	mov	r1, r5
 8015626:	f7ea fe3f 	bl	80002a8 <__aeabi_dsub>
 801562a:	4602      	mov	r2, r0
 801562c:	460b      	mov	r3, r1
 801562e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015632:	f7ea fe39 	bl	80002a8 <__aeabi_dsub>
 8015636:	465a      	mov	r2, fp
 8015638:	464b      	mov	r3, r9
 801563a:	f7ea ffed 	bl	8000618 <__aeabi_dmul>
 801563e:	4602      	mov	r2, r0
 8015640:	460b      	mov	r3, r1
 8015642:	4630      	mov	r0, r6
 8015644:	4639      	mov	r1, r7
 8015646:	f7ea fe2f 	bl	80002a8 <__aeabi_dsub>
 801564a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801564e:	f7ea ffe3 	bl	8000618 <__aeabi_dmul>
 8015652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015656:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801565a:	4610      	mov	r0, r2
 801565c:	4619      	mov	r1, r3
 801565e:	f7ea ffdb 	bl	8000618 <__aeabi_dmul>
 8015662:	a37d      	add	r3, pc, #500	@ (adr r3, 8015858 <__ieee754_pow+0x738>)
 8015664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015668:	4604      	mov	r4, r0
 801566a:	460d      	mov	r5, r1
 801566c:	f7ea ffd4 	bl	8000618 <__aeabi_dmul>
 8015670:	a37b      	add	r3, pc, #492	@ (adr r3, 8015860 <__ieee754_pow+0x740>)
 8015672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015676:	f7ea fe19 	bl	80002ac <__adddf3>
 801567a:	4622      	mov	r2, r4
 801567c:	462b      	mov	r3, r5
 801567e:	f7ea ffcb 	bl	8000618 <__aeabi_dmul>
 8015682:	a379      	add	r3, pc, #484	@ (adr r3, 8015868 <__ieee754_pow+0x748>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7ea fe10 	bl	80002ac <__adddf3>
 801568c:	4622      	mov	r2, r4
 801568e:	462b      	mov	r3, r5
 8015690:	f7ea ffc2 	bl	8000618 <__aeabi_dmul>
 8015694:	a376      	add	r3, pc, #472	@ (adr r3, 8015870 <__ieee754_pow+0x750>)
 8015696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569a:	f7ea fe07 	bl	80002ac <__adddf3>
 801569e:	4622      	mov	r2, r4
 80156a0:	462b      	mov	r3, r5
 80156a2:	f7ea ffb9 	bl	8000618 <__aeabi_dmul>
 80156a6:	a374      	add	r3, pc, #464	@ (adr r3, 8015878 <__ieee754_pow+0x758>)
 80156a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ac:	f7ea fdfe 	bl	80002ac <__adddf3>
 80156b0:	4622      	mov	r2, r4
 80156b2:	462b      	mov	r3, r5
 80156b4:	f7ea ffb0 	bl	8000618 <__aeabi_dmul>
 80156b8:	a371      	add	r3, pc, #452	@ (adr r3, 8015880 <__ieee754_pow+0x760>)
 80156ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156be:	f7ea fdf5 	bl	80002ac <__adddf3>
 80156c2:	4622      	mov	r2, r4
 80156c4:	4606      	mov	r6, r0
 80156c6:	460f      	mov	r7, r1
 80156c8:	462b      	mov	r3, r5
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	f7ea ffa3 	bl	8000618 <__aeabi_dmul>
 80156d2:	4602      	mov	r2, r0
 80156d4:	460b      	mov	r3, r1
 80156d6:	4630      	mov	r0, r6
 80156d8:	4639      	mov	r1, r7
 80156da:	f7ea ff9d 	bl	8000618 <__aeabi_dmul>
 80156de:	465a      	mov	r2, fp
 80156e0:	4604      	mov	r4, r0
 80156e2:	460d      	mov	r5, r1
 80156e4:	464b      	mov	r3, r9
 80156e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156ea:	f7ea fddf 	bl	80002ac <__adddf3>
 80156ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80156f2:	f7ea ff91 	bl	8000618 <__aeabi_dmul>
 80156f6:	4622      	mov	r2, r4
 80156f8:	462b      	mov	r3, r5
 80156fa:	f7ea fdd7 	bl	80002ac <__adddf3>
 80156fe:	465a      	mov	r2, fp
 8015700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015704:	464b      	mov	r3, r9
 8015706:	4658      	mov	r0, fp
 8015708:	4649      	mov	r1, r9
 801570a:	f7ea ff85 	bl	8000618 <__aeabi_dmul>
 801570e:	4b6a      	ldr	r3, [pc, #424]	@ (80158b8 <__ieee754_pow+0x798>)
 8015710:	2200      	movs	r2, #0
 8015712:	4606      	mov	r6, r0
 8015714:	460f      	mov	r7, r1
 8015716:	f7ea fdc9 	bl	80002ac <__adddf3>
 801571a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801571e:	f7ea fdc5 	bl	80002ac <__adddf3>
 8015722:	46d8      	mov	r8, fp
 8015724:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8015728:	460d      	mov	r5, r1
 801572a:	465a      	mov	r2, fp
 801572c:	460b      	mov	r3, r1
 801572e:	4640      	mov	r0, r8
 8015730:	4649      	mov	r1, r9
 8015732:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8015736:	f7ea ff6f 	bl	8000618 <__aeabi_dmul>
 801573a:	465c      	mov	r4, fp
 801573c:	4680      	mov	r8, r0
 801573e:	4689      	mov	r9, r1
 8015740:	4b5d      	ldr	r3, [pc, #372]	@ (80158b8 <__ieee754_pow+0x798>)
 8015742:	2200      	movs	r2, #0
 8015744:	4620      	mov	r0, r4
 8015746:	4629      	mov	r1, r5
 8015748:	f7ea fdae 	bl	80002a8 <__aeabi_dsub>
 801574c:	4632      	mov	r2, r6
 801574e:	463b      	mov	r3, r7
 8015750:	f7ea fdaa 	bl	80002a8 <__aeabi_dsub>
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801575c:	f7ea fda4 	bl	80002a8 <__aeabi_dsub>
 8015760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015764:	f7ea ff58 	bl	8000618 <__aeabi_dmul>
 8015768:	4622      	mov	r2, r4
 801576a:	4606      	mov	r6, r0
 801576c:	460f      	mov	r7, r1
 801576e:	462b      	mov	r3, r5
 8015770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015774:	f7ea ff50 	bl	8000618 <__aeabi_dmul>
 8015778:	4602      	mov	r2, r0
 801577a:	460b      	mov	r3, r1
 801577c:	4630      	mov	r0, r6
 801577e:	4639      	mov	r1, r7
 8015780:	f7ea fd94 	bl	80002ac <__adddf3>
 8015784:	4606      	mov	r6, r0
 8015786:	460f      	mov	r7, r1
 8015788:	4602      	mov	r2, r0
 801578a:	460b      	mov	r3, r1
 801578c:	4640      	mov	r0, r8
 801578e:	4649      	mov	r1, r9
 8015790:	f7ea fd8c 	bl	80002ac <__adddf3>
 8015794:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8015798:	a33b      	add	r3, pc, #236	@ (adr r3, 8015888 <__ieee754_pow+0x768>)
 801579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579e:	4658      	mov	r0, fp
 80157a0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80157a4:	460d      	mov	r5, r1
 80157a6:	f7ea ff37 	bl	8000618 <__aeabi_dmul>
 80157aa:	465c      	mov	r4, fp
 80157ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157b0:	4642      	mov	r2, r8
 80157b2:	464b      	mov	r3, r9
 80157b4:	4620      	mov	r0, r4
 80157b6:	4629      	mov	r1, r5
 80157b8:	f7ea fd76 	bl	80002a8 <__aeabi_dsub>
 80157bc:	4602      	mov	r2, r0
 80157be:	460b      	mov	r3, r1
 80157c0:	4630      	mov	r0, r6
 80157c2:	4639      	mov	r1, r7
 80157c4:	f7ea fd70 	bl	80002a8 <__aeabi_dsub>
 80157c8:	a331      	add	r3, pc, #196	@ (adr r3, 8015890 <__ieee754_pow+0x770>)
 80157ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ce:	f7ea ff23 	bl	8000618 <__aeabi_dmul>
 80157d2:	a331      	add	r3, pc, #196	@ (adr r3, 8015898 <__ieee754_pow+0x778>)
 80157d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d8:	4606      	mov	r6, r0
 80157da:	460f      	mov	r7, r1
 80157dc:	4620      	mov	r0, r4
 80157de:	4629      	mov	r1, r5
 80157e0:	f7ea ff1a 	bl	8000618 <__aeabi_dmul>
 80157e4:	4602      	mov	r2, r0
 80157e6:	460b      	mov	r3, r1
 80157e8:	4630      	mov	r0, r6
 80157ea:	4639      	mov	r1, r7
 80157ec:	f7ea fd5e 	bl	80002ac <__adddf3>
 80157f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80157f2:	4b32      	ldr	r3, [pc, #200]	@ (80158bc <__ieee754_pow+0x79c>)
 80157f4:	4413      	add	r3, r2
 80157f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157fa:	f7ea fd57 	bl	80002ac <__adddf3>
 80157fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015802:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015804:	f7ea fe9e 	bl	8000544 <__aeabi_i2d>
 8015808:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801580a:	4b2d      	ldr	r3, [pc, #180]	@ (80158c0 <__ieee754_pow+0x7a0>)
 801580c:	4413      	add	r3, r2
 801580e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015812:	4606      	mov	r6, r0
 8015814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015818:	460f      	mov	r7, r1
 801581a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801581e:	f7ea fd45 	bl	80002ac <__adddf3>
 8015822:	4642      	mov	r2, r8
 8015824:	464b      	mov	r3, r9
 8015826:	f7ea fd41 	bl	80002ac <__adddf3>
 801582a:	4632      	mov	r2, r6
 801582c:	463b      	mov	r3, r7
 801582e:	f7ea fd3d 	bl	80002ac <__adddf3>
 8015832:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8015836:	4632      	mov	r2, r6
 8015838:	463b      	mov	r3, r7
 801583a:	4658      	mov	r0, fp
 801583c:	460d      	mov	r5, r1
 801583e:	f7ea fd33 	bl	80002a8 <__aeabi_dsub>
 8015842:	4642      	mov	r2, r8
 8015844:	464b      	mov	r3, r9
 8015846:	f7ea fd2f 	bl	80002a8 <__aeabi_dsub>
 801584a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801584e:	f7ea fd2b 	bl	80002a8 <__aeabi_dsub>
 8015852:	465c      	mov	r4, fp
 8015854:	e036      	b.n	80158c4 <__ieee754_pow+0x7a4>
 8015856:	bf00      	nop
 8015858:	4a454eef 	.word	0x4a454eef
 801585c:	3fca7e28 	.word	0x3fca7e28
 8015860:	93c9db65 	.word	0x93c9db65
 8015864:	3fcd864a 	.word	0x3fcd864a
 8015868:	a91d4101 	.word	0xa91d4101
 801586c:	3fd17460 	.word	0x3fd17460
 8015870:	518f264d 	.word	0x518f264d
 8015874:	3fd55555 	.word	0x3fd55555
 8015878:	db6fabff 	.word	0xdb6fabff
 801587c:	3fdb6db6 	.word	0x3fdb6db6
 8015880:	33333303 	.word	0x33333303
 8015884:	3fe33333 	.word	0x3fe33333
 8015888:	e0000000 	.word	0xe0000000
 801588c:	3feec709 	.word	0x3feec709
 8015890:	dc3a03fd 	.word	0xdc3a03fd
 8015894:	3feec709 	.word	0x3feec709
 8015898:	145b01f5 	.word	0x145b01f5
 801589c:	be3e2fe0 	.word	0xbe3e2fe0
 80158a0:	7ff00000 	.word	0x7ff00000
 80158a4:	43400000 	.word	0x43400000
 80158a8:	0003988e 	.word	0x0003988e
 80158ac:	000bb679 	.word	0x000bb679
 80158b0:	08016c70 	.word	0x08016c70
 80158b4:	3ff00000 	.word	0x3ff00000
 80158b8:	40080000 	.word	0x40080000
 80158bc:	08016c50 	.word	0x08016c50
 80158c0:	08016c60 	.word	0x08016c60
 80158c4:	4602      	mov	r2, r0
 80158c6:	460b      	mov	r3, r1
 80158c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80158cc:	e5d6      	b.n	801547c <__ieee754_pow+0x35c>
 80158ce:	f04f 0a01 	mov.w	sl, #1
 80158d2:	e65e      	b.n	8015592 <__ieee754_pow+0x472>
 80158d4:	a3b5      	add	r3, pc, #724	@ (adr r3, 8015bac <__ieee754_pow+0xa8c>)
 80158d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158da:	4630      	mov	r0, r6
 80158dc:	4639      	mov	r1, r7
 80158de:	f7ea fce5 	bl	80002ac <__adddf3>
 80158e2:	4642      	mov	r2, r8
 80158e4:	e9cd 0100 	strd	r0, r1, [sp]
 80158e8:	464b      	mov	r3, r9
 80158ea:	4620      	mov	r0, r4
 80158ec:	4629      	mov	r1, r5
 80158ee:	f7ea fcdb 	bl	80002a8 <__aeabi_dsub>
 80158f2:	4602      	mov	r2, r0
 80158f4:	460b      	mov	r3, r1
 80158f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158fa:	f7eb f91d 	bl	8000b38 <__aeabi_dcmpgt>
 80158fe:	2800      	cmp	r0, #0
 8015900:	f47f adfe 	bne.w	8015500 <__ieee754_pow+0x3e0>
 8015904:	4ba2      	ldr	r3, [pc, #648]	@ (8015b90 <__ieee754_pow+0xa70>)
 8015906:	e022      	b.n	801594e <__ieee754_pow+0x82e>
 8015908:	4ca2      	ldr	r4, [pc, #648]	@ (8015b94 <__ieee754_pow+0xa74>)
 801590a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801590e:	42a3      	cmp	r3, r4
 8015910:	d919      	bls.n	8015946 <__ieee754_pow+0x826>
 8015912:	4ba1      	ldr	r3, [pc, #644]	@ (8015b98 <__ieee754_pow+0xa78>)
 8015914:	440b      	add	r3, r1
 8015916:	4303      	orrs	r3, r0
 8015918:	d009      	beq.n	801592e <__ieee754_pow+0x80e>
 801591a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801591e:	2200      	movs	r2, #0
 8015920:	2300      	movs	r3, #0
 8015922:	f7eb f8eb 	bl	8000afc <__aeabi_dcmplt>
 8015926:	3800      	subs	r0, #0
 8015928:	bf18      	it	ne
 801592a:	2001      	movne	r0, #1
 801592c:	e512      	b.n	8015354 <__ieee754_pow+0x234>
 801592e:	4642      	mov	r2, r8
 8015930:	464b      	mov	r3, r9
 8015932:	f7ea fcb9 	bl	80002a8 <__aeabi_dsub>
 8015936:	4632      	mov	r2, r6
 8015938:	463b      	mov	r3, r7
 801593a:	f7eb f8f3 	bl	8000b24 <__aeabi_dcmpge>
 801593e:	2800      	cmp	r0, #0
 8015940:	d1eb      	bne.n	801591a <__ieee754_pow+0x7fa>
 8015942:	4b96      	ldr	r3, [pc, #600]	@ (8015b9c <__ieee754_pow+0xa7c>)
 8015944:	e003      	b.n	801594e <__ieee754_pow+0x82e>
 8015946:	4a96      	ldr	r2, [pc, #600]	@ (8015ba0 <__ieee754_pow+0xa80>)
 8015948:	4293      	cmp	r3, r2
 801594a:	f240 80e7 	bls.w	8015b1c <__ieee754_pow+0x9fc>
 801594e:	151b      	asrs	r3, r3, #20
 8015950:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8015954:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8015958:	fa4a fa03 	asr.w	sl, sl, r3
 801595c:	44da      	add	sl, fp
 801595e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8015962:	4890      	ldr	r0, [pc, #576]	@ (8015ba4 <__ieee754_pow+0xa84>)
 8015964:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8015968:	4108      	asrs	r0, r1
 801596a:	ea00 030a 	and.w	r3, r0, sl
 801596e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015972:	f1c1 0114 	rsb	r1, r1, #20
 8015976:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801597a:	fa4a fa01 	asr.w	sl, sl, r1
 801597e:	f1bb 0f00 	cmp.w	fp, #0
 8015982:	4640      	mov	r0, r8
 8015984:	4649      	mov	r1, r9
 8015986:	f04f 0200 	mov.w	r2, #0
 801598a:	bfb8      	it	lt
 801598c:	f1ca 0a00 	rsblt	sl, sl, #0
 8015990:	f7ea fc8a 	bl	80002a8 <__aeabi_dsub>
 8015994:	4680      	mov	r8, r0
 8015996:	4689      	mov	r9, r1
 8015998:	4632      	mov	r2, r6
 801599a:	463b      	mov	r3, r7
 801599c:	4640      	mov	r0, r8
 801599e:	4649      	mov	r1, r9
 80159a0:	f7ea fc84 	bl	80002ac <__adddf3>
 80159a4:	2400      	movs	r4, #0
 80159a6:	a36a      	add	r3, pc, #424	@ (adr r3, 8015b50 <__ieee754_pow+0xa30>)
 80159a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ac:	4620      	mov	r0, r4
 80159ae:	460d      	mov	r5, r1
 80159b0:	f7ea fe32 	bl	8000618 <__aeabi_dmul>
 80159b4:	4642      	mov	r2, r8
 80159b6:	e9cd 0100 	strd	r0, r1, [sp]
 80159ba:	464b      	mov	r3, r9
 80159bc:	4620      	mov	r0, r4
 80159be:	4629      	mov	r1, r5
 80159c0:	f7ea fc72 	bl	80002a8 <__aeabi_dsub>
 80159c4:	4602      	mov	r2, r0
 80159c6:	460b      	mov	r3, r1
 80159c8:	4630      	mov	r0, r6
 80159ca:	4639      	mov	r1, r7
 80159cc:	f7ea fc6c 	bl	80002a8 <__aeabi_dsub>
 80159d0:	a361      	add	r3, pc, #388	@ (adr r3, 8015b58 <__ieee754_pow+0xa38>)
 80159d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d6:	f7ea fe1f 	bl	8000618 <__aeabi_dmul>
 80159da:	a361      	add	r3, pc, #388	@ (adr r3, 8015b60 <__ieee754_pow+0xa40>)
 80159dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e0:	4680      	mov	r8, r0
 80159e2:	4689      	mov	r9, r1
 80159e4:	4620      	mov	r0, r4
 80159e6:	4629      	mov	r1, r5
 80159e8:	f7ea fe16 	bl	8000618 <__aeabi_dmul>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4640      	mov	r0, r8
 80159f2:	4649      	mov	r1, r9
 80159f4:	f7ea fc5a 	bl	80002ac <__adddf3>
 80159f8:	4604      	mov	r4, r0
 80159fa:	460d      	mov	r5, r1
 80159fc:	4602      	mov	r2, r0
 80159fe:	460b      	mov	r3, r1
 8015a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a04:	f7ea fc52 	bl	80002ac <__adddf3>
 8015a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a0c:	4680      	mov	r8, r0
 8015a0e:	4689      	mov	r9, r1
 8015a10:	f7ea fc4a 	bl	80002a8 <__aeabi_dsub>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	4620      	mov	r0, r4
 8015a1a:	4629      	mov	r1, r5
 8015a1c:	f7ea fc44 	bl	80002a8 <__aeabi_dsub>
 8015a20:	4642      	mov	r2, r8
 8015a22:	4606      	mov	r6, r0
 8015a24:	460f      	mov	r7, r1
 8015a26:	464b      	mov	r3, r9
 8015a28:	4640      	mov	r0, r8
 8015a2a:	4649      	mov	r1, r9
 8015a2c:	f7ea fdf4 	bl	8000618 <__aeabi_dmul>
 8015a30:	a34d      	add	r3, pc, #308	@ (adr r3, 8015b68 <__ieee754_pow+0xa48>)
 8015a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a36:	4604      	mov	r4, r0
 8015a38:	460d      	mov	r5, r1
 8015a3a:	f7ea fded 	bl	8000618 <__aeabi_dmul>
 8015a3e:	a34c      	add	r3, pc, #304	@ (adr r3, 8015b70 <__ieee754_pow+0xa50>)
 8015a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a44:	f7ea fc30 	bl	80002a8 <__aeabi_dsub>
 8015a48:	4622      	mov	r2, r4
 8015a4a:	462b      	mov	r3, r5
 8015a4c:	f7ea fde4 	bl	8000618 <__aeabi_dmul>
 8015a50:	a349      	add	r3, pc, #292	@ (adr r3, 8015b78 <__ieee754_pow+0xa58>)
 8015a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a56:	f7ea fc29 	bl	80002ac <__adddf3>
 8015a5a:	4622      	mov	r2, r4
 8015a5c:	462b      	mov	r3, r5
 8015a5e:	f7ea fddb 	bl	8000618 <__aeabi_dmul>
 8015a62:	a347      	add	r3, pc, #284	@ (adr r3, 8015b80 <__ieee754_pow+0xa60>)
 8015a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a68:	f7ea fc1e 	bl	80002a8 <__aeabi_dsub>
 8015a6c:	4622      	mov	r2, r4
 8015a6e:	462b      	mov	r3, r5
 8015a70:	f7ea fdd2 	bl	8000618 <__aeabi_dmul>
 8015a74:	a344      	add	r3, pc, #272	@ (adr r3, 8015b88 <__ieee754_pow+0xa68>)
 8015a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7a:	f7ea fc17 	bl	80002ac <__adddf3>
 8015a7e:	4622      	mov	r2, r4
 8015a80:	462b      	mov	r3, r5
 8015a82:	f7ea fdc9 	bl	8000618 <__aeabi_dmul>
 8015a86:	4602      	mov	r2, r0
 8015a88:	460b      	mov	r3, r1
 8015a8a:	4640      	mov	r0, r8
 8015a8c:	4649      	mov	r1, r9
 8015a8e:	f7ea fc0b 	bl	80002a8 <__aeabi_dsub>
 8015a92:	4604      	mov	r4, r0
 8015a94:	460d      	mov	r5, r1
 8015a96:	4602      	mov	r2, r0
 8015a98:	460b      	mov	r3, r1
 8015a9a:	4640      	mov	r0, r8
 8015a9c:	4649      	mov	r1, r9
 8015a9e:	f7ea fdbb 	bl	8000618 <__aeabi_dmul>
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	e9cd 0100 	strd	r0, r1, [sp]
 8015aa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015aac:	4620      	mov	r0, r4
 8015aae:	4629      	mov	r1, r5
 8015ab0:	f7ea fbfa 	bl	80002a8 <__aeabi_dsub>
 8015ab4:	4602      	mov	r2, r0
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015abc:	f7ea fed6 	bl	800086c <__aeabi_ddiv>
 8015ac0:	4632      	mov	r2, r6
 8015ac2:	4604      	mov	r4, r0
 8015ac4:	460d      	mov	r5, r1
 8015ac6:	463b      	mov	r3, r7
 8015ac8:	4640      	mov	r0, r8
 8015aca:	4649      	mov	r1, r9
 8015acc:	f7ea fda4 	bl	8000618 <__aeabi_dmul>
 8015ad0:	4632      	mov	r2, r6
 8015ad2:	463b      	mov	r3, r7
 8015ad4:	f7ea fbea 	bl	80002ac <__adddf3>
 8015ad8:	4602      	mov	r2, r0
 8015ada:	460b      	mov	r3, r1
 8015adc:	4620      	mov	r0, r4
 8015ade:	4629      	mov	r1, r5
 8015ae0:	f7ea fbe2 	bl	80002a8 <__aeabi_dsub>
 8015ae4:	4642      	mov	r2, r8
 8015ae6:	464b      	mov	r3, r9
 8015ae8:	f7ea fbde 	bl	80002a8 <__aeabi_dsub>
 8015aec:	460b      	mov	r3, r1
 8015aee:	4602      	mov	r2, r0
 8015af0:	492d      	ldr	r1, [pc, #180]	@ (8015ba8 <__ieee754_pow+0xa88>)
 8015af2:	2000      	movs	r0, #0
 8015af4:	f7ea fbd8 	bl	80002a8 <__aeabi_dsub>
 8015af8:	ec41 0b10 	vmov	d0, r0, r1
 8015afc:	ee10 3a90 	vmov	r3, s1
 8015b00:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015b04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015b08:	da0b      	bge.n	8015b22 <__ieee754_pow+0xa02>
 8015b0a:	4650      	mov	r0, sl
 8015b0c:	f000 f85c 	bl	8015bc8 <scalbn>
 8015b10:	ec51 0b10 	vmov	r0, r1, d0
 8015b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b18:	f7ff bb6d 	b.w	80151f6 <__ieee754_pow+0xd6>
 8015b1c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015b20:	e73a      	b.n	8015998 <__ieee754_pow+0x878>
 8015b22:	ec51 0b10 	vmov	r0, r1, d0
 8015b26:	4619      	mov	r1, r3
 8015b28:	e7f4      	b.n	8015b14 <__ieee754_pow+0x9f4>
 8015b2a:	491f      	ldr	r1, [pc, #124]	@ (8015ba8 <__ieee754_pow+0xa88>)
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	f7ff bb14 	b.w	801515a <__ieee754_pow+0x3a>
 8015b32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b36:	f7ff bb10 	b.w	801515a <__ieee754_pow+0x3a>
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	4639      	mov	r1, r7
 8015b3e:	f7ff bb0c 	b.w	801515a <__ieee754_pow+0x3a>
 8015b42:	460c      	mov	r4, r1
 8015b44:	f7ff bb69 	b.w	801521a <__ieee754_pow+0xfa>
 8015b48:	2400      	movs	r4, #0
 8015b4a:	f7ff bb4b 	b.w	80151e4 <__ieee754_pow+0xc4>
 8015b4e:	bf00      	nop
 8015b50:	00000000 	.word	0x00000000
 8015b54:	3fe62e43 	.word	0x3fe62e43
 8015b58:	fefa39ef 	.word	0xfefa39ef
 8015b5c:	3fe62e42 	.word	0x3fe62e42
 8015b60:	0ca86c39 	.word	0x0ca86c39
 8015b64:	be205c61 	.word	0xbe205c61
 8015b68:	72bea4d0 	.word	0x72bea4d0
 8015b6c:	3e663769 	.word	0x3e663769
 8015b70:	c5d26bf1 	.word	0xc5d26bf1
 8015b74:	3ebbbd41 	.word	0x3ebbbd41
 8015b78:	af25de2c 	.word	0xaf25de2c
 8015b7c:	3f11566a 	.word	0x3f11566a
 8015b80:	16bebd93 	.word	0x16bebd93
 8015b84:	3f66c16c 	.word	0x3f66c16c
 8015b88:	5555553e 	.word	0x5555553e
 8015b8c:	3fc55555 	.word	0x3fc55555
 8015b90:	40900000 	.word	0x40900000
 8015b94:	4090cbff 	.word	0x4090cbff
 8015b98:	3f6f3400 	.word	0x3f6f3400
 8015b9c:	4090cc00 	.word	0x4090cc00
 8015ba0:	3fe00000 	.word	0x3fe00000
 8015ba4:	fff00000 	.word	0xfff00000
 8015ba8:	3ff00000 	.word	0x3ff00000
 8015bac:	652b82fe 	.word	0x652b82fe
 8015bb0:	3c971547 	.word	0x3c971547

08015bb4 <fabs>:
 8015bb4:	ec51 0b10 	vmov	r0, r1, d0
 8015bb8:	4602      	mov	r2, r0
 8015bba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015bbe:	ec43 2b10 	vmov	d0, r2, r3
 8015bc2:	4770      	bx	lr
 8015bc4:	0000      	movs	r0, r0
	...

08015bc8 <scalbn>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	ec55 4b10 	vmov	r4, r5, d0
 8015bce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	462b      	mov	r3, r5
 8015bd6:	b991      	cbnz	r1, 8015bfe <scalbn+0x36>
 8015bd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015bdc:	4323      	orrs	r3, r4
 8015bde:	d03b      	beq.n	8015c58 <scalbn+0x90>
 8015be0:	4b33      	ldr	r3, [pc, #204]	@ (8015cb0 <scalbn+0xe8>)
 8015be2:	4620      	mov	r0, r4
 8015be4:	4629      	mov	r1, r5
 8015be6:	2200      	movs	r2, #0
 8015be8:	f7ea fd16 	bl	8000618 <__aeabi_dmul>
 8015bec:	4b31      	ldr	r3, [pc, #196]	@ (8015cb4 <scalbn+0xec>)
 8015bee:	429e      	cmp	r6, r3
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	460d      	mov	r5, r1
 8015bf4:	da0f      	bge.n	8015c16 <scalbn+0x4e>
 8015bf6:	a326      	add	r3, pc, #152	@ (adr r3, 8015c90 <scalbn+0xc8>)
 8015bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfc:	e01e      	b.n	8015c3c <scalbn+0x74>
 8015bfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015c02:	4291      	cmp	r1, r2
 8015c04:	d10b      	bne.n	8015c1e <scalbn+0x56>
 8015c06:	4622      	mov	r2, r4
 8015c08:	4620      	mov	r0, r4
 8015c0a:	4629      	mov	r1, r5
 8015c0c:	f7ea fb4e 	bl	80002ac <__adddf3>
 8015c10:	4604      	mov	r4, r0
 8015c12:	460d      	mov	r5, r1
 8015c14:	e020      	b.n	8015c58 <scalbn+0x90>
 8015c16:	460b      	mov	r3, r1
 8015c18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015c1c:	3936      	subs	r1, #54	@ 0x36
 8015c1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015c22:	4296      	cmp	r6, r2
 8015c24:	dd0d      	ble.n	8015c42 <scalbn+0x7a>
 8015c26:	2d00      	cmp	r5, #0
 8015c28:	a11b      	add	r1, pc, #108	@ (adr r1, 8015c98 <scalbn+0xd0>)
 8015c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c2e:	da02      	bge.n	8015c36 <scalbn+0x6e>
 8015c30:	a11b      	add	r1, pc, #108	@ (adr r1, 8015ca0 <scalbn+0xd8>)
 8015c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c36:	a318      	add	r3, pc, #96	@ (adr r3, 8015c98 <scalbn+0xd0>)
 8015c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c3c:	f7ea fcec 	bl	8000618 <__aeabi_dmul>
 8015c40:	e7e6      	b.n	8015c10 <scalbn+0x48>
 8015c42:	1872      	adds	r2, r6, r1
 8015c44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015c48:	428a      	cmp	r2, r1
 8015c4a:	dcec      	bgt.n	8015c26 <scalbn+0x5e>
 8015c4c:	2a00      	cmp	r2, #0
 8015c4e:	dd06      	ble.n	8015c5e <scalbn+0x96>
 8015c50:	f36f 531e 	bfc	r3, #20, #11
 8015c54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c58:	ec45 4b10 	vmov	d0, r4, r5
 8015c5c:	bd70      	pop	{r4, r5, r6, pc}
 8015c5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015c62:	da08      	bge.n	8015c76 <scalbn+0xae>
 8015c64:	2d00      	cmp	r5, #0
 8015c66:	a10a      	add	r1, pc, #40	@ (adr r1, 8015c90 <scalbn+0xc8>)
 8015c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c6c:	dac3      	bge.n	8015bf6 <scalbn+0x2e>
 8015c6e:	a10e      	add	r1, pc, #56	@ (adr r1, 8015ca8 <scalbn+0xe0>)
 8015c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c74:	e7bf      	b.n	8015bf6 <scalbn+0x2e>
 8015c76:	3236      	adds	r2, #54	@ 0x36
 8015c78:	f36f 531e 	bfc	r3, #20, #11
 8015c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c80:	4620      	mov	r0, r4
 8015c82:	4b0d      	ldr	r3, [pc, #52]	@ (8015cb8 <scalbn+0xf0>)
 8015c84:	4629      	mov	r1, r5
 8015c86:	2200      	movs	r2, #0
 8015c88:	e7d8      	b.n	8015c3c <scalbn+0x74>
 8015c8a:	bf00      	nop
 8015c8c:	f3af 8000 	nop.w
 8015c90:	c2f8f359 	.word	0xc2f8f359
 8015c94:	01a56e1f 	.word	0x01a56e1f
 8015c98:	8800759c 	.word	0x8800759c
 8015c9c:	7e37e43c 	.word	0x7e37e43c
 8015ca0:	8800759c 	.word	0x8800759c
 8015ca4:	fe37e43c 	.word	0xfe37e43c
 8015ca8:	c2f8f359 	.word	0xc2f8f359
 8015cac:	81a56e1f 	.word	0x81a56e1f
 8015cb0:	43500000 	.word	0x43500000
 8015cb4:	ffff3cb0 	.word	0xffff3cb0
 8015cb8:	3c900000 	.word	0x3c900000

08015cbc <with_errno>:
 8015cbc:	b510      	push	{r4, lr}
 8015cbe:	ed2d 8b02 	vpush	{d8}
 8015cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8015cc6:	eef0 8a60 	vmov.f32	s17, s1
 8015cca:	4604      	mov	r4, r0
 8015ccc:	f7fe fb44 	bl	8014358 <__errno>
 8015cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8015cd4:	eef0 0a68 	vmov.f32	s1, s17
 8015cd8:	ecbd 8b02 	vpop	{d8}
 8015cdc:	6004      	str	r4, [r0, #0]
 8015cde:	bd10      	pop	{r4, pc}

08015ce0 <xflow>:
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	b507      	push	{r0, r1, r2, lr}
 8015ce4:	ec51 0b10 	vmov	r0, r1, d0
 8015ce8:	b183      	cbz	r3, 8015d0c <xflow+0x2c>
 8015cea:	4602      	mov	r2, r0
 8015cec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015cf0:	e9cd 2300 	strd	r2, r3, [sp]
 8015cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cf8:	f7ea fc8e 	bl	8000618 <__aeabi_dmul>
 8015cfc:	ec41 0b10 	vmov	d0, r0, r1
 8015d00:	2022      	movs	r0, #34	@ 0x22
 8015d02:	b003      	add	sp, #12
 8015d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d08:	f7ff bfd8 	b.w	8015cbc <with_errno>
 8015d0c:	4602      	mov	r2, r0
 8015d0e:	460b      	mov	r3, r1
 8015d10:	e7ee      	b.n	8015cf0 <xflow+0x10>
 8015d12:	0000      	movs	r0, r0
 8015d14:	0000      	movs	r0, r0
	...

08015d18 <__math_uflow>:
 8015d18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015d20 <__math_uflow+0x8>
 8015d1c:	f7ff bfe0 	b.w	8015ce0 <xflow>
 8015d20:	00000000 	.word	0x00000000
 8015d24:	10000000 	.word	0x10000000

08015d28 <__math_oflow>:
 8015d28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015d30 <__math_oflow+0x8>
 8015d2c:	f7ff bfd8 	b.w	8015ce0 <xflow>
 8015d30:	00000000 	.word	0x00000000
 8015d34:	70000000 	.word	0x70000000

08015d38 <__ieee754_sqrt>:
 8015d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d3c:	4a66      	ldr	r2, [pc, #408]	@ (8015ed8 <__ieee754_sqrt+0x1a0>)
 8015d3e:	ec55 4b10 	vmov	r4, r5, d0
 8015d42:	43aa      	bics	r2, r5
 8015d44:	462b      	mov	r3, r5
 8015d46:	4621      	mov	r1, r4
 8015d48:	d110      	bne.n	8015d6c <__ieee754_sqrt+0x34>
 8015d4a:	4622      	mov	r2, r4
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	4629      	mov	r1, r5
 8015d50:	f7ea fc62 	bl	8000618 <__aeabi_dmul>
 8015d54:	4602      	mov	r2, r0
 8015d56:	460b      	mov	r3, r1
 8015d58:	4620      	mov	r0, r4
 8015d5a:	4629      	mov	r1, r5
 8015d5c:	f7ea faa6 	bl	80002ac <__adddf3>
 8015d60:	4604      	mov	r4, r0
 8015d62:	460d      	mov	r5, r1
 8015d64:	ec45 4b10 	vmov	d0, r4, r5
 8015d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d6c:	2d00      	cmp	r5, #0
 8015d6e:	dc0e      	bgt.n	8015d8e <__ieee754_sqrt+0x56>
 8015d70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015d74:	4322      	orrs	r2, r4
 8015d76:	d0f5      	beq.n	8015d64 <__ieee754_sqrt+0x2c>
 8015d78:	b19d      	cbz	r5, 8015da2 <__ieee754_sqrt+0x6a>
 8015d7a:	4622      	mov	r2, r4
 8015d7c:	4620      	mov	r0, r4
 8015d7e:	4629      	mov	r1, r5
 8015d80:	f7ea fa92 	bl	80002a8 <__aeabi_dsub>
 8015d84:	4602      	mov	r2, r0
 8015d86:	460b      	mov	r3, r1
 8015d88:	f7ea fd70 	bl	800086c <__aeabi_ddiv>
 8015d8c:	e7e8      	b.n	8015d60 <__ieee754_sqrt+0x28>
 8015d8e:	152a      	asrs	r2, r5, #20
 8015d90:	d115      	bne.n	8015dbe <__ieee754_sqrt+0x86>
 8015d92:	2000      	movs	r0, #0
 8015d94:	e009      	b.n	8015daa <__ieee754_sqrt+0x72>
 8015d96:	0acb      	lsrs	r3, r1, #11
 8015d98:	3a15      	subs	r2, #21
 8015d9a:	0549      	lsls	r1, r1, #21
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d0fa      	beq.n	8015d96 <__ieee754_sqrt+0x5e>
 8015da0:	e7f7      	b.n	8015d92 <__ieee754_sqrt+0x5a>
 8015da2:	462a      	mov	r2, r5
 8015da4:	e7fa      	b.n	8015d9c <__ieee754_sqrt+0x64>
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	3001      	adds	r0, #1
 8015daa:	02dc      	lsls	r4, r3, #11
 8015dac:	d5fb      	bpl.n	8015da6 <__ieee754_sqrt+0x6e>
 8015dae:	1e44      	subs	r4, r0, #1
 8015db0:	1b12      	subs	r2, r2, r4
 8015db2:	f1c0 0420 	rsb	r4, r0, #32
 8015db6:	fa21 f404 	lsr.w	r4, r1, r4
 8015dba:	4323      	orrs	r3, r4
 8015dbc:	4081      	lsls	r1, r0
 8015dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015dc2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8015dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015dca:	07d2      	lsls	r2, r2, #31
 8015dcc:	bf5c      	itt	pl
 8015dce:	005b      	lslpl	r3, r3, #1
 8015dd0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015dd8:	bf58      	it	pl
 8015dda:	0049      	lslpl	r1, r1, #1
 8015ddc:	2600      	movs	r6, #0
 8015dde:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015de2:	107f      	asrs	r7, r7, #1
 8015de4:	0049      	lsls	r1, r1, #1
 8015de6:	2016      	movs	r0, #22
 8015de8:	4632      	mov	r2, r6
 8015dea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015dee:	1915      	adds	r5, r2, r4
 8015df0:	429d      	cmp	r5, r3
 8015df2:	bfde      	ittt	le
 8015df4:	192a      	addle	r2, r5, r4
 8015df6:	1b5b      	suble	r3, r3, r5
 8015df8:	1936      	addle	r6, r6, r4
 8015dfa:	0fcd      	lsrs	r5, r1, #31
 8015dfc:	3801      	subs	r0, #1
 8015dfe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015e02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015e06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015e0a:	d1f0      	bne.n	8015dee <__ieee754_sqrt+0xb6>
 8015e0c:	4605      	mov	r5, r0
 8015e0e:	2420      	movs	r4, #32
 8015e10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015e14:	4293      	cmp	r3, r2
 8015e16:	eb0c 0e00 	add.w	lr, ip, r0
 8015e1a:	dc02      	bgt.n	8015e22 <__ieee754_sqrt+0xea>
 8015e1c:	d113      	bne.n	8015e46 <__ieee754_sqrt+0x10e>
 8015e1e:	458e      	cmp	lr, r1
 8015e20:	d811      	bhi.n	8015e46 <__ieee754_sqrt+0x10e>
 8015e22:	f1be 0f00 	cmp.w	lr, #0
 8015e26:	eb0e 000c 	add.w	r0, lr, ip
 8015e2a:	da3f      	bge.n	8015eac <__ieee754_sqrt+0x174>
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	db3d      	blt.n	8015eac <__ieee754_sqrt+0x174>
 8015e30:	f102 0801 	add.w	r8, r2, #1
 8015e34:	1a9b      	subs	r3, r3, r2
 8015e36:	458e      	cmp	lr, r1
 8015e38:	bf88      	it	hi
 8015e3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015e3e:	eba1 010e 	sub.w	r1, r1, lr
 8015e42:	4465      	add	r5, ip
 8015e44:	4642      	mov	r2, r8
 8015e46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015e4a:	3c01      	subs	r4, #1
 8015e4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015e50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015e54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015e58:	d1dc      	bne.n	8015e14 <__ieee754_sqrt+0xdc>
 8015e5a:	4319      	orrs	r1, r3
 8015e5c:	d01b      	beq.n	8015e96 <__ieee754_sqrt+0x15e>
 8015e5e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8015edc <__ieee754_sqrt+0x1a4>
 8015e62:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8015ee0 <__ieee754_sqrt+0x1a8>
 8015e66:	e9da 0100 	ldrd	r0, r1, [sl]
 8015e6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8015e6e:	f7ea fa1b 	bl	80002a8 <__aeabi_dsub>
 8015e72:	e9da 8900 	ldrd	r8, r9, [sl]
 8015e76:	4602      	mov	r2, r0
 8015e78:	460b      	mov	r3, r1
 8015e7a:	4640      	mov	r0, r8
 8015e7c:	4649      	mov	r1, r9
 8015e7e:	f7ea fe47 	bl	8000b10 <__aeabi_dcmple>
 8015e82:	b140      	cbz	r0, 8015e96 <__ieee754_sqrt+0x15e>
 8015e84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8015e88:	e9da 0100 	ldrd	r0, r1, [sl]
 8015e8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8015e90:	d10e      	bne.n	8015eb0 <__ieee754_sqrt+0x178>
 8015e92:	3601      	adds	r6, #1
 8015e94:	4625      	mov	r5, r4
 8015e96:	1073      	asrs	r3, r6, #1
 8015e98:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8015e9c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8015ea0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8015ea4:	086b      	lsrs	r3, r5, #1
 8015ea6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8015eaa:	e759      	b.n	8015d60 <__ieee754_sqrt+0x28>
 8015eac:	4690      	mov	r8, r2
 8015eae:	e7c1      	b.n	8015e34 <__ieee754_sqrt+0xfc>
 8015eb0:	f7ea f9fc 	bl	80002ac <__adddf3>
 8015eb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8015eb8:	4602      	mov	r2, r0
 8015eba:	460b      	mov	r3, r1
 8015ebc:	4640      	mov	r0, r8
 8015ebe:	4649      	mov	r1, r9
 8015ec0:	f7ea fe1c 	bl	8000afc <__aeabi_dcmplt>
 8015ec4:	b120      	cbz	r0, 8015ed0 <__ieee754_sqrt+0x198>
 8015ec6:	1cab      	adds	r3, r5, #2
 8015ec8:	bf08      	it	eq
 8015eca:	3601      	addeq	r6, #1
 8015ecc:	3502      	adds	r5, #2
 8015ece:	e7e2      	b.n	8015e96 <__ieee754_sqrt+0x15e>
 8015ed0:	1c6b      	adds	r3, r5, #1
 8015ed2:	f023 0501 	bic.w	r5, r3, #1
 8015ed6:	e7de      	b.n	8015e96 <__ieee754_sqrt+0x15e>
 8015ed8:	7ff00000 	.word	0x7ff00000
 8015edc:	08016c88 	.word	0x08016c88
 8015ee0:	08016c80 	.word	0x08016c80

08015ee4 <_init>:
 8015ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee6:	bf00      	nop
 8015ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015eea:	bc08      	pop	{r3}
 8015eec:	469e      	mov	lr, r3
 8015eee:	4770      	bx	lr

08015ef0 <_fini>:
 8015ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ef2:	bf00      	nop
 8015ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ef6:	bc08      	pop	{r3}
 8015ef8:	469e      	mov	lr, r3
 8015efa:	4770      	bx	lr
