
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08016768  08016768  00017768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080175d0  080175d0  00019284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080175d0  080175d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080175d8  080175d8  00019284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080175d8  080175d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080175dc  080175dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  080175e0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141c0  20000284  08017864  00019284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014444  08017864  00019444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d577  00000000  00000000  000192b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006340  00000000  00000000  0005682b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036d8  00000000  00000000  0005cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002aa0  00000000  00000000  00060248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1c0  00000000  00000000  00062ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037657  00000000  00000000  00081ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af45c  00000000  00000000  000b94ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016895b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fb14  00000000  00000000  001689a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001784b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801674c 	.word	0x0801674c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	0801674c 	.word	0x0801674c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fcc:	e000      	b.n	8000fd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fda:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write( int file, char * ptr, int len )
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
    for( int i = 0; i < len; i++ )
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
    {
        ITM_SendChar( *ptr++ );
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffc9 	bl	8000fa4 <ITM_SendChar>
    for( int i = 0; i < len; i++ )
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
    }
    return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main( void )
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	b0e3      	sub	sp, #396	@ 0x18c
 8001030:	af10      	add	r7, sp, #64	@ 0x40
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001032:	f00b fa3b 	bl	800c4ac <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001036:	f000 f939 	bl	80012ac <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800103a:	f000 fa29 	bl	8001490 <MX_GPIO_Init>
    MX_TIM1_Init();
 800103e:	f000 f9d7 	bl	80013f0 <MX_TIM1_Init>
    MX_SPI1_Init();
 8001042:	f000 f99f 	bl	8001384 <MX_SPI1_Init>
    MX_MEMS_Init();
 8001046:	f00f fbb1 	bl	80107ac <MX_MEMS_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT( &htim1 );
 800104a:	4891      	ldr	r0, [pc, #580]	@ (8001290 <main+0x264>)
 800104c:	f00e fcf4 	bl	800fa38 <HAL_TIM_Base_Start_IT>
        /* USER CODE END WHILE */

        //MX_MEMS_Process();
        /* USER CODE BEGIN 3 */

        if( data_ready )
 8001050:	4b90      	ldr	r3, [pc, #576]	@ (8001294 <main+0x268>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0fb      	beq.n	8001050 <main+0x24>
        {
            const char name_file[] = { "sensor_data.csv" };
 8001058:	4b8f      	ldr	r3, [pc, #572]	@ (8001298 <main+0x26c>)
 800105a:	f507 749a 	add.w	r4, r7, #308	@ 0x134
 800105e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            const char header_csv[] = { "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z,Accel2_X,Accel2_Y,Accel2_Z,Gyro2_X,Gyro2_Y,Gyro2_Z,Mag_X,Mag_Y,Mag_Z\n" };
 8001064:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001068:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800106c:	4a8b      	ldr	r2, [pc, #556]	@ (800129c <main+0x270>)
 800106e:	4618      	mov	r0, r3
 8001070:	4611      	mov	r1, r2
 8001072:	237d      	movs	r3, #125	@ 0x7d
 8001074:	461a      	mov	r2, r3
 8001076:	f013 fdd0 	bl	8014c1a <memcpy>
            // Save data to SD card
            sd_mount();
 800107a:	f000 fdb7 	bl	8001bec <sd_mount>
            sd_list_files();
 800107e:	f000 ffe9 	bl	8002054 <sd_list_files>
            sd_write_file( name_file, header_csv ); // Write header
 8001082:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001086:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fe43 	bl	8001d18 <sd_write_file>

            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001098:	e0ec      	b.n	8001274 <main+0x248>
            {
                char line[128] = { 0 };
 800109a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800109e:	2280      	movs	r2, #128	@ 0x80
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f013 fd2e 	bl	8014b04 <memset>
                snprintf(line, sizeof(line),
                         "%lu,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n",
                         (unsigned long)sensor_data[i].timestamp,
 80010a8:	497d      	ldr	r1, [pc, #500]	@ (80012a0 <main+0x274>)
 80010aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	681e      	ldr	r6, [r3, #0]
                         (int)sensor_data[i].acceleration.x,
 80010ba:	4979      	ldr	r1, [pc, #484]	@ (80012a0 <main+0x274>)
 80010bc:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	440b      	add	r3, r1
 80010ca:	3304      	adds	r3, #4
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                         (int)sensor_data[i].acceleration.y,
 80010d2:	4973      	ldr	r1, [pc, #460]	@ (80012a0 <main+0x274>)
 80010d4:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	3306      	adds	r3, #6
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
                         (int)sensor_data[i].acceleration.z,
 80010ea:	496d      	ldr	r1, [pc, #436]	@ (80012a0 <main+0x274>)
 80010ec:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	3308      	adds	r3, #8
 80010fc:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
                         (int)sensor_data[i].angular_velocity.x,
 8001102:	4967      	ldr	r1, [pc, #412]	@ (80012a0 <main+0x274>)
 8001104:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	330a      	adds	r3, #10
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001118:	623b      	str	r3, [r7, #32]
                         (int)sensor_data[i].angular_velocity.y,
 800111a:	4961      	ldr	r1, [pc, #388]	@ (80012a0 <main+0x274>)
 800111c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	330c      	adds	r3, #12
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001130:	61fb      	str	r3, [r7, #28]
                         (int)sensor_data[i].angular_velocity.z,
 8001132:	495b      	ldr	r1, [pc, #364]	@ (80012a0 <main+0x274>)
 8001134:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	330e      	adds	r3, #14
 8001144:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001148:	61bb      	str	r3, [r7, #24]
                         (int)sensor_data[i].acceleration_2.x,
 800114a:	4955      	ldr	r1, [pc, #340]	@ (80012a0 <main+0x274>)
 800114c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	331c      	adds	r3, #28
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001160:	617b      	str	r3, [r7, #20]
                         (int)sensor_data[i].acceleration_2.y,
 8001162:	494f      	ldr	r1, [pc, #316]	@ (80012a0 <main+0x274>)
 8001164:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	331e      	adds	r3, #30
 8001174:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001178:	613b      	str	r3, [r7, #16]
                         (int)sensor_data[i].acceleration_2.z,
 800117a:	4949      	ldr	r1, [pc, #292]	@ (80012a0 <main+0x274>)
 800117c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	3320      	adds	r3, #32
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 8001190:	60fb      	str	r3, [r7, #12]
                         (int)sensor_data[i].angular_velocity_2.x,
 8001192:	4943      	ldr	r1, [pc, #268]	@ (80012a0 <main+0x274>)
 8001194:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3322      	adds	r3, #34	@ 0x22
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 80011a8:	60bb      	str	r3, [r7, #8]
                         (int)sensor_data[i].angular_velocity_2.y,
 80011aa:	493d      	ldr	r1, [pc, #244]	@ (80012a0 <main+0x274>)
 80011ac:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	3324      	adds	r3, #36	@ 0x24
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 80011c0:	607b      	str	r3, [r7, #4]
                         (int)sensor_data[i].angular_velocity_2.z,
 80011c2:	4937      	ldr	r1, [pc, #220]	@ (80012a0 <main+0x274>)
 80011c4:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	3326      	adds	r3, #38	@ 0x26
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf(line, sizeof(line),
 80011d8:	603b      	str	r3, [r7, #0]
                         (long)sensor_data[i].magnetic_field.x,
 80011da:	4931      	ldr	r1, [pc, #196]	@ (80012a0 <main+0x274>)
 80011dc:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3310      	adds	r3, #16
 80011ec:	681d      	ldr	r5, [r3, #0]
                         (long)sensor_data[i].magnetic_field.y,
 80011ee:	492c      	ldr	r1, [pc, #176]	@ (80012a0 <main+0x274>)
 80011f0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	3314      	adds	r3, #20
 8001200:	681c      	ldr	r4, [r3, #0]
                         (long)sensor_data[i].magnetic_field.z);
 8001202:	4927      	ldr	r1, [pc, #156]	@ (80012a0 <main+0x274>)
 8001204:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	3318      	adds	r3, #24
 8001214:	681b      	ldr	r3, [r3, #0]
                snprintf(line, sizeof(line),
 8001216:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800121a:	930e      	str	r3, [sp, #56]	@ 0x38
 800121c:	940d      	str	r4, [sp, #52]	@ 0x34
 800121e:	950c      	str	r5, [sp, #48]	@ 0x30
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	920a      	str	r2, [sp, #40]	@ 0x28
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	9209      	str	r2, [sp, #36]	@ 0x24
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	9208      	str	r2, [sp, #32]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	9207      	str	r2, [sp, #28]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	9206      	str	r2, [sp, #24]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	9205      	str	r2, [sp, #20]
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	9204      	str	r2, [sp, #16]
 8001240:	6a3a      	ldr	r2, [r7, #32]
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001246:	9202      	str	r2, [sp, #8]
 8001248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	4633      	mov	r3, r6
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <main+0x278>)
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	f013 fb47 	bl	80148e8 <sniprintf>
                sd_append_file( name_file, line );
 800125a:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 800125e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fdbf 	bl	8001de8 <sd_append_file>
            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 800126a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800126e:	3301      	adds	r3, #1
 8001270:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001274:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001278:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800127c:	f4ff af0d 	bcc.w	800109a <main+0x6e>
            }
            sd_unmount();
 8001280:	f000 fd28 	bl	8001cd4 <sd_unmount>
            status = COMPLETE;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <main+0x27c>)
 8001286:	2203      	movs	r2, #3
 8001288:	701a      	strb	r2, [r3, #0]
            while( 1 );
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <main+0x25e>
 800128e:	bf00      	nop
 8001290:	200002f8 	.word	0x200002f8
 8001294:	20013bc0 	.word	0x20013bc0
 8001298:	080167a0 	.word	0x080167a0
 800129c:	080167b0 	.word	0x080167b0
 80012a0:	20000340 	.word	0x20000340
 80012a4:	08016768 	.word	0x08016768
 80012a8:	20013bcc 	.word	0x20013bcc

080012ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	@ 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f013 fc22 	bl	8014b04 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE( );
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <SystemClock_Config+0xd0>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <SystemClock_Config+0xd0>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <SystemClock_Config+0xd0>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <SystemClock_Config+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <SystemClock_Config+0xd4>)
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <SystemClock_Config+0xd4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001314:	2310      	movs	r3, #16
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8001320:	2310      	movs	r3, #16
 8001322:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001324:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001328:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800132a:	2304      	movs	r3, #4
 800132c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800132e:	2307      	movs	r3, #7
 8001330:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	4618      	mov	r0, r3
 8001338:	f00d fa44 	bl	800e7c4 <HAL_RCC_OscConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8001342:	f000 fb6b 	bl	8001a1c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	230f      	movs	r3, #15
 8001348:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134a:	2302      	movs	r3, #2
 800134c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001356:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]

    if( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2102      	movs	r1, #2
 8001362:	4618      	mov	r0, r3
 8001364:	f00d fca6 	bl	800ecb4 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xc6>
    {
        Error_Handler();
 800136e:	f000 fb55 	bl	8001a1c <Error_Handler>
    }
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	@ 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init( void )
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_SPI1_Init+0x64>)
 800138a:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <MX_SPI1_Init+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_SPI1_Init+0x64>)
 8001390:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001394:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013b8:	2228      	movs	r2, #40	@ 0x28
 80013ba:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if( HAL_SPI_Init( &hspi1 ) != HAL_OK )
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_SPI1_Init+0x64>)
 80013d6:	f00d fe8d 	bl	800f0f4 <HAL_SPI_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 80013e0:	f000 fb1c 	bl	8001a1c <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200002a0 	.word	0x200002a0
 80013ec:	40013000 	.word	0x40013000

080013f0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init( void )
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM1_Init+0x98>)
 800140e:	4a1f      	ldr	r2, [pc, #124]	@ (800148c <MX_TIM1_Init+0x9c>)
 8001410:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 8399;
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001414:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001418:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_TIM1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 99;
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001422:	2263      	movs	r2, #99	@ 0x63
 8001424:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_TIM1_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	619a      	str	r2, [r3, #24]
    if( HAL_TIM_Base_Init( &htim1 ) != HAL_OK )
 8001438:	4813      	ldr	r0, [pc, #76]	@ (8001488 <MX_TIM1_Init+0x98>)
 800143a:	f00e faad 	bl	800f998 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x58>
    {
        Error_Handler();
 8001444:	f000 faea 	bl	8001a1c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	60bb      	str	r3, [r7, #8]
    if( HAL_TIM_ConfigClockSource( &htim1, &sClockSourceConfig ) != HAL_OK )
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001456:	f00e fc41 	bl	800fcdc <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x74>
    {
        Error_Handler();
 8001460:	f000 fadc 	bl	8001a1c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
    if( HAL_TIMEx_MasterConfigSynchronization( &htim1, &sMasterConfig ) != HAL_OK )
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001472:	f00e fe43 	bl	80100fc <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x90>
    {
        Error_Handler();
 800147c:	f000 face 	bl	8001a1c <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200002f8 	.word	0x200002f8
 800148c:	40010000 	.word	0x40010000

08001490 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a36      	ldr	r2, [pc, #216]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE( );
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <MX_GPIO_Init+0xf8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <MX_GPIO_Init+0xf8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <MX_GPIO_Init+0xf8>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <MX_GPIO_Init+0xf8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin, GPIO_PIN_RESET );
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800151c:	481b      	ldr	r0, [pc, #108]	@ (800158c <MX_GPIO_Init+0xfc>)
 800151e:	f00b fc1b 	bl	800cd58 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET );
 8001522:	2201      	movs	r2, #1
 8001524:	2120      	movs	r1, #32
 8001526:	481a      	ldr	r0, [pc, #104]	@ (8001590 <MX_GPIO_Init+0x100>)
 8001528:	f00b fc16 	bl	800cd58 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_STATUS_D7_Pin */
    GPIO_InitStruct.Pin = LED_STATUS_D7_Pin;
 800152c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( LED_STATUS_D7_GPIO_Port, &GPIO_InitStruct );
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4811      	ldr	r0, [pc, #68]	@ (800158c <MX_GPIO_Init+0xfc>)
 8001546:	f00b f987 	bl	800c858 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON_D8_Pin */
    GPIO_InitStruct.Pin = BUTTON_D8_Pin;
 800154a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( BUTTON_D8_GPIO_Port, &GPIO_InitStruct );
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <MX_GPIO_Init+0xfc>)
 8001560:	f00b f97a 	bl	800c858 <HAL_GPIO_Init>

    /*Configure GPIO pin : SD_CS_Pin */
    GPIO_InitStruct.Pin = SD_CS_Pin;
 8001564:	2320      	movs	r3, #32
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( SD_CS_GPIO_Port, &GPIO_InitStruct );
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_GPIO_Init+0x100>)
 800157c:	f00b f96c 	bl	800c858 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400

08001594 <Check_Button>:

/* USER CODE BEGIN 4 */
void Check_Button( void )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    if( HAL_GPIO_ReadPin( BUTTON_D8_GPIO_Port, BUTTON_D8_Pin ) == GPIO_PIN_RESET ) // Button pressed
 8001598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800159c:	4818      	ldr	r0, [pc, #96]	@ (8001600 <Check_Button+0x6c>)
 800159e:	f00b fbc3 	bl	800cd28 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d123      	bne.n	80015f0 <Check_Button+0x5c>
    {
        debounce_button++;
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <Check_Button+0x70>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <Check_Button+0x70>)
 80015b0:	6013      	str	r3, [r2, #0]
        if( button_state == _BUTTON_RELEASED && status == READY )
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <Check_Button+0x74>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d120      	bne.n	80015fc <Check_Button+0x68>
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <Check_Button+0x78>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d11c      	bne.n	80015fc <Check_Button+0x68>
        {
            if( debounce_button >= 5 ) // debounce time ~500ms
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <Check_Button+0x70>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d918      	bls.n	80015fc <Check_Button+0x68>
            {
                button_state = _BUTTON_PRESSED;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <Check_Button+0x74>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
                debounce_button = 0;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <Check_Button+0x70>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

                status = ACQUIRING;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <Check_Button+0x78>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
                count_data = 0;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <Check_Button+0x7c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
                data_ready = 0;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <Check_Button+0x80>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

                count_led_status = 0;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <Check_Button+0x84>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
    {
        debounce_button = 0;
        button_state = _BUTTON_RELEASED;
    }

}
 80015ee:	e005      	b.n	80015fc <Check_Button+0x68>
        debounce_button = 0;
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <Check_Button+0x70>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
        button_state = _BUTTON_RELEASED;
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <Check_Button+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40020000 	.word	0x40020000
 8001604:	20013bd0 	.word	0x20013bd0
 8001608:	20013bd4 	.word	0x20013bd4
 800160c:	20013bcc 	.word	0x20013bcc
 8001610:	20013bc4 	.word	0x20013bc4
 8001614:	20013bc0 	.word	0x20013bc0
 8001618:	20013bc8 	.word	0x20013bc8

0800161c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

    if( htim->Instance == TIM1 )  // Check if the interrupt comes from TIM1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a77      	ldr	r2, [pc, #476]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800162a:	4293      	cmp	r3, r2
 800162c:	f040 81e2 	bne.w	80019f4 <HAL_TIM_PeriodElapsedCallback+0x3d8>
    {
        if( status == ACQUIRING )
 8001630:	4b76      	ldr	r3, [pc, #472]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	f040 8197 	bne.w	8001968 <HAL_TIM_PeriodElapsedCallback+0x34c>
        {
            // Your code to be executed every second
            if( count_data < AMOUNT_DATA )
 800163a:	4b75      	ldr	r3, [pc, #468]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001642:	f080 818b 	bcs.w	800195c <HAL_TIM_PeriodElapsedCallback+0x340>
            {
                IKS4A1_MOTION_SENSOR_Axes_t data = { 0 };
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, &data ) != 0 )
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	461a      	mov	r2, r3
 8001658:	2102      	movs	r1, #2
 800165a:	2001      	movs	r0, #1
 800165c:	f00a fa2e 	bl	800babc <IKS4A1_MOTION_SENSOR_GetAxes>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d147      	bne.n	80016f6 <HAL_TIM_PeriodElapsedCallback+0xda>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].acceleration.x = TEST_LIMIT( data.x ); // to g
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800166c:	da06      	bge.n	800167c <HAL_TIM_PeriodElapsedCallback+0x60>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4a68      	ldr	r2, [pc, #416]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	bfb8      	it	lt
 8001676:	4613      	movlt	r3, r2
 8001678:	b219      	sxth	r1, r3
 800167a:	e001      	b.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x64>
 800167c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001680:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4864      	ldr	r0, [pc, #400]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4403      	add	r3, r0
 8001690:	3304      	adds	r3, #4
 8001692:	460a      	mov	r2, r1
 8001694:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].acceleration.y = TEST_LIMIT( data.y );
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800169c:	da06      	bge.n	80016ac <HAL_TIM_PeriodElapsedCallback+0x90>
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	bfb8      	it	lt
 80016a6:	4613      	movlt	r3, r2
 80016a8:	b219      	sxth	r1, r3
 80016aa:	e001      	b.n	80016b0 <HAL_TIM_PeriodElapsedCallback+0x94>
 80016ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80016b0:	4b57      	ldr	r3, [pc, #348]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4858      	ldr	r0, [pc, #352]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4403      	add	r3, r0
 80016c0:	3306      	adds	r3, #6
 80016c2:	460a      	mov	r2, r1
 80016c4:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].acceleration.z = TEST_LIMIT( data.z );
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016cc:	da06      	bge.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xc0>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	4a50      	ldr	r2, [pc, #320]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	bfb8      	it	lt
 80016d6:	4613      	movlt	r3, r2
 80016d8:	b219      	sxth	r1, r3
 80016da:	e001      	b.n	80016e0 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80016dc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80016e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	484c      	ldr	r0, [pc, #304]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4403      	add	r3, r0
 80016f0:	3308      	adds	r3, #8
 80016f2:	460a      	mov	r2, r1
 80016f4:	801a      	strh	r2, [r3, #0]
                }
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LSM6DSV16X_0, MOTION_GYRO, &data ) != 0 )
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	461a      	mov	r2, r3
 80016fc:	2101      	movs	r1, #1
 80016fe:	2001      	movs	r0, #1
 8001700:	f00a f9dc 	bl	800babc <IKS4A1_MOTION_SENSOR_GetAxes>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d138      	bne.n	800177c <HAL_TIM_PeriodElapsedCallback+0x160>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].angular_velocity.x = data.x / 1000; // to dps
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a43      	ldr	r2, [pc, #268]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	1192      	asrs	r2, r2, #6
 8001714:	17db      	asrs	r3, r3, #31
 8001716:	1ad1      	subs	r1, r2, r3
 8001718:	4b3d      	ldr	r3, [pc, #244]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	b208      	sxth	r0, r1
 800171e:	493e      	ldr	r1, [pc, #248]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	330a      	adds	r3, #10
 800172c:	4602      	mov	r2, r0
 800172e:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].angular_velocity.y = data.y / 1000;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4a3a      	ldr	r2, [pc, #232]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001734:	fb82 1203 	smull	r1, r2, r2, r3
 8001738:	1192      	asrs	r2, r2, #6
 800173a:	17db      	asrs	r3, r3, #31
 800173c:	1ad1      	subs	r1, r2, r3
 800173e:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	b208      	sxth	r0, r1
 8001744:	4934      	ldr	r1, [pc, #208]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	330c      	adds	r3, #12
 8001752:	4602      	mov	r2, r0
 8001754:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].angular_velocity.z = data.z / 1000;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4a30      	ldr	r2, [pc, #192]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800175a:	fb82 1203 	smull	r1, r2, r2, r3
 800175e:	1192      	asrs	r2, r2, #6
 8001760:	17db      	asrs	r3, r3, #31
 8001762:	1ad1      	subs	r1, r2, r3
 8001764:	4b2a      	ldr	r3, [pc, #168]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	b208      	sxth	r0, r1
 800176a:	492b      	ldr	r1, [pc, #172]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	330e      	adds	r3, #14
 8001778:	4602      	mov	r2, r0
 800177a:	801a      	strh	r2, [r3, #0]
                }

                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO, &data ) != 0 )
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	461a      	mov	r2, r3
 8001782:	2102      	movs	r1, #2
 8001784:	2002      	movs	r0, #2
 8001786:	f00a f999 	bl	800babc <IKS4A1_MOTION_SENSOR_GetAxes>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d154      	bne.n	800183a <HAL_TIM_PeriodElapsedCallback+0x21e>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].acceleration_2.x = TEST_LIMIT( data.x ); // to g
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001796:	da06      	bge.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x18a>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	bfb8      	it	lt
 80017a0:	4613      	movlt	r3, r2
 80017a2:	b219      	sxth	r1, r3
 80017a4:	e001      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x18e>
 80017a6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80017aa:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	481a      	ldr	r0, [pc, #104]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4403      	add	r3, r0
 80017ba:	331c      	adds	r3, #28
 80017bc:	460a      	mov	r2, r1
 80017be:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].acceleration_2.y = TEST_LIMIT( data.y );
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017c6:	da06      	bge.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x1ba>
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	bfb8      	it	lt
 80017d0:	4613      	movlt	r3, r2
 80017d2:	b219      	sxth	r1, r3
 80017d4:	e001      	b.n	80017da <HAL_TIM_PeriodElapsedCallback+0x1be>
 80017d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	480e      	ldr	r0, [pc, #56]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4403      	add	r3, r0
 80017ea:	331e      	adds	r3, #30
 80017ec:	460a      	mov	r2, r1
 80017ee:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].acceleration_2.z = TEST_LIMIT( data.z );
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017f6:	da13      	bge.n	8001820 <HAL_TIM_PeriodElapsedCallback+0x204>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	bfb8      	it	lt
 8001800:	4613      	movlt	r3, r2
 8001802:	b219      	sxth	r1, r3
 8001804:	e00e      	b.n	8001824 <HAL_TIM_PeriodElapsedCallback+0x208>
 8001806:	bf00      	nop
 8001808:	40010000 	.word	0x40010000
 800180c:	20013bcc 	.word	0x20013bcc
 8001810:	20013bc4 	.word	0x20013bc4
 8001814:	ffff8000 	.word	0xffff8000
 8001818:	20000340 	.word	0x20000340
 800181c:	10624dd3 	.word	0x10624dd3
 8001820:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001824:	4b75      	ldr	r3, [pc, #468]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4875      	ldr	r0, [pc, #468]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4403      	add	r3, r0
 8001834:	3320      	adds	r3, #32
 8001836:	460a      	mov	r2, r1
 8001838:	801a      	strh	r2, [r3, #0]
                }
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LIS2DUXS12_0, MOTION_GYRO, &data ) != 0 )
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2101      	movs	r1, #1
 8001842:	2002      	movs	r0, #2
 8001844:	f00a f93a 	bl	800babc <IKS4A1_MOTION_SENSOR_GetAxes>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d138      	bne.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x2a4>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].angular_velocity_2.x = data.x / 1000; // to dps
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a6c      	ldr	r2, [pc, #432]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001852:	fb82 1203 	smull	r1, r2, r2, r3
 8001856:	1192      	asrs	r2, r2, #6
 8001858:	17db      	asrs	r3, r3, #31
 800185a:	1ad1      	subs	r1, r2, r3
 800185c:	4b67      	ldr	r3, [pc, #412]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	b208      	sxth	r0, r1
 8001862:	4967      	ldr	r1, [pc, #412]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3322      	adds	r3, #34	@ 0x22
 8001870:	4602      	mov	r2, r0
 8001872:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].angular_velocity_2.y = data.y / 1000;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4a63      	ldr	r2, [pc, #396]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001878:	fb82 1203 	smull	r1, r2, r2, r3
 800187c:	1192      	asrs	r2, r2, #6
 800187e:	17db      	asrs	r3, r3, #31
 8001880:	1ad1      	subs	r1, r2, r3
 8001882:	4b5e      	ldr	r3, [pc, #376]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	b208      	sxth	r0, r1
 8001888:	495d      	ldr	r1, [pc, #372]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3324      	adds	r3, #36	@ 0x24
 8001896:	4602      	mov	r2, r0
 8001898:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].angular_velocity_2.z = data.z / 1000;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4a59      	ldr	r2, [pc, #356]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800189e:	fb82 1203 	smull	r1, r2, r2, r3
 80018a2:	1192      	asrs	r2, r2, #6
 80018a4:	17db      	asrs	r3, r3, #31
 80018a6:	1ad1      	subs	r1, r2, r3
 80018a8:	4b54      	ldr	r3, [pc, #336]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	b208      	sxth	r0, r1
 80018ae:	4954      	ldr	r1, [pc, #336]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3326      	adds	r3, #38	@ 0x26
 80018bc:	4602      	mov	r2, r0
 80018be:	801a      	strh	r2, [r3, #0]
                }
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LIS2MDL_0, MOTION_MAGNETO, &data ) != 0 )
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	461a      	mov	r2, r3
 80018c6:	2104      	movs	r1, #4
 80018c8:	2000      	movs	r0, #0
 80018ca:	f00a f8f7 	bl	800babc <IKS4A1_MOTION_SENSOR_GetAxes>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d120      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x2fa>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].magnetic_field.x = data.x; // to mgauss
 80018d4:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	4849      	ldr	r0, [pc, #292]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4403      	add	r3, r0
 80018e6:	3310      	adds	r3, #16
 80018e8:	6019      	str	r1, [r3, #0]
                    sensor_data[count_data].magnetic_field.y = data.y;
 80018ea:	4b44      	ldr	r3, [pc, #272]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	6939      	ldr	r1, [r7, #16]
 80018f0:	4843      	ldr	r0, [pc, #268]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4403      	add	r3, r0
 80018fc:	3314      	adds	r3, #20
 80018fe:	6019      	str	r1, [r3, #0]
                    sensor_data[count_data].magnetic_field.z = data.z;
 8001900:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	6979      	ldr	r1, [r7, #20]
 8001906:	483e      	ldr	r0, [pc, #248]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4403      	add	r3, r0
 8001912:	3318      	adds	r3, #24
 8001914:	6019      	str	r1, [r3, #0]
                }

                sensor_data[count_data].timestamp = count_data * BASE_TIME_TIM1; //now - prev;
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	460b      	mov	r3, r1
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4618      	mov	r0, r3
 8001928:	4935      	ldr	r1, [pc, #212]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	6018      	str	r0, [r3, #0]
                printf( "Timestamp: %lu ms\n", (unsigned long) sensor_data[count_data].timestamp );
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4931      	ldr	r1, [pc, #196]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	482f      	ldr	r0, [pc, #188]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800194c:	f012 ff5c 	bl	8014808 <iprintf>
                count_data++;
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	4a29      	ldr	r2, [pc, #164]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e005      	b.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x34c>

            }
            else
            {
                status = WRITING_SD;
 800195c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
                data_ready = 1;           // avisa a thread principal
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
            }
        }

        count_led_status++;
 8001968:	4b2a      	ldr	r3, [pc, #168]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a29      	ldr	r2, [pc, #164]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001970:	6013      	str	r3, [r2, #0]
        switch( status )
 8001972:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d831      	bhi.n	80019de <HAL_TIM_PeriodElapsedCallback+0x3c2>
 800197a:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	08001991 	.word	0x08001991
 8001984:	080019a1 	.word	0x080019a1
 8001988:	080019b1 	.word	0x080019b1
 800198c:	080019c1 	.word	0x080019c1
        {
            case READY:
            {
                if( count_led_status >= 1000/BASE_TIME_TIM1 ) // toggle every second
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b63      	cmp	r3, #99	@ 0x63
 8001996:	d91d      	bls.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x3b8>
                {
                    count_led_status = 0;
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
                }
            }
                break;
 800199e:	e019      	b.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x3b8>
            case ACQUIRING:
            {
                if( count_led_status >= 500/BASE_TIME_TIM1 ) // toggle every 500ms
 80019a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b31      	cmp	r3, #49	@ 0x31
 80019a6:	d917      	bls.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x3bc>
                {
                    count_led_status = 0;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
                }

            }
            break;
 80019ae:	e013      	b.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x3bc>
            case WRITING_SD:
            {
                if( count_led_status >= 100/BASE_TIME_TIM1 ) // toggle every 100ms
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d911      	bls.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x3c0>
                {
                    count_led_status = 0;
 80019b8:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
                }

            }
                break;
 80019be:	e00d      	b.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x3c0>
            case COMPLETE:
            {
                count_led_status = 1;
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin, GPIO_PIN_SET );
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019cc:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80019ce:	f00b f9c3 	bl	800cd58 <HAL_GPIO_WritePin>

            }
                break;
 80019d2:	e004      	b.n	80019de <HAL_TIM_PeriodElapsedCallback+0x3c2>
                break;
 80019d4:	bf00      	nop
 80019d6:	e002      	b.n	80019de <HAL_TIM_PeriodElapsedCallback+0x3c2>
            break;
 80019d8:	bf00      	nop
 80019da:	e000      	b.n	80019de <HAL_TIM_PeriodElapsedCallback+0x3c2>
                break;
 80019dc:	bf00      	nop

        }

        if( count_led_status == 0 )
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d104      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
        {
            HAL_GPIO_TogglePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin );
 80019e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ea:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80019ec:	f00b f9cd 	bl	800cd8a <HAL_GPIO_TogglePin>
        }

        Check_Button();
 80019f0:	f7ff fdd0 	bl	8001594 <Check_Button>

    }
}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20013bc4 	.word	0x20013bc4
 8001a00:	20000340 	.word	0x20000340
 8001a04:	10624dd3 	.word	0x10624dd3
 8001a08:	08016830 	.word	0x08016830
 8001a0c:	20013bcc 	.word	0x20013bcc
 8001a10:	20013bc0 	.word	0x20013bc0
 8001a14:	20013bc8 	.word	0x20013bc8
 8001a18:	40020000 	.word	0x40020000

08001a1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( void )
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while( 1 )
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <Error_Handler+0x8>

08001a28 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SD_disk_status+0x14>
        return STA_NOINIT;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <SD_disk_status+0x16>
    return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e007      	b.n	8001a6e <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8001a5e:	f000 fbd1 	bl	8002204 <SD_SPI_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <SD_disk_read+0x1c>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <SD_disk_read+0x20>
        return RES_PARERR;
 8001a94:	2304      	movs	r3, #4
 8001a96:	e010      	b.n	8001aba <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <SD_disk_read+0x4c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <SD_disk_read+0x2c>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e00a      	b.n	8001aba <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f000 fc9d 	bl	80023e8 <SD_ReadBlocks>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20013e11 	.word	0x20013e11

08001ac8 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <SD_disk_write+0x1c>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <SD_disk_write+0x20>
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	e010      	b.n	8001b0a <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <SD_disk_write+0x4c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <SD_disk_write+0x2c>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e00a      	b.n	8001b0a <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	68b8      	ldr	r0, [r7, #8]
 8001afa:	f000 fd49 	bl	8002590 <SD_WriteBlocks>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20013e11 	.word	0x20013e11

08001b18 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	603a      	str	r2, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	460b      	mov	r3, r1
 8001b26:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e022      	b.n	8001b78 <SD_disk_ioctl+0x60>

    switch (cmd) {
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d81e      	bhi.n	8001b76 <SD_disk_ioctl+0x5e>
 8001b38:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <SD_disk_ioctl+0x28>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b61 	.word	0x08001b61
 8001b48:	08001b55 	.word	0x08001b55
 8001b4c:	08001b6d 	.word	0x08001b6d
    case CTRL_SYNC:
        return RES_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e011      	b.n	8001b78 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b5a:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e00b      	b.n	8001b78 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b66:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e005      	b.n	8001b78 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8001b76:	2304      	movs	r3, #4
    }
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <sd_get_space_kb>:
//	}
//		return res;
//}

int sd_get_space_kb( void )
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
    FATFS *pfs;
    DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
    FRESULT res = f_getfree( sd_path, &fre_clust, &pfs );
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4814      	ldr	r0, [pc, #80]	@ (8001be4 <sd_get_space_kb+0x60>)
 8001b94:	f012 fac8 	bl	8014128 <f_getfree>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	77fb      	strb	r3, [r7, #31]
    if( res != FR_OK )
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <sd_get_space_kb+0x22>
        return res;
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	e01a      	b.n	8001bdc <sd_get_space_kb+0x58>

    tot_sect = ( pfs->n_fatent - 2 ) * pfs->csize;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	3b02      	subs	r3, #2
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	8952      	ldrh	r2, [r2, #10]
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	61bb      	str	r3, [r7, #24]
    fre_sect = fre_clust * pfs->csize;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	895b      	ldrh	r3, [r3, #10]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
    total_kb = tot_sect / 2;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
    free_kb = fre_sect / 2;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
    printf( "💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb );
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6939      	ldr	r1, [r7, #16]
 8001bd4:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <sd_get_space_kb+0x64>)
 8001bd6:	f012 fe17 	bl	8014808 <iprintf>
    return FR_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20013bd8 	.word	0x20013bd8
 8001be8:	08016844 	.word	0x08016844

08001bec <sd_mount>:

int sd_mount( void )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
    FRESULT res;
    extern uint8_t sd_is_sdhc( void );

    printf( "Linking SD driver...\r\n" );
 8001bf2:	4829      	ldr	r0, [pc, #164]	@ (8001c98 <sd_mount+0xac>)
 8001bf4:	f012 fe70 	bl	80148d8 <puts>
    if( FATFS_LinkDriver( &SD_Driver, sd_path ) != 0 )
 8001bf8:	4928      	ldr	r1, [pc, #160]	@ (8001c9c <sd_mount+0xb0>)
 8001bfa:	4829      	ldr	r0, [pc, #164]	@ (8001ca0 <sd_mount+0xb4>)
 8001bfc:	f012 fb96 	bl	801432c <FATFS_LinkDriver>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <sd_mount+0x24>
    {
        printf( "FATFS_LinkDriver failed\n" );
 8001c06:	4827      	ldr	r0, [pc, #156]	@ (8001ca4 <sd_mount+0xb8>)
 8001c08:	f012 fe66 	bl	80148d8 <puts>
        return FR_DISK_ERR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e03f      	b.n	8001c90 <sd_mount+0xa4>
    }

    printf( "Initializing disk...\r\n" );
 8001c10:	4825      	ldr	r0, [pc, #148]	@ (8001ca8 <sd_mount+0xbc>)
 8001c12:	f012 fe61 	bl	80148d8 <puts>
    DSTATUS stat = disk_initialize( 0 );
 8001c16:	2000      	movs	r0, #0
 8001c18:	f00f f870 	bl	8010cfc <disk_initialize>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
    if( stat != 0 )
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <sd_mount+0x54>
    {
        printf( "disk_initialize failed: 0x%02X\n", stat );
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4820      	ldr	r0, [pc, #128]	@ (8001cac <sd_mount+0xc0>)
 8001c2c:	f012 fdec 	bl	8014808 <iprintf>
        printf( "FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n" );
 8001c30:	481f      	ldr	r0, [pc, #124]	@ (8001cb0 <sd_mount+0xc4>)
 8001c32:	f012 fe51 	bl	80148d8 <puts>
        printf( "Make sure \"MX_FATFS_Init\" is not being called in the main function\n"
 8001c36:	481f      	ldr	r0, [pc, #124]	@ (8001cb4 <sd_mount+0xc8>)
 8001c38:	f012 fe4e 	bl	80148d8 <puts>
                "You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n" );
        return FR_NOT_READY;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e027      	b.n	8001c90 <sd_mount+0xa4>
    }

    printf( "Attempting mount at %s...\r\n", sd_path );
 8001c40:	4916      	ldr	r1, [pc, #88]	@ (8001c9c <sd_mount+0xb0>)
 8001c42:	481d      	ldr	r0, [pc, #116]	@ (8001cb8 <sd_mount+0xcc>)
 8001c44:	f012 fde0 	bl	8014808 <iprintf>
    res = f_mount( &fs, sd_path, 1 );
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4914      	ldr	r1, [pc, #80]	@ (8001c9c <sd_mount+0xb0>)
 8001c4c:	481b      	ldr	r0, [pc, #108]	@ (8001cbc <sd_mount+0xd0>)
 8001c4e:	f011 fb3f 	bl	80132d0 <f_mount>
 8001c52:	4603      	mov	r3, r0
 8001c54:	71bb      	strb	r3, [r7, #6]
    if( res == FR_OK )
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d113      	bne.n	8001c84 <sd_mount+0x98>
    {
        printf( "SD card mounted successfully at %s\r\n", sd_path );
 8001c5c:	490f      	ldr	r1, [pc, #60]	@ (8001c9c <sd_mount+0xb0>)
 8001c5e:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <sd_mount+0xd4>)
 8001c60:	f012 fdd2 	bl	8014808 <iprintf>
        printf( "Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC" );
 8001c64:	f000 fac2 	bl	80021ec <sd_is_sdhc>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <sd_mount+0x86>
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <sd_mount+0xd8>)
 8001c70:	e000      	b.n	8001c74 <sd_mount+0x88>
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <sd_mount+0xdc>)
 8001c74:	4619      	mov	r1, r3
 8001c76:	4815      	ldr	r0, [pc, #84]	@ (8001ccc <sd_mount+0xe0>)
 8001c78:	f012 fdc6 	bl	8014808 <iprintf>

        // Capacity and free space reporting
        sd_get_space_kb();
 8001c7c:	f7ff ff82 	bl	8001b84 <sd_get_space_kb>
        return FR_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e005      	b.n	8001c90 <sd_mount+0xa4>
//			printf("Mount failed even after format: %d\r\n", res);
//		}
//		return res;
//	}
// Any other mount error
    printf( "Mount failed with code: %d\r\n", res );
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	4619      	mov	r1, r3
 8001c88:	4811      	ldr	r0, [pc, #68]	@ (8001cd0 <sd_mount+0xe4>)
 8001c8a:	f012 fdbd 	bl	8014808 <iprintf>
    return res;
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08016868 	.word	0x08016868
 8001c9c:	20013bd8 	.word	0x20013bd8
 8001ca0:	080170d8 	.word	0x080170d8
 8001ca4:	08016880 	.word	0x08016880
 8001ca8:	08016898 	.word	0x08016898
 8001cac:	080168b0 	.word	0x080168b0
 8001cb0:	080168d0 	.word	0x080168d0
 8001cb4:	08016908 	.word	0x08016908
 8001cb8:	080169c0 	.word	0x080169c0
 8001cbc:	20013bdc 	.word	0x20013bdc
 8001cc0:	080169dc 	.word	0x080169dc
 8001cc4:	08016a04 	.word	0x08016a04
 8001cc8:	08016a10 	.word	0x08016a10
 8001ccc:	08016a18 	.word	0x08016a18
 8001cd0:	08016a28 	.word	0x08016a28

08001cd4 <sd_unmount>:

int sd_unmount( void )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
    FRESULT res = f_mount( NULL, sd_path, 1 );
 8001cda:	2201      	movs	r2, #1
 8001cdc:	490a      	ldr	r1, [pc, #40]	@ (8001d08 <sd_unmount+0x34>)
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f011 faf6 	bl	80132d0 <f_mount>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
    printf( "SD card unmounted: %s\r\n", ( res == FR_OK ) ? "OK" : "Failed" );
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <sd_unmount+0x1e>
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <sd_unmount+0x38>)
 8001cf0:	e000      	b.n	8001cf4 <sd_unmount+0x20>
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <sd_unmount+0x3c>)
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <sd_unmount+0x40>)
 8001cf8:	f012 fd86 	bl	8014808 <iprintf>
    return res;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20013bd8 	.word	0x20013bd8
 8001d0c:	08016a48 	.word	0x08016a48
 8001d10:	08016a4c 	.word	0x08016a4c
 8001d14:	08016a54 	.word	0x08016a54

08001d18 <sd_write_file>:

int sd_write_file( const char * filename, const char * text )
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d24:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001d28:	6018      	str	r0, [r3, #0]
 8001d2a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d2e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001d32:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bw;
    FRESULT res = f_open( &file, filename, FA_CREATE_ALWAYS | FA_WRITE );
 8001d34:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d38:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001d3c:	f107 000c 	add.w	r0, r7, #12
 8001d40:	220a      	movs	r2, #10
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	f011 fb0a 	bl	801335c <f_open>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if( res != FR_OK )
 8001d4e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <sd_write_file+0x44>
        return res;
 8001d56:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001d5a:	e03e      	b.n	8001dda <sd_write_file+0xc2>

    res = f_write( &file, text, strlen( text ), &bw );
 8001d5c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d60:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f7fe fa45 	bl	80001f4 <strlen>
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001d74:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001d78:	f107 000c 	add.w	r0, r7, #12
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	6809      	ldr	r1, [r1, #0]
 8001d80:	f011 fcb6 	bl	80136f0 <f_write>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    f_close( &file );
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f011 fea1 	bl	8013ad6 <f_close>
    printf( "Write %u bytes to %s\r\n", bw, filename );
 8001d94:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d98:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001da2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <sd_write_file+0xcc>)
 8001daa:	f012 fd2d 	bl	8014808 <iprintf>
    return ( res == FR_OK && bw == strlen( text ) ) ? FR_OK : FR_DISK_ERR;
 8001dae:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <sd_write_file+0xbc>
 8001db6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001dba:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	f7fe fa18 	bl	80001f4 <strlen>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001dca:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <sd_write_file+0xc0>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <sd_write_file+0xc2>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	08016a6c 	.word	0x08016a6c

08001de8 <sd_append_file>:

int sd_append_file( const char * filename, const char * text )
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001df4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001df8:	6018      	str	r0, [r3, #0]
 8001dfa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001dfe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001e02:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bw;
    FRESULT res = f_open( &file, filename, FA_OPEN_ALWAYS | FA_WRITE );
 8001e04:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001e08:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001e0c:	f107 000c 	add.w	r0, r7, #12
 8001e10:	2212      	movs	r2, #18
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	f011 faa2 	bl	801335c <f_open>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if( res != FR_OK )
 8001e1e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <sd_append_file+0x44>
        return res;
 8001e26:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001e2a:	e058      	b.n	8001ede <sd_append_file+0xf6>

    res = f_lseek( &file, f_size( &file ) );
 8001e2c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001e30:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f011 fe74 	bl	8013b2a <f_lseek>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if( res != FR_OK )
 8001e48:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <sd_append_file+0x78>
    {
        f_close( &file );
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4618      	mov	r0, r3
 8001e56:	f011 fe3e 	bl	8013ad6 <f_close>
        return res;
 8001e5a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001e5e:	e03e      	b.n	8001ede <sd_append_file+0xf6>
    }

    res = f_write( &file, text, strlen( text ), &bw );
 8001e60:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001e64:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	f7fe f9c3 	bl	80001f4 <strlen>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001e78:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001e7c:	f107 000c 	add.w	r0, r7, #12
 8001e80:	4622      	mov	r2, r4
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	f011 fc34 	bl	80136f0 <f_write>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    f_close( &file );
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4618      	mov	r0, r3
 8001e94:	f011 fe1f 	bl	8013ad6 <f_close>
    printf( "Appended %u bytes to %s\r\n", bw, filename );
 8001e98:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001e9c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ea6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	480e      	ldr	r0, [pc, #56]	@ (8001ee8 <sd_append_file+0x100>)
 8001eae:	f012 fcab 	bl	8014808 <iprintf>
    return ( res == FR_OK && bw == strlen( text ) ) ? FR_OK : FR_DISK_ERR;
 8001eb2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <sd_append_file+0xf0>
 8001eba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ebe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f7fe f996 	bl	80001f4 <strlen>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ece:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <sd_append_file+0xf4>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <sd_append_file+0xf6>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	08016a84 	.word	0x08016a84

08001eec <sd_list_directory_recursive>:
    printf( "Create directory %s: %s\r\n", path, ( res == FR_OK ? "OK" : "Failed" ) );
    return res;
}

void sd_list_directory_recursive( const char * path, int depth )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0fa      	sub	sp, #488	@ 0x1e8
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ef6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001efa:	6018      	str	r0, [r3, #0]
 8001efc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f00:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f04:	6019      	str	r1, [r3, #0]
    DIR dir;
    FILINFO fno;
    FRESULT res = f_opendir( &dir, path );
 8001f06:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f0e:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	4610      	mov	r0, r2
 8001f16:	f012 f811 	bl	8013f3c <f_opendir>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
    if( res != FR_OK )
 8001f20:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00f      	beq.n	8001f48 <sd_list_directory_recursive+0x5c>
    {
        printf( "%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path );
 8001f28:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f2c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0059      	lsls	r1, r3, #1
 8001f34:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f38:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002038 <sd_list_directory_recursive+0x14c>)
 8001f40:	483e      	ldr	r0, [pc, #248]	@ (800203c <sd_list_directory_recursive+0x150>)
 8001f42:	f012 fc61 	bl	8014808 <iprintf>
 8001f46:	e072      	b.n	800202e <sd_list_directory_recursive+0x142>
        return;
    }

    while( 1 )
    {
        res = f_readdir( &dir, &fno );
 8001f48:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001f4c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f012 f89b 	bl	801408e <f_readdir>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
        if( res != FR_OK || fno.fname[0] == 0 )
 8001f5e:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d15e      	bne.n	8002024 <sd_list_directory_recursive+0x138>
 8001f66:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f6e:	7d9b      	ldrb	r3, [r3, #22]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d057      	beq.n	8002024 <sd_list_directory_recursive+0x138>
            break;

        const char *name = ( *fno.fname ) ? fno.fname : fno.fname;
 8001f74:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001f78:	3316      	adds	r3, #22
 8001f7a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

        if( fno.fattrib & AM_DIR )
 8001f7e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f82:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f86:	7a1b      	ldrb	r3, [r3, #8]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d036      	beq.n	8001ffe <sd_list_directory_recursive+0x112>
        {
            if( strcmp( name, "." ) && strcmp( name, ".." ) )
 8001f90:	492b      	ldr	r1, [pc, #172]	@ (8002040 <sd_list_directory_recursive+0x154>)
 8001f92:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001f96:	f7fe f923 	bl	80001e0 <strcmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0d3      	beq.n	8001f48 <sd_list_directory_recursive+0x5c>
 8001fa0:	4928      	ldr	r1, [pc, #160]	@ (8002044 <sd_list_directory_recursive+0x158>)
 8001fa2:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001fa6:	f7fe f91b 	bl	80001e0 <strcmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0cb      	beq.n	8001f48 <sd_list_directory_recursive+0x5c>
            {
                printf( "%*s📁 %s\r\n", depth * 2, "", name );
 8001fb0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001fb4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0059      	lsls	r1, r3, #1
 8001fbc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <sd_list_directory_recursive+0x14c>)
 8001fc2:	4821      	ldr	r0, [pc, #132]	@ (8002048 <sd_list_directory_recursive+0x15c>)
 8001fc4:	f012 fc20 	bl	8014808 <iprintf>
                char newpath[128];
                snprintf( newpath, sizeof( newpath ), "%s/%s", path, name );
 8001fc8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001fcc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001fd0:	f107 000c 	add.w	r0, r7, #12
 8001fd4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001fd8:	9200      	str	r2, [sp, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <sd_list_directory_recursive+0x160>)
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	f012 fc82 	bl	80148e8 <sniprintf>
                sd_list_directory_recursive( newpath, depth + 1 );
 8001fe4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001fe8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff78 	bl	8001eec <sd_list_directory_recursive>
 8001ffc:	e7a4      	b.n	8001f48 <sd_list_directory_recursive+0x5c>
            }
        }
        else
        {
            printf( "%*s📄 %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long) fno.fsize );
 8001ffe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8002002:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0059      	lsls	r1, r3, #1
 800200a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800200e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800201a:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <sd_list_directory_recursive+0x14c>)
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <sd_list_directory_recursive+0x164>)
 800201e:	f012 fbf3 	bl	8014808 <iprintf>
    {
 8002022:	e791      	b.n	8001f48 <sd_list_directory_recursive+0x5c>
        }
    }
    f_closedir( &dir );
 8002024:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8002028:	4618      	mov	r0, r3
 800202a:	f012 f80a 	bl	8014042 <f_closedir>
}
 800202e:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	08016ba8 	.word	0x08016ba8
 800203c:	08016bac 	.word	0x08016bac
 8002040:	08016bc8 	.word	0x08016bc8
 8002044:	08016bcc 	.word	0x08016bcc
 8002048:	08016bd0 	.word	0x08016bd0
 800204c:	08016be0 	.word	0x08016be0
 8002050:	08016be8 	.word	0x08016be8

08002054 <sd_list_files>:

void sd_list_files( void )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
    printf( "📂 Files on SD Card:\r\n" );
 8002058:	4805      	ldr	r0, [pc, #20]	@ (8002070 <sd_list_files+0x1c>)
 800205a:	f012 fc3d 	bl	80148d8 <puts>
    sd_list_directory_recursive( sd_path, 0 );
 800205e:	2100      	movs	r1, #0
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <sd_list_files+0x20>)
 8002062:	f7ff ff43 	bl	8001eec <sd_list_directory_recursive>
    printf( "\r\n\r\n" );
 8002066:	4804      	ldr	r0, [pc, #16]	@ (8002078 <sd_list_files+0x24>)
 8002068:	f012 fc36 	bl	80148d8 <puts>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08016c04 	.word	0x08016c04
 8002074:	20013bd8 	.word	0x20013bd8
 8002078:	08016c1c 	.word	0x08016c1c

0800207c <SD_TransmitByte>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi1) dma_rx_done = 1;
}
#endif

static void SD_TransmitByte(uint8_t data) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8002086:	1df9      	adds	r1, r7, #7
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	2201      	movs	r2, #1
 800208e:	4803      	ldr	r0, [pc, #12]	@ (800209c <SD_TransmitByte+0x20>)
 8002090:	f00d f8b9 	bl	800f206 <HAL_SPI_Transmit>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200002a0 	.word	0x200002a0

080020a0 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 80020a6:	23ff      	movs	r3, #255	@ 0xff
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	2300      	movs	r3, #0
 80020ac:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 80020ae:	1dba      	adds	r2, r7, #6
 80020b0:	1df9      	adds	r1, r7, #7
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	4804      	ldr	r0, [pc, #16]	@ (80020cc <SD_ReceiveByte+0x2c>)
 80020bc:	f00d f9e7 	bl	800f48e <HAL_SPI_TransmitReceive>
    return data;
 80020c0:	79bb      	ldrb	r3, [r7, #6]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200002a0 	.word	0x200002a0

080020d0 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
    while (!dma_tx_done);
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <SD_TransmitBuffer+0x24>)
 80020e6:	f00d f88e 	bl	800f206 <HAL_SPI_Transmit>
#endif
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200002a0 	.word	0x200002a0

080020f8 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
    dma_rx_done = 0;
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
    while (!dma_rx_done);
#else
    for (uint16_t i = 0; i < len; i++) {
 8002104:	2300      	movs	r3, #0
 8002106:	81fb      	strh	r3, [r7, #14]
 8002108:	e009      	b.n	800211e <SD_ReceiveBuffer+0x26>
        buffer[i] = SD_ReceiveByte();
 800210a:	89fb      	ldrh	r3, [r7, #14]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	18d4      	adds	r4, r2, r3
 8002110:	f7ff ffc6 	bl	80020a0 <SD_ReceiveByte>
 8002114:	4603      	mov	r3, r0
 8002116:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	3301      	adds	r3, #1
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	89fa      	ldrh	r2, [r7, #14]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3f1      	bcc.n	800210a <SD_ReceiveBuffer+0x12>
    }
#endif
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8002136:	f00a fa1f 	bl	800c578 <HAL_GetTick>
 800213a:	4603      	mov	r3, r0
 800213c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002140:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8002142:	f7ff ffad 	bl	80020a0 <SD_ReceiveByte>
 8002146:	4603      	mov	r3, r0
 8002148:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2bff      	cmp	r3, #255	@ 0xff
 800214e:	d101      	bne.n	8002154 <SD_WaitReady+0x24>
 8002150:	2300      	movs	r3, #0
 8002152:	e006      	b.n	8002162 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8002154:	f00a fa10 	bl	800c578 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4293      	cmp	r3, r2
 800215e:	d8f0      	bhi.n	8002142 <SD_WaitReady+0x12>
    return SD_ERROR;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	6039      	str	r1, [r7, #0]
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	4613      	mov	r3, r2
 8002178:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 800217a:	23ff      	movs	r3, #255	@ 0xff
 800217c:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 800217e:	f7ff ffd7 	bl	8002130 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff76 	bl	800207c <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	0e1b      	lsrs	r3, r3, #24
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff70 	bl	800207c <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff6a 	bl	800207c <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff64 	bl	800207c <SD_TransmitByte>
    SD_TransmitByte(arg);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5f 	bl	800207c <SD_TransmitByte>
    SD_TransmitByte(crc);
 80021be:	79bb      	ldrb	r3, [r7, #6]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5b 	bl	800207c <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 80021c6:	f7ff ff6b 	bl	80020a0 <SD_ReceiveByte>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 80021ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da05      	bge.n	80021e2 <SD_SendCommand+0x78>
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	3b01      	subs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f1      	bne.n	80021c6 <SD_SendCommand+0x5c>

    return response;
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
    return sdhc;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <sd_is_sdhc+0x14>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20013e10 	.word	0x20013e10

08002204 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 800220a:	2201      	movs	r2, #1
 800220c:	2120      	movs	r1, #32
 800220e:	4873      	ldr	r0, [pc, #460]	@ (80023dc <SD_SPI_Init+0x1d8>)
 8002210:	f00a fda2 	bl	800cd58 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e005      	b.n	8002226 <SD_SPI_Init+0x22>
 800221a:	20ff      	movs	r0, #255	@ 0xff
 800221c:	f7ff ff2e 	bl	800207c <SD_TransmitByte>
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3301      	adds	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b09      	cmp	r3, #9
 800222a:	d9f6      	bls.n	800221a <SD_SPI_Init+0x16>

    SD_CS_LOW();
 800222c:	2200      	movs	r2, #0
 800222e:	2120      	movs	r1, #32
 8002230:	486a      	ldr	r0, [pc, #424]	@ (80023dc <SD_SPI_Init+0x1d8>)
 8002232:	f00a fd91 	bl	800cd58 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8002236:	2295      	movs	r2, #149	@ 0x95
 8002238:	2100      	movs	r1, #0
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff ff95 	bl	800216a <SD_SendCommand>
 8002240:	4603      	mov	r3, r0
 8002242:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8002244:	2201      	movs	r2, #1
 8002246:	2120      	movs	r1, #32
 8002248:	4864      	ldr	r0, [pc, #400]	@ (80023dc <SD_SPI_Init+0x1d8>)
 800224a:	f00a fd85 	bl	800cd58 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800224e:	20ff      	movs	r0, #255	@ 0xff
 8002250:	f7ff ff14 	bl	800207c <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <SD_SPI_Init+0x5a>
 800225a:	2301      	movs	r3, #1
 800225c:	e0ba      	b.n	80023d4 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 800225e:	2200      	movs	r2, #0
 8002260:	2120      	movs	r1, #32
 8002262:	485e      	ldr	r0, [pc, #376]	@ (80023dc <SD_SPI_Init+0x1d8>)
 8002264:	f00a fd78 	bl	800cd58 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8002268:	2287      	movs	r2, #135	@ 0x87
 800226a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800226e:	2008      	movs	r0, #8
 8002270:	f7ff ff7b 	bl	800216a <SD_SendCommand>
 8002274:	4603      	mov	r3, r0
 8002276:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e00c      	b.n	8002298 <SD_SPI_Init+0x94>
 800227e:	7bfc      	ldrb	r4, [r7, #15]
 8002280:	f7ff ff0e 	bl	80020a0 <SD_ReceiveByte>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	f104 0310 	add.w	r3, r4, #16
 800228c:	443b      	add	r3, r7
 800228e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d9ef      	bls.n	800227e <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 800229e:	2201      	movs	r2, #1
 80022a0:	2120      	movs	r1, #32
 80022a2:	484e      	ldr	r0, [pc, #312]	@ (80023dc <SD_SPI_Init+0x1d8>)
 80022a4:	f00a fd58 	bl	800cd58 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80022a8:	20ff      	movs	r0, #255	@ 0xff
 80022aa:	f7ff fee7 	bl	800207c <SD_TransmitByte>

    sdhc = 0;
 80022ae:	4b4c      	ldr	r3, [pc, #304]	@ (80023e0 <SD_SPI_Init+0x1dc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 80022b4:	f00a f960 	bl	800c578 <HAL_GetTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80022be:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d15a      	bne.n	800237c <SD_SPI_Init+0x178>
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d157      	bne.n	800237c <SD_SPI_Init+0x178>
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2baa      	cmp	r3, #170	@ 0xaa
 80022d0:	d154      	bne.n	800237c <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 80022d2:	2200      	movs	r2, #0
 80022d4:	2120      	movs	r1, #32
 80022d6:	4841      	ldr	r0, [pc, #260]	@ (80023dc <SD_SPI_Init+0x1d8>)
 80022d8:	f00a fd3e 	bl	800cd58 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 80022dc:	22ff      	movs	r2, #255	@ 0xff
 80022de:	2100      	movs	r1, #0
 80022e0:	2037      	movs	r0, #55	@ 0x37
 80022e2:	f7ff ff42 	bl	800216a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 80022e6:	22ff      	movs	r2, #255	@ 0xff
 80022e8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022ec:	2029      	movs	r0, #41	@ 0x29
 80022ee:	f7ff ff3c 	bl	800216a <SD_SendCommand>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 80022f6:	2201      	movs	r2, #1
 80022f8:	2120      	movs	r1, #32
 80022fa:	4838      	ldr	r0, [pc, #224]	@ (80023dc <SD_SPI_Init+0x1d8>)
 80022fc:	f00a fd2c 	bl	800cd58 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8002300:	20ff      	movs	r0, #255	@ 0xff
 8002302:	f7ff febb 	bl	800207c <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <SD_SPI_Init+0x114>
 800230c:	f00a f934 	bl	800c578 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4293      	cmp	r3, r2
 8002316:	d8dc      	bhi.n	80022d2 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8002318:	7bbb      	ldrb	r3, [r7, #14]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SD_SPI_Init+0x11e>
 800231e:	2301      	movs	r3, #1
 8002320:	e058      	b.n	80023d4 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8002322:	2200      	movs	r2, #0
 8002324:	2120      	movs	r1, #32
 8002326:	482d      	ldr	r0, [pc, #180]	@ (80023dc <SD_SPI_Init+0x1d8>)
 8002328:	f00a fd16 	bl	800cd58 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 800232c:	22ff      	movs	r2, #255	@ 0xff
 800232e:	2100      	movs	r1, #0
 8002330:	203a      	movs	r0, #58	@ 0x3a
 8002332:	f7ff ff1a 	bl	800216a <SD_SendCommand>
 8002336:	4603      	mov	r3, r0
 8002338:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e00c      	b.n	800235a <SD_SPI_Init+0x156>
 8002340:	7bfc      	ldrb	r4, [r7, #15]
 8002342:	f7ff fead 	bl	80020a0 <SD_ReceiveByte>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	f104 0310 	add.w	r3, r4, #16
 800234e:	443b      	add	r3, r7
 8002350:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	3301      	adds	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d9ef      	bls.n	8002340 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8002360:	2201      	movs	r2, #1
 8002362:	2120      	movs	r1, #32
 8002364:	481d      	ldr	r0, [pc, #116]	@ (80023dc <SD_SPI_Init+0x1d8>)
 8002366:	f00a fcf7 	bl	800cd58 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 800236a:	783b      	ldrb	r3, [r7, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02a      	beq.n	80023ca <SD_SPI_Init+0x1c6>
 8002374:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <SD_SPI_Init+0x1dc>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 800237a:	e026      	b.n	80023ca <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 800237c:	2200      	movs	r2, #0
 800237e:	2120      	movs	r1, #32
 8002380:	4816      	ldr	r0, [pc, #88]	@ (80023dc <SD_SPI_Init+0x1d8>)
 8002382:	f00a fce9 	bl	800cd58 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8002386:	22ff      	movs	r2, #255	@ 0xff
 8002388:	2100      	movs	r1, #0
 800238a:	2037      	movs	r0, #55	@ 0x37
 800238c:	f7ff feed 	bl	800216a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8002390:	22ff      	movs	r2, #255	@ 0xff
 8002392:	2100      	movs	r1, #0
 8002394:	2029      	movs	r0, #41	@ 0x29
 8002396:	f7ff fee8 	bl	800216a <SD_SendCommand>
 800239a:	4603      	mov	r3, r0
 800239c:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 800239e:	2201      	movs	r2, #1
 80023a0:	2120      	movs	r1, #32
 80023a2:	480e      	ldr	r0, [pc, #56]	@ (80023dc <SD_SPI_Init+0x1d8>)
 80023a4:	f00a fcd8 	bl	800cd58 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80023a8:	20ff      	movs	r0, #255	@ 0xff
 80023aa:	f7ff fe67 	bl	800207c <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80023ae:	7bbb      	ldrb	r3, [r7, #14]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <SD_SPI_Init+0x1bc>
 80023b4:	f00a f8e0 	bl	800c578 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d8dd      	bhi.n	800237c <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <SD_SPI_Init+0x1c8>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e004      	b.n	80023d4 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80023ca:	bf00      	nop
    }

    card_initialized = 1;
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <SD_SPI_Init+0x1e0>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	40020400 	.word	0x40020400
 80023e0:	20013e10 	.word	0x20013e10
 80023e4:	20013e11 	.word	0x20013e11

080023e8 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <SD_ReadBlocks+0x16>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e054      	b.n	80024a8 <SD_ReadBlocks+0xc0>

    if (count == 1) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d14b      	bne.n	800249c <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8002404:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <SD_ReadBlocks+0xc8>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <SD_ReadBlocks+0x2a>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	025b      	lsls	r3, r3, #9
 8002410:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8002412:	2200      	movs	r2, #0
 8002414:	2120      	movs	r1, #32
 8002416:	4827      	ldr	r0, [pc, #156]	@ (80024b4 <SD_ReadBlocks+0xcc>)
 8002418:	f00a fc9e 	bl	800cd58 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 800241c:	22ff      	movs	r2, #255	@ 0xff
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	2011      	movs	r0, #17
 8002422:	f7ff fea2 	bl	800216a <SD_SendCommand>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 800242c:	2201      	movs	r2, #1
 800242e:	2120      	movs	r1, #32
 8002430:	4820      	ldr	r0, [pc, #128]	@ (80024b4 <SD_ReadBlocks+0xcc>)
 8002432:	f00a fc91 	bl	800cd58 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e036      	b.n	80024a8 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 800243a:	f00a f89d 	bl	800c578 <HAL_GetTick>
 800243e:	4603      	mov	r3, r0
 8002440:	33c8      	adds	r3, #200	@ 0xc8
 8002442:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8002444:	f7ff fe2c 	bl	80020a0 <SD_ReceiveByte>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002450:	d006      	beq.n	8002460 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8002452:	f00a f891 	bl	800c578 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4293      	cmp	r3, r2
 800245c:	d8f2      	bhi.n	8002444 <SD_ReadBlocks+0x5c>
 800245e:	e000      	b.n	8002462 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8002460:	bf00      	nop
        if (token != 0xFE) {
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2bfe      	cmp	r3, #254	@ 0xfe
 8002466:	d006      	beq.n	8002476 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8002468:	2201      	movs	r2, #1
 800246a:	2120      	movs	r1, #32
 800246c:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <SD_ReadBlocks+0xcc>)
 800246e:	f00a fc73 	bl	800cd58 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e018      	b.n	80024a8 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8002476:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff fe3c 	bl	80020f8 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8002480:	f7ff fe0e 	bl	80020a0 <SD_ReceiveByte>
        SD_ReceiveByte();
 8002484:	f7ff fe0c 	bl	80020a0 <SD_ReceiveByte>
        SD_CS_HIGH();
 8002488:	2201      	movs	r2, #1
 800248a:	2120      	movs	r1, #32
 800248c:	4809      	ldr	r0, [pc, #36]	@ (80024b4 <SD_ReadBlocks+0xcc>)
 800248e:	f00a fc63 	bl	800cd58 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002492:	20ff      	movs	r0, #255	@ 0xff
 8002494:	f7ff fdf2 	bl	800207c <SD_TransmitByte>
        return SD_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e005      	b.n	80024a8 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f809 	bl	80024b8 <SD_ReadMultiBlocks>
 80024a6:	4603      	mov	r3, r0
    }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20013e10 	.word	0x20013e10
 80024b4:	40020400 	.word	0x40020400

080024b8 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <SD_ReadMultiBlocks+0x16>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e058      	b.n	8002580 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <SD_ReadMultiBlocks+0xd0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <SD_ReadMultiBlocks+0x24>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80024dc:	2200      	movs	r2, #0
 80024de:	2120      	movs	r1, #32
 80024e0:	482a      	ldr	r0, [pc, #168]	@ (800258c <SD_ReadMultiBlocks+0xd4>)
 80024e2:	f00a fc39 	bl	800cd58 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 80024e6:	22ff      	movs	r2, #255	@ 0xff
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	2012      	movs	r0, #18
 80024ec:	f7ff fe3d 	bl	800216a <SD_SendCommand>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d031      	beq.n	800255a <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 80024f6:	2201      	movs	r2, #1
 80024f8:	2120      	movs	r1, #32
 80024fa:	4824      	ldr	r0, [pc, #144]	@ (800258c <SD_ReadMultiBlocks+0xd4>)
 80024fc:	f00a fc2c 	bl	800cd58 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e03d      	b.n	8002580 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8002504:	f00a f838 	bl	800c578 <HAL_GetTick>
 8002508:	4603      	mov	r3, r0
 800250a:	33c8      	adds	r3, #200	@ 0xc8
 800250c:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 800250e:	f7ff fdc7 	bl	80020a0 <SD_ReceiveByte>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2bfe      	cmp	r3, #254	@ 0xfe
 800251a:	d006      	beq.n	800252a <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 800251c:	f00a f82c 	bl	800c578 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	4293      	cmp	r3, r2
 8002526:	d8f2      	bhi.n	800250e <SD_ReadMultiBlocks+0x56>
 8002528:	e000      	b.n	800252c <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 800252a:	bf00      	nop

        if (token != 0xFE) {
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002530:	d006      	beq.n	8002540 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8002532:	2201      	movs	r2, #1
 8002534:	2120      	movs	r1, #32
 8002536:	4815      	ldr	r0, [pc, #84]	@ (800258c <SD_ReadMultiBlocks+0xd4>)
 8002538:	f00a fc0e 	bl	800cd58 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e01f      	b.n	8002580 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8002540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff fdd7 	bl	80020f8 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 800254a:	f7ff fda9 	bl	80020a0 <SD_ReceiveByte>
        SD_ReceiveByte();
 800254e:	f7ff fda7 	bl	80020a0 <SD_ReceiveByte>

        buff += 512;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002558:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1cf      	bne.n	8002504 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8002564:	22ff      	movs	r2, #255	@ 0xff
 8002566:	2100      	movs	r1, #0
 8002568:	200c      	movs	r0, #12
 800256a:	f7ff fdfe 	bl	800216a <SD_SendCommand>
    SD_CS_HIGH();
 800256e:	2201      	movs	r2, #1
 8002570:	2120      	movs	r1, #32
 8002572:	4806      	ldr	r0, [pc, #24]	@ (800258c <SD_ReadMultiBlocks+0xd4>)
 8002574:	f00a fbf0 	bl	800cd58 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8002578:	20ff      	movs	r0, #255	@ 0xff
 800257a:	f7ff fd7f 	bl	800207c <SD_TransmitByte>

    return SD_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20013e10 	.word	0x20013e10
 800258c:	40020400 	.word	0x40020400

08002590 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <SD_WriteBlocks+0x16>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e051      	b.n	800264a <SD_WriteBlocks+0xba>

    if (count == 1) {
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d148      	bne.n	800263e <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <SD_WriteBlocks+0xc4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <SD_WriteBlocks+0x2a>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 80025ba:	2200      	movs	r2, #0
 80025bc:	2120      	movs	r1, #32
 80025be:	4826      	ldr	r0, [pc, #152]	@ (8002658 <SD_WriteBlocks+0xc8>)
 80025c0:	f00a fbca 	bl	800cd58 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 80025c4:	22ff      	movs	r2, #255	@ 0xff
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	2018      	movs	r0, #24
 80025ca:	f7ff fdce 	bl	800216a <SD_SendCommand>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 80025d4:	2201      	movs	r2, #1
 80025d6:	2120      	movs	r1, #32
 80025d8:	481f      	ldr	r0, [pc, #124]	@ (8002658 <SD_WriteBlocks+0xc8>)
 80025da:	f00a fbbd 	bl	800cd58 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e033      	b.n	800264a <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 80025e2:	20fe      	movs	r0, #254	@ 0xfe
 80025e4:	f7ff fd4a 	bl	800207c <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 80025e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fd6f 	bl	80020d0 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 80025f2:	20ff      	movs	r0, #255	@ 0xff
 80025f4:	f7ff fd42 	bl	800207c <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80025f8:	20ff      	movs	r0, #255	@ 0xff
 80025fa:	f7ff fd3f 	bl	800207c <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80025fe:	f7ff fd4f 	bl	80020a0 <SD_ReceiveByte>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2b05      	cmp	r3, #5
 800260e:	d006      	beq.n	800261e <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8002610:	2201      	movs	r2, #1
 8002612:	2120      	movs	r1, #32
 8002614:	4810      	ldr	r0, [pc, #64]	@ (8002658 <SD_WriteBlocks+0xc8>)
 8002616:	f00a fb9f 	bl	800cd58 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e015      	b.n	800264a <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 800261e:	bf00      	nop
 8002620:	f7ff fd3e 	bl	80020a0 <SD_ReceiveByte>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0fa      	beq.n	8002620 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 800262a:	2201      	movs	r2, #1
 800262c:	2120      	movs	r1, #32
 800262e:	480a      	ldr	r0, [pc, #40]	@ (8002658 <SD_WriteBlocks+0xc8>)
 8002630:	f00a fb92 	bl	800cd58 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002634:	20ff      	movs	r0, #255	@ 0xff
 8002636:	f7ff fd21 	bl	800207c <SD_TransmitByte>

        return SD_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e005      	b.n	800264a <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f80a 	bl	800265c <SD_WriteMultiBlocks>
 8002648:	4603      	mov	r3, r0
    }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20013e10 	.word	0x20013e10
 8002658:	40020400 	.word	0x40020400

0800265c <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <SD_WriteMultiBlocks+0x16>
 800266e:	2301      	movs	r3, #1
 8002670:	e059      	b.n	8002726 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8002672:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <SD_WriteMultiBlocks+0xd4>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <SD_WriteMultiBlocks+0x24>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002680:	2200      	movs	r2, #0
 8002682:	2120      	movs	r1, #32
 8002684:	482b      	ldr	r0, [pc, #172]	@ (8002734 <SD_WriteMultiBlocks+0xd8>)
 8002686:	f00a fb67 	bl	800cd58 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 800268a:	22ff      	movs	r2, #255	@ 0xff
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	2019      	movs	r0, #25
 8002690:	f7ff fd6b 	bl	800216a <SD_SendCommand>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02e      	beq.n	80026f8 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 800269a:	2201      	movs	r2, #1
 800269c:	2120      	movs	r1, #32
 800269e:	4825      	ldr	r0, [pc, #148]	@ (8002734 <SD_WriteMultiBlocks+0xd8>)
 80026a0:	f00a fb5a 	bl	800cd58 <HAL_GPIO_WritePin>
        return SD_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e03e      	b.n	8002726 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 80026a8:	20fc      	movs	r0, #252	@ 0xfc
 80026aa:	f7ff fce7 	bl	800207c <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 80026ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff fd0c 	bl	80020d0 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 80026b8:	20ff      	movs	r0, #255	@ 0xff
 80026ba:	f7ff fcdf 	bl	800207c <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80026be:	20ff      	movs	r0, #255	@ 0xff
 80026c0:	f7ff fcdc 	bl	800207c <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80026c4:	f7ff fcec 	bl	80020a0 <SD_ReceiveByte>
 80026c8:	4603      	mov	r3, r0
 80026ca:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d006      	beq.n	80026e4 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 80026d6:	2201      	movs	r2, #1
 80026d8:	2120      	movs	r1, #32
 80026da:	4816      	ldr	r0, [pc, #88]	@ (8002734 <SD_WriteMultiBlocks+0xd8>)
 80026dc:	f00a fb3c 	bl	800cd58 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e020      	b.n	8002726 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 80026e4:	bf00      	nop
 80026e6:	f7ff fcdb 	bl	80020a0 <SD_ReceiveByte>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0fa      	beq.n	80026e6 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80026f6:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1e5a      	subs	r2, r3, #1
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1d2      	bne.n	80026a8 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8002702:	20fd      	movs	r0, #253	@ 0xfd
 8002704:	f7ff fcba 	bl	800207c <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8002708:	bf00      	nop
 800270a:	f7ff fcc9 	bl	80020a0 <SD_ReceiveByte>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0fa      	beq.n	800270a <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8002714:	2201      	movs	r2, #1
 8002716:	2120      	movs	r1, #32
 8002718:	4806      	ldr	r0, [pc, #24]	@ (8002734 <SD_WriteMultiBlocks+0xd8>)
 800271a:	f00a fb1d 	bl	800cd58 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800271e:	20ff      	movs	r0, #255	@ 0xff
 8002720:	f7ff fcac 	bl	800207c <SD_TransmitByte>

    return SD_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20013e10 	.word	0x20013e10
 8002734:	40020400 	.word	0x40020400

08002738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <HAL_MspInit+0x4c>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	4a0f      	ldr	r2, [pc, #60]	@ (8002784 <HAL_MspInit+0x4c>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800274c:	6453      	str	r3, [r2, #68]	@ 0x44
 800274e:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <HAL_MspInit+0x4c>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <HAL_MspInit+0x4c>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	4a08      	ldr	r2, [pc, #32]	@ (8002784 <HAL_MspInit+0x4c>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	@ 0x40
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_MspInit+0x4c>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a19      	ldr	r2, [pc, #100]	@ (800280c <HAL_SPI_MspInit+0x84>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12b      	bne.n	8002802 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <HAL_SPI_MspInit+0x88>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_SPI_MspInit+0x88>)
 80027b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_SPI_MspInit+0x88>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <HAL_SPI_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_SPI_MspInit+0x88>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_SPI_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027e2:	23e0      	movs	r3, #224	@ 0xe0
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027f2:	2305      	movs	r3, #5
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	@ (8002814 <HAL_SPI_MspInit+0x8c>)
 80027fe:	f00a f82b 	bl	800c858 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	@ 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40013000 	.word	0x40013000
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000

08002818 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <HAL_TIM_Base_MspInit+0x58>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d11d      	bne.n	8002866 <HAL_TIM_Base_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_TIM_Base_MspInit+0x5c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_TIM_Base_MspInit+0x5c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_TIM_Base_MspInit+0x5c>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2100      	movs	r1, #0
 800284a:	2018      	movs	r0, #24
 800284c:	f009 ff9f 	bl	800c78e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002850:	2018      	movs	r0, #24
 8002852:	f009 ffb8 	bl	800c7c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2019      	movs	r0, #25
 800285c:	f009 ff97 	bl	800c78e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002860:	2019      	movs	r0, #25
 8002862:	f009 ffb0 	bl	800c7c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40010000 	.word	0x40010000
 8002874:	40023800 	.word	0x40023800

08002878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <NMI_Handler+0x4>

08002880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <MemManage_Handler+0x4>

08002890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <UsageFault_Handler+0x4>

080028a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ce:	f009 fe3f 	bl	800c550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80028de:	f00d f90d 	bl	800fafc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200002f8 	.word	0x200002f8

080028ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028f0:	4802      	ldr	r0, [pc, #8]	@ (80028fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028f2:	f00d f903 	bl	800fafc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200002f8 	.word	0x200002f8

08002900 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800290a:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <BSP_I2C1_Init+0x58>)
 800290c:	4a13      	ldr	r2, [pc, #76]	@ (800295c <BSP_I2C1_Init+0x5c>)
 800290e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002910:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <BSP_I2C1_Init+0x60>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	4912      	ldr	r1, [pc, #72]	@ (8002960 <BSP_I2C1_Init+0x60>)
 8002918:	600a      	str	r2, [r1, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d117      	bne.n	800294e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800291e:	480e      	ldr	r0, [pc, #56]	@ (8002958 <BSP_I2C1_Init+0x58>)
 8002920:	f00b fa32 	bl	800dd88 <HAL_I2C_GetState>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d111      	bne.n	800294e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800292a:	480b      	ldr	r0, [pc, #44]	@ (8002958 <BSP_I2C1_Init+0x58>)
 800292c:	f000 f936 	bl	8002b9c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002936:	4808      	ldr	r0, [pc, #32]	@ (8002958 <BSP_I2C1_Init+0x58>)
 8002938:	f000 f8fc 	bl	8002b34 <MX_I2C1_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002942:	f06f 0307 	mvn.w	r3, #7
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	e001      	b.n	800294e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20013e14 	.word	0x20013e14
 800295c:	40005400 	.word	0x40005400
 8002960:	20013e68 	.word	0x20013e68

08002964 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <BSP_I2C1_DeInit+0x48>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d014      	beq.n	80029a0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <BSP_I2C1_DeInit+0x48>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3b01      	subs	r3, #1
 800297c:	4a0b      	ldr	r2, [pc, #44]	@ (80029ac <BSP_I2C1_DeInit+0x48>)
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <BSP_I2C1_DeInit+0x48>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <BSP_I2C1_DeInit+0x4c>)
 800298a:	f000 f951 	bl	8002c30 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800298e:	4808      	ldr	r0, [pc, #32]	@ (80029b0 <BSP_I2C1_DeInit+0x4c>)
 8002990:	f00a fb5a 	bl	800d048 <HAL_I2C_DeInit>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800299a:	f06f 0307 	mvn.w	r3, #7
 800299e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20013e68 	.word	0x20013e68
 80029b0:	20013e14 	.word	0x20013e14

080029b4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af04      	add	r7, sp, #16
 80029ba:	60ba      	str	r2, [r7, #8]
 80029bc:	461a      	mov	r2, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	81fb      	strh	r3, [r7, #14]
 80029c2:	460b      	mov	r3, r1
 80029c4:	81bb      	strh	r3, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80029ce:	89ba      	ldrh	r2, [r7, #12]
 80029d0:	89f9      	ldrh	r1, [r7, #14]
 80029d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d6:	9302      	str	r3, [sp, #8]
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2301      	movs	r3, #1
 80029e2:	480c      	ldr	r0, [pc, #48]	@ (8002a14 <BSP_I2C1_WriteReg+0x60>)
 80029e4:	f00a fea4 	bl	800d730 <HAL_I2C_Mem_Write>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80029ee:	4809      	ldr	r0, [pc, #36]	@ (8002a14 <BSP_I2C1_WriteReg+0x60>)
 80029f0:	f00b f9d8 	bl	800dda4 <HAL_I2C_GetError>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d103      	bne.n	8002a02 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80029fa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e002      	b.n	8002a08 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002a02:	f06f 0303 	mvn.w	r3, #3
 8002a06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a08:	697b      	ldr	r3, [r7, #20]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20013e14 	.word	0x20013e14

08002a18 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af04      	add	r7, sp, #16
 8002a1e:	60ba      	str	r2, [r7, #8]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	81fb      	strh	r3, [r7, #14]
 8002a26:	460b      	mov	r3, r1
 8002a28:	81bb      	strh	r3, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a32:	89ba      	ldrh	r2, [r7, #12]
 8002a34:	89f9      	ldrh	r1, [r7, #14]
 8002a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3a:	9302      	str	r3, [sp, #8]
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	480c      	ldr	r0, [pc, #48]	@ (8002a78 <BSP_I2C1_ReadReg+0x60>)
 8002a48:	f00a ff6c 	bl	800d924 <HAL_I2C_Mem_Read>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a52:	4809      	ldr	r0, [pc, #36]	@ (8002a78 <BSP_I2C1_ReadReg+0x60>)
 8002a54:	f00b f9a6 	bl	800dda4 <HAL_I2C_GetError>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d103      	bne.n	8002a66 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a5e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e002      	b.n	8002a6c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a66:	f06f 0303 	mvn.w	r3, #3
 8002a6a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a6c:	697b      	ldr	r3, [r7, #20]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20013e14 	.word	0x20013e14

08002a7c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	80fb      	strh	r3, [r7, #6]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a90:	88bb      	ldrh	r3, [r7, #4]
 8002a92:	88f9      	ldrh	r1, [r7, #6]
 8002a94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	480b      	ldr	r0, [pc, #44]	@ (8002acc <BSP_I2C1_Send+0x50>)
 8002a9e:	f00a fb17 	bl	800d0d0 <HAL_I2C_Master_Transmit>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002aa8:	4808      	ldr	r0, [pc, #32]	@ (8002acc <BSP_I2C1_Send+0x50>)
 8002aaa:	f00b f97b 	bl	800dda4 <HAL_I2C_GetError>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d003      	beq.n	8002abc <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ab4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e002      	b.n	8002ac2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002abc:	f06f 0303 	mvn.w	r3, #3
 8002ac0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20013e14 	.word	0x20013e14

08002ad0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	80fb      	strh	r3, [r7, #6]
 8002adc:	4613      	mov	r3, r2
 8002ade:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002ae4:	88bb      	ldrh	r3, [r7, #4]
 8002ae6:	88f9      	ldrh	r1, [r7, #6]
 8002ae8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002aec:	9200      	str	r2, [sp, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	480b      	ldr	r0, [pc, #44]	@ (8002b20 <BSP_I2C1_Recv+0x50>)
 8002af2:	f00a fbeb 	bl	800d2cc <HAL_I2C_Master_Receive>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00c      	beq.n	8002b16 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002afc:	4808      	ldr	r0, [pc, #32]	@ (8002b20 <BSP_I2C1_Recv+0x50>)
 8002afe:	f00b f951 	bl	800dda4 <HAL_I2C_GetError>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d003      	beq.n	8002b10 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b08:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e002      	b.n	8002b16 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b10:	f06f 0303 	mvn.w	r3, #3
 8002b14:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20013e14 	.word	0x20013e14

08002b24 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002b28:	f009 fd26 	bl	800c578 <HAL_GetTick>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <MX_I2C1_Init+0x60>)
 8002b44:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <MX_I2C1_Init+0x64>)
 8002b4a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b5e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00a f921 	bl	800cdc0 <HAL_I2C_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40005400 	.word	0x40005400
 8002b98:	00061a80 	.word	0x00061a80

08002b9c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	@ 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c28 <I2C1_MspInit+0x8c>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bac:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <I2C1_MspInit+0x8c>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <I2C1_MspInit+0x8c>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc6:	2312      	movs	r3, #18
 8002bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4813      	ldr	r0, [pc, #76]	@ (8002c2c <I2C1_MspInit+0x90>)
 8002bde:	f009 fe3b 	bl	800c858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002be2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be8:	2312      	movs	r3, #18
 8002bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480b      	ldr	r0, [pc, #44]	@ (8002c2c <I2C1_MspInit+0x90>)
 8002c00:	f009 fe2a 	bl	800c858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <I2C1_MspInit+0x8c>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a06      	ldr	r2, [pc, #24]	@ (8002c28 <I2C1_MspInit+0x8c>)
 8002c0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <I2C1_MspInit+0x8c>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002c20:	bf00      	nop
 8002c22:	3728      	adds	r7, #40	@ 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020400 	.word	0x40020400

08002c30 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <I2C1_MspDeInit+0x30>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	4a08      	ldr	r2, [pc, #32]	@ (8002c60 <I2C1_MspDeInit+0x30>)
 8002c3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c42:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002c44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c48:	4806      	ldr	r0, [pc, #24]	@ (8002c64 <I2C1_MspDeInit+0x34>)
 8002c4a:	f009 ff89 	bl	800cb60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002c4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c52:	4804      	ldr	r0, [pc, #16]	@ (8002c64 <I2C1_MspDeInit+0x34>)
 8002c54:	f009 ff84 	bl	800cb60 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020400 	.word	0x40020400

08002c68 <_read>:
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00a      	b.n	8002c90 <_read+0x28>
 8002c7a:	f3af 8000 	nop.w
 8002c7e:	4601      	mov	r1, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	b2ca      	uxtb	r2, r1
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf0      	blt.n	8002c7a <_read+0x12>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_close>:
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_fstat>:
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_isatty>:
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_lseek>:
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
 8002d3c:	f011 ff40 	bl	8014bc0 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20018000 	.word	0x20018000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20013e6c 	.word	0x20013e6c
 8002d74:	20014448 	.word	0x20014448

08002d78 <SystemInit>:
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <Reset_Handler>:
 8002d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dd4 <LoopFillZerobss+0xe>
 8002da0:	f7ff ffea 	bl	8002d78 <SystemInit>
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <LoopFillZerobss+0x12>)
 8002da6:	490d      	ldr	r1, [pc, #52]	@ (8002ddc <LoopFillZerobss+0x16>)
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <LoopFillZerobss+0x1a>)
 8002daa:	2300      	movs	r3, #0
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:
 8002dae:	58d4      	ldr	r4, [r2, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:
 8002db4:	18c4      	adds	r4, r0, r3
 8002db6:	428c      	cmp	r4, r1
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <LoopFillZerobss+0x1e>)
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002de8 <LoopFillZerobss+0x22>)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:
 8002dc6:	42a2      	cmp	r2, r4
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>
 8002dca:	f011 feff 	bl	8014bcc <__libc_init_array>
 8002dce:	f7fe f92d 	bl	800102c <main>
 8002dd2:	4770      	bx	lr
 8002dd4:	20018000 	.word	0x20018000
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000284 	.word	0x20000284
 8002de0:	080175e0 	.word	0x080175e0
 8002de4:	20000284 	.word	0x20000284
 8002de8:	20014444 	.word	0x20014444

08002dec <ADC_IRQHandler>:
 8002dec:	e7fe      	b.n	8002dec <ADC_IRQHandler>
	...

08002df0 <LIS2DUXS12_RegisterBusIO>:
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <LIS2DUXS12_RegisterBusIO+0x1c>
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e088      	b.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	7b1a      	ldrb	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	731a      	strb	r2, [r3, #12]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	615a      	str	r2, [r3, #20]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	61da      	str	r2, [r3, #28]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a36      	ldr	r2, [pc, #216]	@ (8002f28 <LIS2DUXS12_RegisterBusIO+0x138>)
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a35      	ldr	r2, [pc, #212]	@ (8002f2c <LIS2DUXS12_RegisterBusIO+0x13c>)
 8002e56:	621a      	str	r2, [r3, #32]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <LIS2DUXS12_RegisterBusIO+0x86>
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e053      	b.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4798      	blx	r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <LIS2DUXS12_RegisterBusIO+0x9a>
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e049      	b.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d11c      	bne.n	8002ecc <LIS2DUXS12_RegisterBusIO+0xdc>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d140      	bne.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8f4 	bl	800308a <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <LIS2DUXS12_RegisterBusIO+0xbe>
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	2350      	movs	r3, #80	@ 0x50
 8002eb0:	72fb      	strb	r3, [r7, #11]
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fbf6 	bl	80036aa <LIS2DUXS12_Write_Reg>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d02c      	beq.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e028      	b.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10e      	bne.n	8002ef2 <LIS2DUXS12_RegisterBusIO+0x102>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11f      	bne.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8d3 	bl	800308a <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e015      	b.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10e      	bne.n	8002f18 <LIS2DUXS12_RegisterBusIO+0x128>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8ab 	bl	8003060 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d006      	beq.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e002      	b.n	8002f1e <LIS2DUXS12_RegisterBusIO+0x12e>
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08003b65 	.word	0x08003b65
 8002f2c:	08003b9b 	.word	0x08003b9b

08002f30 <LIS2DUXS12_Init>:
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d01f      	beq.n	8002f80 <LIS2DUXS12_Init+0x50>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3320      	adds	r3, #32
 8002f44:	f107 0214 	add.w	r2, r7, #20
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fb0a 	bl	8004564 <lis2duxs12_i3c_configure_get>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <LIS2DUXS12_Init+0x2c>
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	e05c      	b.n	8003016 <LIS2DUXS12_Init+0xe6>
 8002f5c:	7d7b      	ldrb	r3, [r7, #21]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	757b      	strb	r3, [r7, #21]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3320      	adds	r3, #32
 8002f68:	f107 0214 	add.w	r2, r7, #20
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 fac0 	bl	80044f4 <lis2duxs12_i3c_configure_set>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <LIS2DUXS12_Init+0x50>
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	e04a      	b.n	8003016 <LIS2DUXS12_Init+0xe6>
 8002f80:	2100      	movs	r1, #0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fbac 	bl	80036e0 <LIS2DUXS12_Set_Mem_Bank>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <LIS2DUXS12_Init+0x64>
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e040      	b.n	8003016 <LIS2DUXS12_Init+0xe6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3320      	adds	r3, #32
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fec4 	bl	8003d28 <lis2duxs12_init_set>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <LIS2DUXS12_Init+0x7c>
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e034      	b.n	8003016 <LIS2DUXS12_Init+0xe6>
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	809a      	strh	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f103 0020 	add.w	r0, r3, #32
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002fc4:	f001 fb33 	bl	800462e <lis2duxs12_fifo_mode_set>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <LIS2DUXS12_Init+0xa4>
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e020      	b.n	8003016 <LIS2DUXS12_Init+0xe6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <LIS2DUXS12_Init+0xf0>)
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	460a      	mov	r2, r1
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	460a      	mov	r2, r1
 8002fee:	709a      	strb	r2, [r3, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3320      	adds	r3, #32
 8002ff4:	f107 0208 	add.w	r2, r7, #8
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 ffe2 	bl	8003fc4 <lis2duxs12_mode_set>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <LIS2DUXS12_Init+0xdc>
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e004      	b.n	8003016 <LIS2DUXS12_Init+0xe6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003014:	2300      	movs	r3, #0
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	42c80000 	.word	0x42c80000

08003024 <LIS2DUXS12_DeInit>:
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8ad 	bl	800318c <LIS2DUXS12_ACC_Disable>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <LIS2DUXS12_DeInit+0x1a>
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e00c      	b.n	8003058 <LIS2DUXS12_DeInit+0x34>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	@ 0x34
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003056:	2300      	movs	r3, #0
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <LIS2DUXS12_ExitDeepPowerDownI2C>:
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3320      	adds	r3, #32
 800306c:	f107 020f 	add.w	r2, r7, #15
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fe46 	bl	8003d04 <lis2duxs12_device_id_get>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	2019      	movs	r0, #25
 800307e:	4798      	blx	r3
 8003080:	2300      	movs	r3, #0
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <LIS2DUXS12_ExitDeepPowerDownSPI>:
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3320      	adds	r3, #32
 8003096:	4618      	mov	r0, r3
 8003098:	f001 f960 	bl	800435c <lis2duxs12_exit_deep_power_down>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	2019      	movs	r0, #25
 80030a2:	4798      	blx	r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <LIS2DUXS12_ReadID>:
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3320      	adds	r3, #32
 80030bc:	f107 020f 	add.w	r2, r7, #15
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fe1e 	bl	8003d04 <lis2duxs12_device_id_get>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <LIS2DUXS12_ReadID+0x26>
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	e003      	b.n	80030dc <LIS2DUXS12_ReadID+0x2e>
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <LIS2DUXS12_GetCapabilities>:
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	705a      	strb	r2, [r3, #1]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	709a      	strb	r2, [r3, #2]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	70da      	strb	r2, [r3, #3]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2210      	movs	r2, #16
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4a06      	ldr	r2, [pc, #24]	@ (800313c <LIS2DUXS12_GetCapabilities+0x58>)
 8003124:	615a      	str	r2, [r3, #20]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
 800312e:	2300      	movs	r3, #0
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	44480000 	.word	0x44480000

08003140 <LIS2DUXS12_ACC_Enable>:
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <LIS2DUXS12_ACC_Enable+0x16>
 8003152:	2300      	movs	r3, #0
 8003154:	e016      	b.n	8003184 <LIS2DUXS12_ACC_Enable+0x44>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003162:	4619      	mov	r1, r3
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fadb 	bl	8003724 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <LIS2DUXS12_ACC_Enable+0x3a>
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
 8003178:	e004      	b.n	8003184 <LIS2DUXS12_ACC_Enable+0x44>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003182:	2300      	movs	r3, #0
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <LIS2DUXS12_ACC_Disable>:
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <LIS2DUXS12_ACC_Disable+0x16>
 800319e:	2300      	movs	r3, #0
 80031a0:	e046      	b.n	8003230 <LIS2DUXS12_ACC_Disable+0xa4>
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f893 	bl	80032d4 <LIS2DUXS12_ACC_GetOutputDataRate>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <LIS2DUXS12_ACC_Disable+0x2e>
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e03a      	b.n	8003230 <LIS2DUXS12_ACC_Disable+0xa4>
 80031ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80031be:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003238 <LIS2DUXS12_ACC_Disable+0xac>
 80031c2:	eef4 7a47 	vcmp.f32	s15, s14
 80031c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ca:	d10e      	bne.n	80031ea <LIS2DUXS12_ACC_Disable+0x5e>
 80031cc:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800323c <LIS2DUXS12_ACC_Disable+0xb0>
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f94b 	bl	800346c <LIS2DUXS12_ACC_SetOutputDataRate>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <LIS2DUXS12_ACC_Disable+0x56>
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e026      	b.n	8003230 <LIS2DUXS12_ACC_Disable+0xa4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	2003      	movs	r0, #3
 80031e8:	4798      	blx	r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3320      	adds	r3, #32
 80031ee:	f107 0208 	add.w	r2, r7, #8
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 ffa1 	bl	800413c <lis2duxs12_mode_get>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <LIS2DUXS12_ACC_Disable+0x7a>
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	e014      	b.n	8003230 <LIS2DUXS12_ACC_Disable+0xa4>
 8003206:	2300      	movs	r3, #0
 8003208:	723b      	strb	r3, [r7, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3320      	adds	r3, #32
 800320e:	f107 0208 	add.w	r2, r7, #8
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fed5 	bl	8003fc4 <lis2duxs12_mode_set>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <LIS2DUXS12_ACC_Disable+0x9a>
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	e004      	b.n	8003230 <LIS2DUXS12_ACC_Disable+0xa4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800322e:	2300      	movs	r3, #0
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	44480000 	.word	0x44480000
 800323c:	43c80000 	.word	0x43c80000

08003240 <LIS2DUXS12_ACC_GetSensitivity>:
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3320      	adds	r3, #32
 8003252:	f107 0208 	add.w	r2, r7, #8
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f000 ff6f 	bl	800413c <lis2duxs12_mode_get>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <LIS2DUXS12_ACC_GetSensitivity+0x2a>
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	e026      	b.n	80032b8 <LIS2DUXS12_ACC_GetSensitivity+0x78>
 800326a:	7a7b      	ldrb	r3, [r7, #9]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d81b      	bhi.n	80032a8 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8003270:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	08003289 	.word	0x08003289
 800327c:	08003291 	.word	0x08003291
 8003280:	08003299 	.word	0x08003299
 8003284:	080032a1 	.word	0x080032a1
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e012      	b.n	80032b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e00e      	b.n	80032b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00a      	b.n	80032b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e006      	b.n	80032b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	bf00      	nop
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	3d79db23 	.word	0x3d79db23
 80032c4:	3df9db23 	.word	0x3df9db23
 80032c8:	3e79db23 	.word	0x3e79db23
 80032cc:	3ef9db23 	.word	0x3ef9db23
 80032d0:	bf800000 	.word	0xbf800000

080032d4 <LIS2DUXS12_ACC_GetOutputDataRate>:
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3320      	adds	r3, #32
 80032e6:	f107 0208 	add.w	r2, r7, #8
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 ff25 	bl	800413c <lis2duxs12_mode_get>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	e09b      	b.n	8003436 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
 80032fe:	7a3b      	ldrb	r3, [r7, #8]
 8003300:	2b2f      	cmp	r3, #47	@ 0x2f
 8003302:	f200 8090 	bhi.w	8003426 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8003306:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	080033cd 	.word	0x080033cd
 8003310:	080033d7 	.word	0x080033d7
 8003314:	080033df 	.word	0x080033df
 8003318:	080033f7 	.word	0x080033f7
 800331c:	080033e7 	.word	0x080033e7
 8003320:	080033ef 	.word	0x080033ef
 8003324:	080033f7 	.word	0x080033f7
 8003328:	080033ff 	.word	0x080033ff
 800332c:	08003407 	.word	0x08003407
 8003330:	0800340f 	.word	0x0800340f
 8003334:	08003417 	.word	0x08003417
 8003338:	0800341f 	.word	0x0800341f
 800333c:	08003427 	.word	0x08003427
 8003340:	08003427 	.word	0x08003427
 8003344:	08003427 	.word	0x08003427
 8003348:	08003427 	.word	0x08003427
 800334c:	08003427 	.word	0x08003427
 8003350:	08003427 	.word	0x08003427
 8003354:	08003427 	.word	0x08003427
 8003358:	08003427 	.word	0x08003427
 800335c:	080033e7 	.word	0x080033e7
 8003360:	080033ef 	.word	0x080033ef
 8003364:	080033f7 	.word	0x080033f7
 8003368:	080033ff 	.word	0x080033ff
 800336c:	08003407 	.word	0x08003407
 8003370:	0800340f 	.word	0x0800340f
 8003374:	08003417 	.word	0x08003417
 8003378:	0800341f 	.word	0x0800341f
 800337c:	08003427 	.word	0x08003427
 8003380:	08003427 	.word	0x08003427
 8003384:	08003427 	.word	0x08003427
 8003388:	08003427 	.word	0x08003427
 800338c:	08003427 	.word	0x08003427
 8003390:	08003427 	.word	0x08003427
 8003394:	08003427 	.word	0x08003427
 8003398:	08003427 	.word	0x08003427
 800339c:	08003427 	.word	0x08003427
 80033a0:	08003427 	.word	0x08003427
 80033a4:	08003427 	.word	0x08003427
 80033a8:	08003427 	.word	0x08003427
 80033ac:	08003427 	.word	0x08003427
 80033b0:	08003427 	.word	0x08003427
 80033b4:	08003427 	.word	0x08003427
 80033b8:	08003427 	.word	0x08003427
 80033bc:	08003427 	.word	0x08003427
 80033c0:	08003427 	.word	0x08003427
 80033c4:	080033cd 	.word	0x080033cd
 80033c8:	080033cd 	.word	0x080033cd
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e02e      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e02a      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	@ (8003444 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e026      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e022      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	4a16      	ldr	r2, [pc, #88]	@ (800344c <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e01e      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4a15      	ldr	r2, [pc, #84]	@ (8003450 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e01a      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	4a14      	ldr	r2, [pc, #80]	@ (8003454 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e016      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	4a13      	ldr	r2, [pc, #76]	@ (8003458 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e012      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	4a12      	ldr	r2, [pc, #72]	@ (800345c <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e00e      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4a11      	ldr	r2, [pc, #68]	@ (8003460 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e00a      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4a10      	ldr	r2, [pc, #64]	@ (8003464 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e006      	b.n	8003434 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4a0f      	ldr	r2, [pc, #60]	@ (8003468 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	bf00      	nop
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	3fcccccd 	.word	0x3fcccccd
 8003444:	40400000 	.word	0x40400000
 8003448:	40c00000 	.word	0x40c00000
 800344c:	41480000 	.word	0x41480000
 8003450:	41c80000 	.word	0x41c80000
 8003454:	42480000 	.word	0x42480000
 8003458:	42c80000 	.word	0x42c80000
 800345c:	43480000 	.word	0x43480000
 8003460:	43c80000 	.word	0x43c80000
 8003464:	44480000 	.word	0x44480000
 8003468:	bf800000 	.word	0xbf800000

0800346c <LIS2DUXS12_ACC_SetOutputDataRate>:
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	ed87 0a00 	vstr	s0, [r7]
 8003478:	2102      	movs	r1, #2
 800347a:	ed97 0a00 	vldr	s0, [r7]
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f805 	bl	800348e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8003484:	4603      	mov	r3, r0
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	ed87 0a02 	vstr	s0, [r7, #8]
 800349a:	460b      	mov	r3, r1
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	4619      	mov	r1, r3
 80034ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f937 	bl	8003724 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	e007      	b.n	80034ca <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4619      	mov	r1, r3
 80034be:	ed97 0a02 	vldr	s0, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 faac 	bl	8003a20 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <LIS2DUXS12_ACC_GetFullScale>:
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3320      	adds	r3, #32
 80034e6:	f107 0208 	add.w	r2, r7, #8
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fe25 	bl	800413c <lis2duxs12_mode_get>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <LIS2DUXS12_ACC_GetFullScale+0x2a>
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	e027      	b.n	800354e <LIS2DUXS12_ACC_GetFullScale+0x7a>
 80034fe:	7a7b      	ldrb	r3, [r7, #9]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d81b      	bhi.n	800353c <LIS2DUXS12_ACC_GetFullScale+0x68>
 8003504:	a201      	add	r2, pc, #4	@ (adr r2, 800350c <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	0800351d 	.word	0x0800351d
 8003510:	08003525 	.word	0x08003525
 8003514:	0800352d 	.word	0x0800352d
 8003518:	08003535 	.word	0x08003535
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2202      	movs	r2, #2
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e013      	b.n	800354c <LIS2DUXS12_ACC_GetFullScale+0x78>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2204      	movs	r2, #4
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e00f      	b.n	800354c <LIS2DUXS12_ACC_GetFullScale+0x78>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2208      	movs	r2, #8
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e00b      	b.n	800354c <LIS2DUXS12_ACC_GetFullScale+0x78>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2210      	movs	r2, #16
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e007      	b.n	800354c <LIS2DUXS12_ACC_GetFullScale+0x78>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	bf00      	nop
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <LIS2DUXS12_ACC_SetFullScale>:
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3320      	adds	r3, #32
 8003566:	f107 020c 	add.w	r2, r7, #12
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fde5 	bl	800413c <lis2duxs12_mode_get>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <LIS2DUXS12_ACC_SetFullScale+0x26>
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e01f      	b.n	80035be <LIS2DUXS12_ACC_SetFullScale+0x66>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b02      	cmp	r3, #2
 8003582:	dd0b      	ble.n	800359c <LIS2DUXS12_ACC_SetFullScale+0x44>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b04      	cmp	r3, #4
 8003588:	dd06      	ble.n	8003598 <LIS2DUXS12_ACC_SetFullScale+0x40>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	dc01      	bgt.n	8003594 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8003590:	2302      	movs	r3, #2
 8003592:	e004      	b.n	800359e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003594:	2303      	movs	r3, #3
 8003596:	e002      	b.n	800359e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <LIS2DUXS12_ACC_SetFullScale+0x46>
 800359c:	2300      	movs	r3, #0
 800359e:	737b      	strb	r3, [r7, #13]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3320      	adds	r3, #32
 80035a4:	f107 020c 	add.w	r2, r7, #12
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fd0a 	bl	8003fc4 <lis2duxs12_mode_set>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <LIS2DUXS12_ACC_SetFullScale+0x64>
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e000      	b.n	80035be <LIS2DUXS12_ACC_SetFullScale+0x66>
 80035bc:	2300      	movs	r3, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <LIS2DUXS12_ACC_GetAxesRaw>:
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b088      	sub	sp, #32
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3320      	adds	r3, #32
 80035d4:	f107 021c 	add.w	r2, r7, #28
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fdae 	bl	800413c <lis2duxs12_mode_get>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <LIS2DUXS12_ACC_GetAxesRaw+0x26>
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	e01b      	b.n	8003624 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3320      	adds	r3, #32
 80035f0:	f107 0208 	add.w	r2, r7, #8
 80035f4:	f107 011c 	add.w	r1, r7, #28
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fecf 	bl	800439c <lis2duxs12_xl_data_get>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <LIS2DUXS12_ACC_GetAxesRaw+0x44>
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	e00c      	b.n	8003624 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
 800360a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	805a      	strh	r2, [r3, #2]
 800361a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	809a      	strh	r2, [r3, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <LIS2DUXS12_ACC_GetAxes>:
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3320      	adds	r3, #32
 800363a:	f107 021c 	add.w	r2, r7, #28
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fd7b 	bl	800413c <lis2duxs12_mode_get>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <LIS2DUXS12_ACC_GetAxes+0x26>
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
 8003650:	e027      	b.n	80036a2 <LIS2DUXS12_ACC_GetAxes+0x76>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3320      	adds	r3, #32
 8003656:	f107 0208 	add.w	r2, r7, #8
 800365a:	f107 011c 	add.w	r1, r7, #28
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fe9c 	bl	800439c <lis2duxs12_xl_data_get>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <LIS2DUXS12_ACC_GetAxes+0x44>
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e018      	b.n	80036a2 <LIS2DUXS12_ACC_GetAxes+0x76>
 8003670:	edd7 7a02 	vldr	s15, [r7, #8]
 8003674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003678:	ee17 2a90 	vmov	r2, s15
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	edd7 7a03 	vldr	s15, [r7, #12]
 8003684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003688:	ee17 2a90 	vmov	r2, s15
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	edd7 7a04 	vldr	s15, [r7, #16]
 8003694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003698:	ee17 2a90 	vmov	r2, s15
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	2300      	movs	r3, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <LIS2DUXS12_Write_Reg>:
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
 80036b6:	4613      	mov	r3, r2
 80036b8:	70bb      	strb	r3, [r7, #2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f103 0020 	add.w	r0, r3, #32
 80036c0:	1cba      	adds	r2, r7, #2
 80036c2:	78f9      	ldrb	r1, [r7, #3]
 80036c4:	2301      	movs	r3, #1
 80036c6:	f000 faa0 	bl	8003c0a <lis2duxs12_write_reg>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <LIS2DUXS12_Write_Reg+0x2c>
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	e000      	b.n	80036d8 <LIS2DUXS12_Write_Reg+0x2e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <LIS2DUXS12_Set_Mem_Bank>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	72fb      	strb	r3, [r7, #11]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3320      	adds	r3, #32
 8003702:	7afa      	ldrb	r2, [r7, #11]
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 ff6b 	bl	80045e2 <lis2duxs12_mem_bank_set>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <LIS2DUXS12_Set_Mem_Bank+0x38>
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003730:	460b      	mov	r3, r1
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3320      	adds	r3, #32
 8003738:	f107 0214 	add.w	r2, r7, #20
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fcfc 	bl	800413c <lis2duxs12_mode_get>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
 800374a:	f04f 33ff 	mov.w	r3, #4294967295
 800374e:	e142      	b.n	80039d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d118      	bne.n	8003788 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003756:	edd7 7a02 	vldr	s15, [r7, #8]
 800375a:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80039e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 800375e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003766:	d801      	bhi.n	800376c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8003768:	2301      	movs	r3, #1
 800376a:	e00b      	b.n	8003784 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800376c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003770:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	d801      	bhi.n	8003782 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 800377e:	2302      	movs	r3, #2
 8003780:	e000      	b.n	8003784 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003782:	2303      	movs	r3, #3
 8003784:	753b      	strb	r3, [r7, #20]
 8003786:	e0a4      	b.n	80038d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d14f      	bne.n	800382e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
 800378e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003792:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	d801      	bhi.n	80037a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e042      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80037a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80037ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	d801      	bhi.n	80037ba <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 80037b6:	2305      	movs	r3, #5
 80037b8:	e037      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80037ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80037be:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80037c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d801      	bhi.n	80037d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 80037cc:	2306      	movs	r3, #6
 80037ce:	e02c      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80037d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80039e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80037d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e0:	d801      	bhi.n	80037e6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 80037e2:	2307      	movs	r3, #7
 80037e4:	e021      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80037e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ea:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80039e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80037ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d801      	bhi.n	80037fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80037f8:	2308      	movs	r3, #8
 80037fa:	e016      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80037fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003800:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80039ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8003804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	d801      	bhi.n	8003812 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 800380e:	2309      	movs	r3, #9
 8003810:	e00b      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003812:	edd7 7a02 	vldr	s15, [r7, #8]
 8003816:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80039f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	d801      	bhi.n	8003828 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003824:	230a      	movs	r3, #10
 8003826:	e000      	b.n	800382a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003828:	230b      	movs	r3, #11
 800382a:	753b      	strb	r3, [r7, #20]
 800382c:	e051      	b.n	80038d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d14e      	bne.n	80038d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
 8003834:	edd7 7a02 	vldr	s15, [r7, #8]
 8003838:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800383c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003844:	d801      	bhi.n	800384a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003846:	2314      	movs	r3, #20
 8003848:	e042      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800384a:	edd7 7a02 	vldr	s15, [r7, #8]
 800384e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d801      	bhi.n	8003860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800385c:	2315      	movs	r3, #21
 800385e:	e037      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003860:	edd7 7a02 	vldr	s15, [r7, #8]
 8003864:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	d801      	bhi.n	8003876 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003872:	2316      	movs	r3, #22
 8003874:	e02c      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003876:	edd7 7a02 	vldr	s15, [r7, #8]
 800387a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80039e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 800387e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003886:	d801      	bhi.n	800388c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003888:	2317      	movs	r3, #23
 800388a:	e021      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800388c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003890:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80039e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8003894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389c:	d801      	bhi.n	80038a2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800389e:	2318      	movs	r3, #24
 80038a0:	e016      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80038a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80039ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80038aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d801      	bhi.n	80038b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80038b4:	2319      	movs	r3, #25
 80038b6:	e00b      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80038b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038bc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80039f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80038c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	d801      	bhi.n	80038ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80038ca:	231a      	movs	r3, #26
 80038cc:	e000      	b.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80038ce:	231b      	movs	r3, #27
 80038d0:	753b      	strb	r3, [r7, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3320      	adds	r3, #32
 80038d6:	f107 0214 	add.w	r2, r7, #20
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb71 	bl	8003fc4 <lis2duxs12_mode_set>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	e073      	b.n	80039d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
 80038ee:	7d3b      	ldrb	r3, [r7, #20]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d05b      	beq.n	80039ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 80038f4:	7d3b      	ldrb	r3, [r7, #20]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d056      	beq.n	80039a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 80038fa:	7d3b      	ldrb	r3, [r7, #20]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d051      	beq.n	80039a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8003900:	7d3b      	ldrb	r3, [r7, #20]
 8003902:	2b14      	cmp	r3, #20
 8003904:	d04c      	beq.n	80039a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8003906:	7d3b      	ldrb	r3, [r7, #20]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d047      	beq.n	800399c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 800390c:	7d3b      	ldrb	r3, [r7, #20]
 800390e:	2b15      	cmp	r3, #21
 8003910:	d042      	beq.n	8003998 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 8003912:	7d3b      	ldrb	r3, [r7, #20]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d03d      	beq.n	8003994 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8003918:	7d3b      	ldrb	r3, [r7, #20]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d038      	beq.n	8003990 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 800391e:	7d3b      	ldrb	r3, [r7, #20]
 8003920:	2b16      	cmp	r3, #22
 8003922:	d033      	beq.n	800398c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8003924:	7d3b      	ldrb	r3, [r7, #20]
 8003926:	2b07      	cmp	r3, #7
 8003928:	d02e      	beq.n	8003988 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 800392a:	7d3b      	ldrb	r3, [r7, #20]
 800392c:	2b17      	cmp	r3, #23
 800392e:	d029      	beq.n	8003984 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8003930:	7d3b      	ldrb	r3, [r7, #20]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d024      	beq.n	8003980 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8003936:	7d3b      	ldrb	r3, [r7, #20]
 8003938:	2b18      	cmp	r3, #24
 800393a:	d01f      	beq.n	800397c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 800393c:	7d3b      	ldrb	r3, [r7, #20]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d01a      	beq.n	8003978 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8003942:	7d3b      	ldrb	r3, [r7, #20]
 8003944:	2b19      	cmp	r3, #25
 8003946:	d015      	beq.n	8003974 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003948:	7d3b      	ldrb	r3, [r7, #20]
 800394a:	2b0a      	cmp	r3, #10
 800394c:	d010      	beq.n	8003970 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800394e:	7d3b      	ldrb	r3, [r7, #20]
 8003950:	2b1a      	cmp	r3, #26
 8003952:	d00b      	beq.n	800396c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 8003954:	7d3b      	ldrb	r3, [r7, #20]
 8003956:	2b0b      	cmp	r3, #11
 8003958:	d006      	beq.n	8003968 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 800395a:	7d3b      	ldrb	r3, [r7, #20]
 800395c:	2b1b      	cmp	r3, #27
 800395e:	d101      	bne.n	8003964 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 8003960:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8003962:	e024      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003964:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 8003966:	e022      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003968:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 800396a:	e020      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 800396c:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 800396e:	e01e      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003970:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8003972:	e01c      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003974:	4b22      	ldr	r3, [pc, #136]	@ (8003a00 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8003976:	e01a      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003978:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800397a:	e018      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 800397c:	4b21      	ldr	r3, [pc, #132]	@ (8003a04 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 800397e:	e016      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8003982:	e014      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003984:	4b20      	ldr	r3, [pc, #128]	@ (8003a08 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8003986:	e012      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003988:	4b1f      	ldr	r3, [pc, #124]	@ (8003a08 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800398a:	e010      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 800398c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a0c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800398e:	e00e      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003990:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003992:	e00c      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003996:	e00a      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800399a:	e008      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 800399c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a10 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800399e:	e006      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80039a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80039a2:	e004      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80039a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80039a6:	e002      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80039aa:	e000      	b.n	80039ae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80039ac:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80039b8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80039bc:	eef4 7a47 	vcmp.f32	s15, s14
 80039c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c4:	d102      	bne.n	80039cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	e004      	b.n	80039d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	79fa      	ldrb	r2, [r7, #7]
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80039d4:	2300      	movs	r3, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	3fcccccd 	.word	0x3fcccccd
 80039e4:	42480000 	.word	0x42480000
 80039e8:	42c80000 	.word	0x42c80000
 80039ec:	43480000 	.word	0x43480000
 80039f0:	43c80000 	.word	0x43c80000
 80039f4:	44480000 	.word	0x44480000
 80039f8:	bf800000 	.word	0xbf800000
 80039fc:	43c80000 	.word	0x43c80000
 8003a00:	43480000 	.word	0x43480000
 8003a04:	42c80000 	.word	0x42c80000
 8003a08:	42480000 	.word	0x42480000
 8003a0c:	41c80000 	.word	0x41c80000
 8003a10:	41480000 	.word	0x41480000
 8003a14:	40c00000 	.word	0x40c00000
 8003a18:	40400000 	.word	0x40400000
 8003a1c:	3fcccccd 	.word	0x3fcccccd

08003a20 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11a      	bne.n	8003a6c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
 8003a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a3a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d802      	bhi.n	8003a4e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003a48:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003a4c:	e00b      	b.n	8003a66 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8003a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a52:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	d801      	bhi.n	8003a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8003a60:	4b33      	ldr	r3, [pc, #204]	@ (8003b30 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 8003a62:	e000      	b.n	8003a66 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8003a64:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a6a:	e055      	b.n	8003b18 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d002      	beq.n	8003a78 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d14f      	bne.n	8003b18 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003a78:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a7c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a88:	d801      	bhi.n	8003a8e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8003a8c:	e042      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a92:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	d801      	bhi.n	8003aa4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 8003aa0:	4b26      	ldr	r3, [pc, #152]	@ (8003b3c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003aa2:	e037      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003aa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aa8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	d801      	bhi.n	8003aba <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b34 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003ab8:	e02c      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003abe:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003b40 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d801      	bhi.n	8003ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8003ace:	e021      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003ad0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ad4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003b48 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	d801      	bhi.n	8003ae6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8003ae4:	e016      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003b50 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	d801      	bhi.n	8003afc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8003af8:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8003afa:	e00b      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b00:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003b58 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8003b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	d801      	bhi.n	8003b12 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 8003b0e:	4b13      	ldr	r3, [pc, #76]	@ (8003b5c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 8003b10:	e000      	b.n	8003b14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6353      	str	r3, [r2, #52]	@ 0x34
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	79fa      	ldrb	r2, [r7, #7]
 8003b1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003b20:	2300      	movs	r3, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40400000 	.word	0x40400000
 8003b34:	41c80000 	.word	0x41c80000
 8003b38:	40c00000 	.word	0x40c00000
 8003b3c:	41480000 	.word	0x41480000
 8003b40:	42480000 	.word	0x42480000
 8003b44:	42480000 	.word	0x42480000
 8003b48:	42c80000 	.word	0x42c80000
 8003b4c:	42c80000 	.word	0x42c80000
 8003b50:	43480000 	.word	0x43480000
 8003b54:	43480000 	.word	0x43480000
 8003b58:	43c80000 	.word	0x43c80000
 8003b5c:	43c80000 	.word	0x43c80000
 8003b60:	44480000 	.word	0x44480000

08003b64 <ReadRegWrap>:
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	460b      	mov	r3, r1
 8003b72:	72fb      	strb	r3, [r7, #11]
 8003b74:	4613      	mov	r3, r2
 8003b76:	813b      	strh	r3, [r7, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	695c      	ldr	r4, [r3, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	7b1b      	ldrb	r3, [r3, #12]
 8003b84:	4618      	mov	r0, r3
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	893b      	ldrh	r3, [r7, #8]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	47a0      	blx	r4
 8003b90:	4603      	mov	r3, r0
 8003b92:	4618      	mov	r0, r3
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd90      	pop	{r4, r7, pc}

08003b9a <WriteRegWrap>:
 8003b9a:	b590      	push	{r4, r7, lr}
 8003b9c:	b087      	sub	sp, #28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	72fb      	strb	r3, [r7, #11]
 8003baa:	4613      	mov	r3, r2
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	691c      	ldr	r4, [r3, #16]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	7b1b      	ldrb	r3, [r3, #12]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
 8003bbe:	b299      	uxth	r1, r3
 8003bc0:	893b      	ldrh	r3, [r7, #8]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	47a0      	blx	r4
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd90      	pop	{r4, r7, pc}

08003bd0 <lis2duxs12_read_reg>:
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	72fb      	strb	r3, [r7, #11]
 8003be0:	4613      	mov	r3, r2
 8003be2:	813b      	strh	r3, [r7, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <lis2duxs12_read_reg+0x20>
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	e008      	b.n	8003c02 <lis2duxs12_read_reg+0x32>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685c      	ldr	r4, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68d8      	ldr	r0, [r3, #12]
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	7af9      	ldrb	r1, [r7, #11]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	47a0      	blx	r4
 8003c00:	4603      	mov	r3, r0
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}

08003c0a <lis2duxs12_write_reg>:
 8003c0a:	b590      	push	{r4, r7, lr}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	461a      	mov	r2, r3
 8003c16:	460b      	mov	r3, r1
 8003c18:	72fb      	strb	r3, [r7, #11]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <lis2duxs12_write_reg+0x20>
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e008      	b.n	8003c3c <lis2duxs12_write_reg+0x32>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681c      	ldr	r4, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68d8      	ldr	r0, [r3, #12]
 8003c32:	893b      	ldrh	r3, [r7, #8]
 8003c34:	7af9      	ldrb	r1, [r7, #11]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	47a0      	blx	r4
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <lis2duxs12_from_fs2g_to_mg>:
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
 8003c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003c70 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8003c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c62:	eeb0 0a67 	vmov.f32	s0, s15
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	3d79db23 	.word	0x3d79db23

08003c74 <lis2duxs12_from_fs4g_to_mg>:
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
 8003c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003ca0 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8003c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c92:	eeb0 0a67 	vmov.f32	s0, s15
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	3df9db23 	.word	0x3df9db23

08003ca4 <lis2duxs12_from_fs8g_to_mg>:
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	80fb      	strh	r3, [r7, #6]
 8003cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003cd0 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8003cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	3e79db23 	.word	0x3e79db23

08003cd4 <lis2duxs12_from_fs16g_to_mg>:
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
 8003cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003d00 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8003cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	3ef9db23 	.word	0x3ef9db23

08003d04 <lis2duxs12_device_id_get>:
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	2301      	movs	r3, #1
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	210f      	movs	r1, #15
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff5b 	bl	8003bd0 <lis2duxs12_read_reg>
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <lis2duxs12_init_set>:
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	f107 0214 	add.w	r2, r7, #20
 8003d40:	2301      	movs	r3, #1
 8003d42:	2110      	movs	r1, #16
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff43 	bl	8003bd0 <lis2duxs12_read_reg>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4413      	add	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	f107 0210 	add.w	r2, r7, #16
 8003d56:	2301      	movs	r3, #1
 8003d58:	2113      	movs	r1, #19
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff38 	bl	8003bd0 <lis2duxs12_read_reg>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	4413      	add	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	f200 80ca 	bhi.w	8003f04 <lis2duxs12_init_set+0x1dc>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <lis2duxs12_init_set+0x50>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003e79 	.word	0x08003e79
 8003d7c:	08003d89 	.word	0x08003d89
 8003d80:	08003e03 	.word	0x08003e03
 8003d84:	08003ebf 	.word	0x08003ebf
 8003d88:	7c3b      	ldrb	r3, [r7, #16]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	743b      	strb	r3, [r7, #16]
 8003d90:	f107 0210 	add.w	r2, r7, #16
 8003d94:	2301      	movs	r3, #1
 8003d96:	2113      	movs	r1, #19
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff36 	bl	8003c0a <lis2duxs12_write_reg>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 80bb 	bne.w	8003f24 <lis2duxs12_init_set+0x1fc>
 8003dae:	f107 0210 	add.w	r2, r7, #16
 8003db2:	2301      	movs	r3, #1
 8003db4:	2113      	movs	r1, #19
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ff0a 	bl	8003bd0 <lis2duxs12_read_reg>
 8003dbc:	61b8      	str	r0, [r7, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d113      	bne.n	8003dec <lis2duxs12_init_set+0xc4>
 8003dc4:	7c3b      	ldrb	r3, [r7, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00f      	beq.n	8003df0 <lis2duxs12_init_set+0xc8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <lis2duxs12_init_set+0xb8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2019      	movs	r0, #25
 8003dde:	4798      	blx	r3
 8003de0:	7ffb      	ldrb	r3, [r7, #31]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	77fa      	strb	r2, [r7, #31]
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d9e1      	bls.n	8003dae <lis2duxs12_init_set+0x86>
 8003dea:	e002      	b.n	8003df2 <lis2duxs12_init_set+0xca>
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <lis2duxs12_init_set+0xca>
 8003df0:	bf00      	nop
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	f240 8097 	bls.w	8003f28 <lis2duxs12_init_set+0x200>
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e092      	b.n	8003f28 <lis2duxs12_init_set+0x200>
 8003e02:	7d3b      	ldrb	r3, [r7, #20]
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	753b      	strb	r3, [r7, #20]
 8003e0a:	f107 0214 	add.w	r2, r7, #20
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2110      	movs	r1, #16
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fef9 	bl	8003c0a <lis2duxs12_write_reg>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 8082 	bne.w	8003f2c <lis2duxs12_init_set+0x204>
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f884 	bl	8003f3c <lis2duxs12_status_get>
 8003e34:	61b8      	str	r0, [r7, #24]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d113      	bne.n	8003e64 <lis2duxs12_init_set+0x13c>
 8003e3c:	7b3b      	ldrb	r3, [r7, #12]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00f      	beq.n	8003e68 <lis2duxs12_init_set+0x140>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <lis2duxs12_init_set+0x130>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2001      	movs	r0, #1
 8003e56:	4798      	blx	r3
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	77fa      	strb	r2, [r7, #31]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d9e2      	bls.n	8003e28 <lis2duxs12_init_set+0x100>
 8003e62:	e002      	b.n	8003e6a <lis2duxs12_init_set+0x142>
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <lis2duxs12_init_set+0x142>
 8003e68:	bf00      	nop
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d95f      	bls.n	8003f30 <lis2duxs12_init_set+0x208>
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e05b      	b.n	8003f30 <lis2duxs12_init_set+0x208>
 8003e78:	7c3b      	ldrb	r3, [r7, #16]
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	743b      	strb	r3, [r7, #16]
 8003e80:	7c3b      	ldrb	r3, [r7, #16]
 8003e82:	f043 0320 	orr.w	r3, r3, #32
 8003e86:	743b      	strb	r3, [r7, #16]
 8003e88:	7d3b      	ldrb	r3, [r7, #20]
 8003e8a:	f043 0310 	orr.w	r3, r3, #16
 8003e8e:	753b      	strb	r3, [r7, #20]
 8003e90:	f107 0210 	add.w	r2, r7, #16
 8003e94:	2301      	movs	r3, #1
 8003e96:	2113      	movs	r1, #19
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff feb6 	bl	8003c0a <lis2duxs12_write_reg>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	f107 0214 	add.w	r2, r7, #20
 8003eaa:	2301      	movs	r3, #1
 8003eac:	2110      	movs	r1, #16
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff feab 	bl	8003c0a <lis2duxs12_write_reg>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4413      	add	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	e039      	b.n	8003f32 <lis2duxs12_init_set+0x20a>
 8003ebe:	7c3b      	ldrb	r3, [r7, #16]
 8003ec0:	f043 0310 	orr.w	r3, r3, #16
 8003ec4:	743b      	strb	r3, [r7, #16]
 8003ec6:	7c3b      	ldrb	r3, [r7, #16]
 8003ec8:	f043 0320 	orr.w	r3, r3, #32
 8003ecc:	743b      	strb	r3, [r7, #16]
 8003ece:	7d3b      	ldrb	r3, [r7, #20]
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	753b      	strb	r3, [r7, #20]
 8003ed6:	f107 0210 	add.w	r2, r7, #16
 8003eda:	2301      	movs	r3, #1
 8003edc:	2113      	movs	r1, #19
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fe93 	bl	8003c0a <lis2duxs12_write_reg>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	f107 0214 	add.w	r2, r7, #20
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	2110      	movs	r1, #16
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fe88 	bl	8003c0a <lis2duxs12_write_reg>
 8003efa:	4602      	mov	r2, r0
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4413      	add	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e016      	b.n	8003f32 <lis2duxs12_init_set+0x20a>
 8003f04:	7d3b      	ldrb	r3, [r7, #20]
 8003f06:	f043 0320 	orr.w	r3, r3, #32
 8003f0a:	753b      	strb	r3, [r7, #20]
 8003f0c:	f107 0214 	add.w	r2, r7, #20
 8003f10:	2301      	movs	r3, #1
 8003f12:	2110      	movs	r1, #16
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fe78 	bl	8003c0a <lis2duxs12_write_reg>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4413      	add	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	e006      	b.n	8003f32 <lis2duxs12_init_set+0x20a>
 8003f24:	bf00      	nop
 8003f26:	e004      	b.n	8003f32 <lis2duxs12_init_set+0x20a>
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <lis2duxs12_init_set+0x20a>
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <lis2duxs12_init_set+0x20a>
 8003f30:	bf00      	nop
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <lis2duxs12_status_get>:
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	f107 0210 	add.w	r2, r7, #16
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	2125      	movs	r1, #37	@ 0x25
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff fe3e 	bl	8003bd0 <lis2duxs12_read_reg>
 8003f54:	6178      	str	r0, [r7, #20]
 8003f56:	f107 020c 	add.w	r2, r7, #12
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fe36 	bl	8003bd0 <lis2duxs12_read_reg>
 8003f64:	4602      	mov	r2, r0
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f107 0208 	add.w	r2, r7, #8
 8003f70:	2301      	movs	r3, #1
 8003f72:	2113      	movs	r1, #19
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fe2b 	bl	8003bd0 <lis2duxs12_read_reg>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	7b3b      	ldrb	r3, [r7, #12]
 8003f84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f88:	b2d9      	uxtb	r1, r3
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	7813      	ldrb	r3, [r2, #0]
 8003f8e:	f361 0300 	bfi	r3, r1, #0, #1
 8003f92:	7013      	strb	r3, [r2, #0]
 8003f94:	7a3b      	ldrb	r3, [r7, #8]
 8003f96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f9a:	b2d9      	uxtb	r1, r3
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	7813      	ldrb	r3, [r2, #0]
 8003fa0:	f361 0341 	bfi	r3, r1, #1, #1
 8003fa4:	7013      	strb	r3, [r2, #0]
 8003fa6:	7c3b      	ldrb	r3, [r7, #16]
 8003fa8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fac:	b2d9      	uxtb	r1, r3
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	7813      	ldrb	r3, [r2, #0]
 8003fb2:	f361 0382 	bfi	r3, r1, #2, #1
 8003fb6:	7013      	strb	r3, [r2, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <lis2duxs12_mode_set>:
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	f107 020c 	add.w	r2, r7, #12
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	2114      	movs	r1, #20
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fdfa 	bl	8003bd0 <lis2duxs12_read_reg>
 8003fdc:	6178      	str	r0, [r7, #20]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	7b3b      	ldrb	r3, [r7, #12]
 8003fea:	f362 1307 	bfi	r3, r2, #4, #4
 8003fee:	733b      	strb	r3, [r7, #12]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	7b3b      	ldrb	r3, [r7, #12]
 8003ffc:	f362 0301 	bfi	r3, r2, #0, #2
 8004000:	733b      	strb	r3, [r7, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b06      	cmp	r3, #6
 8004008:	d859      	bhi.n	80040be <lis2duxs12_mode_set+0xfa>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <lis2duxs12_mode_set+0x4c>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	0800402d 	.word	0x0800402d
 8004014:	0800402d 	.word	0x0800402d
 8004018:	0800402d 	.word	0x0800402d
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004037 	.word	0x08004037
 8004024:	08004053 	.word	0x08004053
 8004028:	0800407f 	.word	0x0800407f
 800402c:	7b3b      	ldrb	r3, [r7, #12]
 800402e:	f023 030c 	bic.w	r3, r3, #12
 8004032:	733b      	strb	r3, [r7, #12]
 8004034:	e04d      	b.n	80040d2 <lis2duxs12_mode_set+0x10e>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	789b      	ldrb	r3, [r3, #2]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d003      	beq.n	8004046 <lis2duxs12_mode_set+0x82>
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e004      	b.n	8004050 <lis2duxs12_mode_set+0x8c>
 8004046:	7b3b      	ldrb	r3, [r7, #12]
 8004048:	f043 030c 	orr.w	r3, r3, #12
 800404c:	733b      	strb	r3, [r7, #12]
 800404e:	bf00      	nop
 8004050:	e03f      	b.n	80040d2 <lis2duxs12_mode_set+0x10e>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	789b      	ldrb	r3, [r3, #2]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d005      	beq.n	8004066 <lis2duxs12_mode_set+0xa2>
 800405a:	2b03      	cmp	r3, #3
 800405c:	d009      	beq.n	8004072 <lis2duxs12_mode_set+0xae>
 800405e:	f04f 33ff 	mov.w	r3, #4294967295
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e00a      	b.n	800407c <lis2duxs12_mode_set+0xb8>
 8004066:	7b3b      	ldrb	r3, [r7, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	f362 0383 	bfi	r3, r2, #2, #2
 800406e:	733b      	strb	r3, [r7, #12]
 8004070:	e004      	b.n	800407c <lis2duxs12_mode_set+0xb8>
 8004072:	7b3b      	ldrb	r3, [r7, #12]
 8004074:	f043 030c 	orr.w	r3, r3, #12
 8004078:	733b      	strb	r3, [r7, #12]
 800407a:	bf00      	nop
 800407c:	e029      	b.n	80040d2 <lis2duxs12_mode_set+0x10e>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	789b      	ldrb	r3, [r3, #2]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d015      	beq.n	80040b2 <lis2duxs12_mode_set+0xee>
 8004086:	2b03      	cmp	r3, #3
 8004088:	dc03      	bgt.n	8004092 <lis2duxs12_mode_set+0xce>
 800408a:	2b01      	cmp	r3, #1
 800408c:	d005      	beq.n	800409a <lis2duxs12_mode_set+0xd6>
 800408e:	2b02      	cmp	r3, #2
 8004090:	d009      	beq.n	80040a6 <lis2duxs12_mode_set+0xe2>
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e010      	b.n	80040bc <lis2duxs12_mode_set+0xf8>
 800409a:	7b3b      	ldrb	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f362 0383 	bfi	r3, r2, #2, #2
 80040a2:	733b      	strb	r3, [r7, #12]
 80040a4:	e00a      	b.n	80040bc <lis2duxs12_mode_set+0xf8>
 80040a6:	7b3b      	ldrb	r3, [r7, #12]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f362 0383 	bfi	r3, r2, #2, #2
 80040ae:	733b      	strb	r3, [r7, #12]
 80040b0:	e004      	b.n	80040bc <lis2duxs12_mode_set+0xf8>
 80040b2:	7b3b      	ldrb	r3, [r7, #12]
 80040b4:	f043 030c 	orr.w	r3, r3, #12
 80040b8:	733b      	strb	r3, [r7, #12]
 80040ba:	bf00      	nop
 80040bc:	e009      	b.n	80040d2 <lis2duxs12_mode_set+0x10e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	789b      	ldrb	r3, [r3, #2]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	7b3b      	ldrb	r3, [r7, #12]
 80040ca:	f362 0383 	bfi	r3, r2, #2, #2
 80040ce:	733b      	strb	r3, [r7, #12]
 80040d0:	bf00      	nop
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <lis2duxs12_mode_set+0x118>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	e02b      	b.n	8004134 <lis2duxs12_mode_set+0x170>
 80040dc:	f107 0210 	add.w	r2, r7, #16
 80040e0:	2301      	movs	r3, #1
 80040e2:	2112      	movs	r1, #18
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fd73 	bl	8003bd0 <lis2duxs12_read_reg>
 80040ea:	6178      	str	r0, [r7, #20]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d101      	bne.n	80040fc <lis2duxs12_mode_set+0x138>
 80040f8:	2201      	movs	r2, #1
 80040fa:	e000      	b.n	80040fe <lis2duxs12_mode_set+0x13a>
 80040fc:	2200      	movs	r2, #0
 80040fe:	7c3b      	ldrb	r3, [r7, #16]
 8004100:	f362 0382 	bfi	r3, r2, #2, #1
 8004104:	743b      	strb	r3, [r7, #16]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d112      	bne.n	8004132 <lis2duxs12_mode_set+0x16e>
 800410c:	f107 020c 	add.w	r2, r7, #12
 8004110:	2301      	movs	r3, #1
 8004112:	2114      	movs	r1, #20
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fd78 	bl	8003c0a <lis2duxs12_write_reg>
 800411a:	6178      	str	r0, [r7, #20]
 800411c:	f107 0210 	add.w	r2, r7, #16
 8004120:	2301      	movs	r3, #1
 8004122:	2112      	movs	r1, #18
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fd70 	bl	8003c0a <lis2duxs12_write_reg>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <lis2duxs12_mode_get>:
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	f107 020c 	add.w	r2, r7, #12
 800414a:	2301      	movs	r3, #1
 800414c:	2114      	movs	r1, #20
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fd3e 	bl	8003bd0 <lis2duxs12_read_reg>
 8004154:	6178      	str	r0, [r7, #20]
 8004156:	f107 0210 	add.w	r2, r7, #16
 800415a:	2301      	movs	r3, #1
 800415c:	2112      	movs	r1, #18
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fd36 	bl	8003bd0 <lis2duxs12_read_reg>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	7b3b      	ldrb	r3, [r7, #12]
 800416e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b0f      	cmp	r3, #15
 8004176:	f200 809b 	bhi.w	80042b0 <lis2duxs12_mode_get+0x174>
 800417a:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <lis2duxs12_mode_get+0x44>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041c1 	.word	0x080041c1
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041d1 	.word	0x080041d1
 800418c:	080041d9 	.word	0x080041d9
 8004190:	080041e1 	.word	0x080041e1
 8004194:	080041f9 	.word	0x080041f9
 8004198:	08004211 	.word	0x08004211
 800419c:	08004229 	.word	0x08004229
 80041a0:	08004241 	.word	0x08004241
 80041a4:	08004259 	.word	0x08004259
 80041a8:	08004271 	.word	0x08004271
 80041ac:	08004289 	.word	0x08004289
 80041b0:	080042b1 	.word	0x080042b1
 80041b4:	080042b1 	.word	0x080042b1
 80041b8:	080042a1 	.word	0x080042a1
 80041bc:	080042a9 	.word	0x080042a9
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e077      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e073      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2202      	movs	r2, #2
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e06f      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2203      	movs	r2, #3
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e06b      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80041e0:	7c3b      	ldrb	r3, [r7, #16]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <lis2duxs12_mode_get+0xb4>
 80041ec:	2214      	movs	r2, #20
 80041ee:	e000      	b.n	80041f2 <lis2duxs12_mode_get+0xb6>
 80041f0:	2204      	movs	r2, #4
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e05f      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80041f8:	7c3b      	ldrb	r3, [r7, #16]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <lis2duxs12_mode_get+0xcc>
 8004204:	2215      	movs	r2, #21
 8004206:	e000      	b.n	800420a <lis2duxs12_mode_get+0xce>
 8004208:	2205      	movs	r2, #5
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e053      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 8004210:	7c3b      	ldrb	r3, [r7, #16]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <lis2duxs12_mode_get+0xe4>
 800421c:	2216      	movs	r2, #22
 800421e:	e000      	b.n	8004222 <lis2duxs12_mode_get+0xe6>
 8004220:	2206      	movs	r2, #6
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e047      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 8004228:	7c3b      	ldrb	r3, [r7, #16]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <lis2duxs12_mode_get+0xfc>
 8004234:	2217      	movs	r2, #23
 8004236:	e000      	b.n	800423a <lis2duxs12_mode_get+0xfe>
 8004238:	2207      	movs	r2, #7
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e03b      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 8004240:	7c3b      	ldrb	r3, [r7, #16]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <lis2duxs12_mode_get+0x114>
 800424c:	2218      	movs	r2, #24
 800424e:	e000      	b.n	8004252 <lis2duxs12_mode_get+0x116>
 8004250:	2208      	movs	r2, #8
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e02f      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 8004258:	7c3b      	ldrb	r3, [r7, #16]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <lis2duxs12_mode_get+0x12c>
 8004264:	2219      	movs	r2, #25
 8004266:	e000      	b.n	800426a <lis2duxs12_mode_get+0x12e>
 8004268:	2209      	movs	r2, #9
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e023      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 8004270:	7c3b      	ldrb	r3, [r7, #16]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <lis2duxs12_mode_get+0x144>
 800427c:	221a      	movs	r2, #26
 800427e:	e000      	b.n	8004282 <lis2duxs12_mode_get+0x146>
 8004280:	220a      	movs	r2, #10
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e017      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 8004288:	7c3b      	ldrb	r3, [r7, #16]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <lis2duxs12_mode_get+0x15c>
 8004294:	221b      	movs	r2, #27
 8004296:	e000      	b.n	800429a <lis2duxs12_mode_get+0x15e>
 8004298:	220b      	movs	r2, #11
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e00b      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	222e      	movs	r2, #46	@ 0x2e
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e007      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	222f      	movs	r2, #47	@ 0x2f
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e003      	b.n	80042b8 <lis2duxs12_mode_get+0x17c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	bf00      	nop
 80042b8:	7b3b      	ldrb	r3, [r7, #12]
 80042ba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d81b      	bhi.n	80042fc <lis2duxs12_mode_get+0x1c0>
 80042c4:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <lis2duxs12_mode_get+0x190>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042e5 	.word	0x080042e5
 80042d4:	080042ed 	.word	0x080042ed
 80042d8:	080042f5 	.word	0x080042f5
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	705a      	strb	r2, [r3, #1]
 80042e2:	e00f      	b.n	8004304 <lis2duxs12_mode_get+0x1c8>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	705a      	strb	r2, [r3, #1]
 80042ea:	e00b      	b.n	8004304 <lis2duxs12_mode_get+0x1c8>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2202      	movs	r2, #2
 80042f0:	705a      	strb	r2, [r3, #1]
 80042f2:	e007      	b.n	8004304 <lis2duxs12_mode_get+0x1c8>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	705a      	strb	r2, [r3, #1]
 80042fa:	e003      	b.n	8004304 <lis2duxs12_mode_get+0x1c8>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	705a      	strb	r2, [r3, #1]
 8004302:	bf00      	nop
 8004304:	7b3b      	ldrb	r3, [r7, #12]
 8004306:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b03      	cmp	r3, #3
 800430e:	d81b      	bhi.n	8004348 <lis2duxs12_mode_get+0x20c>
 8004310:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <lis2duxs12_mode_get+0x1dc>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004329 	.word	0x08004329
 800431c:	08004331 	.word	0x08004331
 8004320:	08004339 	.word	0x08004339
 8004324:	08004341 	.word	0x08004341
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	709a      	strb	r2, [r3, #2]
 800432e:	e00f      	b.n	8004350 <lis2duxs12_mode_get+0x214>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	709a      	strb	r2, [r3, #2]
 8004336:	e00b      	b.n	8004350 <lis2duxs12_mode_get+0x214>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2202      	movs	r2, #2
 800433c:	709a      	strb	r2, [r3, #2]
 800433e:	e007      	b.n	8004350 <lis2duxs12_mode_get+0x214>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2203      	movs	r2, #3
 8004344:	709a      	strb	r2, [r3, #2]
 8004346:	e003      	b.n	8004350 <lis2duxs12_mode_get+0x214>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	709a      	strb	r2, [r3, #2]
 800434e:	bf00      	nop
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop

0800435c <lis2duxs12_exit_deep_power_down>:
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	2300      	movs	r3, #0
 8004366:	723b      	strb	r3, [r7, #8]
 8004368:	7a3b      	ldrb	r3, [r7, #8]
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	723b      	strb	r3, [r7, #8]
 8004370:	f107 0208 	add.w	r2, r7, #8
 8004374:	2301      	movs	r3, #1
 8004376:	213e      	movs	r1, #62	@ 0x3e
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff fc46 	bl	8003c0a <lis2duxs12_write_reg>
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <lis2duxs12_exit_deep_power_down+0x34>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2019      	movs	r0, #25
 800438e:	4798      	blx	r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <lis2duxs12_xl_data_get>:
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b089      	sub	sp, #36	@ 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	f107 0210 	add.w	r2, r7, #16
 80043ac:	2306      	movs	r3, #6
 80043ae:	2128      	movs	r1, #40	@ 0x28
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fc0d 	bl	8003bd0 <lis2duxs12_read_reg>
 80043b6:	61b8      	str	r0, [r7, #24]
 80043b8:	2300      	movs	r3, #0
 80043ba:	77bb      	strb	r3, [r7, #30]
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e08f      	b.n	80044e2 <lis2duxs12_xl_data_get+0x146>
 80043c2:	7fbb      	ldrb	r3, [r7, #30]
 80043c4:	3301      	adds	r3, #1
 80043c6:	3320      	adds	r3, #32
 80043c8:	443b      	add	r3, r7
 80043ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
 80043d0:	b211      	sxth	r1, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	460a      	mov	r2, r1
 80043dc:	809a      	strh	r2, [r3, #4]
 80043de:	7ffb      	ldrb	r3, [r7, #31]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	7fba      	ldrb	r2, [r7, #30]
 80043f4:	3220      	adds	r2, #32
 80043f6:	443a      	add	r2, r7
 80043f8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80043fc:	4413      	add	r3, r2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	7ffb      	ldrb	r3, [r7, #31]
 8004402:	b211      	sxth	r1, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	460a      	mov	r2, r1
 800440e:	809a      	strh	r2, [r3, #4]
 8004410:	7fbb      	ldrb	r3, [r7, #30]
 8004412:	3302      	adds	r3, #2
 8004414:	77bb      	strb	r3, [r7, #30]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	785b      	ldrb	r3, [r3, #1]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d856      	bhi.n	80044cc <lis2duxs12_xl_data_get+0x130>
 800441e:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <lis2duxs12_xl_data_get+0x88>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004435 	.word	0x08004435
 8004428:	0800445b 	.word	0x0800445b
 800442c:	08004481 	.word	0x08004481
 8004430:	080044a7 	.word	0x080044a7
 8004434:	7ffb      	ldrb	r3, [r7, #31]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004442:	7ffc      	ldrb	r4, [r7, #31]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fbfd 	bl	8003c44 <lis2duxs12_from_fs2g_to_mg>
 800444a:	eef0 7a40 	vmov.f32	s15, s0
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	00a3      	lsls	r3, r4, #2
 8004452:	4413      	add	r3, r2
 8004454:	edc3 7a00 	vstr	s15, [r3]
 8004458:	e040      	b.n	80044dc <lis2duxs12_xl_data_get+0x140>
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004468:	7ffc      	ldrb	r4, [r7, #31]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fc02 	bl	8003c74 <lis2duxs12_from_fs4g_to_mg>
 8004470:	eef0 7a40 	vmov.f32	s15, s0
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	00a3      	lsls	r3, r4, #2
 8004478:	4413      	add	r3, r2
 800447a:	edc3 7a00 	vstr	s15, [r3]
 800447e:	e02d      	b.n	80044dc <lis2duxs12_xl_data_get+0x140>
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800448e:	7ffc      	ldrb	r4, [r7, #31]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fc07 	bl	8003ca4 <lis2duxs12_from_fs8g_to_mg>
 8004496:	eef0 7a40 	vmov.f32	s15, s0
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	00a3      	lsls	r3, r4, #2
 800449e:	4413      	add	r3, r2
 80044a0:	edc3 7a00 	vstr	s15, [r3]
 80044a4:	e01a      	b.n	80044dc <lis2duxs12_xl_data_get+0x140>
 80044a6:	7ffb      	ldrb	r3, [r7, #31]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044b4:	7ffc      	ldrb	r4, [r7, #31]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fc0c 	bl	8003cd4 <lis2duxs12_from_fs16g_to_mg>
 80044bc:	eef0 7a40 	vmov.f32	s15, s0
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	00a3      	lsls	r3, r4, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	edc3 7a00 	vstr	s15, [r3]
 80044ca:	e007      	b.n	80044dc <lis2duxs12_xl_data_get+0x140>
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	bf00      	nop
 80044dc:	7ffb      	ldrb	r3, [r7, #31]
 80044de:	3301      	adds	r3, #1
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f67f af6c 	bls.w	80043c2 <lis2duxs12_xl_data_get+0x26>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4618      	mov	r0, r3
 80044ee:	3724      	adds	r7, #36	@ 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd90      	pop	{r4, r7, pc}

080044f4 <lis2duxs12_i3c_configure_set>:
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	2301      	movs	r3, #1
 8004504:	2133      	movs	r1, #51	@ 0x33
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fb62 	bl	8003bd0 <lis2duxs12_read_reg>
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d122      	bne.n	800455a <lis2duxs12_i3c_configure_set+0x66>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	b2da      	uxtb	r2, r3
 800451e:	7a3b      	ldrb	r3, [r7, #8]
 8004520:	f362 0301 	bfi	r3, r2, #0, #2
 8004524:	723b      	strb	r3, [r7, #8]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	7a3b      	ldrb	r3, [r7, #8]
 8004532:	f362 1386 	bfi	r3, r2, #6, #1
 8004536:	723b      	strb	r3, [r7, #8]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004540:	b2da      	uxtb	r2, r3
 8004542:	7a3b      	ldrb	r3, [r7, #8]
 8004544:	f362 1345 	bfi	r3, r2, #5, #1
 8004548:	723b      	strb	r3, [r7, #8]
 800454a:	f107 0208 	add.w	r2, r7, #8
 800454e:	2301      	movs	r3, #1
 8004550:	2133      	movs	r1, #51	@ 0x33
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fb59 	bl	8003c0a <lis2duxs12_write_reg>
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <lis2duxs12_i3c_configure_get>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	f107 0208 	add.w	r2, r7, #8
 8004572:	2301      	movs	r3, #1
 8004574:	2133      	movs	r1, #51	@ 0x33
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fb2a 	bl	8003bd0 <lis2duxs12_read_reg>
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	7a3b      	ldrb	r3, [r7, #8]
 8004580:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004584:	b2d9      	uxtb	r1, r3
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	7853      	ldrb	r3, [r2, #1]
 800458a:	f361 0341 	bfi	r3, r1, #1, #1
 800458e:	7053      	strb	r3, [r2, #1]
 8004590:	7a3b      	ldrb	r3, [r7, #8]
 8004592:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004596:	b2d9      	uxtb	r1, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	7853      	ldrb	r3, [r2, #1]
 800459c:	f361 0300 	bfi	r3, r1, #0, #1
 80045a0:	7053      	strb	r3, [r2, #1]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d00e      	beq.n	80045c8 <lis2duxs12_i3c_configure_get+0x64>
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	dc10      	bgt.n	80045d0 <lis2duxs12_i3c_configure_get+0x6c>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <lis2duxs12_i3c_configure_get+0x54>
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d004      	beq.n	80045c0 <lis2duxs12_i3c_configure_get+0x5c>
 80045b6:	e00b      	b.n	80045d0 <lis2duxs12_i3c_configure_get+0x6c>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e00b      	b.n	80045d8 <lis2duxs12_i3c_configure_get+0x74>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e007      	b.n	80045d8 <lis2duxs12_i3c_configure_get+0x74>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2202      	movs	r2, #2
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e003      	b.n	80045d8 <lis2duxs12_i3c_configure_get+0x74>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2203      	movs	r2, #3
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	bf00      	nop
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <lis2duxs12_mem_bank_set>:
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	460b      	mov	r3, r1
 80045ec:	70fb      	strb	r3, [r7, #3]
 80045ee:	f107 0208 	add.w	r2, r7, #8
 80045f2:	2301      	movs	r3, #1
 80045f4:	213f      	movs	r1, #63	@ 0x3f
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff faea 	bl	8003bd0 <lis2duxs12_read_reg>
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10f      	bne.n	8004624 <lis2duxs12_mem_bank_set+0x42>
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	7a3b      	ldrb	r3, [r7, #8]
 800460e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004612:	723b      	strb	r3, [r7, #8]
 8004614:	f107 0208 	add.w	r2, r7, #8
 8004618:	2301      	movs	r3, #1
 800461a:	213f      	movs	r1, #63	@ 0x3f
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff faf4 	bl	8003c0a <lis2duxs12_write_reg>
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <lis2duxs12_fifo_mode_set>:
 800462e:	b580      	push	{r7, lr}
 8004630:	b08a      	sub	sp, #40	@ 0x28
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	e883 0006 	stmia.w	r3, {r1, r2}
 800463c:	f107 0220 	add.w	r2, r7, #32
 8004640:	2301      	movs	r3, #1
 8004642:	2113      	movs	r1, #19
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fac3 	bl	8003bd0 <lis2duxs12_read_reg>
 800464a:	6278      	str	r0, [r7, #36]	@ 0x24
 800464c:	f107 021c 	add.w	r2, r7, #28
 8004650:	2301      	movs	r3, #1
 8004652:	2115      	movs	r1, #21
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fabb 	bl	8003bd0 <lis2duxs12_read_reg>
 800465a:	4602      	mov	r2, r0
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	4413      	add	r3, r2
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
 8004662:	f107 0214 	add.w	r2, r7, #20
 8004666:	2301      	movs	r3, #1
 8004668:	2147      	movs	r1, #71	@ 0x47
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fab0 	bl	8003bd0 <lis2duxs12_read_reg>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	4413      	add	r3, r2
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
 8004678:	f107 0218 	add.w	r2, r7, #24
 800467c:	2301      	movs	r3, #1
 800467e:	2116      	movs	r1, #22
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff faa5 	bl	8003bd0 <lis2duxs12_read_reg>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	4413      	add	r3, r2
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 808a 	bne.w	80047aa <lis2duxs12_fifo_mode_set+0x17c>
 8004696:	793b      	ldrb	r3, [r7, #4]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d00e      	beq.n	80046ba <lis2duxs12_fifo_mode_set+0x8c>
 800469c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046a0:	f043 0308 	orr.w	r3, r3, #8
 80046a4:	f887 3020 	strb.w	r3, [r7, #32]
 80046a8:	793b      	ldrb	r3, [r7, #4]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	7f3b      	ldrb	r3, [r7, #28]
 80046b2:	f362 0302 	bfi	r3, r2, #0, #3
 80046b6:	773b      	strb	r3, [r7, #28]
 80046b8:	e005      	b.n	80046c6 <lis2duxs12_fifo_mode_set+0x98>
 80046ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046be:	f023 0308 	bic.w	r3, r3, #8
 80046c2:	f887 3020 	strb.w	r3, [r7, #32]
 80046c6:	797b      	ldrb	r3, [r7, #5]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	7f3b      	ldrb	r3, [r7, #28]
 80046d0:	f362 1386 	bfi	r3, r2, #6, #1
 80046d4:	773b      	strb	r3, [r7, #28]
 80046d6:	79bb      	ldrb	r3, [r7, #6]
 80046d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	7e3b      	ldrb	r3, [r7, #24]
 80046e0:	f362 13c7 	bfi	r3, r2, #7, #1
 80046e4:	763b      	strb	r3, [r7, #24]
 80046e6:	7a3b      	ldrb	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00f      	beq.n	800470c <lis2duxs12_fifo_mode_set+0xde>
 80046ec:	7a3b      	ldrb	r3, [r7, #8]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	7d3b      	ldrb	r3, [r7, #20]
 80046f6:	f362 03c4 	bfi	r3, r2, #3, #2
 80046fa:	753b      	strb	r3, [r7, #20]
 80046fc:	7a7b      	ldrb	r3, [r7, #9]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	b2da      	uxtb	r2, r3
 8004704:	7d3b      	ldrb	r3, [r7, #20]
 8004706:	f362 0302 	bfi	r3, r2, #0, #3
 800470a:	753b      	strb	r3, [r7, #20]
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	7f3b      	ldrb	r3, [r7, #28]
 8004716:	f362 13c7 	bfi	r3, r2, #7, #1
 800471a:	773b      	strb	r3, [r7, #28]
 800471c:	79bb      	ldrb	r3, [r7, #6]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d014      	beq.n	8004752 <lis2duxs12_fifo_mode_set+0x124>
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2da      	uxtb	r2, r3
 800473a:	7f3b      	ldrb	r3, [r7, #28]
 800473c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004740:	773b      	strb	r3, [r7, #28]
 8004742:	79bb      	ldrb	r3, [r7, #6]
 8004744:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004748:	b2da      	uxtb	r2, r3
 800474a:	7e3b      	ldrb	r3, [r7, #24]
 800474c:	f362 0306 	bfi	r3, r2, #0, #7
 8004750:	763b      	strb	r3, [r7, #24]
 8004752:	f107 0214 	add.w	r2, r7, #20
 8004756:	2301      	movs	r3, #1
 8004758:	2147      	movs	r1, #71	@ 0x47
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fa55 	bl	8003c0a <lis2duxs12_write_reg>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	4413      	add	r3, r2
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
 8004768:	f107 0218 	add.w	r2, r7, #24
 800476c:	2301      	movs	r3, #1
 800476e:	2116      	movs	r1, #22
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fa4a 	bl	8003c0a <lis2duxs12_write_reg>
 8004776:	4602      	mov	r2, r0
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	4413      	add	r3, r2
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
 800477e:	f107 021c 	add.w	r2, r7, #28
 8004782:	2301      	movs	r3, #1
 8004784:	2115      	movs	r1, #21
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff fa3f 	bl	8003c0a <lis2duxs12_write_reg>
 800478c:	4602      	mov	r2, r0
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	4413      	add	r3, r2
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
 8004794:	f107 0220 	add.w	r2, r7, #32
 8004798:	2301      	movs	r3, #1
 800479a:	2113      	movs	r1, #19
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff fa34 	bl	8003c0a <lis2duxs12_write_reg>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	4413      	add	r3, r2
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	4618      	mov	r0, r3
 80047ae:	3728      	adds	r7, #40	@ 0x28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <LIS2MDL_RegisterBusIO>:
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <LIS2MDL_RegisterBusIO+0x1c>
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e067      	b.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	605a      	str	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	7b1a      	ldrb	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	731a      	strb	r2, [r3, #12]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	611a      	str	r2, [r3, #16]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	615a      	str	r2, [r3, #20]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	699a      	ldr	r2, [r3, #24]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a28      	ldr	r2, [pc, #160]	@ (80048ac <LIS2MDL_RegisterBusIO+0xf8>)
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <LIS2MDL_RegisterBusIO+0xfc>)
 8004812:	621a      	str	r2, [r3, #32]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	@ 0x28
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <LIS2MDL_RegisterBusIO+0x7e>
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e036      	b.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4798      	blx	r3
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <LIS2MDL_RegisterBusIO+0x92>
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e02c      	b.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004854:	2b00      	cmp	r3, #0
 8004856:	d123      	bne.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10d      	bne.n	800487c <LIS2MDL_RegisterBusIO+0xc8>
 8004860:	2334      	movs	r3, #52	@ 0x34
 8004862:	72fb      	strb	r3, [r7, #11]
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	461a      	mov	r2, r3
 8004868:	2162      	movs	r1, #98	@ 0x62
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb1b 	bl	8004ea6 <LIS2MDL_Write_Reg>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	e012      	b.n	80048a2 <LIS2MDL_RegisterBusIO+0xee>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d101      	bne.n	8004888 <LIS2MDL_RegisterBusIO+0xd4>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e00c      	b.n	80048a2 <LIS2MDL_RegisterBusIO+0xee>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3320      	adds	r3, #32
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 ff79 	bl	8005786 <lis2mdl_i2c_interface_set>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <LIS2MDL_RegisterBusIO+0xec>
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	e000      	b.n	80048a2 <LIS2MDL_RegisterBusIO+0xee>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08004efd 	.word	0x08004efd
 80048b0:	08004f7f 	.word	0x08004f7f

080048b4 <LIS2MDL_Init>:
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d144      	bne.n	800494e <LIS2MDL_Init+0x9a>
 80048c4:	f107 0208 	add.w	r2, r7, #8
 80048c8:	2301      	movs	r3, #1
 80048ca:	2162      	movs	r1, #98	@ 0x62
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fb97 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <LIS2MDL_Init+0x2a>
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
 80048dc:	e06c      	b.n	80049b8 <LIS2MDL_Init+0x104>
 80048de:	f107 020c 	add.w	r2, r7, #12
 80048e2:	2301      	movs	r3, #1
 80048e4:	2160      	movs	r1, #96	@ 0x60
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fb8a 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <LIS2MDL_Init+0x44>
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	e05f      	b.n	80049b8 <LIS2MDL_Init+0x104>
 80048f8:	7a3b      	ldrb	r3, [r7, #8]
 80048fa:	f043 0310 	orr.w	r3, r3, #16
 80048fe:	723b      	strb	r3, [r7, #8]
 8004900:	7a3b      	ldrb	r3, [r7, #8]
 8004902:	f023 0302 	bic.w	r3, r3, #2
 8004906:	723b      	strb	r3, [r7, #8]
 8004908:	7b3b      	ldrb	r3, [r7, #12]
 800490a:	2202      	movs	r2, #2
 800490c:	f362 0301 	bfi	r3, r2, #0, #2
 8004910:	733b      	strb	r3, [r7, #12]
 8004912:	7b3b      	ldrb	r3, [r7, #12]
 8004914:	f043 030c 	orr.w	r3, r3, #12
 8004918:	733b      	strb	r3, [r7, #12]
 800491a:	f107 0208 	add.w	r2, r7, #8
 800491e:	2301      	movs	r3, #1
 8004920:	2162      	movs	r1, #98	@ 0x62
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fcab 	bl	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <LIS2MDL_Init+0x80>
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e041      	b.n	80049b8 <LIS2MDL_Init+0x104>
 8004934:	f107 020c 	add.w	r2, r7, #12
 8004938:	2301      	movs	r3, #1
 800493a:	2160      	movs	r1, #96	@ 0x60
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fc9e 	bl	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d032      	beq.n	80049ae <LIS2MDL_Init+0xfa>
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
 800494c:	e034      	b.n	80049b8 <LIS2MDL_Init+0x104>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3320      	adds	r3, #32
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fe71 	bl	800563c <lis2mdl_block_data_update_set>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <LIS2MDL_Init+0xb2>
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	e028      	b.n	80049b8 <LIS2MDL_Init+0x104>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3320      	adds	r3, #32
 800496a:	2102      	movs	r1, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fde0 	bl	8005532 <lis2mdl_operating_mode_set>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <LIS2MDL_Init+0xca>
 8004978:	f04f 33ff 	mov.w	r3, #4294967295
 800497c:	e01c      	b.n	80049b8 <LIS2MDL_Init+0x104>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3320      	adds	r3, #32
 8004982:	2103      	movs	r1, #3
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fdfa 	bl	800557e <lis2mdl_data_rate_set>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <LIS2MDL_Init+0xe2>
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	e010      	b.n	80049b8 <LIS2MDL_Init+0x104>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3320      	adds	r3, #32
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fecc 	bl	800573a <lis2mdl_self_test_set>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <LIS2MDL_Init+0xfa>
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	e004      	b.n	80049b8 <LIS2MDL_Init+0x104>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80049b6:	2300      	movs	r3, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <LIS2MDL_DeInit>:
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8a5 	bl	8004b18 <LIS2MDL_MAG_Disable>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <LIS2MDL_DeInit+0x1a>
 80049d4:	f04f 33ff 	mov.w	r3, #4294967295
 80049d8:	e004      	b.n	80049e4 <LIS2MDL_DeInit+0x24>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <LIS2MDL_ReadID>:
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d10b      	bne.n	8004a16 <LIS2MDL_ReadID+0x2a>
 80049fe:	2301      	movs	r3, #1
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	214f      	movs	r1, #79	@ 0x4f
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fafb 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <LIS2MDL_ReadID+0x42>
 8004a10:	f04f 33ff 	mov.w	r3, #4294967295
 8004a14:	e00c      	b.n	8004a30 <LIS2MDL_ReadID+0x44>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3320      	adds	r3, #32
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fe7b 	bl	8005718 <lis2mdl_device_id_get>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <LIS2MDL_ReadID+0x42>
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e000      	b.n	8004a30 <LIS2MDL_ReadID+0x44>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <LIS2MDL_GetCapabilities>:
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	705a      	strb	r2, [r3, #1]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2201      	movs	r2, #1
 8004a52:	709a      	strb	r2, [r3, #2]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	70da      	strb	r2, [r3, #3]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2232      	movs	r2, #50	@ 0x32
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	615a      	str	r2, [r3, #20]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4a04      	ldr	r2, [pc, #16]	@ (8004a90 <LIS2MDL_GetCapabilities+0x58>)
 8004a80:	619a      	str	r2, [r3, #24]
 8004a82:	2300      	movs	r3, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	42c80000 	.word	0x42c80000

08004a94 <LIS2MDL_MAG_Enable>:
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <LIS2MDL_MAG_Enable+0x16>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e032      	b.n	8004b10 <LIS2MDL_MAG_Enable+0x7c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d11d      	bne.n	8004aee <LIS2MDL_MAG_Enable+0x5a>
 8004ab2:	f107 020c 	add.w	r2, r7, #12
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	2160      	movs	r1, #96	@ 0x60
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 faa0 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <LIS2MDL_MAG_Enable+0x38>
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	e021      	b.n	8004b10 <LIS2MDL_MAG_Enable+0x7c>
 8004acc:	7b3b      	ldrb	r3, [r7, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	733b      	strb	r3, [r7, #12]
 8004ad4:	f107 020c 	add.w	r2, r7, #12
 8004ad8:	2301      	movs	r3, #1
 8004ada:	2160      	movs	r1, #96	@ 0x60
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fbce 	bl	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <LIS2MDL_MAG_Enable+0x72>
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	e010      	b.n	8004b10 <LIS2MDL_MAG_Enable+0x7c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3320      	adds	r3, #32
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fd1c 	bl	8005532 <lis2mdl_operating_mode_set>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <LIS2MDL_MAG_Enable+0x72>
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	e004      	b.n	8004b10 <LIS2MDL_MAG_Enable+0x7c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <LIS2MDL_MAG_Disable>:
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <LIS2MDL_MAG_Disable+0x16>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e033      	b.n	8004b96 <LIS2MDL_MAG_Disable+0x7e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d11e      	bne.n	8004b74 <LIS2MDL_MAG_Disable+0x5c>
 8004b36:	f107 020c 	add.w	r2, r7, #12
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	2160      	movs	r1, #96	@ 0x60
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa5e 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <LIS2MDL_MAG_Disable+0x38>
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	e022      	b.n	8004b96 <LIS2MDL_MAG_Disable+0x7e>
 8004b50:	7b3b      	ldrb	r3, [r7, #12]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f362 0301 	bfi	r3, r2, #0, #2
 8004b58:	733b      	strb	r3, [r7, #12]
 8004b5a:	f107 020c 	add.w	r2, r7, #12
 8004b5e:	2301      	movs	r3, #1
 8004b60:	2160      	movs	r1, #96	@ 0x60
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fb8b 	bl	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <LIS2MDL_MAG_Disable+0x74>
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	e010      	b.n	8004b96 <LIS2MDL_MAG_Disable+0x7e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3320      	adds	r3, #32
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fcd9 	bl	8005532 <lis2mdl_operating_mode_set>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <LIS2MDL_MAG_Disable+0x74>
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	e004      	b.n	8004b96 <LIS2MDL_MAG_Disable+0x7e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8004b94:	2300      	movs	r3, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <LIS2MDL_MAG_GetSensitivity>:
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <LIS2MDL_MAG_GetOutputDataRate>:
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3320      	adds	r3, #32
 8004bd2:	f107 020b 	add.w	r2, r7, #11
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fcf7 	bl	80055cc <lis2mdl_data_rate_get>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <LIS2MDL_MAG_GetOutputDataRate+0x2a>
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	e023      	b.n	8004c32 <LIS2MDL_MAG_GetOutputDataRate+0x72>
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d81b      	bhi.n	8004c28 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c11 	.word	0x08004c11
 8004c00:	08004c19 	.word	0x08004c19
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c3c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e00f      	b.n	8004c30 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4a0b      	ldr	r2, [pc, #44]	@ (8004c40 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e00b      	b.n	8004c30 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c44 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e007      	b.n	8004c30 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4a09      	ldr	r2, [pc, #36]	@ (8004c48 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e003      	b.n	8004c30 <LIS2MDL_MAG_GetOutputDataRate+0x70>
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	bf00      	nop
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	41200000 	.word	0x41200000
 8004c40:	41a00000 	.word	0x41a00000
 8004c44:	42480000 	.word	0x42480000
 8004c48:	42c80000 	.word	0x42c80000

08004c4c <LIS2MDL_MAG_SetOutputDataRate>:
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	ed87 0a00 	vstr	s0, [r7]
 8004c58:	edd7 7a00 	vldr	s15, [r7]
 8004c5c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	d801      	bhi.n	8004c6e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e016      	b.n	8004c9c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004c6e:	edd7 7a00 	vldr	s15, [r7]
 8004c72:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	d801      	bhi.n	8004c84 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e00b      	b.n	8004c9c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004c84:	edd7 7a00 	vldr	s15, [r7]
 8004c88:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004d10 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	d801      	bhi.n	8004c9a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e000      	b.n	8004c9c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d121      	bne.n	8004cea <LIS2MDL_MAG_SetOutputDataRate+0x9e>
 8004ca6:	f107 020c 	add.w	r2, r7, #12
 8004caa:	2301      	movs	r3, #1
 8004cac:	2160      	movs	r1, #96	@ 0x60
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9a6 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <LIS2MDL_MAG_SetOutputDataRate+0x74>
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	e022      	b.n	8004d06 <LIS2MDL_MAG_SetOutputDataRate+0xba>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	7b3b      	ldrb	r3, [r7, #12]
 8004cca:	f362 0383 	bfi	r3, r2, #2, #2
 8004cce:	733b      	strb	r3, [r7, #12]
 8004cd0:	f107 020c 	add.w	r2, r7, #12
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	2160      	movs	r1, #96	@ 0x60
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fad0 	bl	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce8:	e00d      	b.n	8004d06 <LIS2MDL_MAG_SetOutputDataRate+0xba>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3320      	adds	r3, #32
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fc43 	bl	800557e <lis2mdl_data_rate_set>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	e000      	b.n	8004d06 <LIS2MDL_MAG_SetOutputDataRate+0xba>
 8004d04:	2300      	movs	r3, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	42480000 	.word	0x42480000

08004d14 <LIS2MDL_MAG_GetFullScale>:
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2232      	movs	r2, #50	@ 0x32
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LIS2MDL_MAG_SetFullScale>:
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LIS2MDL_MAG_GetAxesRaw>:
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3320      	adds	r3, #32
 8004d58:	f107 0208 	add.w	r2, r7, #8
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fc92 	bl	8005688 <lis2mdl_magnetic_raw_get>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <LIS2MDL_MAG_GetAxesRaw+0x26>
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	e00c      	b.n	8004d8a <LIS2MDL_MAG_GetAxesRaw+0x40>
 8004d70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	801a      	strh	r2, [r3, #0]
 8004d78:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	805a      	strh	r2, [r3, #2]
 8004d80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	809a      	strh	r2, [r3, #4]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <LIS2MDL_MAG_GetAxes>:
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b088      	sub	sp, #32
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d134      	bne.n	8004e14 <LIS2MDL_MAG_GetAxes+0x82>
 8004daa:	f107 0218 	add.w	r2, r7, #24
 8004dae:	2306      	movs	r3, #6
 8004db0:	2168      	movs	r1, #104	@ 0x68
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f924 	bl	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <LIS2MDL_MAG_GetAxes+0x32>
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc2:	e06c      	b.n	8004e9e <LIS2MDL_MAG_GetAxes+0x10c>
 8004dc4:	7e7b      	ldrb	r3, [r7, #25]
 8004dc6:	b21b      	sxth	r3, r3
 8004dc8:	823b      	strh	r3, [r7, #16]
 8004dca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	7e3a      	ldrb	r2, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	b21b      	sxth	r3, r3
 8004ddc:	823b      	strh	r3, [r7, #16]
 8004dde:	7efb      	ldrb	r3, [r7, #27]
 8004de0:	b21b      	sxth	r3, r3
 8004de2:	827b      	strh	r3, [r7, #18]
 8004de4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	7eba      	ldrb	r2, [r7, #26]
 8004df0:	4413      	add	r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	b21b      	sxth	r3, r3
 8004df6:	827b      	strh	r3, [r7, #18]
 8004df8:	7f7b      	ldrb	r3, [r7, #29]
 8004dfa:	b21b      	sxth	r3, r3
 8004dfc:	82bb      	strh	r3, [r7, #20]
 8004dfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	7f3a      	ldrb	r2, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b21b      	sxth	r3, r3
 8004e10:	82bb      	strh	r3, [r7, #20]
 8004e12:	e00d      	b.n	8004e30 <LIS2MDL_MAG_GetAxes+0x9e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3320      	adds	r3, #32
 8004e18:	f107 0210 	add.w	r2, r7, #16
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fc32 	bl	8005688 <lis2mdl_magnetic_raw_get>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <LIS2MDL_MAG_GetAxes+0x9e>
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	e036      	b.n	8004e9e <LIS2MDL_MAG_GetAxes+0x10c>
 8004e30:	f107 030c 	add.w	r3, r7, #12
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff feb1 	bl	8004b9e <LIS2MDL_MAG_GetSensitivity>
 8004e3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e54:	ee17 2a90 	vmov	r2, s15
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e68:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e74:	ee17 2a90 	vmov	r2, s15
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e94:	ee17 2a90 	vmov	r2, s15
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <LIS2MDL_Write_Reg>:
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	70bb      	strb	r3, [r7, #2]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d10b      	bne.n	8004ed6 <LIS2MDL_Write_Reg+0x30>
 8004ebe:	1cba      	adds	r2, r7, #2
 8004ec0:	78f9      	ldrb	r1, [r7, #3]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f9da 	bl	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d010      	beq.n	8004ef2 <LIS2MDL_Write_Reg+0x4c>
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	e00e      	b.n	8004ef4 <LIS2MDL_Write_Reg+0x4e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0020 	add.w	r0, r3, #32
 8004edc:	1cba      	adds	r2, r7, #2
 8004ede:	78f9      	ldrb	r1, [r7, #3]
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f000 fb08 	bl	80054f6 <lis2mdl_write_reg>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <LIS2MDL_Write_Reg+0x4c>
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	e000      	b.n	8004ef4 <LIS2MDL_Write_Reg+0x4e>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <ReadMagRegWrap>:
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	461a      	mov	r2, r3
 8004f08:	460b      	mov	r3, r1
 8004f0a:	72fb      	strb	r3, [r7, #11]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	813b      	strh	r3, [r7, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10e      	bne.n	8004f3a <ReadMagRegWrap+0x3e>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	695c      	ldr	r4, [r3, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	7b1b      	ldrb	r3, [r3, #12]
 8004f24:	4618      	mov	r0, r3
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	4619      	mov	r1, r3
 8004f30:	893b      	ldrh	r3, [r7, #8]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	47a0      	blx	r4
 8004f36:	4603      	mov	r3, r0
 8004f38:	e01d      	b.n	8004f76 <ReadMagRegWrap+0x7a>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d10b      	bne.n	8004f5a <ReadMagRegWrap+0x5e>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	695c      	ldr	r4, [r3, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	7b1b      	ldrb	r3, [r3, #12]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	7afb      	ldrb	r3, [r7, #11]
 8004f4e:	b299      	uxth	r1, r3
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	47a0      	blx	r4
 8004f56:	4603      	mov	r3, r0
 8004f58:	e00d      	b.n	8004f76 <ReadMagRegWrap+0x7a>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	695c      	ldr	r4, [r3, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	7b1b      	ldrb	r3, [r3, #12]
 8004f62:	4618      	mov	r0, r3
 8004f64:	7afb      	ldrb	r3, [r7, #11]
 8004f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	893b      	ldrh	r3, [r7, #8]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	47a0      	blx	r4
 8004f74:	4603      	mov	r3, r0
 8004f76:	4618      	mov	r0, r3
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd90      	pop	{r4, r7, pc}

08004f7e <WriteMagRegWrap>:
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	72fb      	strb	r3, [r7, #11]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <WriteMagRegWrap+0x3e>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	691c      	ldr	r4, [r3, #16]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	7b1b      	ldrb	r3, [r3, #12]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	7afb      	ldrb	r3, [r7, #11]
 8004faa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	47a0      	blx	r4
 8004fb8:	4603      	mov	r3, r0
 8004fba:	e01d      	b.n	8004ff8 <WriteMagRegWrap+0x7a>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d10b      	bne.n	8004fdc <WriteMagRegWrap+0x5e>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	691c      	ldr	r4, [r3, #16]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	7b1b      	ldrb	r3, [r3, #12]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	7afb      	ldrb	r3, [r7, #11]
 8004fd0:	b299      	uxth	r1, r3
 8004fd2:	893b      	ldrh	r3, [r7, #8]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	47a0      	blx	r4
 8004fd8:	4603      	mov	r3, r0
 8004fda:	e00d      	b.n	8004ff8 <WriteMagRegWrap+0x7a>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	691c      	ldr	r4, [r3, #16]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	7b1b      	ldrb	r3, [r3, #12]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	4619      	mov	r1, r3
 8004ff0:	893b      	ldrh	r3, [r7, #8]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	47a0      	blx	r4
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd90      	pop	{r4, r7, pc}

08005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	@ 0x30
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	460b      	mov	r3, r1
 800500e:	72fb      	strb	r3, [r7, #11]
 8005010:	4613      	mov	r3, r2
 8005012:	813b      	strh	r3, [r7, #8]
 8005014:	2301      	movs	r3, #1
 8005016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800501a:	2340      	movs	r3, #64	@ 0x40
 800501c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3020 	strb.w	r3, [r7, #32]
 8005026:	233d      	movs	r3, #61	@ 0x3d
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	2315      	movs	r3, #21
 800502c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005030:	2316      	movs	r3, #22
 8005032:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8005036:	2317      	movs	r3, #23
 8005038:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800503c:	2314      	movs	r3, #20
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	2344      	movs	r3, #68	@ 0x44
 8005044:	77bb      	strb	r3, [r7, #30]
 8005046:	2302      	movs	r3, #2
 8005048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800504c:	2339      	movs	r3, #57	@ 0x39
 800504e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8005058:	2329      	movs	r3, #41	@ 0x29
 800505a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800505e:	231e      	movs	r3, #30
 8005060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800506a:	893b      	ldrh	r3, [r7, #8]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	777b      	strb	r3, [r7, #29]
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8005076:	2300      	movs	r3, #0
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507c:	2340      	movs	r3, #64	@ 0x40
 800507e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f103 0020 	add.w	r0, r3, #32
 8005088:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800508c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005090:	2301      	movs	r3, #1
 8005092:	f000 fa30 	bl	80054f6 <lis2mdl_write_reg>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	e0e9      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f103 0020 	add.w	r0, r3, #32
 80050a8:	f107 021f 	add.w	r2, r7, #31
 80050ac:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80050b0:	2301      	movs	r3, #1
 80050b2:	f000 fa20 	bl	80054f6 <lis2mdl_write_reg>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	e0d9      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f103 0020 	add.w	r0, r3, #32
 80050c8:	f107 020b 	add.w	r2, r7, #11
 80050cc:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80050d0:	2301      	movs	r3, #1
 80050d2:	f000 fa10 	bl	80054f6 <lis2mdl_write_reg>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	e0c9      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f103 0020 	add.w	r0, r3, #32
 80050e8:	f107 021d 	add.w	r2, r7, #29
 80050ec:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80050f0:	2301      	movs	r3, #1
 80050f2:	f000 fa00 	bl	80054f6 <lis2mdl_write_reg>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	e0b9      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f103 0020 	add.w	r0, r3, #32
 8005108:	f107 021e 	add.w	r2, r7, #30
 800510c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005110:	2301      	movs	r3, #1
 8005112:	f000 f9f0 	bl	80054f6 <lis2mdl_write_reg>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	e0a9      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f103 0020 	add.w	r0, r3, #32
 8005128:	f107 0220 	add.w	r2, r7, #32
 800512c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005130:	2301      	movs	r3, #1
 8005132:	f000 f9e0 	bl	80054f6 <lis2mdl_write_reg>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	e099      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f103 0020 	add.w	r0, r3, #32
 8005148:	f107 021c 	add.w	r2, r7, #28
 800514c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005150:	2301      	movs	r3, #1
 8005152:	f000 f9b2 	bl	80054ba <lis2mdl_read_reg>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	e089      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005162:	7f3b      	ldrb	r3, [r7, #28]
 8005164:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005168:	429a      	cmp	r2, r3
 800516a:	d102      	bne.n	8005172 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
 800516c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005170:	773b      	strb	r3, [r7, #28]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f103 0020 	add.w	r0, r3, #32
 8005178:	f107 021c 	add.w	r2, r7, #28
 800517c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005180:	2301      	movs	r3, #1
 8005182:	f000 f9b8 	bl	80054f6 <lis2mdl_write_reg>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	e071      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f103 0020 	add.w	r0, r3, #32
 8005198:	f107 0214 	add.w	r2, r7, #20
 800519c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80051a0:	2306      	movs	r3, #6
 80051a2:	f000 f98a 	bl	80054ba <lis2mdl_read_reg>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	e061      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f103 0020 	add.w	r0, r3, #32
 80051b8:	f107 021b 	add.w	r2, r7, #27
 80051bc:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80051c0:	2301      	movs	r3, #1
 80051c2:	f000 f97a 	bl	80054ba <lis2mdl_read_reg>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295
 80051d0:	e051      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 80051d2:	7efa      	ldrb	r2, [r7, #27]
 80051d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80051d8:	4013      	ands	r3, r2
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1e6      	bne.n	80051b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f103 0020 	add.w	r0, r3, #32
 80051ea:	f107 021b 	add.w	r2, r7, #27
 80051ee:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80051f2:	2301      	movs	r3, #1
 80051f4:	f000 f961 	bl	80054ba <lis2mdl_read_reg>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e038      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005204:	7efa      	ldrb	r2, [r7, #27]
 8005206:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800520a:	4013      	ands	r3, r2
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005212:	429a      	cmp	r2, r3
 8005214:	d1e6      	bne.n	80051e4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f103 0020 	add.w	r0, r3, #32
 800521c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005220:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005224:	2301      	movs	r3, #1
 8005226:	f000 f966 	bl	80054f6 <lis2mdl_write_reg>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	e01f      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f103 0020 	add.w	r0, r3, #32
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	f000 f939 	bl	80054ba <lis2mdl_read_reg>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	e010      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f103 0020 	add.w	r0, r3, #32
 800525a:	f107 0220 	add.w	r2, r7, #32
 800525e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005262:	2301      	movs	r3, #1
 8005264:	f000 f947 	bl	80054f6 <lis2mdl_write_reg>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	e000      	b.n	8005276 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
 8005274:	2300      	movs	r3, #0
 8005276:	4618      	mov	r0, r3
 8005278:	3730      	adds	r7, #48	@ 0x30
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
 800527e:	b580      	push	{r7, lr}
 8005280:	b08c      	sub	sp, #48	@ 0x30
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	461a      	mov	r2, r3
 800528a:	460b      	mov	r3, r1
 800528c:	72fb      	strb	r3, [r7, #11]
 800528e:	4613      	mov	r3, r2
 8005290:	813b      	strh	r3, [r7, #8]
 8005292:	2301      	movs	r3, #1
 8005294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005298:	2340      	movs	r3, #64	@ 0x40
 800529a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800529e:	2300      	movs	r3, #0
 80052a0:	f887 3020 	strb.w	r3, [r7, #32]
 80052a4:	233c      	movs	r3, #60	@ 0x3c
 80052a6:	77fb      	strb	r3, [r7, #31]
 80052a8:	2315      	movs	r3, #21
 80052aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80052ae:	2316      	movs	r3, #22
 80052b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80052b4:	2317      	movs	r3, #23
 80052b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80052ba:	2300      	movs	r3, #0
 80052bc:	77bb      	strb	r3, [r7, #30]
 80052be:	2314      	movs	r3, #20
 80052c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c4:	2344      	movs	r3, #68	@ 0x44
 80052c6:	777b      	strb	r3, [r7, #29]
 80052c8:	2339      	movs	r3, #57	@ 0x39
 80052ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052ce:	2380      	movs	r3, #128	@ 0x80
 80052d0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80052d4:	2329      	movs	r3, #41	@ 0x29
 80052d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80052da:	231e      	movs	r3, #30
 80052dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80052e6:	2310      	movs	r3, #16
 80052e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80052f2:	2340      	movs	r3, #64	@ 0x40
 80052f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f8:	230e      	movs	r3, #14
 80052fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f103 0020 	add.w	r0, r3, #32
 8005304:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005308:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800530c:	2301      	movs	r3, #1
 800530e:	f000 f8f2 	bl	80054f6 <lis2mdl_write_reg>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	e0c9      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f103 0020 	add.w	r0, r3, #32
 8005324:	f107 021f 	add.w	r2, r7, #31
 8005328:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800532c:	2301      	movs	r3, #1
 800532e:	f000 f8e2 	bl	80054f6 <lis2mdl_write_reg>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	e0b9      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f103 0020 	add.w	r0, r3, #32
 8005344:	f107 020b 	add.w	r2, r7, #11
 8005348:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800534c:	2301      	movs	r3, #1
 800534e:	f000 f8d2 	bl	80054f6 <lis2mdl_write_reg>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	e0a9      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f103 0020 	add.w	r0, r3, #32
 8005364:	f107 021e 	add.w	r2, r7, #30
 8005368:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800536c:	2301      	movs	r3, #1
 800536e:	f000 f8c2 	bl	80054f6 <lis2mdl_write_reg>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e099      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0020 	add.w	r0, r3, #32
 8005384:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005388:	2301      	movs	r3, #1
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	f000 f8b3 	bl	80054f6 <lis2mdl_write_reg>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	e08a      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f103 0020 	add.w	r0, r3, #32
 80053a2:	f107 021d 	add.w	r2, r7, #29
 80053a6:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80053aa:	2301      	movs	r3, #1
 80053ac:	f000 f8a3 	bl	80054f6 <lis2mdl_write_reg>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	e07a      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f103 0020 	add.w	r0, r3, #32
 80053c2:	f107 0220 	add.w	r2, r7, #32
 80053c6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80053ca:	2301      	movs	r3, #1
 80053cc:	f000 f893 	bl	80054f6 <lis2mdl_write_reg>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	e06a      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f103 0020 	add.w	r0, r3, #32
 80053e2:	f107 021c 	add.w	r2, r7, #28
 80053e6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80053ea:	2301      	movs	r3, #1
 80053ec:	f000 f865 	bl	80054ba <lis2mdl_read_reg>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	e05a      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 80053fc:	7f3b      	ldrb	r3, [r7, #28]
 80053fe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005402:	429a      	cmp	r2, r3
 8005404:	d102      	bne.n	800540c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
 8005406:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800540a:	773b      	strb	r3, [r7, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f103 0020 	add.w	r0, r3, #32
 8005412:	f107 021c 	add.w	r2, r7, #28
 8005416:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800541a:	2301      	movs	r3, #1
 800541c:	f000 f86b 	bl	80054f6 <lis2mdl_write_reg>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e042      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f103 0020 	add.w	r0, r3, #32
 8005432:	f107 0214 	add.w	r2, r7, #20
 8005436:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800543a:	2306      	movs	r3, #6
 800543c:	f000 f83d 	bl	80054ba <lis2mdl_read_reg>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
 8005446:	f04f 33ff 	mov.w	r3, #4294967295
 800544a:	e032      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f103 0020 	add.w	r0, r3, #32
 8005452:	f107 021b 	add.w	r2, r7, #27
 8005456:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800545a:	2301      	movs	r3, #1
 800545c:	f000 f82d 	bl	80054ba <lis2mdl_read_reg>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	e022      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800546c:	7efa      	ldrb	r2, [r7, #27]
 800546e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005472:	4013      	ands	r3, r2
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800547a:	429a      	cmp	r2, r3
 800547c:	d1e6      	bne.n	800544c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f103 0020 	add.w	r0, r3, #32
 8005484:	f107 021b 	add.w	r2, r7, #27
 8005488:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800548c:	2301      	movs	r3, #1
 800548e:	f000 f814 	bl	80054ba <lis2mdl_read_reg>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
 8005498:	f04f 33ff 	mov.w	r3, #4294967295
 800549c:	e009      	b.n	80054b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
 800549e:	7efa      	ldrb	r2, [r7, #27]
 80054a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80054a4:	4013      	ands	r3, r2
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d1e6      	bne.n	800547e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>
 80054b0:	2300      	movs	r3, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	3730      	adds	r7, #48	@ 0x30
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <lis2mdl_read_reg>:
 80054ba:	b590      	push	{r4, r7, lr}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	461a      	mov	r2, r3
 80054c6:	460b      	mov	r3, r1
 80054c8:	72fb      	strb	r3, [r7, #11]
 80054ca:	4613      	mov	r3, r2
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <lis2mdl_read_reg+0x20>
 80054d4:	f04f 33ff 	mov.w	r3, #4294967295
 80054d8:	e009      	b.n	80054ee <lis2mdl_read_reg+0x34>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685c      	ldr	r4, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68d8      	ldr	r0, [r3, #12]
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	7af9      	ldrb	r1, [r7, #11]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	47a0      	blx	r4
 80054ea:	6178      	str	r0, [r7, #20]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd90      	pop	{r4, r7, pc}

080054f6 <lis2mdl_write_reg>:
 80054f6:	b590      	push	{r4, r7, lr}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	461a      	mov	r2, r3
 8005502:	460b      	mov	r3, r1
 8005504:	72fb      	strb	r3, [r7, #11]
 8005506:	4613      	mov	r3, r2
 8005508:	813b      	strh	r3, [r7, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <lis2mdl_write_reg+0x20>
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	e009      	b.n	800552a <lis2mdl_write_reg+0x34>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681c      	ldr	r4, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68d8      	ldr	r0, [r3, #12]
 800551e:	893b      	ldrh	r3, [r7, #8]
 8005520:	7af9      	ldrb	r1, [r7, #11]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	47a0      	blx	r4
 8005526:	6178      	str	r0, [r7, #20]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd90      	pop	{r4, r7, pc}

08005532 <lis2mdl_operating_mode_set>:
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	70fb      	strb	r3, [r7, #3]
 800553e:	f107 0208 	add.w	r2, r7, #8
 8005542:	2301      	movs	r3, #1
 8005544:	2160      	movs	r1, #96	@ 0x60
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ffb7 	bl	80054ba <lis2mdl_read_reg>
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <lis2mdl_operating_mode_set+0x42>
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	b2da      	uxtb	r2, r3
 800555c:	7a3b      	ldrb	r3, [r7, #8]
 800555e:	f362 0301 	bfi	r3, r2, #0, #2
 8005562:	723b      	strb	r3, [r7, #8]
 8005564:	f107 0208 	add.w	r2, r7, #8
 8005568:	2301      	movs	r3, #1
 800556a:	2160      	movs	r1, #96	@ 0x60
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ffc2 	bl	80054f6 <lis2mdl_write_reg>
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <lis2mdl_data_rate_set>:
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	70fb      	strb	r3, [r7, #3]
 800558a:	f107 0208 	add.w	r2, r7, #8
 800558e:	2301      	movs	r3, #1
 8005590:	2160      	movs	r1, #96	@ 0x60
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff91 	bl	80054ba <lis2mdl_read_reg>
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10f      	bne.n	80055c0 <lis2mdl_data_rate_set+0x42>
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	7a3b      	ldrb	r3, [r7, #8]
 80055aa:	f362 0383 	bfi	r3, r2, #2, #2
 80055ae:	723b      	strb	r3, [r7, #8]
 80055b0:	f107 0208 	add.w	r2, r7, #8
 80055b4:	2301      	movs	r3, #1
 80055b6:	2160      	movs	r1, #96	@ 0x60
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff9c 	bl	80054f6 <lis2mdl_write_reg>
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <lis2mdl_data_rate_get>:
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
 80055d6:	f107 0208 	add.w	r2, r7, #8
 80055da:	2301      	movs	r3, #1
 80055dc:	2160      	movs	r1, #96	@ 0x60
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ff6b 	bl	80054ba <lis2mdl_read_reg>
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	7a3b      	ldrb	r3, [r7, #8]
 80055e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d81a      	bhi.n	8005628 <lis2mdl_data_rate_get+0x5c>
 80055f2:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <lis2mdl_data_rate_get+0x2c>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	08005609 	.word	0x08005609
 80055fc:	08005611 	.word	0x08005611
 8005600:	08005619 	.word	0x08005619
 8005604:	08005621 	.word	0x08005621
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e00f      	b.n	8005630 <lis2mdl_data_rate_get+0x64>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e00b      	b.n	8005630 <lis2mdl_data_rate_get+0x64>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2202      	movs	r2, #2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e007      	b.n	8005630 <lis2mdl_data_rate_get+0x64>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2203      	movs	r2, #3
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e003      	b.n	8005630 <lis2mdl_data_rate_get+0x64>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	bf00      	nop
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop

0800563c <lis2mdl_block_data_update_set>:
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
 8005648:	f107 0208 	add.w	r2, r7, #8
 800564c:	2301      	movs	r3, #1
 800564e:	2162      	movs	r1, #98	@ 0x62
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff32 	bl	80054ba <lis2mdl_read_reg>
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <lis2mdl_block_data_update_set+0x42>
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	7a3b      	ldrb	r3, [r7, #8]
 8005668:	f362 1304 	bfi	r3, r2, #4, #1
 800566c:	723b      	strb	r3, [r7, #8]
 800566e:	f107 0208 	add.w	r2, r7, #8
 8005672:	2301      	movs	r3, #1
 8005674:	2162      	movs	r1, #98	@ 0x62
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff3d 	bl	80054f6 <lis2mdl_write_reg>
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <lis2mdl_magnetic_raw_get>:
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	f107 020c 	add.w	r2, r7, #12
 8005696:	2306      	movs	r3, #6
 8005698:	2168      	movs	r1, #104	@ 0x68
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff ff0d 	bl	80054ba <lis2mdl_read_reg>
 80056a0:	6178      	str	r0, [r7, #20]
 80056a2:	7b7b      	ldrb	r3, [r7, #13]
 80056a4:	b21a      	sxth	r2, r3
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	7b3a      	ldrb	r2, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b21a      	sxth	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	3302      	adds	r3, #2
 80056c8:	b212      	sxth	r2, r2
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	3302      	adds	r3, #2
 80056d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	b29b      	uxth	r3, r3
 80056da:	7bba      	ldrb	r2, [r7, #14]
 80056dc:	4413      	add	r3, r2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	3302      	adds	r3, #2
 80056e4:	b212      	sxth	r2, r2
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	7c7a      	ldrb	r2, [r7, #17]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	3304      	adds	r3, #4
 80056ee:	b212      	sxth	r2, r2
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	3304      	adds	r3, #4
 80056f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	b29b      	uxth	r3, r3
 8005700:	7c3a      	ldrb	r2, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	b29a      	uxth	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	3304      	adds	r3, #4
 800570a:	b212      	sxth	r2, r2
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <lis2mdl_device_id_get>:
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	2301      	movs	r3, #1
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	214f      	movs	r1, #79	@ 0x4f
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fec6 	bl	80054ba <lis2mdl_read_reg>
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <lis2mdl_self_test_set>:
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	2301      	movs	r3, #1
 800574c:	2162      	movs	r1, #98	@ 0x62
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff feb3 	bl	80054ba <lis2mdl_read_reg>
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <lis2mdl_self_test_set+0x42>
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	7a3b      	ldrb	r3, [r7, #8]
 8005766:	f362 0341 	bfi	r3, r2, #1, #1
 800576a:	723b      	strb	r3, [r7, #8]
 800576c:	f107 0208 	add.w	r2, r7, #8
 8005770:	2301      	movs	r3, #1
 8005772:	2162      	movs	r1, #98	@ 0x62
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff febe 	bl	80054f6 <lis2mdl_write_reg>
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <lis2mdl_i2c_interface_set>:
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	70fb      	strb	r3, [r7, #3]
 8005792:	f107 0208 	add.w	r2, r7, #8
 8005796:	2301      	movs	r3, #1
 8005798:	2162      	movs	r1, #98	@ 0x62
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fe8d 	bl	80054ba <lis2mdl_read_reg>
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10f      	bne.n	80057c8 <lis2mdl_i2c_interface_set+0x42>
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	7a3b      	ldrb	r3, [r7, #8]
 80057b2:	f362 1345 	bfi	r3, r2, #5, #1
 80057b6:	723b      	strb	r3, [r7, #8]
 80057b8:	f107 0208 	add.w	r2, r7, #8
 80057bc:	2301      	movs	r3, #1
 80057be:	2162      	movs	r1, #98	@ 0x62
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fe98 	bl	80054f6 <lis2mdl_write_reg>
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <LPS22DF_RegisterBusIO>:
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d103      	bne.n	80057f0 <LPS22DF_RegisterBusIO+0x1c>
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e051      	b.n	8005894 <LPS22DF_RegisterBusIO+0xc0>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	605a      	str	r2, [r3, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	7b1a      	ldrb	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	731a      	strb	r2, [r3, #12]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	611a      	str	r2, [r3, #16]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	615a      	str	r2, [r3, #20]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <LPS22DF_RegisterBusIO+0xcc>)
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <LPS22DF_RegisterBusIO+0xd0>)
 8005832:	621a      	str	r2, [r3, #32]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	629a      	str	r2, [r3, #40]	@ 0x28
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <LPS22DF_RegisterBusIO+0x7e>
 800584a:	f04f 33ff 	mov.w	r3, #4294967295
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e020      	b.n	8005894 <LPS22DF_RegisterBusIO+0xc0>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4798      	blx	r3
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <LPS22DF_RegisterBusIO+0x92>
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e016      	b.n	8005894 <LPS22DF_RegisterBusIO+0xc0>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d112      	bne.n	8005894 <LPS22DF_RegisterBusIO+0xc0>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <LPS22DF_RegisterBusIO+0xc0>
 8005878:	2320      	movs	r3, #32
 800587a:	72fb      	strb	r3, [r7, #11]
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	461a      	mov	r2, r3
 8005880:	210e      	movs	r1, #14
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9f3 	bl	8005c6e <LPS22DF_Write_Reg>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <LPS22DF_RegisterBusIO+0xc0>
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	08006011 	.word	0x08006011
 80058a4:	08006047 	.word	0x08006047

080058a8 <LPS22DF_Init>:
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d108      	bne.n	80058cc <LPS22DF_Init+0x24>
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fb4c 	bl	8005f58 <LPS22DF_Initialize>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <LPS22DF_Init+0x24>
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	e004      	b.n	80058d6 <LPS22DF_Init+0x2e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80058d4:	2300      	movs	r3, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <LPS22DF_DeInit>:
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d111      	bne.n	8005914 <LPS22DF_DeInit+0x36>
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f882 	bl	80059fa <LPS22DF_PRESS_Disable>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <LPS22DF_DeInit+0x24>
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	e00d      	b.n	800591e <LPS22DF_DeInit+0x40>
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f927 	bl	8005b56 <LPS22DF_TEMP_Disable>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <LPS22DF_DeInit+0x36>
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	e004      	b.n	800591e <LPS22DF_DeInit+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800591c:	2300      	movs	r3, #0
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <LPS22DF_ReadID>:
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3320      	adds	r3, #32
 8005934:	f107 020c 	add.w	r2, r7, #12
 8005938:	4611      	mov	r1, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc22 	bl	8006184 <lps22df_id_get>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <LPS22DF_ReadID+0x26>
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	e003      	b.n	8005954 <LPS22DF_ReadID+0x2e>
 800594c:	7b3a      	ldrb	r2, [r7, #12]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <LPS22DF_GetCapabilities>:
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	709a      	strb	r2, [r3, #2]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	705a      	strb	r2, [r3, #1]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	70da      	strb	r2, [r3, #3]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	711a      	strb	r2, [r3, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4a08      	ldr	r2, [pc, #32]	@ (80059b0 <LPS22DF_GetCapabilities+0x54>)
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	4a06      	ldr	r2, [pc, #24]	@ (80059b0 <LPS22DF_GetCapabilities+0x54>)
 8005996:	611a      	str	r2, [r3, #16]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
 80059a0:	2300      	movs	r3, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	43480000 	.word	0x43480000

080059b4 <LPS22DF_PRESS_Enable>:
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <LPS22DF_PRESS_Enable+0x16>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e013      	b.n	80059f2 <LPS22DF_PRESS_Enable+0x3e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f103 0220 	add.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3333      	adds	r3, #51	@ 0x33
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f000 fdb2 	bl	8006540 <lps22df_mode_set>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <LPS22DF_PRESS_Enable+0x34>
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	e004      	b.n	80059f2 <LPS22DF_PRESS_Enable+0x3e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80059f0:	2300      	movs	r3, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <LPS22DF_PRESS_Disable>:
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <LPS22DF_PRESS_Disable+0x16>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e030      	b.n	8005a72 <LPS22DF_PRESS_Disable+0x78>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d126      	bne.n	8005a68 <LPS22DF_PRESS_Disable+0x6e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3320      	adds	r3, #32
 8005a1e:	f107 020c 	add.w	r2, r7, #12
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fde9 	bl	80065fc <lps22df_mode_get>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <LPS22DF_PRESS_Disable+0x3c>
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	e01d      	b.n	8005a72 <LPS22DF_PRESS_Disable+0x78>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3333      	adds	r3, #51	@ 0x33
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f107 030c 	add.w	r3, r7, #12
 8005a40:	8819      	ldrh	r1, [r3, #0]
 8005a42:	789b      	ldrb	r3, [r3, #2]
 8005a44:	8011      	strh	r1, [r2, #0]
 8005a46:	7093      	strb	r3, [r2, #2]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	733b      	strb	r3, [r7, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3320      	adds	r3, #32
 8005a50:	f107 020c 	add.w	r2, r7, #12
 8005a54:	4611      	mov	r1, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fd72 	bl	8006540 <lps22df_mode_set>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <LPS22DF_PRESS_Disable+0x6e>
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295
 8005a66:	e004      	b.n	8005a72 <LPS22DF_PRESS_Disable+0x78>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8005a70:	2300      	movs	r3, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <LPS22DF_PRESS_GetOutputDataRate>:
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f90c 	bl	8005ca4 <LPS22DF_GetOutputDataRate>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <LPS22DF_PRESS_SetOutputDataRate>:
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	ed87 0a00 	vstr	s0, [r7]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d106      	bne.n	8005aba <LPS22DF_PRESS_SetOutputDataRate+0x24>
 8005aac:	ed97 0a00 	vldr	s0, [r7]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f961 	bl	8005d78 <LPS22DF_SetOutputDataRate_When_Enabled>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	e005      	b.n	8005ac6 <LPS22DF_PRESS_SetOutputDataRate+0x30>
 8005aba:	ed97 0a00 	vldr	s0, [r7]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9e6 	bl	8005e90 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <LPS22DF_PRESS_GetPressure>:
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3320      	adds	r3, #32
 8005adc:	f107 020c 	add.w	r2, r7, #12
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fe56 	bl	8006794 <lps22df_pressure_raw_get>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <LPS22DF_PRESS_GetPressure+0x26>
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295
 8005af2:	e009      	b.n	8005b08 <LPS22DF_PRESS_GetPressure+0x3a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fb12 	bl	8006120 <lps22df_from_lsb_to_hPa>
 8005afc:	eef0 7a40 	vmov.f32	s15, s0
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	edc3 7a00 	vstr	s15, [r3]
 8005b06:	2300      	movs	r3, #0
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <LPS22DF_TEMP_Enable>:
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <LPS22DF_TEMP_Enable+0x16>
 8005b22:	2300      	movs	r3, #0
 8005b24:	e013      	b.n	8005b4e <LPS22DF_TEMP_Enable+0x3e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f103 0220 	add.w	r2, r3, #32
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3333      	adds	r3, #51	@ 0x33
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f000 fd04 	bl	8006540 <lps22df_mode_set>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <LPS22DF_TEMP_Enable+0x34>
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	e004      	b.n	8005b4e <LPS22DF_TEMP_Enable+0x3e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <LPS22DF_TEMP_Disable>:
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <LPS22DF_TEMP_Disable+0x16>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e030      	b.n	8005bce <LPS22DF_TEMP_Disable+0x78>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d126      	bne.n	8005bc4 <LPS22DF_TEMP_Disable+0x6e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3320      	adds	r3, #32
 8005b7a:	f107 020c 	add.w	r2, r7, #12
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fd3b 	bl	80065fc <lps22df_mode_get>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <LPS22DF_TEMP_Disable+0x3c>
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	e01d      	b.n	8005bce <LPS22DF_TEMP_Disable+0x78>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3333      	adds	r3, #51	@ 0x33
 8005b96:	461a      	mov	r2, r3
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	8819      	ldrh	r1, [r3, #0]
 8005b9e:	789b      	ldrb	r3, [r3, #2]
 8005ba0:	8011      	strh	r1, [r2, #0]
 8005ba2:	7093      	strb	r3, [r2, #2]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	733b      	strb	r3, [r7, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3320      	adds	r3, #32
 8005bac:	f107 020c 	add.w	r2, r7, #12
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fcc4 	bl	8006540 <lps22df_mode_set>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <LPS22DF_TEMP_Disable+0x6e>
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	e004      	b.n	8005bce <LPS22DF_TEMP_Disable+0x78>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <LPS22DF_TEMP_GetOutputDataRate>:
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f85e 	bl	8005ca4 <LPS22DF_GetOutputDataRate>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <LPS22DF_TEMP_SetOutputDataRate>:
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	ed87 0a00 	vstr	s0, [r7]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d106      	bne.n	8005c16 <LPS22DF_TEMP_SetOutputDataRate+0x24>
 8005c08:	ed97 0a00 	vldr	s0, [r7]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8b3 	bl	8005d78 <LPS22DF_SetOutputDataRate_When_Enabled>
 8005c12:	4603      	mov	r3, r0
 8005c14:	e005      	b.n	8005c22 <LPS22DF_TEMP_SetOutputDataRate+0x30>
 8005c16:	ed97 0a00 	vldr	s0, [r7]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f938 	bl	8005e90 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <LPS22DF_TEMP_GetTemperature>:
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3320      	adds	r3, #32
 8005c38:	f107 020e 	add.w	r2, r7, #14
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fdd1 	bl	80067e6 <lps22df_temperature_raw_get>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <LPS22DF_TEMP_GetTemperature+0x26>
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	e00a      	b.n	8005c66 <LPS22DF_TEMP_GetTemperature+0x3c>
 8005c50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fa7b 	bl	8006150 <lps22df_from_lsb_to_celsius>
 8005c5a:	eef0 7a40 	vmov.f32	s15, s0
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	edc3 7a00 	vstr	s15, [r3]
 8005c64:	2300      	movs	r3, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <LPS22DF_Write_Reg>:
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	70bb      	strb	r3, [r7, #2]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f103 0020 	add.w	r0, r3, #32
 8005c84:	1cba      	adds	r2, r7, #2
 8005c86:	78f9      	ldrb	r1, [r7, #3]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f000 fa15 	bl	80060b8 <lps22df_write_reg>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <LPS22DF_Write_Reg+0x2c>
 8005c94:	f04f 33ff 	mov.w	r3, #4294967295
 8005c98:	e000      	b.n	8005c9c <LPS22DF_Write_Reg+0x2e>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <LPS22DF_GetOutputDataRate>:
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3320      	adds	r3, #32
 8005cb6:	f107 0208 	add.w	r2, r7, #8
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fc9d 	bl	80065fc <lps22df_mode_get>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <LPS22DF_GetOutputDataRate+0x2a>
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	e044      	b.n	8005d58 <LPS22DF_GetOutputDataRate+0xb4>
 8005cce:	7a3b      	ldrb	r3, [r7, #8]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d83c      	bhi.n	8005d4e <LPS22DF_GetOutputDataRate+0xaa>
 8005cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <LPS22DF_GetOutputDataRate+0x38>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d15 	.word	0x08005d15
 8005ce8:	08005d1f 	.word	0x08005d1f
 8005cec:	08005d27 	.word	0x08005d27
 8005cf0:	08005d2f 	.word	0x08005d2f
 8005cf4:	08005d37 	.word	0x08005d37
 8005cf8:	08005d3f 	.word	0x08005d3f
 8005cfc:	08005d47 	.word	0x08005d47
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	e025      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e020      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e01b      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	4a0f      	ldr	r2, [pc, #60]	@ (8005d60 <LPS22DF_GetOutputDataRate+0xbc>)
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e017      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	4a0e      	ldr	r2, [pc, #56]	@ (8005d64 <LPS22DF_GetOutputDataRate+0xc0>)
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e013      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4a0d      	ldr	r2, [pc, #52]	@ (8005d68 <LPS22DF_GetOutputDataRate+0xc4>)
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e00f      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	4a0c      	ldr	r2, [pc, #48]	@ (8005d6c <LPS22DF_GetOutputDataRate+0xc8>)
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e00b      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	4a0b      	ldr	r2, [pc, #44]	@ (8005d70 <LPS22DF_GetOutputDataRate+0xcc>)
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e007      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	4a0a      	ldr	r2, [pc, #40]	@ (8005d74 <LPS22DF_GetOutputDataRate+0xd0>)
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e003      	b.n	8005d56 <LPS22DF_GetOutputDataRate+0xb2>
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	bf00      	nop
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	41200000 	.word	0x41200000
 8005d64:	41c80000 	.word	0x41c80000
 8005d68:	42480000 	.word	0x42480000
 8005d6c:	42960000 	.word	0x42960000
 8005d70:	42c80000 	.word	0x42c80000
 8005d74:	43480000 	.word	0x43480000

08005d78 <LPS22DF_SetOutputDataRate_When_Enabled>:
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	ed87 0a00 	vstr	s0, [r7]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3320      	adds	r3, #32
 8005d88:	f107 020c 	add.w	r2, r7, #12
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fc34 	bl	80065fc <lps22df_mode_get>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9e:	e06c      	b.n	8005e7a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
 8005da0:	edd7 7a00 	vldr	s15, [r7]
 8005da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	d801      	bhi.n	8005db6 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e042      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005db6:	edd7 7a00 	vldr	s15, [r7]
 8005dba:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	d801      	bhi.n	8005dcc <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e037      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005dcc:	edd7 7a00 	vldr	s15, [r7]
 8005dd0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ddc:	d801      	bhi.n	8005de2 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8005dde:	2303      	movs	r3, #3
 8005de0:	e02c      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005de2:	edd7 7a00 	vldr	s15, [r7]
 8005de6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	d801      	bhi.n	8005df8 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8005df4:	2304      	movs	r3, #4
 8005df6:	e021      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005df8:	edd7 7a00 	vldr	s15, [r7]
 8005dfc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005e84 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8005e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e08:	d801      	bhi.n	8005e0e <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8005e0a:	2305      	movs	r3, #5
 8005e0c:	e016      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005e0e:	edd7 7a00 	vldr	s15, [r7]
 8005e12:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005e88 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8005e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	d801      	bhi.n	8005e24 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8005e20:	2306      	movs	r3, #6
 8005e22:	e00b      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005e24:	edd7 7a00 	vldr	s15, [r7]
 8005e28:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005e8c <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8005e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	d801      	bhi.n	8005e3a <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8005e36:	2307      	movs	r3, #7
 8005e38:	e000      	b.n	8005e3c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	733b      	strb	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3320      	adds	r3, #32
 8005e42:	f107 020c 	add.w	r2, r7, #12
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fb79 	bl	8006540 <lps22df_mode_set>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295
 8005e58:	e00f      	b.n	8005e7a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f103 0220 	add.w	r2, r3, #32
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3333      	adds	r3, #51	@ 0x33
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f000 fbc8 	bl	80065fc <lps22df_mode_get>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	e000      	b.n	8005e7a <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	42480000 	.word	0x42480000
 8005e88:	42960000 	.word	0x42960000
 8005e8c:	42c80000 	.word	0x42c80000

08005e90 <LPS22DF_SetOutputDataRate_When_Disabled>:
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	ed87 0a00 	vstr	s0, [r7]
 8005e9c:	edd7 7a00 	vldr	s15, [r7]
 8005ea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	d801      	bhi.n	8005eb2 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e042      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005eb2:	edd7 7a00 	vldr	s15, [r7]
 8005eb6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec2:	d801      	bhi.n	8005ec8 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e037      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005ec8:	edd7 7a00 	vldr	s15, [r7]
 8005ecc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed8:	d801      	bhi.n	8005ede <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8005eda:	2303      	movs	r3, #3
 8005edc:	e02c      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005ede:	edd7 7a00 	vldr	s15, [r7]
 8005ee2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	d801      	bhi.n	8005ef4 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	e021      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005ef4:	edd7 7a00 	vldr	s15, [r7]
 8005ef8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005f4c <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8005efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f04:	d801      	bhi.n	8005f0a <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8005f06:	2305      	movs	r3, #5
 8005f08:	e016      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005f0a:	edd7 7a00 	vldr	s15, [r7]
 8005f0e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005f50 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8005f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1a:	d801      	bhi.n	8005f20 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8005f1c:	2306      	movs	r3, #6
 8005f1e:	e00b      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005f20:	edd7 7a00 	vldr	s15, [r7]
 8005f24:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005f54 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f30:	d801      	bhi.n	8005f36 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8005f32:	2307      	movs	r3, #7
 8005f34:	e000      	b.n	8005f38 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005f36:	2308      	movs	r3, #8
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	42480000 	.word	0x42480000
 8005f50:	42960000 	.word	0x42960000
 8005f54:	42c80000 	.word	0x42c80000

08005f58 <LPS22DF_Initialize>:
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3320      	adds	r3, #32
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f983 	bl	8006272 <lps22df_init_set>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <LPS22DF_Initialize+0x20>
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	e047      	b.n	8006008 <LPS22DF_Initialize+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d102      	bne.n	8005f86 <LPS22DF_Initialize+0x2e>
 8005f80:	2303      	movs	r3, #3
 8005f82:	723b      	strb	r3, [r7, #8]
 8005f84:	e008      	b.n	8005f98 <LPS22DF_Initialize+0x40>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d102      	bne.n	8005f94 <LPS22DF_Initialize+0x3c>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	723b      	strb	r3, [r7, #8]
 8005f92:	e001      	b.n	8005f98 <LPS22DF_Initialize+0x40>
 8005f94:	2300      	movs	r3, #0
 8005f96:	723b      	strb	r3, [r7, #8]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	727b      	strb	r3, [r7, #9]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3320      	adds	r3, #32
 8005fa0:	f107 0208 	add.w	r2, r7, #8
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f901 	bl	80061ae <lps22df_bus_mode_set>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <LPS22DF_Initialize+0x60>
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb6:	e027      	b.n	8006008 <LPS22DF_Initialize+0xb0>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	733b      	strb	r3, [r7, #12]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	737b      	strb	r3, [r7, #13]
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73bb      	strb	r3, [r7, #14]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3320      	adds	r3, #32
 8005fc8:	f107 020c 	add.w	r2, r7, #12
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fab6 	bl	8006540 <lps22df_mode_set>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <LPS22DF_Initialize+0x88>
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295
 8005fde:	e013      	b.n	8006008 <LPS22DF_Initialize+0xb0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f103 0220 	add.w	r2, r3, #32
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3333      	adds	r3, #51	@ 0x33
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f000 fb05 	bl	80065fc <lps22df_mode_get>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <LPS22DF_Initialize+0xa6>
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffc:	e004      	b.n	8006008 <LPS22DF_Initialize+0xb0>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2204      	movs	r2, #4
 8006002:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8006006:	2300      	movs	r3, #0
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <ReadRegWrap>:
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	461a      	mov	r2, r3
 800601c:	460b      	mov	r3, r1
 800601e:	72fb      	strb	r3, [r7, #11]
 8006020:	4613      	mov	r3, r2
 8006022:	813b      	strh	r3, [r7, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	695c      	ldr	r4, [r3, #20]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	7b1b      	ldrb	r3, [r3, #12]
 8006030:	4618      	mov	r0, r3
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	b299      	uxth	r1, r3
 8006036:	893b      	ldrh	r3, [r7, #8]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	47a0      	blx	r4
 800603c:	4603      	mov	r3, r0
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd90      	pop	{r4, r7, pc}

08006046 <WriteRegWrap>:
 8006046:	b590      	push	{r4, r7, lr}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	461a      	mov	r2, r3
 8006052:	460b      	mov	r3, r1
 8006054:	72fb      	strb	r3, [r7, #11]
 8006056:	4613      	mov	r3, r2
 8006058:	813b      	strh	r3, [r7, #8]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	691c      	ldr	r4, [r3, #16]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	7b1b      	ldrb	r3, [r3, #12]
 8006066:	4618      	mov	r0, r3
 8006068:	7afb      	ldrb	r3, [r7, #11]
 800606a:	b299      	uxth	r1, r3
 800606c:	893b      	ldrh	r3, [r7, #8]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	47a0      	blx	r4
 8006072:	4603      	mov	r3, r0
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	bd90      	pop	{r4, r7, pc}

0800607c <lps22df_read_reg>:
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	461a      	mov	r2, r3
 8006088:	460b      	mov	r3, r1
 800608a:	72fb      	strb	r3, [r7, #11]
 800608c:	4613      	mov	r3, r2
 800608e:	813b      	strh	r3, [r7, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d102      	bne.n	800609c <lps22df_read_reg+0x20>
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	e009      	b.n	80060b0 <lps22df_read_reg+0x34>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685c      	ldr	r4, [r3, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68d8      	ldr	r0, [r3, #12]
 80060a4:	893b      	ldrh	r3, [r7, #8]
 80060a6:	7af9      	ldrb	r1, [r7, #11]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	47a0      	blx	r4
 80060ac:	6178      	str	r0, [r7, #20]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4618      	mov	r0, r3
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd90      	pop	{r4, r7, pc}

080060b8 <lps22df_write_reg>:
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	461a      	mov	r2, r3
 80060c4:	460b      	mov	r3, r1
 80060c6:	72fb      	strb	r3, [r7, #11]
 80060c8:	4613      	mov	r3, r2
 80060ca:	813b      	strh	r3, [r7, #8]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <lps22df_write_reg+0x20>
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	e009      	b.n	80060ec <lps22df_write_reg+0x34>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681c      	ldr	r4, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68d8      	ldr	r0, [r3, #12]
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	7af9      	ldrb	r1, [r7, #11]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	47a0      	blx	r4
 80060e8:	6178      	str	r0, [r7, #20]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	4618      	mov	r0, r3
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd90      	pop	{r4, r7, pc}

080060f4 <bytecpy>:
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <bytecpy+0x1e>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <bytecpy+0x1e>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <lps22df_from_lsb_to_hPa>:
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006132:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800614c <lps22df_from_lsb_to_hPa+0x2c>
 8006136:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800613a:	eef0 7a66 	vmov.f32	s15, s13
 800613e:	eeb0 0a67 	vmov.f32	s0, s15
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	49800000 	.word	0x49800000

08006150 <lps22df_from_lsb_to_celsius>:
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	80fb      	strh	r3, [r7, #6]
 800615a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006166:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8006180 <lps22df_from_lsb_to_celsius+0x30>
 800616a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800616e:	eef0 7a66 	vmov.f32	s15, s13
 8006172:	eeb0 0a67 	vmov.f32	s0, s15
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	42c80000 	.word	0x42c80000

08006184 <lps22df_id_get>:
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
 800618e:	f107 020b 	add.w	r2, r7, #11
 8006192:	2301      	movs	r3, #1
 8006194:	210f      	movs	r1, #15
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff ff70 	bl	800607c <lps22df_read_reg>
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	7afa      	ldrb	r2, [r7, #11]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <lps22df_bus_mode_set>:
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
 80061b8:	f107 020c 	add.w	r2, r7, #12
 80061bc:	2301      	movs	r3, #1
 80061be:	210e      	movs	r1, #14
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff5b 	bl	800607c <lps22df_read_reg>
 80061c6:	6178      	str	r0, [r7, #20]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d124      	bne.n	8006218 <lps22df_bus_mode_set+0x6a>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	7b3b      	ldrb	r3, [r7, #12]
 80061dc:	f362 1386 	bfi	r3, r2, #6, #1
 80061e0:	733b      	strb	r3, [r7, #12]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	7b3b      	ldrb	r3, [r7, #12]
 80061f0:	f362 13c7 	bfi	r3, r2, #7, #1
 80061f4:	733b      	strb	r3, [r7, #12]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	7b3b      	ldrb	r3, [r7, #12]
 8006202:	f362 1345 	bfi	r3, r2, #5, #1
 8006206:	733b      	strb	r3, [r7, #12]
 8006208:	f107 020c 	add.w	r2, r7, #12
 800620c:	2301      	movs	r3, #1
 800620e:	210e      	movs	r1, #14
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff51 	bl	80060b8 <lps22df_write_reg>
 8006216:	6178      	str	r0, [r7, #20]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d107      	bne.n	800622e <lps22df_bus_mode_set+0x80>
 800621e:	f107 0210 	add.w	r2, r7, #16
 8006222:	2301      	movs	r3, #1
 8006224:	2119      	movs	r1, #25
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ff28 	bl	800607c <lps22df_read_reg>
 800622c:	6178      	str	r0, [r7, #20]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d119      	bne.n	8006268 <lps22df_bus_mode_set+0xba>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	b2da      	uxtb	r2, r3
 800623e:	7c3b      	ldrb	r3, [r7, #16]
 8006240:	f362 1345 	bfi	r3, r2, #5, #1
 8006244:	743b      	strb	r3, [r7, #16]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	789b      	ldrb	r3, [r3, #2]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	b2da      	uxtb	r2, r3
 8006250:	7c3b      	ldrb	r3, [r7, #16]
 8006252:	f362 0301 	bfi	r3, r2, #0, #2
 8006256:	743b      	strb	r3, [r7, #16]
 8006258:	f107 0210 	add.w	r2, r7, #16
 800625c:	2301      	movs	r3, #1
 800625e:	2119      	movs	r1, #25
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff29 	bl	80060b8 <lps22df_write_reg>
 8006266:	6178      	str	r0, [r7, #20]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <lps22df_init_set>:
 8006272:	b580      	push	{r7, lr}
 8006274:	b08a      	sub	sp, #40	@ 0x28
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006284:	f107 020c 	add.w	r2, r7, #12
 8006288:	2302      	movs	r3, #2
 800628a:	2111      	movs	r1, #17
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fef5 	bl	800607c <lps22df_read_reg>
 8006292:	6238      	str	r0, [r7, #32]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 80c8 	bne.w	800642c <lps22df_init_set+0x1ba>
 800629c:	f107 020c 	add.w	r2, r7, #12
 80062a0:	f107 031c 	add.w	r3, r7, #28
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff ff24 	bl	80060f4 <bytecpy>
 80062ac:	f107 030c 	add.w	r3, r7, #12
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	f107 0318 	add.w	r3, r7, #24
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff ff1b 	bl	80060f4 <bytecpy>
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d043      	beq.n	800634c <lps22df_init_set+0xda>
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	f300 809d 	bgt.w	8006404 <lps22df_init_set+0x192>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d078      	beq.n	80063c0 <lps22df_init_set+0x14e>
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	f040 8098 	bne.w	8006404 <lps22df_init_set+0x192>
 80062d4:	7f3b      	ldrb	r3, [r7, #28]
 80062d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062da:	773b      	strb	r3, [r7, #28]
 80062dc:	f107 021c 	add.w	r2, r7, #28
 80062e0:	2301      	movs	r3, #1
 80062e2:	2111      	movs	r1, #17
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fee7 	bl	80060b8 <lps22df_write_reg>
 80062ea:	6238      	str	r0, [r7, #32]
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 8095 	bne.w	800641e <lps22df_init_set+0x1ac>
 80062f4:	f107 0214 	add.w	r2, r7, #20
 80062f8:	2301      	movs	r3, #1
 80062fa:	2124      	movs	r1, #36	@ 0x24
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff febd 	bl	800607c <lps22df_read_reg>
 8006302:	6238      	str	r0, [r7, #32]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d115      	bne.n	8006336 <lps22df_init_set+0xc4>
 800630a:	7d3b      	ldrb	r3, [r7, #20]
 800630c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d011      	beq.n	800633a <lps22df_init_set+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <lps22df_init_set+0xb4>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	200a      	movs	r0, #10
 8006324:	4798      	blx	r3
 8006326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8006330:	2b04      	cmp	r3, #4
 8006332:	d9df      	bls.n	80062f4 <lps22df_init_set+0x82>
 8006334:	e002      	b.n	800633c <lps22df_init_set+0xca>
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <lps22df_init_set+0xca>
 800633a:	bf00      	nop
 800633c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006340:	2b04      	cmp	r3, #4
 8006342:	d96e      	bls.n	8006422 <lps22df_init_set+0x1b0>
 8006344:	f04f 33ff 	mov.w	r3, #4294967295
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	e06a      	b.n	8006422 <lps22df_init_set+0x1b0>
 800634c:	7f3b      	ldrb	r3, [r7, #28]
 800634e:	f043 0304 	orr.w	r3, r3, #4
 8006352:	773b      	strb	r3, [r7, #28]
 8006354:	f107 021c 	add.w	r2, r7, #28
 8006358:	2301      	movs	r3, #1
 800635a:	2111      	movs	r1, #17
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff feab 	bl	80060b8 <lps22df_write_reg>
 8006362:	6238      	str	r0, [r7, #32]
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d15d      	bne.n	8006426 <lps22df_init_set+0x1b4>
 800636a:	f107 0310 	add.w	r3, r7, #16
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f860 	bl	8006436 <lps22df_status_get>
 8006376:	6238      	str	r0, [r7, #32]
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d115      	bne.n	80063aa <lps22df_init_set+0x138>
 800637e:	7c3b      	ldrb	r3, [r7, #16]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d011      	beq.n	80063ae <lps22df_init_set+0x13c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <lps22df_init_set+0x128>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2001      	movs	r0, #1
 8006398:	4798      	blx	r3
 800639a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d9e0      	bls.n	800636a <lps22df_init_set+0xf8>
 80063a8:	e002      	b.n	80063b0 <lps22df_init_set+0x13e>
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <lps22df_init_set+0x13e>
 80063ae:	bf00      	nop
 80063b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d938      	bls.n	800642a <lps22df_init_set+0x1b8>
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	e034      	b.n	800642a <lps22df_init_set+0x1b8>
 80063c0:	7f3b      	ldrb	r3, [r7, #28]
 80063c2:	f043 0308 	orr.w	r3, r3, #8
 80063c6:	773b      	strb	r3, [r7, #28]
 80063c8:	7e3b      	ldrb	r3, [r7, #24]
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	763b      	strb	r3, [r7, #24]
 80063d0:	f107 021c 	add.w	r2, r7, #28
 80063d4:	f107 030c 	add.w	r3, r7, #12
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fe8a 	bl	80060f4 <bytecpy>
 80063e0:	f107 0218 	add.w	r2, r7, #24
 80063e4:	f107 030c 	add.w	r3, r7, #12
 80063e8:	3301      	adds	r3, #1
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fe81 	bl	80060f4 <bytecpy>
 80063f2:	f107 020c 	add.w	r2, r7, #12
 80063f6:	2302      	movs	r3, #2
 80063f8:	2111      	movs	r1, #17
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff fe5c 	bl	80060b8 <lps22df_write_reg>
 8006400:	6238      	str	r0, [r7, #32]
 8006402:	e013      	b.n	800642c <lps22df_init_set+0x1ba>
 8006404:	7f3b      	ldrb	r3, [r7, #28]
 8006406:	f043 0304 	orr.w	r3, r3, #4
 800640a:	773b      	strb	r3, [r7, #28]
 800640c:	f107 021c 	add.w	r2, r7, #28
 8006410:	2301      	movs	r3, #1
 8006412:	2111      	movs	r1, #17
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fe4f 	bl	80060b8 <lps22df_write_reg>
 800641a:	6238      	str	r0, [r7, #32]
 800641c:	e006      	b.n	800642c <lps22df_init_set+0x1ba>
 800641e:	bf00      	nop
 8006420:	e004      	b.n	800642c <lps22df_init_set+0x1ba>
 8006422:	bf00      	nop
 8006424:	e002      	b.n	800642c <lps22df_init_set+0x1ba>
 8006426:	bf00      	nop
 8006428:	e000      	b.n	800642c <lps22df_init_set+0x1ba>
 800642a:	bf00      	nop
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	4618      	mov	r0, r3
 8006430:	3728      	adds	r7, #40	@ 0x28
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <lps22df_status_get>:
 8006436:	b580      	push	{r7, lr}
 8006438:	b088      	sub	sp, #32
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
 8006440:	f107 0210 	add.w	r2, r7, #16
 8006444:	2301      	movs	r3, #1
 8006446:	2111      	movs	r1, #17
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fe17 	bl	800607c <lps22df_read_reg>
 800644e:	61f8      	str	r0, [r7, #28]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <lps22df_status_get+0x30>
 8006456:	f107 0214 	add.w	r2, r7, #20
 800645a:	2301      	movs	r3, #1
 800645c:	2124      	movs	r1, #36	@ 0x24
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fe0c 	bl	800607c <lps22df_read_reg>
 8006464:	61f8      	str	r0, [r7, #28]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d107      	bne.n	800647c <lps22df_status_get+0x46>
 800646c:	f107 020c 	add.w	r2, r7, #12
 8006470:	2301      	movs	r3, #1
 8006472:	2127      	movs	r1, #39	@ 0x27
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fe01 	bl	800607c <lps22df_read_reg>
 800647a:	61f8      	str	r0, [r7, #28]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <lps22df_status_get+0x5c>
 8006482:	f107 0218 	add.w	r2, r7, #24
 8006486:	2301      	movs	r3, #1
 8006488:	210b      	movs	r1, #11
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fdf6 	bl	800607c <lps22df_read_reg>
 8006490:	61f8      	str	r0, [r7, #28]
 8006492:	7c3b      	ldrb	r3, [r7, #16]
 8006494:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006498:	b2d9      	uxtb	r1, r3
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	7813      	ldrb	r3, [r2, #0]
 800649e:	f361 0300 	bfi	r3, r1, #0, #1
 80064a2:	7013      	strb	r3, [r2, #0]
 80064a4:	7d3b      	ldrb	r3, [r7, #20]
 80064a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80064aa:	b2d9      	uxtb	r1, r3
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	7813      	ldrb	r3, [r2, #0]
 80064b0:	f361 0341 	bfi	r3, r1, #1, #1
 80064b4:	7013      	strb	r3, [r2, #0]
 80064b6:	7b3b      	ldrb	r3, [r7, #12]
 80064b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064bc:	b2d9      	uxtb	r1, r3
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	7813      	ldrb	r3, [r2, #0]
 80064c2:	f361 0382 	bfi	r3, r1, #2, #1
 80064c6:	7013      	strb	r3, [r2, #0]
 80064c8:	7b3b      	ldrb	r3, [r7, #12]
 80064ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80064ce:	b2d9      	uxtb	r1, r3
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	7813      	ldrb	r3, [r2, #0]
 80064d4:	f361 03c3 	bfi	r3, r1, #3, #1
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	7b3b      	ldrb	r3, [r7, #12]
 80064dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80064e0:	b2d9      	uxtb	r1, r3
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	7813      	ldrb	r3, [r2, #0]
 80064e6:	f361 1304 	bfi	r3, r1, #4, #1
 80064ea:	7013      	strb	r3, [r2, #0]
 80064ec:	7b3b      	ldrb	r3, [r7, #12]
 80064ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064f2:	b2d9      	uxtb	r1, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	7813      	ldrb	r3, [r2, #0]
 80064f8:	f361 1345 	bfi	r3, r1, #5, #1
 80064fc:	7013      	strb	r3, [r2, #0]
 80064fe:	7c3b      	ldrb	r3, [r7, #16]
 8006500:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	b2d9      	uxtb	r1, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	7813      	ldrb	r3, [r2, #0]
 8006514:	f361 1386 	bfi	r3, r1, #6, #1
 8006518:	7013      	strb	r3, [r2, #0]
 800651a:	7e3b      	ldrb	r3, [r7, #24]
 800651c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	b2d9      	uxtb	r1, r3
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	7813      	ldrb	r3, [r2, #0]
 8006530:	f361 13c7 	bfi	r3, r1, #7, #1
 8006534:	7013      	strb	r3, [r2, #0]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4618      	mov	r0, r3
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <lps22df_mode_set>:
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
 800654a:	f107 0208 	add.w	r2, r7, #8
 800654e:	2302      	movs	r3, #2
 8006550:	2110      	movs	r1, #16
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fd92 	bl	800607c <lps22df_read_reg>
 8006558:	6178      	str	r0, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d148      	bne.n	80065f2 <lps22df_mode_set+0xb2>
 8006560:	f107 0208 	add.w	r2, r7, #8
 8006564:	f107 0310 	add.w	r3, r7, #16
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fdc2 	bl	80060f4 <bytecpy>
 8006570:	f107 0308 	add.w	r3, r7, #8
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	f107 030c 	add.w	r3, r7, #12
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fdb9 	bl	80060f4 <bytecpy>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	b2da      	uxtb	r2, r3
 800658c:	7c3b      	ldrb	r3, [r7, #16]
 800658e:	f362 03c6 	bfi	r3, r2, #3, #4
 8006592:	743b      	strb	r3, [r7, #16]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	b2da      	uxtb	r2, r3
 800659e:	7c3b      	ldrb	r3, [r7, #16]
 80065a0:	f362 0302 	bfi	r3, r2, #0, #3
 80065a4:	743b      	strb	r3, [r7, #16]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	789b      	ldrb	r3, [r3, #2]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	7b3b      	ldrb	r3, [r7, #12]
 80065b2:	f362 1304 	bfi	r3, r2, #4, #1
 80065b6:	733b      	strb	r3, [r7, #12]
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	f023 0320 	bic.w	r3, r3, #32
 80065be:	733b      	strb	r3, [r7, #12]
 80065c0:	f107 0210 	add.w	r2, r7, #16
 80065c4:	f107 0308 	add.w	r3, r7, #8
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fd92 	bl	80060f4 <bytecpy>
 80065d0:	f107 020c 	add.w	r2, r7, #12
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	3301      	adds	r3, #1
 80065da:	4611      	mov	r1, r2
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fd89 	bl	80060f4 <bytecpy>
 80065e2:	f107 0208 	add.w	r2, r7, #8
 80065e6:	2302      	movs	r3, #2
 80065e8:	2110      	movs	r1, #16
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fd64 	bl	80060b8 <lps22df_write_reg>
 80065f0:	6178      	str	r0, [r7, #20]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <lps22df_mode_get>:
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	f107 0208 	add.w	r2, r7, #8
 800660a:	2302      	movs	r3, #2
 800660c:	2110      	movs	r1, #16
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fd34 	bl	800607c <lps22df_read_reg>
 8006614:	6178      	str	r0, [r7, #20]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 80b6 	bne.w	800678a <lps22df_mode_get+0x18e>
 800661e:	f107 0208 	add.w	r2, r7, #8
 8006622:	f107 0310 	add.w	r3, r7, #16
 8006626:	4611      	mov	r1, r2
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff fd63 	bl	80060f4 <bytecpy>
 800662e:	f107 0308 	add.w	r3, r7, #8
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	f107 030c 	add.w	r3, r7, #12
 8006638:	4611      	mov	r1, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fd5a 	bl	80060f4 <bytecpy>
 8006640:	7c3b      	ldrb	r3, [r7, #16]
 8006642:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b08      	cmp	r3, #8
 800664a:	d839      	bhi.n	80066c0 <lps22df_mode_get+0xc4>
 800664c:	a201      	add	r2, pc, #4	@ (adr r2, 8006654 <lps22df_mode_get+0x58>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	08006691 	.word	0x08006691
 8006664:	08006699 	.word	0x08006699
 8006668:	080066a1 	.word	0x080066a1
 800666c:	080066a9 	.word	0x080066a9
 8006670:	080066b1 	.word	0x080066b1
 8006674:	080066b9 	.word	0x080066b9
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e023      	b.n	80066c8 <lps22df_mode_get+0xcc>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e01f      	b.n	80066c8 <lps22df_mode_get+0xcc>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e01b      	b.n	80066c8 <lps22df_mode_get+0xcc>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2203      	movs	r2, #3
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e017      	b.n	80066c8 <lps22df_mode_get+0xcc>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2204      	movs	r2, #4
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e013      	b.n	80066c8 <lps22df_mode_get+0xcc>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2205      	movs	r2, #5
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e00f      	b.n	80066c8 <lps22df_mode_get+0xcc>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2206      	movs	r2, #6
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e00b      	b.n	80066c8 <lps22df_mode_get+0xcc>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2207      	movs	r2, #7
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e007      	b.n	80066c8 <lps22df_mode_get+0xcc>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2208      	movs	r2, #8
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e003      	b.n	80066c8 <lps22df_mode_get+0xcc>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	bf00      	nop
 80066c8:	7c3b      	ldrb	r3, [r7, #16]
 80066ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	d833      	bhi.n	800673c <lps22df_mode_get+0x140>
 80066d4:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <lps22df_mode_get+0xe0>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	080066fd 	.word	0x080066fd
 80066e0:	08006705 	.word	0x08006705
 80066e4:	0800670d 	.word	0x0800670d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	08006725 	.word	0x08006725
 80066f4:	0800672d 	.word	0x0800672d
 80066f8:	08006735 	.word	0x08006735
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	705a      	strb	r2, [r3, #1]
 8006702:	e01f      	b.n	8006744 <lps22df_mode_get+0x148>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	705a      	strb	r2, [r3, #1]
 800670a:	e01b      	b.n	8006744 <lps22df_mode_get+0x148>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2202      	movs	r2, #2
 8006710:	705a      	strb	r2, [r3, #1]
 8006712:	e017      	b.n	8006744 <lps22df_mode_get+0x148>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2203      	movs	r2, #3
 8006718:	705a      	strb	r2, [r3, #1]
 800671a:	e013      	b.n	8006744 <lps22df_mode_get+0x148>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2204      	movs	r2, #4
 8006720:	705a      	strb	r2, [r3, #1]
 8006722:	e00f      	b.n	8006744 <lps22df_mode_get+0x148>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2205      	movs	r2, #5
 8006728:	705a      	strb	r2, [r3, #1]
 800672a:	e00b      	b.n	8006744 <lps22df_mode_get+0x148>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2206      	movs	r2, #6
 8006730:	705a      	strb	r2, [r3, #1]
 8006732:	e007      	b.n	8006744 <lps22df_mode_get+0x148>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2207      	movs	r2, #7
 8006738:	705a      	strb	r2, [r3, #1]
 800673a:	e003      	b.n	8006744 <lps22df_mode_get+0x148>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	705a      	strb	r2, [r3, #1]
 8006742:	bf00      	nop
 8006744:	7b3b      	ldrb	r3, [r7, #12]
 8006746:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	7b3a      	ldrb	r2, [r7, #12]
 8006750:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	4313      	orrs	r3, r2
 8006758:	2b03      	cmp	r3, #3
 800675a:	d00e      	beq.n	800677a <lps22df_mode_get+0x17e>
 800675c:	2b03      	cmp	r3, #3
 800675e:	dc10      	bgt.n	8006782 <lps22df_mode_get+0x186>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <lps22df_mode_get+0x16e>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d004      	beq.n	8006772 <lps22df_mode_get+0x176>
 8006768:	e00b      	b.n	8006782 <lps22df_mode_get+0x186>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	709a      	strb	r2, [r3, #2]
 8006770:	e00b      	b.n	800678a <lps22df_mode_get+0x18e>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	709a      	strb	r2, [r3, #2]
 8006778:	e007      	b.n	800678a <lps22df_mode_get+0x18e>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2203      	movs	r2, #3
 800677e:	709a      	strb	r2, [r3, #2]
 8006780:	e003      	b.n	800678a <lps22df_mode_get+0x18e>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2200      	movs	r2, #0
 8006786:	709a      	strb	r2, [r3, #2]
 8006788:	bf00      	nop
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <lps22df_pressure_raw_get>:
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	f107 0208 	add.w	r2, r7, #8
 80067a2:	2303      	movs	r3, #3
 80067a4:	2128      	movs	r1, #40	@ 0x28
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fc68 	bl	800607c <lps22df_read_reg>
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	7abb      	ldrb	r3, [r7, #10]
 80067b0:	461a      	mov	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	7a7a      	ldrb	r2, [r7, #9]
 80067be:	441a      	add	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	7a3a      	ldrb	r2, [r7, #8]
 80067cc:	441a      	add	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	021a      	lsls	r2, r3, #8
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <lps22df_temperature_raw_get>:
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
 80067f0:	f107 0208 	add.w	r2, r7, #8
 80067f4:	2302      	movs	r3, #2
 80067f6:	212b      	movs	r1, #43	@ 0x2b
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff fc3f 	bl	800607c <lps22df_read_reg>
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	7a7b      	ldrb	r3, [r7, #9]
 8006802:	b21a      	sxth	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800680e:	b29b      	uxth	r3, r3
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	b29b      	uxth	r3, r3
 8006814:	7a3a      	ldrb	r2, [r7, #8]
 8006816:	4413      	add	r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	b21a      	sxth	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <LSM6DSO16IS_RegisterBusIO>:
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <LSM6DSO16IS_RegisterBusIO+0x1c>
 8006840:	f04f 33ff 	mov.w	r3, #4294967295
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e04d      	b.n	80068e4 <LSM6DSO16IS_RegisterBusIO+0xb8>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	7b1a      	ldrb	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	731a      	strb	r2, [r3, #12]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	611a      	str	r2, [r3, #16]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	615a      	str	r2, [r3, #20]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	619a      	str	r2, [r3, #24]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1b      	ldr	r2, [pc, #108]	@ (80068f0 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8006884:	625a      	str	r2, [r3, #36]	@ 0x24
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1a      	ldr	r2, [pc, #104]	@ (80068f4 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 800688a:	621a      	str	r2, [r3, #32]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <LSM6DSO16IS_RegisterBusIO+0x76>
 800689a:	f04f 33ff 	mov.w	r3, #4294967295
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e020      	b.n	80068e4 <LSM6DSO16IS_RegisterBusIO+0xb8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4798      	blx	r3
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <LSM6DSO16IS_RegisterBusIO+0x8a>
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e016      	b.n	80068e4 <LSM6DSO16IS_RegisterBusIO+0xb8>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d112      	bne.n	80068e4 <LSM6DSO16IS_RegisterBusIO+0xb8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10d      	bne.n	80068e4 <LSM6DSO16IS_RegisterBusIO+0xb8>
 80068c8:	230c      	movs	r3, #12
 80068ca:	72fb      	strb	r3, [r7, #11]
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	461a      	mov	r2, r3
 80068d0:	2112      	movs	r1, #18
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fdbe 	bl	8007454 <LSM6DSO16IS_Write_Reg>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <LSM6DSO16IS_RegisterBusIO+0xb8>
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	0800791d 	.word	0x0800791d
 80068f4:	08007953 	.word	0x08007953

080068f8 <LSM6DSO16IS_Init>:
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	2100      	movs	r1, #0
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fdc1 	bl	800748e <LSM6DSO16IS_Set_Mem_Bank>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <LSM6DSO16IS_Init+0x20>
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3320      	adds	r3, #32
 800691c:	2101      	movs	r1, #1
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fbdc 	bl	80080dc <lsm6dso16is_auto_increment_set>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <LSM6DSO16IS_Init+0x38>
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3320      	adds	r3, #32
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fbf6 	bl	8008128 <lsm6dso16is_block_data_update_set>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <LSM6DSO16IS_Init+0x50>
 8006942:	f04f 33ff 	mov.w	r3, #4294967295
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2204      	movs	r2, #4
 800694c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3320      	adds	r3, #32
 8006954:	2100      	movs	r1, #0
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f910 	bl	8007b7c <lsm6dso16is_xl_data_rate_set>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <LSM6DSO16IS_Init+0x70>
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3320      	adds	r3, #32
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f001 f8a6 	bl	8007ac0 <lsm6dso16is_xl_full_scale_set>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <LSM6DSO16IS_Init+0x88>
 800697a:	f04f 33ff 	mov.w	r3, #4294967295
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3320      	adds	r3, #32
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f001 faa8 	bl	8007ee4 <lsm6dso16is_gy_data_rate_set>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <LSM6DSO16IS_Init+0xa8>
 800699a:	f04f 33ff 	mov.w	r3, #4294967295
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3320      	adds	r3, #32
 80069a4:	2103      	movs	r1, #3
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fa10 	bl	8007dcc <lsm6dso16is_gy_full_scale_set>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <LSM6DSO16IS_Init+0xc0>
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <LSM6DSO16IS_Init+0xce>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <LSM6DSO16IS_DeInit>:
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f890 	bl	8006b02 <LSM6DSO16IS_ACC_Disable>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <LSM6DSO16IS_DeInit+0x1e>
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fad0 	bl	8006f94 <LSM6DSO16IS_GYRO_Disable>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <LSM6DSO16IS_DeInit+0x30>
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <LSM6DSO16IS_DeInit+0x4e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <LSM6DSO16IS_ReadID>:
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3320      	adds	r3, #32
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f001 f808 	bl	8007a52 <lsm6dso16is_device_id_get>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <LSM6DSO16IS_ReadID+0x26>
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <LSM6DSO16IS_GetCapabilities>:
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	705a      	strb	r2, [r3, #1]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	709a      	strb	r2, [r3, #2]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	70da      	strb	r2, [r3, #3]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2210      	movs	r2, #16
 8006a86:	609a      	str	r2, [r3, #8]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	4a07      	ldr	r2, [pc, #28]	@ (8006ab0 <LSM6DSO16IS_GetCapabilities+0x58>)
 8006a92:	611a      	str	r2, [r3, #16]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	4a06      	ldr	r2, [pc, #24]	@ (8006ab0 <LSM6DSO16IS_GetCapabilities+0x58>)
 8006a98:	615a      	str	r2, [r3, #20]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	619a      	str	r2, [r3, #24]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	45505000 	.word	0x45505000

08006ab4 <LSM6DSO16IS_ACC_Enable>:
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d102      	bne.n	8006ad0 <LSM6DSO16IS_ACC_Enable+0x1c>
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e013      	b.n	8006af8 <LSM6DSO16IS_ACC_Enable+0x44>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f103 0220 	add.w	r2, r3, #32
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f001 f84c 	bl	8007b7c <lsm6dso16is_xl_data_rate_set>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <LSM6DSO16IS_ACC_Enable+0x3c>
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <LSM6DSO16IS_ACC_Disable>:
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <LSM6DSO16IS_ACC_Disable+0x1c>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	e01e      	b.n	8006b5c <LSM6DSO16IS_ACC_Disable+0x5a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f103 0220 	add.w	r2, r3, #32
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3333      	adds	r3, #51	@ 0x33
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f001 f866 	bl	8007bfc <lsm6dso16is_xl_data_rate_get>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <LSM6DSO16IS_ACC_Disable+0x3a>
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3320      	adds	r3, #32
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 f81a 	bl	8007b7c <lsm6dso16is_xl_data_rate_set>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <LSM6DSO16IS_ACC_Disable+0x52>
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <LSM6DSO16IS_ACC_GetSensitivity>:
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3320      	adds	r3, #32
 8006b7a:	f107 020b 	add.w	r2, r7, #11
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 ffc3 	bl	8007b0c <lsm6dso16is_xl_full_scale_get>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
 8006b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d81b      	bhi.n	8006bd0 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8006b98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006bb1 	.word	0x08006bb1
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bb9 	.word	0x08006bb9
 8006bac:	08006bc1 	.word	0x08006bc1
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8006be4 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e00f      	b.n	8006bd8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4a0b      	ldr	r2, [pc, #44]	@ (8006be8 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e00b      	b.n	8006bd8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8006bec <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e007      	b.n	8006bd8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	4a09      	ldr	r2, [pc, #36]	@ (8006bf0 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e003      	b.n	8006bd8 <LSM6DSO16IS_ACC_GetSensitivity+0x70>
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	bf00      	nop
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	3d79db23 	.word	0x3d79db23
 8006be8:	3df9db23 	.word	0x3df9db23
 8006bec:	3e79db23 	.word	0x3e79db23
 8006bf0:	3ef9db23 	.word	0x3ef9db23

08006bf4 <LSM6DSO16IS_ACC_GetOutputDataRate>:
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3320      	adds	r3, #32
 8006c06:	f107 020b 	add.w	r2, r7, #11
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fff5 	bl	8007bfc <lsm6dso16is_xl_data_rate_get>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	2b1b      	cmp	r3, #27
 8006c22:	d86c      	bhi.n	8006cfe <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c9d 	.word	0x08006c9d
 8006c30:	08006caf 	.word	0x08006caf
 8006c34:	08006cb7 	.word	0x08006cb7
 8006c38:	08006cbf 	.word	0x08006cbf
 8006c3c:	08006cc7 	.word	0x08006cc7
 8006c40:	08006ccf 	.word	0x08006ccf
 8006c44:	08006cd7 	.word	0x08006cd7
 8006c48:	08006cdf 	.word	0x08006cdf
 8006c4c:	08006ce7 	.word	0x08006ce7
 8006c50:	08006cef 	.word	0x08006cef
 8006c54:	08006cf7 	.word	0x08006cf7
 8006c58:	08006cff 	.word	0x08006cff
 8006c5c:	08006cff 	.word	0x08006cff
 8006c60:	08006cff 	.word	0x08006cff
 8006c64:	08006cff 	.word	0x08006cff
 8006c68:	08006cff 	.word	0x08006cff
 8006c6c:	08006cff 	.word	0x08006cff
 8006c70:	08006caf 	.word	0x08006caf
 8006c74:	08006cb7 	.word	0x08006cb7
 8006c78:	08006cbf 	.word	0x08006cbf
 8006c7c:	08006cc7 	.word	0x08006cc7
 8006c80:	08006ccf 	.word	0x08006ccf
 8006c84:	08006cd7 	.word	0x08006cd7
 8006c88:	08006cdf 	.word	0x08006cdf
 8006c8c:	08006ce7 	.word	0x08006ce7
 8006c90:	08006cef 	.word	0x08006cef
 8006c94:	08006cf7 	.word	0x08006cf7
 8006c98:	08006ca7 	.word	0x08006ca7
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e02f      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	4a19      	ldr	r2, [pc, #100]	@ (8006d10 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e02b      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	4a18      	ldr	r2, [pc, #96]	@ (8006d14 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e027      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	4a17      	ldr	r2, [pc, #92]	@ (8006d18 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	e023      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	4a16      	ldr	r2, [pc, #88]	@ (8006d1c <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e01f      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	4a15      	ldr	r2, [pc, #84]	@ (8006d20 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e01b      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	4a14      	ldr	r2, [pc, #80]	@ (8006d24 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e017      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	4a13      	ldr	r2, [pc, #76]	@ (8006d28 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e013      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	4a12      	ldr	r2, [pc, #72]	@ (8006d2c <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e00f      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	4a11      	ldr	r2, [pc, #68]	@ (8006d30 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e00b      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	4a10      	ldr	r2, [pc, #64]	@ (8006d34 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e007      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8006d38 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e003      	b.n	8006d06 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	bf00      	nop
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	3fcccccd 	.word	0x3fcccccd
 8006d14:	41480000 	.word	0x41480000
 8006d18:	41d00000 	.word	0x41d00000
 8006d1c:	42500000 	.word	0x42500000
 8006d20:	42d00000 	.word	0x42d00000
 8006d24:	43500000 	.word	0x43500000
 8006d28:	43d00000 	.word	0x43d00000
 8006d2c:	44504000 	.word	0x44504000
 8006d30:	44d06000 	.word	0x44d06000
 8006d34:	45505000 	.word	0x45505000
 8006d38:	45d05800 	.word	0x45d05800

08006d3c <LSM6DSO16IS_ACC_SetOutputDataRate>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	ed87 0a00 	vstr	s0, [r7]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d106      	bne.n	8006d60 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
 8006d52:	ed97 0a00 	vldr	s0, [r7]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fbc0 	bl	80074dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	e005      	b.n	8006d6c <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
 8006d60:	ed97 0a00 	vldr	s0, [r7]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fc47 	bl	80075f8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <LSM6DSO16IS_ACC_GetFullScale>:
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3320      	adds	r3, #32
 8006d8a:	f107 020b 	add.w	r2, r7, #11
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 febb 	bl	8007b0c <lsm6dso16is_xl_full_scale_get>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d81b      	bhi.n	8006de0 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8006da8:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006dd1 	.word	0x08006dd1
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e00f      	b.n	8006de8 <LSM6DSO16IS_ACC_GetFullScale+0x70>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e00b      	b.n	8006de8 <LSM6DSO16IS_ACC_GetFullScale+0x70>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e007      	b.n	8006de8 <LSM6DSO16IS_ACC_GetFullScale+0x70>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e003      	b.n	8006de8 <LSM6DSO16IS_ACC_GetFullScale+0x70>
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	bf00      	nop
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop

08006df4 <LSM6DSO16IS_ACC_SetFullScale>:
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	dd0b      	ble.n	8006e20 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	dd06      	ble.n	8006e1c <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	dc01      	bgt.n	8006e18 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8006e14:	2303      	movs	r3, #3
 8006e16:	e004      	b.n	8006e22 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e002      	b.n	8006e22 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e000      	b.n	8006e22 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006e20:	2300      	movs	r3, #0
 8006e22:	72fb      	strb	r3, [r7, #11]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3320      	adds	r3, #32
 8006e28:	7afa      	ldrb	r2, [r7, #11]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fe47 	bl	8007ac0 <lsm6dso16is_xl_full_scale_set>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <LSM6DSO16IS_ACC_SetFullScale+0x4a>
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <LSM6DSO16IS_ACC_GetAxesRaw>:
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3320      	adds	r3, #32
 8006e5a:	f107 020c 	add.w	r2, r7, #12
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 f9cf 	bl	8008204 <lsm6dso16is_acceleration_raw_get>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	805a      	strh	r2, [r3, #2]
 8006e82:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	809a      	strh	r2, [r3, #4]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <LSM6DSO16IS_ACC_GetAxes>:
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3320      	adds	r3, #32
 8006eac:	f107 020c 	add.w	r2, r7, #12
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f9a6 	bl	8008204 <lsm6dso16is_acceleration_raw_get>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <LSM6DSO16IS_ACC_GetAxes+0x30>
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	f107 0308 	add.w	r3, r7, #8
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fe4c 	bl	8006b68 <LSM6DSO16IS_ACC_GetSensitivity>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <LSM6DSO16IS_ACC_GetAxes+0x48>
 8006ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef4:	ee17 2a90 	vmov	r2, s15
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f14:	ee17 2a90 	vmov	r2, s15
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f34:	ee17 2a90 	vmov	r2, s15
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	609a      	str	r2, [r3, #8]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <LSM6DSO16IS_GYRO_Enable>:
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d102      	bne.n	8006f62 <LSM6DSO16IS_GYRO_Enable+0x1c>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e013      	b.n	8006f8a <LSM6DSO16IS_GYRO_Enable+0x44>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f103 0220 	add.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f000 ffb7 	bl	8007ee4 <lsm6dso16is_gy_data_rate_set>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <LSM6DSO16IS_GYRO_Enable+0x3c>
 8006f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <LSM6DSO16IS_GYRO_Disable>:
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <LSM6DSO16IS_GYRO_Disable+0x1c>
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e01e      	b.n	8006fee <LSM6DSO16IS_GYRO_Disable+0x5a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f103 0220 	add.w	r2, r3, #32
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3334      	adds	r3, #52	@ 0x34
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f000 ffd1 	bl	8007f64 <lsm6dso16is_gy_data_rate_get>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <LSM6DSO16IS_GYRO_Disable+0x3a>
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3320      	adds	r3, #32
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 ff85 	bl	8007ee4 <lsm6dso16is_gy_data_rate_set>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <LSM6DSO16IS_GYRO_Disable+0x52>
 8006fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <LSM6DSO16IS_GYRO_GetSensitivity>:
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3320      	adds	r3, #32
 800700a:	f107 020b 	add.w	r2, r7, #11
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f000 ff0b 	bl	8007e2c <lsm6dso16is_gy_full_scale_get>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
 800701c:	f04f 33ff 	mov.w	r3, #4294967295
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b10      	cmp	r3, #16
 8007026:	d839      	bhi.n	800709c <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8007028:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	0800707d 	.word	0x0800707d
 8007034:	08007085 	.word	0x08007085
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007095 	.word	0x08007095
 8007040:	0800709d 	.word	0x0800709d
 8007044:	0800709d 	.word	0x0800709d
 8007048:	0800709d 	.word	0x0800709d
 800704c:	0800709d 	.word	0x0800709d
 8007050:	0800709d 	.word	0x0800709d
 8007054:	0800709d 	.word	0x0800709d
 8007058:	0800709d 	.word	0x0800709d
 800705c:	0800709d 	.word	0x0800709d
 8007060:	0800709d 	.word	0x0800709d
 8007064:	0800709d 	.word	0x0800709d
 8007068:	0800709d 	.word	0x0800709d
 800706c:	0800709d 	.word	0x0800709d
 8007070:	08007075 	.word	0x08007075
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	4a0e      	ldr	r2, [pc, #56]	@ (80070b0 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e013      	b.n	80070a4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	4a0d      	ldr	r2, [pc, #52]	@ (80070b4 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e00f      	b.n	80070a4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	4a0c      	ldr	r2, [pc, #48]	@ (80070b8 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e00b      	b.n	80070a4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	4a0b      	ldr	r2, [pc, #44]	@ (80070bc <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e007      	b.n	80070a4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	4a0a      	ldr	r2, [pc, #40]	@ (80070c0 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e003      	b.n	80070a4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	bf00      	nop
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	408c0000 	.word	0x408c0000
 80070b4:	410c0000 	.word	0x410c0000
 80070b8:	418c0000 	.word	0x418c0000
 80070bc:	420c0000 	.word	0x420c0000
 80070c0:	428c0000 	.word	0x428c0000

080070c4 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3320      	adds	r3, #32
 80070d6:	f107 020b 	add.w	r2, r7, #11
 80070da:	4611      	mov	r1, r2
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 ff41 	bl	8007f64 <lsm6dso16is_gy_data_rate_get>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
 80070e8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	2b1a      	cmp	r3, #26
 80070f2:	d866      	bhi.n	80071c2 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007169 	.word	0x08007169
 8007100:	08007173 	.word	0x08007173
 8007104:	0800717b 	.word	0x0800717b
 8007108:	08007183 	.word	0x08007183
 800710c:	0800718b 	.word	0x0800718b
 8007110:	08007193 	.word	0x08007193
 8007114:	0800719b 	.word	0x0800719b
 8007118:	080071a3 	.word	0x080071a3
 800711c:	080071ab 	.word	0x080071ab
 8007120:	080071b3 	.word	0x080071b3
 8007124:	080071bb 	.word	0x080071bb
 8007128:	080071c3 	.word	0x080071c3
 800712c:	080071c3 	.word	0x080071c3
 8007130:	080071c3 	.word	0x080071c3
 8007134:	080071c3 	.word	0x080071c3
 8007138:	080071c3 	.word	0x080071c3
 800713c:	080071c3 	.word	0x080071c3
 8007140:	08007173 	.word	0x08007173
 8007144:	0800717b 	.word	0x0800717b
 8007148:	08007183 	.word	0x08007183
 800714c:	0800718b 	.word	0x0800718b
 8007150:	08007193 	.word	0x08007193
 8007154:	0800719b 	.word	0x0800719b
 8007158:	080071a3 	.word	0x080071a3
 800715c:	080071ab 	.word	0x080071ab
 8007160:	080071b3 	.word	0x080071b3
 8007164:	080071bb 	.word	0x080071bb
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f04f 0200 	mov.w	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e02b      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	4a17      	ldr	r2, [pc, #92]	@ (80071d4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e027      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	4a16      	ldr	r2, [pc, #88]	@ (80071d8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e023      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	4a15      	ldr	r2, [pc, #84]	@ (80071dc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	e01f      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	4a14      	ldr	r2, [pc, #80]	@ (80071e0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e01b      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	4a13      	ldr	r2, [pc, #76]	@ (80071e4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e017      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	4a12      	ldr	r2, [pc, #72]	@ (80071e8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	e013      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	4a11      	ldr	r2, [pc, #68]	@ (80071ec <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e00f      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	4a10      	ldr	r2, [pc, #64]	@ (80071f0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e00b      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	4a0f      	ldr	r2, [pc, #60]	@ (80071f4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e007      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	4a0e      	ldr	r2, [pc, #56]	@ (80071f8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e003      	b.n	80071ca <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	bf00      	nop
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	41480000 	.word	0x41480000
 80071d8:	41d00000 	.word	0x41d00000
 80071dc:	42500000 	.word	0x42500000
 80071e0:	42d00000 	.word	0x42d00000
 80071e4:	43500000 	.word	0x43500000
 80071e8:	43d00000 	.word	0x43d00000
 80071ec:	44504000 	.word	0x44504000
 80071f0:	44d06000 	.word	0x44d06000
 80071f4:	45505000 	.word	0x45505000
 80071f8:	45d05800 	.word	0x45d05800

080071fc <LSM6DSO16IS_GYRO_SetOutputDataRate>:
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	ed87 0a00 	vstr	s0, [r7]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800720e:	2b01      	cmp	r3, #1
 8007210:	d106      	bne.n	8007220 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
 8007212:	ed97 0a00 	vldr	s0, [r7]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa70 	bl	80076fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	e005      	b.n	800722c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
 8007220:	ed97 0a00 	vldr	s0, [r7]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 faf7 	bl	8007818 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <LSM6DSO16IS_GYRO_GetFullScale>:
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3320      	adds	r3, #32
 800724a:	f107 020b 	add.w	r2, r7, #11
 800724e:	4611      	mov	r1, r2
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fdeb 	bl	8007e2c <lsm6dso16is_gy_full_scale_get>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
 800725c:	f04f 33ff 	mov.w	r3, #4294967295
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	2b10      	cmp	r3, #16
 8007266:	d83c      	bhi.n	80072e2 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8007268:	a201      	add	r2, pc, #4	@ (adr r2, 8007270 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072c5 	.word	0x080072c5
 8007278:	080072cf 	.word	0x080072cf
 800727c:	080072d9 	.word	0x080072d9
 8007280:	080072e3 	.word	0x080072e3
 8007284:	080072e3 	.word	0x080072e3
 8007288:	080072e3 	.word	0x080072e3
 800728c:	080072e3 	.word	0x080072e3
 8007290:	080072e3 	.word	0x080072e3
 8007294:	080072e3 	.word	0x080072e3
 8007298:	080072e3 	.word	0x080072e3
 800729c:	080072e3 	.word	0x080072e3
 80072a0:	080072e3 	.word	0x080072e3
 80072a4:	080072e3 	.word	0x080072e3
 80072a8:	080072e3 	.word	0x080072e3
 80072ac:	080072e3 	.word	0x080072e3
 80072b0:	080072b5 	.word	0x080072b5
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	227d      	movs	r2, #125	@ 0x7d
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e016      	b.n	80072ea <LSM6DSO16IS_GYRO_GetFullScale+0xb2>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	22fa      	movs	r2, #250	@ 0xfa
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e012      	b.n	80072ea <LSM6DSO16IS_GYRO_GetFullScale+0xb2>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e00d      	b.n	80072ea <LSM6DSO16IS_GYRO_GetFullScale+0xb2>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e008      	b.n	80072ea <LSM6DSO16IS_GYRO_GetFullScale+0xb2>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	e003      	b.n	80072ea <LSM6DSO16IS_GYRO_GetFullScale+0xb2>
 80072e2:	f04f 33ff 	mov.w	r3, #4294967295
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	bf00      	nop
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <LSM6DSO16IS_GYRO_SetFullScale>:
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b7d      	cmp	r3, #125	@ 0x7d
 8007306:	dd12      	ble.n	800732e <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2bfa      	cmp	r3, #250	@ 0xfa
 800730c:	dd0d      	ble.n	800732a <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007314:	dd07      	ble.n	8007326 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800731c:	dc01      	bgt.n	8007322 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 800731e:	2302      	movs	r3, #2
 8007320:	e006      	b.n	8007330 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8007322:	2303      	movs	r3, #3
 8007324:	e004      	b.n	8007330 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8007326:	2301      	movs	r3, #1
 8007328:	e002      	b.n	8007330 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800732a:	2300      	movs	r3, #0
 800732c:	e000      	b.n	8007330 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800732e:	2310      	movs	r3, #16
 8007330:	72fb      	strb	r3, [r7, #11]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3320      	adds	r3, #32
 8007336:	7afa      	ldrb	r2, [r7, #11]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fd46 	bl	8007dcc <lsm6dso16is_gy_full_scale_set>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <LSM6DSO16IS_GYRO_SetFullScale+0x58>
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <LSM6DSO16IS_GYRO_GetAxesRaw>:
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3320      	adds	r3, #32
 8007368:	f107 020c 	add.w	r2, r7, #12
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f000 ff00 	bl	8008174 <lsm6dso16is_angular_rate_raw_get>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
 800737a:	f04f 33ff 	mov.w	r3, #4294967295
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	805a      	strh	r2, [r3, #2]
 8007390:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	809a      	strh	r2, [r3, #4]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <LSM6DSO16IS_GYRO_GetAxes>:
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3320      	adds	r3, #32
 80073ba:	f107 020c 	add.w	r2, r7, #12
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fed7 	bl	8008174 <lsm6dso16is_angular_rate_raw_get>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <LSM6DSO16IS_GYRO_GetAxes+0x30>
 80073cc:	f04f 33ff 	mov.w	r3, #4294967295
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	f107 0308 	add.w	r3, r7, #8
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff fe0d 	bl	8006ff8 <LSM6DSO16IS_GYRO_GetSensitivity>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <LSM6DSO16IS_GYRO_GetAxes+0x48>
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80073fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007402:	ee17 2a90 	vmov	r2, s15
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007416:	edd7 7a02 	vldr	s15, [r7, #8]
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007422:	ee17 2a90 	vmov	r2, s15
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007436:	edd7 7a02 	vldr	s15, [r7, #8]
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007442:	ee17 2a90 	vmov	r2, s15
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	609a      	str	r2, [r3, #8]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <LSM6DSO16IS_Write_Reg>:
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
 8007460:	4613      	mov	r3, r2
 8007462:	70bb      	strb	r3, [r7, #2]
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 0020 	add.w	r0, r3, #32
 800746e:	1cba      	adds	r2, r7, #2
 8007470:	78f9      	ldrb	r1, [r7, #3]
 8007472:	2301      	movs	r3, #1
 8007474:	f000 faa6 	bl	80079c4 <lsm6dso16is_write_reg>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <LSM6DSO16IS_Write_Reg+0x30>
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <LSM6DSO16IS_Set_Mem_Bank>:
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d006      	beq.n	80074b2 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d101      	bne.n	80074ae <LSM6DSO16IS_Set_Mem_Bank+0x20>
 80074aa:	2303      	movs	r3, #3
 80074ac:	e002      	b.n	80074b4 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80074ae:	2300      	movs	r3, #0
 80074b0:	e000      	b.n	80074b4 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80074b2:	2302      	movs	r3, #2
 80074b4:	72fb      	strb	r3, [r7, #11]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3320      	adds	r3, #32
 80074ba:	7afa      	ldrb	r2, [r7, #11]
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fa9e 	bl	8007a00 <lsm6dso16is_mem_bank_set>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <LSM6DSO16IS_Set_Mem_Bank+0x42>
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	ed87 0a00 	vstr	s0, [r7]
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	edd7 7a00 	vldr	s15, [r7]
 80074f0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80074f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fc:	d801      	bhi.n	8007502 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 80074fe:	2301      	movs	r3, #1
 8007500:	e058      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007502:	edd7 7a00 	vldr	s15, [r7]
 8007506:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800750a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007512:	d801      	bhi.n	8007518 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8007514:	2302      	movs	r3, #2
 8007516:	e04d      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007518:	edd7 7a00 	vldr	s15, [r7]
 800751c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80075dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007528:	d801      	bhi.n	800752e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 800752a:	2303      	movs	r3, #3
 800752c:	e042      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800752e:	edd7 7a00 	vldr	s15, [r7]
 8007532:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80075e0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8007536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753e:	d801      	bhi.n	8007544 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8007540:	2304      	movs	r3, #4
 8007542:	e037      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007544:	edd7 7a00 	vldr	s15, [r7]
 8007548:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80075e4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 800754c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007554:	d801      	bhi.n	800755a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8007556:	2305      	movs	r3, #5
 8007558:	e02c      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800755a:	edd7 7a00 	vldr	s15, [r7]
 800755e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80075e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8007562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756a:	d801      	bhi.n	8007570 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 800756c:	2306      	movs	r3, #6
 800756e:	e021      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007570:	edd7 7a00 	vldr	s15, [r7]
 8007574:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80075ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	d801      	bhi.n	8007586 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8007582:	2307      	movs	r3, #7
 8007584:	e016      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007586:	edd7 7a00 	vldr	s15, [r7]
 800758a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80075f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 800758e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	d801      	bhi.n	800759c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007598:	2308      	movs	r3, #8
 800759a:	e00b      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800759c:	edd7 7a00 	vldr	s15, [r7]
 80075a0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80075f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 80075a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	d801      	bhi.n	80075b2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 80075ae:	2309      	movs	r3, #9
 80075b0:	e000      	b.n	80075b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80075b2:	230a      	movs	r3, #10
 80075b4:	72fb      	strb	r3, [r7, #11]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3320      	adds	r3, #32
 80075ba:	7afa      	ldrb	r2, [r7, #11]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fadc 	bl	8007b7c <lsm6dso16is_xl_data_rate_set>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	42500000 	.word	0x42500000
 80075e0:	42d00000 	.word	0x42d00000
 80075e4:	43500000 	.word	0x43500000
 80075e8:	43d00000 	.word	0x43d00000
 80075ec:	44504000 	.word	0x44504000
 80075f0:	44d06000 	.word	0x44d06000
 80075f4:	45505000 	.word	0x45505000

080075f8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	ed87 0a00 	vstr	s0, [r7]
 8007604:	edd7 7a00 	vldr	s15, [r7]
 8007608:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800760c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007614:	d801      	bhi.n	800761a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 8007616:	2301      	movs	r3, #1
 8007618:	e058      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800761a:	edd7 7a00 	vldr	s15, [r7]
 800761e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762a:	d801      	bhi.n	8007630 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 800762c:	2302      	movs	r3, #2
 800762e:	e04d      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007630:	edd7 7a00 	vldr	s15, [r7]
 8007634:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80076e0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007640:	d801      	bhi.n	8007646 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007642:	2303      	movs	r3, #3
 8007644:	e042      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007646:	edd7 7a00 	vldr	s15, [r7]
 800764a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80076e4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 800764e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007656:	d801      	bhi.n	800765c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007658:	2304      	movs	r3, #4
 800765a:	e037      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800765c:	edd7 7a00 	vldr	s15, [r7]
 8007660:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80076e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8007664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766c:	d801      	bhi.n	8007672 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800766e:	2305      	movs	r3, #5
 8007670:	e02c      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007672:	edd7 7a00 	vldr	s15, [r7]
 8007676:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80076ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800767a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	d801      	bhi.n	8007688 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007684:	2306      	movs	r3, #6
 8007686:	e021      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007688:	edd7 7a00 	vldr	s15, [r7]
 800768c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80076f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007698:	d801      	bhi.n	800769e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800769a:	2307      	movs	r3, #7
 800769c:	e016      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800769e:	edd7 7a00 	vldr	s15, [r7]
 80076a2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80076f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80076a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ae:	d801      	bhi.n	80076b4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80076b0:	2308      	movs	r3, #8
 80076b2:	e00b      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80076b4:	edd7 7a00 	vldr	s15, [r7]
 80076b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80076f8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 80076bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c4:	d801      	bhi.n	80076ca <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80076c6:	2309      	movs	r3, #9
 80076c8:	e000      	b.n	80076cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80076ca:	230a      	movs	r3, #10
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
 80076d2:	2300      	movs	r3, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	42500000 	.word	0x42500000
 80076e4:	42d00000 	.word	0x42d00000
 80076e8:	43500000 	.word	0x43500000
 80076ec:	43d00000 	.word	0x43d00000
 80076f0:	44504000 	.word	0x44504000
 80076f4:	44d06000 	.word	0x44d06000
 80076f8:	45505000 	.word	0x45505000

080076fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	ed87 0a00 	vstr	s0, [r7]
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	edd7 7a00 	vldr	s15, [r7]
 8007710:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771c:	d801      	bhi.n	8007722 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 800771e:	2301      	movs	r3, #1
 8007720:	e058      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007722:	edd7 7a00 	vldr	s15, [r7]
 8007726:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800772a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	d801      	bhi.n	8007738 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8007734:	2302      	movs	r3, #2
 8007736:	e04d      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007738:	edd7 7a00 	vldr	s15, [r7]
 800773c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80077fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007748:	d801      	bhi.n	800774e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800774a:	2303      	movs	r3, #3
 800774c:	e042      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800774e:	edd7 7a00 	vldr	s15, [r7]
 8007752:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007800 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775e:	d801      	bhi.n	8007764 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8007760:	2304      	movs	r3, #4
 8007762:	e037      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007764:	edd7 7a00 	vldr	s15, [r7]
 8007768:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007804 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800776c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007774:	d801      	bhi.n	800777a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8007776:	2305      	movs	r3, #5
 8007778:	e02c      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800777a:	edd7 7a00 	vldr	s15, [r7]
 800777e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007808 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778a:	d801      	bhi.n	8007790 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 800778c:	2306      	movs	r3, #6
 800778e:	e021      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007790:	edd7 7a00 	vldr	s15, [r7]
 8007794:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800780c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800779c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a0:	d801      	bhi.n	80077a6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 80077a2:	2307      	movs	r3, #7
 80077a4:	e016      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80077a6:	edd7 7a00 	vldr	s15, [r7]
 80077aa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007810 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80077ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	d801      	bhi.n	80077bc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 80077b8:	2308      	movs	r3, #8
 80077ba:	e00b      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80077bc:	edd7 7a00 	vldr	s15, [r7]
 80077c0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007814 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80077c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	d801      	bhi.n	80077d2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 80077ce:	2309      	movs	r3, #9
 80077d0:	e000      	b.n	80077d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80077d2:	230a      	movs	r3, #10
 80077d4:	72fb      	strb	r3, [r7, #11]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3320      	adds	r3, #32
 80077da:	7afa      	ldrb	r2, [r7, #11]
 80077dc:	4611      	mov	r1, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fb80 	bl	8007ee4 <lsm6dso16is_gy_data_rate_set>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	42500000 	.word	0x42500000
 8007800:	42d00000 	.word	0x42d00000
 8007804:	43500000 	.word	0x43500000
 8007808:	43d00000 	.word	0x43d00000
 800780c:	44504000 	.word	0x44504000
 8007810:	44d06000 	.word	0x44d06000
 8007814:	45505000 	.word	0x45505000

08007818 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	ed87 0a00 	vstr	s0, [r7]
 8007824:	edd7 7a00 	vldr	s15, [r7]
 8007828:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800782c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007834:	d801      	bhi.n	800783a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007836:	2301      	movs	r3, #1
 8007838:	e058      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800783a:	edd7 7a00 	vldr	s15, [r7]
 800783e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784a:	d801      	bhi.n	8007850 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800784c:	2302      	movs	r3, #2
 800784e:	e04d      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007850:	edd7 7a00 	vldr	s15, [r7]
 8007854:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007900 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007860:	d801      	bhi.n	8007866 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007862:	2303      	movs	r3, #3
 8007864:	e042      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007866:	edd7 7a00 	vldr	s15, [r7]
 800786a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007904 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800786e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007876:	d801      	bhi.n	800787c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007878:	2304      	movs	r3, #4
 800787a:	e037      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800787c:	edd7 7a00 	vldr	s15, [r7]
 8007880:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007908 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788c:	d801      	bhi.n	8007892 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800788e:	2305      	movs	r3, #5
 8007890:	e02c      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007892:	edd7 7a00 	vldr	s15, [r7]
 8007896:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800790c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800789a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a2:	d801      	bhi.n	80078a8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80078a4:	2306      	movs	r3, #6
 80078a6:	e021      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078a8:	edd7 7a00 	vldr	s15, [r7]
 80078ac:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007910 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80078b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b8:	d801      	bhi.n	80078be <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80078ba:	2307      	movs	r3, #7
 80078bc:	e016      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078be:	edd7 7a00 	vldr	s15, [r7]
 80078c2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007914 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80078c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ce:	d801      	bhi.n	80078d4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80078d0:	2308      	movs	r3, #8
 80078d2:	e00b      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078d4:	edd7 7a00 	vldr	s15, [r7]
 80078d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007918 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80078dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e4:	d801      	bhi.n	80078ea <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80078e6:	2309      	movs	r3, #9
 80078e8:	e000      	b.n	80078ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078ea:	230a      	movs	r3, #10
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 80078f2:	2300      	movs	r3, #0
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	42500000 	.word	0x42500000
 8007904:	42d00000 	.word	0x42d00000
 8007908:	43500000 	.word	0x43500000
 800790c:	43d00000 	.word	0x43d00000
 8007910:	44504000 	.word	0x44504000
 8007914:	44d06000 	.word	0x44d06000
 8007918:	45505000 	.word	0x45505000

0800791c <ReadRegWrap>:
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	461a      	mov	r2, r3
 8007928:	460b      	mov	r3, r1
 800792a:	72fb      	strb	r3, [r7, #11]
 800792c:	4613      	mov	r3, r2
 800792e:	813b      	strh	r3, [r7, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	695c      	ldr	r4, [r3, #20]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	7b1b      	ldrb	r3, [r3, #12]
 800793c:	4618      	mov	r0, r3
 800793e:	7afb      	ldrb	r3, [r7, #11]
 8007940:	b299      	uxth	r1, r3
 8007942:	893b      	ldrh	r3, [r7, #8]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	47a0      	blx	r4
 8007948:	4603      	mov	r3, r0
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	bd90      	pop	{r4, r7, pc}

08007952 <WriteRegWrap>:
 8007952:	b590      	push	{r4, r7, lr}
 8007954:	b087      	sub	sp, #28
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	461a      	mov	r2, r3
 800795e:	460b      	mov	r3, r1
 8007960:	72fb      	strb	r3, [r7, #11]
 8007962:	4613      	mov	r3, r2
 8007964:	813b      	strh	r3, [r7, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	691c      	ldr	r4, [r3, #16]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	7b1b      	ldrb	r3, [r3, #12]
 8007972:	4618      	mov	r0, r3
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	b299      	uxth	r1, r3
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	47a0      	blx	r4
 800797e:	4603      	mov	r3, r0
 8007980:	4618      	mov	r0, r3
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	bd90      	pop	{r4, r7, pc}

08007988 <lsm6dso16is_read_reg>:
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	461a      	mov	r2, r3
 8007994:	460b      	mov	r3, r1
 8007996:	72fb      	strb	r3, [r7, #11]
 8007998:	4613      	mov	r3, r2
 800799a:	813b      	strh	r3, [r7, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <lsm6dso16is_read_reg+0x20>
 80079a2:	f04f 33ff 	mov.w	r3, #4294967295
 80079a6:	e009      	b.n	80079bc <lsm6dso16is_read_reg+0x34>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685c      	ldr	r4, [r3, #4]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68d8      	ldr	r0, [r3, #12]
 80079b0:	893b      	ldrh	r3, [r7, #8]
 80079b2:	7af9      	ldrb	r1, [r7, #11]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	47a0      	blx	r4
 80079b8:	6178      	str	r0, [r7, #20]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd90      	pop	{r4, r7, pc}

080079c4 <lsm6dso16is_write_reg>:
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	461a      	mov	r2, r3
 80079d0:	460b      	mov	r3, r1
 80079d2:	72fb      	strb	r3, [r7, #11]
 80079d4:	4613      	mov	r3, r2
 80079d6:	813b      	strh	r3, [r7, #8]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <lsm6dso16is_write_reg+0x20>
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
 80079e2:	e009      	b.n	80079f8 <lsm6dso16is_write_reg+0x34>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681c      	ldr	r4, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68d8      	ldr	r0, [r3, #12]
 80079ec:	893b      	ldrh	r3, [r7, #8]
 80079ee:	7af9      	ldrb	r1, [r7, #11]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	47a0      	blx	r4
 80079f4:	6178      	str	r0, [r7, #20]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}

08007a00 <lsm6dso16is_mem_bank_set>:
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	723b      	strb	r3, [r7, #8]
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d101      	bne.n	8007a1a <lsm6dso16is_mem_bank_set+0x1a>
 8007a16:	2201      	movs	r2, #1
 8007a18:	e000      	b.n	8007a1c <lsm6dso16is_mem_bank_set+0x1c>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	7a3b      	ldrb	r3, [r7, #8]
 8007a1e:	f362 1386 	bfi	r3, r2, #6, #1
 8007a22:	723b      	strb	r3, [r7, #8]
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d101      	bne.n	8007a2e <lsm6dso16is_mem_bank_set+0x2e>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	e000      	b.n	8007a30 <lsm6dso16is_mem_bank_set+0x30>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	7a3b      	ldrb	r3, [r7, #8]
 8007a32:	f362 13c7 	bfi	r3, r2, #7, #1
 8007a36:	723b      	strb	r3, [r7, #8]
 8007a38:	f107 0208 	add.w	r2, r7, #8
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ffbf 	bl	80079c4 <lsm6dso16is_write_reg>
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <lsm6dso16is_device_id_get>:
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	210f      	movs	r1, #15
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff ff90 	bl	8007988 <lsm6dso16is_read_reg>
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <lsm6dso16is_xl_hm_mode_set>:
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
 8007a80:	f107 0208 	add.w	r2, r7, #8
 8007a84:	2301      	movs	r3, #1
 8007a86:	2115      	movs	r1, #21
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ff7d 	bl	8007988 <lsm6dso16is_read_reg>
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <lsm6dso16is_xl_hm_mode_set+0x42>
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	7a3b      	ldrb	r3, [r7, #8]
 8007aa0:	f362 1304 	bfi	r3, r2, #4, #1
 8007aa4:	723b      	strb	r3, [r7, #8]
 8007aa6:	f107 0208 	add.w	r2, r7, #8
 8007aaa:	2301      	movs	r3, #1
 8007aac:	2115      	movs	r1, #21
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff ff88 	bl	80079c4 <lsm6dso16is_write_reg>
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <lsm6dso16is_xl_full_scale_set>:
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
 8007acc:	f107 0208 	add.w	r2, r7, #8
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	2110      	movs	r1, #16
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ff57 	bl	8007988 <lsm6dso16is_read_reg>
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10f      	bne.n	8007b02 <lsm6dso16is_xl_full_scale_set+0x42>
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	7a3b      	ldrb	r3, [r7, #8]
 8007aec:	f362 0383 	bfi	r3, r2, #2, #2
 8007af0:	723b      	strb	r3, [r7, #8]
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	2301      	movs	r3, #1
 8007af8:	2110      	movs	r1, #16
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff ff62 	bl	80079c4 <lsm6dso16is_write_reg>
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <lsm6dso16is_xl_full_scale_get>:
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	f107 0208 	add.w	r2, r7, #8
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	2110      	movs	r1, #16
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff ff32 	bl	8007988 <lsm6dso16is_read_reg>
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	7a3b      	ldrb	r3, [r7, #8]
 8007b28:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d81a      	bhi.n	8007b68 <lsm6dso16is_xl_full_scale_get+0x5c>
 8007b32:	a201      	add	r2, pc, #4	@ (adr r2, 8007b38 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b59 	.word	0x08007b59
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e00f      	b.n	8007b70 <lsm6dso16is_xl_full_scale_get+0x64>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2202      	movs	r2, #2
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e00b      	b.n	8007b70 <lsm6dso16is_xl_full_scale_get+0x64>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e007      	b.n	8007b70 <lsm6dso16is_xl_full_scale_get+0x64>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e003      	b.n	8007b70 <lsm6dso16is_xl_full_scale_get+0x64>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	bf00      	nop
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <lsm6dso16is_xl_data_rate_set>:
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	f107 0208 	add.w	r2, r7, #8
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	2110      	movs	r1, #16
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fef9 	bl	8007988 <lsm6dso16is_read_reg>
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d128      	bne.n	8007bf0 <lsm6dso16is_xl_data_rate_set+0x74>
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d008      	beq.n	8007bba <lsm6dso16is_xl_data_rate_set+0x3e>
 8007ba8:	2101      	movs	r1, #1
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff ff62 	bl	8007a74 <lsm6dso16is_xl_hm_mode_set>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	e007      	b.n	8007bca <lsm6dso16is_xl_data_rate_set+0x4e>
 8007bba:	2100      	movs	r1, #0
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff59 	bl	8007a74 <lsm6dso16is_xl_hm_mode_set>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	7a3b      	ldrb	r3, [r7, #8]
 8007bd4:	f362 1307 	bfi	r3, r2, #4, #4
 8007bd8:	723b      	strb	r3, [r7, #8]
 8007bda:	f107 0208 	add.w	r2, r7, #8
 8007bde:	2301      	movs	r3, #1
 8007be0:	2110      	movs	r1, #16
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff feee 	bl	80079c4 <lsm6dso16is_write_reg>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <lsm6dso16is_xl_data_rate_get>:
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	f107 0210 	add.w	r2, r7, #16
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	2110      	movs	r1, #16
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff feba 	bl	8007988 <lsm6dso16is_read_reg>
 8007c14:	6178      	str	r0, [r7, #20]
 8007c16:	f107 020c 	add.w	r2, r7, #12
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	2115      	movs	r1, #21
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff feb2 	bl	8007988 <lsm6dso16is_read_reg>
 8007c24:	4602      	mov	r2, r0
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	7b3b      	ldrb	r3, [r7, #12]
 8007c2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	7c3a      	ldrb	r2, [r7, #16]
 8007c38:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007c3c:	b2d2      	uxtb	r2, r2
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	2b1b      	cmp	r3, #27
 8007c42:	f200 8093 	bhi.w	8007d6c <lsm6dso16is_xl_data_rate_get+0x170>
 8007c46:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <lsm6dso16is_xl_data_rate_get+0x50>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007cbd 	.word	0x08007cbd
 8007c50:	08007cc5 	.word	0x08007cc5
 8007c54:	08007ccd 	.word	0x08007ccd
 8007c58:	08007cd5 	.word	0x08007cd5
 8007c5c:	08007cdd 	.word	0x08007cdd
 8007c60:	08007ce5 	.word	0x08007ce5
 8007c64:	08007ced 	.word	0x08007ced
 8007c68:	08007cf5 	.word	0x08007cf5
 8007c6c:	08007cfd 	.word	0x08007cfd
 8007c70:	08007d05 	.word	0x08007d05
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007d6d 	.word	0x08007d6d
 8007c7c:	08007d6d 	.word	0x08007d6d
 8007c80:	08007d6d 	.word	0x08007d6d
 8007c84:	08007d6d 	.word	0x08007d6d
 8007c88:	08007d6d 	.word	0x08007d6d
 8007c8c:	08007d6d 	.word	0x08007d6d
 8007c90:	08007d15 	.word	0x08007d15
 8007c94:	08007d1d 	.word	0x08007d1d
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007d2d 	.word	0x08007d2d
 8007ca0:	08007d35 	.word	0x08007d35
 8007ca4:	08007d3d 	.word	0x08007d3d
 8007ca8:	08007d45 	.word	0x08007d45
 8007cac:	08007d4d 	.word	0x08007d4d
 8007cb0:	08007d55 	.word	0x08007d55
 8007cb4:	08007d5d 	.word	0x08007d5d
 8007cb8:	08007d65 	.word	0x08007d65
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	e057      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e053      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e04f      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e04b      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e047      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	e043      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2206      	movs	r2, #6
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	e03f      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2207      	movs	r2, #7
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	e03b      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2208      	movs	r2, #8
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e037      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2209      	movs	r2, #9
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e033      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	220a      	movs	r2, #10
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	e02f      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2211      	movs	r2, #17
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e02b      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2212      	movs	r2, #18
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e027      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2213      	movs	r2, #19
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	e023      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2214      	movs	r2, #20
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e01f      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2215      	movs	r2, #21
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e01b      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2216      	movs	r2, #22
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e017      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2217      	movs	r2, #23
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e013      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2218      	movs	r2, #24
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e00f      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2219      	movs	r2, #25
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e00b      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	221a      	movs	r2, #26
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e007      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	221b      	movs	r2, #27
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	e003      	b.n	8007d74 <lsm6dso16is_xl_data_rate_get+0x178>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	bf00      	nop
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop

08007d80 <lsm6dso16is_gy_hm_mode_set>:
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
 8007d8c:	f107 0208 	add.w	r2, r7, #8
 8007d90:	2301      	movs	r3, #1
 8007d92:	2116      	movs	r1, #22
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fdf7 	bl	8007988 <lsm6dso16is_read_reg>
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10f      	bne.n	8007dc2 <lsm6dso16is_gy_hm_mode_set+0x42>
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	7a3b      	ldrb	r3, [r7, #8]
 8007dac:	f362 13c7 	bfi	r3, r2, #7, #1
 8007db0:	723b      	strb	r3, [r7, #8]
 8007db2:	f107 0208 	add.w	r2, r7, #8
 8007db6:	2301      	movs	r3, #1
 8007db8:	2116      	movs	r1, #22
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff fe02 	bl	80079c4 <lsm6dso16is_write_reg>
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <lsm6dso16is_gy_full_scale_set>:
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
 8007dd8:	f107 0208 	add.w	r2, r7, #8
 8007ddc:	2301      	movs	r3, #1
 8007dde:	2111      	movs	r1, #17
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fdd1 	bl	8007988 <lsm6dso16is_read_reg>
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d119      	bne.n	8007e22 <lsm6dso16is_gy_full_scale_set+0x56>
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	7a3b      	ldrb	r3, [r7, #8]
 8007df8:	f362 0383 	bfi	r3, r2, #2, #2
 8007dfc:	723b      	strb	r3, [r7, #8]
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	091b      	lsrs	r3, r3, #4
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	7a3b      	ldrb	r3, [r7, #8]
 8007e0c:	f362 0341 	bfi	r3, r2, #1, #1
 8007e10:	723b      	strb	r3, [r7, #8]
 8007e12:	f107 0208 	add.w	r2, r7, #8
 8007e16:	2301      	movs	r3, #1
 8007e18:	2111      	movs	r1, #17
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fdd2 	bl	80079c4 <lsm6dso16is_write_reg>
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <lsm6dso16is_gy_full_scale_get>:
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
 8007e36:	f107 0208 	add.w	r2, r7, #8
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	2111      	movs	r1, #17
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fda2 	bl	8007988 <lsm6dso16is_read_reg>
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	7a3b      	ldrb	r3, [r7, #8]
 8007e48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	7a3a      	ldrb	r2, [r7, #8]
 8007e52:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	2b10      	cmp	r3, #16
 8007e5c:	d838      	bhi.n	8007ed0 <lsm6dso16is_gy_full_scale_get+0xa4>
 8007e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <lsm6dso16is_gy_full_scale_get+0x38>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007eb1 	.word	0x08007eb1
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007ec1 	.word	0x08007ec1
 8007e70:	08007ec9 	.word	0x08007ec9
 8007e74:	08007ed1 	.word	0x08007ed1
 8007e78:	08007ed1 	.word	0x08007ed1
 8007e7c:	08007ed1 	.word	0x08007ed1
 8007e80:	08007ed1 	.word	0x08007ed1
 8007e84:	08007ed1 	.word	0x08007ed1
 8007e88:	08007ed1 	.word	0x08007ed1
 8007e8c:	08007ed1 	.word	0x08007ed1
 8007e90:	08007ed1 	.word	0x08007ed1
 8007e94:	08007ed1 	.word	0x08007ed1
 8007e98:	08007ed1 	.word	0x08007ed1
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007ed1 	.word	0x08007ed1
 8007ea4:	08007ea9 	.word	0x08007ea9
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e013      	b.n	8007ed8 <lsm6dso16is_gy_full_scale_get+0xac>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e00f      	b.n	8007ed8 <lsm6dso16is_gy_full_scale_get+0xac>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e00b      	b.n	8007ed8 <lsm6dso16is_gy_full_scale_get+0xac>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e007      	b.n	8007ed8 <lsm6dso16is_gy_full_scale_get+0xac>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e003      	b.n	8007ed8 <lsm6dso16is_gy_full_scale_get+0xac>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	bf00      	nop
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop

08007ee4 <lsm6dso16is_gy_data_rate_set>:
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
 8007ef0:	f107 0208 	add.w	r2, r7, #8
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	2111      	movs	r1, #17
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fd45 	bl	8007988 <lsm6dso16is_read_reg>
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d128      	bne.n	8007f58 <lsm6dso16is_gy_data_rate_set+0x74>
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <lsm6dso16is_gy_data_rate_set+0x3e>
 8007f10:	2101      	movs	r1, #1
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff ff34 	bl	8007d80 <lsm6dso16is_gy_hm_mode_set>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e007      	b.n	8007f32 <lsm6dso16is_gy_data_rate_set+0x4e>
 8007f22:	2100      	movs	r1, #0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff ff2b 	bl	8007d80 <lsm6dso16is_gy_hm_mode_set>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	7a3b      	ldrb	r3, [r7, #8]
 8007f3c:	f362 1307 	bfi	r3, r2, #4, #4
 8007f40:	723b      	strb	r3, [r7, #8]
 8007f42:	f107 0208 	add.w	r2, r7, #8
 8007f46:	2301      	movs	r3, #1
 8007f48:	2111      	movs	r1, #17
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fd3a 	bl	80079c4 <lsm6dso16is_write_reg>
 8007f50:	4602      	mov	r2, r0
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <lsm6dso16is_gy_data_rate_get>:
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	f107 0210 	add.w	r2, r7, #16
 8007f72:	2301      	movs	r3, #1
 8007f74:	2111      	movs	r1, #17
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fd06 	bl	8007988 <lsm6dso16is_read_reg>
 8007f7c:	6178      	str	r0, [r7, #20]
 8007f7e:	f107 020c 	add.w	r2, r7, #12
 8007f82:	2301      	movs	r3, #1
 8007f84:	2116      	movs	r1, #22
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fcfe 	bl	8007988 <lsm6dso16is_read_reg>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	7b3b      	ldrb	r3, [r7, #12]
 8007f96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	7c3a      	ldrb	r2, [r7, #16]
 8007fa0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	2b1a      	cmp	r3, #26
 8007faa:	f200 808d 	bhi.w	80080c8 <lsm6dso16is_gy_data_rate_get+0x164>
 8007fae:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <lsm6dso16is_gy_data_rate_get+0x50>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08008021 	.word	0x08008021
 8007fb8:	08008029 	.word	0x08008029
 8007fbc:	08008031 	.word	0x08008031
 8007fc0:	08008039 	.word	0x08008039
 8007fc4:	08008041 	.word	0x08008041
 8007fc8:	08008049 	.word	0x08008049
 8007fcc:	08008051 	.word	0x08008051
 8007fd0:	08008059 	.word	0x08008059
 8007fd4:	08008061 	.word	0x08008061
 8007fd8:	08008069 	.word	0x08008069
 8007fdc:	08008071 	.word	0x08008071
 8007fe0:	080080c9 	.word	0x080080c9
 8007fe4:	080080c9 	.word	0x080080c9
 8007fe8:	080080c9 	.word	0x080080c9
 8007fec:	080080c9 	.word	0x080080c9
 8007ff0:	080080c9 	.word	0x080080c9
 8007ff4:	080080c9 	.word	0x080080c9
 8007ff8:	08008079 	.word	0x08008079
 8007ffc:	08008081 	.word	0x08008081
 8008000:	08008089 	.word	0x08008089
 8008004:	08008091 	.word	0x08008091
 8008008:	08008099 	.word	0x08008099
 800800c:	080080a1 	.word	0x080080a1
 8008010:	080080a9 	.word	0x080080a9
 8008014:	080080b1 	.word	0x080080b1
 8008018:	080080b9 	.word	0x080080b9
 800801c:	080080c1 	.word	0x080080c1
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e053      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2201      	movs	r2, #1
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	e04f      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2202      	movs	r2, #2
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	e04b      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2203      	movs	r2, #3
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e047      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2204      	movs	r2, #4
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e043      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2205      	movs	r2, #5
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e03f      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2206      	movs	r2, #6
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e03b      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2207      	movs	r2, #7
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e037      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2208      	movs	r2, #8
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e033      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2209      	movs	r2, #9
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	e02f      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	220a      	movs	r2, #10
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e02b      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2211      	movs	r2, #17
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e027      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2212      	movs	r2, #18
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e023      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2213      	movs	r2, #19
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	e01f      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2214      	movs	r2, #20
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e01b      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2215      	movs	r2, #21
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e017      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2216      	movs	r2, #22
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	e013      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2217      	movs	r2, #23
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e00f      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2218      	movs	r2, #24
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e00b      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2219      	movs	r2, #25
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e007      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	221a      	movs	r2, #26
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	e003      	b.n	80080d0 <lsm6dso16is_gy_data_rate_get+0x16c>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	bf00      	nop
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop

080080dc <lsm6dso16is_auto_increment_set>:
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
 80080e8:	f107 0208 	add.w	r2, r7, #8
 80080ec:	2301      	movs	r3, #1
 80080ee:	2112      	movs	r1, #18
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff fc49 	bl	8007988 <lsm6dso16is_read_reg>
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10f      	bne.n	800811e <lsm6dso16is_auto_increment_set+0x42>
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	b2da      	uxtb	r2, r3
 8008106:	7a3b      	ldrb	r3, [r7, #8]
 8008108:	f362 0382 	bfi	r3, r2, #2, #1
 800810c:	723b      	strb	r3, [r7, #8]
 800810e:	f107 0208 	add.w	r2, r7, #8
 8008112:	2301      	movs	r3, #1
 8008114:	2112      	movs	r1, #18
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fc54 	bl	80079c4 <lsm6dso16is_write_reg>
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <lsm6dso16is_block_data_update_set>:
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
 8008134:	f107 0208 	add.w	r2, r7, #8
 8008138:	2301      	movs	r3, #1
 800813a:	2112      	movs	r1, #18
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fc23 	bl	8007988 <lsm6dso16is_read_reg>
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <lsm6dso16is_block_data_update_set+0x42>
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	b2da      	uxtb	r2, r3
 8008152:	7a3b      	ldrb	r3, [r7, #8]
 8008154:	f362 1386 	bfi	r3, r2, #6, #1
 8008158:	723b      	strb	r3, [r7, #8]
 800815a:	f107 0208 	add.w	r2, r7, #8
 800815e:	2301      	movs	r3, #1
 8008160:	2112      	movs	r1, #18
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fc2e 	bl	80079c4 <lsm6dso16is_write_reg>
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <lsm6dso16is_angular_rate_raw_get>:
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	f107 020c 	add.w	r2, r7, #12
 8008182:	2306      	movs	r3, #6
 8008184:	2122      	movs	r1, #34	@ 0x22
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fbfe 	bl	8007988 <lsm6dso16is_read_reg>
 800818c:	6178      	str	r0, [r7, #20]
 800818e:	7b7b      	ldrb	r3, [r7, #13]
 8008190:	b21a      	sxth	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800819c:	b29b      	uxth	r3, r3
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	7b3a      	ldrb	r2, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	b21a      	sxth	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	3302      	adds	r3, #2
 80081b4:	b212      	sxth	r2, r2
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	3302      	adds	r3, #2
 80081bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	7bba      	ldrb	r2, [r7, #14]
 80081c8:	4413      	add	r3, r2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3302      	adds	r3, #2
 80081d0:	b212      	sxth	r2, r2
 80081d2:	801a      	strh	r2, [r3, #0]
 80081d4:	7c7a      	ldrb	r2, [r7, #17]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	3304      	adds	r3, #4
 80081da:	b212      	sxth	r2, r2
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	3304      	adds	r3, #4
 80081e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	7c3a      	ldrb	r2, [r7, #16]
 80081ee:	4413      	add	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	3304      	adds	r3, #4
 80081f6:	b212      	sxth	r2, r2
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <lsm6dso16is_acceleration_raw_get>:
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
 800820e:	f107 020c 	add.w	r2, r7, #12
 8008212:	2306      	movs	r3, #6
 8008214:	2128      	movs	r1, #40	@ 0x28
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fbb6 	bl	8007988 <lsm6dso16is_read_reg>
 800821c:	6178      	str	r0, [r7, #20]
 800821e:	7b7b      	ldrb	r3, [r7, #13]
 8008220:	b21a      	sxth	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800822c:	b29b      	uxth	r3, r3
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	7b3a      	ldrb	r2, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	b29b      	uxth	r3, r3
 8008238:	b21a      	sxth	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	7bfa      	ldrb	r2, [r7, #15]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	3302      	adds	r3, #2
 8008244:	b212      	sxth	r2, r2
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3302      	adds	r3, #2
 800824c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008250:	b29b      	uxth	r3, r3
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	b29b      	uxth	r3, r3
 8008256:	7bba      	ldrb	r2, [r7, #14]
 8008258:	4413      	add	r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	3302      	adds	r3, #2
 8008260:	b212      	sxth	r2, r2
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	7c7a      	ldrb	r2, [r7, #17]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	3304      	adds	r3, #4
 800826a:	b212      	sxth	r2, r2
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008276:	b29b      	uxth	r3, r3
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	b29b      	uxth	r3, r3
 800827c:	7c3a      	ldrb	r2, [r7, #16]
 800827e:	4413      	add	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	3304      	adds	r3, #4
 8008286:	b212      	sxth	r2, r2
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <LSM6DSV16X_RegisterBusIO>:
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <LSM6DSV16X_RegisterBusIO+0x1c>
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	e05d      	b.n	800836c <LSM6DSV16X_RegisterBusIO+0xd8>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	605a      	str	r2, [r3, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	7b1a      	ldrb	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	731a      	strb	r2, [r3, #12]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	611a      	str	r2, [r3, #16]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	695a      	ldr	r2, [r3, #20]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	615a      	str	r2, [r3, #20]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	619a      	str	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a23      	ldr	r2, [pc, #140]	@ (8008378 <LSM6DSV16X_RegisterBusIO+0xe4>)
 80082ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a22      	ldr	r2, [pc, #136]	@ (800837c <LSM6DSV16X_RegisterBusIO+0xe8>)
 80082f2:	621a      	str	r2, [r3, #32]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	69da      	ldr	r2, [r3, #28]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <LSM6DSV16X_RegisterBusIO+0x7e>
 800830a:	f04f 33ff 	mov.w	r3, #4294967295
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e02c      	b.n	800836c <LSM6DSV16X_RegisterBusIO+0xd8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4798      	blx	r3
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <LSM6DSV16X_RegisterBusIO+0x92>
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e022      	b.n	800836c <LSM6DSV16X_RegisterBusIO+0xd8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d11e      	bne.n	800836c <LSM6DSV16X_RegisterBusIO+0xd8>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008334:	2b00      	cmp	r3, #0
 8008336:	d119      	bne.n	800836c <LSM6DSV16X_RegisterBusIO+0xd8>
 8008338:	2304      	movs	r3, #4
 800833a:	72fb      	strb	r3, [r7, #11]
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	461a      	mov	r2, r3
 8008340:	2112      	movs	r1, #18
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 ff18 	bl	8009178 <LSM6DSV16X_Write_Reg>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <LSM6DSV16X_RegisterBusIO+0xc0>
 800834e:	f04f 33ff 	mov.w	r3, #4294967295
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	461a      	mov	r2, r3
 8008358:	2103      	movs	r1, #3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 ff0c 	bl	8009178 <LSM6DSV16X_Write_Reg>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <LSM6DSV16X_RegisterBusIO+0xd8>
 8008366:	f04f 33ff 	mov.w	r3, #4294967295
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	080096b9 	.word	0x080096b9
 800837c:	080096ef 	.word	0x080096ef

08008380 <LSM6DSV16X_Init>:
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 ff0f 	bl	80091ae <LSM6DSV16X_Set_Mem_Bank>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <LSM6DSV16X_Init+0x1c>
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	e070      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3320      	adds	r3, #32
 80083a0:	2101      	movs	r1, #1
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fcfe 	bl	8009da4 <lsm6dsv16x_auto_increment_set>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <LSM6DSV16X_Init+0x34>
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295
 80083b2:	e064      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3320      	adds	r3, #32
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fd18 	bl	8009df0 <lsm6dsv16x_block_data_update_set>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <LSM6DSV16X_Init+0x4c>
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ca:	e058      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3320      	adds	r3, #32
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 feae 	bl	800a134 <lsm6dsv16x_fifo_mode_set>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <LSM6DSV16X_Init+0x64>
 80083de:	f04f 33ff 	mov.w	r3, #4294967295
 80083e2:	e04c      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2206      	movs	r2, #6
 80083e8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3320      	adds	r3, #32
 80083f0:	2100      	movs	r1, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fa14 	bl	8009820 <lsm6dsv16x_xl_data_rate_set>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <LSM6DSV16X_Init+0x84>
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008402:	e03c      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3320      	adds	r3, #32
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fd94 	bl	8009f38 <lsm6dsv16x_xl_full_scale_set>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <LSM6DSV16X_Init+0x9c>
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	e030      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2206      	movs	r2, #6
 8008420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3320      	adds	r3, #32
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f001 fb5a 	bl	8009ae4 <lsm6dsv16x_gy_data_rate_set>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <LSM6DSV16X_Init+0xbc>
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	e020      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3320      	adds	r3, #32
 8008440:	2104      	movs	r1, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fcfa 	bl	8009e3c <lsm6dsv16x_gy_full_scale_set>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <LSM6DSV16X_Init+0xd4>
 800844e:	f04f 33ff 	mov.w	r3, #4294967295
 8008452:	e014      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 8008454:	7b3b      	ldrb	r3, [r7, #12]
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	733b      	strb	r3, [r7, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3320      	adds	r3, #32
 8008460:	7b39      	ldrb	r1, [r7, #12]
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fe8c 	bl	800a180 <lsm6dsv16x_ah_qvar_mode_set>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <LSM6DSV16X_Init+0xf4>
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	e004      	b.n	800847e <LSM6DSV16X_Init+0xfe>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800847c:	2300      	movs	r3, #0
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <LSM6DSV16X_DeInit>:
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f898 	bl	80085c4 <LSM6DSV16X_ACC_Disable>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <LSM6DSV16X_DeInit+0x1a>
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	e025      	b.n	80084ec <LSM6DSV16X_DeInit+0x66>
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fb6a 	bl	8008b7a <LSM6DSV16X_GYRO_Disable>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <LSM6DSV16X_DeInit+0x2c>
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	e01c      	b.n	80084ec <LSM6DSV16X_DeInit+0x66>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80084c2:	7b3b      	ldrb	r3, [r7, #12]
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	733b      	strb	r3, [r7, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3320      	adds	r3, #32
 80084ce:	7b39      	ldrb	r1, [r7, #12]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 fe55 	bl	800a180 <lsm6dsv16x_ah_qvar_mode_set>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <LSM6DSV16X_DeInit+0x5c>
 80084dc:	f04f 33ff 	mov.w	r3, #4294967295
 80084e0:	e004      	b.n	80084ec <LSM6DSV16X_DeInit+0x66>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80084ea:	2300      	movs	r3, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <LSM6DSV16X_ReadID>:
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3320      	adds	r3, #32
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	4618      	mov	r0, r3
 8008506:	f001 f97a 	bl	80097fe <lsm6dsv16x_device_id_get>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <LSM6DSV16X_ReadID+0x22>
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	e000      	b.n	8008518 <LSM6DSV16X_ReadID+0x24>
 8008516:	2300      	movs	r3, #0
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <LSM6DSV16X_GetCapabilities>:
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2201      	movs	r2, #1
 8008534:	705a      	strb	r2, [r3, #1]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2200      	movs	r2, #0
 800853a:	709a      	strb	r2, [r3, #2]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	70da      	strb	r2, [r3, #3]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008548:	605a      	str	r2, [r3, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2210      	movs	r2, #16
 800854e:	609a      	str	r2, [r3, #8]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	4a07      	ldr	r2, [pc, #28]	@ (8008578 <LSM6DSV16X_GetCapabilities+0x58>)
 800855a:	611a      	str	r2, [r3, #16]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	4a06      	ldr	r2, [pc, #24]	@ (8008578 <LSM6DSV16X_GetCapabilities+0x58>)
 8008560:	615a      	str	r2, [r3, #20]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	619a      	str	r2, [r3, #24]
 800856a:	2300      	movs	r3, #0
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	45f00000 	.word	0x45f00000

0800857c <LSM6DSV16X_ACC_Enable>:
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <LSM6DSV16X_ACC_Enable+0x16>
 800858e:	2300      	movs	r3, #0
 8008590:	e014      	b.n	80085bc <LSM6DSV16X_ACC_Enable+0x40>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f103 0220 	add.w	r2, r3, #32
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f001 f93d 	bl	8009820 <lsm6dsv16x_xl_data_rate_set>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <LSM6DSV16X_ACC_Enable+0x36>
 80085ac:	f04f 33ff 	mov.w	r3, #4294967295
 80085b0:	e004      	b.n	80085bc <LSM6DSV16X_ACC_Enable+0x40>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80085ba:	2300      	movs	r3, #0
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <LSM6DSV16X_ACC_Disable>:
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <LSM6DSV16X_ACC_Disable+0x16>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e01f      	b.n	800861a <LSM6DSV16X_ACC_Disable+0x56>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f103 0220 	add.w	r2, r3, #32
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3333      	adds	r3, #51	@ 0x33
 80085e4:	4619      	mov	r1, r3
 80085e6:	4610      	mov	r0, r2
 80085e8:	f001 f96c 	bl	80098c4 <lsm6dsv16x_xl_data_rate_get>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <LSM6DSV16X_ACC_Disable+0x34>
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295
 80085f6:	e010      	b.n	800861a <LSM6DSV16X_ACC_Disable+0x56>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3320      	adds	r3, #32
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 f90e 	bl	8009820 <lsm6dsv16x_xl_data_rate_set>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <LSM6DSV16X_ACC_Disable+0x4c>
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
 800860e:	e004      	b.n	800861a <LSM6DSV16X_ACC_Disable+0x56>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008618:	2300      	movs	r3, #0
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <LSM6DSV16X_ACC_GetSensitivity>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3320      	adds	r3, #32
 8008636:	f107 020b 	add.w	r2, r7, #11
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fca1 	bl	8009f84 <lsm6dsv16x_xl_full_scale_get>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <LSM6DSV16X_ACC_GetSensitivity+0x2a>
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
 800864c:	e023      	b.n	8008696 <LSM6DSV16X_ACC_GetSensitivity+0x72>
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d81b      	bhi.n	800868c <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	0800866d 	.word	0x0800866d
 8008660:	08008675 	.word	0x08008675
 8008664:	0800867d 	.word	0x0800867d
 8008668:	08008685 	.word	0x08008685
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	4a0c      	ldr	r2, [pc, #48]	@ (80086a0 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e00f      	b.n	8008694 <LSM6DSV16X_ACC_GetSensitivity+0x70>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	4a0b      	ldr	r2, [pc, #44]	@ (80086a4 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e00b      	b.n	8008694 <LSM6DSV16X_ACC_GetSensitivity+0x70>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4a0a      	ldr	r2, [pc, #40]	@ (80086a8 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e007      	b.n	8008694 <LSM6DSV16X_ACC_GetSensitivity+0x70>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	4a09      	ldr	r2, [pc, #36]	@ (80086ac <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e003      	b.n	8008694 <LSM6DSV16X_ACC_GetSensitivity+0x70>
 800868c:	f04f 33ff 	mov.w	r3, #4294967295
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	bf00      	nop
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	3d79db23 	.word	0x3d79db23
 80086a4:	3df9db23 	.word	0x3df9db23
 80086a8:	3e79db23 	.word	0x3e79db23
 80086ac:	3ef9db23 	.word	0x3ef9db23

080086b0 <LSM6DSV16X_ACC_GetOutputDataRate>:
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3320      	adds	r3, #32
 80086c2:	f107 020b 	add.w	r2, r7, #11
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 f8fb 	bl	80098c4 <lsm6dsv16x_xl_data_rate_get>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	e0ea      	b.n	80088b0 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	2b2c      	cmp	r3, #44	@ 0x2c
 80086de:	f200 80e2 	bhi.w	80088a6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	0800879d 	.word	0x0800879d
 80086ec:	080087a7 	.word	0x080087a7
 80086f0:	080087af 	.word	0x080087af
 80086f4:	080087bf 	.word	0x080087bf
 80086f8:	080087d7 	.word	0x080087d7
 80086fc:	080087ef 	.word	0x080087ef
 8008700:	08008807 	.word	0x08008807
 8008704:	0800881f 	.word	0x0800881f
 8008708:	08008837 	.word	0x08008837
 800870c:	0800884f 	.word	0x0800884f
 8008710:	08008867 	.word	0x08008867
 8008714:	0800887f 	.word	0x0800887f
 8008718:	08008897 	.word	0x08008897
 800871c:	080088a7 	.word	0x080088a7
 8008720:	080088a7 	.word	0x080088a7
 8008724:	080088a7 	.word	0x080088a7
 8008728:	080088a7 	.word	0x080088a7
 800872c:	080088a7 	.word	0x080088a7
 8008730:	080088a7 	.word	0x080088a7
 8008734:	080087c7 	.word	0x080087c7
 8008738:	080087df 	.word	0x080087df
 800873c:	080087f7 	.word	0x080087f7
 8008740:	0800880f 	.word	0x0800880f
 8008744:	08008827 	.word	0x08008827
 8008748:	0800883f 	.word	0x0800883f
 800874c:	08008857 	.word	0x08008857
 8008750:	0800886f 	.word	0x0800886f
 8008754:	08008887 	.word	0x08008887
 8008758:	0800889f 	.word	0x0800889f
 800875c:	080088a7 	.word	0x080088a7
 8008760:	080088a7 	.word	0x080088a7
 8008764:	080088a7 	.word	0x080088a7
 8008768:	080088a7 	.word	0x080088a7
 800876c:	080088a7 	.word	0x080088a7
 8008770:	080088a7 	.word	0x080088a7
 8008774:	080087b7 	.word	0x080087b7
 8008778:	080087cf 	.word	0x080087cf
 800877c:	080087e7 	.word	0x080087e7
 8008780:	080087ff 	.word	0x080087ff
 8008784:	08008817 	.word	0x08008817
 8008788:	0800882f 	.word	0x0800882f
 800878c:	08008847 	.word	0x08008847
 8008790:	0800885f 	.word	0x0800885f
 8008794:	08008877 	.word	0x08008877
 8008798:	0800888f 	.word	0x0800888f
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e083      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	4a43      	ldr	r2, [pc, #268]	@ (80088b8 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	e07f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	4a42      	ldr	r2, [pc, #264]	@ (80088bc <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e07b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	4a41      	ldr	r2, [pc, #260]	@ (80088c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e077      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	4a40      	ldr	r2, [pc, #256]	@ (80088c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e073      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	4a3f      	ldr	r2, [pc, #252]	@ (80088c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e06f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	4a3e      	ldr	r2, [pc, #248]	@ (80088cc <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e06b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	4a3d      	ldr	r2, [pc, #244]	@ (80088d0 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	e067      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	4a3c      	ldr	r2, [pc, #240]	@ (80088d4 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e063      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	4a3b      	ldr	r2, [pc, #236]	@ (80088d8 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e05f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	4a3a      	ldr	r2, [pc, #232]	@ (80088dc <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	e05b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	4a39      	ldr	r2, [pc, #228]	@ (80088e0 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e057      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	4a38      	ldr	r2, [pc, #224]	@ (80088e4 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e053      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	4a37      	ldr	r2, [pc, #220]	@ (80088e8 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	e04f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	4a36      	ldr	r2, [pc, #216]	@ (80088ec <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	e04b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	4a35      	ldr	r2, [pc, #212]	@ (80088f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	e047      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	4a34      	ldr	r2, [pc, #208]	@ (80088f4 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e043      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	4a33      	ldr	r2, [pc, #204]	@ (80088f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e03f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	4a32      	ldr	r2, [pc, #200]	@ (80088fc <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e03b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	4a31      	ldr	r2, [pc, #196]	@ (8008900 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e037      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	4a30      	ldr	r2, [pc, #192]	@ (8008904 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e033      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	4a2f      	ldr	r2, [pc, #188]	@ (8008908 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e02f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	4a2e      	ldr	r2, [pc, #184]	@ (800890c <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e02b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	4a2d      	ldr	r2, [pc, #180]	@ (8008910 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e027      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	4a2c      	ldr	r2, [pc, #176]	@ (8008914 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e023      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	4a2b      	ldr	r2, [pc, #172]	@ (8008918 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	e01f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	4a2a      	ldr	r2, [pc, #168]	@ (800891c <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e01b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	4a29      	ldr	r2, [pc, #164]	@ (8008920 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e017      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	4a28      	ldr	r2, [pc, #160]	@ (8008924 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e013      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	4a27      	ldr	r2, [pc, #156]	@ (8008928 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e00f      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	4a26      	ldr	r2, [pc, #152]	@ (800892c <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e00b      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	4a25      	ldr	r2, [pc, #148]	@ (8008930 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e007      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	4a24      	ldr	r2, [pc, #144]	@ (8008934 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e003      	b.n	80088ae <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>
 80088a6:	f04f 33ff 	mov.w	r3, #4294967295
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	bf00      	nop
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	3ff00000 	.word	0x3ff00000
 80088bc:	40f00000 	.word	0x40f00000
 80088c0:	41480000 	.word	0x41480000
 80088c4:	41700000 	.word	0x41700000
 80088c8:	417a0000 	.word	0x417a0000
 80088cc:	41c80000 	.word	0x41c80000
 80088d0:	41f00000 	.word	0x41f00000
 80088d4:	41fa0000 	.word	0x41fa0000
 80088d8:	42480000 	.word	0x42480000
 80088dc:	42700000 	.word	0x42700000
 80088e0:	427a0000 	.word	0x427a0000
 80088e4:	42c80000 	.word	0x42c80000
 80088e8:	42f00000 	.word	0x42f00000
 80088ec:	42fa0000 	.word	0x42fa0000
 80088f0:	43480000 	.word	0x43480000
 80088f4:	43700000 	.word	0x43700000
 80088f8:	437a0000 	.word	0x437a0000
 80088fc:	43c80000 	.word	0x43c80000
 8008900:	43f00000 	.word	0x43f00000
 8008904:	43fa0000 	.word	0x43fa0000
 8008908:	44480000 	.word	0x44480000
 800890c:	44700000 	.word	0x44700000
 8008910:	447a0000 	.word	0x447a0000
 8008914:	44c80000 	.word	0x44c80000
 8008918:	44f00000 	.word	0x44f00000
 800891c:	44fa0000 	.word	0x44fa0000
 8008920:	45480000 	.word	0x45480000
 8008924:	45700000 	.word	0x45700000
 8008928:	457a0000 	.word	0x457a0000
 800892c:	45c80000 	.word	0x45c80000
 8008930:	45f00000 	.word	0x45f00000
 8008934:	45fa0000 	.word	0x45fa0000

08008938 <LSM6DSV16X_ACC_SetOutputDataRate>:
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	ed87 0a00 	vstr	s0, [r7]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800894a:	2b01      	cmp	r3, #1
 800894c:	d106      	bne.n	800895c <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
 800894e:	ed97 0a00 	vldr	s0, [r7]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fc52 	bl	80091fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008958:	4603      	mov	r3, r0
 800895a:	e005      	b.n	8008968 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
 800895c:	ed97 0a00 	vldr	s0, [r7]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fced 	bl	8009340 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 8008966:	4603      	mov	r3, r0
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <LSM6DSV16X_ACC_GetFullScale>:
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3320      	adds	r3, #32
 8008982:	f107 020b 	add.w	r2, r7, #11
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fafb 	bl	8009f84 <lsm6dsv16x_xl_full_scale_get>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <LSM6DSV16X_ACC_GetFullScale+0x2a>
 8008994:	f04f 33ff 	mov.w	r3, #4294967295
 8008998:	e023      	b.n	80089e2 <LSM6DSV16X_ACC_GetFullScale+0x72>
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d81b      	bhi.n	80089d8 <LSM6DSV16X_ACC_GetFullScale+0x68>
 80089a0:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80089a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a6:	bf00      	nop
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089c1 	.word	0x080089c1
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2202      	movs	r2, #2
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e00f      	b.n	80089e0 <LSM6DSV16X_ACC_GetFullScale+0x70>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2204      	movs	r2, #4
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	e00b      	b.n	80089e0 <LSM6DSV16X_ACC_GetFullScale+0x70>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2208      	movs	r2, #8
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	e007      	b.n	80089e0 <LSM6DSV16X_ACC_GetFullScale+0x70>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2210      	movs	r2, #16
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	e003      	b.n	80089e0 <LSM6DSV16X_ACC_GetFullScale+0x70>
 80089d8:	f04f 33ff 	mov.w	r3, #4294967295
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	bf00      	nop
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop

080089ec <LSM6DSV16X_ACC_SetFullScale>:
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	dd0b      	ble.n	8008a14 <LSM6DSV16X_ACC_SetFullScale+0x28>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	dd06      	ble.n	8008a10 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	dc01      	bgt.n	8008a0c <LSM6DSV16X_ACC_SetFullScale+0x20>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e004      	b.n	8008a16 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e002      	b.n	8008a16 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3320      	adds	r3, #32
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f001 fa89 	bl	8009f38 <lsm6dsv16x_xl_full_scale_set>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <LSM6DSV16X_ACC_SetFullScale+0x46>
 8008a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a30:	e000      	b.n	8008a34 <LSM6DSV16X_ACC_SetFullScale+0x48>
 8008a32:	2300      	movs	r3, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <LSM6DSV16X_ACC_GetAxesRaw>:
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3320      	adds	r3, #32
 8008a4a:	f107 0208 	add.w	r2, r7, #8
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fb22 	bl	800a09a <lsm6dsv16x_acceleration_raw_get>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a60:	e00c      	b.n	8008a7c <LSM6DSV16X_ACC_GetAxesRaw+0x40>
 8008a62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	805a      	strh	r2, [r3, #2]
 8008a72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	809a      	strh	r2, [r3, #4]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <LSM6DSV16X_ACC_GetAxes>:
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3320      	adds	r3, #32
 8008a98:	f107 0210 	add.w	r2, r7, #16
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 fafb 	bl	800a09a <lsm6dsv16x_acceleration_raw_get>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <LSM6DSV16X_ACC_GetAxes+0x2c>
 8008aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008aae:	e03c      	b.n	8008b2a <LSM6DSV16X_ACC_GetAxes+0xa6>
 8008ab0:	f107 030c 	add.w	r3, r7, #12
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fdb4 	bl	8008624 <LSM6DSV16X_ACC_GetSensitivity>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <LSM6DSV16X_ACC_GetAxes+0x44>
 8008ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac6:	e030      	b.n	8008b2a <LSM6DSV16X_ACC_GetAxes+0xa6>
 8008ac8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ae0:	ee17 2a90 	vmov	r2, s15
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b00:	ee17 2a90 	vmov	r2, s15
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	605a      	str	r2, [r3, #4]
 8008b08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b20:	ee17 2a90 	vmov	r2, s15
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	609a      	str	r2, [r3, #8]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <LSM6DSV16X_GYRO_Enable>:
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <LSM6DSV16X_GYRO_Enable+0x16>
 8008b44:	2300      	movs	r3, #0
 8008b46:	e014      	b.n	8008b72 <LSM6DSV16X_GYRO_Enable+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f103 0220 	add.w	r2, r3, #32
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f000 ffc4 	bl	8009ae4 <lsm6dsv16x_gy_data_rate_set>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <LSM6DSV16X_GYRO_Enable+0x36>
 8008b62:	f04f 33ff 	mov.w	r3, #4294967295
 8008b66:	e004      	b.n	8008b72 <LSM6DSV16X_GYRO_Enable+0x40>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8008b70:	2300      	movs	r3, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <LSM6DSV16X_GYRO_Disable>:
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <LSM6DSV16X_GYRO_Disable+0x16>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e01f      	b.n	8008bd0 <LSM6DSV16X_GYRO_Disable+0x56>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0220 	add.w	r2, r3, #32
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3334      	adds	r3, #52	@ 0x34
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f000 fff1 	bl	8009b84 <lsm6dsv16x_gy_data_rate_get>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <LSM6DSV16X_GYRO_Disable+0x34>
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	e010      	b.n	8008bd0 <LSM6DSV16X_GYRO_Disable+0x56>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3320      	adds	r3, #32
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 ff95 	bl	8009ae4 <lsm6dsv16x_gy_data_rate_set>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <LSM6DSV16X_GYRO_Disable+0x4c>
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc4:	e004      	b.n	8008bd0 <LSM6DSV16X_GYRO_Disable+0x56>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <LSM6DSV16X_GYRO_GetSensitivity>:
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3320      	adds	r3, #32
 8008bea:	f107 020b 	add.w	r2, r7, #11
 8008bee:	4611      	mov	r1, r2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f001 f949 	bl	8009e88 <lsm6dsv16x_gy_full_scale_get>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
 8008bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008c00:	e03d      	b.n	8008c7e <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	2b0c      	cmp	r3, #12
 8008c06:	d835      	bhi.n	8008c74 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8008c08:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c45 	.word	0x08008c45
 8008c14:	08008c4d 	.word	0x08008c4d
 8008c18:	08008c55 	.word	0x08008c55
 8008c1c:	08008c5d 	.word	0x08008c5d
 8008c20:	08008c65 	.word	0x08008c65
 8008c24:	08008c75 	.word	0x08008c75
 8008c28:	08008c75 	.word	0x08008c75
 8008c2c:	08008c75 	.word	0x08008c75
 8008c30:	08008c75 	.word	0x08008c75
 8008c34:	08008c75 	.word	0x08008c75
 8008c38:	08008c75 	.word	0x08008c75
 8008c3c:	08008c75 	.word	0x08008c75
 8008c40:	08008c6d 	.word	0x08008c6d
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	4a10      	ldr	r2, [pc, #64]	@ (8008c88 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	e017      	b.n	8008c7c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8008c8c <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	e013      	b.n	8008c7c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	4a0e      	ldr	r2, [pc, #56]	@ (8008c90 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	e00f      	b.n	8008c7c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c94 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	e00b      	b.n	8008c7c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	4a0c      	ldr	r2, [pc, #48]	@ (8008c98 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e007      	b.n	8008c7c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8008c9c <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	e003      	b.n	8008c7c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>
 8008c74:	f04f 33ff 	mov.w	r3, #4294967295
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	bf00      	nop
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	408c0000 	.word	0x408c0000
 8008c8c:	410c0000 	.word	0x410c0000
 8008c90:	418c0000 	.word	0x418c0000
 8008c94:	420c0000 	.word	0x420c0000
 8008c98:	428c0000 	.word	0x428c0000
 8008c9c:	430c0000 	.word	0x430c0000

08008ca0 <LSM6DSV16X_GYRO_GetOutputDataRate>:
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3320      	adds	r3, #32
 8008cb2:	f107 020b 	add.w	r2, r7, #11
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 ff63 	bl	8009b84 <lsm6dsv16x_gy_data_rate_get>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	e0ea      	b.n	8008ea0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	2b2c      	cmp	r3, #44	@ 0x2c
 8008cce:	f200 80e2 	bhi.w	8008e96 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8008cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008d8d 	.word	0x08008d8d
 8008cdc:	08008d97 	.word	0x08008d97
 8008ce0:	08008d9f 	.word	0x08008d9f
 8008ce4:	08008daf 	.word	0x08008daf
 8008ce8:	08008dc7 	.word	0x08008dc7
 8008cec:	08008ddf 	.word	0x08008ddf
 8008cf0:	08008df7 	.word	0x08008df7
 8008cf4:	08008e0f 	.word	0x08008e0f
 8008cf8:	08008e27 	.word	0x08008e27
 8008cfc:	08008e3f 	.word	0x08008e3f
 8008d00:	08008e57 	.word	0x08008e57
 8008d04:	08008e6f 	.word	0x08008e6f
 8008d08:	08008e87 	.word	0x08008e87
 8008d0c:	08008e97 	.word	0x08008e97
 8008d10:	08008e97 	.word	0x08008e97
 8008d14:	08008e97 	.word	0x08008e97
 8008d18:	08008e97 	.word	0x08008e97
 8008d1c:	08008e97 	.word	0x08008e97
 8008d20:	08008e97 	.word	0x08008e97
 8008d24:	08008db7 	.word	0x08008db7
 8008d28:	08008dcf 	.word	0x08008dcf
 8008d2c:	08008de7 	.word	0x08008de7
 8008d30:	08008dff 	.word	0x08008dff
 8008d34:	08008e17 	.word	0x08008e17
 8008d38:	08008e2f 	.word	0x08008e2f
 8008d3c:	08008e47 	.word	0x08008e47
 8008d40:	08008e5f 	.word	0x08008e5f
 8008d44:	08008e77 	.word	0x08008e77
 8008d48:	08008e8f 	.word	0x08008e8f
 8008d4c:	08008e97 	.word	0x08008e97
 8008d50:	08008e97 	.word	0x08008e97
 8008d54:	08008e97 	.word	0x08008e97
 8008d58:	08008e97 	.word	0x08008e97
 8008d5c:	08008e97 	.word	0x08008e97
 8008d60:	08008e97 	.word	0x08008e97
 8008d64:	08008da7 	.word	0x08008da7
 8008d68:	08008dbf 	.word	0x08008dbf
 8008d6c:	08008dd7 	.word	0x08008dd7
 8008d70:	08008def 	.word	0x08008def
 8008d74:	08008e07 	.word	0x08008e07
 8008d78:	08008e1f 	.word	0x08008e1f
 8008d7c:	08008e37 	.word	0x08008e37
 8008d80:	08008e4f 	.word	0x08008e4f
 8008d84:	08008e67 	.word	0x08008e67
 8008d88:	08008e7f 	.word	0x08008e7f
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e083      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	4a43      	ldr	r2, [pc, #268]	@ (8008ea8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e07f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	4a42      	ldr	r2, [pc, #264]	@ (8008eac <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e07b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	4a41      	ldr	r2, [pc, #260]	@ (8008eb0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	e077      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	4a40      	ldr	r2, [pc, #256]	@ (8008eb4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e073      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	4a3f      	ldr	r2, [pc, #252]	@ (8008eb8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e06f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8008ebc <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e06b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8008ec0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	e067      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ec4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e063      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8008ec8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	e05f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	4a3a      	ldr	r2, [pc, #232]	@ (8008ecc <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	e05b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	4a39      	ldr	r2, [pc, #228]	@ (8008ed0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e057      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	4a38      	ldr	r2, [pc, #224]	@ (8008ed4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e053      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	4a37      	ldr	r2, [pc, #220]	@ (8008ed8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e04f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	4a36      	ldr	r2, [pc, #216]	@ (8008edc <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e04b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	4a35      	ldr	r2, [pc, #212]	@ (8008ee0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	e047      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	4a34      	ldr	r2, [pc, #208]	@ (8008ee4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	e043      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	4a33      	ldr	r2, [pc, #204]	@ (8008ee8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	e03f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	4a32      	ldr	r2, [pc, #200]	@ (8008eec <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	e03b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	4a31      	ldr	r2, [pc, #196]	@ (8008ef0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e037      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	4a30      	ldr	r2, [pc, #192]	@ (8008ef4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e033      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	4a2f      	ldr	r2, [pc, #188]	@ (8008ef8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e02f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	4a2e      	ldr	r2, [pc, #184]	@ (8008efc <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e02b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	4a2d      	ldr	r2, [pc, #180]	@ (8008f00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e027      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	4a2c      	ldr	r2, [pc, #176]	@ (8008f04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e023      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	4a2b      	ldr	r2, [pc, #172]	@ (8008f08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e01f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	4a2a      	ldr	r2, [pc, #168]	@ (8008f0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e01b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	4a29      	ldr	r2, [pc, #164]	@ (8008f10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	e017      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	4a28      	ldr	r2, [pc, #160]	@ (8008f14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e013      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	4a27      	ldr	r2, [pc, #156]	@ (8008f18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	e00f      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	4a26      	ldr	r2, [pc, #152]	@ (8008f1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e00b      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	4a25      	ldr	r2, [pc, #148]	@ (8008f20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e007      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	4a24      	ldr	r2, [pc, #144]	@ (8008f24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e003      	b.n	8008e9e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>
 8008e96:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	bf00      	nop
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	3ff00000 	.word	0x3ff00000
 8008eac:	40f00000 	.word	0x40f00000
 8008eb0:	41480000 	.word	0x41480000
 8008eb4:	41700000 	.word	0x41700000
 8008eb8:	417a0000 	.word	0x417a0000
 8008ebc:	41c80000 	.word	0x41c80000
 8008ec0:	41f00000 	.word	0x41f00000
 8008ec4:	41fa0000 	.word	0x41fa0000
 8008ec8:	42480000 	.word	0x42480000
 8008ecc:	42700000 	.word	0x42700000
 8008ed0:	427a0000 	.word	0x427a0000
 8008ed4:	42c80000 	.word	0x42c80000
 8008ed8:	42f00000 	.word	0x42f00000
 8008edc:	42fa0000 	.word	0x42fa0000
 8008ee0:	43480000 	.word	0x43480000
 8008ee4:	43700000 	.word	0x43700000
 8008ee8:	437a0000 	.word	0x437a0000
 8008eec:	43c80000 	.word	0x43c80000
 8008ef0:	43f00000 	.word	0x43f00000
 8008ef4:	43fa0000 	.word	0x43fa0000
 8008ef8:	44480000 	.word	0x44480000
 8008efc:	44700000 	.word	0x44700000
 8008f00:	447a0000 	.word	0x447a0000
 8008f04:	44c80000 	.word	0x44c80000
 8008f08:	44f00000 	.word	0x44f00000
 8008f0c:	44fa0000 	.word	0x44fa0000
 8008f10:	45480000 	.word	0x45480000
 8008f14:	45700000 	.word	0x45700000
 8008f18:	457a0000 	.word	0x457a0000
 8008f1c:	45c80000 	.word	0x45c80000
 8008f20:	45f00000 	.word	0x45f00000
 8008f24:	45fa0000 	.word	0x45fa0000

08008f28 <LSM6DSV16X_GYRO_SetOutputDataRate>:
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	ed87 0a00 	vstr	s0, [r7]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d106      	bne.n	8008f4c <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
 8008f3e:	ed97 0a00 	vldr	s0, [r7]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa94 	bl	8009470 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	e005      	b.n	8008f58 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
 8008f4c:	ed97 0a00 	vldr	s0, [r7]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fb23 	bl	800959c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008f56:	4603      	mov	r3, r0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <LSM6DSV16X_GYRO_GetFullScale>:
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3320      	adds	r3, #32
 8008f72:	f107 020b 	add.w	r2, r7, #11
 8008f76:	4611      	mov	r1, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 ff85 	bl	8009e88 <lsm6dsv16x_gy_full_scale_get>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <LSM6DSV16X_GYRO_GetFullScale+0x2a>
 8008f84:	f04f 33ff 	mov.w	r3, #4294967295
 8008f88:	e041      	b.n	800900e <LSM6DSV16X_GYRO_GetFullScale+0xae>
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	2b0c      	cmp	r3, #12
 8008f8e:	d839      	bhi.n	8009004 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008f90:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fcd 	.word	0x08008fcd
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fdd 	.word	0x08008fdd
 8008fa4:	08008fe7 	.word	0x08008fe7
 8008fa8:	08008ff1 	.word	0x08008ff1
 8008fac:	08009005 	.word	0x08009005
 8008fb0:	08009005 	.word	0x08009005
 8008fb4:	08009005 	.word	0x08009005
 8008fb8:	08009005 	.word	0x08009005
 8008fbc:	08009005 	.word	0x08009005
 8008fc0:	08009005 	.word	0x08009005
 8008fc4:	08009005 	.word	0x08009005
 8008fc8:	08008ffb 	.word	0x08008ffb
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	227d      	movs	r2, #125	@ 0x7d
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	e01b      	b.n	800900c <LSM6DSV16X_GYRO_GetFullScale+0xac>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	22fa      	movs	r2, #250	@ 0xfa
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	e017      	b.n	800900c <LSM6DSV16X_GYRO_GetFullScale+0xac>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	e012      	b.n	800900c <LSM6DSV16X_GYRO_GetFullScale+0xac>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e00d      	b.n	800900c <LSM6DSV16X_GYRO_GetFullScale+0xac>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	e008      	b.n	800900c <LSM6DSV16X_GYRO_GetFullScale+0xac>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	e003      	b.n	800900c <LSM6DSV16X_GYRO_GetFullScale+0xac>
 8009004:	f04f 33ff 	mov.w	r3, #4294967295
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	bf00      	nop
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop

08009018 <LSM6DSV16X_GYRO_SetFullScale>:
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b7d      	cmp	r3, #125	@ 0x7d
 8009026:	dd18      	ble.n	800905a <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2bfa      	cmp	r3, #250	@ 0xfa
 800902c:	dd13      	ble.n	8009056 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009034:	dd0d      	ble.n	8009052 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800903c:	dd07      	ble.n	800904e <LSM6DSV16X_GYRO_SetFullScale+0x36>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009044:	dc01      	bgt.n	800904a <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8009046:	2304      	movs	r3, #4
 8009048:	e008      	b.n	800905c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800904a:	230c      	movs	r3, #12
 800904c:	e006      	b.n	800905c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800904e:	2303      	movs	r3, #3
 8009050:	e004      	b.n	800905c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8009052:	2302      	movs	r3, #2
 8009054:	e002      	b.n	800905c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3320      	adds	r3, #32
 8009062:	7bfa      	ldrb	r2, [r7, #15]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fee8 	bl	8009e3c <lsm6dsv16x_gy_full_scale_set>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <LSM6DSV16X_GYRO_SetFullScale+0x60>
 8009072:	f04f 33ff 	mov.w	r3, #4294967295
 8009076:	e000      	b.n	800907a <LSM6DSV16X_GYRO_SetFullScale+0x62>
 8009078:	2300      	movs	r3, #0
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <LSM6DSV16X_GYRO_GetAxesRaw>:
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3320      	adds	r3, #32
 8009090:	f107 0208 	add.w	r2, r7, #8
 8009094:	4611      	mov	r1, r2
 8009096:	4618      	mov	r0, r3
 8009098:	f000 ffb2 	bl	800a000 <lsm6dsv16x_angular_rate_raw_get>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
 80090a2:	f04f 33ff 	mov.w	r3, #4294967295
 80090a6:	e00c      	b.n	80090c2 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
 80090a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	801a      	strh	r2, [r3, #0]
 80090b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	805a      	strh	r2, [r3, #2]
 80090b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	809a      	strh	r2, [r3, #4]
 80090c0:	2300      	movs	r3, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <LSM6DSV16X_GYRO_GetAxes>:
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b086      	sub	sp, #24
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6039      	str	r1, [r7, #0]
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3320      	adds	r3, #32
 80090de:	f107 0210 	add.w	r2, r7, #16
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 ff8b 	bl	800a000 <lsm6dsv16x_angular_rate_raw_get>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <LSM6DSV16X_GYRO_GetAxes+0x2c>
 80090f0:	f04f 33ff 	mov.w	r3, #4294967295
 80090f4:	e03c      	b.n	8009170 <LSM6DSV16X_GYRO_GetAxes+0xa6>
 80090f6:	f107 030c 	add.w	r3, r7, #12
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fd6b 	bl	8008bd8 <LSM6DSV16X_GYRO_GetSensitivity>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <LSM6DSV16X_GYRO_GetAxes+0x44>
 8009108:	f04f 33ff 	mov.w	r3, #4294967295
 800910c:	e030      	b.n	8009170 <LSM6DSV16X_GYRO_GetAxes+0xa6>
 800910e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800911a:	edd7 7a03 	vldr	s15, [r7, #12]
 800911e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009126:	ee17 2a90 	vmov	r2, s15
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800913a:	edd7 7a03 	vldr	s15, [r7, #12]
 800913e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009146:	ee17 2a90 	vmov	r2, s15
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800915a:	edd7 7a03 	vldr	s15, [r7, #12]
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009166:	ee17 2a90 	vmov	r2, s15
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	609a      	str	r2, [r3, #8]
 800916e:	2300      	movs	r3, #0
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <LSM6DSV16X_Write_Reg>:
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
 8009184:	4613      	mov	r3, r2
 8009186:	70bb      	strb	r3, [r7, #2]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f103 0020 	add.w	r0, r3, #32
 800918e:	1cba      	adds	r2, r7, #2
 8009190:	78f9      	ldrb	r1, [r7, #3]
 8009192:	2301      	movs	r3, #1
 8009194:	f000 fae4 	bl	8009760 <lsm6dsv16x_write_reg>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <LSM6DSV16X_Write_Reg+0x2c>
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	e000      	b.n	80091a6 <LSM6DSV16X_Write_Reg+0x2e>
 80091a4:	2300      	movs	r3, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <LSM6DSV16X_Set_Mem_Bank>:
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d006      	beq.n	80091d2 <LSM6DSV16X_Set_Mem_Bank+0x24>
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d101      	bne.n	80091ce <LSM6DSV16X_Set_Mem_Bank+0x20>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e002      	b.n	80091d4 <LSM6DSV16X_Set_Mem_Bank+0x26>
 80091ce:	2300      	movs	r3, #0
 80091d0:	e000      	b.n	80091d4 <LSM6DSV16X_Set_Mem_Bank+0x26>
 80091d2:	2301      	movs	r3, #1
 80091d4:	72fb      	strb	r3, [r7, #11]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3320      	adds	r3, #32
 80091da:	7afa      	ldrb	r2, [r7, #11]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fadc 	bl	800979c <lsm6dsv16x_mem_bank_set>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <LSM6DSV16X_Set_Mem_Bank+0x42>
 80091ea:	f04f 33ff 	mov.w	r3, #4294967295
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	ed87 0a00 	vstr	s0, [r7]
 8009208:	edd7 7a00 	vldr	s15, [r7]
 800920c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8009210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009218:	d801      	bhi.n	800921e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 800921a:	2301      	movs	r3, #1
 800921c:	e06e      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800921e:	edd7 7a00 	vldr	s15, [r7]
 8009222:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800922a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922e:	d801      	bhi.n	8009234 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8009230:	2302      	movs	r3, #2
 8009232:	e063      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009234:	edd7 7a00 	vldr	s15, [r7]
 8009238:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800923c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009244:	d801      	bhi.n	800924a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009246:	2303      	movs	r3, #3
 8009248:	e058      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800924a:	edd7 7a00 	vldr	s15, [r7]
 800924e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925a:	d801      	bhi.n	8009260 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 800925c:	2304      	movs	r3, #4
 800925e:	e04d      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009260:	edd7 7a00 	vldr	s15, [r7]
 8009264:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009324 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8009268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800926c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009270:	d801      	bhi.n	8009276 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8009272:	2305      	movs	r3, #5
 8009274:	e042      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009276:	edd7 7a00 	vldr	s15, [r7]
 800927a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009328 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800927e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	d801      	bhi.n	800928c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009288:	2306      	movs	r3, #6
 800928a:	e037      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800928c:	edd7 7a00 	vldr	s15, [r7]
 8009290:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800932c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8009294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	d801      	bhi.n	80092a2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800929e:	2307      	movs	r3, #7
 80092a0:	e02c      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80092a2:	edd7 7a00 	vldr	s15, [r7]
 80092a6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009330 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 80092aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	d801      	bhi.n	80092b8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80092b4:	2308      	movs	r3, #8
 80092b6:	e021      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80092b8:	edd7 7a00 	vldr	s15, [r7]
 80092bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009334 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 80092c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c8:	d801      	bhi.n	80092ce <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80092ca:	2309      	movs	r3, #9
 80092cc:	e016      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80092ce:	edd7 7a00 	vldr	s15, [r7]
 80092d2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009338 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80092d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	d801      	bhi.n	80092e4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80092e0:	230a      	movs	r3, #10
 80092e2:	e00b      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80092e4:	edd7 7a00 	vldr	s15, [r7]
 80092e8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800933c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 80092ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	d801      	bhi.n	80092fa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 80092f6:	230b      	movs	r3, #11
 80092f8:	e000      	b.n	80092fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80092fa:	230c      	movs	r3, #12
 80092fc:	73fb      	strb	r3, [r7, #15]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3320      	adds	r3, #32
 8009302:	7bfa      	ldrb	r2, [r7, #15]
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fa8a 	bl	8009820 <lsm6dsv16x_xl_data_rate_set>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8009312:	f04f 33ff 	mov.w	r3, #4294967295
 8009316:	e000      	b.n	800931a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
 8009318:	2300      	movs	r3, #0
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	42700000 	.word	0x42700000
 8009328:	42f00000 	.word	0x42f00000
 800932c:	43700000 	.word	0x43700000
 8009330:	43f00000 	.word	0x43f00000
 8009334:	44700000 	.word	0x44700000
 8009338:	44f00000 	.word	0x44f00000
 800933c:	45700000 	.word	0x45700000

08009340 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	ed87 0a00 	vstr	s0, [r7]
 800934c:	edd7 7a00 	vldr	s15, [r7]
 8009350:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8009354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935c:	d801      	bhi.n	8009362 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 800935e:	2301      	movs	r3, #1
 8009360:	e06e      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009362:	edd7 7a00 	vldr	s15, [r7]
 8009366:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800936a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009372:	d801      	bhi.n	8009378 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009374:	2302      	movs	r3, #2
 8009376:	e063      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009378:	edd7 7a00 	vldr	s15, [r7]
 800937c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009388:	d801      	bhi.n	800938e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800938a:	2303      	movs	r3, #3
 800938c:	e058      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800938e:	edd7 7a00 	vldr	s15, [r7]
 8009392:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939e:	d801      	bhi.n	80093a4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 80093a0:	2304      	movs	r3, #4
 80093a2:	e04d      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80093a4:	edd7 7a00 	vldr	s15, [r7]
 80093a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009454 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 80093ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b4:	d801      	bhi.n	80093ba <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80093b6:	2305      	movs	r3, #5
 80093b8:	e042      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80093ba:	edd7 7a00 	vldr	s15, [r7]
 80093be:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009458 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 80093c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ca:	d801      	bhi.n	80093d0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 80093cc:	2306      	movs	r3, #6
 80093ce:	e037      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80093d0:	edd7 7a00 	vldr	s15, [r7]
 80093d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800945c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80093d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e0:	d801      	bhi.n	80093e6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80093e2:	2307      	movs	r3, #7
 80093e4:	e02c      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80093e6:	edd7 7a00 	vldr	s15, [r7]
 80093ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009460 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 80093ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f6:	d801      	bhi.n	80093fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80093f8:	2308      	movs	r3, #8
 80093fa:	e021      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80093fc:	edd7 7a00 	vldr	s15, [r7]
 8009400:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009464 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8009404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940c:	d801      	bhi.n	8009412 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800940e:	2309      	movs	r3, #9
 8009410:	e016      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009412:	edd7 7a00 	vldr	s15, [r7]
 8009416:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009468 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 800941a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	d801      	bhi.n	8009428 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009424:	230a      	movs	r3, #10
 8009426:	e00b      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009428:	edd7 7a00 	vldr	s15, [r7]
 800942c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800946c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8009430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009438:	d801      	bhi.n	800943e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 800943a:	230b      	movs	r3, #11
 800943c:	e000      	b.n	8009440 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800943e:	230c      	movs	r3, #12
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
 8009446:	2300      	movs	r3, #0
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	42700000 	.word	0x42700000
 8009458:	42f00000 	.word	0x42f00000
 800945c:	43700000 	.word	0x43700000
 8009460:	43f00000 	.word	0x43f00000
 8009464:	44700000 	.word	0x44700000
 8009468:	44f00000 	.word	0x44f00000
 800946c:	45700000 	.word	0x45700000

08009470 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	ed87 0a00 	vstr	s0, [r7]
 800947c:	edd7 7a00 	vldr	s15, [r7]
 8009480:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948c:	d801      	bhi.n	8009492 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800948e:	2302      	movs	r3, #2
 8009490:	e063      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009492:	edd7 7a00 	vldr	s15, [r7]
 8009496:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800949a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	d801      	bhi.n	80094a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80094a4:	2303      	movs	r3, #3
 80094a6:	e058      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80094a8:	edd7 7a00 	vldr	s15, [r7]
 80094ac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80094b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b8:	d801      	bhi.n	80094be <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80094ba:	2304      	movs	r3, #4
 80094bc:	e04d      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80094be:	edd7 7a00 	vldr	s15, [r7]
 80094c2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009580 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80094c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ce:	d801      	bhi.n	80094d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80094d0:	2305      	movs	r3, #5
 80094d2:	e042      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80094d4:	edd7 7a00 	vldr	s15, [r7]
 80094d8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009584 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80094dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e4:	d801      	bhi.n	80094ea <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80094e6:	2306      	movs	r3, #6
 80094e8:	e037      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80094ea:	edd7 7a00 	vldr	s15, [r7]
 80094ee:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009588 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80094f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fa:	d801      	bhi.n	8009500 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80094fc:	2307      	movs	r3, #7
 80094fe:	e02c      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009500:	edd7 7a00 	vldr	s15, [r7]
 8009504:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800958c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8009508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009510:	d801      	bhi.n	8009516 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8009512:	2308      	movs	r3, #8
 8009514:	e021      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009516:	edd7 7a00 	vldr	s15, [r7]
 800951a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009590 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800951e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009526:	d801      	bhi.n	800952c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009528:	2309      	movs	r3, #9
 800952a:	e016      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800952c:	edd7 7a00 	vldr	s15, [r7]
 8009530:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009594 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8009534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953c:	d801      	bhi.n	8009542 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800953e:	230a      	movs	r3, #10
 8009540:	e00b      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009542:	edd7 7a00 	vldr	s15, [r7]
 8009546:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009598 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800954a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009552:	d801      	bhi.n	8009558 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8009554:	230b      	movs	r3, #11
 8009556:	e000      	b.n	800955a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009558:	230c      	movs	r3, #12
 800955a:	73fb      	strb	r3, [r7, #15]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3320      	adds	r3, #32
 8009560:	7bfa      	ldrb	r2, [r7, #15]
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fabd 	bl	8009ae4 <lsm6dsv16x_gy_data_rate_set>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
 8009570:	f04f 33ff 	mov.w	r3, #4294967295
 8009574:	e000      	b.n	8009578 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8009576:	2300      	movs	r3, #0
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	42700000 	.word	0x42700000
 8009584:	42f00000 	.word	0x42f00000
 8009588:	43700000 	.word	0x43700000
 800958c:	43f00000 	.word	0x43f00000
 8009590:	44700000 	.word	0x44700000
 8009594:	44f00000 	.word	0x44f00000
 8009598:	45700000 	.word	0x45700000

0800959c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	ed87 0a00 	vstr	s0, [r7]
 80095a8:	edd7 7a00 	vldr	s15, [r7]
 80095ac:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80095b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b8:	d801      	bhi.n	80095be <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80095ba:	2302      	movs	r3, #2
 80095bc:	e063      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80095be:	edd7 7a00 	vldr	s15, [r7]
 80095c2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80095c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ce:	d801      	bhi.n	80095d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80095d0:	2303      	movs	r3, #3
 80095d2:	e058      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80095d4:	edd7 7a00 	vldr	s15, [r7]
 80095d8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80095dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e4:	d801      	bhi.n	80095ea <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80095e6:	2304      	movs	r3, #4
 80095e8:	e04d      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80095ea:	edd7 7a00 	vldr	s15, [r7]
 80095ee:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800969c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80095f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fa:	d801      	bhi.n	8009600 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80095fc:	2305      	movs	r3, #5
 80095fe:	e042      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009600:	edd7 7a00 	vldr	s15, [r7]
 8009604:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80096a0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8009608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009610:	d801      	bhi.n	8009616 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8009612:	2306      	movs	r3, #6
 8009614:	e037      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009616:	edd7 7a00 	vldr	s15, [r7]
 800961a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80096a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800961e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009626:	d801      	bhi.n	800962c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009628:	2307      	movs	r3, #7
 800962a:	e02c      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800962c:	edd7 7a00 	vldr	s15, [r7]
 8009630:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80096a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8009634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963c:	d801      	bhi.n	8009642 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800963e:	2308      	movs	r3, #8
 8009640:	e021      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009642:	edd7 7a00 	vldr	s15, [r7]
 8009646:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80096ac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800964a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800964e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009652:	d801      	bhi.n	8009658 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009654:	2309      	movs	r3, #9
 8009656:	e016      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009658:	edd7 7a00 	vldr	s15, [r7]
 800965c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80096b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8009660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	d801      	bhi.n	800966e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800966a:	230a      	movs	r3, #10
 800966c:	e00b      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800966e:	edd7 7a00 	vldr	s15, [r7]
 8009672:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80096b4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8009676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	d801      	bhi.n	8009684 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009680:	230b      	movs	r3, #11
 8009682:	e000      	b.n	8009686 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009684:	230c      	movs	r3, #12
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 800968c:	2300      	movs	r3, #0
 800968e:	4618      	mov	r0, r3
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	42700000 	.word	0x42700000
 80096a0:	42f00000 	.word	0x42f00000
 80096a4:	43700000 	.word	0x43700000
 80096a8:	43f00000 	.word	0x43f00000
 80096ac:	44700000 	.word	0x44700000
 80096b0:	44f00000 	.word	0x44f00000
 80096b4:	45700000 	.word	0x45700000

080096b8 <ReadRegWrap>:
 80096b8:	b590      	push	{r4, r7, lr}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	461a      	mov	r2, r3
 80096c4:	460b      	mov	r3, r1
 80096c6:	72fb      	strb	r3, [r7, #11]
 80096c8:	4613      	mov	r3, r2
 80096ca:	813b      	strh	r3, [r7, #8]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	695c      	ldr	r4, [r3, #20]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	7b1b      	ldrb	r3, [r3, #12]
 80096d8:	4618      	mov	r0, r3
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	b299      	uxth	r1, r3
 80096de:	893b      	ldrh	r3, [r7, #8]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	47a0      	blx	r4
 80096e4:	4603      	mov	r3, r0
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd90      	pop	{r4, r7, pc}

080096ee <WriteRegWrap>:
 80096ee:	b590      	push	{r4, r7, lr}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	461a      	mov	r2, r3
 80096fa:	460b      	mov	r3, r1
 80096fc:	72fb      	strb	r3, [r7, #11]
 80096fe:	4613      	mov	r3, r2
 8009700:	813b      	strh	r3, [r7, #8]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	691c      	ldr	r4, [r3, #16]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	7b1b      	ldrb	r3, [r3, #12]
 800970e:	4618      	mov	r0, r3
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	b299      	uxth	r1, r3
 8009714:	893b      	ldrh	r3, [r7, #8]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	47a0      	blx	r4
 800971a:	4603      	mov	r3, r0
 800971c:	4618      	mov	r0, r3
 800971e:	371c      	adds	r7, #28
 8009720:	46bd      	mov	sp, r7
 8009722:	bd90      	pop	{r4, r7, pc}

08009724 <lsm6dsv16x_read_reg>:
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	461a      	mov	r2, r3
 8009730:	460b      	mov	r3, r1
 8009732:	72fb      	strb	r3, [r7, #11]
 8009734:	4613      	mov	r3, r2
 8009736:	813b      	strh	r3, [r7, #8]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <lsm6dsv16x_read_reg+0x20>
 800973e:	f04f 33ff 	mov.w	r3, #4294967295
 8009742:	e009      	b.n	8009758 <lsm6dsv16x_read_reg+0x34>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	685c      	ldr	r4, [r3, #4]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68d8      	ldr	r0, [r3, #12]
 800974c:	893b      	ldrh	r3, [r7, #8]
 800974e:	7af9      	ldrb	r1, [r7, #11]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	47a0      	blx	r4
 8009754:	6178      	str	r0, [r7, #20]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4618      	mov	r0, r3
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	bd90      	pop	{r4, r7, pc}

08009760 <lsm6dsv16x_write_reg>:
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	607a      	str	r2, [r7, #4]
 800976a:	461a      	mov	r2, r3
 800976c:	460b      	mov	r3, r1
 800976e:	72fb      	strb	r3, [r7, #11]
 8009770:	4613      	mov	r3, r2
 8009772:	813b      	strh	r3, [r7, #8]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <lsm6dsv16x_write_reg+0x20>
 800977a:	f04f 33ff 	mov.w	r3, #4294967295
 800977e:	e009      	b.n	8009794 <lsm6dsv16x_write_reg+0x34>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681c      	ldr	r4, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68d8      	ldr	r0, [r3, #12]
 8009788:	893b      	ldrh	r3, [r7, #8]
 800978a:	7af9      	ldrb	r1, [r7, #11]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	47a0      	blx	r4
 8009790:	6178      	str	r0, [r7, #20]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4618      	mov	r0, r3
 8009796:	371c      	adds	r7, #28
 8009798:	46bd      	mov	sp, r7
 800979a:	bd90      	pop	{r4, r7, pc}

0800979c <lsm6dsv16x_mem_bank_set>:
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
 80097a8:	f107 0208 	add.w	r2, r7, #8
 80097ac:	2301      	movs	r3, #1
 80097ae:	2101      	movs	r1, #1
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff ffb7 	bl	8009724 <lsm6dsv16x_read_reg>
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <lsm6dsv16x_mem_bank_set+0x26>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	e019      	b.n	80097f6 <lsm6dsv16x_mem_bank_set+0x5a>
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	7a3b      	ldrb	r3, [r7, #8]
 80097ce:	f362 1386 	bfi	r3, r2, #6, #1
 80097d2:	723b      	strb	r3, [r7, #8]
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	7a3b      	ldrb	r3, [r7, #8]
 80097de:	f362 13c7 	bfi	r3, r2, #7, #1
 80097e2:	723b      	strb	r3, [r7, #8]
 80097e4:	f107 0208 	add.w	r2, r7, #8
 80097e8:	2301      	movs	r3, #1
 80097ea:	2101      	movs	r1, #1
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ffb7 	bl	8009760 <lsm6dsv16x_write_reg>
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <lsm6dsv16x_device_id_get>:
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
 8009808:	2301      	movs	r3, #1
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	210f      	movs	r1, #15
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ff88 	bl	8009724 <lsm6dsv16x_read_reg>
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <lsm6dsv16x_xl_data_rate_set>:
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
 800982c:	f107 0210 	add.w	r2, r7, #16
 8009830:	2301      	movs	r3, #1
 8009832:	2110      	movs	r1, #16
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff ff75 	bl	8009724 <lsm6dsv16x_read_reg>
 800983a:	6178      	str	r0, [r7, #20]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <lsm6dsv16x_xl_data_rate_set+0x26>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	e039      	b.n	80098ba <lsm6dsv16x_xl_data_rate_set+0x9a>
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	b2da      	uxtb	r2, r3
 800984e:	7c3b      	ldrb	r3, [r7, #16]
 8009850:	f362 0303 	bfi	r3, r2, #0, #4
 8009854:	743b      	strb	r3, [r7, #16]
 8009856:	f107 0210 	add.w	r2, r7, #16
 800985a:	2301      	movs	r3, #1
 800985c:	2110      	movs	r1, #16
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff ff7e 	bl	8009760 <lsm6dsv16x_write_reg>
 8009864:	6178      	str	r0, [r7, #20]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <lsm6dsv16x_xl_data_rate_set+0x50>
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	e024      	b.n	80098ba <lsm6dsv16x_xl_data_rate_set+0x9a>
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	091b      	lsrs	r3, r3, #4
 8009874:	74fb      	strb	r3, [r7, #19]
 8009876:	7cfb      	ldrb	r3, [r7, #19]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01d      	beq.n	80098b8 <lsm6dsv16x_xl_data_rate_set+0x98>
 800987c:	f107 020c 	add.w	r2, r7, #12
 8009880:	2301      	movs	r3, #1
 8009882:	2162      	movs	r1, #98	@ 0x62
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff ff4d 	bl	8009724 <lsm6dsv16x_read_reg>
 800988a:	4602      	mov	r2, r0
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	4413      	add	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	7cfb      	ldrb	r3, [r7, #19]
 8009894:	f003 0303 	and.w	r3, r3, #3
 8009898:	b2da      	uxtb	r2, r3
 800989a:	7b3b      	ldrb	r3, [r7, #12]
 800989c:	f362 0301 	bfi	r3, r2, #0, #2
 80098a0:	733b      	strb	r3, [r7, #12]
 80098a2:	f107 020c 	add.w	r2, r7, #12
 80098a6:	2301      	movs	r3, #1
 80098a8:	2162      	movs	r1, #98	@ 0x62
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7ff ff58 	bl	8009760 <lsm6dsv16x_write_reg>
 80098b0:	4602      	mov	r2, r0
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	4413      	add	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <lsm6dsv16x_xl_data_rate_get>:
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	f107 0210 	add.w	r2, r7, #16
 80098d2:	2301      	movs	r3, #1
 80098d4:	2110      	movs	r1, #16
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff ff24 	bl	8009724 <lsm6dsv16x_read_reg>
 80098dc:	6178      	str	r0, [r7, #20]
 80098de:	f107 020c 	add.w	r2, r7, #12
 80098e2:	2301      	movs	r3, #1
 80098e4:	2162      	movs	r1, #98	@ 0x62
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff ff1c 	bl	8009724 <lsm6dsv16x_read_reg>
 80098ec:	4602      	mov	r2, r0
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	4413      	add	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <lsm6dsv16x_xl_data_rate_get+0x3a>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	e0ed      	b.n	8009ada <lsm6dsv16x_xl_data_rate_get+0x216>
 80098fe:	7b3b      	ldrb	r3, [r7, #12]
 8009900:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009904:	b2db      	uxtb	r3, r3
 8009906:	74fb      	strb	r3, [r7, #19]
 8009908:	7c3b      	ldrb	r3, [r7, #16]
 800990a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b0c      	cmp	r3, #12
 8009912:	f200 80dd 	bhi.w	8009ad0 <lsm6dsv16x_xl_data_rate_get+0x20c>
 8009916:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <lsm6dsv16x_xl_data_rate_get+0x58>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	08009951 	.word	0x08009951
 8009920:	08009959 	.word	0x08009959
 8009924:	08009961 	.word	0x08009961
 8009928:	08009969 	.word	0x08009969
 800992c:	0800998d 	.word	0x0800998d
 8009930:	080099b1 	.word	0x080099b1
 8009934:	080099d5 	.word	0x080099d5
 8009938:	080099f9 	.word	0x080099f9
 800993c:	08009a1d 	.word	0x08009a1d
 8009940:	08009a41 	.word	0x08009a41
 8009944:	08009a65 	.word	0x08009a65
 8009948:	08009a89 	.word	0x08009a89
 800994c:	08009aad 	.word	0x08009aad
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e0bf      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	e0bb      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2202      	movs	r2, #2
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	e0b7      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009968:	7cfb      	ldrb	r3, [r7, #19]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d005      	beq.n	800997a <lsm6dsv16x_xl_data_rate_get+0xb6>
 800996e:	2b02      	cmp	r3, #2
 8009970:	d007      	beq.n	8009982 <lsm6dsv16x_xl_data_rate_get+0xbe>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2203      	movs	r2, #3
 8009976:	701a      	strb	r2, [r3, #0]
 8009978:	e007      	b.n	800998a <lsm6dsv16x_xl_data_rate_get+0xc6>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2213      	movs	r2, #19
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e003      	b.n	800998a <lsm6dsv16x_xl_data_rate_get+0xc6>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2223      	movs	r2, #35	@ 0x23
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	bf00      	nop
 800998a:	e0a5      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 800998c:	7cfb      	ldrb	r3, [r7, #19]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d005      	beq.n	800999e <lsm6dsv16x_xl_data_rate_get+0xda>
 8009992:	2b02      	cmp	r3, #2
 8009994:	d007      	beq.n	80099a6 <lsm6dsv16x_xl_data_rate_get+0xe2>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2204      	movs	r2, #4
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	e007      	b.n	80099ae <lsm6dsv16x_xl_data_rate_get+0xea>
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2214      	movs	r2, #20
 80099a2:	701a      	strb	r2, [r3, #0]
 80099a4:	e003      	b.n	80099ae <lsm6dsv16x_xl_data_rate_get+0xea>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2224      	movs	r2, #36	@ 0x24
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	bf00      	nop
 80099ae:	e093      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 80099b0:	7cfb      	ldrb	r3, [r7, #19]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d005      	beq.n	80099c2 <lsm6dsv16x_xl_data_rate_get+0xfe>
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d007      	beq.n	80099ca <lsm6dsv16x_xl_data_rate_get+0x106>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2205      	movs	r2, #5
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e007      	b.n	80099d2 <lsm6dsv16x_xl_data_rate_get+0x10e>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2215      	movs	r2, #21
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e003      	b.n	80099d2 <lsm6dsv16x_xl_data_rate_get+0x10e>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2225      	movs	r2, #37	@ 0x25
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	bf00      	nop
 80099d2:	e081      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 80099d4:	7cfb      	ldrb	r3, [r7, #19]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d005      	beq.n	80099e6 <lsm6dsv16x_xl_data_rate_get+0x122>
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d007      	beq.n	80099ee <lsm6dsv16x_xl_data_rate_get+0x12a>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2206      	movs	r2, #6
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	e007      	b.n	80099f6 <lsm6dsv16x_xl_data_rate_get+0x132>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2216      	movs	r2, #22
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	e003      	b.n	80099f6 <lsm6dsv16x_xl_data_rate_get+0x132>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2226      	movs	r2, #38	@ 0x26
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	bf00      	nop
 80099f6:	e06f      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 80099f8:	7cfb      	ldrb	r3, [r7, #19]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d005      	beq.n	8009a0a <lsm6dsv16x_xl_data_rate_get+0x146>
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d007      	beq.n	8009a12 <lsm6dsv16x_xl_data_rate_get+0x14e>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2207      	movs	r2, #7
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	e007      	b.n	8009a1a <lsm6dsv16x_xl_data_rate_get+0x156>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2217      	movs	r2, #23
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	e003      	b.n	8009a1a <lsm6dsv16x_xl_data_rate_get+0x156>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2227      	movs	r2, #39	@ 0x27
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	bf00      	nop
 8009a1a:	e05d      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009a1c:	7cfb      	ldrb	r3, [r7, #19]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d005      	beq.n	8009a2e <lsm6dsv16x_xl_data_rate_get+0x16a>
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d007      	beq.n	8009a36 <lsm6dsv16x_xl_data_rate_get+0x172>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2208      	movs	r2, #8
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	e007      	b.n	8009a3e <lsm6dsv16x_xl_data_rate_get+0x17a>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2218      	movs	r2, #24
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	e003      	b.n	8009a3e <lsm6dsv16x_xl_data_rate_get+0x17a>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2228      	movs	r2, #40	@ 0x28
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	bf00      	nop
 8009a3e:	e04b      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009a40:	7cfb      	ldrb	r3, [r7, #19]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d005      	beq.n	8009a52 <lsm6dsv16x_xl_data_rate_get+0x18e>
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d007      	beq.n	8009a5a <lsm6dsv16x_xl_data_rate_get+0x196>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2209      	movs	r2, #9
 8009a4e:	701a      	strb	r2, [r3, #0]
 8009a50:	e007      	b.n	8009a62 <lsm6dsv16x_xl_data_rate_get+0x19e>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2219      	movs	r2, #25
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	e003      	b.n	8009a62 <lsm6dsv16x_xl_data_rate_get+0x19e>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2229      	movs	r2, #41	@ 0x29
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	bf00      	nop
 8009a62:	e039      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009a64:	7cfb      	ldrb	r3, [r7, #19]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d005      	beq.n	8009a76 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d007      	beq.n	8009a7e <lsm6dsv16x_xl_data_rate_get+0x1ba>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	220a      	movs	r2, #10
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e007      	b.n	8009a86 <lsm6dsv16x_xl_data_rate_get+0x1c2>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	221a      	movs	r2, #26
 8009a7a:	701a      	strb	r2, [r3, #0]
 8009a7c:	e003      	b.n	8009a86 <lsm6dsv16x_xl_data_rate_get+0x1c2>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	222a      	movs	r2, #42	@ 0x2a
 8009a82:	701a      	strb	r2, [r3, #0]
 8009a84:	bf00      	nop
 8009a86:	e027      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009a88:	7cfb      	ldrb	r3, [r7, #19]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d005      	beq.n	8009a9a <lsm6dsv16x_xl_data_rate_get+0x1d6>
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d007      	beq.n	8009aa2 <lsm6dsv16x_xl_data_rate_get+0x1de>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	220b      	movs	r2, #11
 8009a96:	701a      	strb	r2, [r3, #0]
 8009a98:	e007      	b.n	8009aaa <lsm6dsv16x_xl_data_rate_get+0x1e6>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	221b      	movs	r2, #27
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e003      	b.n	8009aaa <lsm6dsv16x_xl_data_rate_get+0x1e6>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	222b      	movs	r2, #43	@ 0x2b
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	bf00      	nop
 8009aaa:	e015      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009aac:	7cfb      	ldrb	r3, [r7, #19]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d005      	beq.n	8009abe <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d007      	beq.n	8009ac6 <lsm6dsv16x_xl_data_rate_get+0x202>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	220c      	movs	r2, #12
 8009aba:	701a      	strb	r2, [r3, #0]
 8009abc:	e007      	b.n	8009ace <lsm6dsv16x_xl_data_rate_get+0x20a>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	221c      	movs	r2, #28
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e003      	b.n	8009ace <lsm6dsv16x_xl_data_rate_get+0x20a>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	222c      	movs	r2, #44	@ 0x2c
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	bf00      	nop
 8009ace:	e003      	b.n	8009ad8 <lsm6dsv16x_xl_data_rate_get+0x214>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	bf00      	nop
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop

08009ae4 <lsm6dsv16x_gy_data_rate_set>:
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
 8009af0:	f107 0210 	add.w	r2, r7, #16
 8009af4:	2301      	movs	r3, #1
 8009af6:	2111      	movs	r1, #17
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff fe13 	bl	8009724 <lsm6dsv16x_read_reg>
 8009afe:	6178      	str	r0, [r7, #20]
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	f003 030f 	and.w	r3, r3, #15
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	7c3b      	ldrb	r3, [r7, #16]
 8009b0a:	f362 0303 	bfi	r3, r2, #0, #4
 8009b0e:	743b      	strb	r3, [r7, #16]
 8009b10:	f107 0210 	add.w	r2, r7, #16
 8009b14:	2301      	movs	r3, #1
 8009b16:	2111      	movs	r1, #17
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff fe21 	bl	8009760 <lsm6dsv16x_write_reg>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	4413      	add	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e024      	b.n	8009b7a <lsm6dsv16x_gy_data_rate_set+0x96>
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	091b      	lsrs	r3, r3, #4
 8009b34:	74fb      	strb	r3, [r7, #19]
 8009b36:	7cfb      	ldrb	r3, [r7, #19]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01d      	beq.n	8009b78 <lsm6dsv16x_gy_data_rate_set+0x94>
 8009b3c:	f107 020c 	add.w	r2, r7, #12
 8009b40:	2301      	movs	r3, #1
 8009b42:	2162      	movs	r1, #98	@ 0x62
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff fded 	bl	8009724 <lsm6dsv16x_read_reg>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4413      	add	r3, r2
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	7cfb      	ldrb	r3, [r7, #19]
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	7b3b      	ldrb	r3, [r7, #12]
 8009b5c:	f362 0301 	bfi	r3, r2, #0, #2
 8009b60:	733b      	strb	r3, [r7, #12]
 8009b62:	f107 020c 	add.w	r2, r7, #12
 8009b66:	2301      	movs	r3, #1
 8009b68:	2162      	movs	r1, #98	@ 0x62
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff fdf8 	bl	8009760 <lsm6dsv16x_write_reg>
 8009b70:	4602      	mov	r2, r0
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <lsm6dsv16x_gy_data_rate_get>:
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	f107 0210 	add.w	r2, r7, #16
 8009b92:	2301      	movs	r3, #1
 8009b94:	2111      	movs	r1, #17
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fdc4 	bl	8009724 <lsm6dsv16x_read_reg>
 8009b9c:	6178      	str	r0, [r7, #20]
 8009b9e:	f107 020c 	add.w	r2, r7, #12
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	2162      	movs	r1, #98	@ 0x62
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fdbc 	bl	8009724 <lsm6dsv16x_read_reg>
 8009bac:	4602      	mov	r2, r0
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <lsm6dsv16x_gy_data_rate_get+0x3a>
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	e0ed      	b.n	8009d9a <lsm6dsv16x_gy_data_rate_get+0x216>
 8009bbe:	7b3b      	ldrb	r3, [r7, #12]
 8009bc0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	74fb      	strb	r3, [r7, #19]
 8009bc8:	7c3b      	ldrb	r3, [r7, #16]
 8009bca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	f200 80dd 	bhi.w	8009d90 <lsm6dsv16x_gy_data_rate_get+0x20c>
 8009bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bdc <lsm6dsv16x_gy_data_rate_get+0x58>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009c11 	.word	0x08009c11
 8009be0:	08009c19 	.word	0x08009c19
 8009be4:	08009c21 	.word	0x08009c21
 8009be8:	08009c29 	.word	0x08009c29
 8009bec:	08009c4d 	.word	0x08009c4d
 8009bf0:	08009c71 	.word	0x08009c71
 8009bf4:	08009c95 	.word	0x08009c95
 8009bf8:	08009cb9 	.word	0x08009cb9
 8009bfc:	08009cdd 	.word	0x08009cdd
 8009c00:	08009d01 	.word	0x08009d01
 8009c04:	08009d25 	.word	0x08009d25
 8009c08:	08009d49 	.word	0x08009d49
 8009c0c:	08009d6d 	.word	0x08009d6d
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	e0bf      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	e0bb      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2202      	movs	r2, #2
 8009c24:	701a      	strb	r2, [r3, #0]
 8009c26:	e0b7      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009c28:	7cfb      	ldrb	r3, [r7, #19]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d005      	beq.n	8009c3a <lsm6dsv16x_gy_data_rate_get+0xb6>
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d007      	beq.n	8009c42 <lsm6dsv16x_gy_data_rate_get+0xbe>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2203      	movs	r2, #3
 8009c36:	701a      	strb	r2, [r3, #0]
 8009c38:	e007      	b.n	8009c4a <lsm6dsv16x_gy_data_rate_get+0xc6>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2213      	movs	r2, #19
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e003      	b.n	8009c4a <lsm6dsv16x_gy_data_rate_get+0xc6>
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2223      	movs	r2, #35	@ 0x23
 8009c46:	701a      	strb	r2, [r3, #0]
 8009c48:	bf00      	nop
 8009c4a:	e0a5      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009c4c:	7cfb      	ldrb	r3, [r7, #19]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d005      	beq.n	8009c5e <lsm6dsv16x_gy_data_rate_get+0xda>
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d007      	beq.n	8009c66 <lsm6dsv16x_gy_data_rate_get+0xe2>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e007      	b.n	8009c6e <lsm6dsv16x_gy_data_rate_get+0xea>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2214      	movs	r2, #20
 8009c62:	701a      	strb	r2, [r3, #0]
 8009c64:	e003      	b.n	8009c6e <lsm6dsv16x_gy_data_rate_get+0xea>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2224      	movs	r2, #36	@ 0x24
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	bf00      	nop
 8009c6e:	e093      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009c70:	7cfb      	ldrb	r3, [r7, #19]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d005      	beq.n	8009c82 <lsm6dsv16x_gy_data_rate_get+0xfe>
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d007      	beq.n	8009c8a <lsm6dsv16x_gy_data_rate_get+0x106>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e007      	b.n	8009c92 <lsm6dsv16x_gy_data_rate_get+0x10e>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2215      	movs	r2, #21
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	e003      	b.n	8009c92 <lsm6dsv16x_gy_data_rate_get+0x10e>
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2225      	movs	r2, #37	@ 0x25
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	bf00      	nop
 8009c92:	e081      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009c94:	7cfb      	ldrb	r3, [r7, #19]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d005      	beq.n	8009ca6 <lsm6dsv16x_gy_data_rate_get+0x122>
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d007      	beq.n	8009cae <lsm6dsv16x_gy_data_rate_get+0x12a>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2206      	movs	r2, #6
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e007      	b.n	8009cb6 <lsm6dsv16x_gy_data_rate_get+0x132>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2216      	movs	r2, #22
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	e003      	b.n	8009cb6 <lsm6dsv16x_gy_data_rate_get+0x132>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2226      	movs	r2, #38	@ 0x26
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	bf00      	nop
 8009cb6:	e06f      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009cb8:	7cfb      	ldrb	r3, [r7, #19]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d005      	beq.n	8009cca <lsm6dsv16x_gy_data_rate_get+0x146>
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d007      	beq.n	8009cd2 <lsm6dsv16x_gy_data_rate_get+0x14e>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2207      	movs	r2, #7
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	e007      	b.n	8009cda <lsm6dsv16x_gy_data_rate_get+0x156>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2217      	movs	r2, #23
 8009cce:	701a      	strb	r2, [r3, #0]
 8009cd0:	e003      	b.n	8009cda <lsm6dsv16x_gy_data_rate_get+0x156>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2227      	movs	r2, #39	@ 0x27
 8009cd6:	701a      	strb	r2, [r3, #0]
 8009cd8:	bf00      	nop
 8009cda:	e05d      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009cdc:	7cfb      	ldrb	r3, [r7, #19]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d005      	beq.n	8009cee <lsm6dsv16x_gy_data_rate_get+0x16a>
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d007      	beq.n	8009cf6 <lsm6dsv16x_gy_data_rate_get+0x172>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2208      	movs	r2, #8
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e007      	b.n	8009cfe <lsm6dsv16x_gy_data_rate_get+0x17a>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2218      	movs	r2, #24
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	e003      	b.n	8009cfe <lsm6dsv16x_gy_data_rate_get+0x17a>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2228      	movs	r2, #40	@ 0x28
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	bf00      	nop
 8009cfe:	e04b      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009d00:	7cfb      	ldrb	r3, [r7, #19]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d005      	beq.n	8009d12 <lsm6dsv16x_gy_data_rate_get+0x18e>
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d007      	beq.n	8009d1a <lsm6dsv16x_gy_data_rate_get+0x196>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2209      	movs	r2, #9
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	e007      	b.n	8009d22 <lsm6dsv16x_gy_data_rate_get+0x19e>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2219      	movs	r2, #25
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	e003      	b.n	8009d22 <lsm6dsv16x_gy_data_rate_get+0x19e>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2229      	movs	r2, #41	@ 0x29
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	bf00      	nop
 8009d22:	e039      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009d24:	7cfb      	ldrb	r3, [r7, #19]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d005      	beq.n	8009d36 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d007      	beq.n	8009d3e <lsm6dsv16x_gy_data_rate_get+0x1ba>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	220a      	movs	r2, #10
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	e007      	b.n	8009d46 <lsm6dsv16x_gy_data_rate_get+0x1c2>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	221a      	movs	r2, #26
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	e003      	b.n	8009d46 <lsm6dsv16x_gy_data_rate_get+0x1c2>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	222a      	movs	r2, #42	@ 0x2a
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	bf00      	nop
 8009d46:	e027      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009d48:	7cfb      	ldrb	r3, [r7, #19]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d005      	beq.n	8009d5a <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d007      	beq.n	8009d62 <lsm6dsv16x_gy_data_rate_get+0x1de>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	220b      	movs	r2, #11
 8009d56:	701a      	strb	r2, [r3, #0]
 8009d58:	e007      	b.n	8009d6a <lsm6dsv16x_gy_data_rate_get+0x1e6>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	221b      	movs	r2, #27
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e003      	b.n	8009d6a <lsm6dsv16x_gy_data_rate_get+0x1e6>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	222b      	movs	r2, #43	@ 0x2b
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	bf00      	nop
 8009d6a:	e015      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009d6c:	7cfb      	ldrb	r3, [r7, #19]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d005      	beq.n	8009d7e <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d007      	beq.n	8009d86 <lsm6dsv16x_gy_data_rate_get+0x202>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	220c      	movs	r2, #12
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e007      	b.n	8009d8e <lsm6dsv16x_gy_data_rate_get+0x20a>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	221c      	movs	r2, #28
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	e003      	b.n	8009d8e <lsm6dsv16x_gy_data_rate_get+0x20a>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	222c      	movs	r2, #44	@ 0x2c
 8009d8a:	701a      	strb	r2, [r3, #0]
 8009d8c:	bf00      	nop
 8009d8e:	e003      	b.n	8009d98 <lsm6dsv16x_gy_data_rate_get+0x214>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	bf00      	nop
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop

08009da4 <lsm6dsv16x_auto_increment_set>:
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
 8009db0:	f107 0208 	add.w	r2, r7, #8
 8009db4:	2301      	movs	r3, #1
 8009db6:	2112      	movs	r1, #18
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fcb3 	bl	8009724 <lsm6dsv16x_read_reg>
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10f      	bne.n	8009de6 <lsm6dsv16x_auto_increment_set+0x42>
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	7a3b      	ldrb	r3, [r7, #8]
 8009dd0:	f362 0382 	bfi	r3, r2, #2, #1
 8009dd4:	723b      	strb	r3, [r7, #8]
 8009dd6:	f107 0208 	add.w	r2, r7, #8
 8009dda:	2301      	movs	r3, #1
 8009ddc:	2112      	movs	r1, #18
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fcbe 	bl	8009760 <lsm6dsv16x_write_reg>
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <lsm6dsv16x_block_data_update_set>:
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
 8009dfc:	f107 0208 	add.w	r2, r7, #8
 8009e00:	2301      	movs	r3, #1
 8009e02:	2112      	movs	r1, #18
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7ff fc8d 	bl	8009724 <lsm6dsv16x_read_reg>
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10f      	bne.n	8009e32 <lsm6dsv16x_block_data_update_set+0x42>
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	7a3b      	ldrb	r3, [r7, #8]
 8009e1c:	f362 1386 	bfi	r3, r2, #6, #1
 8009e20:	723b      	strb	r3, [r7, #8]
 8009e22:	f107 0208 	add.w	r2, r7, #8
 8009e26:	2301      	movs	r3, #1
 8009e28:	2112      	movs	r1, #18
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fc98 	bl	8009760 <lsm6dsv16x_write_reg>
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <lsm6dsv16x_gy_full_scale_set>:
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
 8009e48:	f107 0208 	add.w	r2, r7, #8
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	2115      	movs	r1, #21
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fc67 	bl	8009724 <lsm6dsv16x_read_reg>
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10f      	bne.n	8009e7e <lsm6dsv16x_gy_full_scale_set+0x42>
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	7a3b      	ldrb	r3, [r7, #8]
 8009e68:	f362 0303 	bfi	r3, r2, #0, #4
 8009e6c:	723b      	strb	r3, [r7, #8]
 8009e6e:	f107 0208 	add.w	r2, r7, #8
 8009e72:	2301      	movs	r3, #1
 8009e74:	2115      	movs	r1, #21
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff fc72 	bl	8009760 <lsm6dsv16x_write_reg>
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <lsm6dsv16x_gy_full_scale_get>:
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
 8009e92:	f107 0208 	add.w	r2, r7, #8
 8009e96:	2301      	movs	r3, #1
 8009e98:	2115      	movs	r1, #21
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff fc42 	bl	8009724 <lsm6dsv16x_read_reg>
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <lsm6dsv16x_gy_full_scale_get+0x24>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	e040      	b.n	8009f2e <lsm6dsv16x_gy_full_scale_get+0xa6>
 8009eac:	7a3b      	ldrb	r3, [r7, #8]
 8009eae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b0c      	cmp	r3, #12
 8009eb6:	d835      	bhi.n	8009f24 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ef5 	.word	0x08009ef5
 8009ec4:	08009efd 	.word	0x08009efd
 8009ec8:	08009f05 	.word	0x08009f05
 8009ecc:	08009f0d 	.word	0x08009f0d
 8009ed0:	08009f15 	.word	0x08009f15
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009f25 	.word	0x08009f25
 8009edc:	08009f25 	.word	0x08009f25
 8009ee0:	08009f25 	.word	0x08009f25
 8009ee4:	08009f25 	.word	0x08009f25
 8009ee8:	08009f25 	.word	0x08009f25
 8009eec:	08009f25 	.word	0x08009f25
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	e017      	b.n	8009f2c <lsm6dsv16x_gy_full_scale_get+0xa4>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2201      	movs	r2, #1
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	e013      	b.n	8009f2c <lsm6dsv16x_gy_full_scale_get+0xa4>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2202      	movs	r2, #2
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e00f      	b.n	8009f2c <lsm6dsv16x_gy_full_scale_get+0xa4>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2203      	movs	r2, #3
 8009f10:	701a      	strb	r2, [r3, #0]
 8009f12:	e00b      	b.n	8009f2c <lsm6dsv16x_gy_full_scale_get+0xa4>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2204      	movs	r2, #4
 8009f18:	701a      	strb	r2, [r3, #0]
 8009f1a:	e007      	b.n	8009f2c <lsm6dsv16x_gy_full_scale_get+0xa4>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	220c      	movs	r2, #12
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	e003      	b.n	8009f2c <lsm6dsv16x_gy_full_scale_get+0xa4>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	bf00      	nop
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop

08009f38 <lsm6dsv16x_xl_full_scale_set>:
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
 8009f44:	f107 0208 	add.w	r2, r7, #8
 8009f48:	2301      	movs	r3, #1
 8009f4a:	2117      	movs	r1, #23
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff fbe9 	bl	8009724 <lsm6dsv16x_read_reg>
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10f      	bne.n	8009f7a <lsm6dsv16x_xl_full_scale_set+0x42>
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	f003 0303 	and.w	r3, r3, #3
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	7a3b      	ldrb	r3, [r7, #8]
 8009f64:	f362 0301 	bfi	r3, r2, #0, #2
 8009f68:	723b      	strb	r3, [r7, #8]
 8009f6a:	f107 0208 	add.w	r2, r7, #8
 8009f6e:	2301      	movs	r3, #1
 8009f70:	2117      	movs	r1, #23
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff fbf4 	bl	8009760 <lsm6dsv16x_write_reg>
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <lsm6dsv16x_xl_full_scale_get>:
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	2301      	movs	r3, #1
 8009f94:	2117      	movs	r1, #23
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fbc4 	bl	8009724 <lsm6dsv16x_read_reg>
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <lsm6dsv16x_xl_full_scale_get+0x24>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	e026      	b.n	8009ff6 <lsm6dsv16x_xl_full_scale_get+0x72>
 8009fa8:	7a3b      	ldrb	r3, [r7, #8]
 8009faa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d81b      	bhi.n	8009fec <lsm6dsv16x_xl_full_scale_get+0x68>
 8009fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fbc <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fba:	bf00      	nop
 8009fbc:	08009fcd 	.word	0x08009fcd
 8009fc0:	08009fd5 	.word	0x08009fd5
 8009fc4:	08009fdd 	.word	0x08009fdd
 8009fc8:	08009fe5 	.word	0x08009fe5
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	e00f      	b.n	8009ff4 <lsm6dsv16x_xl_full_scale_get+0x70>
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e00b      	b.n	8009ff4 <lsm6dsv16x_xl_full_scale_get+0x70>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	e007      	b.n	8009ff4 <lsm6dsv16x_xl_full_scale_get+0x70>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2203      	movs	r2, #3
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	e003      	b.n	8009ff4 <lsm6dsv16x_xl_full_scale_get+0x70>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	bf00      	nop
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop

0800a000 <lsm6dsv16x_angular_rate_raw_get>:
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
 800a00a:	f107 020c 	add.w	r2, r7, #12
 800a00e:	2306      	movs	r3, #6
 800a010:	2122      	movs	r1, #34	@ 0x22
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fb86 	bl	8009724 <lsm6dsv16x_read_reg>
 800a018:	6178      	str	r0, [r7, #20]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <lsm6dsv16x_angular_rate_raw_get+0x24>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	e036      	b.n	800a092 <lsm6dsv16x_angular_rate_raw_get+0x92>
 800a024:	7b7b      	ldrb	r3, [r7, #13]
 800a026:	b21a      	sxth	r2, r3
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	801a      	strh	r2, [r3, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a032:	b29b      	uxth	r3, r3
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	b29b      	uxth	r3, r3
 800a038:	7b3a      	ldrb	r2, [r7, #12]
 800a03a:	4413      	add	r3, r2
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	b21a      	sxth	r2, r3
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	7bfa      	ldrb	r2, [r7, #15]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	3302      	adds	r3, #2
 800a04a:	b212      	sxth	r2, r2
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	3302      	adds	r3, #2
 800a052:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a056:	b29b      	uxth	r3, r3
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	7bba      	ldrb	r2, [r7, #14]
 800a05e:	4413      	add	r3, r2
 800a060:	b29a      	uxth	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	3302      	adds	r3, #2
 800a066:	b212      	sxth	r2, r2
 800a068:	801a      	strh	r2, [r3, #0]
 800a06a:	7c7a      	ldrb	r2, [r7, #17]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	3304      	adds	r3, #4
 800a070:	b212      	sxth	r2, r2
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	3304      	adds	r3, #4
 800a078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	b29b      	uxth	r3, r3
 800a082:	7c3a      	ldrb	r2, [r7, #16]
 800a084:	4413      	add	r3, r2
 800a086:	b29a      	uxth	r2, r3
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	3304      	adds	r3, #4
 800a08c:	b212      	sxth	r2, r2
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <lsm6dsv16x_acceleration_raw_get>:
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b086      	sub	sp, #24
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
 800a0a4:	f107 020c 	add.w	r2, r7, #12
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	2128      	movs	r1, #40	@ 0x28
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fb39 	bl	8009724 <lsm6dsv16x_read_reg>
 800a0b2:	6178      	str	r0, [r7, #20]
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <lsm6dsv16x_acceleration_raw_get+0x24>
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	e036      	b.n	800a12c <lsm6dsv16x_acceleration_raw_get+0x92>
 800a0be:	7b7b      	ldrb	r3, [r7, #13]
 800a0c0:	b21a      	sxth	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	801a      	strh	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	7b3a      	ldrb	r2, [r7, #12]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	b21a      	sxth	r2, r3
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	801a      	strh	r2, [r3, #0]
 800a0de:	7bfa      	ldrb	r2, [r7, #15]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	b212      	sxth	r2, r2
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	3302      	adds	r3, #2
 800a0ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	7bba      	ldrb	r2, [r7, #14]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	3302      	adds	r3, #2
 800a100:	b212      	sxth	r2, r2
 800a102:	801a      	strh	r2, [r3, #0]
 800a104:	7c7a      	ldrb	r2, [r7, #17]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	3304      	adds	r3, #4
 800a10a:	b212      	sxth	r2, r2
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	3304      	adds	r3, #4
 800a112:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a116:	b29b      	uxth	r3, r3
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	7c3a      	ldrb	r2, [r7, #16]
 800a11e:	4413      	add	r3, r2
 800a120:	b29a      	uxth	r2, r3
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	b212      	sxth	r2, r2
 800a128:	801a      	strh	r2, [r3, #0]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <lsm6dsv16x_fifo_mode_set>:
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
 800a140:	f107 0208 	add.w	r2, r7, #8
 800a144:	2301      	movs	r3, #1
 800a146:	210a      	movs	r1, #10
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff faeb 	bl	8009724 <lsm6dsv16x_read_reg>
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10f      	bne.n	800a176 <lsm6dsv16x_fifo_mode_set+0x42>
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	f003 0307 	and.w	r3, r3, #7
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	7a3b      	ldrb	r3, [r7, #8]
 800a160:	f362 0302 	bfi	r3, r2, #0, #3
 800a164:	723b      	strb	r3, [r7, #8]
 800a166:	f107 0208 	add.w	r2, r7, #8
 800a16a:	2301      	movs	r3, #1
 800a16c:	210a      	movs	r1, #10
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff faf6 	bl	8009760 <lsm6dsv16x_write_reg>
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <lsm6dsv16x_ah_qvar_mode_set>:
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	7039      	strb	r1, [r7, #0]
 800a18a:	f107 0208 	add.w	r2, r7, #8
 800a18e:	2301      	movs	r3, #1
 800a190:	2116      	movs	r1, #22
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff fac6 	bl	8009724 <lsm6dsv16x_read_reg>
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10f      	bne.n	800a1c0 <lsm6dsv16x_ah_qvar_mode_set+0x40>
 800a1a0:	783b      	ldrb	r3, [r7, #0]
 800a1a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	7a3b      	ldrb	r3, [r7, #8]
 800a1aa:	f362 13c7 	bfi	r3, r2, #7, #1
 800a1ae:	723b      	strb	r3, [r7, #8]
 800a1b0:	f107 0208 	add.w	r2, r7, #8
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	2116      	movs	r1, #22
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fad1 	bl	8009760 <lsm6dsv16x_write_reg>
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <SHT40AD1B_RegisterBusIO>:
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d103      	bne.n	800a1e4 <SHT40AD1B_RegisterBusIO+0x18>
 800a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	e034      	b.n	800a24e <SHT40AD1B_RegisterBusIO+0x82>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	609a      	str	r2, [r3, #8]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	7b1a      	ldrb	r2, [r3, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	731a      	strb	r2, [r3, #12]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	691a      	ldr	r2, [r3, #16]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	611a      	str	r2, [r3, #16]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	695a      	ldr	r2, [r3, #20]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	615a      	str	r2, [r3, #20]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	619a      	str	r2, [r3, #24]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a0e      	ldr	r2, [pc, #56]	@ (800a258 <SHT40AD1B_RegisterBusIO+0x8c>)
 800a220:	625a      	str	r2, [r3, #36]	@ 0x24
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a0d      	ldr	r2, [pc, #52]	@ (800a25c <SHT40AD1B_RegisterBusIO+0x90>)
 800a226:	621a      	str	r2, [r3, #32]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <SHT40AD1B_RegisterBusIO+0x7c>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4798      	blx	r3
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	e002      	b.n	800a24e <SHT40AD1B_RegisterBusIO+0x82>
 800a248:	f04f 33ff 	mov.w	r3, #4294967295
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	0800a4dd 	.word	0x0800a4dd
 800a25c:	0800a51d 	.word	0x0800a51d

0800a260 <SHT40AD1B_Init>:
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	635a      	str	r2, [r3, #52]	@ 0x34
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f04f 0200 	mov.w	r2, #0
 800a276:	639a      	str	r2, [r3, #56]	@ 0x38
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800a280:	2300      	movs	r3, #0
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <SHT40AD1B_DeInit>:
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800a29e:	2300      	movs	r3, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <SHT40AD1B_ReadID>:
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3320      	adds	r3, #32
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fa23 	bl	800a708 <sht40ad1b_device_id_get>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SHT40AD1B_GetCapabilities>:
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	709a      	strb	r2, [r3, #2]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	705a      	strb	r2, [r3, #1]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	70da      	strb	r2, [r3, #3]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	711a      	strb	r2, [r3, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	f04f 0200 	mov.w	r2, #0
 800a2fa:	609a      	str	r2, [r3, #8]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	f04f 0200 	mov.w	r2, #0
 800a302:	60da      	str	r2, [r3, #12]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f04f 0200 	mov.w	r2, #0
 800a30a:	611a      	str	r2, [r3, #16]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	f04f 0200 	mov.w	r2, #0
 800a312:	615a      	str	r2, [r3, #20]
 800a314:	2300      	movs	r3, #0
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <SHT40AD1B_HUM_Enable>:
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <SHT40AD1B_HUM_Enable+0x16>
 800a334:	2300      	movs	r3, #0
 800a336:	e004      	b.n	800a342 <SHT40AD1B_HUM_Enable+0x20>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800a340:	2300      	movs	r3, #0
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <SHT40AD1B_HUM_Disable>:
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <SHT40AD1B_HUM_Disable+0x16>
 800a360:	2300      	movs	r3, #0
 800a362:	e004      	b.n	800a36e <SHT40AD1B_HUM_Disable+0x20>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800a36c:	2300      	movs	r3, #0
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <SHT40AD1B_HUM_GetOutputDataRate>:
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <SHT40AD1B_HUM_SetOutputDataRate>:
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	ed87 0a00 	vstr	s0, [r7]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <SHT40AD1B_HUM_GetHumidity>:
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f86f 	bl	800a4a2 <GetData>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <SHT40AD1B_HUM_GetHumidity+0x1c>
 800a3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ce:	e004      	b.n	800a3da <SHT40AD1B_HUM_GetHumidity+0x26>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <SHT40AD1B_TEMP_Enable>:
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <SHT40AD1B_TEMP_Enable+0x16>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e004      	b.n	800a402 <SHT40AD1B_TEMP_Enable+0x20>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800a400:	2300      	movs	r3, #0
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <SHT40AD1B_TEMP_Disable>:
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <SHT40AD1B_TEMP_Disable+0x16>
 800a420:	2300      	movs	r3, #0
 800a422:	e004      	b.n	800a42e <SHT40AD1B_TEMP_Disable+0x20>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800a42c:	2300      	movs	r3, #0
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <SHT40AD1B_TEMP_GetOutputDataRate>:
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	6039      	str	r1, [r7, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	2300      	movs	r3, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <SHT40AD1B_TEMP_SetOutputDataRate>:
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	ed87 0a00 	vstr	s0, [r7]
 800a466:	2300      	movs	r3, #0
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <SHT40AD1B_TEMP_GetTemperature>:
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f80f 	bl	800a4a2 <GetData>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <SHT40AD1B_TEMP_GetTemperature+0x1c>
 800a48a:	f04f 33ff 	mov.w	r3, #4294967295
 800a48e:	e004      	b.n	800a49a <SHT40AD1B_TEMP_GetTemperature+0x26>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	2300      	movs	r3, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <GetData>:
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3320      	adds	r3, #32
 800a4ae:	f107 0208 	add.w	r2, r7, #8
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f881 	bl	800a5bc <sht40ad1b_data_get>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <GetData+0x24>
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c4:	e006      	b.n	800a4d4 <GetData+0x32>
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <ReadRegWrap>:
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	72fb      	strb	r3, [r7, #11]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	813b      	strh	r3, [r7, #8]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d109      	bne.n	800a510 <ReadRegWrap+0x34>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	7b12      	ldrb	r2, [r2, #12]
 800a504:	4610      	mov	r0, r2
 800a506:	893a      	ldrh	r2, [r7, #8]
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	4798      	blx	r3
 800a50c:	4603      	mov	r3, r0
 800a50e:	e001      	b.n	800a514 <ReadRegWrap+0x38>
 800a510:	f04f 33ff 	mov.w	r3, #4294967295
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <WriteRegWrap>:
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	607a      	str	r2, [r7, #4]
 800a526:	461a      	mov	r2, r3
 800a528:	460b      	mov	r3, r1
 800a52a:	72fb      	strb	r3, [r7, #11]
 800a52c:	4613      	mov	r3, r2
 800a52e:	813b      	strh	r3, [r7, #8]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d109      	bne.n	800a550 <WriteRegWrap+0x34>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	7b12      	ldrb	r2, [r2, #12]
 800a544:	4610      	mov	r0, r2
 800a546:	893a      	ldrh	r2, [r7, #8]
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	4798      	blx	r3
 800a54c:	4603      	mov	r3, r0
 800a54e:	e001      	b.n	800a554 <WriteRegWrap+0x38>
 800a550:	f04f 33ff 	mov.w	r3, #4294967295
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <sht40ad1b_read_reg>:
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	607a      	str	r2, [r7, #4]
 800a566:	461a      	mov	r2, r3
 800a568:	460b      	mov	r3, r1
 800a56a:	72fb      	strb	r3, [r7, #11]
 800a56c:	4613      	mov	r3, r2
 800a56e:	813b      	strh	r3, [r7, #8]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	685c      	ldr	r4, [r3, #4]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	68d8      	ldr	r0, [r3, #12]
 800a578:	893b      	ldrh	r3, [r7, #8]
 800a57a:	7af9      	ldrb	r1, [r7, #11]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	47a0      	blx	r4
 800a580:	6178      	str	r0, [r7, #20]
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	4618      	mov	r0, r3
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd90      	pop	{r4, r7, pc}

0800a58c <sht40ad1b_write_reg>:
 800a58c:	b590      	push	{r4, r7, lr}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	607a      	str	r2, [r7, #4]
 800a596:	461a      	mov	r2, r3
 800a598:	460b      	mov	r3, r1
 800a59a:	72fb      	strb	r3, [r7, #11]
 800a59c:	4613      	mov	r3, r2
 800a59e:	813b      	strh	r3, [r7, #8]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681c      	ldr	r4, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	68d8      	ldr	r0, [r3, #12]
 800a5a8:	893b      	ldrh	r3, [r7, #8]
 800a5aa:	7af9      	ldrb	r1, [r7, #11]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	47a0      	blx	r4
 800a5b0:	6178      	str	r0, [r7, #20]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd90      	pop	{r4, r7, pc}

0800a5bc <sht40ad1b_data_get>:
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	23fd      	movs	r3, #253	@ 0xfd
 800a5c8:	73fb      	strb	r3, [r7, #15]
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	809a      	strh	r2, [r3, #4]
 800a5d4:	f107 020f 	add.w	r2, r7, #15
 800a5d8:	2301      	movs	r3, #1
 800a5da:	2100      	movs	r1, #0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff ffd5 	bl	800a58c <sht40ad1b_write_reg>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <sht40ad1b_data_get+0x30>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e07d      	b.n	800a6e8 <sht40ad1b_data_get+0x12c>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	200a      	movs	r0, #10
 800a5f2:	4798      	blx	r3
 800a5f4:	f107 0208 	add.w	r2, r7, #8
 800a5f8:	2306      	movs	r3, #6
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ffad 	bl	800a55c <sht40ad1b_read_reg>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <sht40ad1b_data_get+0x50>
 800a608:	2301      	movs	r3, #1
 800a60a:	e06d      	b.n	800a6e8 <sht40ad1b_data_get+0x12c>
 800a60c:	7a3b      	ldrb	r3, [r7, #8]
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	b29b      	uxth	r3, r3
 800a612:	7a7a      	ldrb	r2, [r7, #9]
 800a614:	4413      	add	r3, r2
 800a616:	83fb      	strh	r3, [r7, #30]
 800a618:	7abb      	ldrb	r3, [r7, #10]
 800a61a:	777b      	strb	r3, [r7, #29]
 800a61c:	7afb      	ldrb	r3, [r7, #11]
 800a61e:	021b      	lsls	r3, r3, #8
 800a620:	b29b      	uxth	r3, r3
 800a622:	7b3a      	ldrb	r2, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	837b      	strh	r3, [r7, #26]
 800a628:	7b7b      	ldrb	r3, [r7, #13]
 800a62a:	767b      	strb	r3, [r7, #25]
 800a62c:	7f7a      	ldrb	r2, [r7, #29]
 800a62e:	f107 0308 	add.w	r3, r7, #8
 800a632:	2102      	movs	r1, #2
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f8b3 	bl	800a7a0 <crc_check>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <sht40ad1b_data_get+0x88>
 800a640:	2301      	movs	r3, #1
 800a642:	e051      	b.n	800a6e8 <sht40ad1b_data_get+0x12c>
 800a644:	7e7a      	ldrb	r2, [r7, #25]
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	3303      	adds	r3, #3
 800a64c:	2102      	movs	r1, #2
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f8a6 	bl	800a7a0 <crc_check>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <sht40ad1b_data_get+0xa2>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e044      	b.n	800a6e8 <sht40ad1b_data_get+0x12c>
 800a65e:	8bfb      	ldrh	r3, [r7, #30]
 800a660:	ee07 3a90 	vmov	s15, r3
 800a664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a668:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a6f0 <sht40ad1b_data_get+0x134>
 800a66c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a670:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a6f4 <sht40ad1b_data_get+0x138>
 800a674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a678:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a6f8 <sht40ad1b_data_get+0x13c>
 800a67c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a680:	edc7 7a05 	vstr	s15, [r7, #20]
 800a684:	8b7b      	ldrh	r3, [r7, #26]
 800a686:	ee07 3a90 	vmov	s15, r3
 800a68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a6fc <sht40ad1b_data_get+0x140>
 800a692:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a696:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a6f4 <sht40ad1b_data_get+0x138>
 800a69a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a69e:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a6a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6a6:	edc7 7a04 	vstr	s15, [r7, #16]
 800a6aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800a6ae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a700 <sht40ad1b_data_get+0x144>
 800a6b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ba:	dd01      	ble.n	800a6c0 <sht40ad1b_data_get+0x104>
 800a6bc:	4b11      	ldr	r3, [pc, #68]	@ (800a704 <sht40ad1b_data_get+0x148>)
 800a6be:	e00a      	b.n	800a6d6 <sht40ad1b_data_get+0x11a>
 800a6c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a6c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	d502      	bpl.n	800a6d4 <sht40ad1b_data_get+0x118>
 800a6ce:	f04f 0300 	mov.w	r3, #0
 800a6d2:	e000      	b.n	800a6d6 <sht40ad1b_data_get+0x11a>
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	432f0000 	.word	0x432f0000
 800a6f4:	477fff00 	.word	0x477fff00
 800a6f8:	42340000 	.word	0x42340000
 800a6fc:	42fa0000 	.word	0x42fa0000
 800a700:	42c80000 	.word	0x42c80000
 800a704:	42c80000 	.word	0x42c80000

0800a708 <sht40ad1b_device_id_get>:
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
 800a718:	2300      	movs	r3, #0
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <crc_calculate>:
 800a726:	b480      	push	{r7}
 800a728:	b085      	sub	sp, #20
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	460b      	mov	r3, r1
 800a730:	807b      	strh	r3, [r7, #2]
 800a732:	2331      	movs	r3, #49	@ 0x31
 800a734:	72bb      	strb	r3, [r7, #10]
 800a736:	23ff      	movs	r3, #255	@ 0xff
 800a738:	73fb      	strb	r3, [r7, #15]
 800a73a:	2300      	movs	r3, #0
 800a73c:	81bb      	strh	r3, [r7, #12]
 800a73e:	e024      	b.n	800a78a <crc_calculate+0x64>
 800a740:	89bb      	ldrh	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	781a      	ldrb	r2, [r3, #0]
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	4053      	eors	r3, r2
 800a74c:	73fb      	strb	r3, [r7, #15]
 800a74e:	2308      	movs	r3, #8
 800a750:	72fb      	strb	r3, [r7, #11]
 800a752:	e014      	b.n	800a77e <crc_calculate+0x58>
 800a754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	da09      	bge.n	800a770 <crc_calculate+0x4a>
 800a75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	b25a      	sxtb	r2, r3
 800a764:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a768:	4053      	eors	r3, r2
 800a76a:	b25b      	sxtb	r3, r3
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	e002      	b.n	800a776 <crc_calculate+0x50>
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	b2db      	uxtb	r3, r3
 800a776:	73fb      	strb	r3, [r7, #15]
 800a778:	7afb      	ldrb	r3, [r7, #11]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	72fb      	strb	r3, [r7, #11]
 800a77e:	7afb      	ldrb	r3, [r7, #11]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1e7      	bne.n	800a754 <crc_calculate+0x2e>
 800a784:	89bb      	ldrh	r3, [r7, #12]
 800a786:	3301      	adds	r3, #1
 800a788:	81bb      	strh	r3, [r7, #12]
 800a78a:	89ba      	ldrh	r2, [r7, #12]
 800a78c:	887b      	ldrh	r3, [r7, #2]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d3d6      	bcc.n	800a740 <crc_calculate+0x1a>
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <crc_check>:
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	807b      	strh	r3, [r7, #2]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	707b      	strb	r3, [r7, #1]
 800a7b0:	887b      	ldrh	r3, [r7, #2]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff ffb6 	bl	800a726 <crc_calculate>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	787b      	ldrb	r3, [r7, #1]
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	bf14      	ite	ne
 800a7c4:	2301      	movne	r3, #1
 800a7c6:	2300      	moveq	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <STTS22H_RegisterBusIO>:
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d103      	bne.n	800a7ec <STTS22H_RegisterBusIO+0x18>
 800a7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	e034      	b.n	800a856 <STTS22H_RegisterBusIO+0x82>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	605a      	str	r2, [r3, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	609a      	str	r2, [r3, #8]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	7b1a      	ldrb	r2, [r3, #12]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	731a      	strb	r2, [r3, #12]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	691a      	ldr	r2, [r3, #16]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	611a      	str	r2, [r3, #16]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	695a      	ldr	r2, [r3, #20]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	615a      	str	r2, [r3, #20]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	699a      	ldr	r2, [r3, #24]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	619a      	str	r2, [r3, #24]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a0e      	ldr	r2, [pc, #56]	@ (800a860 <STTS22H_RegisterBusIO+0x8c>)
 800a828:	625a      	str	r2, [r3, #36]	@ 0x24
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a0d      	ldr	r2, [pc, #52]	@ (800a864 <STTS22H_RegisterBusIO+0x90>)
 800a82e:	621a      	str	r2, [r3, #32]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	69da      	ldr	r2, [r3, #28]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	629a      	str	r2, [r3, #40]	@ 0x28
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d004      	beq.n	800a850 <STTS22H_RegisterBusIO+0x7c>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4798      	blx	r3
 800a84c:	60f8      	str	r0, [r7, #12]
 800a84e:	e002      	b.n	800a856 <STTS22H_RegisterBusIO+0x82>
 800a850:	f04f 33ff 	mov.w	r3, #4294967295
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	0800ac71 	.word	0x0800ac71
 800a864:	0800acdf 	.word	0x0800acdf

0800a868 <STTS22H_Init>:
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a876:	2b00      	cmp	r3, #0
 800a878:	d127      	bne.n	800a8ca <STTS22H_Init+0x62>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a880:	635a      	str	r2, [r3, #52]	@ 0x34
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3320      	adds	r3, #32
 800a886:	2101      	movs	r1, #1
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fbad 	bl	800afe8 <stts22h_block_data_update_set>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <STTS22H_Init+0x32>
 800a894:	f04f 33ff 	mov.w	r3, #4294967295
 800a898:	e01c      	b.n	800a8d4 <STTS22H_Init+0x6c>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3320      	adds	r3, #32
 800a89e:	2101      	movs	r1, #1
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fbfa 	bl	800b09a <stts22h_auto_increment_set>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <STTS22H_Init+0x4a>
 800a8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b0:	e010      	b.n	800a8d4 <STTS22H_Init+0x6c>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3320      	adds	r3, #32
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fa9d 	bl	800adf8 <stts22h_temp_data_rate_set>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <STTS22H_Init+0x62>
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	e004      	b.n	800a8d4 <STTS22H_Init+0x6c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <STTS22H_DeInit>:
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d108      	bne.n	800a900 <STTS22H_DeInit+0x24>
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f878 	bl	800a9e4 <STTS22H_TEMP_Disable>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <STTS22H_DeInit+0x24>
 800a8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fe:	e004      	b.n	800a90a <STTS22H_DeInit+0x2e>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800a908:	2300      	movs	r3, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <STTS22H_ReadID>:
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3320      	adds	r3, #32
 800a920:	f107 020f 	add.w	r2, r7, #15
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f000 fba6 	bl	800b078 <stts22h_dev_id_get>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <STTS22H_ReadID+0x26>
 800a932:	f04f 33ff 	mov.w	r3, #4294967295
 800a936:	e003      	b.n	800a940 <STTS22H_ReadID+0x2e>
 800a938:	7bfa      	ldrb	r2, [r7, #15]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	2300      	movs	r3, #0
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <STTS22H_GetCapabilities>:
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2200      	movs	r2, #0
 800a956:	709a      	strb	r2, [r3, #2]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2200      	movs	r2, #0
 800a95c:	705a      	strb	r2, [r3, #1]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2201      	movs	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	70da      	strb	r2, [r3, #3]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2200      	movs	r2, #0
 800a96e:	711a      	strb	r2, [r3, #4]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	f04f 0200 	mov.w	r2, #0
 800a976:	609a      	str	r2, [r3, #8]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	4a08      	ldr	r2, [pc, #32]	@ (800a99c <STTS22H_GetCapabilities+0x54>)
 800a97c:	60da      	str	r2, [r3, #12]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	611a      	str	r2, [r3, #16]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	615a      	str	r2, [r3, #20]
 800a98e:	2300      	movs	r3, #0
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	43480000 	.word	0x43480000

0800a9a0 <STTS22H_TEMP_Enable>:
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <STTS22H_TEMP_Enable+0x16>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e012      	b.n	800a9dc <STTS22H_TEMP_Enable+0x3c>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a9bc:	eeb0 0a67 	vmov.f32	s0, s15
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f8e9 	bl	800ab98 <STTS22H_TEMP_SetOutputDataRate>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <STTS22H_TEMP_Enable+0x32>
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d0:	e004      	b.n	800a9dc <STTS22H_TEMP_Enable+0x3c>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <STTS22H_TEMP_Disable>:
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <STTS22H_TEMP_Disable+0x16>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e01c      	b.n	800aa34 <STTS22H_TEMP_Disable+0x50>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3334      	adds	r3, #52	@ 0x34
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f81b 	bl	800aa3c <STTS22H_TEMP_GetOutputDataRate>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <STTS22H_TEMP_Disable+0x2e>
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	e010      	b.n	800aa34 <STTS22H_TEMP_Disable+0x50>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3320      	adds	r3, #32
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 f9ed 	bl	800adf8 <stts22h_temp_data_rate_set>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <STTS22H_TEMP_Disable+0x46>
 800aa24:	f04f 33ff 	mov.w	r3, #4294967295
 800aa28:	e004      	b.n	800aa34 <STTS22H_TEMP_Disable+0x50>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800aa32:	2300      	movs	r3, #0
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <STTS22H_TEMP_GetOutputDataRate>:
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3320      	adds	r3, #32
 800aa4e:	f107 020b 	add.w	r2, r7, #11
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 fa11 	bl	800ae7c <stts22h_temp_data_rate_get>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <STTS22H_TEMP_GetOutputDataRate+0x2a>
 800aa60:	f04f 33ff 	mov.w	r3, #4294967295
 800aa64:	e08b      	b.n	800ab7e <STTS22H_TEMP_GetOutputDataRate+0x142>
 800aa66:	7afb      	ldrb	r3, [r7, #11]
 800aa68:	2b32      	cmp	r3, #50	@ 0x32
 800aa6a:	f200 8083 	bhi.w	800ab74 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800aa6e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa74 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa74:	0800ab41 	.word	0x0800ab41
 800aa78:	0800ab41 	.word	0x0800ab41
 800aa7c:	0800ab55 	.word	0x0800ab55
 800aa80:	0800ab75 	.word	0x0800ab75
 800aa84:	0800ab4b 	.word	0x0800ab4b
 800aa88:	0800ab75 	.word	0x0800ab75
 800aa8c:	0800ab75 	.word	0x0800ab75
 800aa90:	0800ab75 	.word	0x0800ab75
 800aa94:	0800ab75 	.word	0x0800ab75
 800aa98:	0800ab75 	.word	0x0800ab75
 800aa9c:	0800ab75 	.word	0x0800ab75
 800aaa0:	0800ab75 	.word	0x0800ab75
 800aaa4:	0800ab75 	.word	0x0800ab75
 800aaa8:	0800ab75 	.word	0x0800ab75
 800aaac:	0800ab75 	.word	0x0800ab75
 800aab0:	0800ab75 	.word	0x0800ab75
 800aab4:	0800ab75 	.word	0x0800ab75
 800aab8:	0800ab75 	.word	0x0800ab75
 800aabc:	0800ab5d 	.word	0x0800ab5d
 800aac0:	0800ab75 	.word	0x0800ab75
 800aac4:	0800ab75 	.word	0x0800ab75
 800aac8:	0800ab75 	.word	0x0800ab75
 800aacc:	0800ab75 	.word	0x0800ab75
 800aad0:	0800ab75 	.word	0x0800ab75
 800aad4:	0800ab75 	.word	0x0800ab75
 800aad8:	0800ab75 	.word	0x0800ab75
 800aadc:	0800ab75 	.word	0x0800ab75
 800aae0:	0800ab75 	.word	0x0800ab75
 800aae4:	0800ab75 	.word	0x0800ab75
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab75 	.word	0x0800ab75
 800aaf0:	0800ab75 	.word	0x0800ab75
 800aaf4:	0800ab75 	.word	0x0800ab75
 800aaf8:	0800ab75 	.word	0x0800ab75
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800ab75 	.word	0x0800ab75
 800ab04:	0800ab75 	.word	0x0800ab75
 800ab08:	0800ab75 	.word	0x0800ab75
 800ab0c:	0800ab75 	.word	0x0800ab75
 800ab10:	0800ab75 	.word	0x0800ab75
 800ab14:	0800ab75 	.word	0x0800ab75
 800ab18:	0800ab75 	.word	0x0800ab75
 800ab1c:	0800ab75 	.word	0x0800ab75
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800ab75 	.word	0x0800ab75
 800ab28:	0800ab75 	.word	0x0800ab75
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800ab75 	.word	0x0800ab75
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab75 	.word	0x0800ab75
 800ab3c:	0800ab6d 	.word	0x0800ab6d
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	f04f 0200 	mov.w	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	e018      	b.n	800ab7c <STTS22H_TEMP_GetOutputDataRate+0x140>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e013      	b.n	800ab7c <STTS22H_TEMP_GetOutputDataRate+0x140>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	4a0c      	ldr	r2, [pc, #48]	@ (800ab88 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	e00f      	b.n	800ab7c <STTS22H_TEMP_GetOutputDataRate+0x140>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab8c <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	e00b      	b.n	800ab7c <STTS22H_TEMP_GetOutputDataRate+0x140>
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	4a0a      	ldr	r2, [pc, #40]	@ (800ab90 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	e007      	b.n	800ab7c <STTS22H_TEMP_GetOutputDataRate+0x140>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	4a09      	ldr	r2, [pc, #36]	@ (800ab94 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e003      	b.n	800ab7c <STTS22H_TEMP_GetOutputDataRate+0x140>
 800ab74:	f04f 33ff 	mov.w	r3, #4294967295
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	bf00      	nop
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	41c80000 	.word	0x41c80000
 800ab8c:	42480000 	.word	0x42480000
 800ab90:	42c80000 	.word	0x42c80000
 800ab94:	43480000 	.word	0x43480000

0800ab98 <STTS22H_TEMP_SetOutputDataRate>:
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	ed87 0a00 	vstr	s0, [r7]
 800aba4:	edd7 7a00 	vldr	s15, [r7]
 800aba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb4:	d801      	bhi.n	800abba <STTS22H_TEMP_SetOutputDataRate+0x22>
 800abb6:	2304      	movs	r3, #4
 800abb8:	e021      	b.n	800abfe <STTS22H_TEMP_SetOutputDataRate+0x66>
 800abba:	edd7 7a00 	vldr	s15, [r7]
 800abbe:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800abc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abca:	d801      	bhi.n	800abd0 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800abcc:	2302      	movs	r3, #2
 800abce:	e016      	b.n	800abfe <STTS22H_TEMP_SetOutputDataRate+0x66>
 800abd0:	edd7 7a00 	vldr	s15, [r7]
 800abd4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800ac24 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800abd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe0:	d801      	bhi.n	800abe6 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800abe2:	2312      	movs	r3, #18
 800abe4:	e00b      	b.n	800abfe <STTS22H_TEMP_SetOutputDataRate+0x66>
 800abe6:	edd7 7a00 	vldr	s15, [r7]
 800abea:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ac28 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800abee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf6:	d801      	bhi.n	800abfc <STTS22H_TEMP_SetOutputDataRate+0x64>
 800abf8:	2322      	movs	r3, #34	@ 0x22
 800abfa:	e000      	b.n	800abfe <STTS22H_TEMP_SetOutputDataRate+0x66>
 800abfc:	2332      	movs	r3, #50	@ 0x32
 800abfe:	73fb      	strb	r3, [r7, #15]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3320      	adds	r3, #32
 800ac04:	7bfa      	ldrb	r2, [r7, #15]
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 f8f5 	bl	800adf8 <stts22h_temp_data_rate_set>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <STTS22H_TEMP_SetOutputDataRate+0x82>
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	e000      	b.n	800ac1c <STTS22H_TEMP_SetOutputDataRate+0x84>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	42480000 	.word	0x42480000
 800ac28:	42c80000 	.word	0x42c80000

0800ac2c <STTS22H_TEMP_GetTemperature>:
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3320      	adds	r3, #32
 800ac3a:	f107 020e 	add.w	r2, r7, #14
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f9f7 	bl	800b034 <stts22h_temperature_raw_get>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <STTS22H_TEMP_GetTemperature+0x26>
 800ac4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac50:	e00a      	b.n	800ac68 <STTS22H_TEMP_GetTemperature+0x3c>
 800ac52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 f8b4 	bl	800adc4 <stts22h_from_lsb_to_celsius>
 800ac5c:	eef0 7a40 	vmov.f32	s15, s0
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	edc3 7a00 	vstr	s15, [r3]
 800ac66:	2300      	movs	r3, #0
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <ReadRegWrap>:
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b089      	sub	sp, #36	@ 0x24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	607a      	str	r2, [r7, #4]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	72fb      	strb	r3, [r7, #11]
 800ac80:	4613      	mov	r3, r2
 800ac82:	813b      	strh	r3, [r7, #8]
 800ac84:	2300      	movs	r3, #0
 800ac86:	61bb      	str	r3, [r7, #24]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d11f      	bne.n	800acd4 <ReadRegWrap+0x64>
 800ac94:	2300      	movs	r3, #0
 800ac96:	83fb      	strh	r3, [r7, #30]
 800ac98:	e018      	b.n	800accc <ReadRegWrap+0x5c>
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	695c      	ldr	r4, [r3, #20]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	7b1b      	ldrb	r3, [r3, #12]
 800aca2:	4618      	mov	r0, r3
 800aca4:	7afb      	ldrb	r3, [r7, #11]
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	8bfb      	ldrh	r3, [r7, #30]
 800acaa:	4413      	add	r3, r2
 800acac:	b299      	uxth	r1, r3
 800acae:	8bfb      	ldrh	r3, [r7, #30]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	441a      	add	r2, r3
 800acb4:	2301      	movs	r3, #1
 800acb6:	47a0      	blx	r4
 800acb8:	61b8      	str	r0, [r7, #24]
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <ReadRegWrap+0x56>
 800acc0:	f04f 33ff 	mov.w	r3, #4294967295
 800acc4:	e007      	b.n	800acd6 <ReadRegWrap+0x66>
 800acc6:	8bfb      	ldrh	r3, [r7, #30]
 800acc8:	3301      	adds	r3, #1
 800acca:	83fb      	strh	r3, [r7, #30]
 800accc:	8bfa      	ldrh	r2, [r7, #30]
 800acce:	893b      	ldrh	r3, [r7, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d3e2      	bcc.n	800ac9a <ReadRegWrap+0x2a>
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	4618      	mov	r0, r3
 800acd8:	3724      	adds	r7, #36	@ 0x24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd90      	pop	{r4, r7, pc}

0800acde <WriteRegWrap>:
 800acde:	b590      	push	{r4, r7, lr}
 800ace0:	b089      	sub	sp, #36	@ 0x24
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	461a      	mov	r2, r3
 800acea:	460b      	mov	r3, r1
 800acec:	72fb      	strb	r3, [r7, #11]
 800acee:	4613      	mov	r3, r2
 800acf0:	813b      	strh	r3, [r7, #8]
 800acf2:	2300      	movs	r3, #0
 800acf4:	61bb      	str	r3, [r7, #24]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	617b      	str	r3, [r7, #20]
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d11f      	bne.n	800ad42 <WriteRegWrap+0x64>
 800ad02:	2300      	movs	r3, #0
 800ad04:	83fb      	strh	r3, [r7, #30]
 800ad06:	e018      	b.n	800ad3a <WriteRegWrap+0x5c>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	691c      	ldr	r4, [r3, #16]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	7b1b      	ldrb	r3, [r3, #12]
 800ad10:	4618      	mov	r0, r3
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	8bfb      	ldrh	r3, [r7, #30]
 800ad18:	4413      	add	r3, r2
 800ad1a:	b299      	uxth	r1, r3
 800ad1c:	8bfb      	ldrh	r3, [r7, #30]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	441a      	add	r2, r3
 800ad22:	2301      	movs	r3, #1
 800ad24:	47a0      	blx	r4
 800ad26:	61b8      	str	r0, [r7, #24]
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <WriteRegWrap+0x56>
 800ad2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad32:	e007      	b.n	800ad44 <WriteRegWrap+0x66>
 800ad34:	8bfb      	ldrh	r3, [r7, #30]
 800ad36:	3301      	adds	r3, #1
 800ad38:	83fb      	strh	r3, [r7, #30]
 800ad3a:	8bfa      	ldrh	r2, [r7, #30]
 800ad3c:	893b      	ldrh	r3, [r7, #8]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d3e2      	bcc.n	800ad08 <WriteRegWrap+0x2a>
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	4618      	mov	r0, r3
 800ad46:	3724      	adds	r7, #36	@ 0x24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd90      	pop	{r4, r7, pc}

0800ad4c <stts22h_read_reg>:
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	607a      	str	r2, [r7, #4]
 800ad56:	461a      	mov	r2, r3
 800ad58:	460b      	mov	r3, r1
 800ad5a:	72fb      	strb	r3, [r7, #11]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	813b      	strh	r3, [r7, #8]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <stts22h_read_reg+0x20>
 800ad66:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6a:	e009      	b.n	800ad80 <stts22h_read_reg+0x34>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685c      	ldr	r4, [r3, #4]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	68d8      	ldr	r0, [r3, #12]
 800ad74:	893b      	ldrh	r3, [r7, #8]
 800ad76:	7af9      	ldrb	r1, [r7, #11]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	47a0      	blx	r4
 800ad7c:	6178      	str	r0, [r7, #20]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	4618      	mov	r0, r3
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd90      	pop	{r4, r7, pc}

0800ad88 <stts22h_write_reg>:
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	607a      	str	r2, [r7, #4]
 800ad92:	461a      	mov	r2, r3
 800ad94:	460b      	mov	r3, r1
 800ad96:	72fb      	strb	r3, [r7, #11]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	813b      	strh	r3, [r7, #8]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <stts22h_write_reg+0x20>
 800ada2:	f04f 33ff 	mov.w	r3, #4294967295
 800ada6:	e009      	b.n	800adbc <stts22h_write_reg+0x34>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681c      	ldr	r4, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68d8      	ldr	r0, [r3, #12]
 800adb0:	893b      	ldrh	r3, [r7, #8]
 800adb2:	7af9      	ldrb	r1, [r7, #11]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	47a0      	blx	r4
 800adb8:	6178      	str	r0, [r7, #20]
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	4618      	mov	r0, r3
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <stts22h_from_lsb_to_celsius>:
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	80fb      	strh	r3, [r7, #6]
 800adce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adda:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800adf4 <stts22h_from_lsb_to_celsius+0x30>
 800adde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ade2:	eef0 7a66 	vmov.f32	s15, s13
 800ade6:	eeb0 0a67 	vmov.f32	s0, s15
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	42c80000 	.word	0x42c80000

0800adf8 <stts22h_temp_data_rate_set>:
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
 800ae04:	f107 0208 	add.w	r2, r7, #8
 800ae08:	2301      	movs	r3, #1
 800ae0a:	2104      	movs	r1, #4
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff ff9d 	bl	800ad4c <stts22h_read_reg>
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d12a      	bne.n	800ae70 <stts22h_temp_data_rate_set+0x78>
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	7a3b      	ldrb	r3, [r7, #8]
 800ae24:	f362 0300 	bfi	r3, r2, #0, #1
 800ae28:	723b      	strb	r3, [r7, #8]
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	085b      	lsrs	r3, r3, #1
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	7a3b      	ldrb	r3, [r7, #8]
 800ae36:	f362 0382 	bfi	r3, r2, #2, #1
 800ae3a:	723b      	strb	r3, [r7, #8]
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	089b      	lsrs	r3, r3, #2
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	7a3b      	ldrb	r3, [r7, #8]
 800ae48:	f362 13c7 	bfi	r3, r2, #7, #1
 800ae4c:	723b      	strb	r3, [r7, #8]
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	7a3b      	ldrb	r3, [r7, #8]
 800ae5a:	f362 1305 	bfi	r3, r2, #4, #2
 800ae5e:	723b      	strb	r3, [r7, #8]
 800ae60:	f107 0208 	add.w	r2, r7, #8
 800ae64:	2301      	movs	r3, #1
 800ae66:	2104      	movs	r1, #4
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ff8d 	bl	800ad88 <stts22h_write_reg>
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <stts22h_temp_data_rate_get>:
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
 800ae86:	f107 0208 	add.w	r2, r7, #8
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	2104      	movs	r1, #4
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff ff5c 	bl	800ad4c <stts22h_read_reg>
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	7a3b      	ldrb	r3, [r7, #8]
 800ae98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	7a3b      	ldrb	r3, [r7, #8]
 800aea2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	7a3b      	ldrb	r3, [r7, #8]
 800aeae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	7a3b      	ldrb	r3, [r7, #8]
 800aeba:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	4313      	orrs	r3, r2
 800aec4:	2b32      	cmp	r3, #50	@ 0x32
 800aec6:	f200 8085 	bhi.w	800afd4 <stts22h_temp_data_rate_get+0x158>
 800aeca:	a201      	add	r2, pc, #4	@ (adr r2, 800aed0 <stts22h_temp_data_rate_get+0x54>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800af9d 	.word	0x0800af9d
 800aed4:	0800afa5 	.word	0x0800afa5
 800aed8:	0800afb5 	.word	0x0800afb5
 800aedc:	0800afd5 	.word	0x0800afd5
 800aee0:	0800afad 	.word	0x0800afad
 800aee4:	0800afd5 	.word	0x0800afd5
 800aee8:	0800afd5 	.word	0x0800afd5
 800aeec:	0800afd5 	.word	0x0800afd5
 800aef0:	0800afd5 	.word	0x0800afd5
 800aef4:	0800afd5 	.word	0x0800afd5
 800aef8:	0800afd5 	.word	0x0800afd5
 800aefc:	0800afd5 	.word	0x0800afd5
 800af00:	0800afd5 	.word	0x0800afd5
 800af04:	0800afd5 	.word	0x0800afd5
 800af08:	0800afd5 	.word	0x0800afd5
 800af0c:	0800afd5 	.word	0x0800afd5
 800af10:	0800afd5 	.word	0x0800afd5
 800af14:	0800afd5 	.word	0x0800afd5
 800af18:	0800afbd 	.word	0x0800afbd
 800af1c:	0800afd5 	.word	0x0800afd5
 800af20:	0800afd5 	.word	0x0800afd5
 800af24:	0800afd5 	.word	0x0800afd5
 800af28:	0800afd5 	.word	0x0800afd5
 800af2c:	0800afd5 	.word	0x0800afd5
 800af30:	0800afd5 	.word	0x0800afd5
 800af34:	0800afd5 	.word	0x0800afd5
 800af38:	0800afd5 	.word	0x0800afd5
 800af3c:	0800afd5 	.word	0x0800afd5
 800af40:	0800afd5 	.word	0x0800afd5
 800af44:	0800afd5 	.word	0x0800afd5
 800af48:	0800afd5 	.word	0x0800afd5
 800af4c:	0800afd5 	.word	0x0800afd5
 800af50:	0800afd5 	.word	0x0800afd5
 800af54:	0800afd5 	.word	0x0800afd5
 800af58:	0800afc5 	.word	0x0800afc5
 800af5c:	0800afd5 	.word	0x0800afd5
 800af60:	0800afd5 	.word	0x0800afd5
 800af64:	0800afd5 	.word	0x0800afd5
 800af68:	0800afd5 	.word	0x0800afd5
 800af6c:	0800afd5 	.word	0x0800afd5
 800af70:	0800afd5 	.word	0x0800afd5
 800af74:	0800afd5 	.word	0x0800afd5
 800af78:	0800afd5 	.word	0x0800afd5
 800af7c:	0800afd5 	.word	0x0800afd5
 800af80:	0800afd5 	.word	0x0800afd5
 800af84:	0800afd5 	.word	0x0800afd5
 800af88:	0800afd5 	.word	0x0800afd5
 800af8c:	0800afd5 	.word	0x0800afd5
 800af90:	0800afd5 	.word	0x0800afd5
 800af94:	0800afd5 	.word	0x0800afd5
 800af98:	0800afcd 	.word	0x0800afcd
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2200      	movs	r2, #0
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	e01b      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2201      	movs	r2, #1
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	e017      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2204      	movs	r2, #4
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	e013      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2202      	movs	r2, #2
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	e00f      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2212      	movs	r2, #18
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	e00b      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2222      	movs	r2, #34	@ 0x22
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	e007      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2232      	movs	r2, #50	@ 0x32
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	e003      	b.n	800afdc <stts22h_temp_data_rate_get+0x160>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	bf00      	nop
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop

0800afe8 <stts22h_block_data_update_set>:
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
 800aff4:	f107 0208 	add.w	r2, r7, #8
 800aff8:	2301      	movs	r3, #1
 800affa:	2104      	movs	r1, #4
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff fea5 	bl	800ad4c <stts22h_read_reg>
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10f      	bne.n	800b02a <stts22h_block_data_update_set+0x42>
 800b00a:	78fb      	ldrb	r3, [r7, #3]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	b2da      	uxtb	r2, r3
 800b012:	7a3b      	ldrb	r3, [r7, #8]
 800b014:	f362 1386 	bfi	r3, r2, #6, #1
 800b018:	723b      	strb	r3, [r7, #8]
 800b01a:	f107 0208 	add.w	r2, r7, #8
 800b01e:	2301      	movs	r3, #1
 800b020:	2104      	movs	r1, #4
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff feb0 	bl	800ad88 <stts22h_write_reg>
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <stts22h_temperature_raw_get>:
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	f107 0208 	add.w	r2, r7, #8
 800b042:	2302      	movs	r3, #2
 800b044:	2106      	movs	r1, #6
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff fe80 	bl	800ad4c <stts22h_read_reg>
 800b04c:	60f8      	str	r0, [r7, #12]
 800b04e:	7a7b      	ldrb	r3, [r7, #9]
 800b050:	b21a      	sxth	r2, r3
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	021b      	lsls	r3, r3, #8
 800b060:	b29b      	uxth	r3, r3
 800b062:	7a3a      	ldrb	r2, [r7, #8]
 800b064:	4413      	add	r3, r2
 800b066:	b29b      	uxth	r3, r3
 800b068:	b21a      	sxth	r2, r3
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	801a      	strh	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <stts22h_dev_id_get>:
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
 800b082:	2301      	movs	r3, #1
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	2101      	movs	r1, #1
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff fe5f 	bl	800ad4c <stts22h_read_reg>
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <stts22h_auto_increment_set>:
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	70fb      	strb	r3, [r7, #3]
 800b0a6:	f107 0208 	add.w	r2, r7, #8
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	2104      	movs	r1, #4
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff fe4c 	bl	800ad4c <stts22h_read_reg>
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10f      	bne.n	800b0dc <stts22h_auto_increment_set+0x42>
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	7a3b      	ldrb	r3, [r7, #8]
 800b0c6:	f362 03c3 	bfi	r3, r2, #3, #1
 800b0ca:	723b      	strb	r3, [r7, #8]
 800b0cc:	f107 0208 	add.w	r2, r7, #8
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	2104      	movs	r1, #4
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff fe57 	bl	800ad88 <stts22h_write_reg>
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08c      	sub	sp, #48	@ 0x30
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d07c      	beq.n	800b1fe <IKS4A1_ENV_SENSOR_Init+0x116>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b02      	cmp	r3, #2
 800b108:	f200 80b2 	bhi.w	800b270 <IKS4A1_ENV_SENSOR_Init+0x188>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <IKS4A1_ENV_SENSOR_Init+0x32>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d039      	beq.n	800b18c <IKS4A1_ENV_SENSOR_Init+0xa4>
 800b118:	e0aa      	b.n	800b270 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800b11a:	6838      	ldr	r0, [r7, #0]
 800b11c:	f000 f91c 	bl	800b358 <STTS22H_0_Probe>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
 800b12a:	e0df      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b12c:	4a71      	ldr	r2, [pc, #452]	@ (800b2f4 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4970      	ldr	r1, [pc, #448]	@ (800b2f8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b13e:	f107 0108 	add.w	r1, r7, #8
 800b142:	4610      	mov	r0, r2
 800b144:	4798      	blx	r3
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b14c:	f06f 0306 	mvn.w	r3, #6
 800b150:	e0cc      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b152:	7a3b      	ldrb	r3, [r7, #8]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d103      	bne.n	800b160 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b160:	7abb      	ldrb	r3, [r7, #10]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d103      	bne.n	800b16e <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	f043 0304 	orr.w	r3, r3, #4
 800b16c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b16e:	7a7b      	ldrb	r3, [r7, #9]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d103      	bne.n	800b17c <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	f043 0302 	orr.w	r3, r3, #2
 800b17a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d17a      	bne.n	800b278 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	f043 0308 	orr.w	r3, r3, #8
 800b188:	623b      	str	r3, [r7, #32]
      }
      break;
 800b18a:	e075      	b.n	800b278 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800b18c:	6838      	ldr	r0, [r7, #0]
 800b18e:	f000 f999 	bl	800b4c4 <LPS22DF_0_Probe>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800b198:	f04f 33ff 	mov.w	r3, #4294967295
 800b19c:	e0a6      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b19e:	4a55      	ldr	r2, [pc, #340]	@ (800b2f4 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4953      	ldr	r1, [pc, #332]	@ (800b2f8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b1b0:	f107 0108 	add.w	r1, r7, #8
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4798      	blx	r3
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b1be:	f06f 0306 	mvn.w	r3, #6
 800b1c2:	e093      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b1c4:	7a3b      	ldrb	r3, [r7, #8]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d103      	bne.n	800b1d2 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f043 0301 	orr.w	r3, r3, #1
 800b1d0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b1d2:	7abb      	ldrb	r3, [r7, #10]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d103      	bne.n	800b1e0 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	f043 0304 	orr.w	r3, r3, #4
 800b1de:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b1e0:	7a7b      	ldrb	r3, [r7, #9]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d103      	bne.n	800b1ee <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	f043 0302 	orr.w	r3, r3, #2
 800b1ec:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b1ee:	7afb      	ldrb	r3, [r7, #11]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d143      	bne.n	800b27c <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	f043 0308 	orr.w	r3, r3, #8
 800b1fa:	623b      	str	r3, [r7, #32]
      }
      break;
 800b1fc:	e03e      	b.n	800b27c <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800b1fe:	6838      	ldr	r0, [r7, #0]
 800b200:	f000 fa30 	bl	800b664 <SHT40AD1B_0_Probe>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800b20a:	f04f 33ff 	mov.w	r3, #4294967295
 800b20e:	e06d      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b210:	4a38      	ldr	r2, [pc, #224]	@ (800b2f4 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	4937      	ldr	r1, [pc, #220]	@ (800b2f8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b222:	f107 0108 	add.w	r1, r7, #8
 800b226:	4610      	mov	r0, r2
 800b228:	4798      	blx	r3
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b230:	f06f 0306 	mvn.w	r3, #6
 800b234:	e05a      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b236:	7a3b      	ldrb	r3, [r7, #8]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d103      	bne.n	800b244 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	f043 0301 	orr.w	r3, r3, #1
 800b242:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b244:	7abb      	ldrb	r3, [r7, #10]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d103      	bne.n	800b252 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	f043 0304 	orr.w	r3, r3, #4
 800b250:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b252:	7a7b      	ldrb	r3, [r7, #9]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d103      	bne.n	800b260 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	f043 0302 	orr.w	r3, r3, #2
 800b25e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b260:	7afb      	ldrb	r3, [r7, #11]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d10c      	bne.n	800b280 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	f043 0308 	orr.w	r3, r3, #8
 800b26c:	623b      	str	r3, [r7, #32]
      }
      break;
 800b26e:	e007      	b.n	800b280 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b270:	f06f 0301 	mvn.w	r3, #1
 800b274:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800b276:	e004      	b.n	800b282 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b278:	bf00      	nop
 800b27a:	e002      	b.n	800b282 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b27c:	bf00      	nop
 800b27e:	e000      	b.n	800b282 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b280:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800b288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28a:	e02f      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800b28c:	2300      	movs	r3, #0
 800b28e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b290:	e028      	b.n	800b2e4 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b296:	4013      	ands	r3, r2
 800b298:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d11c      	bne.n	800b2d8 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800b29e:	6a3a      	ldr	r2, [r7, #32]
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d116      	bne.n	800b2d8 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b2aa:	4a14      	ldr	r2, [pc, #80]	@ (800b2fc <IKS4A1_ENV_SENSOR_Init+0x214>)
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b2:	4913      	ldr	r1, [pc, #76]	@ (800b300 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	0092      	lsls	r2, r2, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	490d      	ldr	r1, [pc, #52]	@ (800b2f8 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	4798      	blx	r3
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b2d2:	f06f 0304 	mvn.w	r3, #4
 800b2d6:	e009      	b.n	800b2ec <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	005b      	lsls	r3, r3, #1
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d9d3      	bls.n	800b292 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800b2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3730      	adds	r7, #48	@ 0x30
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20013eac 	.word	0x20013eac
 800b2f8:	20013e70 	.word	0x20013e70
 800b2fc:	200001b0 	.word	0x200001b0
 800b300:	20013e7c 	.word	0x20013e7c

0800b304 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d903      	bls.n	800b31c <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b314:	f06f 0301 	mvn.w	r3, #1
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	e014      	b.n	800b346 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b31c:	4a0c      	ldr	r2, [pc, #48]	@ (800b350 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	490b      	ldr	r1, [pc, #44]	@ (800b354 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	4610      	mov	r0, r2
 800b332:	4798      	blx	r3
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b33a:	f06f 0306 	mvn.w	r3, #6
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e001      	b.n	800b346 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b346:	68fb      	ldr	r3, [r7, #12]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20013eac 	.word	0x20013eac
 800b354:	20013e70 	.word	0x20013e70

0800b358 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b092      	sub	sp, #72	@ 0x48
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b360:	2300      	movs	r3, #0
 800b362:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800b364:	2300      	movs	r3, #0
 800b366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800b368:	2371      	movs	r3, #113	@ 0x71
 800b36a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b36e:	4b47      	ldr	r3, [pc, #284]	@ (800b48c <STTS22H_0_Probe+0x134>)
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b372:	4b47      	ldr	r3, [pc, #284]	@ (800b490 <STTS22H_0_Probe+0x138>)
 800b374:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b376:	4b47      	ldr	r3, [pc, #284]	@ (800b494 <STTS22H_0_Probe+0x13c>)
 800b378:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b37a:	4b47      	ldr	r3, [pc, #284]	@ (800b498 <STTS22H_0_Probe+0x140>)
 800b37c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b37e:	4b47      	ldr	r3, [pc, #284]	@ (800b49c <STTS22H_0_Probe+0x144>)
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b382:	4b47      	ldr	r3, [pc, #284]	@ (800b4a0 <STTS22H_0_Probe+0x148>)
 800b384:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800b386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b38a:	4619      	mov	r1, r3
 800b38c:	4845      	ldr	r0, [pc, #276]	@ (800b4a4 <STTS22H_0_Probe+0x14c>)
 800b38e:	f7ff fa21 	bl	800a7d4 <STTS22H_RegisterBusIO>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b398:	f06f 0306 	mvn.w	r3, #6
 800b39c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39e:	e06f      	b.n	800b480 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800b3a0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	483f      	ldr	r0, [pc, #252]	@ (800b4a4 <STTS22H_0_Probe+0x14c>)
 800b3a8:	f7ff fab3 	bl	800a912 <STTS22H_ReadID>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b3b2:	f06f 0306 	mvn.w	r3, #6
 800b3b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3b8:	e062      	b.n	800b480 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800b3ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b3be:	2ba0      	cmp	r3, #160	@ 0xa0
 800b3c0:	d003      	beq.n	800b3ca <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b3c2:	f06f 0306 	mvn.w	r3, #6
 800b3c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3c8:	e05a      	b.n	800b480 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800b3ca:	f107 0308 	add.w	r3, r7, #8
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4834      	ldr	r0, [pc, #208]	@ (800b4a4 <STTS22H_0_Probe+0x14c>)
 800b3d2:	f7ff fab9 	bl	800a948 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b3d6:	7a3b      	ldrb	r3, [r7, #8]
 800b3d8:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b3da:	7a7b      	ldrb	r3, [r7, #9]
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b3e0:	7abb      	ldrb	r3, [r7, #10]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b3e6:	7afb      	ldrb	r3, [r7, #11]
 800b3e8:	00db      	lsls	r3, r3, #3
 800b3ea:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b3ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b4a8 <STTS22H_0_Probe+0x150>)
 800b3ee:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b3f0:	4b2e      	ldr	r3, [pc, #184]	@ (800b4ac <STTS22H_0_Probe+0x154>)
 800b3f2:	4a2c      	ldr	r2, [pc, #176]	@ (800b4a4 <STTS22H_0_Probe+0x14c>)
 800b3f4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b3f6:	4b2e      	ldr	r3, [pc, #184]	@ (800b4b0 <STTS22H_0_Probe+0x158>)
 800b3f8:	4a2e      	ldr	r2, [pc, #184]	@ (800b4b4 <STTS22H_0_Probe+0x15c>)
 800b3fa:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d11d      	bne.n	800b43e <STTS22H_0_Probe+0xe6>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d018      	beq.n	800b43e <STTS22H_0_Probe+0xe6>
 800b40c:	7a3b      	ldrb	r3, [r7, #8]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d115      	bne.n	800b43e <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b412:	4b29      	ldr	r3, [pc, #164]	@ (800b4b8 <STTS22H_0_Probe+0x160>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	4a29      	ldr	r2, [pc, #164]	@ (800b4bc <STTS22H_0_Probe+0x164>)
 800b418:	4929      	ldr	r1, [pc, #164]	@ (800b4c0 <STTS22H_0_Probe+0x168>)
 800b41a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b41e:	4b24      	ldr	r3, [pc, #144]	@ (800b4b0 <STTS22H_0_Probe+0x158>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a21      	ldr	r2, [pc, #132]	@ (800b4ac <STTS22H_0_Probe+0x154>)
 800b426:	6812      	ldr	r2, [r2, #0]
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b432:	f06f 0304 	mvn.w	r3, #4
 800b436:	647b      	str	r3, [r7, #68]	@ 0x44
 800b438:	e001      	b.n	800b43e <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b43e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b440:	2b00      	cmp	r3, #0
 800b442:	d107      	bne.n	800b454 <STTS22H_0_Probe+0xfc>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f003 0304 	and.w	r3, r3, #4
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b44e:	f06f 0304 	mvn.w	r3, #4
 800b452:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b456:	2b00      	cmp	r3, #0
 800b458:	d107      	bne.n	800b46a <STTS22H_0_Probe+0x112>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b464:	f06f 0304 	mvn.w	r3, #4
 800b468:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b46a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d107      	bne.n	800b480 <STTS22H_0_Probe+0x128>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f003 0308 	and.w	r3, r3, #8
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b47a:	f06f 0304 	mvn.w	r3, #4
 800b47e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b482:	4618      	mov	r0, r3
 800b484:	3748      	adds	r7, #72	@ 0x48
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	08002901 	.word	0x08002901
 800b490:	08002965 	.word	0x08002965
 800b494:	08002a19 	.word	0x08002a19
 800b498:	080029b5 	.word	0x080029b5
 800b49c:	08002b25 	.word	0x08002b25
 800b4a0:	0800c591 	.word	0x0800c591
 800b4a4:	20013ec4 	.word	0x20013ec4
 800b4a8:	20013eb8 	.word	0x20013eb8
 800b4ac:	20013e70 	.word	0x20013e70
 800b4b0:	20013eac 	.word	0x20013eac
 800b4b4:	2000018c 	.word	0x2000018c
 800b4b8:	200001b0 	.word	0x200001b0
 800b4bc:	20013e7c 	.word	0x20013e7c
 800b4c0:	2000019c 	.word	0x2000019c

0800b4c4 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b092      	sub	sp, #72	@ 0x48
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b4d4:	23bb      	movs	r3, #187	@ 0xbb
 800b4d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b4da:	4b53      	ldr	r3, [pc, #332]	@ (800b628 <LPS22DF_0_Probe+0x164>)
 800b4dc:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b4de:	4b53      	ldr	r3, [pc, #332]	@ (800b62c <LPS22DF_0_Probe+0x168>)
 800b4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b4e2:	4b53      	ldr	r3, [pc, #332]	@ (800b630 <LPS22DF_0_Probe+0x16c>)
 800b4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b4e6:	4b53      	ldr	r3, [pc, #332]	@ (800b634 <LPS22DF_0_Probe+0x170>)
 800b4e8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b4ea:	4b53      	ldr	r3, [pc, #332]	@ (800b638 <LPS22DF_0_Probe+0x174>)
 800b4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b4ee:	4b53      	ldr	r3, [pc, #332]	@ (800b63c <LPS22DF_0_Probe+0x178>)
 800b4f0:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b4f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	4851      	ldr	r0, [pc, #324]	@ (800b640 <LPS22DF_0_Probe+0x17c>)
 800b4fa:	f7fa f96b 	bl	80057d4 <LPS22DF_RegisterBusIO>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b504:	f06f 0306 	mvn.w	r3, #6
 800b508:	647b      	str	r3, [r7, #68]	@ 0x44
 800b50a:	e087      	b.n	800b61c <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b50c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b510:	4619      	mov	r1, r3
 800b512:	484b      	ldr	r0, [pc, #300]	@ (800b640 <LPS22DF_0_Probe+0x17c>)
 800b514:	f7fa fa07 	bl	8005926 <LPS22DF_ReadID>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b51e:	f06f 0306 	mvn.w	r3, #6
 800b522:	647b      	str	r3, [r7, #68]	@ 0x44
 800b524:	e07a      	b.n	800b61c <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b526:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b52a:	2bb4      	cmp	r3, #180	@ 0xb4
 800b52c:	d003      	beq.n	800b536 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b52e:	f06f 0306 	mvn.w	r3, #6
 800b532:	647b      	str	r3, [r7, #68]	@ 0x44
 800b534:	e072      	b.n	800b61c <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b536:	f107 0308 	add.w	r3, r7, #8
 800b53a:	4619      	mov	r1, r3
 800b53c:	4840      	ldr	r0, [pc, #256]	@ (800b640 <LPS22DF_0_Probe+0x17c>)
 800b53e:	f7fa fa0d 	bl	800595c <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b542:	7a3b      	ldrb	r3, [r7, #8]
 800b544:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b546:	7a7b      	ldrb	r3, [r7, #9]
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b54c:	7abb      	ldrb	r3, [r7, #10]
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b552:	7afb      	ldrb	r3, [r7, #11]
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b558:	4a3a      	ldr	r2, [pc, #232]	@ (800b644 <LPS22DF_0_Probe+0x180>)
 800b55a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b55c:	4b3a      	ldr	r3, [pc, #232]	@ (800b648 <LPS22DF_0_Probe+0x184>)
 800b55e:	4a38      	ldr	r2, [pc, #224]	@ (800b640 <LPS22DF_0_Probe+0x17c>)
 800b560:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b562:	4b3a      	ldr	r3, [pc, #232]	@ (800b64c <LPS22DF_0_Probe+0x188>)
 800b564:	4a3a      	ldr	r2, [pc, #232]	@ (800b650 <LPS22DF_0_Probe+0x18c>)
 800b566:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d11e      	bne.n	800b5ac <LPS22DF_0_Probe+0xe8>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f003 0301 	and.w	r3, r3, #1
 800b574:	2b00      	cmp	r3, #0
 800b576:	d019      	beq.n	800b5ac <LPS22DF_0_Probe+0xe8>
 800b578:	7a3b      	ldrb	r3, [r7, #8]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d116      	bne.n	800b5ac <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b57e:	4b35      	ldr	r3, [pc, #212]	@ (800b654 <LPS22DF_0_Probe+0x190>)
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	4a35      	ldr	r2, [pc, #212]	@ (800b658 <LPS22DF_0_Probe+0x194>)
 800b584:	3304      	adds	r3, #4
 800b586:	4935      	ldr	r1, [pc, #212]	@ (800b65c <LPS22DF_0_Probe+0x198>)
 800b588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b58c:	4b2f      	ldr	r3, [pc, #188]	@ (800b64c <LPS22DF_0_Probe+0x188>)
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a2d      	ldr	r2, [pc, #180]	@ (800b648 <LPS22DF_0_Probe+0x184>)
 800b594:	6852      	ldr	r2, [r2, #4]
 800b596:	4610      	mov	r0, r2
 800b598:	4798      	blx	r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5a0:	f06f 0304 	mvn.w	r3, #4
 800b5a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5a6:	e001      	b.n	800b5ac <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b5ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d11e      	bne.n	800b5f0 <LPS22DF_0_Probe+0x12c>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d019      	beq.n	800b5f0 <LPS22DF_0_Probe+0x12c>
 800b5bc:	7a7b      	ldrb	r3, [r7, #9]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d116      	bne.n	800b5f0 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b5c2:	4b24      	ldr	r3, [pc, #144]	@ (800b654 <LPS22DF_0_Probe+0x190>)
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	4a24      	ldr	r2, [pc, #144]	@ (800b658 <LPS22DF_0_Probe+0x194>)
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4925      	ldr	r1, [pc, #148]	@ (800b660 <LPS22DF_0_Probe+0x19c>)
 800b5cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b5d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b64c <LPS22DF_0_Probe+0x188>)
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b648 <LPS22DF_0_Probe+0x184>)
 800b5d8:	6852      	ldr	r2, [r2, #4]
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4798      	blx	r3
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5e4:	f06f 0304 	mvn.w	r3, #4
 800b5e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ea:	e001      	b.n	800b5f0 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d107      	bne.n	800b606 <LPS22DF_0_Probe+0x142>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b600:	f06f 0304 	mvn.w	r3, #4
 800b604:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d107      	bne.n	800b61c <LPS22DF_0_Probe+0x158>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f003 0308 	and.w	r3, r3, #8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b616:	f06f 0304 	mvn.w	r3, #4
 800b61a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b61c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3748      	adds	r7, #72	@ 0x48
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	08002901 	.word	0x08002901
 800b62c:	08002965 	.word	0x08002965
 800b630:	08002a19 	.word	0x08002a19
 800b634:	080029b5 	.word	0x080029b5
 800b638:	08002b25 	.word	0x08002b25
 800b63c:	0800c591 	.word	0x0800c591
 800b640:	20013efc 	.word	0x20013efc
 800b644:	20013eb8 	.word	0x20013eb8
 800b648:	20013e70 	.word	0x20013e70
 800b64c:	20013eac 	.word	0x20013eac
 800b650:	2000006c 	.word	0x2000006c
 800b654:	200001b0 	.word	0x200001b0
 800b658:	20013e7c 	.word	0x20013e7c
 800b65c:	20000090 	.word	0x20000090
 800b660:	2000007c 	.word	0x2000007c

0800b664 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b092      	sub	sp, #72	@ 0x48
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b670:	2300      	movs	r3, #0
 800b672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b674:	2389      	movs	r3, #137	@ 0x89
 800b676:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b67a:	4b53      	ldr	r3, [pc, #332]	@ (800b7c8 <SHT40AD1B_0_Probe+0x164>)
 800b67c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b67e:	4b53      	ldr	r3, [pc, #332]	@ (800b7cc <SHT40AD1B_0_Probe+0x168>)
 800b680:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b682:	4b53      	ldr	r3, [pc, #332]	@ (800b7d0 <SHT40AD1B_0_Probe+0x16c>)
 800b684:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b686:	4b53      	ldr	r3, [pc, #332]	@ (800b7d4 <SHT40AD1B_0_Probe+0x170>)
 800b688:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b68a:	4b53      	ldr	r3, [pc, #332]	@ (800b7d8 <SHT40AD1B_0_Probe+0x174>)
 800b68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b68e:	4b53      	ldr	r3, [pc, #332]	@ (800b7dc <SHT40AD1B_0_Probe+0x178>)
 800b690:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b696:	4619      	mov	r1, r3
 800b698:	4851      	ldr	r0, [pc, #324]	@ (800b7e0 <SHT40AD1B_0_Probe+0x17c>)
 800b69a:	f7fe fd97 	bl	800a1cc <SHT40AD1B_RegisterBusIO>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6a4:	f06f 0306 	mvn.w	r3, #6
 800b6a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6aa:	e087      	b.n	800b7bc <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b6ac:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	484b      	ldr	r0, [pc, #300]	@ (800b7e0 <SHT40AD1B_0_Probe+0x17c>)
 800b6b4:	f7fe fdfa 	bl	800a2ac <SHT40AD1B_ReadID>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6be:	f06f 0306 	mvn.w	r3, #6
 800b6c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6c4:	e07a      	b.n	800b7bc <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b6c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d003      	beq.n	800b6d6 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6ce:	f06f 0306 	mvn.w	r3, #6
 800b6d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6d4:	e072      	b.n	800b7bc <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b6d6:	f107 0308 	add.w	r3, r7, #8
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4840      	ldr	r0, [pc, #256]	@ (800b7e0 <SHT40AD1B_0_Probe+0x17c>)
 800b6de:	f7fe fdf5 	bl	800a2cc <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b6e2:	7a3b      	ldrb	r3, [r7, #8]
 800b6e4:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b6e6:	7a7b      	ldrb	r3, [r7, #9]
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b6ec:	7abb      	ldrb	r3, [r7, #10]
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	00db      	lsls	r3, r3, #3
 800b6f6:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b6f8:	4a3a      	ldr	r2, [pc, #232]	@ (800b7e4 <SHT40AD1B_0_Probe+0x180>)
 800b6fa:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b6fc:	4b3a      	ldr	r3, [pc, #232]	@ (800b7e8 <SHT40AD1B_0_Probe+0x184>)
 800b6fe:	4a38      	ldr	r2, [pc, #224]	@ (800b7e0 <SHT40AD1B_0_Probe+0x17c>)
 800b700:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b702:	4b3a      	ldr	r3, [pc, #232]	@ (800b7ec <SHT40AD1B_0_Probe+0x188>)
 800b704:	4a3a      	ldr	r2, [pc, #232]	@ (800b7f0 <SHT40AD1B_0_Probe+0x18c>)
 800b706:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d11e      	bne.n	800b74c <SHT40AD1B_0_Probe+0xe8>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	d019      	beq.n	800b74c <SHT40AD1B_0_Probe+0xe8>
 800b718:	7a3b      	ldrb	r3, [r7, #8]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d116      	bne.n	800b74c <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b71e:	4b35      	ldr	r3, [pc, #212]	@ (800b7f4 <SHT40AD1B_0_Probe+0x190>)
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	4a35      	ldr	r2, [pc, #212]	@ (800b7f8 <SHT40AD1B_0_Probe+0x194>)
 800b724:	3308      	adds	r3, #8
 800b726:	4935      	ldr	r1, [pc, #212]	@ (800b7fc <SHT40AD1B_0_Probe+0x198>)
 800b728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b72c:	4b2f      	ldr	r3, [pc, #188]	@ (800b7ec <SHT40AD1B_0_Probe+0x188>)
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a2d      	ldr	r2, [pc, #180]	@ (800b7e8 <SHT40AD1B_0_Probe+0x184>)
 800b734:	6892      	ldr	r2, [r2, #8]
 800b736:	4610      	mov	r0, r2
 800b738:	4798      	blx	r3
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b740:	f06f 0304 	mvn.w	r3, #4
 800b744:	647b      	str	r3, [r7, #68]	@ 0x44
 800b746:	e001      	b.n	800b74c <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b748:	2300      	movs	r3, #0
 800b74a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d11e      	bne.n	800b790 <SHT40AD1B_0_Probe+0x12c>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f003 0304 	and.w	r3, r3, #4
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d019      	beq.n	800b790 <SHT40AD1B_0_Probe+0x12c>
 800b75c:	7abb      	ldrb	r3, [r7, #10]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d116      	bne.n	800b790 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b762:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <SHT40AD1B_0_Probe+0x190>)
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	4a24      	ldr	r2, [pc, #144]	@ (800b7f8 <SHT40AD1B_0_Probe+0x194>)
 800b768:	3308      	adds	r3, #8
 800b76a:	4925      	ldr	r1, [pc, #148]	@ (800b800 <SHT40AD1B_0_Probe+0x19c>)
 800b76c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b770:	4b1e      	ldr	r3, [pc, #120]	@ (800b7ec <SHT40AD1B_0_Probe+0x188>)
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a1c      	ldr	r2, [pc, #112]	@ (800b7e8 <SHT40AD1B_0_Probe+0x184>)
 800b778:	6892      	ldr	r2, [r2, #8]
 800b77a:	4610      	mov	r0, r2
 800b77c:	4798      	blx	r3
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b784:	f06f 0304 	mvn.w	r3, #4
 800b788:	647b      	str	r3, [r7, #68]	@ 0x44
 800b78a:	e001      	b.n	800b790 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b792:	2b00      	cmp	r3, #0
 800b794:	d107      	bne.n	800b7a6 <SHT40AD1B_0_Probe+0x142>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7a0:	f06f 0304 	mvn.w	r3, #4
 800b7a4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b7a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d107      	bne.n	800b7bc <SHT40AD1B_0_Probe+0x158>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f003 0308 	and.w	r3, r3, #8
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7b6:	f06f 0304 	mvn.w	r3, #4
 800b7ba:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b7bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3748      	adds	r7, #72	@ 0x48
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	08002901 	.word	0x08002901
 800b7cc:	08002965 	.word	0x08002965
 800b7d0:	08002ad1 	.word	0x08002ad1
 800b7d4:	08002a7d 	.word	0x08002a7d
 800b7d8:	08002b25 	.word	0x08002b25
 800b7dc:	0800c591 	.word	0x0800c591
 800b7e0:	20013f34 	.word	0x20013f34
 800b7e4:	20013eb8 	.word	0x20013eb8
 800b7e8:	20013e70 	.word	0x20013e70
 800b7ec:	20013eac 	.word	0x20013eac
 800b7f0:	20000154 	.word	0x20000154
 800b7f4:	200001b0 	.word	0x200001b0
 800b7f8:	20013e7c 	.word	0x20013e7c
 800b7fc:	20000178 	.word	0x20000178
 800b800:	20000164 	.word	0x20000164

0800b804 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08e      	sub	sp, #56	@ 0x38
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b80e:	2300      	movs	r3, #0
 800b810:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b812:	2301      	movs	r3, #1
 800b814:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	f200 80d4 	bhi.w	800b9ca <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b822:	a201      	add	r2, pc, #4	@ (adr r2, 800b828 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b839 	.word	0x0800b839
 800b82c:	0800b89f 	.word	0x0800b89f
 800b830:	0800b903 	.word	0x0800b903
 800b834:	0800b967 	.word	0x0800b967
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b838:	6838      	ldr	r0, [r7, #0]
 800b83a:	f000 f983 	bl	800bb44 <LIS2MDL_0_Probe>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b844:	f04f 33ff 	mov.w	r3, #4294967295
 800b848:	e101      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b84a:	4a83      	ldr	r2, [pc, #524]	@ (800ba58 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	4981      	ldr	r1, [pc, #516]	@ (800ba5c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b85c:	f107 010c 	add.w	r1, r7, #12
 800b860:	4610      	mov	r0, r2
 800b862:	4798      	blx	r3
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b86a:	f06f 0306 	mvn.w	r3, #6
 800b86e:	e0ee      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b870:	7b3b      	ldrb	r3, [r7, #12]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d103      	bne.n	800b87e <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	f043 0302 	orr.w	r3, r3, #2
 800b87c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b87e:	7b7b      	ldrb	r3, [r7, #13]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d103      	bne.n	800b88c <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b88c:	7bbb      	ldrb	r3, [r7, #14]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	f040 809f 	bne.w	800b9d2 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b896:	f043 0304 	orr.w	r3, r3, #4
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b89c:	e099      	b.n	800b9d2 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b89e:	6838      	ldr	r0, [r7, #0]
 800b8a0:	f000 f9f8 	bl	800bc94 <LSM6DSV16X_0_Probe>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ae:	e0ce      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b8b0:	4a69      	ldr	r2, [pc, #420]	@ (800ba58 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	4968      	ldr	r1, [pc, #416]	@ (800ba5c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8c2:	f107 010c 	add.w	r1, r7, #12
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4798      	blx	r3
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b8d0:	f06f 0306 	mvn.w	r3, #6
 800b8d4:	e0bb      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b8d6:	7b3b      	ldrb	r3, [r7, #12]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d103      	bne.n	800b8e4 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	f043 0302 	orr.w	r3, r3, #2
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b8e4:	7b7b      	ldrb	r3, [r7, #13]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d103      	bne.n	800b8f2 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ec:	f043 0301 	orr.w	r3, r3, #1
 800b8f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d16e      	bne.n	800b9d6 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fa:	f043 0304 	orr.w	r3, r3, #4
 800b8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b900:	e069      	b.n	800b9d6 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b902:	6838      	ldr	r0, [r7, #0]
 800b904:	f000 fa92 	bl	800be2c <LIS2DUXS12_0_Probe>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295
 800b912:	e09c      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b914:	4a50      	ldr	r2, [pc, #320]	@ (800ba58 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	494f      	ldr	r1, [pc, #316]	@ (800ba5c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b926:	f107 010c 	add.w	r1, r7, #12
 800b92a:	4610      	mov	r0, r2
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b934:	f06f 0306 	mvn.w	r3, #6
 800b938:	e089      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b93a:	7b3b      	ldrb	r3, [r7, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d103      	bne.n	800b948 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b942:	f043 0302 	orr.w	r3, r3, #2
 800b946:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b948:	7b7b      	ldrb	r3, [r7, #13]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d103      	bne.n	800b956 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b950:	f043 0301 	orr.w	r3, r3, #1
 800b954:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d13e      	bne.n	800b9da <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95e:	f043 0304 	orr.w	r3, r3, #4
 800b962:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b964:	e039      	b.n	800b9da <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b966:	6838      	ldr	r0, [r7, #0]
 800b968:	f000 fb16 	bl	800bf98 <LSM6DSO16IS_0_Probe>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b972:	f04f 33ff 	mov.w	r3, #4294967295
 800b976:	e06a      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b978:	4a37      	ldr	r2, [pc, #220]	@ (800ba58 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	4936      	ldr	r1, [pc, #216]	@ (800ba5c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b98a:	f107 010c 	add.w	r1, r7, #12
 800b98e:	4610      	mov	r0, r2
 800b990:	4798      	blx	r3
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b998:	f06f 0306 	mvn.w	r3, #6
 800b99c:	e057      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b99e:	7b3b      	ldrb	r3, [r7, #12]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d103      	bne.n	800b9ac <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a6:	f043 0302 	orr.w	r3, r3, #2
 800b9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b9ac:	7b7b      	ldrb	r3, [r7, #13]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d103      	bne.n	800b9ba <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b4:	f043 0301 	orr.w	r3, r3, #1
 800b9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d10e      	bne.n	800b9de <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c2:	f043 0304 	orr.w	r3, r3, #4
 800b9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b9c8:	e009      	b.n	800b9de <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b9ca:	f06f 0301 	mvn.w	r3, #1
 800b9ce:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b9d0:	e006      	b.n	800b9e0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b9d2:	bf00      	nop
 800b9d4:	e004      	b.n	800b9e0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b9de:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9e8:	e031      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9ee:	e02a      	b.n	800ba46 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d11e      	bne.n	800ba3a <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b9fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba00:	4013      	ands	r3, r2
 800ba02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d118      	bne.n	800ba3a <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800ba08:	4a15      	ldr	r2, [pc, #84]	@ (800ba60 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba10:	4814      	ldr	r0, [pc, #80]	@ (800ba64 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	4613      	mov	r3, r2
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	4413      	add	r3, r2
 800ba1a:	440b      	add	r3, r1
 800ba1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	490e      	ldr	r1, [pc, #56]	@ (800ba5c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	4798      	blx	r3
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ba34:	f06f 0304 	mvn.w	r3, #4
 800ba38:	e009      	b.n	800ba4e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba42:	3301      	adds	r3, #1
 800ba44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d9d1      	bls.n	800b9f0 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3738      	adds	r7, #56	@ 0x38
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20013fb8 	.word	0x20013fb8
 800ba5c:	20013f78 	.word	0x20013f78
 800ba60:	200001f0 	.word	0x200001f0
 800ba64:	20013f88 	.word	0x20013f88

0800ba68 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d903      	bls.n	800ba80 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba78:	f06f 0301 	mvn.w	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	e014      	b.n	800baaa <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800ba80:	4a0c      	ldr	r2, [pc, #48]	@ (800bab4 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	490b      	ldr	r1, [pc, #44]	@ (800bab8 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	4610      	mov	r0, r2
 800ba96:	4798      	blx	r3
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba9e:	f06f 0306 	mvn.w	r3, #6
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e001      	b.n	800baaa <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800baaa:	68fb      	ldr	r3, [r7, #12]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20013fb8 	.word	0x20013fb8
 800bab8:	20013f78 	.word	0x20013f78

0800babc <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d903      	bls.n	800bad6 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bace:	f06f 0301 	mvn.w	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	e029      	b.n	800bb2a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bad6:	4a17      	ldr	r2, [pc, #92]	@ (800bb34 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4013      	ands	r3, r2
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d11d      	bne.n	800bb24 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800bae8:	4a13      	ldr	r2, [pc, #76]	@ (800bb38 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800baf0:	4812      	ldr	r0, [pc, #72]	@ (800bb3c <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	4613      	mov	r3, r2
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	4413      	add	r3, r2
 800bafa:	440b      	add	r3, r1
 800bafc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	490f      	ldr	r1, [pc, #60]	@ (800bb40 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	4798      	blx	r3
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb16:	f06f 0304 	mvn.w	r3, #4
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	e005      	b.n	800bb2a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
 800bb22:	e002      	b.n	800bb2a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bb24:	f06f 0301 	mvn.w	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bb2a:	697b      	ldr	r3, [r7, #20]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20013fc8 	.word	0x20013fc8
 800bb38:	200001f0 	.word	0x200001f0
 800bb3c:	20013f88 	.word	0x20013f88
 800bb40:	20013f78 	.word	0x20013f78

0800bb44 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b094      	sub	sp, #80	@ 0x50
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800bb50:	2300      	movs	r3, #0
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800bb54:	233d      	movs	r3, #61	@ 0x3d
 800bb56:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bb5a:	4b40      	ldr	r3, [pc, #256]	@ (800bc5c <LIS2MDL_0_Probe+0x118>)
 800bb5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bb5e:	4b40      	ldr	r3, [pc, #256]	@ (800bc60 <LIS2MDL_0_Probe+0x11c>)
 800bb60:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bb62:	4b40      	ldr	r3, [pc, #256]	@ (800bc64 <LIS2MDL_0_Probe+0x120>)
 800bb64:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bb66:	4b40      	ldr	r3, [pc, #256]	@ (800bc68 <LIS2MDL_0_Probe+0x124>)
 800bb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bb6a:	4b40      	ldr	r3, [pc, #256]	@ (800bc6c <LIS2MDL_0_Probe+0x128>)
 800bb6c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bb6e:	4b40      	ldr	r3, [pc, #256]	@ (800bc70 <LIS2MDL_0_Probe+0x12c>)
 800bb70:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800bb72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bb76:	4619      	mov	r1, r3
 800bb78:	483e      	ldr	r0, [pc, #248]	@ (800bc74 <LIS2MDL_0_Probe+0x130>)
 800bb7a:	f7f8 fe1b 	bl	80047b4 <LIS2MDL_RegisterBusIO>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d003      	beq.n	800bb8c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb84:	f06f 0306 	mvn.w	r3, #6
 800bb88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb8a:	e061      	b.n	800bc50 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800bb8c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bb90:	4619      	mov	r1, r3
 800bb92:	4838      	ldr	r0, [pc, #224]	@ (800bc74 <LIS2MDL_0_Probe+0x130>)
 800bb94:	f7f8 ff2a 	bl	80049ec <LIS2MDL_ReadID>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb9e:	f06f 0306 	mvn.w	r3, #6
 800bba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bba4:	e054      	b.n	800bc50 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800bba6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbaa:	2b40      	cmp	r3, #64	@ 0x40
 800bbac:	d003      	beq.n	800bbb6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bbae:	f06f 0306 	mvn.w	r3, #6
 800bbb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbb4:	e04c      	b.n	800bc50 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800bbb6:	f107 030c 	add.w	r3, r7, #12
 800bbba:	4619      	mov	r1, r3
 800bbbc:	482d      	ldr	r0, [pc, #180]	@ (800bc74 <LIS2MDL_0_Probe+0x130>)
 800bbbe:	f7f8 ff3b 	bl	8004a38 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bbc2:	7b7b      	ldrb	r3, [r7, #13]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	7b3b      	ldrb	r3, [r7, #12]
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	4a29      	ldr	r2, [pc, #164]	@ (800bc78 <LIS2MDL_0_Probe+0x134>)
 800bbd4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800bbd6:	4b29      	ldr	r3, [pc, #164]	@ (800bc7c <LIS2MDL_0_Probe+0x138>)
 800bbd8:	4a26      	ldr	r2, [pc, #152]	@ (800bc74 <LIS2MDL_0_Probe+0x130>)
 800bbda:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800bbdc:	4b28      	ldr	r3, [pc, #160]	@ (800bc80 <LIS2MDL_0_Probe+0x13c>)
 800bbde:	4a29      	ldr	r2, [pc, #164]	@ (800bc84 <LIS2MDL_0_Probe+0x140>)
 800bbe0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800bbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d11d      	bne.n	800bc24 <LIS2MDL_0_Probe+0xe0>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f003 0304 	and.w	r3, r3, #4
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d018      	beq.n	800bc24 <LIS2MDL_0_Probe+0xe0>
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d115      	bne.n	800bc24 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bbf8:	4b23      	ldr	r3, [pc, #140]	@ (800bc88 <LIS2MDL_0_Probe+0x144>)
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	4a23      	ldr	r2, [pc, #140]	@ (800bc8c <LIS2MDL_0_Probe+0x148>)
 800bbfe:	4924      	ldr	r1, [pc, #144]	@ (800bc90 <LIS2MDL_0_Probe+0x14c>)
 800bc00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800bc04:	4b1e      	ldr	r3, [pc, #120]	@ (800bc80 <LIS2MDL_0_Probe+0x13c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a1c      	ldr	r2, [pc, #112]	@ (800bc7c <LIS2MDL_0_Probe+0x138>)
 800bc0c:	6812      	ldr	r2, [r2, #0]
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4798      	blx	r3
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc18:	f06f 0304 	mvn.w	r3, #4
 800bc1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc1e:	e001      	b.n	800bc24 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bc20:	2300      	movs	r3, #0
 800bc22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800bc24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d107      	bne.n	800bc3a <LIS2MDL_0_Probe+0xf6>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc34:	f06f 0304 	mvn.w	r3, #4
 800bc38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d107      	bne.n	800bc50 <LIS2MDL_0_Probe+0x10c>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc4a:	f06f 0304 	mvn.w	r3, #4
 800bc4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bc50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3750      	adds	r7, #80	@ 0x50
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	08002901 	.word	0x08002901
 800bc60:	08002965 	.word	0x08002965
 800bc64:	08002a19 	.word	0x08002a19
 800bc68:	080029b5 	.word	0x080029b5
 800bc6c:	08002b25 	.word	0x08002b25
 800bc70:	0800c591 	.word	0x0800c591
 800bc74:	20013fd8 	.word	0x20013fd8
 800bc78:	20013fc8 	.word	0x20013fc8
 800bc7c:	20013f78 	.word	0x20013f78
 800bc80:	20013fb8 	.word	0x20013fb8
 800bc84:	20000038 	.word	0x20000038
 800bc88:	200001f0 	.word	0x200001f0
 800bc8c:	20013f88 	.word	0x20013f88
 800bc90:	20000048 	.word	0x20000048

0800bc94 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b094      	sub	sp, #80	@ 0x50
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800bca0:	2300      	movs	r3, #0
 800bca2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800bca4:	23d7      	movs	r3, #215	@ 0xd7
 800bca6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bcaa:	4b51      	ldr	r3, [pc, #324]	@ (800bdf0 <LSM6DSV16X_0_Probe+0x15c>)
 800bcac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bcae:	4b51      	ldr	r3, [pc, #324]	@ (800bdf4 <LSM6DSV16X_0_Probe+0x160>)
 800bcb0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bcb2:	4b51      	ldr	r3, [pc, #324]	@ (800bdf8 <LSM6DSV16X_0_Probe+0x164>)
 800bcb4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bcb6:	4b51      	ldr	r3, [pc, #324]	@ (800bdfc <LSM6DSV16X_0_Probe+0x168>)
 800bcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bcba:	4b51      	ldr	r3, [pc, #324]	@ (800be00 <LSM6DSV16X_0_Probe+0x16c>)
 800bcbc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bcbe:	4b51      	ldr	r3, [pc, #324]	@ (800be04 <LSM6DSV16X_0_Probe+0x170>)
 800bcc0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800bcc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	484f      	ldr	r0, [pc, #316]	@ (800be08 <LSM6DSV16X_0_Probe+0x174>)
 800bcca:	f7fc fae3 	bl	8008294 <LSM6DSV16X_RegisterBusIO>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bcd4:	f06f 0306 	mvn.w	r3, #6
 800bcd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcda:	e084      	b.n	800bde6 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800bcdc:	2100      	movs	r1, #0
 800bcde:	484a      	ldr	r0, [pc, #296]	@ (800be08 <LSM6DSV16X_0_Probe+0x174>)
 800bce0:	f7fd fa65 	bl	80091ae <LSM6DSV16X_Set_Mem_Bank>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bcea:	f06f 0306 	mvn.w	r3, #6
 800bcee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcf0:	e079      	b.n	800bde6 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800bcf2:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4843      	ldr	r0, [pc, #268]	@ (800be08 <LSM6DSV16X_0_Probe+0x174>)
 800bcfa:	f7fc fbfb 	bl	80084f4 <LSM6DSV16X_ReadID>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd04:	f06f 0306 	mvn.w	r3, #6
 800bd08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd0a:	e06c      	b.n	800bde6 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800bd0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd10:	2b70      	cmp	r3, #112	@ 0x70
 800bd12:	d003      	beq.n	800bd1c <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd14:	f06f 0306 	mvn.w	r3, #6
 800bd18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd1a:	e064      	b.n	800bde6 <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800bd1c:	f107 030c 	add.w	r3, r7, #12
 800bd20:	4619      	mov	r1, r3
 800bd22:	4839      	ldr	r0, [pc, #228]	@ (800be08 <LSM6DSV16X_0_Probe+0x174>)
 800bd24:	f7fc fbfc 	bl	8008520 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bd28:	7b7b      	ldrb	r3, [r7, #13]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	7b3b      	ldrb	r3, [r7, #12]
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	431a      	orrs	r2, r3
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4313      	orrs	r3, r2
 800bd38:	4a34      	ldr	r2, [pc, #208]	@ (800be0c <LSM6DSV16X_0_Probe+0x178>)
 800bd3a:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800bd3c:	4b34      	ldr	r3, [pc, #208]	@ (800be10 <LSM6DSV16X_0_Probe+0x17c>)
 800bd3e:	4a32      	ldr	r2, [pc, #200]	@ (800be08 <LSM6DSV16X_0_Probe+0x174>)
 800bd40:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800bd42:	4b34      	ldr	r3, [pc, #208]	@ (800be14 <LSM6DSV16X_0_Probe+0x180>)
 800bd44:	4a34      	ldr	r2, [pc, #208]	@ (800be18 <LSM6DSV16X_0_Probe+0x184>)
 800bd46:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bd48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d11e      	bne.n	800bd8c <LSM6DSV16X_0_Probe+0xf8>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d019      	beq.n	800bd8c <LSM6DSV16X_0_Probe+0xf8>
 800bd58:	7b7b      	ldrb	r3, [r7, #13]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d116      	bne.n	800bd8c <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bd5e:	4b2f      	ldr	r3, [pc, #188]	@ (800be1c <LSM6DSV16X_0_Probe+0x188>)
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	4a2f      	ldr	r2, [pc, #188]	@ (800be20 <LSM6DSV16X_0_Probe+0x18c>)
 800bd64:	3303      	adds	r3, #3
 800bd66:	492f      	ldr	r1, [pc, #188]	@ (800be24 <LSM6DSV16X_0_Probe+0x190>)
 800bd68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bd6c:	4b29      	ldr	r3, [pc, #164]	@ (800be14 <LSM6DSV16X_0_Probe+0x180>)
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a27      	ldr	r2, [pc, #156]	@ (800be10 <LSM6DSV16X_0_Probe+0x17c>)
 800bd74:	6852      	ldr	r2, [r2, #4]
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d003      	beq.n	800bd88 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd80:	f06f 0304 	mvn.w	r3, #4
 800bd84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd86:	e001      	b.n	800bd8c <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d11e      	bne.n	800bdd0 <LSM6DSV16X_0_Probe+0x13c>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f003 0302 	and.w	r3, r3, #2
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d019      	beq.n	800bdd0 <LSM6DSV16X_0_Probe+0x13c>
 800bd9c:	7b3b      	ldrb	r3, [r7, #12]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d116      	bne.n	800bdd0 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bda2:	4b1e      	ldr	r3, [pc, #120]	@ (800be1c <LSM6DSV16X_0_Probe+0x188>)
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	4a1e      	ldr	r2, [pc, #120]	@ (800be20 <LSM6DSV16X_0_Probe+0x18c>)
 800bda8:	3303      	adds	r3, #3
 800bdaa:	491f      	ldr	r1, [pc, #124]	@ (800be28 <LSM6DSV16X_0_Probe+0x194>)
 800bdac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bdb0:	4b18      	ldr	r3, [pc, #96]	@ (800be14 <LSM6DSV16X_0_Probe+0x180>)
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a16      	ldr	r2, [pc, #88]	@ (800be10 <LSM6DSV16X_0_Probe+0x17c>)
 800bdb8:	6852      	ldr	r2, [r2, #4]
 800bdba:	4610      	mov	r0, r2
 800bdbc:	4798      	blx	r3
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d003      	beq.n	800bdcc <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bdc4:	f06f 0304 	mvn.w	r3, #4
 800bdc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdca:	e001      	b.n	800bdd0 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bdd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d107      	bne.n	800bde6 <LSM6DSV16X_0_Probe+0x152>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bde0:	f06f 0304 	mvn.w	r3, #4
 800bde4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bde6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3750      	adds	r7, #80	@ 0x50
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	08002901 	.word	0x08002901
 800bdf4:	08002965 	.word	0x08002965
 800bdf8:	08002a19 	.word	0x08002a19
 800bdfc:	080029b5 	.word	0x080029b5
 800be00:	08002b25 	.word	0x08002b25
 800be04:	0800c591 	.word	0x0800c591
 800be08:	2001400c 	.word	0x2001400c
 800be0c:	20013fc8 	.word	0x20013fc8
 800be10:	20013f78 	.word	0x20013f78
 800be14:	20013fb8 	.word	0x20013fb8
 800be18:	200000fc 	.word	0x200000fc
 800be1c:	200001f0 	.word	0x200001f0
 800be20:	20013f88 	.word	0x20013f88
 800be24:	20000130 	.word	0x20000130
 800be28:	2000010c 	.word	0x2000010c

0800be2c <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b094      	sub	sp, #80	@ 0x50
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800be34:	2300      	movs	r3, #0
 800be36:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800be38:	2300      	movs	r3, #0
 800be3a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800be3c:	2333      	movs	r3, #51	@ 0x33
 800be3e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800be42:	4b47      	ldr	r3, [pc, #284]	@ (800bf60 <LIS2DUXS12_0_Probe+0x134>)
 800be44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800be46:	4b47      	ldr	r3, [pc, #284]	@ (800bf64 <LIS2DUXS12_0_Probe+0x138>)
 800be48:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800be4a:	4b47      	ldr	r3, [pc, #284]	@ (800bf68 <LIS2DUXS12_0_Probe+0x13c>)
 800be4c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800be4e:	4b47      	ldr	r3, [pc, #284]	@ (800bf6c <LIS2DUXS12_0_Probe+0x140>)
 800be50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800be52:	4b47      	ldr	r3, [pc, #284]	@ (800bf70 <LIS2DUXS12_0_Probe+0x144>)
 800be54:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800be56:	4b47      	ldr	r3, [pc, #284]	@ (800bf74 <LIS2DUXS12_0_Probe+0x148>)
 800be58:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800be5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be5e:	4619      	mov	r1, r3
 800be60:	4845      	ldr	r0, [pc, #276]	@ (800bf78 <LIS2DUXS12_0_Probe+0x14c>)
 800be62:	f7f6 ffc5 	bl	8002df0 <LIS2DUXS12_RegisterBusIO>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be6c:	f06f 0306 	mvn.w	r3, #6
 800be70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be72:	e070      	b.n	800bf56 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800be74:	2100      	movs	r1, #0
 800be76:	4840      	ldr	r0, [pc, #256]	@ (800bf78 <LIS2DUXS12_0_Probe+0x14c>)
 800be78:	f7f7 fc32 	bl	80036e0 <LIS2DUXS12_Set_Mem_Bank>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be82:	f06f 0306 	mvn.w	r3, #6
 800be86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be88:	e065      	b.n	800bf56 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800be8a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800be8e:	4619      	mov	r1, r3
 800be90:	4839      	ldr	r0, [pc, #228]	@ (800bf78 <LIS2DUXS12_0_Probe+0x14c>)
 800be92:	f7f7 f90c 	bl	80030ae <LIS2DUXS12_ReadID>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be9c:	f06f 0306 	mvn.w	r3, #6
 800bea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bea2:	e058      	b.n	800bf56 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800bea4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bea8:	2b47      	cmp	r3, #71	@ 0x47
 800beaa:	d003      	beq.n	800beb4 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800beac:	f06f 0306 	mvn.w	r3, #6
 800beb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beb2:	e050      	b.n	800bf56 <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800beb4:	f107 030c 	add.w	r3, r7, #12
 800beb8:	4619      	mov	r1, r3
 800beba:	482f      	ldr	r0, [pc, #188]	@ (800bf78 <LIS2DUXS12_0_Probe+0x14c>)
 800bebc:	f7f7 f912 	bl	80030e4 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bec0:	7b7b      	ldrb	r3, [r7, #13]
 800bec2:	461a      	mov	r2, r3
 800bec4:	7b3b      	ldrb	r3, [r7, #12]
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	431a      	orrs	r2, r3
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4313      	orrs	r3, r2
 800bed0:	4a2a      	ldr	r2, [pc, #168]	@ (800bf7c <LIS2DUXS12_0_Probe+0x150>)
 800bed2:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800bed4:	4b2a      	ldr	r3, [pc, #168]	@ (800bf80 <LIS2DUXS12_0_Probe+0x154>)
 800bed6:	4a28      	ldr	r2, [pc, #160]	@ (800bf78 <LIS2DUXS12_0_Probe+0x14c>)
 800bed8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800beda:	4b2a      	ldr	r3, [pc, #168]	@ (800bf84 <LIS2DUXS12_0_Probe+0x158>)
 800bedc:	4a2a      	ldr	r2, [pc, #168]	@ (800bf88 <LIS2DUXS12_0_Probe+0x15c>)
 800bede:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <LIS2DUXS12_0_Probe+0xd0>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <LIS2DUXS12_0_Probe+0xd0>
 800bef0:	7b7b      	ldrb	r3, [r7, #13]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d102      	bne.n	800befc <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bef6:	f06f 0304 	mvn.w	r3, #4
 800befa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800befc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d11e      	bne.n	800bf40 <LIS2DUXS12_0_Probe+0x114>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f003 0302 	and.w	r3, r3, #2
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d019      	beq.n	800bf40 <LIS2DUXS12_0_Probe+0x114>
 800bf0c:	7b3b      	ldrb	r3, [r7, #12]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d116      	bne.n	800bf40 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bf12:	4b1e      	ldr	r3, [pc, #120]	@ (800bf8c <LIS2DUXS12_0_Probe+0x160>)
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	4a1e      	ldr	r2, [pc, #120]	@ (800bf90 <LIS2DUXS12_0_Probe+0x164>)
 800bf18:	3306      	adds	r3, #6
 800bf1a:	491e      	ldr	r1, [pc, #120]	@ (800bf94 <LIS2DUXS12_0_Probe+0x168>)
 800bf1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800bf20:	4b18      	ldr	r3, [pc, #96]	@ (800bf84 <LIS2DUXS12_0_Probe+0x158>)
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a16      	ldr	r2, [pc, #88]	@ (800bf80 <LIS2DUXS12_0_Probe+0x154>)
 800bf28:	6892      	ldr	r2, [r2, #8]
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	4798      	blx	r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf34:	f06f 0304 	mvn.w	r3, #4
 800bf38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf3a:	e001      	b.n	800bf40 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bf40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d107      	bne.n	800bf56 <LIS2DUXS12_0_Probe+0x12a>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf50:	f06f 0304 	mvn.w	r3, #4
 800bf54:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bf56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3750      	adds	r7, #80	@ 0x50
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	08002901 	.word	0x08002901
 800bf64:	08002965 	.word	0x08002965
 800bf68:	08002a19 	.word	0x08002a19
 800bf6c:	080029b5 	.word	0x080029b5
 800bf70:	08002b25 	.word	0x08002b25
 800bf74:	0800c591 	.word	0x0800c591
 800bf78:	20014044 	.word	0x20014044
 800bf7c:	20013fc8 	.word	0x20013fc8
 800bf80:	20013f78 	.word	0x20013f78
 800bf84:	20013fb8 	.word	0x20013fb8
 800bf88:	20000004 	.word	0x20000004
 800bf8c:	200001f0 	.word	0x200001f0
 800bf90:	20013f88 	.word	0x20013f88
 800bf94:	20000014 	.word	0x20000014

0800bf98 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b094      	sub	sp, #80	@ 0x50
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800bfa8:	23d5      	movs	r3, #213	@ 0xd5
 800bfaa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bfae:	4b51      	ldr	r3, [pc, #324]	@ (800c0f4 <LSM6DSO16IS_0_Probe+0x15c>)
 800bfb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bfb2:	4b51      	ldr	r3, [pc, #324]	@ (800c0f8 <LSM6DSO16IS_0_Probe+0x160>)
 800bfb4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bfb6:	4b51      	ldr	r3, [pc, #324]	@ (800c0fc <LSM6DSO16IS_0_Probe+0x164>)
 800bfb8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bfba:	4b51      	ldr	r3, [pc, #324]	@ (800c100 <LSM6DSO16IS_0_Probe+0x168>)
 800bfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bfbe:	4b51      	ldr	r3, [pc, #324]	@ (800c104 <LSM6DSO16IS_0_Probe+0x16c>)
 800bfc0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bfc2:	4b51      	ldr	r3, [pc, #324]	@ (800c108 <LSM6DSO16IS_0_Probe+0x170>)
 800bfc4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800bfc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bfca:	4619      	mov	r1, r3
 800bfcc:	484f      	ldr	r0, [pc, #316]	@ (800c10c <LSM6DSO16IS_0_Probe+0x174>)
 800bfce:	f7fa fc2d 	bl	800682c <LSM6DSO16IS_RegisterBusIO>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bfd8:	f06f 0306 	mvn.w	r3, #6
 800bfdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfde:	e084      	b.n	800c0ea <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	484a      	ldr	r0, [pc, #296]	@ (800c10c <LSM6DSO16IS_0_Probe+0x174>)
 800bfe4:	f7fb fa53 	bl	800748e <LSM6DSO16IS_Set_Mem_Bank>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bfee:	f06f 0306 	mvn.w	r3, #6
 800bff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bff4:	e079      	b.n	800c0ea <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800bff6:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bffa:	4619      	mov	r1, r3
 800bffc:	4843      	ldr	r0, [pc, #268]	@ (800c10c <LSM6DSO16IS_0_Probe+0x174>)
 800bffe:	f7fa fd13 	bl	8006a28 <LSM6DSO16IS_ReadID>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d003      	beq.n	800c010 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c008:	f06f 0306 	mvn.w	r3, #6
 800c00c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c00e:	e06c      	b.n	800c0ea <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800c010:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c014:	2b22      	cmp	r3, #34	@ 0x22
 800c016:	d003      	beq.n	800c020 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c018:	f06f 0306 	mvn.w	r3, #6
 800c01c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c01e:	e064      	b.n	800c0ea <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	4619      	mov	r1, r3
 800c026:	4839      	ldr	r0, [pc, #228]	@ (800c10c <LSM6DSO16IS_0_Probe+0x174>)
 800c028:	f7fa fd16 	bl	8006a58 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800c02c:	7b7b      	ldrb	r3, [r7, #13]
 800c02e:	461a      	mov	r2, r3
 800c030:	7b3b      	ldrb	r3, [r7, #12]
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	431a      	orrs	r2, r3
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4313      	orrs	r3, r2
 800c03c:	4a34      	ldr	r2, [pc, #208]	@ (800c110 <LSM6DSO16IS_0_Probe+0x178>)
 800c03e:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800c040:	4b34      	ldr	r3, [pc, #208]	@ (800c114 <LSM6DSO16IS_0_Probe+0x17c>)
 800c042:	4a32      	ldr	r2, [pc, #200]	@ (800c10c <LSM6DSO16IS_0_Probe+0x174>)
 800c044:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800c046:	4b34      	ldr	r3, [pc, #208]	@ (800c118 <LSM6DSO16IS_0_Probe+0x180>)
 800c048:	4a34      	ldr	r2, [pc, #208]	@ (800c11c <LSM6DSO16IS_0_Probe+0x184>)
 800c04a:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800c04c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d11e      	bne.n	800c090 <LSM6DSO16IS_0_Probe+0xf8>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d019      	beq.n	800c090 <LSM6DSO16IS_0_Probe+0xf8>
 800c05c:	7b7b      	ldrb	r3, [r7, #13]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d116      	bne.n	800c090 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c062:	4b2f      	ldr	r3, [pc, #188]	@ (800c120 <LSM6DSO16IS_0_Probe+0x188>)
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	4a2f      	ldr	r2, [pc, #188]	@ (800c124 <LSM6DSO16IS_0_Probe+0x18c>)
 800c068:	3309      	adds	r3, #9
 800c06a:	492f      	ldr	r1, [pc, #188]	@ (800c128 <LSM6DSO16IS_0_Probe+0x190>)
 800c06c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800c070:	4b29      	ldr	r3, [pc, #164]	@ (800c118 <LSM6DSO16IS_0_Probe+0x180>)
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a27      	ldr	r2, [pc, #156]	@ (800c114 <LSM6DSO16IS_0_Probe+0x17c>)
 800c078:	68d2      	ldr	r2, [r2, #12]
 800c07a:	4610      	mov	r0, r2
 800c07c:	4798      	blx	r3
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d003      	beq.n	800c08c <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c084:	f06f 0304 	mvn.w	r3, #4
 800c088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c08a:	e001      	b.n	800c090 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800c090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c092:	2b00      	cmp	r3, #0
 800c094:	d11e      	bne.n	800c0d4 <LSM6DSO16IS_0_Probe+0x13c>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f003 0302 	and.w	r3, r3, #2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d019      	beq.n	800c0d4 <LSM6DSO16IS_0_Probe+0x13c>
 800c0a0:	7b3b      	ldrb	r3, [r7, #12]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d116      	bne.n	800c0d4 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800c120 <LSM6DSO16IS_0_Probe+0x188>)
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	4a1e      	ldr	r2, [pc, #120]	@ (800c124 <LSM6DSO16IS_0_Probe+0x18c>)
 800c0ac:	3309      	adds	r3, #9
 800c0ae:	491f      	ldr	r1, [pc, #124]	@ (800c12c <LSM6DSO16IS_0_Probe+0x194>)
 800c0b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800c0b4:	4b18      	ldr	r3, [pc, #96]	@ (800c118 <LSM6DSO16IS_0_Probe+0x180>)
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a16      	ldr	r2, [pc, #88]	@ (800c114 <LSM6DSO16IS_0_Probe+0x17c>)
 800c0bc:	68d2      	ldr	r2, [r2, #12]
 800c0be:	4610      	mov	r0, r2
 800c0c0:	4798      	blx	r3
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0c8:	f06f 0304 	mvn.w	r3, #4
 800c0cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0ce:	e001      	b.n	800c0d4 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800c0d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d107      	bne.n	800c0ea <LSM6DSO16IS_0_Probe+0x152>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0e4:	f06f 0304 	mvn.w	r3, #4
 800c0e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800c0ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3750      	adds	r7, #80	@ 0x50
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	08002901 	.word	0x08002901
 800c0f8:	08002965 	.word	0x08002965
 800c0fc:	08002a19 	.word	0x08002a19
 800c100:	080029b5 	.word	0x080029b5
 800c104:	08002b25 	.word	0x08002b25
 800c108:	0800c591 	.word	0x0800c591
 800c10c:	20014080 	.word	0x20014080
 800c110:	20013fc8 	.word	0x20013fc8
 800c114:	20013f78 	.word	0x20013f78
 800c118:	20013fb8 	.word	0x20013fb8
 800c11c:	200000a4 	.word	0x200000a4
 800c120:	200001f0 	.word	0x200001f0
 800c124:	20013f88 	.word	0x20013f88
 800c128:	200000d8 	.word	0x200000d8
 800c12c:	200000b4 	.word	0x200000b4

0800c130 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	4a04      	ldr	r2, [pc, #16]	@ (800c150 <BSP_LED_Init+0x20>)
 800c13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c142:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	08017104 	.word	0x08017104

0800c154 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c15a:	2300      	movs	r3, #0
 800c15c:	60bb      	str	r3, [r7, #8]
 800c15e:	4b1c      	ldr	r3, [pc, #112]	@ (800c1d0 <LED_USER_GPIO_Init+0x7c>)
 800c160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c162:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d0 <LED_USER_GPIO_Init+0x7c>)
 800c164:	f043 0302 	orr.w	r3, r3, #2
 800c168:	6313      	str	r3, [r2, #48]	@ 0x30
 800c16a:	4b19      	ldr	r3, [pc, #100]	@ (800c1d0 <LED_USER_GPIO_Init+0x7c>)
 800c16c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	60bb      	str	r3, [r7, #8]
 800c174:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c176:	f107 030c 	add.w	r3, r7, #12
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	605a      	str	r2, [r3, #4]
 800c180:	609a      	str	r2, [r3, #8]
 800c182:	60da      	str	r2, [r3, #12]
 800c184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c186:	2300      	movs	r3, #0
 800c188:	607b      	str	r3, [r7, #4]
 800c18a:	4b11      	ldr	r3, [pc, #68]	@ (800c1d0 <LED_USER_GPIO_Init+0x7c>)
 800c18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18e:	4a10      	ldr	r2, [pc, #64]	@ (800c1d0 <LED_USER_GPIO_Init+0x7c>)
 800c190:	f043 0302 	orr.w	r3, r3, #2
 800c194:	6313      	str	r3, [r2, #48]	@ 0x30
 800c196:	4b0e      	ldr	r3, [pc, #56]	@ (800c1d0 <LED_USER_GPIO_Init+0x7c>)
 800c198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	480b      	ldr	r0, [pc, #44]	@ (800c1d4 <LED_USER_GPIO_Init+0x80>)
 800c1a8:	f000 fdd6 	bl	800cd58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800c1bc:	f107 030c 	add.w	r3, r7, #12
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4804      	ldr	r0, [pc, #16]	@ (800c1d4 <LED_USER_GPIO_Init+0x80>)
 800c1c4:	f000 fb48 	bl	800c858 <HAL_GPIO_Init>

}
 800c1c8:	bf00      	nop
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	40023800 	.word	0x40023800
 800c1d4:	40020400 	.word	0x40020400

0800c1d8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	460a      	mov	r2, r1
 800c1e2:	71fb      	strb	r3, [r7, #7]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c26c <BSP_PB_Init+0x94>)
 800c1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800c1f6:	79bb      	ldrb	r3, [r7, #6]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d132      	bne.n	800c262 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	4a1b      	ldr	r2, [pc, #108]	@ (800c270 <BSP_PB_Init+0x98>)
 800c202:	441a      	add	r2, r3
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	491b      	ldr	r1, [pc, #108]	@ (800c274 <BSP_PB_Init+0x9c>)
 800c208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c20c:	4619      	mov	r1, r3
 800c20e:	4610      	mov	r0, r2
 800c210:	f000 fb0d 	bl	800c82e <HAL_EXTI_GetHandle>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c21a:	f06f 0303 	mvn.w	r3, #3
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	e01f      	b.n	800c262 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800c222:	79fb      	ldrb	r3, [r7, #7]
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	4a12      	ldr	r2, [pc, #72]	@ (800c270 <BSP_PB_Init+0x98>)
 800c228:	1898      	adds	r0, r3, r2
 800c22a:	79fb      	ldrb	r3, [r7, #7]
 800c22c:	4a12      	ldr	r2, [pc, #72]	@ (800c278 <BSP_PB_Init+0xa0>)
 800c22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c232:	461a      	mov	r2, r3
 800c234:	2100      	movs	r1, #0
 800c236:	f000 fae0 	bl	800c7fa <HAL_EXTI_RegisterCallback>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c240:	f06f 0303 	mvn.w	r3, #3
 800c244:	60fb      	str	r3, [r7, #12]
 800c246:	e00c      	b.n	800c262 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800c248:	2028      	movs	r0, #40	@ 0x28
 800c24a:	79fb      	ldrb	r3, [r7, #7]
 800c24c:	4a0b      	ldr	r2, [pc, #44]	@ (800c27c <BSP_PB_Init+0xa4>)
 800c24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c252:	2200      	movs	r2, #0
 800c254:	4619      	mov	r1, r3
 800c256:	f000 fa9a 	bl	800c78e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800c25a:	2328      	movs	r3, #40	@ 0x28
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fab2 	bl	800c7c6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800c262:	68fb      	ldr	r3, [r7, #12]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	08017108 	.word	0x08017108
 800c270:	20000214 	.word	0x20000214
 800c274:	0801710c 	.word	0x0801710c
 800c278:	08017110 	.word	0x08017110
 800c27c:	08017114 	.word	0x08017114

0800c280 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c28a:	79fb      	ldrb	r3, [r7, #7]
 800c28c:	4a09      	ldr	r2, [pc, #36]	@ (800c2b4 <BSP_PB_GetState+0x34>)
 800c28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c296:	4611      	mov	r1, r2
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 fd45 	bl	800cd28 <HAL_GPIO_ReadPin>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	bf0c      	ite	eq
 800c2a4:	2301      	moveq	r3, #1
 800c2a6:	2300      	movne	r3, #0
 800c2a8:	b2db      	uxtb	r3, r3
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000210 	.word	0x20000210

0800c2b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c2bc:	2000      	movs	r0, #0
 800c2be:	f004 fc73 	bl	8010ba8 <BSP_PB_Callback>
}
 800c2c2:	bf00      	nop
 800c2c4:	bd80      	pop	{r7, pc}
	...

0800c2c8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b088      	sub	sp, #32
 800c2cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60bb      	str	r3, [r7, #8]
 800c2d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c33c <BUTTON_USER_GPIO_Init+0x74>)
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d6:	4a19      	ldr	r2, [pc, #100]	@ (800c33c <BUTTON_USER_GPIO_Init+0x74>)
 800c2d8:	f043 0304 	orr.w	r3, r3, #4
 800c2dc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2de:	4b17      	ldr	r3, [pc, #92]	@ (800c33c <BUTTON_USER_GPIO_Init+0x74>)
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e2:	f003 0304 	and.w	r3, r3, #4
 800c2e6:	60bb      	str	r3, [r7, #8]
 800c2e8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	601a      	str	r2, [r3, #0]
 800c2f2:	605a      	str	r2, [r3, #4]
 800c2f4:	609a      	str	r2, [r3, #8]
 800c2f6:	60da      	str	r2, [r3, #12]
 800c2f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	607b      	str	r3, [r7, #4]
 800c2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c33c <BUTTON_USER_GPIO_Init+0x74>)
 800c300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c302:	4a0e      	ldr	r2, [pc, #56]	@ (800c33c <BUTTON_USER_GPIO_Init+0x74>)
 800c304:	f043 0304 	orr.w	r3, r3, #4
 800c308:	6313      	str	r3, [r2, #48]	@ 0x30
 800c30a:	4b0c      	ldr	r3, [pc, #48]	@ (800c33c <BUTTON_USER_GPIO_Init+0x74>)
 800c30c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c30e:	f003 0304 	and.w	r3, r3, #4
 800c312:	607b      	str	r3, [r7, #4]
 800c314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c31a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c31c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c322:	2300      	movs	r3, #0
 800c324:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c326:	f107 030c 	add.w	r3, r7, #12
 800c32a:	4619      	mov	r1, r3
 800c32c:	4804      	ldr	r0, [pc, #16]	@ (800c340 <BUTTON_USER_GPIO_Init+0x78>)
 800c32e:	f000 fa93 	bl	800c858 <HAL_GPIO_Init>

}
 800c332:	bf00      	nop
 800c334:	3720      	adds	r7, #32
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	40023800 	.word	0x40023800
 800c340:	40020800 	.word	0x40020800

0800c344 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d903      	bls.n	800c360 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c358:	f06f 0301 	mvn.w	r3, #1
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	e025      	b.n	800c3ac <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	79fa      	ldrb	r2, [r7, #7]
 800c364:	4914      	ldr	r1, [pc, #80]	@ (800c3b8 <BSP_COM_Init+0x74>)
 800c366:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c36a:	4814      	ldr	r0, [pc, #80]	@ (800c3bc <BSP_COM_Init+0x78>)
 800c36c:	4613      	mov	r3, r2
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	4413      	add	r3, r2
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	4403      	add	r3, r0
 800c376:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c378:	79fa      	ldrb	r2, [r7, #7]
 800c37a:	4613      	mov	r3, r2
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	4413      	add	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4a0e      	ldr	r2, [pc, #56]	@ (800c3bc <BSP_COM_Init+0x78>)
 800c384:	4413      	add	r3, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f848 	bl	800c41c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c38c:	79fa      	ldrb	r2, [r7, #7]
 800c38e:	4613      	mov	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	4413      	add	r3, r2
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	4a09      	ldr	r2, [pc, #36]	@ (800c3bc <BSP_COM_Init+0x78>)
 800c398:	4413      	add	r3, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f810 	bl	800c3c0 <MX_USART2_UART_Init>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c3a6:	f06f 0303 	mvn.w	r3, #3
 800c3aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	2000021c 	.word	0x2000021c
 800c3bc:	200140b8 	.word	0x200140b8

0800c3c0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a12      	ldr	r2, [pc, #72]	@ (800c418 <MX_USART2_UART_Init+0x58>)
 800c3d0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c3d8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	220c      	movs	r2, #12
 800c3f0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f003 fefe 	bl	8010200 <HAL_UART_Init>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	40004400 	.word	0x40004400

0800c41c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08a      	sub	sp, #40	@ 0x28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
 800c428:	4b1e      	ldr	r3, [pc, #120]	@ (800c4a4 <USART2_MspInit+0x88>)
 800c42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4a4 <USART2_MspInit+0x88>)
 800c42e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c432:	6413      	str	r3, [r2, #64]	@ 0x40
 800c434:	4b1b      	ldr	r3, [pc, #108]	@ (800c4a4 <USART2_MspInit+0x88>)
 800c436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c43c:	613b      	str	r3, [r7, #16]
 800c43e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	4b17      	ldr	r3, [pc, #92]	@ (800c4a4 <USART2_MspInit+0x88>)
 800c446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c448:	4a16      	ldr	r2, [pc, #88]	@ (800c4a4 <USART2_MspInit+0x88>)
 800c44a:	f043 0301 	orr.w	r3, r3, #1
 800c44e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c450:	4b14      	ldr	r3, [pc, #80]	@ (800c4a4 <USART2_MspInit+0x88>)
 800c452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c45c:	2304      	movs	r3, #4
 800c45e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c460:	2302      	movs	r3, #2
 800c462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c468:	2300      	movs	r3, #0
 800c46a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c46c:	2307      	movs	r3, #7
 800c46e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c470:	f107 0314 	add.w	r3, r7, #20
 800c474:	4619      	mov	r1, r3
 800c476:	480c      	ldr	r0, [pc, #48]	@ (800c4a8 <USART2_MspInit+0x8c>)
 800c478:	f000 f9ee 	bl	800c858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c47c:	2308      	movs	r3, #8
 800c47e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c480:	2302      	movs	r3, #2
 800c482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c484:	2300      	movs	r3, #0
 800c486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c488:	2300      	movs	r3, #0
 800c48a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c48c:	2307      	movs	r3, #7
 800c48e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c490:	f107 0314 	add.w	r3, r7, #20
 800c494:	4619      	mov	r1, r3
 800c496:	4804      	ldr	r0, [pc, #16]	@ (800c4a8 <USART2_MspInit+0x8c>)
 800c498:	f000 f9de 	bl	800c858 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c49c:	bf00      	nop
 800c49e:	3728      	adds	r7, #40	@ 0x28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	40023800 	.word	0x40023800
 800c4a8:	40020000 	.word	0x40020000

0800c4ac <HAL_Init>:
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c4ec <HAL_Init+0x40>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c4ec <HAL_Init+0x40>)
 800c4b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c4ec <HAL_Init+0x40>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c4ec <HAL_Init+0x40>)
 800c4c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	4b08      	ldr	r3, [pc, #32]	@ (800c4ec <HAL_Init+0x40>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a07      	ldr	r2, [pc, #28]	@ (800c4ec <HAL_Init+0x40>)
 800c4ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	2003      	movs	r0, #3
 800c4d6:	f000 f94f 	bl	800c778 <HAL_NVIC_SetPriorityGrouping>
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f000 f808 	bl	800c4f0 <HAL_InitTick>
 800c4e0:	f7f6 f92a 	bl	8002738 <HAL_MspInit>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	40023c00 	.word	0x40023c00

0800c4f0 <HAL_InitTick>:
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	4b12      	ldr	r3, [pc, #72]	@ (800c544 <HAL_InitTick+0x54>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	4b12      	ldr	r3, [pc, #72]	@ (800c548 <HAL_InitTick+0x58>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	4619      	mov	r1, r3
 800c502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c506:	fbb3 f3f1 	udiv	r3, r3, r1
 800c50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 f967 	bl	800c7e2 <HAL_SYSTICK_Config>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <HAL_InitTick+0x2e>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e00e      	b.n	800c53c <HAL_InitTick+0x4c>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b0f      	cmp	r3, #15
 800c522:	d80a      	bhi.n	800c53a <HAL_InitTick+0x4a>
 800c524:	2200      	movs	r2, #0
 800c526:	6879      	ldr	r1, [r7, #4]
 800c528:	f04f 30ff 	mov.w	r0, #4294967295
 800c52c:	f000 f92f 	bl	800c78e <HAL_NVIC_SetPriority>
 800c530:	4a06      	ldr	r2, [pc, #24]	@ (800c54c <HAL_InitTick+0x5c>)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	2300      	movs	r3, #0
 800c538:	e000      	b.n	800c53c <HAL_InitTick+0x4c>
 800c53a:	2301      	movs	r3, #1
 800c53c:	4618      	mov	r0, r3
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20000000 	.word	0x20000000
 800c548:	20000224 	.word	0x20000224
 800c54c:	20000220 	.word	0x20000220

0800c550 <HAL_IncTick>:
 800c550:	b480      	push	{r7}
 800c552:	af00      	add	r7, sp, #0
 800c554:	4b06      	ldr	r3, [pc, #24]	@ (800c570 <HAL_IncTick+0x20>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	4b06      	ldr	r3, [pc, #24]	@ (800c574 <HAL_IncTick+0x24>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4413      	add	r3, r2
 800c560:	4a04      	ldr	r2, [pc, #16]	@ (800c574 <HAL_IncTick+0x24>)
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	bf00      	nop
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	20000224 	.word	0x20000224
 800c574:	20014100 	.word	0x20014100

0800c578 <HAL_GetTick>:
 800c578:	b480      	push	{r7}
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	4b03      	ldr	r3, [pc, #12]	@ (800c58c <HAL_GetTick+0x14>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4618      	mov	r0, r3
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20014100 	.word	0x20014100

0800c590 <HAL_Delay>:
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	f7ff ffee 	bl	800c578 <HAL_GetTick>
 800c59c:	60b8      	str	r0, [r7, #8]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	60fb      	str	r3, [r7, #12]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a8:	d005      	beq.n	800c5b6 <HAL_Delay+0x26>
 800c5aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d4 <HAL_Delay+0x44>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	60fb      	str	r3, [r7, #12]
 800c5b6:	bf00      	nop
 800c5b8:	f7ff ffde 	bl	800c578 <HAL_GetTick>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d8f7      	bhi.n	800c5b8 <HAL_Delay+0x28>
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20000224 	.word	0x20000224

0800c5d8 <__NVIC_SetPriorityGrouping>:
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f003 0307 	and.w	r3, r3, #7
 800c5e6:	60fb      	str	r3, [r7, #12]
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c61c <__NVIC_SetPriorityGrouping+0x44>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	60bb      	str	r3, [r7, #8]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	60bb      	str	r3, [r7, #8]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	021a      	lsls	r2, r3, #8
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c608:	60bb      	str	r3, [r7, #8]
 800c60a:	4a04      	ldr	r2, [pc, #16]	@ (800c61c <__NVIC_SetPriorityGrouping+0x44>)
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	60d3      	str	r3, [r2, #12]
 800c610:	bf00      	nop
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	e000ed00 	.word	0xe000ed00

0800c620 <__NVIC_GetPriorityGrouping>:
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
 800c624:	4b04      	ldr	r3, [pc, #16]	@ (800c638 <__NVIC_GetPriorityGrouping+0x18>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	0a1b      	lsrs	r3, r3, #8
 800c62a:	f003 0307 	and.w	r3, r3, #7
 800c62e:	4618      	mov	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	e000ed00 	.word	0xe000ed00

0800c63c <__NVIC_EnableIRQ>:
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	4603      	mov	r3, r0
 800c644:	71fb      	strb	r3, [r7, #7]
 800c646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	db0b      	blt.n	800c666 <__NVIC_EnableIRQ+0x2a>
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	f003 021f 	and.w	r2, r3, #31
 800c654:	4907      	ldr	r1, [pc, #28]	@ (800c674 <__NVIC_EnableIRQ+0x38>)
 800c656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c65a:	095b      	lsrs	r3, r3, #5
 800c65c:	2001      	movs	r0, #1
 800c65e:	fa00 f202 	lsl.w	r2, r0, r2
 800c662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	e000e100 	.word	0xe000e100

0800c678 <__NVIC_SetPriority>:
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	6039      	str	r1, [r7, #0]
 800c682:	71fb      	strb	r3, [r7, #7]
 800c684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	db0a      	blt.n	800c6a2 <__NVIC_SetPriority+0x2a>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	490c      	ldr	r1, [pc, #48]	@ (800c6c4 <__NVIC_SetPriority+0x4c>)
 800c692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c696:	0112      	lsls	r2, r2, #4
 800c698:	b2d2      	uxtb	r2, r2
 800c69a:	440b      	add	r3, r1
 800c69c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800c6a0:	e00a      	b.n	800c6b8 <__NVIC_SetPriority+0x40>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4908      	ldr	r1, [pc, #32]	@ (800c6c8 <__NVIC_SetPriority+0x50>)
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	f003 030f 	and.w	r3, r3, #15
 800c6ae:	3b04      	subs	r3, #4
 800c6b0:	0112      	lsls	r2, r2, #4
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	440b      	add	r3, r1
 800c6b6:	761a      	strb	r2, [r3, #24]
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	e000e100 	.word	0xe000e100
 800c6c8:	e000ed00 	.word	0xe000ed00

0800c6cc <NVIC_EncodePriority>:
 800c6cc:	b480      	push	{r7}
 800c6ce:	b089      	sub	sp, #36	@ 0x24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	f1c3 0307 	rsb	r3, r3, #7
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	bf28      	it	cs
 800c6ea:	2304      	movcs	r3, #4
 800c6ec:	61bb      	str	r3, [r7, #24]
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	2b06      	cmp	r3, #6
 800c6f4:	d902      	bls.n	800c6fc <NVIC_EncodePriority+0x30>
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	3b03      	subs	r3, #3
 800c6fa:	e000      	b.n	800c6fe <NVIC_EncodePriority+0x32>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	f04f 32ff 	mov.w	r2, #4294967295
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	43da      	mvns	r2, r3
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	401a      	ands	r2, r3
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	409a      	lsls	r2, r3
 800c714:	f04f 31ff 	mov.w	r1, #4294967295
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	fa01 f303 	lsl.w	r3, r1, r3
 800c71e:	43d9      	mvns	r1, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	400b      	ands	r3, r1
 800c724:	4313      	orrs	r3, r2
 800c726:	4618      	mov	r0, r3
 800c728:	3724      	adds	r7, #36	@ 0x24
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
	...

0800c734 <SysTick_Config>:
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3b01      	subs	r3, #1
 800c740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c744:	d301      	bcc.n	800c74a <SysTick_Config+0x16>
 800c746:	2301      	movs	r3, #1
 800c748:	e00f      	b.n	800c76a <SysTick_Config+0x36>
 800c74a:	4a0a      	ldr	r2, [pc, #40]	@ (800c774 <SysTick_Config+0x40>)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3b01      	subs	r3, #1
 800c750:	6053      	str	r3, [r2, #4]
 800c752:	210f      	movs	r1, #15
 800c754:	f04f 30ff 	mov.w	r0, #4294967295
 800c758:	f7ff ff8e 	bl	800c678 <__NVIC_SetPriority>
 800c75c:	4b05      	ldr	r3, [pc, #20]	@ (800c774 <SysTick_Config+0x40>)
 800c75e:	2200      	movs	r2, #0
 800c760:	609a      	str	r2, [r3, #8]
 800c762:	4b04      	ldr	r3, [pc, #16]	@ (800c774 <SysTick_Config+0x40>)
 800c764:	2207      	movs	r2, #7
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	2300      	movs	r3, #0
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	e000e010 	.word	0xe000e010

0800c778 <HAL_NVIC_SetPriorityGrouping>:
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff ff29 	bl	800c5d8 <__NVIC_SetPriorityGrouping>
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <HAL_NVIC_SetPriority>:
 800c78e:	b580      	push	{r7, lr}
 800c790:	b086      	sub	sp, #24
 800c792:	af00      	add	r7, sp, #0
 800c794:	4603      	mov	r3, r0
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
 800c79a:	73fb      	strb	r3, [r7, #15]
 800c79c:	2300      	movs	r3, #0
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	f7ff ff3e 	bl	800c620 <__NVIC_GetPriorityGrouping>
 800c7a4:	6178      	str	r0, [r7, #20]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68b9      	ldr	r1, [r7, #8]
 800c7aa:	6978      	ldr	r0, [r7, #20]
 800c7ac:	f7ff ff8e 	bl	800c6cc <NVIC_EncodePriority>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff ff5d 	bl	800c678 <__NVIC_SetPriority>
 800c7be:	bf00      	nop
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_NVIC_EnableIRQ>:
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	71fb      	strb	r3, [r7, #7]
 800c7d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff ff31 	bl	800c63c <__NVIC_EnableIRQ>
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_SYSTICK_Config>:
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ffa2 	bl	800c734 <SysTick_Config>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <HAL_EXTI_RegisterCallback>:
 800c7fa:	b480      	push	{r7}
 800c7fc:	b087      	sub	sp, #28
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	460b      	mov	r3, r1
 800c804:	607a      	str	r2, [r7, #4]
 800c806:	72fb      	strb	r3, [r7, #11]
 800c808:	2300      	movs	r3, #0
 800c80a:	75fb      	strb	r3, [r7, #23]
 800c80c:	7afb      	ldrb	r3, [r7, #11]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d103      	bne.n	800c81a <HAL_EXTI_RegisterCallback+0x20>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	605a      	str	r2, [r3, #4]
 800c818:	e002      	b.n	800c820 <HAL_EXTI_RegisterCallback+0x26>
 800c81a:	2301      	movs	r3, #1
 800c81c:	75fb      	strb	r3, [r7, #23]
 800c81e:	bf00      	nop
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	4618      	mov	r0, r3
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <HAL_EXTI_GetHandle>:
 800c82e:	b480      	push	{r7}
 800c830:	b083      	sub	sp, #12
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	6039      	str	r1, [r7, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <HAL_EXTI_GetHandle+0x14>
 800c83e:	2301      	movs	r3, #1
 800c840:	e003      	b.n	800c84a <HAL_EXTI_GetHandle+0x1c>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
	...

0800c858 <HAL_GPIO_Init>:
 800c858:	b480      	push	{r7}
 800c85a:	b089      	sub	sp, #36	@ 0x24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	2300      	movs	r3, #0
 800c864:	617b      	str	r3, [r7, #20]
 800c866:	2300      	movs	r3, #0
 800c868:	613b      	str	r3, [r7, #16]
 800c86a:	2300      	movs	r3, #0
 800c86c:	61bb      	str	r3, [r7, #24]
 800c86e:	2300      	movs	r3, #0
 800c870:	61fb      	str	r3, [r7, #28]
 800c872:	e159      	b.n	800cb28 <HAL_GPIO_Init+0x2d0>
 800c874:	2201      	movs	r2, #1
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	fa02 f303 	lsl.w	r3, r2, r3
 800c87c:	617b      	str	r3, [r7, #20]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	4013      	ands	r3, r2
 800c886:	613b      	str	r3, [r7, #16]
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	f040 8148 	bne.w	800cb22 <HAL_GPIO_Init+0x2ca>
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f003 0303 	and.w	r3, r3, #3
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d005      	beq.n	800c8aa <HAL_GPIO_Init+0x52>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f003 0303 	and.w	r3, r3, #3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d130      	bne.n	800c90c <HAL_GPIO_Init+0xb4>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	61bb      	str	r3, [r7, #24]
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ba:	43db      	mvns	r3, r3
 800c8bc:	69ba      	ldr	r2, [r7, #24]
 800c8be:	4013      	ands	r3, r2
 800c8c0:	61bb      	str	r3, [r7, #24]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	61bb      	str	r3, [r7, #24]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	69ba      	ldr	r2, [r7, #24]
 800c8d8:	609a      	str	r2, [r3, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	61bb      	str	r3, [r7, #24]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e8:	43db      	mvns	r3, r3
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	091b      	lsrs	r3, r3, #4
 800c8f6:	f003 0201 	and.w	r2, r3, #1
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c900:	69ba      	ldr	r2, [r7, #24]
 800c902:	4313      	orrs	r3, r2
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	69ba      	ldr	r2, [r7, #24]
 800c90a:	605a      	str	r2, [r3, #4]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	f003 0303 	and.w	r3, r3, #3
 800c914:	2b03      	cmp	r3, #3
 800c916:	d017      	beq.n	800c948 <HAL_GPIO_Init+0xf0>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	61bb      	str	r3, [r7, #24]
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	2203      	movs	r2, #3
 800c924:	fa02 f303 	lsl.w	r3, r2, r3
 800c928:	43db      	mvns	r3, r3
 800c92a:	69ba      	ldr	r2, [r7, #24]
 800c92c:	4013      	ands	r3, r2
 800c92e:	61bb      	str	r3, [r7, #24]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	fa02 f303 	lsl.w	r3, r2, r3
 800c93c:	69ba      	ldr	r2, [r7, #24]
 800c93e:	4313      	orrs	r3, r2
 800c940:	61bb      	str	r3, [r7, #24]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	60da      	str	r2, [r3, #12]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f003 0303 	and.w	r3, r3, #3
 800c950:	2b02      	cmp	r3, #2
 800c952:	d123      	bne.n	800c99c <HAL_GPIO_Init+0x144>
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	08da      	lsrs	r2, r3, #3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3208      	adds	r2, #8
 800c95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c960:	61bb      	str	r3, [r7, #24]
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	f003 0307 	and.w	r3, r3, #7
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	220f      	movs	r2, #15
 800c96c:	fa02 f303 	lsl.w	r3, r2, r3
 800c970:	43db      	mvns	r3, r3
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	4013      	ands	r3, r2
 800c976:	61bb      	str	r3, [r7, #24]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	691a      	ldr	r2, [r3, #16]
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	fa02 f303 	lsl.w	r3, r2, r3
 800c988:	69ba      	ldr	r2, [r7, #24]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	61bb      	str	r3, [r7, #24]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	08da      	lsrs	r2, r3, #3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3208      	adds	r2, #8
 800c996:	69b9      	ldr	r1, [r7, #24]
 800c998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	61bb      	str	r3, [r7, #24]
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	2203      	movs	r2, #3
 800c9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ac:	43db      	mvns	r3, r3
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	61bb      	str	r3, [r7, #24]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f003 0203 	and.w	r2, r3, #3
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c4:	69ba      	ldr	r2, [r7, #24]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	61bb      	str	r3, [r7, #24]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	69ba      	ldr	r2, [r7, #24]
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f000 80a2 	beq.w	800cb22 <HAL_GPIO_Init+0x2ca>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
 800c9e2:	4b57      	ldr	r3, [pc, #348]	@ (800cb40 <HAL_GPIO_Init+0x2e8>)
 800c9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9e6:	4a56      	ldr	r2, [pc, #344]	@ (800cb40 <HAL_GPIO_Init+0x2e8>)
 800c9e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c9ec:	6453      	str	r3, [r2, #68]	@ 0x44
 800c9ee:	4b54      	ldr	r3, [pc, #336]	@ (800cb40 <HAL_GPIO_Init+0x2e8>)
 800c9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	4a52      	ldr	r2, [pc, #328]	@ (800cb44 <HAL_GPIO_Init+0x2ec>)
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	089b      	lsrs	r3, r3, #2
 800ca00:	3302      	adds	r3, #2
 800ca02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca06:	61bb      	str	r3, [r7, #24]
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	f003 0303 	and.w	r3, r3, #3
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	220f      	movs	r2, #15
 800ca12:	fa02 f303 	lsl.w	r3, r2, r3
 800ca16:	43db      	mvns	r3, r3
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	61bb      	str	r3, [r7, #24]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a49      	ldr	r2, [pc, #292]	@ (800cb48 <HAL_GPIO_Init+0x2f0>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d019      	beq.n	800ca5a <HAL_GPIO_Init+0x202>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a48      	ldr	r2, [pc, #288]	@ (800cb4c <HAL_GPIO_Init+0x2f4>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d013      	beq.n	800ca56 <HAL_GPIO_Init+0x1fe>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a47      	ldr	r2, [pc, #284]	@ (800cb50 <HAL_GPIO_Init+0x2f8>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00d      	beq.n	800ca52 <HAL_GPIO_Init+0x1fa>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a46      	ldr	r2, [pc, #280]	@ (800cb54 <HAL_GPIO_Init+0x2fc>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d007      	beq.n	800ca4e <HAL_GPIO_Init+0x1f6>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a45      	ldr	r2, [pc, #276]	@ (800cb58 <HAL_GPIO_Init+0x300>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d101      	bne.n	800ca4a <HAL_GPIO_Init+0x1f2>
 800ca46:	2304      	movs	r3, #4
 800ca48:	e008      	b.n	800ca5c <HAL_GPIO_Init+0x204>
 800ca4a:	2307      	movs	r3, #7
 800ca4c:	e006      	b.n	800ca5c <HAL_GPIO_Init+0x204>
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e004      	b.n	800ca5c <HAL_GPIO_Init+0x204>
 800ca52:	2302      	movs	r3, #2
 800ca54:	e002      	b.n	800ca5c <HAL_GPIO_Init+0x204>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e000      	b.n	800ca5c <HAL_GPIO_Init+0x204>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	69fa      	ldr	r2, [r7, #28]
 800ca5e:	f002 0203 	and.w	r2, r2, #3
 800ca62:	0092      	lsls	r2, r2, #2
 800ca64:	4093      	lsls	r3, r2
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	61bb      	str	r3, [r7, #24]
 800ca6c:	4935      	ldr	r1, [pc, #212]	@ (800cb44 <HAL_GPIO_Init+0x2ec>)
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	089b      	lsrs	r3, r3, #2
 800ca72:	3302      	adds	r3, #2
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ca7a:	4b38      	ldr	r3, [pc, #224]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	61bb      	str	r3, [r7, #24]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	43db      	mvns	r3, r3
 800ca84:	69ba      	ldr	r2, [r7, #24]
 800ca86:	4013      	ands	r3, r2
 800ca88:	61bb      	str	r3, [r7, #24]
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d003      	beq.n	800ca9e <HAL_GPIO_Init+0x246>
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	61bb      	str	r3, [r7, #24]
 800ca9e:	4a2f      	ldr	r2, [pc, #188]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	6093      	str	r3, [r2, #8]
 800caa4:	4b2d      	ldr	r3, [pc, #180]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	61bb      	str	r3, [r7, #24]
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	43db      	mvns	r3, r3
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	4013      	ands	r3, r2
 800cab2:	61bb      	str	r3, [r7, #24]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <HAL_GPIO_Init+0x270>
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	4313      	orrs	r3, r2
 800cac6:	61bb      	str	r3, [r7, #24]
 800cac8:	4a24      	ldr	r2, [pc, #144]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	60d3      	str	r3, [r2, #12]
 800cace:	4b23      	ldr	r3, [pc, #140]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	61bb      	str	r3, [r7, #24]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	43db      	mvns	r3, r3
 800cad8:	69ba      	ldr	r2, [r7, #24]
 800cada:	4013      	ands	r3, r2
 800cadc:	61bb      	str	r3, [r7, #24]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <HAL_GPIO_Init+0x29a>
 800caea:	69ba      	ldr	r2, [r7, #24]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	4313      	orrs	r3, r2
 800caf0:	61bb      	str	r3, [r7, #24]
 800caf2:	4a1a      	ldr	r2, [pc, #104]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	6053      	str	r3, [r2, #4]
 800caf8:	4b18      	ldr	r3, [pc, #96]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	61bb      	str	r3, [r7, #24]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	43db      	mvns	r3, r3
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	4013      	ands	r3, r2
 800cb06:	61bb      	str	r3, [r7, #24]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d003      	beq.n	800cb1c <HAL_GPIO_Init+0x2c4>
 800cb14:	69ba      	ldr	r2, [r7, #24]
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	61bb      	str	r3, [r7, #24]
 800cb1c:	4a0f      	ldr	r2, [pc, #60]	@ (800cb5c <HAL_GPIO_Init+0x304>)
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	3301      	adds	r3, #1
 800cb26:	61fb      	str	r3, [r7, #28]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2b0f      	cmp	r3, #15
 800cb2c:	f67f aea2 	bls.w	800c874 <HAL_GPIO_Init+0x1c>
 800cb30:	bf00      	nop
 800cb32:	bf00      	nop
 800cb34:	3724      	adds	r7, #36	@ 0x24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	40023800 	.word	0x40023800
 800cb44:	40013800 	.word	0x40013800
 800cb48:	40020000 	.word	0x40020000
 800cb4c:	40020400 	.word	0x40020400
 800cb50:	40020800 	.word	0x40020800
 800cb54:	40020c00 	.word	0x40020c00
 800cb58:	40021000 	.word	0x40021000
 800cb5c:	40013c00 	.word	0x40013c00

0800cb60 <HAL_GPIO_DeInit>:
 800cb60:	b480      	push	{r7}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	2300      	movs	r3, #0
 800cb74:	60bb      	str	r3, [r7, #8]
 800cb76:	2300      	movs	r3, #0
 800cb78:	617b      	str	r3, [r7, #20]
 800cb7a:	e0bb      	b.n	800ccf4 <HAL_GPIO_DeInit+0x194>
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	fa02 f303 	lsl.w	r3, r2, r3
 800cb84:	613b      	str	r3, [r7, #16]
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	f040 80ab 	bne.w	800ccee <HAL_GPIO_DeInit+0x18e>
 800cb98:	4a5c      	ldr	r2, [pc, #368]	@ (800cd0c <HAL_GPIO_DeInit+0x1ac>)
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	089b      	lsrs	r3, r3, #2
 800cb9e:	3302      	adds	r3, #2
 800cba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba4:	60bb      	str	r3, [r7, #8]
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f003 0303 	and.w	r3, r3, #3
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	220f      	movs	r2, #15
 800cbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	60bb      	str	r3, [r7, #8]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a54      	ldr	r2, [pc, #336]	@ (800cd10 <HAL_GPIO_DeInit+0x1b0>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d019      	beq.n	800cbf6 <HAL_GPIO_DeInit+0x96>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a53      	ldr	r2, [pc, #332]	@ (800cd14 <HAL_GPIO_DeInit+0x1b4>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d013      	beq.n	800cbf2 <HAL_GPIO_DeInit+0x92>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a52      	ldr	r2, [pc, #328]	@ (800cd18 <HAL_GPIO_DeInit+0x1b8>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d00d      	beq.n	800cbee <HAL_GPIO_DeInit+0x8e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a51      	ldr	r2, [pc, #324]	@ (800cd1c <HAL_GPIO_DeInit+0x1bc>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d007      	beq.n	800cbea <HAL_GPIO_DeInit+0x8a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a50      	ldr	r2, [pc, #320]	@ (800cd20 <HAL_GPIO_DeInit+0x1c0>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d101      	bne.n	800cbe6 <HAL_GPIO_DeInit+0x86>
 800cbe2:	2304      	movs	r3, #4
 800cbe4:	e008      	b.n	800cbf8 <HAL_GPIO_DeInit+0x98>
 800cbe6:	2307      	movs	r3, #7
 800cbe8:	e006      	b.n	800cbf8 <HAL_GPIO_DeInit+0x98>
 800cbea:	2303      	movs	r3, #3
 800cbec:	e004      	b.n	800cbf8 <HAL_GPIO_DeInit+0x98>
 800cbee:	2302      	movs	r3, #2
 800cbf0:	e002      	b.n	800cbf8 <HAL_GPIO_DeInit+0x98>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <HAL_GPIO_DeInit+0x98>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	f002 0203 	and.w	r2, r2, #3
 800cbfe:	0092      	lsls	r2, r2, #2
 800cc00:	4093      	lsls	r3, r2
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d132      	bne.n	800cc6e <HAL_GPIO_DeInit+0x10e>
 800cc08:	4b46      	ldr	r3, [pc, #280]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	43db      	mvns	r3, r3
 800cc10:	4944      	ldr	r1, [pc, #272]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc12:	4013      	ands	r3, r2
 800cc14:	600b      	str	r3, [r1, #0]
 800cc16:	4b43      	ldr	r3, [pc, #268]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc18:	685a      	ldr	r2, [r3, #4]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	43db      	mvns	r3, r3
 800cc1e:	4941      	ldr	r1, [pc, #260]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc20:	4013      	ands	r3, r2
 800cc22:	604b      	str	r3, [r1, #4]
 800cc24:	4b3f      	ldr	r3, [pc, #252]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	43db      	mvns	r3, r3
 800cc2c:	493d      	ldr	r1, [pc, #244]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc2e:	4013      	ands	r3, r2
 800cc30:	60cb      	str	r3, [r1, #12]
 800cc32:	4b3c      	ldr	r3, [pc, #240]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc34:	689a      	ldr	r2, [r3, #8]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	43db      	mvns	r3, r3
 800cc3a:	493a      	ldr	r1, [pc, #232]	@ (800cd24 <HAL_GPIO_DeInit+0x1c4>)
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	608b      	str	r3, [r1, #8]
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f003 0303 	and.w	r3, r3, #3
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	220f      	movs	r2, #15
 800cc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4e:	60bb      	str	r3, [r7, #8]
 800cc50:	4a2e      	ldr	r2, [pc, #184]	@ (800cd0c <HAL_GPIO_DeInit+0x1ac>)
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	089b      	lsrs	r3, r3, #2
 800cc56:	3302      	adds	r3, #2
 800cc58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	43da      	mvns	r2, r3
 800cc60:	482a      	ldr	r0, [pc, #168]	@ (800cd0c <HAL_GPIO_DeInit+0x1ac>)
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	089b      	lsrs	r3, r3, #2
 800cc66:	400a      	ands	r2, r1
 800cc68:	3302      	adds	r3, #2
 800cc6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	2103      	movs	r1, #3
 800cc78:	fa01 f303 	lsl.w	r3, r1, r3
 800cc7c:	43db      	mvns	r3, r3
 800cc7e:	401a      	ands	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	08da      	lsrs	r2, r3, #3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3208      	adds	r2, #8
 800cc8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	f003 0307 	and.w	r3, r3, #7
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	220f      	movs	r2, #15
 800cc9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc9e:	43db      	mvns	r3, r3
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	08d2      	lsrs	r2, r2, #3
 800cca4:	4019      	ands	r1, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	3208      	adds	r2, #8
 800ccaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68da      	ldr	r2, [r3, #12]
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	2103      	movs	r1, #3
 800ccb8:	fa01 f303 	lsl.w	r3, r1, r3
 800ccbc:	43db      	mvns	r3, r3
 800ccbe:	401a      	ands	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	60da      	str	r2, [r3, #12]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	2101      	movs	r1, #1
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	fa01 f303 	lsl.w	r3, r1, r3
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	401a      	ands	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	605a      	str	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	2103      	movs	r1, #3
 800cce2:	fa01 f303 	lsl.w	r3, r1, r3
 800cce6:	43db      	mvns	r3, r3
 800cce8:	401a      	ands	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	609a      	str	r2, [r3, #8]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b0f      	cmp	r3, #15
 800ccf8:	f67f af40 	bls.w	800cb7c <HAL_GPIO_DeInit+0x1c>
 800ccfc:	bf00      	nop
 800ccfe:	bf00      	nop
 800cd00:	371c      	adds	r7, #28
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	40013800 	.word	0x40013800
 800cd10:	40020000 	.word	0x40020000
 800cd14:	40020400 	.word	0x40020400
 800cd18:	40020800 	.word	0x40020800
 800cd1c:	40020c00 	.word	0x40020c00
 800cd20:	40021000 	.word	0x40021000
 800cd24:	40013c00 	.word	0x40013c00

0800cd28 <HAL_GPIO_ReadPin>:
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	460b      	mov	r3, r1
 800cd32:	807b      	strh	r3, [r7, #2]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	691a      	ldr	r2, [r3, #16]
 800cd38:	887b      	ldrh	r3, [r7, #2]
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <HAL_GPIO_ReadPin+0x1e>
 800cd40:	2301      	movs	r3, #1
 800cd42:	73fb      	strb	r3, [r7, #15]
 800cd44:	e001      	b.n	800cd4a <HAL_GPIO_ReadPin+0x22>
 800cd46:	2300      	movs	r3, #0
 800cd48:	73fb      	strb	r3, [r7, #15]
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <HAL_GPIO_WritePin>:
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	807b      	strh	r3, [r7, #2]
 800cd64:	4613      	mov	r3, r2
 800cd66:	707b      	strb	r3, [r7, #1]
 800cd68:	787b      	ldrb	r3, [r7, #1]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <HAL_GPIO_WritePin+0x1e>
 800cd6e:	887a      	ldrh	r2, [r7, #2]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	619a      	str	r2, [r3, #24]
 800cd74:	e003      	b.n	800cd7e <HAL_GPIO_WritePin+0x26>
 800cd76:	887b      	ldrh	r3, [r7, #2]
 800cd78:	041a      	lsls	r2, r3, #16
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	619a      	str	r2, [r3, #24]
 800cd7e:	bf00      	nop
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <HAL_GPIO_TogglePin>:
 800cd8a:	b480      	push	{r7}
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	460b      	mov	r3, r1
 800cd94:	807b      	strh	r3, [r7, #2]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	887a      	ldrh	r2, [r7, #2]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	4013      	ands	r3, r2
 800cda2:	041a      	lsls	r2, r3, #16
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	43d9      	mvns	r1, r3
 800cda8:	887b      	ldrh	r3, [r7, #2]
 800cdaa:	400b      	ands	r3, r1
 800cdac:	431a      	orrs	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	619a      	str	r2, [r3, #24]
 800cdb2:	bf00      	nop
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <HAL_I2C_Init>:
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d101      	bne.n	800cdd2 <HAL_I2C_Init+0x12>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e12b      	b.n	800d02a <HAL_I2C_Init+0x26a>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <HAL_I2C_Init+0x2c>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f95d 	bl	800d0a6 <HAL_I2C_MspInit>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2224      	movs	r2, #36	@ 0x24
 800cdf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 0201 	bic.w	r2, r2, #1
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f002 f93e 	bl	800f0a4 <HAL_RCC_GetPCLK1Freq>
 800ce28:	60f8      	str	r0, [r7, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4a81      	ldr	r2, [pc, #516]	@ (800d034 <HAL_I2C_Init+0x274>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d807      	bhi.n	800ce44 <HAL_I2C_Init+0x84>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	4a80      	ldr	r2, [pc, #512]	@ (800d038 <HAL_I2C_Init+0x278>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	bf94      	ite	ls
 800ce3c:	2301      	movls	r3, #1
 800ce3e:	2300      	movhi	r3, #0
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	e006      	b.n	800ce52 <HAL_I2C_Init+0x92>
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	4a7d      	ldr	r2, [pc, #500]	@ (800d03c <HAL_I2C_Init+0x27c>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	bf94      	ite	ls
 800ce4c:	2301      	movls	r3, #1
 800ce4e:	2300      	movhi	r3, #0
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <HAL_I2C_Init+0x9a>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e0e7      	b.n	800d02a <HAL_I2C_Init+0x26a>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4a78      	ldr	r2, [pc, #480]	@ (800d040 <HAL_I2C_Init+0x280>)
 800ce5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce62:	0c9b      	lsrs	r3, r3, #18
 800ce64:	60bb      	str	r3, [r7, #8]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	4a6a      	ldr	r2, [pc, #424]	@ (800d034 <HAL_I2C_Init+0x274>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d802      	bhi.n	800ce94 <HAL_I2C_Init+0xd4>
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	3301      	adds	r3, #1
 800ce92:	e009      	b.n	800cea8 <HAL_I2C_Init+0xe8>
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	4a69      	ldr	r2, [pc, #420]	@ (800d044 <HAL_I2C_Init+0x284>)
 800cea0:	fba2 2303 	umull	r2, r3, r2, r3
 800cea4:	099b      	lsrs	r3, r3, #6
 800cea6:	3301      	adds	r3, #1
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	6812      	ldr	r2, [r2, #0]
 800ceac:	430b      	orrs	r3, r1
 800ceae:	6213      	str	r3, [r2, #32]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800ceba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	495c      	ldr	r1, [pc, #368]	@ (800d034 <HAL_I2C_Init+0x274>)
 800cec4:	428b      	cmp	r3, r1
 800cec6:	d819      	bhi.n	800cefc <HAL_I2C_Init+0x13c>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	1e59      	subs	r1, r3, #1
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	005b      	lsls	r3, r3, #1
 800ced2:	fbb1 f3f3 	udiv	r3, r1, r3
 800ced6:	1c59      	adds	r1, r3, #1
 800ced8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cedc:	400b      	ands	r3, r1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <HAL_I2C_Init+0x138>
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	1e59      	subs	r1, r3, #1
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	fbb1 f3f3 	udiv	r3, r1, r3
 800cef0:	3301      	adds	r3, #1
 800cef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cef6:	e051      	b.n	800cf9c <HAL_I2C_Init+0x1dc>
 800cef8:	2304      	movs	r3, #4
 800cefa:	e04f      	b.n	800cf9c <HAL_I2C_Init+0x1dc>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d111      	bne.n	800cf28 <HAL_I2C_Init+0x168>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	1e58      	subs	r0, r3, #1
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6859      	ldr	r1, [r3, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	440b      	add	r3, r1
 800cf12:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf16:	3301      	adds	r3, #1
 800cf18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	bf0c      	ite	eq
 800cf20:	2301      	moveq	r3, #1
 800cf22:	2300      	movne	r3, #0
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	e012      	b.n	800cf4e <HAL_I2C_Init+0x18e>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	1e58      	subs	r0, r3, #1
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6859      	ldr	r1, [r3, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	440b      	add	r3, r1
 800cf36:	0099      	lsls	r1, r3, #2
 800cf38:	440b      	add	r3, r1
 800cf3a:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bf0c      	ite	eq
 800cf48:	2301      	moveq	r3, #1
 800cf4a:	2300      	movne	r3, #0
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <HAL_I2C_Init+0x196>
 800cf52:	2301      	movs	r3, #1
 800cf54:	e022      	b.n	800cf9c <HAL_I2C_Init+0x1dc>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10e      	bne.n	800cf7c <HAL_I2C_Init+0x1bc>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	1e58      	subs	r0, r3, #1
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6859      	ldr	r1, [r3, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	440b      	add	r3, r1
 800cf6c:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf70:	3301      	adds	r3, #1
 800cf72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf7a:	e00f      	b.n	800cf9c <HAL_I2C_Init+0x1dc>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	1e58      	subs	r0, r3, #1
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6859      	ldr	r1, [r3, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	440b      	add	r3, r1
 800cf8a:	0099      	lsls	r1, r3, #2
 800cf8c:	440b      	add	r3, r1
 800cf8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf92:	3301      	adds	r3, #1
 800cf94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	6809      	ldr	r1, [r1, #0]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	61cb      	str	r3, [r1, #28]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	69da      	ldr	r2, [r3, #28]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	431a      	orrs	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800cfca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	6911      	ldr	r1, [r2, #16]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	68d2      	ldr	r2, [r2, #12]
 800cfd6:	4311      	orrs	r1, r2
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6812      	ldr	r2, [r2, #0]
 800cfdc:	430b      	orrs	r3, r1
 800cfde:	6093      	str	r3, [r2, #8]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	695a      	ldr	r2, [r3, #20]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	60da      	str	r2, [r3, #12]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0201 	orr.w	r2, r2, #1
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	641a      	str	r2, [r3, #64]	@ 0x40
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2220      	movs	r2, #32
 800d016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d028:	2300      	movs	r3, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	000186a0 	.word	0x000186a0
 800d038:	001e847f 	.word	0x001e847f
 800d03c:	003d08ff 	.word	0x003d08ff
 800d040:	431bde83 	.word	0x431bde83
 800d044:	10624dd3 	.word	0x10624dd3

0800d048 <HAL_I2C_DeInit>:
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <HAL_I2C_DeInit+0x12>
 800d056:	2301      	movs	r3, #1
 800d058:	e021      	b.n	800d09e <HAL_I2C_DeInit+0x56>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2224      	movs	r2, #36	@ 0x24
 800d05e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f022 0201 	bic.w	r2, r2, #1
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f821 	bl	800d0ba <HAL_I2C_MspDeInit>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	641a      	str	r2, [r3, #64]	@ 0x40
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d09c:	2300      	movs	r3, #0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <HAL_I2C_MspInit>:
 800d0a6:	b480      	push	{r7}
 800d0a8:	b083      	sub	sp, #12
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	bf00      	nop
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <HAL_I2C_MspDeInit>:
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
	...

0800d0d0 <HAL_I2C_Master_Transmit>:
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b088      	sub	sp, #32
 800d0d4:	af02      	add	r7, sp, #8
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	607a      	str	r2, [r7, #4]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	460b      	mov	r3, r1
 800d0de:	817b      	strh	r3, [r7, #10]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	813b      	strh	r3, [r7, #8]
 800d0e4:	f7ff fa48 	bl	800c578 <HAL_GetTick>
 800d0e8:	6178      	str	r0, [r7, #20]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b20      	cmp	r3, #32
 800d0f4:	f040 80e0 	bne.w	800d2b8 <HAL_I2C_Master_Transmit+0x1e8>
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	2319      	movs	r3, #25
 800d0fe:	2201      	movs	r2, #1
 800d100:	4970      	ldr	r1, [pc, #448]	@ (800d2c4 <HAL_I2C_Master_Transmit+0x1f4>)
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f001 f928 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d001      	beq.n	800d112 <HAL_I2C_Master_Transmit+0x42>
 800d10e:	2302      	movs	r3, #2
 800d110:	e0d3      	b.n	800d2ba <HAL_I2C_Master_Transmit+0x1ea>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d101      	bne.n	800d120 <HAL_I2C_Master_Transmit+0x50>
 800d11c:	2302      	movs	r3, #2
 800d11e:	e0cc      	b.n	800d2ba <HAL_I2C_Master_Transmit+0x1ea>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b01      	cmp	r3, #1
 800d134:	d007      	beq.n	800d146 <HAL_I2C_Master_Transmit+0x76>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f042 0201 	orr.w	r2, r2, #1
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2221      	movs	r2, #33	@ 0x21
 800d15a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2210      	movs	r2, #16
 800d162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	641a      	str	r2, [r3, #64]	@ 0x40
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	625a      	str	r2, [r3, #36]	@ 0x24
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	893a      	ldrh	r2, [r7, #8]
 800d176:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	4a50      	ldr	r2, [pc, #320]	@ (800d2c8 <HAL_I2C_Master_Transmit+0x1f8>)
 800d186:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d188:	8979      	ldrh	r1, [r7, #10]
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	6a3a      	ldr	r2, [r7, #32]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f000 fe14 	bl	800ddbc <I2C_MasterRequestWrite>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <HAL_I2C_Master_Transmit+0xce>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e08d      	b.n	800d2ba <HAL_I2C_Master_Transmit+0x1ea>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	613b      	str	r3, [r7, #16]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	695b      	ldr	r3, [r3, #20]
 800d1a8:	613b      	str	r3, [r7, #16]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	613b      	str	r3, [r7, #16]
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	e066      	b.n	800d284 <HAL_I2C_Master_Transmit+0x1b4>
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	6a39      	ldr	r1, [r7, #32]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f001 f9e6 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00d      	beq.n	800d1e2 <HAL_I2C_Master_Transmit+0x112>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ca:	2b04      	cmp	r3, #4
 800d1cc:	d107      	bne.n	800d1de <HAL_I2C_Master_Transmit+0x10e>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e06b      	b.n	800d2ba <HAL_I2C_Master_Transmit+0x1ea>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e6:	781a      	ldrb	r2, [r3, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	611a      	str	r2, [r3, #16]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	625a      	str	r2, [r3, #36]	@ 0x24
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	3b01      	subs	r3, #1
 800d200:	b29a      	uxth	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	f003 0304 	and.w	r3, r3, #4
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	d11b      	bne.n	800d258 <HAL_I2C_Master_Transmit+0x188>
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d224:	2b00      	cmp	r3, #0
 800d226:	d017      	beq.n	800d258 <HAL_I2C_Master_Transmit+0x188>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22c:	781a      	ldrb	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	611a      	str	r2, [r3, #16]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d242:	b29b      	uxth	r3, r3
 800d244:	3b01      	subs	r3, #1
 800d246:	b29a      	uxth	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d250:	3b01      	subs	r3, #1
 800d252:	b29a      	uxth	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	6a39      	ldr	r1, [r7, #32]
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f001 f9dd 	bl	800e61c <I2C_WaitOnBTFFlagUntilTimeout>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00d      	beq.n	800d284 <HAL_I2C_Master_Transmit+0x1b4>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26c:	2b04      	cmp	r3, #4
 800d26e:	d107      	bne.n	800d280 <HAL_I2C_Master_Transmit+0x1b0>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d27e:	601a      	str	r2, [r3, #0]
 800d280:	2301      	movs	r3, #1
 800d282:	e01a      	b.n	800d2ba <HAL_I2C_Master_Transmit+0x1ea>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d194      	bne.n	800d1b6 <HAL_I2C_Master_Transmit+0xe6>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2220      	movs	r2, #32
 800d2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	e000      	b.n	800d2ba <HAL_I2C_Master_Transmit+0x1ea>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	00100002 	.word	0x00100002
 800d2c8:	ffff0000 	.word	0xffff0000

0800d2cc <HAL_I2C_Master_Receive>:
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08c      	sub	sp, #48	@ 0x30
 800d2d0:	af02      	add	r7, sp, #8
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	607a      	str	r2, [r7, #4]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	460b      	mov	r3, r1
 800d2da:	817b      	strh	r3, [r7, #10]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	813b      	strh	r3, [r7, #8]
 800d2e0:	f7ff f94a 	bl	800c578 <HAL_GetTick>
 800d2e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b20      	cmp	r3, #32
 800d2f0:	f040 8217 	bne.w	800d722 <HAL_I2C_Master_Receive+0x456>
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	2319      	movs	r3, #25
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	497c      	ldr	r1, [pc, #496]	@ (800d4f0 <HAL_I2C_Master_Receive+0x224>)
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f001 f82a 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <HAL_I2C_Master_Receive+0x42>
 800d30a:	2302      	movs	r3, #2
 800d30c:	e20a      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d314:	2b01      	cmp	r3, #1
 800d316:	d101      	bne.n	800d31c <HAL_I2C_Master_Receive+0x50>
 800d318:	2302      	movs	r3, #2
 800d31a:	e203      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d007      	beq.n	800d342 <HAL_I2C_Master_Receive+0x76>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f042 0201 	orr.w	r2, r2, #1
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2222      	movs	r2, #34	@ 0x22
 800d356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2210      	movs	r2, #16
 800d35e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	641a      	str	r2, [r3, #64]	@ 0x40
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	893a      	ldrh	r2, [r7, #8]
 800d372:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d378:	b29a      	uxth	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	4a5c      	ldr	r2, [pc, #368]	@ (800d4f4 <HAL_I2C_Master_Receive+0x228>)
 800d382:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d384:	8979      	ldrh	r1, [r7, #10]
 800d386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 fd98 	bl	800dec0 <I2C_MasterRequestRead>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <HAL_I2C_Master_Receive+0xce>
 800d396:	2301      	movs	r3, #1
 800d398:	e1c4      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d113      	bne.n	800d3ca <HAL_I2C_Master_Receive+0xfe>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	623b      	str	r3, [r7, #32]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	623b      	str	r3, [r7, #32]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	623b      	str	r3, [r7, #32]
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3c6:	601a      	str	r2, [r3, #0]
 800d3c8:	e198      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d11b      	bne.n	800d40a <HAL_I2C_Master_Receive+0x13e>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	61fb      	str	r3, [r7, #28]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	61fb      	str	r3, [r7, #28]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	61fb      	str	r3, [r7, #28]
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d406:	601a      	str	r2, [r3, #0]
 800d408:	e178      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d11b      	bne.n	800d44a <HAL_I2C_Master_Receive+0x17e>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	2300      	movs	r3, #0
 800d434:	61bb      	str	r3, [r7, #24]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	695b      	ldr	r3, [r3, #20]
 800d43c:	61bb      	str	r3, [r7, #24]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	61bb      	str	r3, [r7, #24]
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	e158      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	695b      	ldr	r3, [r3, #20]
 800d464:	617b      	str	r3, [r7, #20]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	e144      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d476:	2b03      	cmp	r3, #3
 800d478:	f200 80f1 	bhi.w	800d65e <HAL_I2C_Master_Receive+0x392>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d480:	2b01      	cmp	r3, #1
 800d482:	d123      	bne.n	800d4cc <HAL_I2C_Master_Receive+0x200>
 800d484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d486:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f001 f90f 	bl	800e6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <HAL_I2C_Master_Receive+0x1cc>
 800d494:	2301      	movs	r3, #1
 800d496:	e145      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a2:	b2d2      	uxtb	r2, r2
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	625a      	str	r2, [r3, #36]	@ 0x24
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d4ca:	e117      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d14e      	bne.n	800d572 <HAL_I2C_Master_Receive+0x2a6>
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	2200      	movs	r2, #0
 800d4dc:	4906      	ldr	r1, [pc, #24]	@ (800d4f8 <HAL_I2C_Master_Receive+0x22c>)
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 ff3a 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d008      	beq.n	800d4fc <HAL_I2C_Master_Receive+0x230>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e11a      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d4ee:	bf00      	nop
 800d4f0:	00100002 	.word	0x00100002
 800d4f4:	ffff0000 	.word	0xffff0000
 800d4f8:	00010004 	.word	0x00010004
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	691a      	ldr	r2, [r3, #16]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d516:	b2d2      	uxtb	r2, r2
 800d518:	701a      	strb	r2, [r3, #0]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	625a      	str	r2, [r3, #36]	@ 0x24
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d534:	b29b      	uxth	r3, r3
 800d536:	3b01      	subs	r3, #1
 800d538:	b29a      	uxth	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	691a      	ldr	r2, [r3, #16]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	625a      	str	r2, [r3, #36]	@ 0x24
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d55a:	3b01      	subs	r3, #1
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d566:	b29b      	uxth	r3, r3
 800d568:	3b01      	subs	r3, #1
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d570:	e0c4      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d578:	2200      	movs	r2, #0
 800d57a:	496c      	ldr	r1, [pc, #432]	@ (800d72c <HAL_I2C_Master_Receive+0x460>)
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 feeb 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <HAL_I2C_Master_Receive+0x2c0>
 800d588:	2301      	movs	r3, #1
 800d58a:	e0cb      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	691a      	ldr	r2, [r3, #16]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a6:	b2d2      	uxtb	r2, r2
 800d5a8:	701a      	strb	r2, [r3, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	4955      	ldr	r1, [pc, #340]	@ (800d72c <HAL_I2C_Master_Receive+0x460>)
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f000 febd 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d001      	beq.n	800d5e8 <HAL_I2C_Master_Receive+0x31c>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e09d      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	691a      	ldr	r2, [r3, #16]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d614:	3b01      	subs	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d620:	b29b      	uxth	r3, r3
 800d622:	3b01      	subs	r3, #1
 800d624:	b29a      	uxth	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	691a      	ldr	r2, [r3, #16]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d634:	b2d2      	uxtb	r2, r2
 800d636:	701a      	strb	r2, [r3, #0]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d63c:	1c5a      	adds	r2, r3, #1
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	625a      	str	r2, [r3, #36]	@ 0x24
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d646:	3b01      	subs	r3, #1
 800d648:	b29a      	uxth	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d652:	b29b      	uxth	r3, r3
 800d654:	3b01      	subs	r3, #1
 800d656:	b29a      	uxth	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d65c:	e04e      	b.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d660:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f001 f822 	bl	800e6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d001      	beq.n	800d672 <HAL_I2C_Master_Receive+0x3a6>
 800d66e:	2301      	movs	r3, #1
 800d670:	e058      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	691a      	ldr	r2, [r3, #16]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d67c:	b2d2      	uxtb	r2, r2
 800d67e:	701a      	strb	r2, [r3, #0]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	625a      	str	r2, [r3, #36]	@ 0x24
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d68e:	3b01      	subs	r3, #1
 800d690:	b29a      	uxth	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	3b01      	subs	r3, #1
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	f003 0304 	and.w	r3, r3, #4
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d124      	bne.n	800d6fc <HAL_I2C_Master_Receive+0x430>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	d107      	bne.n	800d6ca <HAL_I2C_Master_Receive+0x3fe>
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	691a      	ldr	r2, [r3, #16]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d4:	b2d2      	uxtb	r2, r2
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	625a      	str	r2, [r3, #36]	@ 0x24
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d700:	2b00      	cmp	r3, #0
 800d702:	f47f aeb6 	bne.w	800d472 <HAL_I2C_Master_Receive+0x1a6>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2220      	movs	r2, #32
 800d70a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d71e:	2300      	movs	r3, #0
 800d720:	e000      	b.n	800d724 <HAL_I2C_Master_Receive+0x458>
 800d722:	2302      	movs	r3, #2
 800d724:	4618      	mov	r0, r3
 800d726:	3728      	adds	r7, #40	@ 0x28
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	00010004 	.word	0x00010004

0800d730 <HAL_I2C_Mem_Write>:
 800d730:	b580      	push	{r7, lr}
 800d732:	b088      	sub	sp, #32
 800d734:	af02      	add	r7, sp, #8
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	4608      	mov	r0, r1
 800d73a:	4611      	mov	r1, r2
 800d73c:	461a      	mov	r2, r3
 800d73e:	4603      	mov	r3, r0
 800d740:	817b      	strh	r3, [r7, #10]
 800d742:	460b      	mov	r3, r1
 800d744:	813b      	strh	r3, [r7, #8]
 800d746:	4613      	mov	r3, r2
 800d748:	80fb      	strh	r3, [r7, #6]
 800d74a:	f7fe ff15 	bl	800c578 <HAL_GetTick>
 800d74e:	6178      	str	r0, [r7, #20]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b20      	cmp	r3, #32
 800d75a:	f040 80d9 	bne.w	800d910 <HAL_I2C_Mem_Write+0x1e0>
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	2319      	movs	r3, #25
 800d764:	2201      	movs	r2, #1
 800d766:	496d      	ldr	r1, [pc, #436]	@ (800d91c <HAL_I2C_Mem_Write+0x1ec>)
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 fdf5 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <HAL_I2C_Mem_Write+0x48>
 800d774:	2302      	movs	r3, #2
 800d776:	e0cc      	b.n	800d912 <HAL_I2C_Mem_Write+0x1e2>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <HAL_I2C_Mem_Write+0x56>
 800d782:	2302      	movs	r3, #2
 800d784:	e0c5      	b.n	800d912 <HAL_I2C_Mem_Write+0x1e2>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d007      	beq.n	800d7ac <HAL_I2C_Mem_Write+0x7c>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f042 0201 	orr.w	r2, r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d7ba:	601a      	str	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2221      	movs	r2, #33	@ 0x21
 800d7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2240      	movs	r2, #64	@ 0x40
 800d7c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6a3a      	ldr	r2, [r7, #32]
 800d7d6:	625a      	str	r2, [r3, #36]	@ 0x24
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	4a4d      	ldr	r2, [pc, #308]	@ (800d920 <HAL_I2C_Mem_Write+0x1f0>)
 800d7ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d7ee:	88f8      	ldrh	r0, [r7, #6]
 800d7f0:	893a      	ldrh	r2, [r7, #8]
 800d7f2:	8979      	ldrh	r1, [r7, #10]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 fc2c 	bl	800e05c <I2C_RequestMemoryWrite>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d052      	beq.n	800d8b0 <HAL_I2C_Mem_Write+0x180>
 800d80a:	2301      	movs	r3, #1
 800d80c:	e081      	b.n	800d912 <HAL_I2C_Mem_Write+0x1e2>
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f000 feba 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00d      	beq.n	800d83a <HAL_I2C_Mem_Write+0x10a>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d822:	2b04      	cmp	r3, #4
 800d824:	d107      	bne.n	800d836 <HAL_I2C_Mem_Write+0x106>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	2301      	movs	r3, #1
 800d838:	e06b      	b.n	800d912 <HAL_I2C_Mem_Write+0x1e2>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83e:	781a      	ldrb	r2, [r3, #0]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	611a      	str	r2, [r3, #16]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d84a:	1c5a      	adds	r2, r3, #1
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d854:	3b01      	subs	r3, #1
 800d856:	b29a      	uxth	r2, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d860:	b29b      	uxth	r3, r3
 800d862:	3b01      	subs	r3, #1
 800d864:	b29a      	uxth	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	695b      	ldr	r3, [r3, #20]
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b04      	cmp	r3, #4
 800d876:	d11b      	bne.n	800d8b0 <HAL_I2C_Mem_Write+0x180>
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d017      	beq.n	800d8b0 <HAL_I2C_Mem_Write+0x180>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d884:	781a      	ldrb	r2, [r3, #0]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	611a      	str	r2, [r3, #16]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	625a      	str	r2, [r3, #36]	@ 0x24
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d89a:	3b01      	subs	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1aa      	bne.n	800d80e <HAL_I2C_Mem_Write+0xde>
 800d8b8:	697a      	ldr	r2, [r7, #20]
 800d8ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 fead 	bl	800e61c <I2C_WaitOnBTFFlagUntilTimeout>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00d      	beq.n	800d8e4 <HAL_I2C_Mem_Write+0x1b4>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	d107      	bne.n	800d8e0 <HAL_I2C_Mem_Write+0x1b0>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e016      	b.n	800d912 <HAL_I2C_Mem_Write+0x1e2>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d90c:	2300      	movs	r3, #0
 800d90e:	e000      	b.n	800d912 <HAL_I2C_Mem_Write+0x1e2>
 800d910:	2302      	movs	r3, #2
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	00100002 	.word	0x00100002
 800d920:	ffff0000 	.word	0xffff0000

0800d924 <HAL_I2C_Mem_Read>:
 800d924:	b580      	push	{r7, lr}
 800d926:	b08c      	sub	sp, #48	@ 0x30
 800d928:	af02      	add	r7, sp, #8
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	4608      	mov	r0, r1
 800d92e:	4611      	mov	r1, r2
 800d930:	461a      	mov	r2, r3
 800d932:	4603      	mov	r3, r0
 800d934:	817b      	strh	r3, [r7, #10]
 800d936:	460b      	mov	r3, r1
 800d938:	813b      	strh	r3, [r7, #8]
 800d93a:	4613      	mov	r3, r2
 800d93c:	80fb      	strh	r3, [r7, #6]
 800d93e:	f7fe fe1b 	bl	800c578 <HAL_GetTick>
 800d942:	6278      	str	r0, [r7, #36]	@ 0x24
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	f040 8214 	bne.w	800dd7a <HAL_I2C_Mem_Read+0x456>
 800d952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	2319      	movs	r3, #25
 800d958:	2201      	movs	r2, #1
 800d95a:	497b      	ldr	r1, [pc, #492]	@ (800db48 <HAL_I2C_Mem_Read+0x224>)
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f000 fcfb 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <HAL_I2C_Mem_Read+0x48>
 800d968:	2302      	movs	r3, #2
 800d96a:	e207      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d972:	2b01      	cmp	r3, #1
 800d974:	d101      	bne.n	800d97a <HAL_I2C_Mem_Read+0x56>
 800d976:	2302      	movs	r3, #2
 800d978:	e200      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d007      	beq.n	800d9a0 <HAL_I2C_Mem_Read+0x7c>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f042 0201 	orr.w	r2, r2, #1
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2222      	movs	r2, #34	@ 0x22
 800d9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2240      	movs	r2, #64	@ 0x40
 800d9bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	641a      	str	r2, [r3, #64]	@ 0x40
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ca:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d9d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4a5b      	ldr	r2, [pc, #364]	@ (800db4c <HAL_I2C_Mem_Read+0x228>)
 800d9e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d9e2:	88f8      	ldrh	r0, [r7, #6]
 800d9e4:	893a      	ldrh	r2, [r7, #8]
 800d9e6:	8979      	ldrh	r1, [r7, #10]
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 fbc8 	bl	800e188 <I2C_RequestMemoryRead>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <HAL_I2C_Mem_Read+0xde>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e1bc      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da06:	2b00      	cmp	r3, #0
 800da08:	d113      	bne.n	800da32 <HAL_I2C_Mem_Read+0x10e>
 800da0a:	2300      	movs	r3, #0
 800da0c:	623b      	str	r3, [r7, #32]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	623b      	str	r3, [r7, #32]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	623b      	str	r3, [r7, #32]
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	e190      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da36:	2b01      	cmp	r3, #1
 800da38:	d11b      	bne.n	800da72 <HAL_I2C_Mem_Read+0x14e>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	2300      	movs	r3, #0
 800da4c:	61fb      	str	r3, [r7, #28]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	695b      	ldr	r3, [r3, #20]
 800da54:	61fb      	str	r3, [r7, #28]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	61fb      	str	r3, [r7, #28]
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	e170      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da76:	2b02      	cmp	r3, #2
 800da78:	d11b      	bne.n	800dab2 <HAL_I2C_Mem_Read+0x18e>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	2300      	movs	r3, #0
 800da9c:	61bb      	str	r3, [r7, #24]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	61bb      	str	r3, [r7, #24]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	61bb      	str	r3, [r7, #24]
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	e150      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	695b      	ldr	r3, [r3, #20]
 800dabc:	617b      	str	r3, [r7, #20]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	617b      	str	r3, [r7, #20]
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	e144      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dace:	2b03      	cmp	r3, #3
 800dad0:	f200 80f1 	bhi.w	800dcb6 <HAL_I2C_Mem_Read+0x392>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d123      	bne.n	800db24 <HAL_I2C_Mem_Read+0x200>
 800dadc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dade:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 fde3 	bl	800e6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <HAL_I2C_Mem_Read+0x1cc>
 800daec:	2301      	movs	r3, #1
 800daee:	e145      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	691a      	ldr	r2, [r3, #16]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dafa:	b2d2      	uxtb	r2, r2
 800dafc:	701a      	strb	r2, [r3, #0]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	625a      	str	r2, [r3, #36]	@ 0x24
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db0c:	3b01      	subs	r3, #1
 800db0e:	b29a      	uxth	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	851a      	strh	r2, [r3, #40]	@ 0x28
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db18:	b29b      	uxth	r3, r3
 800db1a:	3b01      	subs	r3, #1
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db22:	e117      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d14e      	bne.n	800dbca <HAL_I2C_Mem_Read+0x2a6>
 800db2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db32:	2200      	movs	r2, #0
 800db34:	4906      	ldr	r1, [pc, #24]	@ (800db50 <HAL_I2C_Mem_Read+0x22c>)
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f000 fc0e 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d008      	beq.n	800db54 <HAL_I2C_Mem_Read+0x230>
 800db42:	2301      	movs	r3, #1
 800db44:	e11a      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800db46:	bf00      	nop
 800db48:	00100002 	.word	0x00100002
 800db4c:	ffff0000 	.word	0xffff0000
 800db50:	00010004 	.word	0x00010004
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db62:	601a      	str	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	691a      	ldr	r2, [r3, #16]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6e:	b2d2      	uxtb	r2, r2
 800db70:	701a      	strb	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	625a      	str	r2, [r3, #36]	@ 0x24
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db80:	3b01      	subs	r3, #1
 800db82:	b29a      	uxth	r2, r3
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	851a      	strh	r2, [r3, #40]	@ 0x28
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	3b01      	subs	r3, #1
 800db90:	b29a      	uxth	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	691a      	ldr	r2, [r3, #16]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba0:	b2d2      	uxtb	r2, r2
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	625a      	str	r2, [r3, #36]	@ 0x24
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dbc8:	e0c4      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800dbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	496c      	ldr	r1, [pc, #432]	@ (800dd84 <HAL_I2C_Mem_Read+0x460>)
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 fbbf 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <HAL_I2C_Mem_Read+0x2c0>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e0cb      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	691a      	ldr	r2, [r3, #16]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfe:	b2d2      	uxtb	r2, r2
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc06:	1c5a      	adds	r2, r3, #1
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc10:	3b01      	subs	r3, #1
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4955      	ldr	r1, [pc, #340]	@ (800dd84 <HAL_I2C_Mem_Read+0x460>)
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f000 fb91 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <HAL_I2C_Mem_Read+0x31c>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e09d      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	691a      	ldr	r2, [r3, #16]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc5a:	b2d2      	uxtb	r2, r2
 800dc5c:	701a      	strb	r2, [r3, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	691a      	ldr	r2, [r3, #16]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc8c:	b2d2      	uxtb	r2, r2
 800dc8e:	701a      	strb	r2, [r3, #0]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	3b01      	subs	r3, #1
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcb4:	e04e      	b.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800dcb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f000 fcf6 	bl	800e6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <HAL_I2C_Mem_Read+0x3a6>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e058      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	691a      	ldr	r2, [r3, #16]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd4:	b2d2      	uxtb	r2, r2
 800dcd6:	701a      	strb	r2, [r3, #0]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	625a      	str	r2, [r3, #36]	@ 0x24
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dce6:	3b01      	subs	r3, #1
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	f003 0304 	and.w	r3, r3, #4
 800dd06:	2b04      	cmp	r3, #4
 800dd08:	d124      	bne.n	800dd54 <HAL_I2C_Mem_Read+0x430>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d107      	bne.n	800dd22 <HAL_I2C_Mem_Read+0x3fe>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	691a      	ldr	r2, [r3, #16]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd2c:	b2d2      	uxtb	r2, r2
 800dd2e:	701a      	strb	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	625a      	str	r2, [r3, #36]	@ 0x24
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f47f aeb6 	bne.w	800daca <HAL_I2C_Mem_Read+0x1a6>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2220      	movs	r2, #32
 800dd62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2200      	movs	r2, #0
 800dd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800dd76:	2300      	movs	r3, #0
 800dd78:	e000      	b.n	800dd7c <HAL_I2C_Mem_Read+0x458>
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3728      	adds	r7, #40	@ 0x28
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	00010004 	.word	0x00010004

0800dd88 <HAL_I2C_GetState>:
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	4618      	mov	r0, r3
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <HAL_I2C_GetError>:
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <I2C_MasterRequestWrite>:
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	607a      	str	r2, [r7, #4]
 800ddc6:	603b      	str	r3, [r7, #0]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	817b      	strh	r3, [r7, #10]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b08      	cmp	r3, #8
 800ddd6:	d006      	beq.n	800dde6 <I2C_MasterRequestWrite+0x2a>
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d003      	beq.n	800dde6 <I2C_MasterRequestWrite+0x2a>
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dde4:	d108      	bne.n	800ddf8 <I2C_MasterRequestWrite+0x3c>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	e00b      	b.n	800de10 <I2C_MasterRequestWrite+0x54>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfc:	2b12      	cmp	r3, #18
 800ddfe:	d107      	bne.n	800de10 <I2C_MasterRequestWrite+0x54>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f000 fa9b 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00d      	beq.n	800de44 <I2C_MasterRequestWrite+0x88>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de36:	d103      	bne.n	800de40 <I2C_MasterRequestWrite+0x84>
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de3e:	641a      	str	r2, [r3, #64]	@ 0x40
 800de40:	2303      	movs	r3, #3
 800de42:	e035      	b.n	800deb0 <I2C_MasterRequestWrite+0xf4>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de4c:	d108      	bne.n	800de60 <I2C_MasterRequestWrite+0xa4>
 800de4e:	897b      	ldrh	r3, [r7, #10]
 800de50:	b2db      	uxtb	r3, r3
 800de52:	461a      	mov	r2, r3
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800de5c:	611a      	str	r2, [r3, #16]
 800de5e:	e01b      	b.n	800de98 <I2C_MasterRequestWrite+0xdc>
 800de60:	897b      	ldrh	r3, [r7, #10]
 800de62:	11db      	asrs	r3, r3, #7
 800de64:	b2db      	uxtb	r3, r3
 800de66:	f003 0306 	and.w	r3, r3, #6
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	f063 030f 	orn	r3, r3, #15
 800de70:	b2da      	uxtb	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	611a      	str	r2, [r3, #16]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	490e      	ldr	r1, [pc, #56]	@ (800deb8 <I2C_MasterRequestWrite+0xfc>)
 800de7e:	68f8      	ldr	r0, [r7, #12]
 800de80:	f000 fae4 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <I2C_MasterRequestWrite+0xd2>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e010      	b.n	800deb0 <I2C_MasterRequestWrite+0xf4>
 800de8e:	897b      	ldrh	r3, [r7, #10]
 800de90:	b2da      	uxtb	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	611a      	str	r2, [r3, #16]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	4907      	ldr	r1, [pc, #28]	@ (800debc <I2C_MasterRequestWrite+0x100>)
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f000 fad4 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <I2C_MasterRequestWrite+0xf2>
 800deaa:	2301      	movs	r3, #1
 800deac:	e000      	b.n	800deb0 <I2C_MasterRequestWrite+0xf4>
 800deae:	2300      	movs	r3, #0
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	00010008 	.word	0x00010008
 800debc:	00010002 	.word	0x00010002

0800dec0 <I2C_MasterRequestRead>:
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b088      	sub	sp, #32
 800dec4:	af02      	add	r7, sp, #8
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	607a      	str	r2, [r7, #4]
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	460b      	mov	r3, r1
 800dece:	817b      	strh	r3, [r7, #10]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded4:	617b      	str	r3, [r7, #20]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2b08      	cmp	r3, #8
 800deea:	d006      	beq.n	800defa <I2C_MasterRequestRead+0x3a>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d003      	beq.n	800defa <I2C_MasterRequestRead+0x3a>
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800def8:	d108      	bne.n	800df0c <I2C_MasterRequestRead+0x4c>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	e00b      	b.n	800df24 <I2C_MasterRequestRead+0x64>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df10:	2b11      	cmp	r3, #17
 800df12:	d107      	bne.n	800df24 <I2C_MasterRequestRead+0x64>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f000 fa11 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00d      	beq.n	800df58 <I2C_MasterRequestRead+0x98>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df4a:	d103      	bne.n	800df54 <I2C_MasterRequestRead+0x94>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df52:	641a      	str	r2, [r3, #64]	@ 0x40
 800df54:	2303      	movs	r3, #3
 800df56:	e079      	b.n	800e04c <I2C_MasterRequestRead+0x18c>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df60:	d108      	bne.n	800df74 <I2C_MasterRequestRead+0xb4>
 800df62:	897b      	ldrh	r3, [r7, #10]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	f043 0301 	orr.w	r3, r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	611a      	str	r2, [r3, #16]
 800df72:	e05f      	b.n	800e034 <I2C_MasterRequestRead+0x174>
 800df74:	897b      	ldrh	r3, [r7, #10]
 800df76:	11db      	asrs	r3, r3, #7
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 0306 	and.w	r3, r3, #6
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	f063 030f 	orn	r3, r3, #15
 800df84:	b2da      	uxtb	r2, r3
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	611a      	str	r2, [r3, #16]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	4930      	ldr	r1, [pc, #192]	@ (800e054 <I2C_MasterRequestRead+0x194>)
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 fa5a 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d001      	beq.n	800dfa2 <I2C_MasterRequestRead+0xe2>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e054      	b.n	800e04c <I2C_MasterRequestRead+0x18c>
 800dfa2:	897b      	ldrh	r3, [r7, #10]
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	611a      	str	r2, [r3, #16]
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	4929      	ldr	r1, [pc, #164]	@ (800e058 <I2C_MasterRequestRead+0x198>)
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f000 fa4a 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <I2C_MasterRequestRead+0x102>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e044      	b.n	800e04c <I2C_MasterRequestRead+0x18c>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	613b      	str	r3, [r7, #16]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	613b      	str	r3, [r7, #16]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	613b      	str	r3, [r7, #16]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f000 f9af 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00d      	beq.n	800e01c <I2C_MasterRequestRead+0x15c>
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e00a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e00e:	d103      	bne.n	800e018 <I2C_MasterRequestRead+0x158>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e016:	641a      	str	r2, [r3, #64]	@ 0x40
 800e018:	2303      	movs	r3, #3
 800e01a:	e017      	b.n	800e04c <I2C_MasterRequestRead+0x18c>
 800e01c:	897b      	ldrh	r3, [r7, #10]
 800e01e:	11db      	asrs	r3, r3, #7
 800e020:	b2db      	uxtb	r3, r3
 800e022:	f003 0306 	and.w	r3, r3, #6
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f063 030e 	orn	r3, r3, #14
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	611a      	str	r2, [r3, #16]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	4907      	ldr	r1, [pc, #28]	@ (800e058 <I2C_MasterRequestRead+0x198>)
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 fa06 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <I2C_MasterRequestRead+0x18a>
 800e046:	2301      	movs	r3, #1
 800e048:	e000      	b.n	800e04c <I2C_MasterRequestRead+0x18c>
 800e04a:	2300      	movs	r3, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	00010008 	.word	0x00010008
 800e058:	00010002 	.word	0x00010002

0800e05c <I2C_RequestMemoryWrite>:
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b088      	sub	sp, #32
 800e060:	af02      	add	r7, sp, #8
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	4608      	mov	r0, r1
 800e066:	4611      	mov	r1, r2
 800e068:	461a      	mov	r2, r3
 800e06a:	4603      	mov	r3, r0
 800e06c:	817b      	strh	r3, [r7, #10]
 800e06e:	460b      	mov	r3, r1
 800e070:	813b      	strh	r3, [r7, #8]
 800e072:	4613      	mov	r3, r2
 800e074:	80fb      	strh	r3, [r7, #6]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f000 f960 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00d      	beq.n	800e0ba <I2C_RequestMemoryWrite+0x5e>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0ac:	d103      	bne.n	800e0b6 <I2C_RequestMemoryWrite+0x5a>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0b4:	641a      	str	r2, [r3, #64]	@ 0x40
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e05f      	b.n	800e17a <I2C_RequestMemoryWrite+0x11e>
 800e0ba:	897b      	ldrh	r3, [r7, #10]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	461a      	mov	r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e0c8:	611a      	str	r2, [r3, #16]
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0cc:	6a3a      	ldr	r2, [r7, #32]
 800e0ce:	492d      	ldr	r1, [pc, #180]	@ (800e184 <I2C_RequestMemoryWrite+0x128>)
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 f9bb 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <I2C_RequestMemoryWrite+0x84>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e04c      	b.n	800e17a <I2C_RequestMemoryWrite+0x11e>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	617b      	str	r3, [r7, #20]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	617b      	str	r3, [r7, #20]
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0f8:	6a39      	ldr	r1, [r7, #32]
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 fa46 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00d      	beq.n	800e122 <I2C_RequestMemoryWrite+0xc6>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e10a:	2b04      	cmp	r3, #4
 800e10c:	d107      	bne.n	800e11e <I2C_RequestMemoryWrite+0xc2>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	2301      	movs	r3, #1
 800e120:	e02b      	b.n	800e17a <I2C_RequestMemoryWrite+0x11e>
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d105      	bne.n	800e134 <I2C_RequestMemoryWrite+0xd8>
 800e128:	893b      	ldrh	r3, [r7, #8]
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	611a      	str	r2, [r3, #16]
 800e132:	e021      	b.n	800e178 <I2C_RequestMemoryWrite+0x11c>
 800e134:	893b      	ldrh	r3, [r7, #8]
 800e136:	0a1b      	lsrs	r3, r3, #8
 800e138:	b29b      	uxth	r3, r3
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	611a      	str	r2, [r3, #16]
 800e142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e144:	6a39      	ldr	r1, [r7, #32]
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f000 fa20 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00d      	beq.n	800e16e <I2C_RequestMemoryWrite+0x112>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e156:	2b04      	cmp	r3, #4
 800e158:	d107      	bne.n	800e16a <I2C_RequestMemoryWrite+0x10e>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	2301      	movs	r3, #1
 800e16c:	e005      	b.n	800e17a <I2C_RequestMemoryWrite+0x11e>
 800e16e:	893b      	ldrh	r3, [r7, #8]
 800e170:	b2da      	uxtb	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	611a      	str	r2, [r3, #16]
 800e178:	2300      	movs	r3, #0
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	00010002 	.word	0x00010002

0800e188 <I2C_RequestMemoryRead>:
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af02      	add	r7, sp, #8
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	4608      	mov	r0, r1
 800e192:	4611      	mov	r1, r2
 800e194:	461a      	mov	r2, r3
 800e196:	4603      	mov	r3, r0
 800e198:	817b      	strh	r3, [r7, #10]
 800e19a:	460b      	mov	r3, r1
 800e19c:	813b      	strh	r3, [r7, #8]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	80fb      	strh	r3, [r7, #6]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 f8c2 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00d      	beq.n	800e1f6 <I2C_RequestMemoryRead+0x6e>
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1e8:	d103      	bne.n	800e1f2 <I2C_RequestMemoryRead+0x6a>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1f0:	641a      	str	r2, [r3, #64]	@ 0x40
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	e0aa      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e1f6:	897b      	ldrh	r3, [r7, #10]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e204:	611a      	str	r2, [r3, #16]
 800e206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e208:	6a3a      	ldr	r2, [r7, #32]
 800e20a:	4952      	ldr	r1, [pc, #328]	@ (800e354 <I2C_RequestMemoryRead+0x1cc>)
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f000 f91d 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <I2C_RequestMemoryRead+0x94>
 800e218:	2301      	movs	r3, #1
 800e21a:	e097      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e21c:	2300      	movs	r3, #0
 800e21e:	617b      	str	r3, [r7, #20]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	695b      	ldr	r3, [r3, #20]
 800e226:	617b      	str	r3, [r7, #20]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e234:	6a39      	ldr	r1, [r7, #32]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 f9a8 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00d      	beq.n	800e25e <I2C_RequestMemoryRead+0xd6>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e246:	2b04      	cmp	r3, #4
 800e248:	d107      	bne.n	800e25a <I2C_RequestMemoryRead+0xd2>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	2301      	movs	r3, #1
 800e25c:	e076      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e25e:	88fb      	ldrh	r3, [r7, #6]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d105      	bne.n	800e270 <I2C_RequestMemoryRead+0xe8>
 800e264:	893b      	ldrh	r3, [r7, #8]
 800e266:	b2da      	uxtb	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	611a      	str	r2, [r3, #16]
 800e26e:	e021      	b.n	800e2b4 <I2C_RequestMemoryRead+0x12c>
 800e270:	893b      	ldrh	r3, [r7, #8]
 800e272:	0a1b      	lsrs	r3, r3, #8
 800e274:	b29b      	uxth	r3, r3
 800e276:	b2da      	uxtb	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	611a      	str	r2, [r3, #16]
 800e27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e280:	6a39      	ldr	r1, [r7, #32]
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 f982 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00d      	beq.n	800e2aa <I2C_RequestMemoryRead+0x122>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e292:	2b04      	cmp	r3, #4
 800e294:	d107      	bne.n	800e2a6 <I2C_RequestMemoryRead+0x11e>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e050      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e2aa:	893b      	ldrh	r3, [r7, #8]
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	611a      	str	r2, [r3, #16]
 800e2b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2b6:	6a39      	ldr	r1, [r7, #32]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f000 f967 	bl	800e58c <I2C_WaitOnTXEFlagUntilTimeout>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00d      	beq.n	800e2e0 <I2C_RequestMemoryRead+0x158>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c8:	2b04      	cmp	r3, #4
 800e2ca:	d107      	bne.n	800e2dc <I2C_RequestMemoryRead+0x154>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e035      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e2ee:	601a      	str	r2, [r3, #0]
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	6a3b      	ldr	r3, [r7, #32]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 f82b 	bl	800e358 <I2C_WaitOnFlagUntilTimeout>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00d      	beq.n	800e324 <I2C_RequestMemoryRead+0x19c>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e316:	d103      	bne.n	800e320 <I2C_RequestMemoryRead+0x198>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e31e:	641a      	str	r2, [r3, #64]	@ 0x40
 800e320:	2303      	movs	r3, #3
 800e322:	e013      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e324:	897b      	ldrh	r3, [r7, #10]
 800e326:	b2db      	uxtb	r3, r3
 800e328:	f043 0301 	orr.w	r3, r3, #1
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	611a      	str	r2, [r3, #16]
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	6a3a      	ldr	r2, [r7, #32]
 800e338:	4906      	ldr	r1, [pc, #24]	@ (800e354 <I2C_RequestMemoryRead+0x1cc>)
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 f886 	bl	800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <I2C_RequestMemoryRead+0x1c2>
 800e346:	2301      	movs	r3, #1
 800e348:	e000      	b.n	800e34c <I2C_RequestMemoryRead+0x1c4>
 800e34a:	2300      	movs	r3, #0
 800e34c:	4618      	mov	r0, r3
 800e34e:	3718      	adds	r7, #24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	00010002 	.word	0x00010002

0800e358 <I2C_WaitOnFlagUntilTimeout>:
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	603b      	str	r3, [r7, #0]
 800e364:	4613      	mov	r3, r2
 800e366:	71fb      	strb	r3, [r7, #7]
 800e368:	e048      	b.n	800e3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e370:	d044      	beq.n	800e3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
 800e372:	f7fe f901 	bl	800c578 <HAL_GetTick>
 800e376:	4602      	mov	r2, r0
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	683a      	ldr	r2, [r7, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d302      	bcc.n	800e388 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d139      	bne.n	800e3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	0c1b      	lsrs	r3, r3, #16
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d10d      	bne.n	800e3ae <I2C_WaitOnFlagUntilTimeout+0x56>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	695b      	ldr	r3, [r3, #20]
 800e398:	43da      	mvns	r2, r3
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	4013      	ands	r3, r2
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	bf0c      	ite	eq
 800e3a4:	2301      	moveq	r3, #1
 800e3a6:	2300      	movne	r3, #0
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	e00c      	b.n	800e3c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	43da      	mvns	r2, r3
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	bf0c      	ite	eq
 800e3c0:	2301      	moveq	r3, #1
 800e3c2:	2300      	movne	r3, #0
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	79fb      	ldrb	r3, [r7, #7]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d116      	bne.n	800e3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2220      	movs	r2, #32
 800e3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3e8:	f043 0220 	orr.w	r2, r3, #32
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	641a      	str	r2, [r3, #64]	@ 0x40
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e023      	b.n	800e444 <I2C_WaitOnFlagUntilTimeout+0xec>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	0c1b      	lsrs	r3, r3, #16
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b01      	cmp	r3, #1
 800e404:	d10d      	bne.n	800e422 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	43da      	mvns	r2, r3
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	4013      	ands	r3, r2
 800e412:	b29b      	uxth	r3, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	bf0c      	ite	eq
 800e418:	2301      	moveq	r3, #1
 800e41a:	2300      	movne	r3, #0
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	461a      	mov	r2, r3
 800e420:	e00c      	b.n	800e43c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	43da      	mvns	r2, r3
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	4013      	ands	r3, r2
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	bf0c      	ite	eq
 800e434:	2301      	moveq	r3, #1
 800e436:	2300      	movne	r3, #0
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d093      	beq.n	800e36a <I2C_WaitOnFlagUntilTimeout+0x12>
 800e442:	2300      	movs	r3, #0
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
 800e45a:	e071      	b.n	800e540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e46a:	d123      	bne.n	800e4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e484:	615a      	str	r2, [r3, #20]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2220      	movs	r2, #32
 800e490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2200      	movs	r2, #0
 800e498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a0:	f043 0204 	orr.w	r2, r3, #4
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	641a      	str	r2, [r3, #64]	@ 0x40
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	e067      	b.n	800e584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ba:	d041      	beq.n	800e540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800e4bc:	f7fe f85c 	bl	800c578 <HAL_GetTick>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d302      	bcc.n	800e4d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d136      	bne.n	800e540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	0c1b      	lsrs	r3, r3, #16
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d10c      	bne.n	800e4f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	43da      	mvns	r2, r3
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	bf14      	ite	ne
 800e4ee:	2301      	movne	r3, #1
 800e4f0:	2300      	moveq	r3, #0
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	e00b      	b.n	800e50e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	43da      	mvns	r2, r3
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4013      	ands	r3, r2
 800e502:	b29b      	uxth	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	bf14      	ite	ne
 800e508:	2301      	movne	r3, #1
 800e50a:	2300      	moveq	r3, #0
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d016      	beq.n	800e540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	631a      	str	r2, [r3, #48]	@ 0x30
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2220      	movs	r2, #32
 800e51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e52c:	f043 0220 	orr.w	r2, r3, #32
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	641a      	str	r2, [r3, #64]	@ 0x40
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e53c:	2301      	movs	r3, #1
 800e53e:	e021      	b.n	800e584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	0c1b      	lsrs	r3, r3, #16
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b01      	cmp	r3, #1
 800e548:	d10c      	bne.n	800e564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	43da      	mvns	r2, r3
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	4013      	ands	r3, r2
 800e556:	b29b      	uxth	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	bf14      	ite	ne
 800e55c:	2301      	movne	r3, #1
 800e55e:	2300      	moveq	r3, #0
 800e560:	b2db      	uxtb	r3, r3
 800e562:	e00b      	b.n	800e57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	699b      	ldr	r3, [r3, #24]
 800e56a:	43da      	mvns	r2, r3
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	4013      	ands	r3, r2
 800e570:	b29b      	uxth	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	bf14      	ite	ne
 800e576:	2301      	movne	r3, #1
 800e578:	2300      	moveq	r3, #0
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f47f af6d 	bne.w	800e45c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800e582:	2300      	movs	r3, #0
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <I2C_WaitOnTXEFlagUntilTimeout>:
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
 800e598:	e034      	b.n	800e604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f000 f8e3 	bl	800e766 <I2C_IsAcknowledgeFailed>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e034      	b.n	800e614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b0:	d028      	beq.n	800e604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800e5b2:	f7fd ffe1 	bl	800c578 <HAL_GetTick>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	1ad3      	subs	r3, r2, r3
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d302      	bcc.n	800e5c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d11d      	bne.n	800e604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	695b      	ldr	r3, [r3, #20]
 800e5ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5d2:	2b80      	cmp	r3, #128	@ 0x80
 800e5d4:	d016      	beq.n	800e604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	631a      	str	r2, [r3, #48]	@ 0x30
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2220      	movs	r2, #32
 800e5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f0:	f043 0220 	orr.w	r2, r3, #32
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	641a      	str	r2, [r3, #64]	@ 0x40
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e600:	2301      	movs	r3, #1
 800e602:	e007      	b.n	800e614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e60e:	2b80      	cmp	r3, #128	@ 0x80
 800e610:	d1c3      	bne.n	800e59a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800e612:	2300      	movs	r3, #0
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <I2C_WaitOnBTFFlagUntilTimeout>:
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	e034      	b.n	800e694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f000 f89b 	bl	800e766 <I2C_IsAcknowledgeFailed>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800e636:	2301      	movs	r3, #1
 800e638:	e034      	b.n	800e6a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e640:	d028      	beq.n	800e694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800e642:	f7fd ff99 	bl	800c578 <HAL_GetTick>
 800e646:	4602      	mov	r2, r0
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d302      	bcc.n	800e658 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d11d      	bne.n	800e694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	f003 0304 	and.w	r3, r3, #4
 800e662:	2b04      	cmp	r3, #4
 800e664:	d016      	beq.n	800e694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2220      	movs	r2, #32
 800e670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e680:	f043 0220 	orr.w	r2, r3, #32
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	641a      	str	r2, [r3, #64]	@ 0x40
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e690:	2301      	movs	r3, #1
 800e692:	e007      	b.n	800e6a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	f003 0304 	and.w	r3, r3, #4
 800e69e:	2b04      	cmp	r3, #4
 800e6a0:	d1c3      	bne.n	800e62a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <I2C_WaitOnRXNEFlagUntilTimeout>:
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
 800e6b8:	e049      	b.n	800e74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	695b      	ldr	r3, [r3, #20]
 800e6c0:	f003 0310 	and.w	r3, r3, #16
 800e6c4:	2b10      	cmp	r3, #16
 800e6c6:	d119      	bne.n	800e6fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f06f 0210 	mvn.w	r2, #16
 800e6d0:	615a      	str	r2, [r3, #20]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2220      	movs	r2, #32
 800e6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	641a      	str	r2, [r3, #64]	@ 0x40
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e030      	b.n	800e75e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 800e6fc:	f7fd ff3c 	bl	800c578 <HAL_GetTick>
 800e700:	4602      	mov	r2, r0
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	68ba      	ldr	r2, [r7, #8]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d302      	bcc.n	800e712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d11d      	bne.n	800e74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	695b      	ldr	r3, [r3, #20]
 800e718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e71c:	2b40      	cmp	r3, #64	@ 0x40
 800e71e:	d016      	beq.n	800e74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	631a      	str	r2, [r3, #48]	@ 0x30
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2220      	movs	r2, #32
 800e72a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e73a:	f043 0220 	orr.w	r2, r3, #32
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	641a      	str	r2, [r3, #64]	@ 0x40
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e74a:	2301      	movs	r3, #1
 800e74c:	e007      	b.n	800e75e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e758:	2b40      	cmp	r3, #64	@ 0x40
 800e75a:	d1ae      	bne.n	800e6ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 800e75c:	2300      	movs	r3, #0
 800e75e:	4618      	mov	r0, r3
 800e760:	3710      	adds	r7, #16
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <I2C_IsAcknowledgeFailed>:
 800e766:	b480      	push	{r7}
 800e768:	b083      	sub	sp, #12
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e77c:	d11b      	bne.n	800e7b6 <I2C_IsAcknowledgeFailed+0x50>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e786:	615a      	str	r2, [r3, #20]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2220      	movs	r2, #32
 800e792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7a2:	f043 0204 	orr.w	r2, r3, #4
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	641a      	str	r2, [r3, #64]	@ 0x40
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e000      	b.n	800e7b8 <I2C_IsAcknowledgeFailed+0x52>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <HAL_RCC_OscConfig>:
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <HAL_RCC_OscConfig+0x12>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e267      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0301 	and.w	r3, r3, #1
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d075      	beq.n	800e8ce <HAL_RCC_OscConfig+0x10a>
 800e7e2:	4b88      	ldr	r3, [pc, #544]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	f003 030c 	and.w	r3, r3, #12
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	d00c      	beq.n	800e808 <HAL_RCC_OscConfig+0x44>
 800e7ee:	4b85      	ldr	r3, [pc, #532]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f003 030c 	and.w	r3, r3, #12
 800e7f6:	2b08      	cmp	r3, #8
 800e7f8:	d112      	bne.n	800e820 <HAL_RCC_OscConfig+0x5c>
 800e7fa:	4b82      	ldr	r3, [pc, #520]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e806:	d10b      	bne.n	800e820 <HAL_RCC_OscConfig+0x5c>
 800e808:	4b7e      	ldr	r3, [pc, #504]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d05b      	beq.n	800e8cc <HAL_RCC_OscConfig+0x108>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d157      	bne.n	800e8cc <HAL_RCC_OscConfig+0x108>
 800e81c:	2301      	movs	r3, #1
 800e81e:	e242      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e828:	d106      	bne.n	800e838 <HAL_RCC_OscConfig+0x74>
 800e82a:	4b76      	ldr	r3, [pc, #472]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a75      	ldr	r2, [pc, #468]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e834:	6013      	str	r3, [r2, #0]
 800e836:	e01d      	b.n	800e874 <HAL_RCC_OscConfig+0xb0>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e840:	d10c      	bne.n	800e85c <HAL_RCC_OscConfig+0x98>
 800e842:	4b70      	ldr	r3, [pc, #448]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a6f      	ldr	r2, [pc, #444]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e84c:	6013      	str	r3, [r2, #0]
 800e84e:	4b6d      	ldr	r3, [pc, #436]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a6c      	ldr	r2, [pc, #432]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e858:	6013      	str	r3, [r2, #0]
 800e85a:	e00b      	b.n	800e874 <HAL_RCC_OscConfig+0xb0>
 800e85c:	4b69      	ldr	r3, [pc, #420]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a68      	ldr	r2, [pc, #416]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e866:	6013      	str	r3, [r2, #0]
 800e868:	4b66      	ldr	r3, [pc, #408]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a65      	ldr	r2, [pc, #404]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e86e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e872:	6013      	str	r3, [r2, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d013      	beq.n	800e8a4 <HAL_RCC_OscConfig+0xe0>
 800e87c:	f7fd fe7c 	bl	800c578 <HAL_GetTick>
 800e880:	6138      	str	r0, [r7, #16]
 800e882:	e008      	b.n	800e896 <HAL_RCC_OscConfig+0xd2>
 800e884:	f7fd fe78 	bl	800c578 <HAL_GetTick>
 800e888:	4602      	mov	r2, r0
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	2b64      	cmp	r3, #100	@ 0x64
 800e890:	d901      	bls.n	800e896 <HAL_RCC_OscConfig+0xd2>
 800e892:	2303      	movs	r3, #3
 800e894:	e207      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e896:	4b5b      	ldr	r3, [pc, #364]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d0f0      	beq.n	800e884 <HAL_RCC_OscConfig+0xc0>
 800e8a2:	e014      	b.n	800e8ce <HAL_RCC_OscConfig+0x10a>
 800e8a4:	f7fd fe68 	bl	800c578 <HAL_GetTick>
 800e8a8:	6138      	str	r0, [r7, #16]
 800e8aa:	e008      	b.n	800e8be <HAL_RCC_OscConfig+0xfa>
 800e8ac:	f7fd fe64 	bl	800c578 <HAL_GetTick>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	2b64      	cmp	r3, #100	@ 0x64
 800e8b8:	d901      	bls.n	800e8be <HAL_RCC_OscConfig+0xfa>
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e1f3      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e8be:	4b51      	ldr	r3, [pc, #324]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1f0      	bne.n	800e8ac <HAL_RCC_OscConfig+0xe8>
 800e8ca:	e000      	b.n	800e8ce <HAL_RCC_OscConfig+0x10a>
 800e8cc:	bf00      	nop
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f003 0302 	and.w	r3, r3, #2
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d063      	beq.n	800e9a2 <HAL_RCC_OscConfig+0x1de>
 800e8da:	4b4a      	ldr	r3, [pc, #296]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f003 030c 	and.w	r3, r3, #12
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00b      	beq.n	800e8fe <HAL_RCC_OscConfig+0x13a>
 800e8e6:	4b47      	ldr	r3, [pc, #284]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f003 030c 	and.w	r3, r3, #12
 800e8ee:	2b08      	cmp	r3, #8
 800e8f0:	d11c      	bne.n	800e92c <HAL_RCC_OscConfig+0x168>
 800e8f2:	4b44      	ldr	r3, [pc, #272]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d116      	bne.n	800e92c <HAL_RCC_OscConfig+0x168>
 800e8fe:	4b41      	ldr	r3, [pc, #260]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	d005      	beq.n	800e916 <HAL_RCC_OscConfig+0x152>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d001      	beq.n	800e916 <HAL_RCC_OscConfig+0x152>
 800e912:	2301      	movs	r3, #1
 800e914:	e1c7      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e916:	4b3b      	ldr	r3, [pc, #236]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	00db      	lsls	r3, r3, #3
 800e924:	4937      	ldr	r1, [pc, #220]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e926:	4313      	orrs	r3, r2
 800e928:	600b      	str	r3, [r1, #0]
 800e92a:	e03a      	b.n	800e9a2 <HAL_RCC_OscConfig+0x1de>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d020      	beq.n	800e976 <HAL_RCC_OscConfig+0x1b2>
 800e934:	4b34      	ldr	r3, [pc, #208]	@ (800ea08 <HAL_RCC_OscConfig+0x244>)
 800e936:	2201      	movs	r2, #1
 800e938:	601a      	str	r2, [r3, #0]
 800e93a:	f7fd fe1d 	bl	800c578 <HAL_GetTick>
 800e93e:	6138      	str	r0, [r7, #16]
 800e940:	e008      	b.n	800e954 <HAL_RCC_OscConfig+0x190>
 800e942:	f7fd fe19 	bl	800c578 <HAL_GetTick>
 800e946:	4602      	mov	r2, r0
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d901      	bls.n	800e954 <HAL_RCC_OscConfig+0x190>
 800e950:	2303      	movs	r3, #3
 800e952:	e1a8      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e954:	4b2b      	ldr	r3, [pc, #172]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f003 0302 	and.w	r3, r3, #2
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d0f0      	beq.n	800e942 <HAL_RCC_OscConfig+0x17e>
 800e960:	4b28      	ldr	r3, [pc, #160]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	00db      	lsls	r3, r3, #3
 800e96e:	4925      	ldr	r1, [pc, #148]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e970:	4313      	orrs	r3, r2
 800e972:	600b      	str	r3, [r1, #0]
 800e974:	e015      	b.n	800e9a2 <HAL_RCC_OscConfig+0x1de>
 800e976:	4b24      	ldr	r3, [pc, #144]	@ (800ea08 <HAL_RCC_OscConfig+0x244>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]
 800e97c:	f7fd fdfc 	bl	800c578 <HAL_GetTick>
 800e980:	6138      	str	r0, [r7, #16]
 800e982:	e008      	b.n	800e996 <HAL_RCC_OscConfig+0x1d2>
 800e984:	f7fd fdf8 	bl	800c578 <HAL_GetTick>
 800e988:	4602      	mov	r2, r0
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d901      	bls.n	800e996 <HAL_RCC_OscConfig+0x1d2>
 800e992:	2303      	movs	r3, #3
 800e994:	e187      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e996:	4b1b      	ldr	r3, [pc, #108]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1f0      	bne.n	800e984 <HAL_RCC_OscConfig+0x1c0>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0308 	and.w	r3, r3, #8
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d036      	beq.n	800ea1c <HAL_RCC_OscConfig+0x258>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d016      	beq.n	800e9e4 <HAL_RCC_OscConfig+0x220>
 800e9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ea0c <HAL_RCC_OscConfig+0x248>)
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]
 800e9bc:	f7fd fddc 	bl	800c578 <HAL_GetTick>
 800e9c0:	6138      	str	r0, [r7, #16]
 800e9c2:	e008      	b.n	800e9d6 <HAL_RCC_OscConfig+0x212>
 800e9c4:	f7fd fdd8 	bl	800c578 <HAL_GetTick>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	d901      	bls.n	800e9d6 <HAL_RCC_OscConfig+0x212>
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	e167      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800e9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ea04 <HAL_RCC_OscConfig+0x240>)
 800e9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9da:	f003 0302 	and.w	r3, r3, #2
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0f0      	beq.n	800e9c4 <HAL_RCC_OscConfig+0x200>
 800e9e2:	e01b      	b.n	800ea1c <HAL_RCC_OscConfig+0x258>
 800e9e4:	4b09      	ldr	r3, [pc, #36]	@ (800ea0c <HAL_RCC_OscConfig+0x248>)
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	f7fd fdc5 	bl	800c578 <HAL_GetTick>
 800e9ee:	6138      	str	r0, [r7, #16]
 800e9f0:	e00e      	b.n	800ea10 <HAL_RCC_OscConfig+0x24c>
 800e9f2:	f7fd fdc1 	bl	800c578 <HAL_GetTick>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d907      	bls.n	800ea10 <HAL_RCC_OscConfig+0x24c>
 800ea00:	2303      	movs	r3, #3
 800ea02:	e150      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800ea04:	40023800 	.word	0x40023800
 800ea08:	42470000 	.word	0x42470000
 800ea0c:	42470e80 	.word	0x42470e80
 800ea10:	4b88      	ldr	r3, [pc, #544]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ea12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea14:	f003 0302 	and.w	r3, r3, #2
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d1ea      	bne.n	800e9f2 <HAL_RCC_OscConfig+0x22e>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f003 0304 	and.w	r3, r3, #4
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f000 8097 	beq.w	800eb58 <HAL_RCC_OscConfig+0x394>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	75fb      	strb	r3, [r7, #23]
 800ea2e:	4b81      	ldr	r3, [pc, #516]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ea30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10f      	bne.n	800ea5a <HAL_RCC_OscConfig+0x296>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60bb      	str	r3, [r7, #8]
 800ea3e:	4b7d      	ldr	r3, [pc, #500]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ea40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea42:	4a7c      	ldr	r2, [pc, #496]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ea44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea48:	6413      	str	r3, [r2, #64]	@ 0x40
 800ea4a:	4b7a      	ldr	r3, [pc, #488]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ea4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea52:	60bb      	str	r3, [r7, #8]
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2301      	movs	r3, #1
 800ea58:	75fb      	strb	r3, [r7, #23]
 800ea5a:	4b77      	ldr	r3, [pc, #476]	@ (800ec38 <HAL_RCC_OscConfig+0x474>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d118      	bne.n	800ea98 <HAL_RCC_OscConfig+0x2d4>
 800ea66:	4b74      	ldr	r3, [pc, #464]	@ (800ec38 <HAL_RCC_OscConfig+0x474>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a73      	ldr	r2, [pc, #460]	@ (800ec38 <HAL_RCC_OscConfig+0x474>)
 800ea6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea70:	6013      	str	r3, [r2, #0]
 800ea72:	f7fd fd81 	bl	800c578 <HAL_GetTick>
 800ea76:	6138      	str	r0, [r7, #16]
 800ea78:	e008      	b.n	800ea8c <HAL_RCC_OscConfig+0x2c8>
 800ea7a:	f7fd fd7d 	bl	800c578 <HAL_GetTick>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d901      	bls.n	800ea8c <HAL_RCC_OscConfig+0x2c8>
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e10c      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800ea8c:	4b6a      	ldr	r3, [pc, #424]	@ (800ec38 <HAL_RCC_OscConfig+0x474>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0f0      	beq.n	800ea7a <HAL_RCC_OscConfig+0x2b6>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d106      	bne.n	800eaae <HAL_RCC_OscConfig+0x2ea>
 800eaa0:	4b64      	ldr	r3, [pc, #400]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eaa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaa4:	4a63      	ldr	r2, [pc, #396]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eaa6:	f043 0301 	orr.w	r3, r3, #1
 800eaaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800eaac:	e01c      	b.n	800eae8 <HAL_RCC_OscConfig+0x324>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	2b05      	cmp	r3, #5
 800eab4:	d10c      	bne.n	800ead0 <HAL_RCC_OscConfig+0x30c>
 800eab6:	4b5f      	ldr	r3, [pc, #380]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaba:	4a5e      	ldr	r2, [pc, #376]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eabc:	f043 0304 	orr.w	r3, r3, #4
 800eac0:	6713      	str	r3, [r2, #112]	@ 0x70
 800eac2:	4b5c      	ldr	r3, [pc, #368]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eac6:	4a5b      	ldr	r2, [pc, #364]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eac8:	f043 0301 	orr.w	r3, r3, #1
 800eacc:	6713      	str	r3, [r2, #112]	@ 0x70
 800eace:	e00b      	b.n	800eae8 <HAL_RCC_OscConfig+0x324>
 800ead0:	4b58      	ldr	r3, [pc, #352]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ead2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ead4:	4a57      	ldr	r2, [pc, #348]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ead6:	f023 0301 	bic.w	r3, r3, #1
 800eada:	6713      	str	r3, [r2, #112]	@ 0x70
 800eadc:	4b55      	ldr	r3, [pc, #340]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eae0:	4a54      	ldr	r2, [pc, #336]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eae2:	f023 0304 	bic.w	r3, r3, #4
 800eae6:	6713      	str	r3, [r2, #112]	@ 0x70
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d015      	beq.n	800eb1c <HAL_RCC_OscConfig+0x358>
 800eaf0:	f7fd fd42 	bl	800c578 <HAL_GetTick>
 800eaf4:	6138      	str	r0, [r7, #16]
 800eaf6:	e00a      	b.n	800eb0e <HAL_RCC_OscConfig+0x34a>
 800eaf8:	f7fd fd3e 	bl	800c578 <HAL_GetTick>
 800eafc:	4602      	mov	r2, r0
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d901      	bls.n	800eb0e <HAL_RCC_OscConfig+0x34a>
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	e0cb      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800eb0e:	4b49      	ldr	r3, [pc, #292]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eb10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb12:	f003 0302 	and.w	r3, r3, #2
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0ee      	beq.n	800eaf8 <HAL_RCC_OscConfig+0x334>
 800eb1a:	e014      	b.n	800eb46 <HAL_RCC_OscConfig+0x382>
 800eb1c:	f7fd fd2c 	bl	800c578 <HAL_GetTick>
 800eb20:	6138      	str	r0, [r7, #16]
 800eb22:	e00a      	b.n	800eb3a <HAL_RCC_OscConfig+0x376>
 800eb24:	f7fd fd28 	bl	800c578 <HAL_GetTick>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d901      	bls.n	800eb3a <HAL_RCC_OscConfig+0x376>
 800eb36:	2303      	movs	r3, #3
 800eb38:	e0b5      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800eb3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eb3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb3e:	f003 0302 	and.w	r3, r3, #2
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1ee      	bne.n	800eb24 <HAL_RCC_OscConfig+0x360>
 800eb46:	7dfb      	ldrb	r3, [r7, #23]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d105      	bne.n	800eb58 <HAL_RCC_OscConfig+0x394>
 800eb4c:	4b39      	ldr	r3, [pc, #228]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eb4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb50:	4a38      	ldr	r2, [pc, #224]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eb52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb56:	6413      	str	r3, [r2, #64]	@ 0x40
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f000 80a1 	beq.w	800eca4 <HAL_RCC_OscConfig+0x4e0>
 800eb62:	4b34      	ldr	r3, [pc, #208]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	f003 030c 	and.w	r3, r3, #12
 800eb6a:	2b08      	cmp	r3, #8
 800eb6c:	d05c      	beq.n	800ec28 <HAL_RCC_OscConfig+0x464>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d141      	bne.n	800ebfa <HAL_RCC_OscConfig+0x436>
 800eb76:	4b31      	ldr	r3, [pc, #196]	@ (800ec3c <HAL_RCC_OscConfig+0x478>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	f7fd fcfc 	bl	800c578 <HAL_GetTick>
 800eb80:	6138      	str	r0, [r7, #16]
 800eb82:	e008      	b.n	800eb96 <HAL_RCC_OscConfig+0x3d2>
 800eb84:	f7fd fcf8 	bl	800c578 <HAL_GetTick>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d901      	bls.n	800eb96 <HAL_RCC_OscConfig+0x3d2>
 800eb92:	2303      	movs	r3, #3
 800eb94:	e087      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800eb96:	4b27      	ldr	r3, [pc, #156]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d1f0      	bne.n	800eb84 <HAL_RCC_OscConfig+0x3c0>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	69da      	ldr	r2, [r3, #28]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	431a      	orrs	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb0:	019b      	lsls	r3, r3, #6
 800ebb2:	431a      	orrs	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebb8:	085b      	lsrs	r3, r3, #1
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	041b      	lsls	r3, r3, #16
 800ebbe:	431a      	orrs	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc4:	061b      	lsls	r3, r3, #24
 800ebc6:	491b      	ldr	r1, [pc, #108]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	604b      	str	r3, [r1, #4]
 800ebcc:	4b1b      	ldr	r3, [pc, #108]	@ (800ec3c <HAL_RCC_OscConfig+0x478>)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	f7fd fcd1 	bl	800c578 <HAL_GetTick>
 800ebd6:	6138      	str	r0, [r7, #16]
 800ebd8:	e008      	b.n	800ebec <HAL_RCC_OscConfig+0x428>
 800ebda:	f7fd fccd 	bl	800c578 <HAL_GetTick>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d901      	bls.n	800ebec <HAL_RCC_OscConfig+0x428>
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e05c      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800ebec:	4b11      	ldr	r3, [pc, #68]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0f0      	beq.n	800ebda <HAL_RCC_OscConfig+0x416>
 800ebf8:	e054      	b.n	800eca4 <HAL_RCC_OscConfig+0x4e0>
 800ebfa:	4b10      	ldr	r3, [pc, #64]	@ (800ec3c <HAL_RCC_OscConfig+0x478>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	f7fd fcba 	bl	800c578 <HAL_GetTick>
 800ec04:	6138      	str	r0, [r7, #16]
 800ec06:	e008      	b.n	800ec1a <HAL_RCC_OscConfig+0x456>
 800ec08:	f7fd fcb6 	bl	800c578 <HAL_GetTick>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	d901      	bls.n	800ec1a <HAL_RCC_OscConfig+0x456>
 800ec16:	2303      	movs	r3, #3
 800ec18:	e045      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800ec1a:	4b06      	ldr	r3, [pc, #24]	@ (800ec34 <HAL_RCC_OscConfig+0x470>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1f0      	bne.n	800ec08 <HAL_RCC_OscConfig+0x444>
 800ec26:	e03d      	b.n	800eca4 <HAL_RCC_OscConfig+0x4e0>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d107      	bne.n	800ec40 <HAL_RCC_OscConfig+0x47c>
 800ec30:	2301      	movs	r3, #1
 800ec32:	e038      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800ec34:	40023800 	.word	0x40023800
 800ec38:	40007000 	.word	0x40007000
 800ec3c:	42470060 	.word	0x42470060
 800ec40:	4b1b      	ldr	r3, [pc, #108]	@ (800ecb0 <HAL_RCC_OscConfig+0x4ec>)
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	60fb      	str	r3, [r7, #12]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	699b      	ldr	r3, [r3, #24]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d028      	beq.n	800eca0 <HAL_RCC_OscConfig+0x4dc>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	69db      	ldr	r3, [r3, #28]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d121      	bne.n	800eca0 <HAL_RCC_OscConfig+0x4dc>
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d11a      	bne.n	800eca0 <HAL_RCC_OscConfig+0x4dc>
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ec70:	4013      	ands	r3, r2
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ec76:	0192      	lsls	r2, r2, #6
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d111      	bne.n	800eca0 <HAL_RCC_OscConfig+0x4dc>
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec86:	085b      	lsrs	r3, r3, #1
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	041b      	lsls	r3, r3, #16
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d107      	bne.n	800eca0 <HAL_RCC_OscConfig+0x4dc>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9a:	061b      	lsls	r3, r3, #24
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d001      	beq.n	800eca4 <HAL_RCC_OscConfig+0x4e0>
 800eca0:	2301      	movs	r3, #1
 800eca2:	e000      	b.n	800eca6 <HAL_RCC_OscConfig+0x4e2>
 800eca4:	2300      	movs	r3, #0
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	40023800 	.word	0x40023800

0800ecb4 <HAL_RCC_ClockConfig>:
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <HAL_RCC_ClockConfig+0x14>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e0cc      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800ecc8:	4b68      	ldr	r3, [pc, #416]	@ (800ee6c <HAL_RCC_ClockConfig+0x1b8>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f003 0307 	and.w	r3, r3, #7
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d90c      	bls.n	800ecf0 <HAL_RCC_ClockConfig+0x3c>
 800ecd6:	4b65      	ldr	r3, [pc, #404]	@ (800ee6c <HAL_RCC_ClockConfig+0x1b8>)
 800ecd8:	683a      	ldr	r2, [r7, #0]
 800ecda:	b2d2      	uxtb	r2, r2
 800ecdc:	701a      	strb	r2, [r3, #0]
 800ecde:	4b63      	ldr	r3, [pc, #396]	@ (800ee6c <HAL_RCC_ClockConfig+0x1b8>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f003 0307 	and.w	r3, r3, #7
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d001      	beq.n	800ecf0 <HAL_RCC_ClockConfig+0x3c>
 800ecec:	2301      	movs	r3, #1
 800ecee:	e0b8      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f003 0302 	and.w	r3, r3, #2
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d020      	beq.n	800ed3e <HAL_RCC_ClockConfig+0x8a>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d005      	beq.n	800ed14 <HAL_RCC_ClockConfig+0x60>
 800ed08:	4b59      	ldr	r3, [pc, #356]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	4a58      	ldr	r2, [pc, #352]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ed12:	6093      	str	r3, [r2, #8]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f003 0308 	and.w	r3, r3, #8
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d005      	beq.n	800ed2c <HAL_RCC_ClockConfig+0x78>
 800ed20:	4b53      	ldr	r3, [pc, #332]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed22:	689b      	ldr	r3, [r3, #8]
 800ed24:	4a52      	ldr	r2, [pc, #328]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ed2a:	6093      	str	r3, [r2, #8]
 800ed2c:	4b50      	ldr	r3, [pc, #320]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	494d      	ldr	r1, [pc, #308]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	608b      	str	r3, [r1, #8]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f003 0301 	and.w	r3, r3, #1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d044      	beq.n	800edd4 <HAL_RCC_ClockConfig+0x120>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d107      	bne.n	800ed62 <HAL_RCC_ClockConfig+0xae>
 800ed52:	4b47      	ldr	r3, [pc, #284]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d119      	bne.n	800ed92 <HAL_RCC_ClockConfig+0xde>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e07f      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d003      	beq.n	800ed72 <HAL_RCC_ClockConfig+0xbe>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d107      	bne.n	800ed82 <HAL_RCC_ClockConfig+0xce>
 800ed72:	4b3f      	ldr	r3, [pc, #252]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d109      	bne.n	800ed92 <HAL_RCC_ClockConfig+0xde>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e06f      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800ed82:	4b3b      	ldr	r3, [pc, #236]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f003 0302 	and.w	r3, r3, #2
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d101      	bne.n	800ed92 <HAL_RCC_ClockConfig+0xde>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e067      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800ed92:	4b37      	ldr	r3, [pc, #220]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	f023 0203 	bic.w	r2, r3, #3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4934      	ldr	r1, [pc, #208]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800eda0:	4313      	orrs	r3, r2
 800eda2:	608b      	str	r3, [r1, #8]
 800eda4:	f7fd fbe8 	bl	800c578 <HAL_GetTick>
 800eda8:	60f8      	str	r0, [r7, #12]
 800edaa:	e00a      	b.n	800edc2 <HAL_RCC_ClockConfig+0x10e>
 800edac:	f7fd fbe4 	bl	800c578 <HAL_GetTick>
 800edb0:	4602      	mov	r2, r0
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edba:	4293      	cmp	r3, r2
 800edbc:	d901      	bls.n	800edc2 <HAL_RCC_ClockConfig+0x10e>
 800edbe:	2303      	movs	r3, #3
 800edc0:	e04f      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800edc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	f003 020c 	and.w	r2, r3, #12
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d1eb      	bne.n	800edac <HAL_RCC_ClockConfig+0xf8>
 800edd4:	4b25      	ldr	r3, [pc, #148]	@ (800ee6c <HAL_RCC_ClockConfig+0x1b8>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 0307 	and.w	r3, r3, #7
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d20c      	bcs.n	800edfc <HAL_RCC_ClockConfig+0x148>
 800ede2:	4b22      	ldr	r3, [pc, #136]	@ (800ee6c <HAL_RCC_ClockConfig+0x1b8>)
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	b2d2      	uxtb	r2, r2
 800ede8:	701a      	strb	r2, [r3, #0]
 800edea:	4b20      	ldr	r3, [pc, #128]	@ (800ee6c <HAL_RCC_ClockConfig+0x1b8>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f003 0307 	and.w	r3, r3, #7
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d001      	beq.n	800edfc <HAL_RCC_ClockConfig+0x148>
 800edf8:	2301      	movs	r3, #1
 800edfa:	e032      	b.n	800ee62 <HAL_RCC_ClockConfig+0x1ae>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f003 0304 	and.w	r3, r3, #4
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d008      	beq.n	800ee1a <HAL_RCC_ClockConfig+0x166>
 800ee08:	4b19      	ldr	r3, [pc, #100]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	4916      	ldr	r1, [pc, #88]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ee16:	4313      	orrs	r3, r2
 800ee18:	608b      	str	r3, [r1, #8]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f003 0308 	and.w	r3, r3, #8
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d009      	beq.n	800ee3a <HAL_RCC_ClockConfig+0x186>
 800ee26:	4b12      	ldr	r3, [pc, #72]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	691b      	ldr	r3, [r3, #16]
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	490e      	ldr	r1, [pc, #56]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ee36:	4313      	orrs	r3, r2
 800ee38:	608b      	str	r3, [r1, #8]
 800ee3a:	f000 f821 	bl	800ee80 <HAL_RCC_GetSysClockFreq>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	4b0b      	ldr	r3, [pc, #44]	@ (800ee70 <HAL_RCC_ClockConfig+0x1bc>)
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	091b      	lsrs	r3, r3, #4
 800ee46:	f003 030f 	and.w	r3, r3, #15
 800ee4a:	490a      	ldr	r1, [pc, #40]	@ (800ee74 <HAL_RCC_ClockConfig+0x1c0>)
 800ee4c:	5ccb      	ldrb	r3, [r1, r3]
 800ee4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ee52:	4a09      	ldr	r2, [pc, #36]	@ (800ee78 <HAL_RCC_ClockConfig+0x1c4>)
 800ee54:	6013      	str	r3, [r2, #0]
 800ee56:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <HAL_RCC_ClockConfig+0x1c8>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fd fb48 	bl	800c4f0 <HAL_InitTick>
 800ee60:	2300      	movs	r3, #0
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	40023c00 	.word	0x40023c00
 800ee70:	40023800 	.word	0x40023800
 800ee74:	080170ec 	.word	0x080170ec
 800ee78:	20000000 	.word	0x20000000
 800ee7c:	20000220 	.word	0x20000220

0800ee80 <HAL_RCC_GetSysClockFreq>:
 800ee80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee84:	b094      	sub	sp, #80	@ 0x50
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	2300      	movs	r3, #0
 800ee8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee90:	2300      	movs	r3, #0
 800ee92:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee94:	2300      	movs	r3, #0
 800ee96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee98:	4b79      	ldr	r3, [pc, #484]	@ (800f080 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	f003 030c 	and.w	r3, r3, #12
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d00d      	beq.n	800eec0 <HAL_RCC_GetSysClockFreq+0x40>
 800eea4:	2b08      	cmp	r3, #8
 800eea6:	f200 80e1 	bhi.w	800f06c <HAL_RCC_GetSysClockFreq+0x1ec>
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x34>
 800eeae:	2b04      	cmp	r3, #4
 800eeb0:	d003      	beq.n	800eeba <HAL_RCC_GetSysClockFreq+0x3a>
 800eeb2:	e0db      	b.n	800f06c <HAL_RCC_GetSysClockFreq+0x1ec>
 800eeb4:	4b73      	ldr	r3, [pc, #460]	@ (800f084 <HAL_RCC_GetSysClockFreq+0x204>)
 800eeb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eeb8:	e0db      	b.n	800f072 <HAL_RCC_GetSysClockFreq+0x1f2>
 800eeba:	4b73      	ldr	r3, [pc, #460]	@ (800f088 <HAL_RCC_GetSysClockFreq+0x208>)
 800eebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eebe:	e0d8      	b.n	800f072 <HAL_RCC_GetSysClockFreq+0x1f2>
 800eec0:	4b6f      	ldr	r3, [pc, #444]	@ (800f080 <HAL_RCC_GetSysClockFreq+0x200>)
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eec8:	647b      	str	r3, [r7, #68]	@ 0x44
 800eeca:	4b6d      	ldr	r3, [pc, #436]	@ (800f080 <HAL_RCC_GetSysClockFreq+0x200>)
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d063      	beq.n	800ef9e <HAL_RCC_GetSysClockFreq+0x11e>
 800eed6:	4b6a      	ldr	r3, [pc, #424]	@ (800f080 <HAL_RCC_GetSysClockFreq+0x200>)
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	099b      	lsrs	r3, r3, #6
 800eedc:	2200      	movs	r2, #0
 800eede:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800eee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eee8:	633b      	str	r3, [r7, #48]	@ 0x30
 800eeea:	2300      	movs	r3, #0
 800eeec:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800eef2:	4622      	mov	r2, r4
 800eef4:	462b      	mov	r3, r5
 800eef6:	f04f 0000 	mov.w	r0, #0
 800eefa:	f04f 0100 	mov.w	r1, #0
 800eefe:	0159      	lsls	r1, r3, #5
 800ef00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ef04:	0150      	lsls	r0, r2, #5
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	4621      	mov	r1, r4
 800ef0c:	1a51      	subs	r1, r2, r1
 800ef0e:	6139      	str	r1, [r7, #16]
 800ef10:	4629      	mov	r1, r5
 800ef12:	eb63 0301 	sbc.w	r3, r3, r1
 800ef16:	617b      	str	r3, [r7, #20]
 800ef18:	f04f 0200 	mov.w	r2, #0
 800ef1c:	f04f 0300 	mov.w	r3, #0
 800ef20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ef24:	4659      	mov	r1, fp
 800ef26:	018b      	lsls	r3, r1, #6
 800ef28:	4651      	mov	r1, sl
 800ef2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ef2e:	4651      	mov	r1, sl
 800ef30:	018a      	lsls	r2, r1, #6
 800ef32:	4651      	mov	r1, sl
 800ef34:	ebb2 0801 	subs.w	r8, r2, r1
 800ef38:	4659      	mov	r1, fp
 800ef3a:	eb63 0901 	sbc.w	r9, r3, r1
 800ef3e:	f04f 0200 	mov.w	r2, #0
 800ef42:	f04f 0300 	mov.w	r3, #0
 800ef46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ef4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ef4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ef52:	4690      	mov	r8, r2
 800ef54:	4699      	mov	r9, r3
 800ef56:	4623      	mov	r3, r4
 800ef58:	eb18 0303 	adds.w	r3, r8, r3
 800ef5c:	60bb      	str	r3, [r7, #8]
 800ef5e:	462b      	mov	r3, r5
 800ef60:	eb49 0303 	adc.w	r3, r9, r3
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	f04f 0300 	mov.w	r3, #0
 800ef6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ef72:	4629      	mov	r1, r5
 800ef74:	024b      	lsls	r3, r1, #9
 800ef76:	4621      	mov	r1, r4
 800ef78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	024a      	lsls	r2, r1, #9
 800ef80:	4610      	mov	r0, r2
 800ef82:	4619      	mov	r1, r3
 800ef84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef86:	2200      	movs	r2, #0
 800ef88:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ef90:	f7f1 fe72 	bl	8000c78 <__aeabi_uldivmod>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	4613      	mov	r3, r2
 800ef9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef9c:	e058      	b.n	800f050 <HAL_RCC_GetSysClockFreq+0x1d0>
 800ef9e:	4b38      	ldr	r3, [pc, #224]	@ (800f080 <HAL_RCC_GetSysClockFreq+0x200>)
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	099b      	lsrs	r3, r3, #6
 800efa4:	2200      	movs	r2, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	4611      	mov	r1, r2
 800efaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800efae:	623b      	str	r3, [r7, #32]
 800efb0:	2300      	movs	r3, #0
 800efb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800efb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800efb8:	4642      	mov	r2, r8
 800efba:	464b      	mov	r3, r9
 800efbc:	f04f 0000 	mov.w	r0, #0
 800efc0:	f04f 0100 	mov.w	r1, #0
 800efc4:	0159      	lsls	r1, r3, #5
 800efc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800efca:	0150      	lsls	r0, r2, #5
 800efcc:	4602      	mov	r2, r0
 800efce:	460b      	mov	r3, r1
 800efd0:	4641      	mov	r1, r8
 800efd2:	ebb2 0a01 	subs.w	sl, r2, r1
 800efd6:	4649      	mov	r1, r9
 800efd8:	eb63 0b01 	sbc.w	fp, r3, r1
 800efdc:	f04f 0200 	mov.w	r2, #0
 800efe0:	f04f 0300 	mov.w	r3, #0
 800efe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800efe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800efec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800eff0:	ebb2 040a 	subs.w	r4, r2, sl
 800eff4:	eb63 050b 	sbc.w	r5, r3, fp
 800eff8:	f04f 0200 	mov.w	r2, #0
 800effc:	f04f 0300 	mov.w	r3, #0
 800f000:	00eb      	lsls	r3, r5, #3
 800f002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f006:	00e2      	lsls	r2, r4, #3
 800f008:	4614      	mov	r4, r2
 800f00a:	461d      	mov	r5, r3
 800f00c:	4643      	mov	r3, r8
 800f00e:	18e3      	adds	r3, r4, r3
 800f010:	603b      	str	r3, [r7, #0]
 800f012:	464b      	mov	r3, r9
 800f014:	eb45 0303 	adc.w	r3, r5, r3
 800f018:	607b      	str	r3, [r7, #4]
 800f01a:	f04f 0200 	mov.w	r2, #0
 800f01e:	f04f 0300 	mov.w	r3, #0
 800f022:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f026:	4629      	mov	r1, r5
 800f028:	028b      	lsls	r3, r1, #10
 800f02a:	4621      	mov	r1, r4
 800f02c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f030:	4621      	mov	r1, r4
 800f032:	028a      	lsls	r2, r1, #10
 800f034:	4610      	mov	r0, r2
 800f036:	4619      	mov	r1, r3
 800f038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f03a:	2200      	movs	r2, #0
 800f03c:	61bb      	str	r3, [r7, #24]
 800f03e:	61fa      	str	r2, [r7, #28]
 800f040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f044:	f7f1 fe18 	bl	8000c78 <__aeabi_uldivmod>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4613      	mov	r3, r2
 800f04e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f050:	4b0b      	ldr	r3, [pc, #44]	@ (800f080 <HAL_RCC_GetSysClockFreq+0x200>)
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	0c1b      	lsrs	r3, r3, #16
 800f056:	f003 0303 	and.w	r3, r3, #3
 800f05a:	3301      	adds	r3, #1
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f064:	fbb2 f3f3 	udiv	r3, r2, r3
 800f068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f06a:	e002      	b.n	800f072 <HAL_RCC_GetSysClockFreq+0x1f2>
 800f06c:	4b05      	ldr	r3, [pc, #20]	@ (800f084 <HAL_RCC_GetSysClockFreq+0x204>)
 800f06e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f070:	bf00      	nop
 800f072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f074:	4618      	mov	r0, r3
 800f076:	3750      	adds	r7, #80	@ 0x50
 800f078:	46bd      	mov	sp, r7
 800f07a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f07e:	bf00      	nop
 800f080:	40023800 	.word	0x40023800
 800f084:	00f42400 	.word	0x00f42400
 800f088:	007a1200 	.word	0x007a1200

0800f08c <HAL_RCC_GetHCLKFreq>:
 800f08c:	b480      	push	{r7}
 800f08e:	af00      	add	r7, sp, #0
 800f090:	4b03      	ldr	r3, [pc, #12]	@ (800f0a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4618      	mov	r0, r3
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	20000000 	.word	0x20000000

0800f0a4 <HAL_RCC_GetPCLK1Freq>:
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	f7ff fff0 	bl	800f08c <HAL_RCC_GetHCLKFreq>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	4b05      	ldr	r3, [pc, #20]	@ (800f0c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	0a9b      	lsrs	r3, r3, #10
 800f0b4:	f003 0307 	and.w	r3, r3, #7
 800f0b8:	4903      	ldr	r1, [pc, #12]	@ (800f0c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f0ba:	5ccb      	ldrb	r3, [r1, r3]
 800f0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	40023800 	.word	0x40023800
 800f0c8:	080170fc 	.word	0x080170fc

0800f0cc <HAL_RCC_GetPCLK2Freq>:
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	f7ff ffdc 	bl	800f08c <HAL_RCC_GetHCLKFreq>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	4b05      	ldr	r3, [pc, #20]	@ (800f0ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	0b5b      	lsrs	r3, r3, #13
 800f0dc:	f003 0307 	and.w	r3, r3, #7
 800f0e0:	4903      	ldr	r1, [pc, #12]	@ (800f0f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f0e2:	5ccb      	ldrb	r3, [r1, r3]
 800f0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	40023800 	.word	0x40023800
 800f0f0:	080170fc 	.word	0x080170fc

0800f0f4 <HAL_SPI_Init>:
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <HAL_SPI_Init+0x12>
 800f102:	2301      	movs	r3, #1
 800f104:	e07b      	b.n	800f1fe <HAL_SPI_Init+0x10a>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d108      	bne.n	800f120 <HAL_SPI_Init+0x2c>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f116:	d009      	beq.n	800f12c <HAL_SPI_Init+0x38>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	61da      	str	r2, [r3, #28]
 800f11e:	e005      	b.n	800f12c <HAL_SPI_Init+0x38>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	611a      	str	r2, [r3, #16]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	615a      	str	r2, [r3, #20]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	629a      	str	r2, [r3, #40]	@ 0x28
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d106      	bne.n	800f14c <HAL_SPI_Init+0x58>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7f3 fb1e 	bl	8002788 <HAL_SPI_MspInit>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2202      	movs	r2, #2
 800f150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f162:	601a      	str	r2, [r3, #0]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f174:	431a      	orrs	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f17e:	431a      	orrs	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	691b      	ldr	r3, [r3, #16]
 800f184:	f003 0302 	and.w	r3, r3, #2
 800f188:	431a      	orrs	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	431a      	orrs	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	699b      	ldr	r3, [r3, #24]
 800f198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f19c:	431a      	orrs	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	69db      	ldr	r3, [r3, #28]
 800f1a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f1a6:	431a      	orrs	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a1b      	ldr	r3, [r3, #32]
 800f1ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1b0:	ea42 0103 	orr.w	r1, r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	430a      	orrs	r2, r1
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	0c1b      	lsrs	r3, r3, #16
 800f1ca:	f003 0104 	and.w	r1, r3, #4
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d2:	f003 0210 	and.w	r2, r3, #16
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	430a      	orrs	r2, r1
 800f1dc:	605a      	str	r2, [r3, #4]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	69da      	ldr	r2, [r3, #28]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f1ec:	61da      	str	r2, [r3, #28]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <HAL_SPI_Transmit>:
 800f206:	b580      	push	{r7, lr}
 800f208:	b088      	sub	sp, #32
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	603b      	str	r3, [r7, #0]
 800f212:	4613      	mov	r3, r2
 800f214:	80fb      	strh	r3, [r7, #6]
 800f216:	f7fd f9af 	bl	800c578 <HAL_GetTick>
 800f21a:	61f8      	str	r0, [r7, #28]
 800f21c:	88fb      	ldrh	r3, [r7, #6]
 800f21e:	837b      	strh	r3, [r7, #26]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f226:	b2db      	uxtb	r3, r3
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d001      	beq.n	800f230 <HAL_SPI_Transmit+0x2a>
 800f22c:	2302      	movs	r3, #2
 800f22e:	e12a      	b.n	800f486 <HAL_SPI_Transmit+0x280>
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d002      	beq.n	800f23c <HAL_SPI_Transmit+0x36>
 800f236:	88fb      	ldrh	r3, [r7, #6]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d101      	bne.n	800f240 <HAL_SPI_Transmit+0x3a>
 800f23c:	2301      	movs	r3, #1
 800f23e:	e122      	b.n	800f486 <HAL_SPI_Transmit+0x280>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f246:	2b01      	cmp	r3, #1
 800f248:	d101      	bne.n	800f24e <HAL_SPI_Transmit+0x48>
 800f24a:	2302      	movs	r3, #2
 800f24c:	e11b      	b.n	800f486 <HAL_SPI_Transmit+0x280>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2203      	movs	r2, #3
 800f25a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2200      	movs	r2, #0
 800f262:	655a      	str	r2, [r3, #84]	@ 0x54
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	631a      	str	r2, [r3, #48]	@ 0x30
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	88fa      	ldrh	r2, [r7, #6]
 800f26e:	869a      	strh	r2, [r3, #52]	@ 0x34
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	88fa      	ldrh	r2, [r7, #6]
 800f274:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2200      	movs	r2, #0
 800f27a:	639a      	str	r2, [r3, #56]	@ 0x38
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2200      	movs	r2, #0
 800f28c:	645a      	str	r2, [r3, #68]	@ 0x44
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2200      	movs	r2, #0
 800f292:	641a      	str	r2, [r3, #64]	@ 0x40
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	689b      	ldr	r3, [r3, #8]
 800f298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f29c:	d10f      	bne.n	800f2be <HAL_SPI_Transmit+0xb8>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2c8:	2b40      	cmp	r3, #64	@ 0x40
 800f2ca:	d007      	beq.n	800f2dc <HAL_SPI_Transmit+0xd6>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f2da:	601a      	str	r2, [r3, #0]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2e4:	d152      	bne.n	800f38c <HAL_SPI_Transmit+0x186>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <HAL_SPI_Transmit+0xee>
 800f2ee:	8b7b      	ldrh	r3, [r7, #26]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d145      	bne.n	800f380 <HAL_SPI_Transmit+0x17a>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2f8:	881a      	ldrh	r2, [r3, #0]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	60da      	str	r2, [r3, #12]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f304:	1c9a      	adds	r2, r3, #2
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	631a      	str	r2, [r3, #48]	@ 0x30
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f30e:	b29b      	uxth	r3, r3
 800f310:	3b01      	subs	r3, #1
 800f312:	b29a      	uxth	r2, r3
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f318:	e032      	b.n	800f380 <HAL_SPI_Transmit+0x17a>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	f003 0302 	and.w	r3, r3, #2
 800f324:	2b02      	cmp	r3, #2
 800f326:	d112      	bne.n	800f34e <HAL_SPI_Transmit+0x148>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f32c:	881a      	ldrh	r2, [r3, #0]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60da      	str	r2, [r3, #12]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f338:	1c9a      	adds	r2, r3, #2
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f342:	b29b      	uxth	r3, r3
 800f344:	3b01      	subs	r3, #1
 800f346:	b29a      	uxth	r2, r3
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f34c:	e018      	b.n	800f380 <HAL_SPI_Transmit+0x17a>
 800f34e:	f7fd f913 	bl	800c578 <HAL_GetTick>
 800f352:	4602      	mov	r2, r0
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d803      	bhi.n	800f366 <HAL_SPI_Transmit+0x160>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f364:	d102      	bne.n	800f36c <HAL_SPI_Transmit+0x166>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d109      	bne.n	800f380 <HAL_SPI_Transmit+0x17a>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f37c:	2303      	movs	r3, #3
 800f37e:	e082      	b.n	800f486 <HAL_SPI_Transmit+0x280>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f384:	b29b      	uxth	r3, r3
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1c7      	bne.n	800f31a <HAL_SPI_Transmit+0x114>
 800f38a:	e053      	b.n	800f434 <HAL_SPI_Transmit+0x22e>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <HAL_SPI_Transmit+0x194>
 800f394:	8b7b      	ldrh	r3, [r7, #26]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d147      	bne.n	800f42a <HAL_SPI_Transmit+0x224>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	330c      	adds	r3, #12
 800f3a4:	7812      	ldrb	r2, [r2, #0]
 800f3a6:	701a      	strb	r2, [r3, #0]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f3c0:	e033      	b.n	800f42a <HAL_SPI_Transmit+0x224>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	f003 0302 	and.w	r3, r3, #2
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d113      	bne.n	800f3f8 <HAL_SPI_Transmit+0x1f2>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	330c      	adds	r3, #12
 800f3da:	7812      	ldrb	r2, [r2, #0]
 800f3dc:	701a      	strb	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f3f6:	e018      	b.n	800f42a <HAL_SPI_Transmit+0x224>
 800f3f8:	f7fd f8be 	bl	800c578 <HAL_GetTick>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	1ad3      	subs	r3, r2, r3
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	429a      	cmp	r2, r3
 800f406:	d803      	bhi.n	800f410 <HAL_SPI_Transmit+0x20a>
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40e:	d102      	bne.n	800f416 <HAL_SPI_Transmit+0x210>
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d109      	bne.n	800f42a <HAL_SPI_Transmit+0x224>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2201      	movs	r2, #1
 800f41a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f426:	2303      	movs	r3, #3
 800f428:	e02d      	b.n	800f486 <HAL_SPI_Transmit+0x280>
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f42e:	b29b      	uxth	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d1c6      	bne.n	800f3c2 <HAL_SPI_Transmit+0x1bc>
 800f434:	69fa      	ldr	r2, [r7, #28]
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f000 fa59 	bl	800f8f0 <SPI_EndRxTxTransaction>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <HAL_SPI_Transmit+0x244>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2220      	movs	r2, #32
 800f448:	655a      	str	r2, [r3, #84]	@ 0x54
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10a      	bne.n	800f468 <HAL_SPI_Transmit+0x262>
 800f452:	2300      	movs	r3, #0
 800f454:	617b      	str	r3, [r7, #20]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	617b      	str	r3, [r7, #20]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	617b      	str	r3, [r7, #20]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2201      	movs	r2, #1
 800f46c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2200      	movs	r2, #0
 800f474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <HAL_SPI_Transmit+0x27e>
 800f480:	2301      	movs	r3, #1
 800f482:	e000      	b.n	800f486 <HAL_SPI_Transmit+0x280>
 800f484:	2300      	movs	r3, #0
 800f486:	4618      	mov	r0, r3
 800f488:	3720      	adds	r7, #32
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <HAL_SPI_TransmitReceive>:
 800f48e:	b580      	push	{r7, lr}
 800f490:	b08a      	sub	sp, #40	@ 0x28
 800f492:	af00      	add	r7, sp, #0
 800f494:	60f8      	str	r0, [r7, #12]
 800f496:	60b9      	str	r1, [r7, #8]
 800f498:	607a      	str	r2, [r7, #4]
 800f49a:	807b      	strh	r3, [r7, #2]
 800f49c:	2301      	movs	r3, #1
 800f49e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4a0:	f7fd f86a 	bl	800c578 <HAL_GetTick>
 800f4a4:	6238      	str	r0, [r7, #32]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f4ac:	77fb      	strb	r3, [r7, #31]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	61bb      	str	r3, [r7, #24]
 800f4b4:	887b      	ldrh	r3, [r7, #2]
 800f4b6:	82fb      	strh	r3, [r7, #22]
 800f4b8:	7ffb      	ldrb	r3, [r7, #31]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d00c      	beq.n	800f4d8 <HAL_SPI_TransmitReceive+0x4a>
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f4c4:	d106      	bne.n	800f4d4 <HAL_SPI_TransmitReceive+0x46>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d102      	bne.n	800f4d4 <HAL_SPI_TransmitReceive+0x46>
 800f4ce:	7ffb      	ldrb	r3, [r7, #31]
 800f4d0:	2b04      	cmp	r3, #4
 800f4d2:	d001      	beq.n	800f4d8 <HAL_SPI_TransmitReceive+0x4a>
 800f4d4:	2302      	movs	r3, #2
 800f4d6:	e17f      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d005      	beq.n	800f4ea <HAL_SPI_TransmitReceive+0x5c>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d002      	beq.n	800f4ea <HAL_SPI_TransmitReceive+0x5c>
 800f4e4:	887b      	ldrh	r3, [r7, #2]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <HAL_SPI_TransmitReceive+0x60>
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e174      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d101      	bne.n	800f4fc <HAL_SPI_TransmitReceive+0x6e>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	e16d      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2201      	movs	r2, #1
 800f500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d003      	beq.n	800f518 <HAL_SPI_TransmitReceive+0x8a>
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2205      	movs	r2, #5
 800f514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	655a      	str	r2, [r3, #84]	@ 0x54
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	639a      	str	r2, [r3, #56]	@ 0x38
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	887a      	ldrh	r2, [r7, #2]
 800f528:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	887a      	ldrh	r2, [r7, #2]
 800f52e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	631a      	str	r2, [r3, #48]	@ 0x30
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	887a      	ldrh	r2, [r7, #2]
 800f53a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	887a      	ldrh	r2, [r7, #2]
 800f540:	869a      	strh	r2, [r3, #52]	@ 0x34
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2200      	movs	r2, #0
 800f546:	641a      	str	r2, [r3, #64]	@ 0x40
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	645a      	str	r2, [r3, #68]	@ 0x44
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f558:	2b40      	cmp	r3, #64	@ 0x40
 800f55a:	d007      	beq.n	800f56c <HAL_SPI_TransmitReceive+0xde>
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f574:	d17e      	bne.n	800f674 <HAL_SPI_TransmitReceive+0x1e6>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d002      	beq.n	800f584 <HAL_SPI_TransmitReceive+0xf6>
 800f57e:	8afb      	ldrh	r3, [r7, #22]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d16c      	bne.n	800f65e <HAL_SPI_TransmitReceive+0x1d0>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f588:	881a      	ldrh	r2, [r3, #0]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	60da      	str	r2, [r3, #12]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f594:	1c9a      	adds	r2, r3, #2
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	631a      	str	r2, [r3, #48]	@ 0x30
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f5a8:	e059      	b.n	800f65e <HAL_SPI_TransmitReceive+0x1d0>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f003 0302 	and.w	r3, r3, #2
 800f5b4:	2b02      	cmp	r3, #2
 800f5b6:	d11b      	bne.n	800f5f0 <HAL_SPI_TransmitReceive+0x162>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d016      	beq.n	800f5f0 <HAL_SPI_TransmitReceive+0x162>
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d113      	bne.n	800f5f0 <HAL_SPI_TransmitReceive+0x162>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5cc:	881a      	ldrh	r2, [r3, #0]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	60da      	str	r2, [r3, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5d8:	1c9a      	adds	r2, r3, #2
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	f003 0301 	and.w	r3, r3, #1
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d119      	bne.n	800f632 <HAL_SPI_TransmitReceive+0x1a4>
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f602:	b29b      	uxth	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d014      	beq.n	800f632 <HAL_SPI_TransmitReceive+0x1a4>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68da      	ldr	r2, [r3, #12]
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f612:	b292      	uxth	r2, r2
 800f614:	801a      	strh	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f61a:	1c9a      	adds	r2, r3, #2
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	639a      	str	r2, [r3, #56]	@ 0x38
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f624:	b29b      	uxth	r3, r3
 800f626:	3b01      	subs	r3, #1
 800f628:	b29a      	uxth	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f62e:	2301      	movs	r3, #1
 800f630:	627b      	str	r3, [r7, #36]	@ 0x24
 800f632:	f7fc ffa1 	bl	800c578 <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f63e:	429a      	cmp	r2, r3
 800f640:	d80d      	bhi.n	800f65e <HAL_SPI_TransmitReceive+0x1d0>
 800f642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f648:	d009      	beq.n	800f65e <HAL_SPI_TransmitReceive+0x1d0>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2201      	movs	r2, #1
 800f64e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f65a:	2303      	movs	r3, #3
 800f65c:	e0bc      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f662:	b29b      	uxth	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1a0      	bne.n	800f5aa <HAL_SPI_TransmitReceive+0x11c>
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d19b      	bne.n	800f5aa <HAL_SPI_TransmitReceive+0x11c>
 800f672:	e082      	b.n	800f77a <HAL_SPI_TransmitReceive+0x2ec>
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d002      	beq.n	800f682 <HAL_SPI_TransmitReceive+0x1f4>
 800f67c:	8afb      	ldrh	r3, [r7, #22]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d171      	bne.n	800f766 <HAL_SPI_TransmitReceive+0x2d8>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	330c      	adds	r3, #12
 800f68c:	7812      	ldrb	r2, [r2, #0]
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	631a      	str	r2, [r3, #48]	@ 0x30
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f6a8:	e05d      	b.n	800f766 <HAL_SPI_TransmitReceive+0x2d8>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	f003 0302 	and.w	r3, r3, #2
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d11c      	bne.n	800f6f2 <HAL_SPI_TransmitReceive+0x264>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d017      	beq.n	800f6f2 <HAL_SPI_TransmitReceive+0x264>
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d114      	bne.n	800f6f2 <HAL_SPI_TransmitReceive+0x264>
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	330c      	adds	r3, #12
 800f6d2:	7812      	ldrb	r2, [r2, #0]
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6da:	1c5a      	adds	r2, r3, #1
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	631a      	str	r2, [r3, #48]	@ 0x30
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	3b01      	subs	r3, #1
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d119      	bne.n	800f734 <HAL_SPI_TransmitReceive+0x2a6>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f704:	b29b      	uxth	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	d014      	beq.n	800f734 <HAL_SPI_TransmitReceive+0x2a6>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68da      	ldr	r2, [r3, #12]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f714:	b2d2      	uxtb	r2, r2
 800f716:	701a      	strb	r2, [r3, #0]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	639a      	str	r2, [r3, #56]	@ 0x38
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f726:	b29b      	uxth	r3, r3
 800f728:	3b01      	subs	r3, #1
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f730:	2301      	movs	r3, #1
 800f732:	627b      	str	r3, [r7, #36]	@ 0x24
 800f734:	f7fc ff20 	bl	800c578 <HAL_GetTick>
 800f738:	4602      	mov	r2, r0
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f740:	429a      	cmp	r2, r3
 800f742:	d803      	bhi.n	800f74c <HAL_SPI_TransmitReceive+0x2be>
 800f744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f74a:	d102      	bne.n	800f752 <HAL_SPI_TransmitReceive+0x2c4>
 800f74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d109      	bne.n	800f766 <HAL_SPI_TransmitReceive+0x2d8>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2201      	movs	r2, #1
 800f756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f762:	2303      	movs	r3, #3
 800f764:	e038      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d19c      	bne.n	800f6aa <HAL_SPI_TransmitReceive+0x21c>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f774:	b29b      	uxth	r3, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	d197      	bne.n	800f6aa <HAL_SPI_TransmitReceive+0x21c>
 800f77a:	6a3a      	ldr	r2, [r7, #32]
 800f77c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f000 f8b6 	bl	800f8f0 <SPI_EndRxTxTransaction>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d008      	beq.n	800f79c <HAL_SPI_TransmitReceive+0x30e>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2220      	movs	r2, #32
 800f78e:	655a      	str	r2, [r3, #84]	@ 0x54
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2200      	movs	r2, #0
 800f794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f798:	2301      	movs	r3, #1
 800f79a:	e01d      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <HAL_SPI_TransmitReceive+0x32c>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	613b      	str	r3, [r7, #16]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	613b      	str	r3, [r7, #16]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	613b      	str	r3, [r7, #16]
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <HAL_SPI_TransmitReceive+0x348>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e000      	b.n	800f7d8 <HAL_SPI_TransmitReceive+0x34a>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3728      	adds	r7, #40	@ 0x28
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <SPI_WaitFlagStateUntilTimeout>:
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b088      	sub	sp, #32
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	71fb      	strb	r3, [r7, #7]
 800f7f0:	f7fc fec2 	bl	800c578 <HAL_GetTick>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f8:	1a9b      	subs	r3, r3, r2
 800f7fa:	683a      	ldr	r2, [r7, #0]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	61fb      	str	r3, [r7, #28]
 800f800:	f7fc feba 	bl	800c578 <HAL_GetTick>
 800f804:	61b8      	str	r0, [r7, #24]
 800f806:	4b39      	ldr	r3, [pc, #228]	@ (800f8ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	015b      	lsls	r3, r3, #5
 800f80c:	0d1b      	lsrs	r3, r3, #20
 800f80e:	69fa      	ldr	r2, [r7, #28]
 800f810:	fb02 f303 	mul.w	r3, r2, r3
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e055      	b.n	800f8c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81e:	d051      	beq.n	800f8c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
 800f820:	f7fc feaa 	bl	800c578 <HAL_GetTick>
 800f824:	4602      	mov	r2, r0
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	69fa      	ldr	r2, [r7, #28]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d902      	bls.n	800f836 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d13d      	bne.n	800f8b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	685a      	ldr	r2, [r3, #4]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f844:	605a      	str	r2, [r3, #4]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f84e:	d111      	bne.n	800f874 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f858:	d004      	beq.n	800f864 <SPI_WaitFlagStateUntilTimeout+0x84>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f862:	d107      	bne.n	800f874 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f87c:	d10f      	bne.n	800f89e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	681a      	ldr	r2, [r3, #0]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f88c:	601a      	str	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f89c:	601a      	str	r2, [r3, #0]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800f8ae:	2303      	movs	r3, #3
 800f8b0:	e018      	b.n	800f8e4 <SPI_WaitFlagStateUntilTimeout+0x104>
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d102      	bne.n	800f8be <SPI_WaitFlagStateUntilTimeout+0xde>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	61fb      	str	r3, [r7, #28]
 800f8bc:	e002      	b.n	800f8c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	617b      	str	r3, [r7, #20]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	689a      	ldr	r2, [r3, #8]
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	bf0c      	ite	eq
 800f8d4:	2301      	moveq	r3, #1
 800f8d6:	2300      	movne	r3, #0
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	461a      	mov	r2, r3
 800f8dc:	79fb      	ldrb	r3, [r7, #7]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d19a      	bne.n	800f818 <SPI_WaitFlagStateUntilTimeout+0x38>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3720      	adds	r7, #32
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	20000000 	.word	0x20000000

0800f8f0 <SPI_EndRxTxTransaction>:
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b088      	sub	sp, #32
 800f8f4:	af02      	add	r7, sp, #8
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	607a      	str	r2, [r7, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2201      	movs	r2, #1
 800f904:	2102      	movs	r1, #2
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f7ff ff6a 	bl	800f7e0 <SPI_WaitFlagStateUntilTimeout>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d007      	beq.n	800f922 <SPI_EndRxTxTransaction+0x32>
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f916:	f043 0220 	orr.w	r2, r3, #32
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	655a      	str	r2, [r3, #84]	@ 0x54
 800f91e:	2303      	movs	r3, #3
 800f920:	e032      	b.n	800f988 <SPI_EndRxTxTransaction+0x98>
 800f922:	4b1b      	ldr	r3, [pc, #108]	@ (800f990 <SPI_EndRxTxTransaction+0xa0>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a1b      	ldr	r2, [pc, #108]	@ (800f994 <SPI_EndRxTxTransaction+0xa4>)
 800f928:	fba2 2303 	umull	r2, r3, r2, r3
 800f92c:	0d5b      	lsrs	r3, r3, #21
 800f92e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f932:	fb02 f303 	mul.w	r3, r2, r3
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f940:	d112      	bne.n	800f968 <SPI_EndRxTxTransaction+0x78>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	2200      	movs	r2, #0
 800f94a:	2180      	movs	r1, #128	@ 0x80
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	f7ff ff47 	bl	800f7e0 <SPI_WaitFlagStateUntilTimeout>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d016      	beq.n	800f986 <SPI_EndRxTxTransaction+0x96>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f95c:	f043 0220 	orr.w	r2, r3, #32
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	655a      	str	r2, [r3, #84]	@ 0x54
 800f964:	2303      	movs	r3, #3
 800f966:	e00f      	b.n	800f988 <SPI_EndRxTxTransaction+0x98>
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <SPI_EndRxTxTransaction+0x94>
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	3b01      	subs	r3, #1
 800f972:	617b      	str	r3, [r7, #20]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f97e:	2b80      	cmp	r3, #128	@ 0x80
 800f980:	d0f2      	beq.n	800f968 <SPI_EndRxTxTransaction+0x78>
 800f982:	e000      	b.n	800f986 <SPI_EndRxTxTransaction+0x96>
 800f984:	bf00      	nop
 800f986:	2300      	movs	r3, #0
 800f988:	4618      	mov	r0, r3
 800f98a:	3718      	adds	r7, #24
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	20000000 	.word	0x20000000
 800f994:	165e9f81 	.word	0x165e9f81

0800f998 <HAL_TIM_Base_Init>:
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d101      	bne.n	800f9aa <HAL_TIM_Base_Init+0x12>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e041      	b.n	800fa2e <HAL_TIM_Base_Init+0x96>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <HAL_TIM_Base_Init+0x2c>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7f2 ff2a 	bl	8002818 <HAL_TIM_Base_MspInit>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	3304      	adds	r3, #4
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	4610      	mov	r0, r2
 800f9d8:	f000 fa70 	bl	800febc <TIM_Base_SetConfig>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <HAL_TIM_Base_Start_IT>:
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d001      	beq.n	800fa50 <HAL_TIM_Base_Start_IT+0x18>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	e044      	b.n	800fada <HAL_TIM_Base_Start_IT+0xa2>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2202      	movs	r2, #2
 800fa54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68da      	ldr	r2, [r3, #12]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f042 0201 	orr.w	r2, r2, #1
 800fa66:	60da      	str	r2, [r3, #12]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4a1e      	ldr	r2, [pc, #120]	@ (800fae8 <HAL_TIM_Base_Start_IT+0xb0>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d018      	beq.n	800faa4 <HAL_TIM_Base_Start_IT+0x6c>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa7a:	d013      	beq.n	800faa4 <HAL_TIM_Base_Start_IT+0x6c>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a1a      	ldr	r2, [pc, #104]	@ (800faec <HAL_TIM_Base_Start_IT+0xb4>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d00e      	beq.n	800faa4 <HAL_TIM_Base_Start_IT+0x6c>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a19      	ldr	r2, [pc, #100]	@ (800faf0 <HAL_TIM_Base_Start_IT+0xb8>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d009      	beq.n	800faa4 <HAL_TIM_Base_Start_IT+0x6c>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a17      	ldr	r2, [pc, #92]	@ (800faf4 <HAL_TIM_Base_Start_IT+0xbc>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d004      	beq.n	800faa4 <HAL_TIM_Base_Start_IT+0x6c>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a16      	ldr	r2, [pc, #88]	@ (800faf8 <HAL_TIM_Base_Start_IT+0xc0>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d111      	bne.n	800fac8 <HAL_TIM_Base_Start_IT+0x90>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	f003 0307 	and.w	r3, r3, #7
 800faae:	60fb      	str	r3, [r7, #12]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2b06      	cmp	r3, #6
 800fab4:	d010      	beq.n	800fad8 <HAL_TIM_Base_Start_IT+0xa0>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f042 0201 	orr.w	r2, r2, #1
 800fac4:	601a      	str	r2, [r3, #0]
 800fac6:	e007      	b.n	800fad8 <HAL_TIM_Base_Start_IT+0xa0>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f042 0201 	orr.w	r2, r2, #1
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	2300      	movs	r3, #0
 800fada:	4618      	mov	r0, r3
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	40010000 	.word	0x40010000
 800faec:	40000400 	.word	0x40000400
 800faf0:	40000800 	.word	0x40000800
 800faf4:	40000c00 	.word	0x40000c00
 800faf8:	40014000 	.word	0x40014000

0800fafc <HAL_TIM_IRQHandler>:
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	60fb      	str	r3, [r7, #12]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	60bb      	str	r3, [r7, #8]
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	f003 0302 	and.w	r3, r3, #2
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d020      	beq.n	800fb60 <HAL_TIM_IRQHandler+0x64>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f003 0302 	and.w	r3, r3, #2
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d01b      	beq.n	800fb60 <HAL_TIM_IRQHandler+0x64>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f06f 0202 	mvn.w	r2, #2
 800fb30:	611a      	str	r2, [r3, #16]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	771a      	strb	r2, [r3, #28]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	f003 0303 	and.w	r3, r3, #3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <HAL_TIM_IRQHandler+0x52>
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f999 	bl	800fe7e <HAL_TIM_IC_CaptureCallback>
 800fb4c:	e005      	b.n	800fb5a <HAL_TIM_IRQHandler+0x5e>
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 f98b 	bl	800fe6a <HAL_TIM_OC_DelayElapsedCallback>
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f99c 	bl	800fe92 <HAL_TIM_PWM_PulseFinishedCallback>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	771a      	strb	r2, [r3, #28]
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	f003 0304 	and.w	r3, r3, #4
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d020      	beq.n	800fbac <HAL_TIM_IRQHandler+0xb0>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f003 0304 	and.w	r3, r3, #4
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d01b      	beq.n	800fbac <HAL_TIM_IRQHandler+0xb0>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f06f 0204 	mvn.w	r2, #4
 800fb7c:	611a      	str	r2, [r3, #16]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2202      	movs	r2, #2
 800fb82:	771a      	strb	r2, [r3, #28]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	699b      	ldr	r3, [r3, #24]
 800fb8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d003      	beq.n	800fb9a <HAL_TIM_IRQHandler+0x9e>
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f973 	bl	800fe7e <HAL_TIM_IC_CaptureCallback>
 800fb98:	e005      	b.n	800fba6 <HAL_TIM_IRQHandler+0xaa>
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f965 	bl	800fe6a <HAL_TIM_OC_DelayElapsedCallback>
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 f976 	bl	800fe92 <HAL_TIM_PWM_PulseFinishedCallback>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	771a      	strb	r2, [r3, #28]
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	f003 0308 	and.w	r3, r3, #8
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d020      	beq.n	800fbf8 <HAL_TIM_IRQHandler+0xfc>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f003 0308 	and.w	r3, r3, #8
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d01b      	beq.n	800fbf8 <HAL_TIM_IRQHandler+0xfc>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f06f 0208 	mvn.w	r2, #8
 800fbc8:	611a      	str	r2, [r3, #16]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2204      	movs	r2, #4
 800fbce:	771a      	strb	r2, [r3, #28]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	69db      	ldr	r3, [r3, #28]
 800fbd6:	f003 0303 	and.w	r3, r3, #3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d003      	beq.n	800fbe6 <HAL_TIM_IRQHandler+0xea>
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 f94d 	bl	800fe7e <HAL_TIM_IC_CaptureCallback>
 800fbe4:	e005      	b.n	800fbf2 <HAL_TIM_IRQHandler+0xf6>
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f93f 	bl	800fe6a <HAL_TIM_OC_DelayElapsedCallback>
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 f950 	bl	800fe92 <HAL_TIM_PWM_PulseFinishedCallback>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	771a      	strb	r2, [r3, #28]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	f003 0310 	and.w	r3, r3, #16
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d020      	beq.n	800fc44 <HAL_TIM_IRQHandler+0x148>
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f003 0310 	and.w	r3, r3, #16
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d01b      	beq.n	800fc44 <HAL_TIM_IRQHandler+0x148>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f06f 0210 	mvn.w	r2, #16
 800fc14:	611a      	str	r2, [r3, #16]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2208      	movs	r2, #8
 800fc1a:	771a      	strb	r2, [r3, #28]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	69db      	ldr	r3, [r3, #28]
 800fc22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <HAL_TIM_IRQHandler+0x136>
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 f927 	bl	800fe7e <HAL_TIM_IC_CaptureCallback>
 800fc30:	e005      	b.n	800fc3e <HAL_TIM_IRQHandler+0x142>
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f919 	bl	800fe6a <HAL_TIM_OC_DelayElapsedCallback>
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 f92a 	bl	800fe92 <HAL_TIM_PWM_PulseFinishedCallback>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	771a      	strb	r2, [r3, #28]
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	f003 0301 	and.w	r3, r3, #1
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00c      	beq.n	800fc68 <HAL_TIM_IRQHandler+0x16c>
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d007      	beq.n	800fc68 <HAL_TIM_IRQHandler+0x16c>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f06f 0201 	mvn.w	r2, #1
 800fc60:	611a      	str	r2, [r3, #16]
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f7f1 fcda 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00c      	beq.n	800fc8c <HAL_TIM_IRQHandler+0x190>
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d007      	beq.n	800fc8c <HAL_TIM_IRQHandler+0x190>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fc84:	611a      	str	r2, [r3, #16]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fab0 	bl	80101ec <HAL_TIMEx_BreakCallback>
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00c      	beq.n	800fcb0 <HAL_TIM_IRQHandler+0x1b4>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d007      	beq.n	800fcb0 <HAL_TIM_IRQHandler+0x1b4>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fca8:	611a      	str	r2, [r3, #16]
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f8fb 	bl	800fea6 <HAL_TIM_TriggerCallback>
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	f003 0320 	and.w	r3, r3, #32
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00c      	beq.n	800fcd4 <HAL_TIM_IRQHandler+0x1d8>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f003 0320 	and.w	r3, r3, #32
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d007      	beq.n	800fcd4 <HAL_TIM_IRQHandler+0x1d8>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f06f 0220 	mvn.w	r2, #32
 800fccc:	611a      	str	r2, [r3, #16]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 fa82 	bl	80101d8 <HAL_TIMEx_CommutCallback>
 800fcd4:	bf00      	nop
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <HAL_TIM_ConfigClockSource>:
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b084      	sub	sp, #16
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
 800fce6:	2300      	movs	r3, #0
 800fce8:	73fb      	strb	r3, [r7, #15]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d101      	bne.n	800fcf8 <HAL_TIM_ConfigClockSource+0x1c>
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	e0b4      	b.n	800fe62 <HAL_TIM_ConfigClockSource+0x186>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2202      	movs	r2, #2
 800fd04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	60bb      	str	r3, [r7, #8]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fd16:	60bb      	str	r3, [r7, #8]
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd1e:	60bb      	str	r3, [r7, #8]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68ba      	ldr	r2, [r7, #8]
 800fd26:	609a      	str	r2, [r3, #8]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd30:	d03e      	beq.n	800fdb0 <HAL_TIM_ConfigClockSource+0xd4>
 800fd32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd36:	f200 8087 	bhi.w	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd3e:	f000 8086 	beq.w	800fe4e <HAL_TIM_ConfigClockSource+0x172>
 800fd42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd46:	d87f      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd48:	2b70      	cmp	r3, #112	@ 0x70
 800fd4a:	d01a      	beq.n	800fd82 <HAL_TIM_ConfigClockSource+0xa6>
 800fd4c:	2b70      	cmp	r3, #112	@ 0x70
 800fd4e:	d87b      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd50:	2b60      	cmp	r3, #96	@ 0x60
 800fd52:	d050      	beq.n	800fdf6 <HAL_TIM_ConfigClockSource+0x11a>
 800fd54:	2b60      	cmp	r3, #96	@ 0x60
 800fd56:	d877      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd58:	2b50      	cmp	r3, #80	@ 0x50
 800fd5a:	d03c      	beq.n	800fdd6 <HAL_TIM_ConfigClockSource+0xfa>
 800fd5c:	2b50      	cmp	r3, #80	@ 0x50
 800fd5e:	d873      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd60:	2b40      	cmp	r3, #64	@ 0x40
 800fd62:	d058      	beq.n	800fe16 <HAL_TIM_ConfigClockSource+0x13a>
 800fd64:	2b40      	cmp	r3, #64	@ 0x40
 800fd66:	d86f      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd68:	2b30      	cmp	r3, #48	@ 0x30
 800fd6a:	d064      	beq.n	800fe36 <HAL_TIM_ConfigClockSource+0x15a>
 800fd6c:	2b30      	cmp	r3, #48	@ 0x30
 800fd6e:	d86b      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd70:	2b20      	cmp	r3, #32
 800fd72:	d060      	beq.n	800fe36 <HAL_TIM_ConfigClockSource+0x15a>
 800fd74:	2b20      	cmp	r3, #32
 800fd76:	d867      	bhi.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d05c      	beq.n	800fe36 <HAL_TIM_ConfigClockSource+0x15a>
 800fd7c:	2b10      	cmp	r3, #16
 800fd7e:	d05a      	beq.n	800fe36 <HAL_TIM_ConfigClockSource+0x15a>
 800fd80:	e062      	b.n	800fe48 <HAL_TIM_ConfigClockSource+0x16c>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6818      	ldr	r0, [r3, #0]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	6899      	ldr	r1, [r3, #8]
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	685a      	ldr	r2, [r3, #4]
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	f000 f993 	bl	80100bc <TIM_ETR_SetConfig>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	60bb      	str	r3, [r7, #8]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fda4:	60bb      	str	r3, [r7, #8]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	609a      	str	r2, [r3, #8]
 800fdae:	e04f      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6818      	ldr	r0, [r3, #0]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	6899      	ldr	r1, [r3, #8]
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	f000 f97c 	bl	80100bc <TIM_ETR_SetConfig>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	689a      	ldr	r2, [r3, #8]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fdd2:	609a      	str	r2, [r3, #8]
 800fdd4:	e03c      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6818      	ldr	r0, [r3, #0]
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	6859      	ldr	r1, [r3, #4]
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	461a      	mov	r2, r3
 800fde4:	f000 f8f0 	bl	800ffc8 <TIM_TI1_ConfigInputStage>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2150      	movs	r1, #80	@ 0x50
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f000 f949 	bl	8010086 <TIM_ITRx_SetConfig>
 800fdf4:	e02c      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	6859      	ldr	r1, [r3, #4]
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	461a      	mov	r2, r3
 800fe04:	f000 f90f 	bl	8010026 <TIM_TI2_ConfigInputStage>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2160      	movs	r1, #96	@ 0x60
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 f939 	bl	8010086 <TIM_ITRx_SetConfig>
 800fe14:	e01c      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6818      	ldr	r0, [r3, #0]
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	6859      	ldr	r1, [r3, #4]
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	461a      	mov	r2, r3
 800fe24:	f000 f8d0 	bl	800ffc8 <TIM_TI1_ConfigInputStage>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2140      	movs	r1, #64	@ 0x40
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f000 f929 	bl	8010086 <TIM_ITRx_SetConfig>
 800fe34:	e00c      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4610      	mov	r0, r2
 800fe42:	f000 f920 	bl	8010086 <TIM_ITRx_SetConfig>
 800fe46:	e003      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	73fb      	strb	r3, [r7, #15]
 800fe4c:	e000      	b.n	800fe50 <HAL_TIM_ConfigClockSource+0x174>
 800fe4e:	bf00      	nop
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2201      	movs	r2, #1
 800fe54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <HAL_TIM_OC_DelayElapsedCallback>:
 800fe6a:	b480      	push	{r7}
 800fe6c:	b083      	sub	sp, #12
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	bf00      	nop
 800fe74:	370c      	adds	r7, #12
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr

0800fe7e <HAL_TIM_IC_CaptureCallback>:
 800fe7e:	b480      	push	{r7}
 800fe80:	b083      	sub	sp, #12
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
 800fe86:	bf00      	nop
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr

0800fe92 <HAL_TIM_PWM_PulseFinishedCallback>:
 800fe92:	b480      	push	{r7}
 800fe94:	b083      	sub	sp, #12
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	bf00      	nop
 800fe9c:	370c      	adds	r7, #12
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr

0800fea6 <HAL_TIM_TriggerCallback>:
 800fea6:	b480      	push	{r7}
 800fea8:	b083      	sub	sp, #12
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
 800feae:	bf00      	nop
 800feb0:	370c      	adds	r7, #12
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
	...

0800febc <TIM_Base_SetConfig>:
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	60fb      	str	r3, [r7, #12]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4a37      	ldr	r2, [pc, #220]	@ (800ffac <TIM_Base_SetConfig+0xf0>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d00f      	beq.n	800fef4 <TIM_Base_SetConfig+0x38>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800feda:	d00b      	beq.n	800fef4 <TIM_Base_SetConfig+0x38>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4a34      	ldr	r2, [pc, #208]	@ (800ffb0 <TIM_Base_SetConfig+0xf4>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d007      	beq.n	800fef4 <TIM_Base_SetConfig+0x38>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4a33      	ldr	r2, [pc, #204]	@ (800ffb4 <TIM_Base_SetConfig+0xf8>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d003      	beq.n	800fef4 <TIM_Base_SetConfig+0x38>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4a32      	ldr	r2, [pc, #200]	@ (800ffb8 <TIM_Base_SetConfig+0xfc>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d108      	bne.n	800ff06 <TIM_Base_SetConfig+0x4a>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fefa:	60fb      	str	r3, [r7, #12]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	60fb      	str	r3, [r7, #12]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4a28      	ldr	r2, [pc, #160]	@ (800ffac <TIM_Base_SetConfig+0xf0>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d01b      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff14:	d017      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a25      	ldr	r2, [pc, #148]	@ (800ffb0 <TIM_Base_SetConfig+0xf4>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d013      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4a24      	ldr	r2, [pc, #144]	@ (800ffb4 <TIM_Base_SetConfig+0xf8>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d00f      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	4a23      	ldr	r2, [pc, #140]	@ (800ffb8 <TIM_Base_SetConfig+0xfc>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d00b      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4a22      	ldr	r2, [pc, #136]	@ (800ffbc <TIM_Base_SetConfig+0x100>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d007      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4a21      	ldr	r2, [pc, #132]	@ (800ffc0 <TIM_Base_SetConfig+0x104>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d003      	beq.n	800ff46 <TIM_Base_SetConfig+0x8a>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4a20      	ldr	r2, [pc, #128]	@ (800ffc4 <TIM_Base_SetConfig+0x108>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d108      	bne.n	800ff58 <TIM_Base_SetConfig+0x9c>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff4c:	60fb      	str	r3, [r7, #12]
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	695b      	ldr	r3, [r3, #20]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	689a      	ldr	r2, [r3, #8]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	629a      	str	r2, [r3, #40]	@ 0x28
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4a0c      	ldr	r2, [pc, #48]	@ (800ffac <TIM_Base_SetConfig+0xf0>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d103      	bne.n	800ff86 <TIM_Base_SetConfig+0xca>
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	691a      	ldr	r2, [r3, #16]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f043 0204 	orr.w	r2, r3, #4
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	601a      	str	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2201      	movs	r2, #1
 800ff96:	615a      	str	r2, [r3, #20]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	bf00      	nop
 800ffa0:	3714      	adds	r7, #20
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	40010000 	.word	0x40010000
 800ffb0:	40000400 	.word	0x40000400
 800ffb4:	40000800 	.word	0x40000800
 800ffb8:	40000c00 	.word	0x40000c00
 800ffbc:	40014000 	.word	0x40014000
 800ffc0:	40014400 	.word	0x40014400
 800ffc4:	40014800 	.word	0x40014800

0800ffc8 <TIM_TI1_ConfigInputStage>:
 800ffc8:	b480      	push	{r7}
 800ffca:	b087      	sub	sp, #28
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	6a1b      	ldr	r3, [r3, #32]
 800ffd8:	617b      	str	r3, [r7, #20]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6a1b      	ldr	r3, [r3, #32]
 800ffde:	f023 0201 	bic.w	r2, r3, #1
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	621a      	str	r2, [r3, #32]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	699b      	ldr	r3, [r3, #24]
 800ffea:	613b      	str	r3, [r7, #16]
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fff2:	613b      	str	r3, [r7, #16]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	011b      	lsls	r3, r3, #4
 800fff8:	693a      	ldr	r2, [r7, #16]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	613b      	str	r3, [r7, #16]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	f023 030a 	bic.w	r3, r3, #10
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	697a      	ldr	r2, [r7, #20]
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	4313      	orrs	r3, r2
 801000c:	617b      	str	r3, [r7, #20]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	693a      	ldr	r2, [r7, #16]
 8010012:	619a      	str	r2, [r3, #24]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	621a      	str	r2, [r3, #32]
 801001a:	bf00      	nop
 801001c:	371c      	adds	r7, #28
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <TIM_TI2_ConfigInputStage>:
 8010026:	b480      	push	{r7}
 8010028:	b087      	sub	sp, #28
 801002a:	af00      	add	r7, sp, #0
 801002c:	60f8      	str	r0, [r7, #12]
 801002e:	60b9      	str	r1, [r7, #8]
 8010030:	607a      	str	r2, [r7, #4]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6a1b      	ldr	r3, [r3, #32]
 8010036:	617b      	str	r3, [r7, #20]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6a1b      	ldr	r3, [r3, #32]
 801003c:	f023 0210 	bic.w	r2, r3, #16
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	621a      	str	r2, [r3, #32]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	699b      	ldr	r3, [r3, #24]
 8010048:	613b      	str	r3, [r7, #16]
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010050:	613b      	str	r3, [r7, #16]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	031b      	lsls	r3, r3, #12
 8010056:	693a      	ldr	r2, [r7, #16]
 8010058:	4313      	orrs	r3, r2
 801005a:	613b      	str	r3, [r7, #16]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010062:	617b      	str	r3, [r7, #20]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	011b      	lsls	r3, r3, #4
 8010068:	697a      	ldr	r2, [r7, #20]
 801006a:	4313      	orrs	r3, r2
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	693a      	ldr	r2, [r7, #16]
 8010072:	619a      	str	r2, [r3, #24]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	697a      	ldr	r2, [r7, #20]
 8010078:	621a      	str	r2, [r3, #32]
 801007a:	bf00      	nop
 801007c:	371c      	adds	r7, #28
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr

08010086 <TIM_ITRx_SetConfig>:
 8010086:	b480      	push	{r7}
 8010088:	b085      	sub	sp, #20
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	6039      	str	r1, [r7, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	689b      	ldr	r3, [r3, #8]
 8010094:	60fb      	str	r3, [r7, #12]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801009c:	60fb      	str	r3, [r7, #12]
 801009e:	683a      	ldr	r2, [r7, #0]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	4313      	orrs	r3, r2
 80100a4:	f043 0307 	orr.w	r3, r3, #7
 80100a8:	60fb      	str	r3, [r7, #12]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	609a      	str	r2, [r3, #8]
 80100b0:	bf00      	nop
 80100b2:	3714      	adds	r7, #20
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <TIM_ETR_SetConfig>:
 80100bc:	b480      	push	{r7}
 80100be:	b087      	sub	sp, #28
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	689b      	ldr	r3, [r3, #8]
 80100ce:	617b      	str	r3, [r7, #20]
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80100d6:	617b      	str	r3, [r7, #20]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	021a      	lsls	r2, r3, #8
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	431a      	orrs	r2, r3
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	617b      	str	r3, [r7, #20]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	609a      	str	r2, [r3, #8]
 80100f0:	bf00      	nop
 80100f2:	371c      	adds	r7, #28
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <HAL_TIMEx_MasterConfigSynchronization>:
 80100fc:	b480      	push	{r7}
 80100fe:	b085      	sub	sp, #20
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801010c:	2b01      	cmp	r3, #1
 801010e:	d101      	bne.n	8010114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010110:	2302      	movs	r3, #2
 8010112:	e050      	b.n	80101b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2202      	movs	r2, #2
 8010120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	60fb      	str	r3, [r7, #12]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	689b      	ldr	r3, [r3, #8]
 8010132:	60bb      	str	r3, [r7, #8]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4313      	orrs	r3, r2
 8010144:	60fb      	str	r3, [r7, #12]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	605a      	str	r2, [r3, #4]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4a1c      	ldr	r2, [pc, #112]	@ (80101c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d018      	beq.n	801018a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010160:	d013      	beq.n	801018a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a18      	ldr	r2, [pc, #96]	@ (80101c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d00e      	beq.n	801018a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a16      	ldr	r2, [pc, #88]	@ (80101cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d009      	beq.n	801018a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a15      	ldr	r2, [pc, #84]	@ (80101d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d004      	beq.n	801018a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a13      	ldr	r2, [pc, #76]	@ (80101d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d10c      	bne.n	80101a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010190:	60bb      	str	r3, [r7, #8]
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	4313      	orrs	r3, r2
 801019a:	60bb      	str	r3, [r7, #8]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	68ba      	ldr	r2, [r7, #8]
 80101a2:	609a      	str	r2, [r3, #8]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80101b4:	2300      	movs	r3, #0
 80101b6:	4618      	mov	r0, r3
 80101b8:	3714      	adds	r7, #20
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	40010000 	.word	0x40010000
 80101c8:	40000400 	.word	0x40000400
 80101cc:	40000800 	.word	0x40000800
 80101d0:	40000c00 	.word	0x40000c00
 80101d4:	40014000 	.word	0x40014000

080101d8 <HAL_TIMEx_CommutCallback>:
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <HAL_TIMEx_BreakCallback>:
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <HAL_UART_Init>:
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d101      	bne.n	8010212 <HAL_UART_Init+0x12>
 801020e:	2301      	movs	r3, #1
 8010210:	e042      	b.n	8010298 <HAL_UART_Init+0x98>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2b00      	cmp	r3, #0
 801021c:	d106      	bne.n	801022c <HAL_UART_Init+0x2c>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f83a 	bl	80102a0 <HAL_UART_MspInit>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2224      	movs	r2, #36	@ 0x24
 8010230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	68da      	ldr	r2, [r3, #12]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010242:	60da      	str	r2, [r3, #12]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 f835 	bl	80102b4 <UART_SetConfig>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	691a      	ldr	r2, [r3, #16]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010258:	611a      	str	r2, [r3, #16]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	695a      	ldr	r2, [r3, #20]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010268:	615a      	str	r2, [r3, #20]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	68da      	ldr	r2, [r3, #12]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010278:	60da      	str	r2, [r3, #12]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	645a      	str	r2, [r3, #68]	@ 0x44
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2220      	movs	r2, #32
 8010284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2220      	movs	r2, #32
 801028c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	635a      	str	r2, [r3, #52]	@ 0x34
 8010296:	2300      	movs	r3, #0
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <HAL_UART_MspInit>:
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <UART_SetConfig>:
 80102b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102b8:	b0c0      	sub	sp, #256	@ 0x100
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80102c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80102cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102d0:	68d9      	ldr	r1, [r3, #12]
 80102d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	ea40 0301 	orr.w	r3, r0, r1
 80102dc:	6113      	str	r3, [r2, #16]
 80102de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102e2:	689a      	ldr	r2, [r3, #8]
 80102e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102e8:	691b      	ldr	r3, [r3, #16]
 80102ea:	431a      	orrs	r2, r3
 80102ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102f0:	695b      	ldr	r3, [r3, #20]
 80102f2:	431a      	orrs	r2, r3
 80102f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102f8:	69db      	ldr	r3, [r3, #28]
 80102fa:	4313      	orrs	r3, r2
 80102fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8010300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801030c:	f021 010c 	bic.w	r1, r1, #12
 8010310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801031a:	430b      	orrs	r3, r1
 801031c:	60d3      	str	r3, [r2, #12]
 801031e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	695b      	ldr	r3, [r3, #20]
 8010326:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801032a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801032e:	6999      	ldr	r1, [r3, #24]
 8010330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	ea40 0301 	orr.w	r3, r0, r1
 801033a:	6153      	str	r3, [r2, #20]
 801033c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4b8f      	ldr	r3, [pc, #572]	@ (8010580 <UART_SetConfig+0x2cc>)
 8010344:	429a      	cmp	r2, r3
 8010346:	d005      	beq.n	8010354 <UART_SetConfig+0xa0>
 8010348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	4b8d      	ldr	r3, [pc, #564]	@ (8010584 <UART_SetConfig+0x2d0>)
 8010350:	429a      	cmp	r2, r3
 8010352:	d104      	bne.n	801035e <UART_SetConfig+0xaa>
 8010354:	f7fe feba 	bl	800f0cc <HAL_RCC_GetPCLK2Freq>
 8010358:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801035c:	e003      	b.n	8010366 <UART_SetConfig+0xb2>
 801035e:	f7fe fea1 	bl	800f0a4 <HAL_RCC_GetPCLK1Freq>
 8010362:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801036a:	69db      	ldr	r3, [r3, #28]
 801036c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010370:	f040 810c 	bne.w	801058c <UART_SetConfig+0x2d8>
 8010374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010378:	2200      	movs	r2, #0
 801037a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801037e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010386:	4622      	mov	r2, r4
 8010388:	462b      	mov	r3, r5
 801038a:	1891      	adds	r1, r2, r2
 801038c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801038e:	415b      	adcs	r3, r3
 8010390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010396:	4621      	mov	r1, r4
 8010398:	eb12 0801 	adds.w	r8, r2, r1
 801039c:	4629      	mov	r1, r5
 801039e:	eb43 0901 	adc.w	r9, r3, r1
 80103a2:	f04f 0200 	mov.w	r2, #0
 80103a6:	f04f 0300 	mov.w	r3, #0
 80103aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80103ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80103b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80103b6:	4690      	mov	r8, r2
 80103b8:	4699      	mov	r9, r3
 80103ba:	4623      	mov	r3, r4
 80103bc:	eb18 0303 	adds.w	r3, r8, r3
 80103c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80103c4:	462b      	mov	r3, r5
 80103c6:	eb49 0303 	adc.w	r3, r9, r3
 80103ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80103ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80103da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80103de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80103e2:	460b      	mov	r3, r1
 80103e4:	18db      	adds	r3, r3, r3
 80103e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80103e8:	4613      	mov	r3, r2
 80103ea:	eb42 0303 	adc.w	r3, r2, r3
 80103ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80103f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80103f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80103f8:	f7f0 fc3e 	bl	8000c78 <__aeabi_uldivmod>
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	4b61      	ldr	r3, [pc, #388]	@ (8010588 <UART_SetConfig+0x2d4>)
 8010402:	fba3 2302 	umull	r2, r3, r3, r2
 8010406:	095b      	lsrs	r3, r3, #5
 8010408:	011c      	lsls	r4, r3, #4
 801040a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801040e:	2200      	movs	r2, #0
 8010410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010414:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801041c:	4642      	mov	r2, r8
 801041e:	464b      	mov	r3, r9
 8010420:	1891      	adds	r1, r2, r2
 8010422:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010424:	415b      	adcs	r3, r3
 8010426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801042c:	4641      	mov	r1, r8
 801042e:	eb12 0a01 	adds.w	sl, r2, r1
 8010432:	4649      	mov	r1, r9
 8010434:	eb43 0b01 	adc.w	fp, r3, r1
 8010438:	f04f 0200 	mov.w	r2, #0
 801043c:	f04f 0300 	mov.w	r3, #0
 8010440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801044c:	4692      	mov	sl, r2
 801044e:	469b      	mov	fp, r3
 8010450:	4643      	mov	r3, r8
 8010452:	eb1a 0303 	adds.w	r3, sl, r3
 8010456:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801045a:	464b      	mov	r3, r9
 801045c:	eb4b 0303 	adc.w	r3, fp, r3
 8010460:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010470:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010478:	460b      	mov	r3, r1
 801047a:	18db      	adds	r3, r3, r3
 801047c:	643b      	str	r3, [r7, #64]	@ 0x40
 801047e:	4613      	mov	r3, r2
 8010480:	eb42 0303 	adc.w	r3, r2, r3
 8010484:	647b      	str	r3, [r7, #68]	@ 0x44
 8010486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801048a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801048e:	f7f0 fbf3 	bl	8000c78 <__aeabi_uldivmod>
 8010492:	4602      	mov	r2, r0
 8010494:	460b      	mov	r3, r1
 8010496:	4611      	mov	r1, r2
 8010498:	4b3b      	ldr	r3, [pc, #236]	@ (8010588 <UART_SetConfig+0x2d4>)
 801049a:	fba3 2301 	umull	r2, r3, r3, r1
 801049e:	095b      	lsrs	r3, r3, #5
 80104a0:	2264      	movs	r2, #100	@ 0x64
 80104a2:	fb02 f303 	mul.w	r3, r2, r3
 80104a6:	1acb      	subs	r3, r1, r3
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80104ae:	4b36      	ldr	r3, [pc, #216]	@ (8010588 <UART_SetConfig+0x2d4>)
 80104b0:	fba3 2302 	umull	r2, r3, r3, r2
 80104b4:	095b      	lsrs	r3, r3, #5
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80104bc:	441c      	add	r4, r3
 80104be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80104c2:	2200      	movs	r2, #0
 80104c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80104c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80104cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80104d0:	4642      	mov	r2, r8
 80104d2:	464b      	mov	r3, r9
 80104d4:	1891      	adds	r1, r2, r2
 80104d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80104d8:	415b      	adcs	r3, r3
 80104da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80104e0:	4641      	mov	r1, r8
 80104e2:	1851      	adds	r1, r2, r1
 80104e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80104e6:	4649      	mov	r1, r9
 80104e8:	414b      	adcs	r3, r1
 80104ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ec:	f04f 0200 	mov.w	r2, #0
 80104f0:	f04f 0300 	mov.w	r3, #0
 80104f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80104f8:	4659      	mov	r1, fp
 80104fa:	00cb      	lsls	r3, r1, #3
 80104fc:	4651      	mov	r1, sl
 80104fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010502:	4651      	mov	r1, sl
 8010504:	00ca      	lsls	r2, r1, #3
 8010506:	4610      	mov	r0, r2
 8010508:	4619      	mov	r1, r3
 801050a:	4603      	mov	r3, r0
 801050c:	4642      	mov	r2, r8
 801050e:	189b      	adds	r3, r3, r2
 8010510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010514:	464b      	mov	r3, r9
 8010516:	460a      	mov	r2, r1
 8010518:	eb42 0303 	adc.w	r3, r2, r3
 801051c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801052c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010534:	460b      	mov	r3, r1
 8010536:	18db      	adds	r3, r3, r3
 8010538:	62bb      	str	r3, [r7, #40]	@ 0x28
 801053a:	4613      	mov	r3, r2
 801053c:	eb42 0303 	adc.w	r3, r2, r3
 8010540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801054a:	f7f0 fb95 	bl	8000c78 <__aeabi_uldivmod>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	4b0d      	ldr	r3, [pc, #52]	@ (8010588 <UART_SetConfig+0x2d4>)
 8010554:	fba3 1302 	umull	r1, r3, r3, r2
 8010558:	095b      	lsrs	r3, r3, #5
 801055a:	2164      	movs	r1, #100	@ 0x64
 801055c:	fb01 f303 	mul.w	r3, r1, r3
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	3332      	adds	r3, #50	@ 0x32
 8010566:	4a08      	ldr	r2, [pc, #32]	@ (8010588 <UART_SetConfig+0x2d4>)
 8010568:	fba2 2303 	umull	r2, r3, r2, r3
 801056c:	095b      	lsrs	r3, r3, #5
 801056e:	f003 0207 	and.w	r2, r3, #7
 8010572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4422      	add	r2, r4
 801057a:	609a      	str	r2, [r3, #8]
 801057c:	e106      	b.n	801078c <UART_SetConfig+0x4d8>
 801057e:	bf00      	nop
 8010580:	40011000 	.word	0x40011000
 8010584:	40011400 	.word	0x40011400
 8010588:	51eb851f 	.word	0x51eb851f
 801058c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010590:	2200      	movs	r2, #0
 8010592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010596:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801059a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801059e:	4642      	mov	r2, r8
 80105a0:	464b      	mov	r3, r9
 80105a2:	1891      	adds	r1, r2, r2
 80105a4:	6239      	str	r1, [r7, #32]
 80105a6:	415b      	adcs	r3, r3
 80105a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80105aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80105ae:	4641      	mov	r1, r8
 80105b0:	1854      	adds	r4, r2, r1
 80105b2:	4649      	mov	r1, r9
 80105b4:	eb43 0501 	adc.w	r5, r3, r1
 80105b8:	f04f 0200 	mov.w	r2, #0
 80105bc:	f04f 0300 	mov.w	r3, #0
 80105c0:	00eb      	lsls	r3, r5, #3
 80105c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105c6:	00e2      	lsls	r2, r4, #3
 80105c8:	4614      	mov	r4, r2
 80105ca:	461d      	mov	r5, r3
 80105cc:	4643      	mov	r3, r8
 80105ce:	18e3      	adds	r3, r4, r3
 80105d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80105d4:	464b      	mov	r3, r9
 80105d6:	eb45 0303 	adc.w	r3, r5, r3
 80105da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80105de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80105ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80105ee:	f04f 0200 	mov.w	r2, #0
 80105f2:	f04f 0300 	mov.w	r3, #0
 80105f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80105fa:	4629      	mov	r1, r5
 80105fc:	008b      	lsls	r3, r1, #2
 80105fe:	4621      	mov	r1, r4
 8010600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010604:	4621      	mov	r1, r4
 8010606:	008a      	lsls	r2, r1, #2
 8010608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801060c:	f7f0 fb34 	bl	8000c78 <__aeabi_uldivmod>
 8010610:	4602      	mov	r2, r0
 8010612:	460b      	mov	r3, r1
 8010614:	4b60      	ldr	r3, [pc, #384]	@ (8010798 <UART_SetConfig+0x4e4>)
 8010616:	fba3 2302 	umull	r2, r3, r3, r2
 801061a:	095b      	lsrs	r3, r3, #5
 801061c:	011c      	lsls	r4, r3, #4
 801061e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010622:	2200      	movs	r2, #0
 8010624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010628:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801062c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010630:	4642      	mov	r2, r8
 8010632:	464b      	mov	r3, r9
 8010634:	1891      	adds	r1, r2, r2
 8010636:	61b9      	str	r1, [r7, #24]
 8010638:	415b      	adcs	r3, r3
 801063a:	61fb      	str	r3, [r7, #28]
 801063c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010640:	4641      	mov	r1, r8
 8010642:	1851      	adds	r1, r2, r1
 8010644:	6139      	str	r1, [r7, #16]
 8010646:	4649      	mov	r1, r9
 8010648:	414b      	adcs	r3, r1
 801064a:	617b      	str	r3, [r7, #20]
 801064c:	f04f 0200 	mov.w	r2, #0
 8010650:	f04f 0300 	mov.w	r3, #0
 8010654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010658:	4659      	mov	r1, fp
 801065a:	00cb      	lsls	r3, r1, #3
 801065c:	4651      	mov	r1, sl
 801065e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010662:	4651      	mov	r1, sl
 8010664:	00ca      	lsls	r2, r1, #3
 8010666:	4610      	mov	r0, r2
 8010668:	4619      	mov	r1, r3
 801066a:	4603      	mov	r3, r0
 801066c:	4642      	mov	r2, r8
 801066e:	189b      	adds	r3, r3, r2
 8010670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010674:	464b      	mov	r3, r9
 8010676:	460a      	mov	r2, r1
 8010678:	eb42 0303 	adc.w	r3, r2, r3
 801067c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	67bb      	str	r3, [r7, #120]	@ 0x78
 801068a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801068c:	f04f 0200 	mov.w	r2, #0
 8010690:	f04f 0300 	mov.w	r3, #0
 8010694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010698:	4649      	mov	r1, r9
 801069a:	008b      	lsls	r3, r1, #2
 801069c:	4641      	mov	r1, r8
 801069e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80106a2:	4641      	mov	r1, r8
 80106a4:	008a      	lsls	r2, r1, #2
 80106a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80106aa:	f7f0 fae5 	bl	8000c78 <__aeabi_uldivmod>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4611      	mov	r1, r2
 80106b4:	4b38      	ldr	r3, [pc, #224]	@ (8010798 <UART_SetConfig+0x4e4>)
 80106b6:	fba3 2301 	umull	r2, r3, r3, r1
 80106ba:	095b      	lsrs	r3, r3, #5
 80106bc:	2264      	movs	r2, #100	@ 0x64
 80106be:	fb02 f303 	mul.w	r3, r2, r3
 80106c2:	1acb      	subs	r3, r1, r3
 80106c4:	011b      	lsls	r3, r3, #4
 80106c6:	3332      	adds	r3, #50	@ 0x32
 80106c8:	4a33      	ldr	r2, [pc, #204]	@ (8010798 <UART_SetConfig+0x4e4>)
 80106ca:	fba2 2303 	umull	r2, r3, r2, r3
 80106ce:	095b      	lsrs	r3, r3, #5
 80106d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80106d4:	441c      	add	r4, r3
 80106d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106da:	2200      	movs	r2, #0
 80106dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80106de:	677a      	str	r2, [r7, #116]	@ 0x74
 80106e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80106e4:	4642      	mov	r2, r8
 80106e6:	464b      	mov	r3, r9
 80106e8:	1891      	adds	r1, r2, r2
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	415b      	adcs	r3, r3
 80106ee:	60fb      	str	r3, [r7, #12]
 80106f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80106f4:	4641      	mov	r1, r8
 80106f6:	1851      	adds	r1, r2, r1
 80106f8:	6039      	str	r1, [r7, #0]
 80106fa:	4649      	mov	r1, r9
 80106fc:	414b      	adcs	r3, r1
 80106fe:	607b      	str	r3, [r7, #4]
 8010700:	f04f 0200 	mov.w	r2, #0
 8010704:	f04f 0300 	mov.w	r3, #0
 8010708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801070c:	4659      	mov	r1, fp
 801070e:	00cb      	lsls	r3, r1, #3
 8010710:	4651      	mov	r1, sl
 8010712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010716:	4651      	mov	r1, sl
 8010718:	00ca      	lsls	r2, r1, #3
 801071a:	4610      	mov	r0, r2
 801071c:	4619      	mov	r1, r3
 801071e:	4603      	mov	r3, r0
 8010720:	4642      	mov	r2, r8
 8010722:	189b      	adds	r3, r3, r2
 8010724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010726:	464b      	mov	r3, r9
 8010728:	460a      	mov	r2, r1
 801072a:	eb42 0303 	adc.w	r3, r2, r3
 801072e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	663b      	str	r3, [r7, #96]	@ 0x60
 801073a:	667a      	str	r2, [r7, #100]	@ 0x64
 801073c:	f04f 0200 	mov.w	r2, #0
 8010740:	f04f 0300 	mov.w	r3, #0
 8010744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010748:	4649      	mov	r1, r9
 801074a:	008b      	lsls	r3, r1, #2
 801074c:	4641      	mov	r1, r8
 801074e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010752:	4641      	mov	r1, r8
 8010754:	008a      	lsls	r2, r1, #2
 8010756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801075a:	f7f0 fa8d 	bl	8000c78 <__aeabi_uldivmod>
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	4b0d      	ldr	r3, [pc, #52]	@ (8010798 <UART_SetConfig+0x4e4>)
 8010764:	fba3 1302 	umull	r1, r3, r3, r2
 8010768:	095b      	lsrs	r3, r3, #5
 801076a:	2164      	movs	r1, #100	@ 0x64
 801076c:	fb01 f303 	mul.w	r3, r1, r3
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	3332      	adds	r3, #50	@ 0x32
 8010776:	4a08      	ldr	r2, [pc, #32]	@ (8010798 <UART_SetConfig+0x4e4>)
 8010778:	fba2 2303 	umull	r2, r3, r2, r3
 801077c:	095b      	lsrs	r3, r3, #5
 801077e:	f003 020f 	and.w	r2, r3, #15
 8010782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4422      	add	r2, r4
 801078a:	609a      	str	r2, [r3, #8]
 801078c:	bf00      	nop
 801078e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010792:	46bd      	mov	sp, r7
 8010794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010798:	51eb851f 	.word	0x51eb851f

0801079c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801079c:	b480      	push	{r7}
 801079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80107a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 80107b0:	f000 f802 	bl	80107b8 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 80107b4:	bf00      	nop
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 80107b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ba:	b089      	sub	sp, #36	@ 0x24
 80107bc:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 80107be:	2000      	movs	r0, #0
 80107c0:	f7fb fcb6 	bl	800c130 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80107c4:	2101      	movs	r1, #1
 80107c6:	2000      	movs	r0, #0
 80107c8:	f7fb fd06 	bl	800c1d8 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 80107cc:	2000      	movs	r0, #0
 80107ce:	f7fb fd57 	bl	800c280 <BSP_PB_GetState>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	bf0c      	ite	eq
 80107d8:	2301      	moveq	r3, #1
 80107da:	2300      	movne	r3, #0
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	461a      	mov	r2, r3
 80107e0:	4b84      	ldr	r3, [pc, #528]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 80107e2:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80107e4:	2000      	movs	r0, #0
 80107e6:	f7fb fdad 	bl	800c344 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 80107ea:	4a83      	ldr	r2, [pc, #524]	@ (80109f8 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 80107ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80107f0:	4882      	ldr	r0, [pc, #520]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80107f2:	f004 f879 	bl	80148e8 <sniprintf>
  printf("%s", dataOut);
 80107f6:	4981      	ldr	r1, [pc, #516]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80107f8:	4881      	ldr	r0, [pc, #516]	@ (8010a00 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80107fa:	f004 f805 	bl	8014808 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 80107fe:	2103      	movs	r1, #3
 8010800:	2001      	movs	r0, #1
 8010802:	f7fa ffff 	bl	800b804 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 8010806:	2103      	movs	r1, #3
 8010808:	2003      	movs	r0, #3
 801080a:	f7fa fffb 	bl	800b804 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 801080e:	2102      	movs	r1, #2
 8010810:	2002      	movs	r0, #2
 8010812:	f7fa fff7 	bl	800b804 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8010816:	2104      	movs	r1, #4
 8010818:	2000      	movs	r0, #0
 801081a:	f7fa fff3 	bl	800b804 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801081e:	2300      	movs	r3, #0
 8010820:	81fb      	strh	r3, [r7, #14]
 8010822:	e0d4      	b.n	80109ce <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8010824:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010828:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801082c:	4613      	mov	r3, r2
 801082e:	00db      	lsls	r3, r3, #3
 8010830:	1a9b      	subs	r3, r3, r2
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	4a73      	ldr	r2, [pc, #460]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010836:	4413      	add	r3, r2
 8010838:	4619      	mov	r1, r3
 801083a:	f7fb f915 	bl	800ba68 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 801083e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010842:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010846:	486f      	ldr	r0, [pc, #444]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010848:	4613      	mov	r3, r2
 801084a:	00db      	lsls	r3, r3, #3
 801084c:	1a9b      	subs	r3, r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	4403      	add	r3, r0
 8010852:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010854:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010856:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801085a:	486a      	ldr	r0, [pc, #424]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801085c:	4613      	mov	r3, r2
 801085e:	00db      	lsls	r3, r3, #3
 8010860:	1a9b      	subs	r3, r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	4403      	add	r3, r0
 8010866:	3301      	adds	r3, #1
 8010868:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801086a:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 801086c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010870:	4864      	ldr	r0, [pc, #400]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010872:	4613      	mov	r3, r2
 8010874:	00db      	lsls	r3, r3, #3
 8010876:	1a9b      	subs	r3, r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	4403      	add	r3, r0
 801087c:	3302      	adds	r3, #2
 801087e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010880:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010882:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010886:	485f      	ldr	r0, [pc, #380]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010888:	4613      	mov	r3, r2
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	1a9b      	subs	r3, r3, r2
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	4403      	add	r3, r0
 8010892:	3303      	adds	r3, #3
 8010894:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010896:	9303      	str	r3, [sp, #12]
 8010898:	9602      	str	r6, [sp, #8]
 801089a:	9501      	str	r5, [sp, #4]
 801089c:	9400      	str	r4, [sp, #0]
 801089e:	460b      	mov	r3, r1
 80108a0:	4a59      	ldr	r2, [pc, #356]	@ (8010a08 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 80108a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80108a6:	4855      	ldr	r0, [pc, #340]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80108a8:	f004 f81e 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 80108ac:	4953      	ldr	r1, [pc, #332]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80108ae:	4854      	ldr	r0, [pc, #336]	@ (8010a00 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80108b0:	f003 ffaa 	bl	8014808 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 80108b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80108b8:	4952      	ldr	r1, [pc, #328]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80108ba:	4613      	mov	r3, r2
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	1a9b      	subs	r3, r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	440b      	add	r3, r1
 80108c4:	3314      	adds	r3, #20
 80108c6:	edd3 7a00 	vldr	s15, [r3]
 80108ca:	463b      	mov	r3, r7
 80108cc:	2103      	movs	r1, #3
 80108ce:	4618      	mov	r0, r3
 80108d0:	eeb0 0a67 	vmov.f32	s0, s15
 80108d4:	f000 f978 	bl	8010bc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80108dc:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80108de:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80108e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80108e4:	4947      	ldr	r1, [pc, #284]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80108e6:	4613      	mov	r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	1a9b      	subs	r3, r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	440b      	add	r3, r1
 80108f0:	3308      	adds	r3, #8
 80108f2:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80108f4:	9301      	str	r3, [sp, #4]
 80108f6:	9000      	str	r0, [sp, #0]
 80108f8:	4623      	mov	r3, r4
 80108fa:	4a44      	ldr	r2, [pc, #272]	@ (8010a0c <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 80108fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010900:	483e      	ldr	r0, [pc, #248]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010902:	f003 fff1 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 8010906:	493d      	ldr	r1, [pc, #244]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010908:	483d      	ldr	r0, [pc, #244]	@ (8010a00 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801090a:	f003 ff7d 	bl	8014808 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 801090e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010912:	493c      	ldr	r1, [pc, #240]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010914:	4613      	mov	r3, r2
 8010916:	00db      	lsls	r3, r3, #3
 8010918:	1a9b      	subs	r3, r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	440b      	add	r3, r1
 801091e:	3310      	adds	r3, #16
 8010920:	edd3 7a00 	vldr	s15, [r3]
 8010924:	463b      	mov	r3, r7
 8010926:	2103      	movs	r1, #3
 8010928:	4618      	mov	r0, r3
 801092a:	eeb0 0a67 	vmov.f32	s0, s15
 801092e:	f000 f94b 	bl	8010bc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010936:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010938:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 801093a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801093e:	4931      	ldr	r1, [pc, #196]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010940:	4613      	mov	r3, r2
 8010942:	00db      	lsls	r3, r3, #3
 8010944:	1a9b      	subs	r3, r3, r2
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	440b      	add	r3, r1
 801094a:	3304      	adds	r3, #4
 801094c:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	9000      	str	r0, [sp, #0]
 8010952:	4623      	mov	r3, r4
 8010954:	4a2e      	ldr	r2, [pc, #184]	@ (8010a10 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 8010956:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801095a:	4828      	ldr	r0, [pc, #160]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801095c:	f003 ffc4 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 8010960:	4926      	ldr	r1, [pc, #152]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010962:	4827      	ldr	r0, [pc, #156]	@ (8010a00 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010964:	f003 ff50 	bl	8014808 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8010968:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801096c:	4925      	ldr	r1, [pc, #148]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801096e:	4613      	mov	r3, r2
 8010970:	00db      	lsls	r3, r3, #3
 8010972:	1a9b      	subs	r3, r3, r2
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	440b      	add	r3, r1
 8010978:	3318      	adds	r3, #24
 801097a:	edd3 7a00 	vldr	s15, [r3]
 801097e:	463b      	mov	r3, r7
 8010980:	2103      	movs	r1, #3
 8010982:	4618      	mov	r0, r3
 8010984:	eeb0 0a67 	vmov.f32	s0, s15
 8010988:	f000 f91e 	bl	8010bc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010990:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010992:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010994:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010998:	491a      	ldr	r1, [pc, #104]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801099a:	4613      	mov	r3, r2
 801099c:	00db      	lsls	r3, r3, #3
 801099e:	1a9b      	subs	r3, r3, r2
 80109a0:	009b      	lsls	r3, r3, #2
 80109a2:	440b      	add	r3, r1
 80109a4:	330c      	adds	r3, #12
 80109a6:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80109a8:	9301      	str	r3, [sp, #4]
 80109aa:	9000      	str	r0, [sp, #0]
 80109ac:	4623      	mov	r3, r4
 80109ae:	4a19      	ldr	r2, [pc, #100]	@ (8010a14 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 80109b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80109b4:	4811      	ldr	r0, [pc, #68]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80109b6:	f003 ff97 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 80109ba:	4910      	ldr	r1, [pc, #64]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80109bc:	4810      	ldr	r0, [pc, #64]	@ (8010a00 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80109be:	f003 ff23 	bl	8014808 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 80109c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	3301      	adds	r3, #1
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	81fb      	strh	r3, [r7, #14]
 80109ce:	89fb      	ldrh	r3, [r7, #14]
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	f67f af27 	bls.w	8010824 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 80109d6:	2105      	movs	r1, #5
 80109d8:	2002      	movs	r0, #2
 80109da:	f7fa fb85 	bl	800b0e8 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 80109de:	2103      	movs	r1, #3
 80109e0:	2001      	movs	r0, #1
 80109e2:	f7fa fb81 	bl	800b0e8 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 80109e6:	2101      	movs	r1, #1
 80109e8:	2000      	movs	r0, #0
 80109ea:	f7fa fb7d 	bl	800b0e8 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80109ee:	2300      	movs	r3, #0
 80109f0:	81fb      	strh	r3, [r7, #14]
 80109f2:	e0c2      	b.n	8010b7a <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 80109f4:	200142c0 	.word	0x200142c0
 80109f8:	08016c20 	.word	0x08016c20
 80109fc:	200141c0 	.word	0x200141c0
 8010a00:	08016c70 	.word	0x08016c70
 8010a04:	20014108 	.word	0x20014108
 8010a08:	08016c74 	.word	0x08016c74
 8010a0c:	08016ce8 	.word	0x08016ce8
 8010a10:	08016d14 	.word	0x08016d14
 8010a14:	08016d44 	.word	0x08016d44
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8010a18:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010a1c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a20:	4613      	mov	r3, r2
 8010a22:	005b      	lsls	r3, r3, #1
 8010a24:	4413      	add	r3, r2
 8010a26:	00db      	lsls	r3, r3, #3
 8010a28:	4a58      	ldr	r2, [pc, #352]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010a2a:	4413      	add	r3, r2
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	f7fa fc69 	bl	800b304 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a32:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010a36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a3a:	4854      	ldr	r0, [pc, #336]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010a3c:	4613      	mov	r3, r2
 8010a3e:	005b      	lsls	r3, r3, #1
 8010a40:	4413      	add	r3, r2
 8010a42:	00db      	lsls	r3, r3, #3
 8010a44:	4403      	add	r3, r0
 8010a46:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a48:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010a4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a4e:	484f      	ldr	r0, [pc, #316]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010a50:	4613      	mov	r3, r2
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	4413      	add	r3, r2
 8010a56:	00db      	lsls	r3, r3, #3
 8010a58:	4403      	add	r3, r0
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a5e:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010a60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a64:	4849      	ldr	r0, [pc, #292]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010a66:	4613      	mov	r3, r2
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	4413      	add	r3, r2
 8010a6c:	00db      	lsls	r3, r3, #3
 8010a6e:	4403      	add	r3, r0
 8010a70:	3302      	adds	r3, #2
 8010a72:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a74:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010a76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a7a:	4844      	ldr	r0, [pc, #272]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	4413      	add	r3, r2
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	4403      	add	r3, r0
 8010a86:	3304      	adds	r3, #4
 8010a88:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010a8a:	9303      	str	r3, [sp, #12]
 8010a8c:	9602      	str	r6, [sp, #8]
 8010a8e:	9501      	str	r5, [sp, #4]
 8010a90:	9400      	str	r4, [sp, #0]
 8010a92:	460b      	mov	r3, r1
 8010a94:	4a3e      	ldr	r2, [pc, #248]	@ (8010b90 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 8010a96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a9a:	483e      	ldr	r0, [pc, #248]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010a9c:	f003 ff24 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 8010aa0:	493c      	ldr	r1, [pc, #240]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010aa2:	483d      	ldr	r0, [pc, #244]	@ (8010b98 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010aa4:	f003 feb0 	bl	8014808 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8010aa8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010aac:	4937      	ldr	r1, [pc, #220]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010aae:	4613      	mov	r3, r2
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	4413      	add	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	440b      	add	r3, r1
 8010ab8:	330c      	adds	r3, #12
 8010aba:	edd3 7a00 	vldr	s15, [r3]
 8010abe:	463b      	mov	r3, r7
 8010ac0:	2103      	movs	r1, #3
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8010ac8:	f000 f87e 	bl	8010bc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010ad0:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	4a31      	ldr	r2, [pc, #196]	@ (8010b9c <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8010ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010adc:	482d      	ldr	r0, [pc, #180]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010ade:	f003 ff03 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 8010ae2:	492c      	ldr	r1, [pc, #176]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010ae4:	482c      	ldr	r0, [pc, #176]	@ (8010b98 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010ae6:	f003 fe8f 	bl	8014808 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8010aea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010aee:	4927      	ldr	r1, [pc, #156]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3310      	adds	r3, #16
 8010afc:	edd3 7a00 	vldr	s15, [r3]
 8010b00:	463b      	mov	r3, r7
 8010b02:	2103      	movs	r1, #3
 8010b04:	4618      	mov	r0, r3
 8010b06:	eeb0 0a67 	vmov.f32	s0, s15
 8010b0a:	f000 f85d 	bl	8010bc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010b12:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	4613      	mov	r3, r2
 8010b18:	4a21      	ldr	r2, [pc, #132]	@ (8010ba0 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 8010b1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b1e:	481d      	ldr	r0, [pc, #116]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010b20:	f003 fee2 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 8010b24:	491b      	ldr	r1, [pc, #108]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010b26:	481c      	ldr	r0, [pc, #112]	@ (8010b98 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010b28:	f003 fe6e 	bl	8014808 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8010b2c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b30:	4916      	ldr	r1, [pc, #88]	@ (8010b8c <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010b32:	4613      	mov	r3, r2
 8010b34:	005b      	lsls	r3, r3, #1
 8010b36:	4413      	add	r3, r2
 8010b38:	00db      	lsls	r3, r3, #3
 8010b3a:	440b      	add	r3, r1
 8010b3c:	3308      	adds	r3, #8
 8010b3e:	edd3 7a00 	vldr	s15, [r3]
 8010b42:	463b      	mov	r3, r7
 8010b44:	2103      	movs	r1, #3
 8010b46:	4618      	mov	r0, r3
 8010b48:	eeb0 0a67 	vmov.f32	s0, s15
 8010b4c:	f000 f83c 	bl	8010bc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	461a      	mov	r2, r3
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	4a12      	ldr	r2, [pc, #72]	@ (8010ba4 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 8010b5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b60:	480c      	ldr	r0, [pc, #48]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010b62:	f003 fec1 	bl	80148e8 <sniprintf>
    printf("%s", dataOut);
 8010b66:	490b      	ldr	r1, [pc, #44]	@ (8010b94 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010b68:	480b      	ldr	r0, [pc, #44]	@ (8010b98 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010b6a:	f003 fe4d 	bl	8014808 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	3301      	adds	r3, #1
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	81fb      	strh	r3, [r7, #14]
 8010b7a:	89fb      	ldrh	r3, [r7, #14]
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	f67f af4b 	bls.w	8010a18 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 8010b82:	bf00      	nop
 8010b84:	bf00      	nop
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b8c:	20014178 	.word	0x20014178
 8010b90:	08016d70 	.word	0x08016d70
 8010b94:	200141c0 	.word	0x200141c0
 8010b98:	08016c70 	.word	0x08016c70
 8010b9c:	08016de4 	.word	0x08016de4
 8010ba0:	08016e00 	.word	0x08016e00
 8010ba4:	08016e20 	.word	0x08016e20

08010ba8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4603      	mov	r3, r0
 8010bb0:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8010bb2:	4b04      	ldr	r3, [pc, #16]	@ (8010bc4 <BSP_PB_Callback+0x1c>)
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	701a      	strb	r2, [r3, #0]
}
 8010bb8:	bf00      	nop
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr
 8010bc4:	20014104 	.word	0x20014104

08010bc8 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8010bc8:	b5b0      	push	{r4, r5, r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	ed87 0a03 	vstr	s0, [r7, #12]
 8010bd2:	60b8      	str	r0, [r7, #8]
 8010bd4:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 8010bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8010bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be2:	db03      	blt.n	8010bec <floatToInt+0x24>
  {
    out_value->sign = 0;
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2200      	movs	r2, #0
 8010be8:	701a      	strb	r2, [r3, #0]
 8010bea:	e008      	b.n	8010bfe <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	701a      	strb	r2, [r3, #0]
    in = -in;
 8010bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8010bf6:	eef1 7a67 	vneg.f32	s15, s15
 8010bfa:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7ef fca8 	bl	8000554 <__aeabi_i2d>
 8010c04:	4602      	mov	r2, r0
 8010c06:	460b      	mov	r3, r1
 8010c08:	ec43 2b11 	vmov	d1, r2, r3
 8010c0c:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8010cc0 <floatToInt+0xf8>
 8010c10:	f004 fe02 	bl	8015818 <pow>
 8010c14:	ec53 2b10 	vmov	r2, r3, d0
 8010c18:	4610      	mov	r0, r2
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	f7ef ffdc 	bl	8000bd8 <__aeabi_d2f>
 8010c20:	ee06 0a90 	vmov	s13, r0
 8010c24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010c2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8010c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c34:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8010c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c40:	ee17 2a90 	vmov	r2, s15
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	ee07 3a90 	vmov	s15, r3
 8010c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c54:	ed97 7a03 	vldr	s14, [r7, #12]
 8010c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c5c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8010c60:	68f8      	ldr	r0, [r7, #12]
 8010c62:	f7ef fc89 	bl	8000578 <__aeabi_f2d>
 8010c66:	4604      	mov	r4, r0
 8010c68:	460d      	mov	r5, r1
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7ef fc72 	bl	8000554 <__aeabi_i2d>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	ec43 2b11 	vmov	d1, r2, r3
 8010c78:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8010cc0 <floatToInt+0xf8>
 8010c7c:	f004 fdcc 	bl	8015818 <pow>
 8010c80:	ec53 2b10 	vmov	r2, r3, d0
 8010c84:	4620      	mov	r0, r4
 8010c86:	4629      	mov	r1, r5
 8010c88:	f7ef fcce 	bl	8000628 <__aeabi_dmul>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	460b      	mov	r3, r1
 8010c90:	ec43 2b17 	vmov	d7, r2, r3
 8010c94:	eeb0 0a47 	vmov.f32	s0, s14
 8010c98:	eef0 0a67 	vmov.f32	s1, s15
 8010c9c:	f004 fe38 	bl	8015910 <trunc>
 8010ca0:	ec53 2b10 	vmov	r2, r3, d0
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	f7ef ff6e 	bl	8000b88 <__aeabi_d2iz>
 8010cac:	4603      	mov	r3, r0
 8010cae:	461a      	mov	r2, r3
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	609a      	str	r2, [r3, #8]
}
 8010cb4:	bf00      	nop
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bdb0      	pop	{r4, r5, r7, pc}
 8010cbc:	f3af 8000 	nop.w
 8010cc0:	00000000 	.word	0x00000000
 8010cc4:	40240000 	.word	0x40240000

08010cc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	4a08      	ldr	r2, [pc, #32]	@ (8010cf8 <disk_status+0x30>)
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	79fa      	ldrb	r2, [r7, #7]
 8010ce0:	4905      	ldr	r1, [pc, #20]	@ (8010cf8 <disk_status+0x30>)
 8010ce2:	440a      	add	r2, r1
 8010ce4:	7a12      	ldrb	r2, [r2, #8]
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	4798      	blx	r3
 8010cea:	4603      	mov	r3, r0
 8010cec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	200142ec 	.word	0x200142ec

08010cfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d0a:	79fb      	ldrb	r3, [r7, #7]
 8010d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8010d48 <disk_initialize+0x4c>)
 8010d0e:	5cd3      	ldrb	r3, [r2, r3]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d114      	bne.n	8010d3e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d14:	79fb      	ldrb	r3, [r7, #7]
 8010d16:	4a0c      	ldr	r2, [pc, #48]	@ (8010d48 <disk_initialize+0x4c>)
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	4413      	add	r3, r2
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	79fa      	ldrb	r2, [r7, #7]
 8010d22:	4909      	ldr	r1, [pc, #36]	@ (8010d48 <disk_initialize+0x4c>)
 8010d24:	440a      	add	r2, r1
 8010d26:	7a12      	ldrb	r2, [r2, #8]
 8010d28:	4610      	mov	r0, r2
 8010d2a:	4798      	blx	r3
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d103      	bne.n	8010d3e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	4a03      	ldr	r2, [pc, #12]	@ (8010d48 <disk_initialize+0x4c>)
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3710      	adds	r7, #16
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	200142ec 	.word	0x200142ec

08010d4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d4c:	b590      	push	{r4, r7, lr}
 8010d4e:	b087      	sub	sp, #28
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60b9      	str	r1, [r7, #8]
 8010d54:	607a      	str	r2, [r7, #4]
 8010d56:	603b      	str	r3, [r7, #0]
 8010d58:	4603      	mov	r3, r0
 8010d5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d5c:	7bfb      	ldrb	r3, [r7, #15]
 8010d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8010d88 <disk_read+0x3c>)
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	689c      	ldr	r4, [r3, #8]
 8010d68:	7bfb      	ldrb	r3, [r7, #15]
 8010d6a:	4a07      	ldr	r2, [pc, #28]	@ (8010d88 <disk_read+0x3c>)
 8010d6c:	4413      	add	r3, r2
 8010d6e:	7a18      	ldrb	r0, [r3, #8]
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	687a      	ldr	r2, [r7, #4]
 8010d74:	68b9      	ldr	r1, [r7, #8]
 8010d76:	47a0      	blx	r4
 8010d78:	4603      	mov	r3, r0
 8010d7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	371c      	adds	r7, #28
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd90      	pop	{r4, r7, pc}
 8010d86:	bf00      	nop
 8010d88:	200142ec 	.word	0x200142ec

08010d8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d8c:	b590      	push	{r4, r7, lr}
 8010d8e:	b087      	sub	sp, #28
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
 8010d96:	603b      	str	r3, [r7, #0]
 8010d98:	4603      	mov	r3, r0
 8010d9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d9c:	7bfb      	ldrb	r3, [r7, #15]
 8010d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8010dc8 <disk_write+0x3c>)
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4413      	add	r3, r2
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	68dc      	ldr	r4, [r3, #12]
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	4a07      	ldr	r2, [pc, #28]	@ (8010dc8 <disk_write+0x3c>)
 8010dac:	4413      	add	r3, r2
 8010dae:	7a18      	ldrb	r0, [r3, #8]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	47a0      	blx	r4
 8010db8:	4603      	mov	r3, r0
 8010dba:	75fb      	strb	r3, [r7, #23]
  return res;
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	371c      	adds	r7, #28
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd90      	pop	{r4, r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	200142ec 	.word	0x200142ec

08010dcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	603a      	str	r2, [r7, #0]
 8010dd6:	71fb      	strb	r3, [r7, #7]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010ddc:	79fb      	ldrb	r3, [r7, #7]
 8010dde:	4a09      	ldr	r2, [pc, #36]	@ (8010e04 <disk_ioctl+0x38>)
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	79fa      	ldrb	r2, [r7, #7]
 8010dea:	4906      	ldr	r1, [pc, #24]	@ (8010e04 <disk_ioctl+0x38>)
 8010dec:	440a      	add	r2, r1
 8010dee:	7a10      	ldrb	r0, [r2, #8]
 8010df0:	79b9      	ldrb	r1, [r7, #6]
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	4798      	blx	r3
 8010df6:	4603      	mov	r3, r0
 8010df8:	73fb      	strb	r3, [r7, #15]
  return res;
 8010dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3710      	adds	r7, #16
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	200142ec 	.word	0x200142ec

08010e08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b085      	sub	sp, #20
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	3301      	adds	r3, #1
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010e1c:	021b      	lsls	r3, r3, #8
 8010e1e:	b21a      	sxth	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	b21b      	sxth	r3, r3
 8010e26:	4313      	orrs	r3, r2
 8010e28:	b21b      	sxth	r3, r3
 8010e2a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3714      	adds	r7, #20
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr

08010e3a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e3a:	b480      	push	{r7}
 8010e3c:	b085      	sub	sp, #20
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	3303      	adds	r3, #3
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	021b      	lsls	r3, r3, #8
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	3202      	adds	r2, #2
 8010e52:	7812      	ldrb	r2, [r2, #0]
 8010e54:	4313      	orrs	r3, r2
 8010e56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	021b      	lsls	r3, r3, #8
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	3201      	adds	r2, #1
 8010e60:	7812      	ldrb	r2, [r2, #0]
 8010e62:	4313      	orrs	r3, r2
 8010e64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	021b      	lsls	r3, r3, #8
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	7812      	ldrb	r2, [r2, #0]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e72:	68fb      	ldr	r3, [r7, #12]
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e80:	b480      	push	{r7}
 8010e82:	b083      	sub	sp, #12
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	460b      	mov	r3, r1
 8010e8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	1c5a      	adds	r2, r3, #1
 8010e90:	607a      	str	r2, [r7, #4]
 8010e92:	887a      	ldrh	r2, [r7, #2]
 8010e94:	b2d2      	uxtb	r2, r2
 8010e96:	701a      	strb	r2, [r3, #0]
 8010e98:	887b      	ldrh	r3, [r7, #2]
 8010e9a:	0a1b      	lsrs	r3, r3, #8
 8010e9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	1c5a      	adds	r2, r3, #1
 8010ea2:	607a      	str	r2, [r7, #4]
 8010ea4:	887a      	ldrh	r2, [r7, #2]
 8010ea6:	b2d2      	uxtb	r2, r2
 8010ea8:	701a      	strb	r2, [r3, #0]
}
 8010eaa:	bf00      	nop
 8010eac:	370c      	adds	r7, #12
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b083      	sub	sp, #12
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
 8010ebe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	607a      	str	r2, [r7, #4]
 8010ec6:	683a      	ldr	r2, [r7, #0]
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	0a1b      	lsrs	r3, r3, #8
 8010ed0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	1c5a      	adds	r2, r3, #1
 8010ed6:	607a      	str	r2, [r7, #4]
 8010ed8:	683a      	ldr	r2, [r7, #0]
 8010eda:	b2d2      	uxtb	r2, r2
 8010edc:	701a      	strb	r2, [r3, #0]
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	0a1b      	lsrs	r3, r3, #8
 8010ee2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	1c5a      	adds	r2, r3, #1
 8010ee8:	607a      	str	r2, [r7, #4]
 8010eea:	683a      	ldr	r2, [r7, #0]
 8010eec:	b2d2      	uxtb	r2, r2
 8010eee:	701a      	strb	r2, [r3, #0]
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	0a1b      	lsrs	r3, r3, #8
 8010ef4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	1c5a      	adds	r2, r3, #1
 8010efa:	607a      	str	r2, [r7, #4]
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	b2d2      	uxtb	r2, r2
 8010f00:	701a      	strb	r2, [r3, #0]
}
 8010f02:	bf00      	nop
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr

08010f0e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010f0e:	b480      	push	{r7}
 8010f10:	b087      	sub	sp, #28
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	60f8      	str	r0, [r7, #12]
 8010f16:	60b9      	str	r1, [r7, #8]
 8010f18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00d      	beq.n	8010f44 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f28:	693a      	ldr	r2, [r7, #16]
 8010f2a:	1c53      	adds	r3, r2, #1
 8010f2c:	613b      	str	r3, [r7, #16]
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	1c59      	adds	r1, r3, #1
 8010f32:	6179      	str	r1, [r7, #20]
 8010f34:	7812      	ldrb	r2, [r2, #0]
 8010f36:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	607b      	str	r3, [r7, #4]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1f1      	bne.n	8010f28 <mem_cpy+0x1a>
	}
}
 8010f44:	bf00      	nop
 8010f46:	371c      	adds	r7, #28
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f50:	b480      	push	{r7}
 8010f52:	b087      	sub	sp, #28
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	1c5a      	adds	r2, r3, #1
 8010f64:	617a      	str	r2, [r7, #20]
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	b2d2      	uxtb	r2, r2
 8010f6a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	607b      	str	r3, [r7, #4]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1f3      	bne.n	8010f60 <mem_set+0x10>
}
 8010f78:	bf00      	nop
 8010f7a:	bf00      	nop
 8010f7c:	371c      	adds	r7, #28
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f86:	b480      	push	{r7}
 8010f88:	b089      	sub	sp, #36	@ 0x24
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	60f8      	str	r0, [r7, #12]
 8010f8e:	60b9      	str	r1, [r7, #8]
 8010f90:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	61fb      	str	r3, [r7, #28]
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	61fa      	str	r2, [r7, #28]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	1c5a      	adds	r2, r3, #1
 8010fac:	61ba      	str	r2, [r7, #24]
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	1acb      	subs	r3, r1, r3
 8010fb2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	607b      	str	r3, [r7, #4]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d002      	beq.n	8010fc6 <mem_cmp+0x40>
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0eb      	beq.n	8010f9e <mem_cmp+0x18>

	return r;
 8010fc6:	697b      	ldr	r3, [r7, #20]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3724      	adds	r7, #36	@ 0x24
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010fde:	e002      	b.n	8010fe6 <chk_chr+0x12>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	607b      	str	r3, [r7, #4]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d005      	beq.n	8010ffa <chk_chr+0x26>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d1f2      	bne.n	8010fe0 <chk_chr+0xc>
	return *str;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	781b      	ldrb	r3, [r3, #0]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
	...

0801100c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801100c:	b480      	push	{r7}
 801100e:	b085      	sub	sp, #20
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011016:	2300      	movs	r3, #0
 8011018:	60bb      	str	r3, [r7, #8]
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	60fb      	str	r3, [r7, #12]
 801101e:	e029      	b.n	8011074 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011020:	4a27      	ldr	r2, [pc, #156]	@ (80110c0 <chk_lock+0xb4>)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	011b      	lsls	r3, r3, #4
 8011026:	4413      	add	r3, r2
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d01d      	beq.n	801106a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801102e:	4a24      	ldr	r2, [pc, #144]	@ (80110c0 <chk_lock+0xb4>)
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	011b      	lsls	r3, r3, #4
 8011034:	4413      	add	r3, r2
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	d116      	bne.n	801106e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011040:	4a1f      	ldr	r2, [pc, #124]	@ (80110c0 <chk_lock+0xb4>)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	011b      	lsls	r3, r3, #4
 8011046:	4413      	add	r3, r2
 8011048:	3304      	adds	r3, #4
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011050:	429a      	cmp	r2, r3
 8011052:	d10c      	bne.n	801106e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011054:	4a1a      	ldr	r2, [pc, #104]	@ (80110c0 <chk_lock+0xb4>)
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	011b      	lsls	r3, r3, #4
 801105a:	4413      	add	r3, r2
 801105c:	3308      	adds	r3, #8
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011064:	429a      	cmp	r2, r3
 8011066:	d102      	bne.n	801106e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011068:	e007      	b.n	801107a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801106a:	2301      	movs	r3, #1
 801106c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	3301      	adds	r3, #1
 8011072:	60fb      	str	r3, [r7, #12]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2b01      	cmp	r3, #1
 8011078:	d9d2      	bls.n	8011020 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b02      	cmp	r3, #2
 801107e:	d109      	bne.n	8011094 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d102      	bne.n	801108c <chk_lock+0x80>
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	2b02      	cmp	r3, #2
 801108a:	d101      	bne.n	8011090 <chk_lock+0x84>
 801108c:	2300      	movs	r3, #0
 801108e:	e010      	b.n	80110b2 <chk_lock+0xa6>
 8011090:	2312      	movs	r3, #18
 8011092:	e00e      	b.n	80110b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d108      	bne.n	80110ac <chk_lock+0xa0>
 801109a:	4a09      	ldr	r2, [pc, #36]	@ (80110c0 <chk_lock+0xb4>)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	011b      	lsls	r3, r3, #4
 80110a0:	4413      	add	r3, r2
 80110a2:	330c      	adds	r3, #12
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110aa:	d101      	bne.n	80110b0 <chk_lock+0xa4>
 80110ac:	2310      	movs	r3, #16
 80110ae:	e000      	b.n	80110b2 <chk_lock+0xa6>
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	200142cc 	.word	0x200142cc

080110c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80110ca:	2300      	movs	r3, #0
 80110cc:	607b      	str	r3, [r7, #4]
 80110ce:	e002      	b.n	80110d6 <enq_lock+0x12>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	3301      	adds	r3, #1
 80110d4:	607b      	str	r3, [r7, #4]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d806      	bhi.n	80110ea <enq_lock+0x26>
 80110dc:	4a09      	ldr	r2, [pc, #36]	@ (8011104 <enq_lock+0x40>)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	011b      	lsls	r3, r3, #4
 80110e2:	4413      	add	r3, r2
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1f2      	bne.n	80110d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	bf14      	ite	ne
 80110f0:	2301      	movne	r3, #1
 80110f2:	2300      	moveq	r3, #0
 80110f4:	b2db      	uxtb	r3, r3
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	200142cc 	.word	0x200142cc

08011108 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011112:	2300      	movs	r3, #0
 8011114:	60fb      	str	r3, [r7, #12]
 8011116:	e01f      	b.n	8011158 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011118:	4a41      	ldr	r2, [pc, #260]	@ (8011220 <inc_lock+0x118>)
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	011b      	lsls	r3, r3, #4
 801111e:	4413      	add	r3, r2
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	429a      	cmp	r2, r3
 8011128:	d113      	bne.n	8011152 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801112a:	4a3d      	ldr	r2, [pc, #244]	@ (8011220 <inc_lock+0x118>)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	011b      	lsls	r3, r3, #4
 8011130:	4413      	add	r3, r2
 8011132:	3304      	adds	r3, #4
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801113a:	429a      	cmp	r2, r3
 801113c:	d109      	bne.n	8011152 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801113e:	4a38      	ldr	r2, [pc, #224]	@ (8011220 <inc_lock+0x118>)
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	011b      	lsls	r3, r3, #4
 8011144:	4413      	add	r3, r2
 8011146:	3308      	adds	r3, #8
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801114e:	429a      	cmp	r2, r3
 8011150:	d006      	beq.n	8011160 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d9dc      	bls.n	8011118 <inc_lock+0x10>
 801115e:	e000      	b.n	8011162 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011160:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2b02      	cmp	r3, #2
 8011166:	d132      	bne.n	80111ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011168:	2300      	movs	r3, #0
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	e002      	b.n	8011174 <inc_lock+0x6c>
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3301      	adds	r3, #1
 8011172:	60fb      	str	r3, [r7, #12]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d806      	bhi.n	8011188 <inc_lock+0x80>
 801117a:	4a29      	ldr	r2, [pc, #164]	@ (8011220 <inc_lock+0x118>)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	011b      	lsls	r3, r3, #4
 8011180:	4413      	add	r3, r2
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1f2      	bne.n	801116e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2b02      	cmp	r3, #2
 801118c:	d101      	bne.n	8011192 <inc_lock+0x8a>
 801118e:	2300      	movs	r3, #0
 8011190:	e040      	b.n	8011214 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	4922      	ldr	r1, [pc, #136]	@ (8011220 <inc_lock+0x118>)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	011b      	lsls	r3, r3, #4
 801119c:	440b      	add	r3, r1
 801119e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689a      	ldr	r2, [r3, #8]
 80111a4:	491e      	ldr	r1, [pc, #120]	@ (8011220 <inc_lock+0x118>)
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	011b      	lsls	r3, r3, #4
 80111aa:	440b      	add	r3, r1
 80111ac:	3304      	adds	r3, #4
 80111ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	695a      	ldr	r2, [r3, #20]
 80111b4:	491a      	ldr	r1, [pc, #104]	@ (8011220 <inc_lock+0x118>)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	011b      	lsls	r3, r3, #4
 80111ba:	440b      	add	r3, r1
 80111bc:	3308      	adds	r3, #8
 80111be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80111c0:	4a17      	ldr	r2, [pc, #92]	@ (8011220 <inc_lock+0x118>)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	011b      	lsls	r3, r3, #4
 80111c6:	4413      	add	r3, r2
 80111c8:	330c      	adds	r3, #12
 80111ca:	2200      	movs	r2, #0
 80111cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d009      	beq.n	80111e8 <inc_lock+0xe0>
 80111d4:	4a12      	ldr	r2, [pc, #72]	@ (8011220 <inc_lock+0x118>)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	011b      	lsls	r3, r3, #4
 80111da:	4413      	add	r3, r2
 80111dc:	330c      	adds	r3, #12
 80111de:	881b      	ldrh	r3, [r3, #0]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d001      	beq.n	80111e8 <inc_lock+0xe0>
 80111e4:	2300      	movs	r3, #0
 80111e6:	e015      	b.n	8011214 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d108      	bne.n	8011200 <inc_lock+0xf8>
 80111ee:	4a0c      	ldr	r2, [pc, #48]	@ (8011220 <inc_lock+0x118>)
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	011b      	lsls	r3, r3, #4
 80111f4:	4413      	add	r3, r2
 80111f6:	330c      	adds	r3, #12
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	3301      	adds	r3, #1
 80111fc:	b29a      	uxth	r2, r3
 80111fe:	e001      	b.n	8011204 <inc_lock+0xfc>
 8011200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011204:	4906      	ldr	r1, [pc, #24]	@ (8011220 <inc_lock+0x118>)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	011b      	lsls	r3, r3, #4
 801120a:	440b      	add	r3, r1
 801120c:	330c      	adds	r3, #12
 801120e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	3301      	adds	r3, #1
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	200142cc 	.word	0x200142cc

08011224 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011224:	b480      	push	{r7}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	3b01      	subs	r3, #1
 8011230:	607b      	str	r3, [r7, #4]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d825      	bhi.n	8011284 <dec_lock+0x60>
		n = Files[i].ctr;
 8011238:	4a17      	ldr	r2, [pc, #92]	@ (8011298 <dec_lock+0x74>)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	011b      	lsls	r3, r3, #4
 801123e:	4413      	add	r3, r2
 8011240:	330c      	adds	r3, #12
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011246:	89fb      	ldrh	r3, [r7, #14]
 8011248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801124c:	d101      	bne.n	8011252 <dec_lock+0x2e>
 801124e:	2300      	movs	r3, #0
 8011250:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011252:	89fb      	ldrh	r3, [r7, #14]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d002      	beq.n	801125e <dec_lock+0x3a>
 8011258:	89fb      	ldrh	r3, [r7, #14]
 801125a:	3b01      	subs	r3, #1
 801125c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801125e:	4a0e      	ldr	r2, [pc, #56]	@ (8011298 <dec_lock+0x74>)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	011b      	lsls	r3, r3, #4
 8011264:	4413      	add	r3, r2
 8011266:	330c      	adds	r3, #12
 8011268:	89fa      	ldrh	r2, [r7, #14]
 801126a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801126c:	89fb      	ldrh	r3, [r7, #14]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d105      	bne.n	801127e <dec_lock+0x5a>
 8011272:	4a09      	ldr	r2, [pc, #36]	@ (8011298 <dec_lock+0x74>)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	4413      	add	r3, r2
 801127a:	2200      	movs	r2, #0
 801127c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801127e:	2300      	movs	r3, #0
 8011280:	737b      	strb	r3, [r7, #13]
 8011282:	e001      	b.n	8011288 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011284:	2302      	movs	r3, #2
 8011286:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011288:	7b7b      	ldrb	r3, [r7, #13]
}
 801128a:	4618      	mov	r0, r3
 801128c:	3714      	adds	r7, #20
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop
 8011298:	200142cc 	.word	0x200142cc

0801129c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80112a4:	2300      	movs	r3, #0
 80112a6:	60fb      	str	r3, [r7, #12]
 80112a8:	e010      	b.n	80112cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80112aa:	4a0d      	ldr	r2, [pc, #52]	@ (80112e0 <clear_lock+0x44>)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	011b      	lsls	r3, r3, #4
 80112b0:	4413      	add	r3, r2
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d105      	bne.n	80112c6 <clear_lock+0x2a>
 80112ba:	4a09      	ldr	r2, [pc, #36]	@ (80112e0 <clear_lock+0x44>)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	011b      	lsls	r3, r3, #4
 80112c0:	4413      	add	r3, r2
 80112c2:	2200      	movs	r2, #0
 80112c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	3301      	adds	r3, #1
 80112ca:	60fb      	str	r3, [r7, #12]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d9eb      	bls.n	80112aa <clear_lock+0xe>
	}
}
 80112d2:	bf00      	nop
 80112d4:	bf00      	nop
 80112d6:	3714      	adds	r7, #20
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr
 80112e0:	200142cc 	.word	0x200142cc

080112e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b086      	sub	sp, #24
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	78db      	ldrb	r3, [r3, #3]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d034      	beq.n	8011362 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	7858      	ldrb	r0, [r3, #1]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011308:	2301      	movs	r3, #1
 801130a:	697a      	ldr	r2, [r7, #20]
 801130c:	f7ff fd3e 	bl	8010d8c <disk_write>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011316:	2301      	movs	r3, #1
 8011318:	73fb      	strb	r3, [r7, #15]
 801131a:	e022      	b.n	8011362 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011326:	697a      	ldr	r2, [r7, #20]
 8011328:	1ad2      	subs	r2, r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	69db      	ldr	r3, [r3, #28]
 801132e:	429a      	cmp	r2, r3
 8011330:	d217      	bcs.n	8011362 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	789b      	ldrb	r3, [r3, #2]
 8011336:	613b      	str	r3, [r7, #16]
 8011338:	e010      	b.n	801135c <sync_window+0x78>
					wsect += fs->fsize;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	69db      	ldr	r3, [r3, #28]
 801133e:	697a      	ldr	r2, [r7, #20]
 8011340:	4413      	add	r3, r2
 8011342:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	7858      	ldrb	r0, [r3, #1]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801134e:	2301      	movs	r3, #1
 8011350:	697a      	ldr	r2, [r7, #20]
 8011352:	f7ff fd1b 	bl	8010d8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	3b01      	subs	r3, #1
 801135a:	613b      	str	r3, [r7, #16]
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2b01      	cmp	r3, #1
 8011360:	d8eb      	bhi.n	801133a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011362:	7bfb      	ldrb	r3, [r7, #15]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3718      	adds	r7, #24
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011376:	2300      	movs	r3, #0
 8011378:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801137e:	683a      	ldr	r2, [r7, #0]
 8011380:	429a      	cmp	r2, r3
 8011382:	d01b      	beq.n	80113bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff ffad 	bl	80112e4 <sync_window>
 801138a:	4603      	mov	r3, r0
 801138c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801138e:	7bfb      	ldrb	r3, [r7, #15]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d113      	bne.n	80113bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	7858      	ldrb	r0, [r3, #1]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801139e:	2301      	movs	r3, #1
 80113a0:	683a      	ldr	r2, [r7, #0]
 80113a2:	f7ff fcd3 	bl	8010d4c <disk_read>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d004      	beq.n	80113b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80113ac:	f04f 33ff 	mov.w	r3, #4294967295
 80113b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80113b2:	2301      	movs	r3, #1
 80113b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	683a      	ldr	r2, [r7, #0]
 80113ba:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
	...

080113c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff ff87 	bl	80112e4 <sync_window>
 80113d6:	4603      	mov	r3, r0
 80113d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113da:	7bfb      	ldrb	r3, [r7, #15]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d158      	bne.n	8011492 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	2b03      	cmp	r3, #3
 80113e6:	d148      	bne.n	801147a <sync_fs+0xb2>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	791b      	ldrb	r3, [r3, #4]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d144      	bne.n	801147a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	3334      	adds	r3, #52	@ 0x34
 80113f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113f8:	2100      	movs	r1, #0
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ff fda8 	bl	8010f50 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	3334      	adds	r3, #52	@ 0x34
 8011404:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011408:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801140c:	4618      	mov	r0, r3
 801140e:	f7ff fd37 	bl	8010e80 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	3334      	adds	r3, #52	@ 0x34
 8011416:	4921      	ldr	r1, [pc, #132]	@ (801149c <sync_fs+0xd4>)
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff fd4c 	bl	8010eb6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	3334      	adds	r3, #52	@ 0x34
 8011422:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011426:	491e      	ldr	r1, [pc, #120]	@ (80114a0 <sync_fs+0xd8>)
 8011428:	4618      	mov	r0, r3
 801142a:	f7ff fd44 	bl	8010eb6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	3334      	adds	r3, #52	@ 0x34
 8011432:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	695b      	ldr	r3, [r3, #20]
 801143a:	4619      	mov	r1, r3
 801143c:	4610      	mov	r0, r2
 801143e:	f7ff fd3a 	bl	8010eb6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	3334      	adds	r3, #52	@ 0x34
 8011446:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	4619      	mov	r1, r3
 8011450:	4610      	mov	r0, r2
 8011452:	f7ff fd30 	bl	8010eb6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6a1b      	ldr	r3, [r3, #32]
 801145a:	1c5a      	adds	r2, r3, #1
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	7858      	ldrb	r0, [r3, #1]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801146e:	2301      	movs	r3, #1
 8011470:	f7ff fc8c 	bl	8010d8c <disk_write>
			fs->fsi_flag = 0;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	785b      	ldrb	r3, [r3, #1]
 801147e:	2200      	movs	r2, #0
 8011480:	2100      	movs	r1, #0
 8011482:	4618      	mov	r0, r3
 8011484:	f7ff fca2 	bl	8010dcc <disk_ioctl>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d001      	beq.n	8011492 <sync_fs+0xca>
 801148e:	2301      	movs	r3, #1
 8011490:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011492:	7bfb      	ldrb	r3, [r7, #15]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	41615252 	.word	0x41615252
 80114a0:	61417272 	.word	0x61417272

080114a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	3b02      	subs	r3, #2
 80114b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	699b      	ldr	r3, [r3, #24]
 80114b8:	3b02      	subs	r3, #2
 80114ba:	683a      	ldr	r2, [r7, #0]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d301      	bcc.n	80114c4 <clust2sect+0x20>
 80114c0:	2300      	movs	r3, #0
 80114c2:	e008      	b.n	80114d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	895b      	ldrh	r3, [r3, #10]
 80114c8:	461a      	mov	r2, r3
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	fb03 f202 	mul.w	r2, r3, r2
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114d4:	4413      	add	r3, r2
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr

080114e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b086      	sub	sp, #24
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d904      	bls.n	8011502 <get_fat+0x20>
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	699b      	ldr	r3, [r3, #24]
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d302      	bcc.n	8011508 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011502:	2301      	movs	r3, #1
 8011504:	617b      	str	r3, [r7, #20]
 8011506:	e08e      	b.n	8011626 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011508:	f04f 33ff 	mov.w	r3, #4294967295
 801150c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	2b03      	cmp	r3, #3
 8011514:	d061      	beq.n	80115da <get_fat+0xf8>
 8011516:	2b03      	cmp	r3, #3
 8011518:	dc7b      	bgt.n	8011612 <get_fat+0x130>
 801151a:	2b01      	cmp	r3, #1
 801151c:	d002      	beq.n	8011524 <get_fat+0x42>
 801151e:	2b02      	cmp	r3, #2
 8011520:	d041      	beq.n	80115a6 <get_fat+0xc4>
 8011522:	e076      	b.n	8011612 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	60fb      	str	r3, [r7, #12]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	085b      	lsrs	r3, r3, #1
 801152c:	68fa      	ldr	r2, [r7, #12]
 801152e:	4413      	add	r3, r2
 8011530:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	0a5b      	lsrs	r3, r3, #9
 801153a:	4413      	add	r3, r2
 801153c:	4619      	mov	r1, r3
 801153e:	6938      	ldr	r0, [r7, #16]
 8011540:	f7ff ff14 	bl	801136c <move_window>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d166      	bne.n	8011618 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	60fa      	str	r2, [r7, #12]
 8011550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011554:	693a      	ldr	r2, [r7, #16]
 8011556:	4413      	add	r3, r2
 8011558:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801155c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	0a5b      	lsrs	r3, r3, #9
 8011566:	4413      	add	r3, r2
 8011568:	4619      	mov	r1, r3
 801156a:	6938      	ldr	r0, [r7, #16]
 801156c:	f7ff fefe 	bl	801136c <move_window>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d152      	bne.n	801161c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801157c:	693a      	ldr	r2, [r7, #16]
 801157e:	4413      	add	r3, r2
 8011580:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011584:	021b      	lsls	r3, r3, #8
 8011586:	68ba      	ldr	r2, [r7, #8]
 8011588:	4313      	orrs	r3, r2
 801158a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	f003 0301 	and.w	r3, r3, #1
 8011592:	2b00      	cmp	r3, #0
 8011594:	d002      	beq.n	801159c <get_fat+0xba>
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	091b      	lsrs	r3, r3, #4
 801159a:	e002      	b.n	80115a2 <get_fat+0xc0>
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115a2:	617b      	str	r3, [r7, #20]
			break;
 80115a4:	e03f      	b.n	8011626 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	0a1b      	lsrs	r3, r3, #8
 80115ae:	4413      	add	r3, r2
 80115b0:	4619      	mov	r1, r3
 80115b2:	6938      	ldr	r0, [r7, #16]
 80115b4:	f7ff feda 	bl	801136c <move_window>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d130      	bne.n	8011620 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	005b      	lsls	r3, r3, #1
 80115c8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80115cc:	4413      	add	r3, r2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff fc1a 	bl	8010e08 <ld_word>
 80115d4:	4603      	mov	r3, r0
 80115d6:	617b      	str	r3, [r7, #20]
			break;
 80115d8:	e025      	b.n	8011626 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	09db      	lsrs	r3, r3, #7
 80115e2:	4413      	add	r3, r2
 80115e4:	4619      	mov	r1, r3
 80115e6:	6938      	ldr	r0, [r7, #16]
 80115e8:	f7ff fec0 	bl	801136c <move_window>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d118      	bne.n	8011624 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011600:	4413      	add	r3, r2
 8011602:	4618      	mov	r0, r3
 8011604:	f7ff fc19 	bl	8010e3a <ld_dword>
 8011608:	4603      	mov	r3, r0
 801160a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801160e:	617b      	str	r3, [r7, #20]
			break;
 8011610:	e009      	b.n	8011626 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011612:	2301      	movs	r3, #1
 8011614:	617b      	str	r3, [r7, #20]
 8011616:	e006      	b.n	8011626 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011618:	bf00      	nop
 801161a:	e004      	b.n	8011626 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801161c:	bf00      	nop
 801161e:	e002      	b.n	8011626 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011620:	bf00      	nop
 8011622:	e000      	b.n	8011626 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011624:	bf00      	nop
		}
	}

	return val;
 8011626:	697b      	ldr	r3, [r7, #20]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3718      	adds	r7, #24
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011630:	b590      	push	{r4, r7, lr}
 8011632:	b089      	sub	sp, #36	@ 0x24
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801163c:	2302      	movs	r3, #2
 801163e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b01      	cmp	r3, #1
 8011644:	f240 80d9 	bls.w	80117fa <put_fat+0x1ca>
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	699b      	ldr	r3, [r3, #24]
 801164c:	68ba      	ldr	r2, [r7, #8]
 801164e:	429a      	cmp	r2, r3
 8011650:	f080 80d3 	bcs.w	80117fa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b03      	cmp	r3, #3
 801165a:	f000 8096 	beq.w	801178a <put_fat+0x15a>
 801165e:	2b03      	cmp	r3, #3
 8011660:	f300 80cb 	bgt.w	80117fa <put_fat+0x1ca>
 8011664:	2b01      	cmp	r3, #1
 8011666:	d002      	beq.n	801166e <put_fat+0x3e>
 8011668:	2b02      	cmp	r3, #2
 801166a:	d06e      	beq.n	801174a <put_fat+0x11a>
 801166c:	e0c5      	b.n	80117fa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	61bb      	str	r3, [r7, #24]
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	085b      	lsrs	r3, r3, #1
 8011676:	69ba      	ldr	r2, [r7, #24]
 8011678:	4413      	add	r3, r2
 801167a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	0a5b      	lsrs	r3, r3, #9
 8011684:	4413      	add	r3, r2
 8011686:	4619      	mov	r1, r3
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f7ff fe6f 	bl	801136c <move_window>
 801168e:	4603      	mov	r3, r0
 8011690:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011692:	7ffb      	ldrb	r3, [r7, #31]
 8011694:	2b00      	cmp	r3, #0
 8011696:	f040 80a9 	bne.w	80117ec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	1c59      	adds	r1, r3, #1
 80116a4:	61b9      	str	r1, [r7, #24]
 80116a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116aa:	4413      	add	r3, r2
 80116ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	f003 0301 	and.w	r3, r3, #1
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d00d      	beq.n	80116d4 <put_fat+0xa4>
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	b25b      	sxtb	r3, r3
 80116be:	f003 030f 	and.w	r3, r3, #15
 80116c2:	b25a      	sxtb	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	b25b      	sxtb	r3, r3
 80116c8:	011b      	lsls	r3, r3, #4
 80116ca:	b25b      	sxtb	r3, r3
 80116cc:	4313      	orrs	r3, r2
 80116ce:	b25b      	sxtb	r3, r3
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	e001      	b.n	80116d8 <put_fat+0xa8>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2201      	movs	r2, #1
 80116e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	0a5b      	lsrs	r3, r3, #9
 80116ea:	4413      	add	r3, r2
 80116ec:	4619      	mov	r1, r3
 80116ee:	68f8      	ldr	r0, [r7, #12]
 80116f0:	f7ff fe3c 	bl	801136c <move_window>
 80116f4:	4603      	mov	r3, r0
 80116f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116f8:	7ffb      	ldrb	r3, [r7, #31]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d178      	bne.n	80117f0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801170a:	4413      	add	r3, r2
 801170c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	f003 0301 	and.w	r3, r3, #1
 8011714:	2b00      	cmp	r3, #0
 8011716:	d003      	beq.n	8011720 <put_fat+0xf0>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	091b      	lsrs	r3, r3, #4
 801171c:	b2db      	uxtb	r3, r3
 801171e:	e00e      	b.n	801173e <put_fat+0x10e>
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	b25b      	sxtb	r3, r3
 8011726:	f023 030f 	bic.w	r3, r3, #15
 801172a:	b25a      	sxtb	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	0a1b      	lsrs	r3, r3, #8
 8011730:	b25b      	sxtb	r3, r3
 8011732:	f003 030f 	and.w	r3, r3, #15
 8011736:	b25b      	sxtb	r3, r3
 8011738:	4313      	orrs	r3, r2
 801173a:	b25b      	sxtb	r3, r3
 801173c:	b2db      	uxtb	r3, r3
 801173e:	697a      	ldr	r2, [r7, #20]
 8011740:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2201      	movs	r2, #1
 8011746:	70da      	strb	r2, [r3, #3]
			break;
 8011748:	e057      	b.n	80117fa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	0a1b      	lsrs	r3, r3, #8
 8011752:	4413      	add	r3, r2
 8011754:	4619      	mov	r1, r3
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7ff fe08 	bl	801136c <move_window>
 801175c:	4603      	mov	r3, r0
 801175e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011760:	7ffb      	ldrb	r3, [r7, #31]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d146      	bne.n	80117f4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011774:	4413      	add	r3, r2
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	b292      	uxth	r2, r2
 801177a:	4611      	mov	r1, r2
 801177c:	4618      	mov	r0, r3
 801177e:	f7ff fb7f 	bl	8010e80 <st_word>
			fs->wflag = 1;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2201      	movs	r2, #1
 8011786:	70da      	strb	r2, [r3, #3]
			break;
 8011788:	e037      	b.n	80117fa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	09db      	lsrs	r3, r3, #7
 8011792:	4413      	add	r3, r2
 8011794:	4619      	mov	r1, r3
 8011796:	68f8      	ldr	r0, [r7, #12]
 8011798:	f7ff fde8 	bl	801136c <move_window>
 801179c:	4603      	mov	r3, r0
 801179e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117a0:	7ffb      	ldrb	r3, [r7, #31]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d128      	bne.n	80117f8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80117ba:	4413      	add	r3, r2
 80117bc:	4618      	mov	r0, r3
 80117be:	f7ff fb3c 	bl	8010e3a <ld_dword>
 80117c2:	4603      	mov	r3, r0
 80117c4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80117c8:	4323      	orrs	r3, r4
 80117ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80117da:	4413      	add	r3, r2
 80117dc:	6879      	ldr	r1, [r7, #4]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7ff fb69 	bl	8010eb6 <st_dword>
			fs->wflag = 1;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2201      	movs	r2, #1
 80117e8:	70da      	strb	r2, [r3, #3]
			break;
 80117ea:	e006      	b.n	80117fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117ec:	bf00      	nop
 80117ee:	e004      	b.n	80117fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117f0:	bf00      	nop
 80117f2:	e002      	b.n	80117fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117f4:	bf00      	nop
 80117f6:	e000      	b.n	80117fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117f8:	bf00      	nop
		}
	}
	return res;
 80117fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3724      	adds	r7, #36	@ 0x24
 8011800:	46bd      	mov	sp, r7
 8011802:	bd90      	pop	{r4, r7, pc}

08011804 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b088      	sub	sp, #32
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d904      	bls.n	801182a <remove_chain+0x26>
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	699b      	ldr	r3, [r3, #24]
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	429a      	cmp	r2, r3
 8011828:	d301      	bcc.n	801182e <remove_chain+0x2a>
 801182a:	2302      	movs	r3, #2
 801182c:	e04b      	b.n	80118c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d00c      	beq.n	801184e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011834:	f04f 32ff 	mov.w	r2, #4294967295
 8011838:	6879      	ldr	r1, [r7, #4]
 801183a:	69b8      	ldr	r0, [r7, #24]
 801183c:	f7ff fef8 	bl	8011630 <put_fat>
 8011840:	4603      	mov	r3, r0
 8011842:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011844:	7ffb      	ldrb	r3, [r7, #31]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d001      	beq.n	801184e <remove_chain+0x4a>
 801184a:	7ffb      	ldrb	r3, [r7, #31]
 801184c:	e03b      	b.n	80118c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801184e:	68b9      	ldr	r1, [r7, #8]
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f7ff fe46 	bl	80114e2 <get_fat>
 8011856:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d031      	beq.n	80118c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d101      	bne.n	8011868 <remove_chain+0x64>
 8011864:	2302      	movs	r3, #2
 8011866:	e02e      	b.n	80118c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801186e:	d101      	bne.n	8011874 <remove_chain+0x70>
 8011870:	2301      	movs	r3, #1
 8011872:	e028      	b.n	80118c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011874:	2200      	movs	r2, #0
 8011876:	68b9      	ldr	r1, [r7, #8]
 8011878:	69b8      	ldr	r0, [r7, #24]
 801187a:	f7ff fed9 	bl	8011630 <put_fat>
 801187e:	4603      	mov	r3, r0
 8011880:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011882:	7ffb      	ldrb	r3, [r7, #31]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d001      	beq.n	801188c <remove_chain+0x88>
 8011888:	7ffb      	ldrb	r3, [r7, #31]
 801188a:	e01c      	b.n	80118c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801188c:	69bb      	ldr	r3, [r7, #24]
 801188e:	695a      	ldr	r2, [r3, #20]
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	699b      	ldr	r3, [r3, #24]
 8011894:	3b02      	subs	r3, #2
 8011896:	429a      	cmp	r2, r3
 8011898:	d20b      	bcs.n	80118b2 <remove_chain+0xae>
			fs->free_clst++;
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	695b      	ldr	r3, [r3, #20]
 801189e:	1c5a      	adds	r2, r3, #1
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	791b      	ldrb	r3, [r3, #4]
 80118a8:	f043 0301 	orr.w	r3, r3, #1
 80118ac:	b2da      	uxtb	r2, r3
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	699b      	ldr	r3, [r3, #24]
 80118ba:	68ba      	ldr	r2, [r7, #8]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d3c6      	bcc.n	801184e <remove_chain+0x4a>
 80118c0:	e000      	b.n	80118c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80118c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3720      	adds	r7, #32
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b088      	sub	sp, #32
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10d      	bne.n	8011900 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d004      	beq.n	80118fa <create_chain+0x2c>
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	699b      	ldr	r3, [r3, #24]
 80118f4:	69ba      	ldr	r2, [r7, #24]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d31b      	bcc.n	8011932 <create_chain+0x64>
 80118fa:	2301      	movs	r3, #1
 80118fc:	61bb      	str	r3, [r7, #24]
 80118fe:	e018      	b.n	8011932 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7ff fded 	bl	80114e2 <get_fat>
 8011908:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d801      	bhi.n	8011914 <create_chain+0x46>
 8011910:	2301      	movs	r3, #1
 8011912:	e070      	b.n	80119f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801191a:	d101      	bne.n	8011920 <create_chain+0x52>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	e06a      	b.n	80119f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	699b      	ldr	r3, [r3, #24]
 8011924:	68fa      	ldr	r2, [r7, #12]
 8011926:	429a      	cmp	r2, r3
 8011928:	d201      	bcs.n	801192e <create_chain+0x60>
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	e063      	b.n	80119f6 <create_chain+0x128>
		scl = clst;
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	3301      	adds	r3, #1
 801193a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	699b      	ldr	r3, [r3, #24]
 8011940:	69fa      	ldr	r2, [r7, #28]
 8011942:	429a      	cmp	r2, r3
 8011944:	d307      	bcc.n	8011956 <create_chain+0x88>
				ncl = 2;
 8011946:	2302      	movs	r3, #2
 8011948:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801194a:	69fa      	ldr	r2, [r7, #28]
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	429a      	cmp	r2, r3
 8011950:	d901      	bls.n	8011956 <create_chain+0x88>
 8011952:	2300      	movs	r3, #0
 8011954:	e04f      	b.n	80119f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011956:	69f9      	ldr	r1, [r7, #28]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7ff fdc2 	bl	80114e2 <get_fat>
 801195e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00e      	beq.n	8011984 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d003      	beq.n	8011974 <create_chain+0xa6>
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011972:	d101      	bne.n	8011978 <create_chain+0xaa>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	e03e      	b.n	80119f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011978:	69fa      	ldr	r2, [r7, #28]
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	429a      	cmp	r2, r3
 801197e:	d1da      	bne.n	8011936 <create_chain+0x68>
 8011980:	2300      	movs	r3, #0
 8011982:	e038      	b.n	80119f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011984:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011986:	f04f 32ff 	mov.w	r2, #4294967295
 801198a:	69f9      	ldr	r1, [r7, #28]
 801198c:	6938      	ldr	r0, [r7, #16]
 801198e:	f7ff fe4f 	bl	8011630 <put_fat>
 8011992:	4603      	mov	r3, r0
 8011994:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011996:	7dfb      	ldrb	r3, [r7, #23]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d109      	bne.n	80119b0 <create_chain+0xe2>
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d006      	beq.n	80119b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80119a2:	69fa      	ldr	r2, [r7, #28]
 80119a4:	6839      	ldr	r1, [r7, #0]
 80119a6:	6938      	ldr	r0, [r7, #16]
 80119a8:	f7ff fe42 	bl	8011630 <put_fat>
 80119ac:	4603      	mov	r3, r0
 80119ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d116      	bne.n	80119e4 <create_chain+0x116>
		fs->last_clst = ncl;
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	69fa      	ldr	r2, [r7, #28]
 80119ba:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	695a      	ldr	r2, [r3, #20]
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	699b      	ldr	r3, [r3, #24]
 80119c4:	3b02      	subs	r3, #2
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d804      	bhi.n	80119d4 <create_chain+0x106>
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	695b      	ldr	r3, [r3, #20]
 80119ce:	1e5a      	subs	r2, r3, #1
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	791b      	ldrb	r3, [r3, #4]
 80119d8:	f043 0301 	orr.w	r3, r3, #1
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	711a      	strb	r2, [r3, #4]
 80119e2:	e007      	b.n	80119f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80119e4:	7dfb      	ldrb	r3, [r7, #23]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d102      	bne.n	80119f0 <create_chain+0x122>
 80119ea:	f04f 33ff 	mov.w	r3, #4294967295
 80119ee:	e000      	b.n	80119f2 <create_chain+0x124>
 80119f0:	2301      	movs	r3, #1
 80119f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80119f4:	69fb      	ldr	r3, [r7, #28]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3720      	adds	r7, #32
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80119fe:	b480      	push	{r7}
 8011a00:	b087      	sub	sp, #28
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a12:	3304      	adds	r3, #4
 8011a14:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	0a5b      	lsrs	r3, r3, #9
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	8952      	ldrh	r2, [r2, #10]
 8011a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a22:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	1d1a      	adds	r2, r3, #4
 8011a28:	613a      	str	r2, [r7, #16]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d101      	bne.n	8011a38 <clmt_clust+0x3a>
 8011a34:	2300      	movs	r3, #0
 8011a36:	e010      	b.n	8011a5a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011a38:	697a      	ldr	r2, [r7, #20]
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d307      	bcc.n	8011a50 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a40:	697a      	ldr	r2, [r7, #20]
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	617b      	str	r3, [r7, #20]
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a4e:	e7e9      	b.n	8011a24 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011a50:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	4413      	add	r3, r2
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	371c      	adds	r7, #28
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr

08011a66 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b086      	sub	sp, #24
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
 8011a6e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011a7c:	d204      	bcs.n	8011a88 <dir_sdi+0x22>
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	f003 031f 	and.w	r3, r3, #31
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d001      	beq.n	8011a8c <dir_sdi+0x26>
		return FR_INT_ERR;
 8011a88:	2302      	movs	r3, #2
 8011a8a:	e063      	b.n	8011b54 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <dir_sdi+0x46>
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	2b02      	cmp	r3, #2
 8011aa4:	d902      	bls.n	8011aac <dir_sdi+0x46>
		clst = fs->dirbase;
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aaa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d10c      	bne.n	8011acc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	095b      	lsrs	r3, r3, #5
 8011ab6:	693a      	ldr	r2, [r7, #16]
 8011ab8:	8912      	ldrh	r2, [r2, #8]
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d301      	bcc.n	8011ac2 <dir_sdi+0x5c>
 8011abe:	2302      	movs	r3, #2
 8011ac0:	e048      	b.n	8011b54 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	61da      	str	r2, [r3, #28]
 8011aca:	e029      	b.n	8011b20 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	895b      	ldrh	r3, [r3, #10]
 8011ad0:	025b      	lsls	r3, r3, #9
 8011ad2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011ad4:	e019      	b.n	8011b0a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6979      	ldr	r1, [r7, #20]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7ff fd01 	bl	80114e2 <get_fat>
 8011ae0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ae8:	d101      	bne.n	8011aee <dir_sdi+0x88>
 8011aea:	2301      	movs	r3, #1
 8011aec:	e032      	b.n	8011b54 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d904      	bls.n	8011afe <dir_sdi+0x98>
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	699b      	ldr	r3, [r3, #24]
 8011af8:	697a      	ldr	r2, [r7, #20]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d301      	bcc.n	8011b02 <dir_sdi+0x9c>
 8011afe:	2302      	movs	r3, #2
 8011b00:	e028      	b.n	8011b54 <dir_sdi+0xee>
			ofs -= csz;
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	1ad3      	subs	r3, r2, r3
 8011b08:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b0a:	683a      	ldr	r2, [r7, #0]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d2e1      	bcs.n	8011ad6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011b12:	6979      	ldr	r1, [r7, #20]
 8011b14:	6938      	ldr	r0, [r7, #16]
 8011b16:	f7ff fcc5 	bl	80114a4 <clust2sect>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	69db      	ldr	r3, [r3, #28]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d101      	bne.n	8011b32 <dir_sdi+0xcc>
 8011b2e:	2302      	movs	r3, #2
 8011b30:	e010      	b.n	8011b54 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	69da      	ldr	r2, [r3, #28]
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	0a5b      	lsrs	r3, r3, #9
 8011b3a:	441a      	add	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b4c:	441a      	add	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b52:	2300      	movs	r3, #0
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3718      	adds	r7, #24
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b086      	sub	sp, #24
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	695b      	ldr	r3, [r3, #20]
 8011b70:	3320      	adds	r3, #32
 8011b72:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	69db      	ldr	r3, [r3, #28]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d003      	beq.n	8011b84 <dir_next+0x28>
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011b82:	d301      	bcc.n	8011b88 <dir_next+0x2c>
 8011b84:	2304      	movs	r3, #4
 8011b86:	e0aa      	b.n	8011cde <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f040 8098 	bne.w	8011cc4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	69db      	ldr	r3, [r3, #28]
 8011b98:	1c5a      	adds	r2, r3, #1
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	699b      	ldr	r3, [r3, #24]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d10b      	bne.n	8011bbe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	095b      	lsrs	r3, r3, #5
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	8912      	ldrh	r2, [r2, #8]
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	f0c0 8088 	bcc.w	8011cc4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	61da      	str	r2, [r3, #28]
 8011bba:	2304      	movs	r3, #4
 8011bbc:	e08f      	b.n	8011cde <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	0a5b      	lsrs	r3, r3, #9
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	8952      	ldrh	r2, [r2, #10]
 8011bc6:	3a01      	subs	r2, #1
 8011bc8:	4013      	ands	r3, r2
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d17a      	bne.n	8011cc4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	699b      	ldr	r3, [r3, #24]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7ff fc83 	bl	80114e2 <get_fat>
 8011bdc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d801      	bhi.n	8011be8 <dir_next+0x8c>
 8011be4:	2302      	movs	r3, #2
 8011be6:	e07a      	b.n	8011cde <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bee:	d101      	bne.n	8011bf4 <dir_next+0x98>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e074      	b.n	8011cde <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	699b      	ldr	r3, [r3, #24]
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d358      	bcc.n	8011cb0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d104      	bne.n	8011c0e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	61da      	str	r2, [r3, #28]
 8011c0a:	2304      	movs	r3, #4
 8011c0c:	e067      	b.n	8011cde <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	699b      	ldr	r3, [r3, #24]
 8011c14:	4619      	mov	r1, r3
 8011c16:	4610      	mov	r0, r2
 8011c18:	f7ff fe59 	bl	80118ce <create_chain>
 8011c1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d101      	bne.n	8011c28 <dir_next+0xcc>
 8011c24:	2307      	movs	r3, #7
 8011c26:	e05a      	b.n	8011cde <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d101      	bne.n	8011c32 <dir_next+0xd6>
 8011c2e:	2302      	movs	r3, #2
 8011c30:	e055      	b.n	8011cde <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c38:	d101      	bne.n	8011c3e <dir_next+0xe2>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	e04f      	b.n	8011cde <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	f7ff fb50 	bl	80112e4 <sync_window>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d001      	beq.n	8011c4e <dir_next+0xf2>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e047      	b.n	8011cde <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	3334      	adds	r3, #52	@ 0x34
 8011c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c56:	2100      	movs	r1, #0
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7ff f979 	bl	8010f50 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c5e:	2300      	movs	r3, #0
 8011c60:	613b      	str	r3, [r7, #16]
 8011c62:	6979      	ldr	r1, [r7, #20]
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f7ff fc1d 	bl	80114a4 <clust2sect>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c70:	e012      	b.n	8011c98 <dir_next+0x13c>
						fs->wflag = 1;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2201      	movs	r2, #1
 8011c76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f7ff fb33 	bl	80112e4 <sync_window>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <dir_next+0x12c>
 8011c84:	2301      	movs	r3, #1
 8011c86:	e02a      	b.n	8011cde <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	613b      	str	r3, [r7, #16]
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	895b      	ldrh	r3, [r3, #10]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d3e6      	bcc.n	8011c72 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	1ad2      	subs	r2, r2, r3
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011cb6:	6979      	ldr	r1, [r7, #20]
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f7ff fbf3 	bl	80114a4 <clust2sect>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	68ba      	ldr	r2, [r7, #8]
 8011cc8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cd6:	441a      	add	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011cdc:	2300      	movs	r3, #0
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b086      	sub	sp, #24
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7ff feb4 	bl	8011a66 <dir_sdi>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d02:	7dfb      	ldrb	r3, [r7, #23]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d12b      	bne.n	8011d60 <dir_alloc+0x7a>
		n = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	69db      	ldr	r3, [r3, #28]
 8011d10:	4619      	mov	r1, r3
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f7ff fb2a 	bl	801136c <move_window>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d1c:	7dfb      	ldrb	r3, [r7, #23]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d11d      	bne.n	8011d5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6a1b      	ldr	r3, [r3, #32]
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	2be5      	cmp	r3, #229	@ 0xe5
 8011d2a:	d004      	beq.n	8011d36 <dir_alloc+0x50>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a1b      	ldr	r3, [r3, #32]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d107      	bne.n	8011d46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	613b      	str	r3, [r7, #16]
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d102      	bne.n	8011d4a <dir_alloc+0x64>
 8011d44:	e00c      	b.n	8011d60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011d46:	2300      	movs	r3, #0
 8011d48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011d4a:	2101      	movs	r1, #1
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7ff ff05 	bl	8011b5c <dir_next>
 8011d52:	4603      	mov	r3, r0
 8011d54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011d56:	7dfb      	ldrb	r3, [r7, #23]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0d7      	beq.n	8011d0c <dir_alloc+0x26>
 8011d5c:	e000      	b.n	8011d60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011d5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
 8011d62:	2b04      	cmp	r3, #4
 8011d64:	d101      	bne.n	8011d6a <dir_alloc+0x84>
 8011d66:	2307      	movs	r3, #7
 8011d68:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3718      	adds	r7, #24
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	331a      	adds	r3, #26
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff f840 	bl	8010e08 <ld_word>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	2b03      	cmp	r3, #3
 8011d92:	d109      	bne.n	8011da8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	3314      	adds	r3, #20
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7ff f835 	bl	8010e08 <ld_word>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	041b      	lsls	r3, r3, #16
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011da8:	68fb      	ldr	r3, [r7, #12]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3710      	adds	r7, #16
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b084      	sub	sp, #16
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	60f8      	str	r0, [r7, #12]
 8011dba:	60b9      	str	r1, [r7, #8]
 8011dbc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	331a      	adds	r3, #26
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	b292      	uxth	r2, r2
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7ff f859 	bl	8010e80 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	2b03      	cmp	r3, #3
 8011dd4:	d109      	bne.n	8011dea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	f103 0214 	add.w	r2, r3, #20
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	0c1b      	lsrs	r3, r3, #16
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	4619      	mov	r1, r3
 8011de4:	4610      	mov	r0, r2
 8011de6:	f7ff f84b 	bl	8010e80 <st_word>
	}
}
 8011dea:	bf00      	nop
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
	...

08011df4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011df4:	b590      	push	{r4, r7, lr}
 8011df6:	b087      	sub	sp, #28
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	331a      	adds	r3, #26
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7ff f800 	bl	8010e08 <ld_word>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d001      	beq.n	8011e12 <cmp_lfn+0x1e>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	e059      	b.n	8011ec6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e1a:	1e5a      	subs	r2, r3, #1
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	005b      	lsls	r3, r3, #1
 8011e20:	4413      	add	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	4413      	add	r3, r2
 8011e26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011e28:	2301      	movs	r3, #1
 8011e2a:	81fb      	strh	r3, [r7, #14]
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	613b      	str	r3, [r7, #16]
 8011e30:	e033      	b.n	8011e9a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011e32:	4a27      	ldr	r2, [pc, #156]	@ (8011ed0 <cmp_lfn+0xdc>)
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	4413      	add	r3, r2
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	4413      	add	r3, r2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fe ffe1 	bl	8010e08 <ld_word>
 8011e46:	4603      	mov	r3, r0
 8011e48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011e4a:	89fb      	ldrh	r3, [r7, #14]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d01a      	beq.n	8011e86 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	2bfe      	cmp	r3, #254	@ 0xfe
 8011e54:	d812      	bhi.n	8011e7c <cmp_lfn+0x88>
 8011e56:	89bb      	ldrh	r3, [r7, #12]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f002 fab3 	bl	80143c4 <ff_wtoupper>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	461c      	mov	r4, r3
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	1c5a      	adds	r2, r3, #1
 8011e66:	617a      	str	r2, [r7, #20]
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	4618      	mov	r0, r3
 8011e72:	f002 faa7 	bl	80143c4 <ff_wtoupper>
 8011e76:	4603      	mov	r3, r0
 8011e78:	429c      	cmp	r4, r3
 8011e7a:	d001      	beq.n	8011e80 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	e022      	b.n	8011ec6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011e80:	89bb      	ldrh	r3, [r7, #12]
 8011e82:	81fb      	strh	r3, [r7, #14]
 8011e84:	e006      	b.n	8011e94 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011e86:	89bb      	ldrh	r3, [r7, #12]
 8011e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d001      	beq.n	8011e94 <cmp_lfn+0xa0>
 8011e90:	2300      	movs	r3, #0
 8011e92:	e018      	b.n	8011ec6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	3301      	adds	r3, #1
 8011e98:	613b      	str	r3, [r7, #16]
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	2b0c      	cmp	r3, #12
 8011e9e:	d9c8      	bls.n	8011e32 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00b      	beq.n	8011ec4 <cmp_lfn+0xd0>
 8011eac:	89fb      	ldrh	r3, [r7, #14]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d008      	beq.n	8011ec4 <cmp_lfn+0xd0>
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	005b      	lsls	r3, r3, #1
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	4413      	add	r3, r2
 8011eba:	881b      	ldrh	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <cmp_lfn+0xd0>
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	e000      	b.n	8011ec6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011ec4:	2301      	movs	r3, #1
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	371c      	adds	r7, #28
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd90      	pop	{r4, r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	08017198 	.word	0x08017198

08011ed4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	331a      	adds	r3, #26
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fe ff90 	bl	8010e08 <ld_word>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <pick_lfn+0x1e>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	e04d      	b.n	8011f8e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011efa:	1e5a      	subs	r2, r3, #1
 8011efc:	4613      	mov	r3, r2
 8011efe:	005b      	lsls	r3, r3, #1
 8011f00:	4413      	add	r3, r2
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	4413      	add	r3, r2
 8011f06:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011f08:	2301      	movs	r3, #1
 8011f0a:	81fb      	strh	r3, [r7, #14]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	613b      	str	r3, [r7, #16]
 8011f10:	e028      	b.n	8011f64 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011f12:	4a21      	ldr	r2, [pc, #132]	@ (8011f98 <pick_lfn+0xc4>)
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	4413      	add	r3, r2
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	4413      	add	r3, r2
 8011f20:	4618      	mov	r0, r3
 8011f22:	f7fe ff71 	bl	8010e08 <ld_word>
 8011f26:	4603      	mov	r3, r0
 8011f28:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011f2a:	89fb      	ldrh	r3, [r7, #14]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00f      	beq.n	8011f50 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	2bfe      	cmp	r3, #254	@ 0xfe
 8011f34:	d901      	bls.n	8011f3a <pick_lfn+0x66>
 8011f36:	2300      	movs	r3, #0
 8011f38:	e029      	b.n	8011f8e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011f3a:	89bb      	ldrh	r3, [r7, #12]
 8011f3c:	81fb      	strh	r3, [r7, #14]
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	1c5a      	adds	r2, r3, #1
 8011f42:	617a      	str	r2, [r7, #20]
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	4413      	add	r3, r2
 8011f4a:	89fa      	ldrh	r2, [r7, #14]
 8011f4c:	801a      	strh	r2, [r3, #0]
 8011f4e:	e006      	b.n	8011f5e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011f50:	89bb      	ldrh	r3, [r7, #12]
 8011f52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d001      	beq.n	8011f5e <pick_lfn+0x8a>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	e017      	b.n	8011f8e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	3301      	adds	r3, #1
 8011f62:	613b      	str	r3, [r7, #16]
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	2b0c      	cmp	r3, #12
 8011f68:	d9d3      	bls.n	8011f12 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00a      	beq.n	8011f8c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	2bfe      	cmp	r3, #254	@ 0xfe
 8011f7a:	d901      	bls.n	8011f80 <pick_lfn+0xac>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e006      	b.n	8011f8e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	005b      	lsls	r3, r3, #1
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	4413      	add	r3, r2
 8011f88:	2200      	movs	r2, #0
 8011f8a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011f8c:	2301      	movs	r3, #1
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3718      	adds	r7, #24
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	08017198 	.word	0x08017198

08011f9c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b088      	sub	sp, #32
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	461a      	mov	r2, r3
 8011faa:	460b      	mov	r3, r1
 8011fac:	71fb      	strb	r3, [r7, #7]
 8011fae:	4613      	mov	r3, r2
 8011fb0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	330d      	adds	r3, #13
 8011fb6:	79ba      	ldrb	r2, [r7, #6]
 8011fb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	330b      	adds	r3, #11
 8011fbe:	220f      	movs	r2, #15
 8011fc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	330c      	adds	r3, #12
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	331a      	adds	r3, #26
 8011fce:	2100      	movs	r1, #0
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fe ff55 	bl	8010e80 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011fd6:	79fb      	ldrb	r3, [r7, #7]
 8011fd8:	1e5a      	subs	r2, r3, #1
 8011fda:	4613      	mov	r3, r2
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	4413      	add	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4413      	add	r3, r2
 8011fe4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	82fb      	strh	r3, [r7, #22]
 8011fea:	2300      	movs	r3, #0
 8011fec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011fee:	8afb      	ldrh	r3, [r7, #22]
 8011ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d007      	beq.n	8012008 <put_lfn+0x6c>
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	61fa      	str	r2, [r7, #28]
 8011ffe:	005b      	lsls	r3, r3, #1
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	4413      	add	r3, r2
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012008:	4a17      	ldr	r2, [pc, #92]	@ (8012068 <put_lfn+0xcc>)
 801200a:	69bb      	ldr	r3, [r7, #24]
 801200c:	4413      	add	r3, r2
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	461a      	mov	r2, r3
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	4413      	add	r3, r2
 8012016:	8afa      	ldrh	r2, [r7, #22]
 8012018:	4611      	mov	r1, r2
 801201a:	4618      	mov	r0, r3
 801201c:	f7fe ff30 	bl	8010e80 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012020:	8afb      	ldrh	r3, [r7, #22]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d102      	bne.n	801202c <put_lfn+0x90>
 8012026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801202a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	3301      	adds	r3, #1
 8012030:	61bb      	str	r3, [r7, #24]
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	2b0c      	cmp	r3, #12
 8012036:	d9da      	bls.n	8011fee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012038:	8afb      	ldrh	r3, [r7, #22]
 801203a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801203e:	4293      	cmp	r3, r2
 8012040:	d006      	beq.n	8012050 <put_lfn+0xb4>
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	005b      	lsls	r3, r3, #1
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	4413      	add	r3, r2
 801204a:	881b      	ldrh	r3, [r3, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d103      	bne.n	8012058 <put_lfn+0xbc>
 8012050:	79fb      	ldrb	r3, [r7, #7]
 8012052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012056:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	79fa      	ldrb	r2, [r7, #7]
 801205c:	701a      	strb	r2, [r3, #0]
}
 801205e:	bf00      	nop
 8012060:	3720      	adds	r7, #32
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	08017198 	.word	0x08017198

0801206c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b08c      	sub	sp, #48	@ 0x30
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
 8012078:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801207a:	220b      	movs	r2, #11
 801207c:	68b9      	ldr	r1, [r7, #8]
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f7fe ff45 	bl	8010f0e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	2b05      	cmp	r3, #5
 8012088:	d92b      	bls.n	80120e2 <gen_numname+0x76>
		sr = seq;
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801208e:	e022      	b.n	80120d6 <gen_numname+0x6a>
			wc = *lfn++;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	1c9a      	adds	r2, r3, #2
 8012094:	607a      	str	r2, [r7, #4]
 8012096:	881b      	ldrh	r3, [r3, #0]
 8012098:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801209a:	2300      	movs	r3, #0
 801209c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801209e:	e017      	b.n	80120d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	005a      	lsls	r2, r3, #1
 80120a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120a6:	f003 0301 	and.w	r3, r3, #1
 80120aa:	4413      	add	r3, r2
 80120ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80120ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120b0:	085b      	lsrs	r3, r3, #1
 80120b2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d005      	beq.n	80120ca <gen_numname+0x5e>
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80120c4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80120c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80120ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120cc:	3301      	adds	r3, #1
 80120ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80120d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120d2:	2b0f      	cmp	r3, #15
 80120d4:	d9e4      	bls.n	80120a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	881b      	ldrh	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d1d8      	bne.n	8012090 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80120e2:	2307      	movs	r3, #7
 80120e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	f003 030f 	and.w	r3, r3, #15
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	3330      	adds	r3, #48	@ 0x30
 80120f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80120f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80120fa:	2b39      	cmp	r3, #57	@ 0x39
 80120fc:	d904      	bls.n	8012108 <gen_numname+0x9c>
 80120fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012102:	3307      	adds	r3, #7
 8012104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210a:	1e5a      	subs	r2, r3, #1
 801210c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801210e:	3330      	adds	r3, #48	@ 0x30
 8012110:	443b      	add	r3, r7
 8012112:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012116:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	091b      	lsrs	r3, r3, #4
 801211e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1df      	bne.n	80120e6 <gen_numname+0x7a>
	ns[i] = '~';
 8012126:	f107 0214 	add.w	r2, r7, #20
 801212a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801212c:	4413      	add	r3, r2
 801212e:	227e      	movs	r2, #126	@ 0x7e
 8012130:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012132:	2300      	movs	r3, #0
 8012134:	627b      	str	r3, [r7, #36]	@ 0x24
 8012136:	e002      	b.n	801213e <gen_numname+0xd2>
 8012138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213a:	3301      	adds	r3, #1
 801213c:	627b      	str	r3, [r7, #36]	@ 0x24
 801213e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012142:	429a      	cmp	r2, r3
 8012144:	d205      	bcs.n	8012152 <gen_numname+0xe6>
 8012146:	68fa      	ldr	r2, [r7, #12]
 8012148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214a:	4413      	add	r3, r2
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	2b20      	cmp	r3, #32
 8012150:	d1f2      	bne.n	8012138 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012154:	2b07      	cmp	r3, #7
 8012156:	d807      	bhi.n	8012168 <gen_numname+0xfc>
 8012158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801215e:	3330      	adds	r3, #48	@ 0x30
 8012160:	443b      	add	r3, r7
 8012162:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012166:	e000      	b.n	801216a <gen_numname+0xfe>
 8012168:	2120      	movs	r1, #32
 801216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216c:	1c5a      	adds	r2, r3, #1
 801216e:	627a      	str	r2, [r7, #36]	@ 0x24
 8012170:	68fa      	ldr	r2, [r7, #12]
 8012172:	4413      	add	r3, r2
 8012174:	460a      	mov	r2, r1
 8012176:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217a:	2b07      	cmp	r3, #7
 801217c:	d9e9      	bls.n	8012152 <gen_numname+0xe6>
}
 801217e:	bf00      	nop
 8012180:	bf00      	nop
 8012182:	3730      	adds	r7, #48	@ 0x30
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012190:	2300      	movs	r3, #0
 8012192:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012194:	230b      	movs	r3, #11
 8012196:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012198:	7bfb      	ldrb	r3, [r7, #15]
 801219a:	b2da      	uxtb	r2, r3
 801219c:	0852      	lsrs	r2, r2, #1
 801219e:	01db      	lsls	r3, r3, #7
 80121a0:	4313      	orrs	r3, r2
 80121a2:	b2da      	uxtb	r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	1c59      	adds	r1, r3, #1
 80121a8:	6079      	str	r1, [r7, #4]
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	4413      	add	r3, r2
 80121ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	3b01      	subs	r3, #1
 80121b4:	60bb      	str	r3, [r7, #8]
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1ed      	bne.n	8012198 <sum_sfn+0x10>
	return sum;
 80121bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3714      	adds	r7, #20
 80121c2:	46bd      	mov	sp, r7
 80121c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c8:	4770      	bx	lr

080121ca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80121ca:	b580      	push	{r7, lr}
 80121cc:	b086      	sub	sp, #24
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
 80121d2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80121d4:	2304      	movs	r3, #4
 80121d6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80121de:	23ff      	movs	r3, #255	@ 0xff
 80121e0:	757b      	strb	r3, [r7, #21]
 80121e2:	23ff      	movs	r3, #255	@ 0xff
 80121e4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80121e6:	e081      	b.n	80122ec <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	69db      	ldr	r3, [r3, #28]
 80121ec:	4619      	mov	r1, r3
 80121ee:	6938      	ldr	r0, [r7, #16]
 80121f0:	f7ff f8bc 	bl	801136c <move_window>
 80121f4:	4603      	mov	r3, r0
 80121f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80121f8:	7dfb      	ldrb	r3, [r7, #23]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d17c      	bne.n	80122f8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a1b      	ldr	r3, [r3, #32]
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012206:	7dbb      	ldrb	r3, [r7, #22]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d102      	bne.n	8012212 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801220c:	2304      	movs	r3, #4
 801220e:	75fb      	strb	r3, [r7, #23]
 8012210:	e077      	b.n	8012302 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6a1b      	ldr	r3, [r3, #32]
 8012216:	330b      	adds	r3, #11
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801221e:	73fb      	strb	r3, [r7, #15]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	7bfa      	ldrb	r2, [r7, #15]
 8012224:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012226:	7dbb      	ldrb	r3, [r7, #22]
 8012228:	2be5      	cmp	r3, #229	@ 0xe5
 801222a:	d00e      	beq.n	801224a <dir_read+0x80>
 801222c:	7dbb      	ldrb	r3, [r7, #22]
 801222e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012230:	d00b      	beq.n	801224a <dir_read+0x80>
 8012232:	7bfb      	ldrb	r3, [r7, #15]
 8012234:	f023 0320 	bic.w	r3, r3, #32
 8012238:	2b08      	cmp	r3, #8
 801223a:	bf0c      	ite	eq
 801223c:	2301      	moveq	r3, #1
 801223e:	2300      	movne	r3, #0
 8012240:	b2db      	uxtb	r3, r3
 8012242:	461a      	mov	r2, r3
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	4293      	cmp	r3, r2
 8012248:	d002      	beq.n	8012250 <dir_read+0x86>
				ord = 0xFF;
 801224a:	23ff      	movs	r3, #255	@ 0xff
 801224c:	757b      	strb	r3, [r7, #21]
 801224e:	e044      	b.n	80122da <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	2b0f      	cmp	r3, #15
 8012254:	d12f      	bne.n	80122b6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012256:	7dbb      	ldrb	r3, [r7, #22]
 8012258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00d      	beq.n	801227c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6a1b      	ldr	r3, [r3, #32]
 8012264:	7b5b      	ldrb	r3, [r3, #13]
 8012266:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012268:	7dbb      	ldrb	r3, [r7, #22]
 801226a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801226e:	75bb      	strb	r3, [r7, #22]
 8012270:	7dbb      	ldrb	r3, [r7, #22]
 8012272:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	695a      	ldr	r2, [r3, #20]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801227c:	7dba      	ldrb	r2, [r7, #22]
 801227e:	7d7b      	ldrb	r3, [r7, #21]
 8012280:	429a      	cmp	r2, r3
 8012282:	d115      	bne.n	80122b0 <dir_read+0xe6>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a1b      	ldr	r3, [r3, #32]
 8012288:	330d      	adds	r3, #13
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	7d3a      	ldrb	r2, [r7, #20]
 801228e:	429a      	cmp	r2, r3
 8012290:	d10e      	bne.n	80122b0 <dir_read+0xe6>
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	68da      	ldr	r2, [r3, #12]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6a1b      	ldr	r3, [r3, #32]
 801229a:	4619      	mov	r1, r3
 801229c:	4610      	mov	r0, r2
 801229e:	f7ff fe19 	bl	8011ed4 <pick_lfn>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d003      	beq.n	80122b0 <dir_read+0xe6>
 80122a8:	7d7b      	ldrb	r3, [r7, #21]
 80122aa:	3b01      	subs	r3, #1
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	e000      	b.n	80122b2 <dir_read+0xe8>
 80122b0:	23ff      	movs	r3, #255	@ 0xff
 80122b2:	757b      	strb	r3, [r7, #21]
 80122b4:	e011      	b.n	80122da <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80122b6:	7d7b      	ldrb	r3, [r7, #21]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d109      	bne.n	80122d0 <dir_read+0x106>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6a1b      	ldr	r3, [r3, #32]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7ff ff61 	bl	8012188 <sum_sfn>
 80122c6:	4603      	mov	r3, r0
 80122c8:	461a      	mov	r2, r3
 80122ca:	7d3b      	ldrb	r3, [r7, #20]
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d015      	beq.n	80122fc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f04f 32ff 	mov.w	r2, #4294967295
 80122d6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80122d8:	e010      	b.n	80122fc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80122da:	2100      	movs	r1, #0
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff fc3d 	bl	8011b5c <dir_next>
 80122e2:	4603      	mov	r3, r0
 80122e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80122e6:	7dfb      	ldrb	r3, [r7, #23]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d109      	bne.n	8012300 <dir_read+0x136>
	while (dp->sect) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	69db      	ldr	r3, [r3, #28]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f47f af79 	bne.w	80121e8 <dir_read+0x1e>
 80122f6:	e004      	b.n	8012302 <dir_read+0x138>
		if (res != FR_OK) break;
 80122f8:	bf00      	nop
 80122fa:	e002      	b.n	8012302 <dir_read+0x138>
					break;
 80122fc:	bf00      	nop
 80122fe:	e000      	b.n	8012302 <dir_read+0x138>
		if (res != FR_OK) break;
 8012300:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012302:	7dfb      	ldrb	r3, [r7, #23]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d002      	beq.n	801230e <dir_read+0x144>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	61da      	str	r2, [r3, #28]
	return res;
 801230e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012310:	4618      	mov	r0, r3
 8012312:	3718      	adds	r7, #24
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012326:	2100      	movs	r1, #0
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7ff fb9c 	bl	8011a66 <dir_sdi>
 801232e:	4603      	mov	r3, r0
 8012330:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012332:	7dfb      	ldrb	r3, [r7, #23]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d001      	beq.n	801233c <dir_find+0x24>
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	e0a9      	b.n	8012490 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801233c:	23ff      	movs	r3, #255	@ 0xff
 801233e:	753b      	strb	r3, [r7, #20]
 8012340:	7d3b      	ldrb	r3, [r7, #20]
 8012342:	757b      	strb	r3, [r7, #21]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f04f 32ff 	mov.w	r2, #4294967295
 801234a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	69db      	ldr	r3, [r3, #28]
 8012350:	4619      	mov	r1, r3
 8012352:	6938      	ldr	r0, [r7, #16]
 8012354:	f7ff f80a 	bl	801136c <move_window>
 8012358:	4603      	mov	r3, r0
 801235a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801235c:	7dfb      	ldrb	r3, [r7, #23]
 801235e:	2b00      	cmp	r3, #0
 8012360:	f040 8090 	bne.w	8012484 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6a1b      	ldr	r3, [r3, #32]
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801236c:	7dbb      	ldrb	r3, [r7, #22]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d102      	bne.n	8012378 <dir_find+0x60>
 8012372:	2304      	movs	r3, #4
 8012374:	75fb      	strb	r3, [r7, #23]
 8012376:	e08a      	b.n	801248e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6a1b      	ldr	r3, [r3, #32]
 801237c:	330b      	adds	r3, #11
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012384:	73fb      	strb	r3, [r7, #15]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	7bfa      	ldrb	r2, [r7, #15]
 801238a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801238c:	7dbb      	ldrb	r3, [r7, #22]
 801238e:	2be5      	cmp	r3, #229	@ 0xe5
 8012390:	d007      	beq.n	80123a2 <dir_find+0x8a>
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	f003 0308 	and.w	r3, r3, #8
 8012398:	2b00      	cmp	r3, #0
 801239a:	d009      	beq.n	80123b0 <dir_find+0x98>
 801239c:	7bfb      	ldrb	r3, [r7, #15]
 801239e:	2b0f      	cmp	r3, #15
 80123a0:	d006      	beq.n	80123b0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80123a2:	23ff      	movs	r3, #255	@ 0xff
 80123a4:	757b      	strb	r3, [r7, #21]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f04f 32ff 	mov.w	r2, #4294967295
 80123ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80123ae:	e05e      	b.n	801246e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80123b0:	7bfb      	ldrb	r3, [r7, #15]
 80123b2:	2b0f      	cmp	r3, #15
 80123b4:	d136      	bne.n	8012424 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80123bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d154      	bne.n	801246e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80123c4:	7dbb      	ldrb	r3, [r7, #22]
 80123c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d00d      	beq.n	80123ea <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6a1b      	ldr	r3, [r3, #32]
 80123d2:	7b5b      	ldrb	r3, [r3, #13]
 80123d4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80123d6:	7dbb      	ldrb	r3, [r7, #22]
 80123d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80123dc:	75bb      	strb	r3, [r7, #22]
 80123de:	7dbb      	ldrb	r3, [r7, #22]
 80123e0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	695a      	ldr	r2, [r3, #20]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80123ea:	7dba      	ldrb	r2, [r7, #22]
 80123ec:	7d7b      	ldrb	r3, [r7, #21]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d115      	bne.n	801241e <dir_find+0x106>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a1b      	ldr	r3, [r3, #32]
 80123f6:	330d      	adds	r3, #13
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	7d3a      	ldrb	r2, [r7, #20]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d10e      	bne.n	801241e <dir_find+0x106>
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	68da      	ldr	r2, [r3, #12]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a1b      	ldr	r3, [r3, #32]
 8012408:	4619      	mov	r1, r3
 801240a:	4610      	mov	r0, r2
 801240c:	f7ff fcf2 	bl	8011df4 <cmp_lfn>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d003      	beq.n	801241e <dir_find+0x106>
 8012416:	7d7b      	ldrb	r3, [r7, #21]
 8012418:	3b01      	subs	r3, #1
 801241a:	b2db      	uxtb	r3, r3
 801241c:	e000      	b.n	8012420 <dir_find+0x108>
 801241e:	23ff      	movs	r3, #255	@ 0xff
 8012420:	757b      	strb	r3, [r7, #21]
 8012422:	e024      	b.n	801246e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012424:	7d7b      	ldrb	r3, [r7, #21]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d109      	bne.n	801243e <dir_find+0x126>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6a1b      	ldr	r3, [r3, #32]
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff feaa 	bl	8012188 <sum_sfn>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	7d3b      	ldrb	r3, [r7, #20]
 801243a:	4293      	cmp	r3, r2
 801243c:	d024      	beq.n	8012488 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	d10a      	bne.n	8012462 <dir_find+0x14a>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6a18      	ldr	r0, [r3, #32]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	3324      	adds	r3, #36	@ 0x24
 8012454:	220b      	movs	r2, #11
 8012456:	4619      	mov	r1, r3
 8012458:	f7fe fd95 	bl	8010f86 <mem_cmp>
 801245c:	4603      	mov	r3, r0
 801245e:	2b00      	cmp	r3, #0
 8012460:	d014      	beq.n	801248c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012462:	23ff      	movs	r3, #255	@ 0xff
 8012464:	757b      	strb	r3, [r7, #21]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f04f 32ff 	mov.w	r2, #4294967295
 801246c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801246e:	2100      	movs	r1, #0
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7ff fb73 	bl	8011b5c <dir_next>
 8012476:	4603      	mov	r3, r0
 8012478:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801247a:	7dfb      	ldrb	r3, [r7, #23]
 801247c:	2b00      	cmp	r3, #0
 801247e:	f43f af65 	beq.w	801234c <dir_find+0x34>
 8012482:	e004      	b.n	801248e <dir_find+0x176>
		if (res != FR_OK) break;
 8012484:	bf00      	nop
 8012486:	e002      	b.n	801248e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012488:	bf00      	nop
 801248a:	e000      	b.n	801248e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801248c:	bf00      	nop

	return res;
 801248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012490:	4618      	mov	r0, r3
 8012492:	3718      	adds	r7, #24
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08c      	sub	sp, #48	@ 0x30
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80124ac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <dir_register+0x20>
 80124b4:	2306      	movs	r3, #6
 80124b6:	e0e0      	b.n	801267a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80124b8:	2300      	movs	r3, #0
 80124ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80124bc:	e002      	b.n	80124c4 <dir_register+0x2c>
 80124be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124c0:	3301      	adds	r3, #1
 80124c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	68da      	ldr	r2, [r3, #12]
 80124c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ca:	005b      	lsls	r3, r3, #1
 80124cc:	4413      	add	r3, r2
 80124ce:	881b      	ldrh	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d1f4      	bne.n	80124be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80124da:	f107 030c 	add.w	r3, r7, #12
 80124de:	220c      	movs	r2, #12
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7fe fd14 	bl	8010f0e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80124e6:	7dfb      	ldrb	r3, [r7, #23]
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d032      	beq.n	8012556 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2240      	movs	r2, #64	@ 0x40
 80124f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80124f8:	2301      	movs	r3, #1
 80124fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80124fc:	e016      	b.n	801252c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	68da      	ldr	r2, [r3, #12]
 8012508:	f107 010c 	add.w	r1, r7, #12
 801250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801250e:	f7ff fdad 	bl	801206c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f7ff ff00 	bl	8012318 <dir_find>
 8012518:	4603      	mov	r3, r0
 801251a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801251e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012522:	2b00      	cmp	r3, #0
 8012524:	d106      	bne.n	8012534 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012528:	3301      	adds	r3, #1
 801252a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801252c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801252e:	2b63      	cmp	r3, #99	@ 0x63
 8012530:	d9e5      	bls.n	80124fe <dir_register+0x66>
 8012532:	e000      	b.n	8012536 <dir_register+0x9e>
			if (res != FR_OK) break;
 8012534:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012538:	2b64      	cmp	r3, #100	@ 0x64
 801253a:	d101      	bne.n	8012540 <dir_register+0xa8>
 801253c:	2307      	movs	r3, #7
 801253e:	e09c      	b.n	801267a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012544:	2b04      	cmp	r3, #4
 8012546:	d002      	beq.n	801254e <dir_register+0xb6>
 8012548:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801254c:	e095      	b.n	801267a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801254e:	7dfa      	ldrb	r2, [r7, #23]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012556:	7dfb      	ldrb	r3, [r7, #23]
 8012558:	f003 0302 	and.w	r3, r3, #2
 801255c:	2b00      	cmp	r3, #0
 801255e:	d007      	beq.n	8012570 <dir_register+0xd8>
 8012560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012562:	330c      	adds	r3, #12
 8012564:	4a47      	ldr	r2, [pc, #284]	@ (8012684 <dir_register+0x1ec>)
 8012566:	fba2 2303 	umull	r2, r3, r2, r3
 801256a:	089b      	lsrs	r3, r3, #2
 801256c:	3301      	adds	r3, #1
 801256e:	e000      	b.n	8012572 <dir_register+0xda>
 8012570:	2301      	movs	r3, #1
 8012572:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012574:	6a39      	ldr	r1, [r7, #32]
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7ff fbb5 	bl	8011ce6 <dir_alloc>
 801257c:	4603      	mov	r3, r0
 801257e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012586:	2b00      	cmp	r3, #0
 8012588:	d148      	bne.n	801261c <dir_register+0x184>
 801258a:	6a3b      	ldr	r3, [r7, #32]
 801258c:	3b01      	subs	r3, #1
 801258e:	623b      	str	r3, [r7, #32]
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d042      	beq.n	801261c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	695a      	ldr	r2, [r3, #20]
 801259a:	6a3b      	ldr	r3, [r7, #32]
 801259c:	015b      	lsls	r3, r3, #5
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	4619      	mov	r1, r3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7ff fa5f 	bl	8011a66 <dir_sdi>
 80125a8:	4603      	mov	r3, r0
 80125aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80125ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d132      	bne.n	801261c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	3324      	adds	r3, #36	@ 0x24
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7ff fde4 	bl	8012188 <sum_sfn>
 80125c0:	4603      	mov	r3, r0
 80125c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	69db      	ldr	r3, [r3, #28]
 80125c8:	4619      	mov	r1, r3
 80125ca:	69f8      	ldr	r0, [r7, #28]
 80125cc:	f7fe fece 	bl	801136c <move_window>
 80125d0:	4603      	mov	r3, r0
 80125d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80125d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d11d      	bne.n	801261a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	68d8      	ldr	r0, [r3, #12]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6a19      	ldr	r1, [r3, #32]
 80125e6:	6a3b      	ldr	r3, [r7, #32]
 80125e8:	b2da      	uxtb	r2, r3
 80125ea:	7efb      	ldrb	r3, [r7, #27]
 80125ec:	f7ff fcd6 	bl	8011f9c <put_lfn>
				fs->wflag = 1;
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	2201      	movs	r2, #1
 80125f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80125f6:	2100      	movs	r1, #0
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f7ff faaf 	bl	8011b5c <dir_next>
 80125fe:	4603      	mov	r3, r0
 8012600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8012604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012608:	2b00      	cmp	r3, #0
 801260a:	d107      	bne.n	801261c <dir_register+0x184>
 801260c:	6a3b      	ldr	r3, [r7, #32]
 801260e:	3b01      	subs	r3, #1
 8012610:	623b      	str	r3, [r7, #32]
 8012612:	6a3b      	ldr	r3, [r7, #32]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1d5      	bne.n	80125c4 <dir_register+0x12c>
 8012618:	e000      	b.n	801261c <dir_register+0x184>
				if (res != FR_OK) break;
 801261a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801261c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012620:	2b00      	cmp	r3, #0
 8012622:	d128      	bne.n	8012676 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	69db      	ldr	r3, [r3, #28]
 8012628:	4619      	mov	r1, r3
 801262a:	69f8      	ldr	r0, [r7, #28]
 801262c:	f7fe fe9e 	bl	801136c <move_window>
 8012630:	4603      	mov	r3, r0
 8012632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801263a:	2b00      	cmp	r3, #0
 801263c:	d11b      	bne.n	8012676 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a1b      	ldr	r3, [r3, #32]
 8012642:	2220      	movs	r2, #32
 8012644:	2100      	movs	r1, #0
 8012646:	4618      	mov	r0, r3
 8012648:	f7fe fc82 	bl	8010f50 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6a18      	ldr	r0, [r3, #32]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	3324      	adds	r3, #36	@ 0x24
 8012654:	220b      	movs	r2, #11
 8012656:	4619      	mov	r1, r3
 8012658:	f7fe fc59 	bl	8010f0e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6a1b      	ldr	r3, [r3, #32]
 8012666:	330c      	adds	r3, #12
 8012668:	f002 0218 	and.w	r2, r2, #24
 801266c:	b2d2      	uxtb	r2, r2
 801266e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	2201      	movs	r2, #1
 8012674:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801267a:	4618      	mov	r0, r3
 801267c:	3730      	adds	r7, #48	@ 0x30
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	4ec4ec4f 	.word	0x4ec4ec4f

08012688 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b088      	sub	sp, #32
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2200      	movs	r2, #0
 801269c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	69db      	ldr	r3, [r3, #28]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 80ca 	beq.w	801283c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b0:	d032      	beq.n	8012718 <get_fileinfo+0x90>
			i = j = 0;
 80126b2:	2300      	movs	r3, #0
 80126b4:	61bb      	str	r3, [r7, #24]
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80126ba:	e01b      	b.n	80126f4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80126bc:	89fb      	ldrh	r3, [r7, #14]
 80126be:	2100      	movs	r1, #0
 80126c0:	4618      	mov	r0, r3
 80126c2:	f001 fe43 	bl	801434c <ff_convert>
 80126c6:	4603      	mov	r3, r0
 80126c8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80126ca:	89fb      	ldrh	r3, [r7, #14]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d102      	bne.n	80126d6 <get_fileinfo+0x4e>
 80126d0:	2300      	movs	r3, #0
 80126d2:	61fb      	str	r3, [r7, #28]
 80126d4:	e01a      	b.n	801270c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80126d6:	69fb      	ldr	r3, [r7, #28]
 80126d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80126da:	d902      	bls.n	80126e2 <get_fileinfo+0x5a>
 80126dc:	2300      	movs	r3, #0
 80126de:	61fb      	str	r3, [r7, #28]
 80126e0:	e014      	b.n	801270c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	1c5a      	adds	r2, r3, #1
 80126e6:	61fa      	str	r2, [r7, #28]
 80126e8:	89fa      	ldrh	r2, [r7, #14]
 80126ea:	b2d1      	uxtb	r1, r2
 80126ec:	683a      	ldr	r2, [r7, #0]
 80126ee:	4413      	add	r3, r2
 80126f0:	460a      	mov	r2, r1
 80126f2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	68da      	ldr	r2, [r3, #12]
 80126f8:	69bb      	ldr	r3, [r7, #24]
 80126fa:	1c59      	adds	r1, r3, #1
 80126fc:	61b9      	str	r1, [r7, #24]
 80126fe:	005b      	lsls	r3, r3, #1
 8012700:	4413      	add	r3, r2
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	81fb      	strh	r3, [r7, #14]
 8012706:	89fb      	ldrh	r3, [r7, #14]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1d7      	bne.n	80126bc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801270c:	683a      	ldr	r2, [r7, #0]
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	4413      	add	r3, r2
 8012712:	3316      	adds	r3, #22
 8012714:	2200      	movs	r2, #0
 8012716:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012718:	2300      	movs	r3, #0
 801271a:	61bb      	str	r3, [r7, #24]
 801271c:	69bb      	ldr	r3, [r7, #24]
 801271e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012720:	683a      	ldr	r2, [r7, #0]
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	4413      	add	r3, r2
 8012726:	3316      	adds	r3, #22
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801272c:	e04d      	b.n	80127ca <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6a1a      	ldr	r2, [r3, #32]
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	1c59      	adds	r1, r3, #1
 8012736:	61f9      	str	r1, [r7, #28]
 8012738:	4413      	add	r3, r2
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801273e:	7dfb      	ldrb	r3, [r7, #23]
 8012740:	2b20      	cmp	r3, #32
 8012742:	d041      	beq.n	80127c8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012744:	7dfb      	ldrb	r3, [r7, #23]
 8012746:	2b05      	cmp	r3, #5
 8012748:	d101      	bne.n	801274e <get_fileinfo+0xc6>
 801274a:	23e5      	movs	r3, #229	@ 0xe5
 801274c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	2b09      	cmp	r3, #9
 8012752:	d10f      	bne.n	8012774 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8012754:	89bb      	ldrh	r3, [r7, #12]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d105      	bne.n	8012766 <get_fileinfo+0xde>
 801275a:	683a      	ldr	r2, [r7, #0]
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	4413      	add	r3, r2
 8012760:	3316      	adds	r3, #22
 8012762:	222e      	movs	r2, #46	@ 0x2e
 8012764:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	1c5a      	adds	r2, r3, #1
 801276a:	61ba      	str	r2, [r7, #24]
 801276c:	683a      	ldr	r2, [r7, #0]
 801276e:	4413      	add	r3, r2
 8012770:	222e      	movs	r2, #46	@ 0x2e
 8012772:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8012774:	683a      	ldr	r2, [r7, #0]
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	4413      	add	r3, r2
 801277a:	3309      	adds	r3, #9
 801277c:	7dfa      	ldrb	r2, [r7, #23]
 801277e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8012780:	89bb      	ldrh	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d11c      	bne.n	80127c0 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	2b40      	cmp	r3, #64	@ 0x40
 801278a:	d913      	bls.n	80127b4 <get_fileinfo+0x12c>
 801278c:	7dfb      	ldrb	r3, [r7, #23]
 801278e:	2b5a      	cmp	r3, #90	@ 0x5a
 8012790:	d810      	bhi.n	80127b4 <get_fileinfo+0x12c>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6a1b      	ldr	r3, [r3, #32]
 8012796:	330c      	adds	r3, #12
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	2b08      	cmp	r3, #8
 80127a0:	d901      	bls.n	80127a6 <get_fileinfo+0x11e>
 80127a2:	2310      	movs	r3, #16
 80127a4:	e000      	b.n	80127a8 <get_fileinfo+0x120>
 80127a6:	2308      	movs	r3, #8
 80127a8:	4013      	ands	r3, r2
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d002      	beq.n	80127b4 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80127ae:	7dfb      	ldrb	r3, [r7, #23]
 80127b0:	3320      	adds	r3, #32
 80127b2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80127b4:	683a      	ldr	r2, [r7, #0]
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	4413      	add	r3, r2
 80127ba:	3316      	adds	r3, #22
 80127bc:	7dfa      	ldrb	r2, [r7, #23]
 80127be:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	3301      	adds	r3, #1
 80127c4:	61bb      	str	r3, [r7, #24]
 80127c6:	e000      	b.n	80127ca <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80127c8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	2b0a      	cmp	r3, #10
 80127ce:	d9ae      	bls.n	801272e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80127d0:	89bb      	ldrh	r3, [r7, #12]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d10d      	bne.n	80127f2 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80127d6:	683a      	ldr	r2, [r7, #0]
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	4413      	add	r3, r2
 80127dc:	3316      	adds	r3, #22
 80127de:	2200      	movs	r2, #0
 80127e0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6a1b      	ldr	r3, [r3, #32]
 80127e6:	330c      	adds	r3, #12
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d101      	bne.n	80127f2 <get_fileinfo+0x16a>
 80127ee:	2300      	movs	r3, #0
 80127f0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80127f2:	683a      	ldr	r2, [r7, #0]
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	4413      	add	r3, r2
 80127f8:	3309      	adds	r3, #9
 80127fa:	2200      	movs	r2, #0
 80127fc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6a1b      	ldr	r3, [r3, #32]
 8012802:	7ada      	ldrb	r2, [r3, #11]
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6a1b      	ldr	r3, [r3, #32]
 801280c:	331c      	adds	r3, #28
 801280e:	4618      	mov	r0, r3
 8012810:	f7fe fb13 	bl	8010e3a <ld_dword>
 8012814:	4602      	mov	r2, r0
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a1b      	ldr	r3, [r3, #32]
 801281e:	3316      	adds	r3, #22
 8012820:	4618      	mov	r0, r3
 8012822:	f7fe fb0a 	bl	8010e3a <ld_dword>
 8012826:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	b29a      	uxth	r2, r3
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	80da      	strh	r2, [r3, #6]
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	0c1b      	lsrs	r3, r3, #16
 8012834:	b29a      	uxth	r2, r3
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	809a      	strh	r2, [r3, #4]
 801283a:	e000      	b.n	801283e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801283c:	bf00      	nop
}
 801283e:	3720      	adds	r7, #32
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b08a      	sub	sp, #40	@ 0x28
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	613b      	str	r3, [r7, #16]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	2300      	movs	r3, #0
 801285e:	617b      	str	r3, [r7, #20]
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	1c5a      	adds	r2, r3, #1
 8012868:	61ba      	str	r2, [r7, #24]
 801286a:	693a      	ldr	r2, [r7, #16]
 801286c:	4413      	add	r3, r2
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012874:	2b1f      	cmp	r3, #31
 8012876:	d940      	bls.n	80128fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801287a:	2b2f      	cmp	r3, #47	@ 0x2f
 801287c:	d006      	beq.n	801288c <create_name+0x48>
 801287e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012880:	2b5c      	cmp	r3, #92	@ 0x5c
 8012882:	d110      	bne.n	80128a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012884:	e002      	b.n	801288c <create_name+0x48>
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	3301      	adds	r3, #1
 801288a:	61bb      	str	r3, [r7, #24]
 801288c:	693a      	ldr	r2, [r7, #16]
 801288e:	69bb      	ldr	r3, [r7, #24]
 8012890:	4413      	add	r3, r2
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	2b2f      	cmp	r3, #47	@ 0x2f
 8012896:	d0f6      	beq.n	8012886 <create_name+0x42>
 8012898:	693a      	ldr	r2, [r7, #16]
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	4413      	add	r3, r2
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80128a2:	d0f0      	beq.n	8012886 <create_name+0x42>
			break;
 80128a4:	e02a      	b.n	80128fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80128aa:	d901      	bls.n	80128b0 <create_name+0x6c>
 80128ac:	2306      	movs	r3, #6
 80128ae:	e17d      	b.n	8012bac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80128b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80128b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80128b8:	2101      	movs	r1, #1
 80128ba:	4618      	mov	r0, r3
 80128bc:	f001 fd46 	bl	801434c <ff_convert>
 80128c0:	4603      	mov	r3, r0
 80128c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80128c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d101      	bne.n	80128ce <create_name+0x8a>
 80128ca:	2306      	movs	r3, #6
 80128cc:	e16e      	b.n	8012bac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80128ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80128d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80128d2:	d809      	bhi.n	80128e8 <create_name+0xa4>
 80128d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80128d6:	4619      	mov	r1, r3
 80128d8:	488d      	ldr	r0, [pc, #564]	@ (8012b10 <create_name+0x2cc>)
 80128da:	f7fe fb7b 	bl	8010fd4 <chk_chr>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d001      	beq.n	80128e8 <create_name+0xa4>
 80128e4:	2306      	movs	r3, #6
 80128e6:	e161      	b.n	8012bac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	1c5a      	adds	r2, r3, #1
 80128ec:	617a      	str	r2, [r7, #20]
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	68fa      	ldr	r2, [r7, #12]
 80128f2:	4413      	add	r3, r2
 80128f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80128f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80128f8:	e7b4      	b.n	8012864 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80128fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80128fc:	693a      	ldr	r2, [r7, #16]
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	441a      	add	r2, r3
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012908:	2b1f      	cmp	r3, #31
 801290a:	d801      	bhi.n	8012910 <create_name+0xcc>
 801290c:	2304      	movs	r3, #4
 801290e:	e000      	b.n	8012912 <create_name+0xce>
 8012910:	2300      	movs	r3, #0
 8012912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012916:	e011      	b.n	801293c <create_name+0xf8>
		w = lfn[di - 1];
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801291e:	3b01      	subs	r3, #1
 8012920:	005b      	lsls	r3, r3, #1
 8012922:	68fa      	ldr	r2, [r7, #12]
 8012924:	4413      	add	r3, r2
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801292a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801292c:	2b20      	cmp	r3, #32
 801292e:	d002      	beq.n	8012936 <create_name+0xf2>
 8012930:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012932:	2b2e      	cmp	r3, #46	@ 0x2e
 8012934:	d106      	bne.n	8012944 <create_name+0x100>
		di--;
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	3b01      	subs	r3, #1
 801293a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1ea      	bne.n	8012918 <create_name+0xd4>
 8012942:	e000      	b.n	8012946 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012944:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	005b      	lsls	r3, r3, #1
 801294a:	68fa      	ldr	r2, [r7, #12]
 801294c:	4413      	add	r3, r2
 801294e:	2200      	movs	r2, #0
 8012950:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d101      	bne.n	801295c <create_name+0x118>
 8012958:	2306      	movs	r3, #6
 801295a:	e127      	b.n	8012bac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3324      	adds	r3, #36	@ 0x24
 8012960:	220b      	movs	r2, #11
 8012962:	2120      	movs	r1, #32
 8012964:	4618      	mov	r0, r3
 8012966:	f7fe faf3 	bl	8010f50 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801296a:	2300      	movs	r3, #0
 801296c:	61bb      	str	r3, [r7, #24]
 801296e:	e002      	b.n	8012976 <create_name+0x132>
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	3301      	adds	r3, #1
 8012974:	61bb      	str	r3, [r7, #24]
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	4413      	add	r3, r2
 801297e:	881b      	ldrh	r3, [r3, #0]
 8012980:	2b20      	cmp	r3, #32
 8012982:	d0f5      	beq.n	8012970 <create_name+0x12c>
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	4413      	add	r3, r2
 801298c:	881b      	ldrh	r3, [r3, #0]
 801298e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012990:	d0ee      	beq.n	8012970 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d009      	beq.n	80129ac <create_name+0x168>
 8012998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801299c:	f043 0303 	orr.w	r3, r3, #3
 80129a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80129a4:	e002      	b.n	80129ac <create_name+0x168>
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	3b01      	subs	r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d009      	beq.n	80129c6 <create_name+0x182>
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80129b8:	3b01      	subs	r3, #1
 80129ba:	005b      	lsls	r3, r3, #1
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	4413      	add	r3, r2
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80129c4:	d1ef      	bne.n	80129a6 <create_name+0x162>

	i = b = 0; ni = 8;
 80129c6:	2300      	movs	r3, #0
 80129c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80129cc:	2300      	movs	r3, #0
 80129ce:	623b      	str	r3, [r7, #32]
 80129d0:	2308      	movs	r3, #8
 80129d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	61ba      	str	r2, [r7, #24]
 80129da:	005b      	lsls	r3, r3, #1
 80129dc:	68fa      	ldr	r2, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80129e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f000 8090 	beq.w	8012b0c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80129ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129ee:	2b20      	cmp	r3, #32
 80129f0:	d006      	beq.n	8012a00 <create_name+0x1bc>
 80129f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80129f6:	d10a      	bne.n	8012a0e <create_name+0x1ca>
 80129f8:	69ba      	ldr	r2, [r7, #24]
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d006      	beq.n	8012a0e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a04:	f043 0303 	orr.w	r3, r3, #3
 8012a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012a0c:	e07d      	b.n	8012b0a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012a0e:	6a3a      	ldr	r2, [r7, #32]
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d203      	bcs.n	8012a1e <create_name+0x1da>
 8012a16:	69ba      	ldr	r2, [r7, #24]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d123      	bne.n	8012a66 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	2b0b      	cmp	r3, #11
 8012a22:	d106      	bne.n	8012a32 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a28:	f043 0303 	orr.w	r3, r3, #3
 8012a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012a30:	e075      	b.n	8012b1e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012a32:	69ba      	ldr	r2, [r7, #24]
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d005      	beq.n	8012a46 <create_name+0x202>
 8012a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a3e:	f043 0303 	orr.w	r3, r3, #3
 8012a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012a46:	69ba      	ldr	r2, [r7, #24]
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d866      	bhi.n	8012b1c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	61bb      	str	r3, [r7, #24]
 8012a52:	2308      	movs	r3, #8
 8012a54:	623b      	str	r3, [r7, #32]
 8012a56:	230b      	movs	r3, #11
 8012a58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012a64:	e051      	b.n	8012b0a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012a66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a68:	2b7f      	cmp	r3, #127	@ 0x7f
 8012a6a:	d914      	bls.n	8012a96 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012a6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a6e:	2100      	movs	r1, #0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f001 fc6b 	bl	801434c <ff_convert>
 8012a76:	4603      	mov	r3, r0
 8012a78:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d004      	beq.n	8012a8a <create_name+0x246>
 8012a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a82:	3b80      	subs	r3, #128	@ 0x80
 8012a84:	4a23      	ldr	r2, [pc, #140]	@ (8012b14 <create_name+0x2d0>)
 8012a86:	5cd3      	ldrb	r3, [r2, r3]
 8012a88:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a8e:	f043 0302 	orr.w	r3, r3, #2
 8012a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d007      	beq.n	8012aac <create_name+0x268>
 8012a9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	481d      	ldr	r0, [pc, #116]	@ (8012b18 <create_name+0x2d4>)
 8012aa2:	f7fe fa97 	bl	8010fd4 <chk_chr>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d008      	beq.n	8012abe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012aac:	235f      	movs	r3, #95	@ 0x5f
 8012aae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ab4:	f043 0303 	orr.w	r3, r3, #3
 8012ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012abc:	e01b      	b.n	8012af6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ac0:	2b40      	cmp	r3, #64	@ 0x40
 8012ac2:	d909      	bls.n	8012ad8 <create_name+0x294>
 8012ac4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ac6:	2b5a      	cmp	r3, #90	@ 0x5a
 8012ac8:	d806      	bhi.n	8012ad8 <create_name+0x294>
					b |= 2;
 8012aca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ace:	f043 0302 	orr.w	r3, r3, #2
 8012ad2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012ad6:	e00e      	b.n	8012af6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012ad8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ada:	2b60      	cmp	r3, #96	@ 0x60
 8012adc:	d90b      	bls.n	8012af6 <create_name+0x2b2>
 8012ade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ae0:	2b7a      	cmp	r3, #122	@ 0x7a
 8012ae2:	d808      	bhi.n	8012af6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ae8:	f043 0301 	orr.w	r3, r3, #1
 8012aec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012af0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012af2:	3b20      	subs	r3, #32
 8012af4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012af6:	6a3b      	ldr	r3, [r7, #32]
 8012af8:	1c5a      	adds	r2, r3, #1
 8012afa:	623a      	str	r2, [r7, #32]
 8012afc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012afe:	b2d1      	uxtb	r1, r2
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	4413      	add	r3, r2
 8012b04:	460a      	mov	r2, r1
 8012b06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012b0a:	e763      	b.n	80129d4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012b0c:	bf00      	nop
 8012b0e:	e006      	b.n	8012b1e <create_name+0x2da>
 8012b10:	08017090 	.word	0x08017090
 8012b14:	08017118 	.word	0x08017118
 8012b18:	0801709c 	.word	0x0801709c
			if (si > di) break;			/* No extension */
 8012b1c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012b24:	2be5      	cmp	r3, #229	@ 0xe5
 8012b26:	d103      	bne.n	8012b30 <create_name+0x2ec>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2205      	movs	r2, #5
 8012b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012b30:	69fb      	ldr	r3, [r7, #28]
 8012b32:	2b08      	cmp	r3, #8
 8012b34:	d104      	bne.n	8012b40 <create_name+0x2fc>
 8012b36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b44:	f003 030c 	and.w	r3, r3, #12
 8012b48:	2b0c      	cmp	r3, #12
 8012b4a:	d005      	beq.n	8012b58 <create_name+0x314>
 8012b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b50:	f003 0303 	and.w	r3, r3, #3
 8012b54:	2b03      	cmp	r3, #3
 8012b56:	d105      	bne.n	8012b64 <create_name+0x320>
 8012b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b5c:	f043 0302 	orr.w	r3, r3, #2
 8012b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b68:	f003 0302 	and.w	r3, r3, #2
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d117      	bne.n	8012ba0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b74:	f003 0303 	and.w	r3, r3, #3
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	d105      	bne.n	8012b88 <create_name+0x344>
 8012b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b80:	f043 0310 	orr.w	r3, r3, #16
 8012b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b8c:	f003 030c 	and.w	r3, r3, #12
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	d105      	bne.n	8012ba0 <create_name+0x35c>
 8012b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b98:	f043 0308 	orr.w	r3, r3, #8
 8012b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012ba6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8012baa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	3728      	adds	r7, #40	@ 0x28
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b086      	sub	sp, #24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012bc8:	e002      	b.n	8012bd0 <follow_path+0x1c>
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	3301      	adds	r3, #1
 8012bce:	603b      	str	r3, [r7, #0]
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8012bd6:	d0f8      	beq.n	8012bca <follow_path+0x16>
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	2b5c      	cmp	r3, #92	@ 0x5c
 8012bde:	d0f4      	beq.n	8012bca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	2200      	movs	r2, #0
 8012be4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	2b1f      	cmp	r3, #31
 8012bec:	d80a      	bhi.n	8012c04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2280      	movs	r2, #128	@ 0x80
 8012bf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012bf6:	2100      	movs	r1, #0
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7fe ff34 	bl	8011a66 <dir_sdi>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	75fb      	strb	r3, [r7, #23]
 8012c02:	e043      	b.n	8012c8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c04:	463b      	mov	r3, r7
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f7ff fe1b 	bl	8012844 <create_name>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c12:	7dfb      	ldrb	r3, [r7, #23]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d134      	bne.n	8012c82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff fb7d 	bl	8012318 <dir_find>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012c28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c2a:	7dfb      	ldrb	r3, [r7, #23]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00a      	beq.n	8012c46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c30:	7dfb      	ldrb	r3, [r7, #23]
 8012c32:	2b04      	cmp	r3, #4
 8012c34:	d127      	bne.n	8012c86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012c36:	7afb      	ldrb	r3, [r7, #11]
 8012c38:	f003 0304 	and.w	r3, r3, #4
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d122      	bne.n	8012c86 <follow_path+0xd2>
 8012c40:	2305      	movs	r3, #5
 8012c42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012c44:	e01f      	b.n	8012c86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c46:	7afb      	ldrb	r3, [r7, #11]
 8012c48:	f003 0304 	and.w	r3, r3, #4
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d11c      	bne.n	8012c8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	799b      	ldrb	r3, [r3, #6]
 8012c54:	f003 0310 	and.w	r3, r3, #16
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d102      	bne.n	8012c62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012c5c:	2305      	movs	r3, #5
 8012c5e:	75fb      	strb	r3, [r7, #23]
 8012c60:	e014      	b.n	8012c8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	695b      	ldr	r3, [r3, #20]
 8012c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c70:	4413      	add	r3, r2
 8012c72:	4619      	mov	r1, r3
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f7ff f87d 	bl	8011d74 <ld_clust>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c80:	e7c0      	b.n	8012c04 <follow_path+0x50>
			if (res != FR_OK) break;
 8012c82:	bf00      	nop
 8012c84:	e002      	b.n	8012c8c <follow_path+0xd8>
				break;
 8012c86:	bf00      	nop
 8012c88:	e000      	b.n	8012c8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c8a:	bf00      	nop
			}
		}
	}

	return res;
 8012c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3718      	adds	r7, #24
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012c96:	b480      	push	{r7}
 8012c98:	b087      	sub	sp, #28
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d031      	beq.n	8012d10 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	617b      	str	r3, [r7, #20]
 8012cb2:	e002      	b.n	8012cba <get_ldnumber+0x24>
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	617b      	str	r3, [r7, #20]
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	2b1f      	cmp	r3, #31
 8012cc0:	d903      	bls.n	8012cca <get_ldnumber+0x34>
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8012cc8:	d1f4      	bne.n	8012cb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	2b3a      	cmp	r3, #58	@ 0x3a
 8012cd0:	d11c      	bne.n	8012d0c <get_ldnumber+0x76>
			tp = *path;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	1c5a      	adds	r2, r3, #1
 8012cdc:	60fa      	str	r2, [r7, #12]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	3b30      	subs	r3, #48	@ 0x30
 8012ce2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	2b09      	cmp	r3, #9
 8012ce8:	d80e      	bhi.n	8012d08 <get_ldnumber+0x72>
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d10a      	bne.n	8012d08 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d107      	bne.n	8012d08 <get_ldnumber+0x72>
					vol = (int)i;
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	617b      	str	r3, [r7, #20]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	697a      	ldr	r2, [r7, #20]
 8012d06:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	e002      	b.n	8012d12 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d10:	693b      	ldr	r3, [r7, #16]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	371c      	adds	r7, #28
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr
	...

08012d20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	70da      	strb	r2, [r3, #3]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295
 8012d36:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012d38:	6839      	ldr	r1, [r7, #0]
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7fe fb16 	bl	801136c <move_window>
 8012d40:	4603      	mov	r3, r0
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d001      	beq.n	8012d4a <check_fs+0x2a>
 8012d46:	2304      	movs	r3, #4
 8012d48:	e038      	b.n	8012dbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	3334      	adds	r3, #52	@ 0x34
 8012d4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7fe f858 	bl	8010e08 <ld_word>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d001      	beq.n	8012d68 <check_fs+0x48>
 8012d64:	2303      	movs	r3, #3
 8012d66:	e029      	b.n	8012dbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012d6e:	2be9      	cmp	r3, #233	@ 0xe9
 8012d70:	d009      	beq.n	8012d86 <check_fs+0x66>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012d78:	2beb      	cmp	r3, #235	@ 0xeb
 8012d7a:	d11e      	bne.n	8012dba <check_fs+0x9a>
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8012d82:	2b90      	cmp	r3, #144	@ 0x90
 8012d84:	d119      	bne.n	8012dba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	3334      	adds	r3, #52	@ 0x34
 8012d8a:	3336      	adds	r3, #54	@ 0x36
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7fe f854 	bl	8010e3a <ld_dword>
 8012d92:	4603      	mov	r3, r0
 8012d94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012d98:	4a0a      	ldr	r2, [pc, #40]	@ (8012dc4 <check_fs+0xa4>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d101      	bne.n	8012da2 <check_fs+0x82>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e00c      	b.n	8012dbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	3334      	adds	r3, #52	@ 0x34
 8012da6:	3352      	adds	r3, #82	@ 0x52
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fe f846 	bl	8010e3a <ld_dword>
 8012dae:	4603      	mov	r3, r0
 8012db0:	4a05      	ldr	r2, [pc, #20]	@ (8012dc8 <check_fs+0xa8>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d101      	bne.n	8012dba <check_fs+0x9a>
 8012db6:	2300      	movs	r3, #0
 8012db8:	e000      	b.n	8012dbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012dba:	2302      	movs	r3, #2
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	00544146 	.word	0x00544146
 8012dc8:	33544146 	.word	0x33544146

08012dcc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b096      	sub	sp, #88	@ 0x58
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	4613      	mov	r3, r2
 8012dd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012de0:	68f8      	ldr	r0, [r7, #12]
 8012de2:	f7ff ff58 	bl	8012c96 <get_ldnumber>
 8012de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	da01      	bge.n	8012df2 <find_volume+0x26>
 8012dee:	230b      	movs	r3, #11
 8012df0:	e22d      	b.n	801324e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012df2:	4aa1      	ldr	r2, [pc, #644]	@ (8013078 <find_volume+0x2ac>)
 8012df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d101      	bne.n	8012e06 <find_volume+0x3a>
 8012e02:	230c      	movs	r3, #12
 8012e04:	e223      	b.n	801324e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e0c:	79fb      	ldrb	r3, [r7, #7]
 8012e0e:	f023 0301 	bic.w	r3, r3, #1
 8012e12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d01a      	beq.n	8012e52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e1e:	785b      	ldrb	r3, [r3, #1]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7fd ff51 	bl	8010cc8 <disk_status>
 8012e26:	4603      	mov	r3, r0
 8012e28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012e30:	f003 0301 	and.w	r3, r3, #1
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d10c      	bne.n	8012e52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012e38:	79fb      	ldrb	r3, [r7, #7]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d007      	beq.n	8012e4e <find_volume+0x82>
 8012e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012e42:	f003 0304 	and.w	r3, r3, #4
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d001      	beq.n	8012e4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012e4a:	230a      	movs	r3, #10
 8012e4c:	e1ff      	b.n	801324e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8012e4e:	2300      	movs	r3, #0
 8012e50:	e1fd      	b.n	801324e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e54:	2200      	movs	r2, #0
 8012e56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e5a:	b2da      	uxtb	r2, r3
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e62:	785b      	ldrb	r3, [r3, #1]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fd ff49 	bl	8010cfc <disk_initialize>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012e70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012e74:	f003 0301 	and.w	r3, r3, #1
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012e7c:	2303      	movs	r3, #3
 8012e7e:	e1e6      	b.n	801324e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012e80:	79fb      	ldrb	r3, [r7, #7]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d007      	beq.n	8012e96 <find_volume+0xca>
 8012e86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012e8a:	f003 0304 	and.w	r3, r3, #4
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d001      	beq.n	8012e96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012e92:	230a      	movs	r3, #10
 8012e94:	e1db      	b.n	801324e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012e96:	2300      	movs	r3, #0
 8012e98:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012e9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012e9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012e9e:	f7ff ff3f 	bl	8012d20 <check_fs>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012eac:	2b02      	cmp	r3, #2
 8012eae:	d149      	bne.n	8012f44 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8012eb4:	e01e      	b.n	8012ef4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eb8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012ec4:	4413      	add	r3, r2
 8012ec6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eca:	3304      	adds	r3, #4
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d006      	beq.n	8012ee0 <find_volume+0x114>
 8012ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ed4:	3308      	adds	r3, #8
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fd ffaf 	bl	8010e3a <ld_dword>
 8012edc:	4602      	mov	r2, r0
 8012ede:	e000      	b.n	8012ee2 <find_volume+0x116>
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	3358      	adds	r3, #88	@ 0x58
 8012ee8:	443b      	add	r3, r7
 8012eea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ef6:	2b03      	cmp	r3, #3
 8012ef8:	d9dd      	bls.n	8012eb6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012efa:	2300      	movs	r3, #0
 8012efc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8012efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d002      	beq.n	8012f0a <find_volume+0x13e>
 8012f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f06:	3b01      	subs	r3, #1
 8012f08:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	3358      	adds	r3, #88	@ 0x58
 8012f10:	443b      	add	r3, r7
 8012f12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012f16:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d005      	beq.n	8012f2a <find_volume+0x15e>
 8012f1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012f20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012f22:	f7ff fefd 	bl	8012d20 <check_fs>
 8012f26:	4603      	mov	r3, r0
 8012f28:	e000      	b.n	8012f2c <find_volume+0x160>
 8012f2a:	2303      	movs	r3, #3
 8012f2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012f30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d905      	bls.n	8012f44 <find_volume+0x178>
 8012f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8012f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f40:	2b03      	cmp	r3, #3
 8012f42:	d9e2      	bls.n	8012f0a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012f44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012f48:	2b04      	cmp	r3, #4
 8012f4a:	d101      	bne.n	8012f50 <find_volume+0x184>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e17e      	b.n	801324e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d901      	bls.n	8012f5c <find_volume+0x190>
 8012f58:	230d      	movs	r3, #13
 8012f5a:	e178      	b.n	801324e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f5e:	3334      	adds	r3, #52	@ 0x34
 8012f60:	330b      	adds	r3, #11
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fd ff50 	bl	8010e08 <ld_word>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f6e:	d001      	beq.n	8012f74 <find_volume+0x1a8>
 8012f70:	230d      	movs	r3, #13
 8012f72:	e16c      	b.n	801324e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f76:	3334      	adds	r3, #52	@ 0x34
 8012f78:	3316      	adds	r3, #22
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7fd ff44 	bl	8010e08 <ld_word>
 8012f80:	4603      	mov	r3, r0
 8012f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d106      	bne.n	8012f98 <find_volume+0x1cc>
 8012f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f8c:	3334      	adds	r3, #52	@ 0x34
 8012f8e:	3324      	adds	r3, #36	@ 0x24
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fd ff52 	bl	8010e3a <ld_dword>
 8012f96:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f9c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8012fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012faa:	789b      	ldrb	r3, [r3, #2]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d005      	beq.n	8012fbc <find_volume+0x1f0>
 8012fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb2:	789b      	ldrb	r3, [r3, #2]
 8012fb4:	2b02      	cmp	r3, #2
 8012fb6:	d001      	beq.n	8012fbc <find_volume+0x1f0>
 8012fb8:	230d      	movs	r3, #13
 8012fba:	e148      	b.n	801324e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fbe:	789b      	ldrb	r3, [r3, #2]
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fc4:	fb02 f303 	mul.w	r3, r2, r3
 8012fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fd8:	895b      	ldrh	r3, [r3, #10]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d008      	beq.n	8012ff0 <find_volume+0x224>
 8012fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe0:	895b      	ldrh	r3, [r3, #10]
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe6:	895b      	ldrh	r3, [r3, #10]
 8012fe8:	3b01      	subs	r3, #1
 8012fea:	4013      	ands	r3, r2
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <find_volume+0x228>
 8012ff0:	230d      	movs	r3, #13
 8012ff2:	e12c      	b.n	801324e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ff6:	3334      	adds	r3, #52	@ 0x34
 8012ff8:	3311      	adds	r3, #17
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fd ff04 	bl	8010e08 <ld_word>
 8013000:	4603      	mov	r3, r0
 8013002:	461a      	mov	r2, r3
 8013004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013006:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801300a:	891b      	ldrh	r3, [r3, #8]
 801300c:	f003 030f 	and.w	r3, r3, #15
 8013010:	b29b      	uxth	r3, r3
 8013012:	2b00      	cmp	r3, #0
 8013014:	d001      	beq.n	801301a <find_volume+0x24e>
 8013016:	230d      	movs	r3, #13
 8013018:	e119      	b.n	801324e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301c:	3334      	adds	r3, #52	@ 0x34
 801301e:	3313      	adds	r3, #19
 8013020:	4618      	mov	r0, r3
 8013022:	f7fd fef1 	bl	8010e08 <ld_word>
 8013026:	4603      	mov	r3, r0
 8013028:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801302a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801302c:	2b00      	cmp	r3, #0
 801302e:	d106      	bne.n	801303e <find_volume+0x272>
 8013030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013032:	3334      	adds	r3, #52	@ 0x34
 8013034:	3320      	adds	r3, #32
 8013036:	4618      	mov	r0, r3
 8013038:	f7fd feff 	bl	8010e3a <ld_dword>
 801303c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013040:	3334      	adds	r3, #52	@ 0x34
 8013042:	330e      	adds	r3, #14
 8013044:	4618      	mov	r0, r3
 8013046:	f7fd fedf 	bl	8010e08 <ld_word>
 801304a:	4603      	mov	r3, r0
 801304c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801304e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013050:	2b00      	cmp	r3, #0
 8013052:	d101      	bne.n	8013058 <find_volume+0x28c>
 8013054:	230d      	movs	r3, #13
 8013056:	e0fa      	b.n	801324e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013058:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801305a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801305c:	4413      	add	r3, r2
 801305e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013060:	8912      	ldrh	r2, [r2, #8]
 8013062:	0912      	lsrs	r2, r2, #4
 8013064:	b292      	uxth	r2, r2
 8013066:	4413      	add	r3, r2
 8013068:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801306a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801306e:	429a      	cmp	r2, r3
 8013070:	d204      	bcs.n	801307c <find_volume+0x2b0>
 8013072:	230d      	movs	r3, #13
 8013074:	e0eb      	b.n	801324e <find_volume+0x482>
 8013076:	bf00      	nop
 8013078:	200142c4 	.word	0x200142c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801307c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013084:	8952      	ldrh	r2, [r2, #10]
 8013086:	fbb3 f3f2 	udiv	r3, r3, r2
 801308a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801308e:	2b00      	cmp	r3, #0
 8013090:	d101      	bne.n	8013096 <find_volume+0x2ca>
 8013092:	230d      	movs	r3, #13
 8013094:	e0db      	b.n	801324e <find_volume+0x482>
		fmt = FS_FAT32;
 8013096:	2303      	movs	r3, #3
 8013098:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801309e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d802      	bhi.n	80130ac <find_volume+0x2e0>
 80130a6:	2302      	movs	r3, #2
 80130a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80130ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d802      	bhi.n	80130bc <find_volume+0x2f0>
 80130b6:	2301      	movs	r3, #1
 80130b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80130bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130be:	1c9a      	adds	r2, r3, #2
 80130c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80130c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80130c8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80130ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80130cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130ce:	441a      	add	r2, r3
 80130d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80130d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80130d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d8:	441a      	add	r2, r3
 80130da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80130de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80130e2:	2b03      	cmp	r3, #3
 80130e4:	d11e      	bne.n	8013124 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80130e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e8:	3334      	adds	r3, #52	@ 0x34
 80130ea:	332a      	adds	r3, #42	@ 0x2a
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fd fe8b 	bl	8010e08 <ld_word>
 80130f2:	4603      	mov	r3, r0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d001      	beq.n	80130fc <find_volume+0x330>
 80130f8:	230d      	movs	r3, #13
 80130fa:	e0a8      	b.n	801324e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80130fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130fe:	891b      	ldrh	r3, [r3, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d001      	beq.n	8013108 <find_volume+0x33c>
 8013104:	230d      	movs	r3, #13
 8013106:	e0a2      	b.n	801324e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801310a:	3334      	adds	r3, #52	@ 0x34
 801310c:	332c      	adds	r3, #44	@ 0x2c
 801310e:	4618      	mov	r0, r3
 8013110:	f7fd fe93 	bl	8010e3a <ld_dword>
 8013114:	4602      	mov	r2, r0
 8013116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013118:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801311c:	699b      	ldr	r3, [r3, #24]
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	647b      	str	r3, [r7, #68]	@ 0x44
 8013122:	e01f      	b.n	8013164 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013126:	891b      	ldrh	r3, [r3, #8]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d101      	bne.n	8013130 <find_volume+0x364>
 801312c:	230d      	movs	r3, #13
 801312e:	e08e      	b.n	801324e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013136:	441a      	add	r2, r3
 8013138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801313a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801313c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013140:	2b02      	cmp	r3, #2
 8013142:	d103      	bne.n	801314c <find_volume+0x380>
 8013144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	e00a      	b.n	8013162 <find_volume+0x396>
 801314c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801314e:	699a      	ldr	r2, [r3, #24]
 8013150:	4613      	mov	r3, r2
 8013152:	005b      	lsls	r3, r3, #1
 8013154:	4413      	add	r3, r2
 8013156:	085a      	lsrs	r2, r3, #1
 8013158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801315a:	699b      	ldr	r3, [r3, #24]
 801315c:	f003 0301 	and.w	r3, r3, #1
 8013160:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013162:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013166:	69da      	ldr	r2, [r3, #28]
 8013168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801316a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801316e:	0a5b      	lsrs	r3, r3, #9
 8013170:	429a      	cmp	r2, r3
 8013172:	d201      	bcs.n	8013178 <find_volume+0x3ac>
 8013174:	230d      	movs	r3, #13
 8013176:	e06a      	b.n	801324e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801317a:	f04f 32ff 	mov.w	r2, #4294967295
 801317e:	615a      	str	r2, [r3, #20]
 8013180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013182:	695a      	ldr	r2, [r3, #20]
 8013184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013186:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801318a:	2280      	movs	r2, #128	@ 0x80
 801318c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801318e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013192:	2b03      	cmp	r3, #3
 8013194:	d149      	bne.n	801322a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013198:	3334      	adds	r3, #52	@ 0x34
 801319a:	3330      	adds	r3, #48	@ 0x30
 801319c:	4618      	mov	r0, r3
 801319e:	f7fd fe33 	bl	8010e08 <ld_word>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d140      	bne.n	801322a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80131a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131aa:	3301      	adds	r3, #1
 80131ac:	4619      	mov	r1, r3
 80131ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131b0:	f7fe f8dc 	bl	801136c <move_window>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d137      	bne.n	801322a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80131ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131bc:	2200      	movs	r2, #0
 80131be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80131c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c2:	3334      	adds	r3, #52	@ 0x34
 80131c4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7fd fe1d 	bl	8010e08 <ld_word>
 80131ce:	4603      	mov	r3, r0
 80131d0:	461a      	mov	r2, r3
 80131d2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d127      	bne.n	801322a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80131da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131dc:	3334      	adds	r3, #52	@ 0x34
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fd fe2b 	bl	8010e3a <ld_dword>
 80131e4:	4603      	mov	r3, r0
 80131e6:	4a1c      	ldr	r2, [pc, #112]	@ (8013258 <find_volume+0x48c>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d11e      	bne.n	801322a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80131ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ee:	3334      	adds	r3, #52	@ 0x34
 80131f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fd fe20 	bl	8010e3a <ld_dword>
 80131fa:	4603      	mov	r3, r0
 80131fc:	4a17      	ldr	r2, [pc, #92]	@ (801325c <find_volume+0x490>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d113      	bne.n	801322a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013204:	3334      	adds	r3, #52	@ 0x34
 8013206:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801320a:	4618      	mov	r0, r3
 801320c:	f7fd fe15 	bl	8010e3a <ld_dword>
 8013210:	4602      	mov	r2, r0
 8013212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013214:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013218:	3334      	adds	r3, #52	@ 0x34
 801321a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801321e:	4618      	mov	r0, r3
 8013220:	f7fd fe0b 	bl	8010e3a <ld_dword>
 8013224:	4602      	mov	r2, r0
 8013226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013228:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801322c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013230:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013232:	4b0b      	ldr	r3, [pc, #44]	@ (8013260 <find_volume+0x494>)
 8013234:	881b      	ldrh	r3, [r3, #0]
 8013236:	3301      	adds	r3, #1
 8013238:	b29a      	uxth	r2, r3
 801323a:	4b09      	ldr	r3, [pc, #36]	@ (8013260 <find_volume+0x494>)
 801323c:	801a      	strh	r2, [r3, #0]
 801323e:	4b08      	ldr	r3, [pc, #32]	@ (8013260 <find_volume+0x494>)
 8013240:	881a      	ldrh	r2, [r3, #0]
 8013242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013244:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013248:	f7fe f828 	bl	801129c <clear_lock>
#endif
	return FR_OK;
 801324c:	2300      	movs	r3, #0
}
 801324e:	4618      	mov	r0, r3
 8013250:	3758      	adds	r7, #88	@ 0x58
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	41615252 	.word	0x41615252
 801325c:	61417272 	.word	0x61417272
 8013260:	200142c8 	.word	0x200142c8

08013264 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801326e:	2309      	movs	r3, #9
 8013270:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d01c      	beq.n	80132b2 <validate+0x4e>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d018      	beq.n	80132b2 <validate+0x4e>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d013      	beq.n	80132b2 <validate+0x4e>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	889a      	ldrh	r2, [r3, #4]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	88db      	ldrh	r3, [r3, #6]
 8013294:	429a      	cmp	r2, r3
 8013296:	d10c      	bne.n	80132b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	785b      	ldrb	r3, [r3, #1]
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fd fd12 	bl	8010cc8 <disk_status>
 80132a4:	4603      	mov	r3, r0
 80132a6:	f003 0301 	and.w	r3, r3, #1
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d101      	bne.n	80132b2 <validate+0x4e>
			res = FR_OK;
 80132ae:	2300      	movs	r3, #0
 80132b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80132b2:	7bfb      	ldrb	r3, [r7, #15]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d102      	bne.n	80132be <validate+0x5a>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	e000      	b.n	80132c0 <validate+0x5c>
 80132be:	2300      	movs	r3, #0
 80132c0:	683a      	ldr	r2, [r7, #0]
 80132c2:	6013      	str	r3, [r2, #0]
	return res;
 80132c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
	...

080132d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b088      	sub	sp, #32
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	4613      	mov	r3, r2
 80132dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80132e2:	f107 0310 	add.w	r3, r7, #16
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7ff fcd5 	bl	8012c96 <get_ldnumber>
 80132ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	da01      	bge.n	80132f8 <f_mount+0x28>
 80132f4:	230b      	movs	r3, #11
 80132f6:	e02b      	b.n	8013350 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80132f8:	4a17      	ldr	r2, [pc, #92]	@ (8013358 <f_mount+0x88>)
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013300:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d005      	beq.n	8013314 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013308:	69b8      	ldr	r0, [r7, #24]
 801330a:	f7fd ffc7 	bl	801129c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	2200      	movs	r2, #0
 8013312:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d002      	beq.n	8013320 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2200      	movs	r2, #0
 801331e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	490d      	ldr	r1, [pc, #52]	@ (8013358 <f_mount+0x88>)
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d002      	beq.n	8013336 <f_mount+0x66>
 8013330:	79fb      	ldrb	r3, [r7, #7]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d001      	beq.n	801333a <f_mount+0x6a>
 8013336:	2300      	movs	r3, #0
 8013338:	e00a      	b.n	8013350 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801333a:	f107 010c 	add.w	r1, r7, #12
 801333e:	f107 0308 	add.w	r3, r7, #8
 8013342:	2200      	movs	r2, #0
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff fd41 	bl	8012dcc <find_volume>
 801334a:	4603      	mov	r3, r0
 801334c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3720      	adds	r7, #32
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	200142c4 	.word	0x200142c4

0801335c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b09a      	sub	sp, #104	@ 0x68
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	4613      	mov	r3, r2
 8013368:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <f_open+0x18>
 8013370:	2309      	movs	r3, #9
 8013372:	e1b9      	b.n	80136e8 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013374:	79fb      	ldrb	r3, [r7, #7]
 8013376:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801337a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801337c:	79fa      	ldrb	r2, [r7, #7]
 801337e:	f107 0110 	add.w	r1, r7, #16
 8013382:	f107 0308 	add.w	r3, r7, #8
 8013386:	4618      	mov	r0, r3
 8013388:	f7ff fd20 	bl	8012dcc <find_volume>
 801338c:	4603      	mov	r3, r0
 801338e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8013392:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013396:	2b00      	cmp	r3, #0
 8013398:	f040 819d 	bne.w	80136d6 <f_open+0x37a>
		dj.obj.fs = fs;
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80133a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80133a4:	f001 f898 	bl	80144d8 <ff_memalloc>
 80133a8:	65b8      	str	r0, [r7, #88]	@ 0x58
 80133aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d101      	bne.n	80133b4 <f_open+0x58>
 80133b0:	2311      	movs	r3, #17
 80133b2:	e199      	b.n	80136e8 <f_open+0x38c>
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80133b8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80133ba:	68ba      	ldr	r2, [r7, #8]
 80133bc:	f107 0314 	add.w	r3, r7, #20
 80133c0:	4611      	mov	r1, r2
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7ff fbf6 	bl	8012bb4 <follow_path>
 80133c8:	4603      	mov	r3, r0
 80133ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80133ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d118      	bne.n	8013408 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80133d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80133da:	b25b      	sxtb	r3, r3
 80133dc:	2b00      	cmp	r3, #0
 80133de:	da03      	bge.n	80133e8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 80133e0:	2306      	movs	r3, #6
 80133e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80133e6:	e00f      	b.n	8013408 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80133e8:	79fb      	ldrb	r3, [r7, #7]
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	bf8c      	ite	hi
 80133ee:	2301      	movhi	r3, #1
 80133f0:	2300      	movls	r3, #0
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	461a      	mov	r2, r3
 80133f6:	f107 0314 	add.w	r3, r7, #20
 80133fa:	4611      	mov	r1, r2
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7fd fe05 	bl	801100c <chk_lock>
 8013402:	4603      	mov	r3, r0
 8013404:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013408:	79fb      	ldrb	r3, [r7, #7]
 801340a:	f003 031c 	and.w	r3, r3, #28
 801340e:	2b00      	cmp	r3, #0
 8013410:	d07f      	beq.n	8013512 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8013412:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013416:	2b00      	cmp	r3, #0
 8013418:	d017      	beq.n	801344a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801341a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801341e:	2b04      	cmp	r3, #4
 8013420:	d10e      	bne.n	8013440 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013422:	f7fd fe4f 	bl	80110c4 <enq_lock>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d006      	beq.n	801343a <f_open+0xde>
 801342c:	f107 0314 	add.w	r3, r7, #20
 8013430:	4618      	mov	r0, r3
 8013432:	f7ff f831 	bl	8012498 <dir_register>
 8013436:	4603      	mov	r3, r0
 8013438:	e000      	b.n	801343c <f_open+0xe0>
 801343a:	2312      	movs	r3, #18
 801343c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013440:	79fb      	ldrb	r3, [r7, #7]
 8013442:	f043 0308 	orr.w	r3, r3, #8
 8013446:	71fb      	strb	r3, [r7, #7]
 8013448:	e010      	b.n	801346c <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801344a:	7ebb      	ldrb	r3, [r7, #26]
 801344c:	f003 0311 	and.w	r3, r3, #17
 8013450:	2b00      	cmp	r3, #0
 8013452:	d003      	beq.n	801345c <f_open+0x100>
					res = FR_DENIED;
 8013454:	2307      	movs	r3, #7
 8013456:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801345a:	e007      	b.n	801346c <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801345c:	79fb      	ldrb	r3, [r7, #7]
 801345e:	f003 0304 	and.w	r3, r3, #4
 8013462:	2b00      	cmp	r3, #0
 8013464:	d002      	beq.n	801346c <f_open+0x110>
 8013466:	2308      	movs	r3, #8
 8013468:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801346c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013470:	2b00      	cmp	r3, #0
 8013472:	d168      	bne.n	8013546 <f_open+0x1ea>
 8013474:	79fb      	ldrb	r3, [r7, #7]
 8013476:	f003 0308 	and.w	r3, r3, #8
 801347a:	2b00      	cmp	r3, #0
 801347c:	d063      	beq.n	8013546 <f_open+0x1ea>
				dw = GET_FATTIME();
 801347e:	f7fd f98d 	bl	801079c <get_fattime>
 8013482:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013486:	330e      	adds	r3, #14
 8013488:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801348a:	4618      	mov	r0, r3
 801348c:	f7fd fd13 	bl	8010eb6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013492:	3316      	adds	r3, #22
 8013494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013496:	4618      	mov	r0, r3
 8013498:	f7fd fd0d 	bl	8010eb6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801349e:	330b      	adds	r3, #11
 80134a0:	2220      	movs	r2, #32
 80134a2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80134a8:	4611      	mov	r1, r2
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7fe fc62 	bl	8011d74 <ld_clust>
 80134b0:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80134b6:	2200      	movs	r2, #0
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fe fc7a 	bl	8011db2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80134be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134c0:	331c      	adds	r3, #28
 80134c2:	2100      	movs	r1, #0
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fd fcf6 	bl	8010eb6 <st_dword>
					fs->wflag = 1;
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	2201      	movs	r2, #1
 80134ce:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80134d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d037      	beq.n	8013546 <f_open+0x1ea>
						dw = fs->winsect;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134da:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80134dc:	f107 0314 	add.w	r3, r7, #20
 80134e0:	2200      	movs	r2, #0
 80134e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fe f98d 	bl	8011804 <remove_chain>
 80134ea:	4603      	mov	r3, r0
 80134ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80134f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d126      	bne.n	8013546 <f_open+0x1ea>
							res = move_window(fs, dw);
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7fd ff35 	bl	801136c <move_window>
 8013502:	4603      	mov	r3, r0
 8013504:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801350c:	3a01      	subs	r2, #1
 801350e:	611a      	str	r2, [r3, #16]
 8013510:	e019      	b.n	8013546 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013512:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013516:	2b00      	cmp	r3, #0
 8013518:	d115      	bne.n	8013546 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801351a:	7ebb      	ldrb	r3, [r7, #26]
 801351c:	f003 0310 	and.w	r3, r3, #16
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <f_open+0x1d0>
					res = FR_NO_FILE;
 8013524:	2304      	movs	r3, #4
 8013526:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801352a:	e00c      	b.n	8013546 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801352c:	79fb      	ldrb	r3, [r7, #7]
 801352e:	f003 0302 	and.w	r3, r3, #2
 8013532:	2b00      	cmp	r3, #0
 8013534:	d007      	beq.n	8013546 <f_open+0x1ea>
 8013536:	7ebb      	ldrb	r3, [r7, #26]
 8013538:	f003 0301 	and.w	r3, r3, #1
 801353c:	2b00      	cmp	r3, #0
 801353e:	d002      	beq.n	8013546 <f_open+0x1ea>
						res = FR_DENIED;
 8013540:	2307      	movs	r3, #7
 8013542:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013546:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801354a:	2b00      	cmp	r3, #0
 801354c:	d126      	bne.n	801359c <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801354e:	79fb      	ldrb	r3, [r7, #7]
 8013550:	f003 0308 	and.w	r3, r3, #8
 8013554:	2b00      	cmp	r3, #0
 8013556:	d003      	beq.n	8013560 <f_open+0x204>
				mode |= FA_MODIFIED;
 8013558:	79fb      	ldrb	r3, [r7, #7]
 801355a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801355e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801356e:	79fb      	ldrb	r3, [r7, #7]
 8013570:	2b01      	cmp	r3, #1
 8013572:	bf8c      	ite	hi
 8013574:	2301      	movhi	r3, #1
 8013576:	2300      	movls	r3, #0
 8013578:	b2db      	uxtb	r3, r3
 801357a:	461a      	mov	r2, r3
 801357c:	f107 0314 	add.w	r3, r7, #20
 8013580:	4611      	mov	r1, r2
 8013582:	4618      	mov	r0, r3
 8013584:	f7fd fdc0 	bl	8011108 <inc_lock>
 8013588:	4602      	mov	r2, r0
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	691b      	ldr	r3, [r3, #16]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d102      	bne.n	801359c <f_open+0x240>
 8013596:	2302      	movs	r3, #2
 8013598:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801359c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f040 8095 	bne.w	80136d0 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80135aa:	4611      	mov	r1, r2
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7fe fbe1 	bl	8011d74 <ld_clust>
 80135b2:	4602      	mov	r2, r0
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80135b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ba:	331c      	adds	r3, #28
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fd fc3c 	bl	8010e3a <ld_dword>
 80135c2:	4602      	mov	r2, r0
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2200      	movs	r2, #0
 80135cc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80135ce:	693a      	ldr	r2, [r7, #16]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	88da      	ldrh	r2, [r3, #6]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	79fa      	ldrb	r2, [r7, #7]
 80135e0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2200      	movs	r2, #0
 80135e6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2200      	movs	r2, #0
 80135ec:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2200      	movs	r2, #0
 80135f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	3330      	adds	r3, #48	@ 0x30
 80135f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135fc:	2100      	movs	r1, #0
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fd fca6 	bl	8010f50 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013604:	79fb      	ldrb	r3, [r7, #7]
 8013606:	f003 0320 	and.w	r3, r3, #32
 801360a:	2b00      	cmp	r3, #0
 801360c:	d060      	beq.n	80136d0 <f_open+0x374>
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d05c      	beq.n	80136d0 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	68da      	ldr	r2, [r3, #12]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	895b      	ldrh	r3, [r3, #10]
 8013622:	025b      	lsls	r3, r3, #9
 8013624:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013632:	e016      	b.n	8013662 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013638:	4618      	mov	r0, r3
 801363a:	f7fd ff52 	bl	80114e2 <get_fat>
 801363e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013642:	2b01      	cmp	r3, #1
 8013644:	d802      	bhi.n	801364c <f_open+0x2f0>
 8013646:	2302      	movs	r3, #2
 8013648:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801364c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013652:	d102      	bne.n	801365a <f_open+0x2fe>
 8013654:	2301      	movs	r3, #1
 8013656:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801365a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801365c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013662:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013666:	2b00      	cmp	r3, #0
 8013668:	d103      	bne.n	8013672 <f_open+0x316>
 801366a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801366c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801366e:	429a      	cmp	r2, r3
 8013670:	d8e0      	bhi.n	8013634 <f_open+0x2d8>
				}
				fp->clust = clst;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013676:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013678:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801367c:	2b00      	cmp	r3, #0
 801367e:	d127      	bne.n	80136d0 <f_open+0x374>
 8013680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013686:	2b00      	cmp	r3, #0
 8013688:	d022      	beq.n	80136d0 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801368e:	4618      	mov	r0, r3
 8013690:	f7fd ff08 	bl	80114a4 <clust2sect>
 8013694:	64b8      	str	r0, [r7, #72]	@ 0x48
 8013696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013698:	2b00      	cmp	r3, #0
 801369a:	d103      	bne.n	80136a4 <f_open+0x348>
						res = FR_INT_ERR;
 801369c:	2302      	movs	r3, #2
 801369e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80136a2:	e015      	b.n	80136d0 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80136a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136a6:	0a5a      	lsrs	r2, r3, #9
 80136a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136aa:	441a      	add	r2, r3
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	7858      	ldrb	r0, [r3, #1]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	6a1a      	ldr	r2, [r3, #32]
 80136be:	2301      	movs	r3, #1
 80136c0:	f7fd fb44 	bl	8010d4c <disk_read>
 80136c4:	4603      	mov	r3, r0
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d002      	beq.n	80136d0 <f_open+0x374>
 80136ca:	2301      	movs	r3, #1
 80136cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80136d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80136d2:	f000 ff0d 	bl	80144f0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80136d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d002      	beq.n	80136e4 <f_open+0x388>
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2200      	movs	r2, #0
 80136e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80136e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3768      	adds	r7, #104	@ 0x68
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08c      	sub	sp, #48	@ 0x30
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
 80136fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	2200      	movs	r2, #0
 8013706:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f107 0210 	add.w	r2, r7, #16
 801370e:	4611      	mov	r1, r2
 8013710:	4618      	mov	r0, r3
 8013712:	f7ff fda7 	bl	8013264 <validate>
 8013716:	4603      	mov	r3, r0
 8013718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801371c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013720:	2b00      	cmp	r3, #0
 8013722:	d107      	bne.n	8013734 <f_write+0x44>
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	7d5b      	ldrb	r3, [r3, #21]
 8013728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801372c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013730:	2b00      	cmp	r3, #0
 8013732:	d002      	beq.n	801373a <f_write+0x4a>
 8013734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013738:	e14b      	b.n	80139d2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	7d1b      	ldrb	r3, [r3, #20]
 801373e:	f003 0302 	and.w	r3, r3, #2
 8013742:	2b00      	cmp	r3, #0
 8013744:	d101      	bne.n	801374a <f_write+0x5a>
 8013746:	2307      	movs	r3, #7
 8013748:	e143      	b.n	80139d2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	699a      	ldr	r2, [r3, #24]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	441a      	add	r2, r3
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	699b      	ldr	r3, [r3, #24]
 8013756:	429a      	cmp	r2, r3
 8013758:	f080 812d 	bcs.w	80139b6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	699b      	ldr	r3, [r3, #24]
 8013760:	43db      	mvns	r3, r3
 8013762:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013764:	e127      	b.n	80139b6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	699b      	ldr	r3, [r3, #24]
 801376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801376e:	2b00      	cmp	r3, #0
 8013770:	f040 80e3 	bne.w	801393a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	699b      	ldr	r3, [r3, #24]
 8013778:	0a5b      	lsrs	r3, r3, #9
 801377a:	693a      	ldr	r2, [r7, #16]
 801377c:	8952      	ldrh	r2, [r2, #10]
 801377e:	3a01      	subs	r2, #1
 8013780:	4013      	ands	r3, r2
 8013782:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d143      	bne.n	8013812 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	699b      	ldr	r3, [r3, #24]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10c      	bne.n	80137ac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801379a:	2b00      	cmp	r3, #0
 801379c:	d11a      	bne.n	80137d4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	2100      	movs	r1, #0
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fe f893 	bl	80118ce <create_chain>
 80137a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80137aa:	e013      	b.n	80137d4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d007      	beq.n	80137c4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	699b      	ldr	r3, [r3, #24]
 80137b8:	4619      	mov	r1, r3
 80137ba:	68f8      	ldr	r0, [r7, #12]
 80137bc:	f7fe f91f 	bl	80119fe <clmt_clust>
 80137c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80137c2:	e007      	b.n	80137d4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	69db      	ldr	r3, [r3, #28]
 80137ca:	4619      	mov	r1, r3
 80137cc:	4610      	mov	r0, r2
 80137ce:	f7fe f87e 	bl	80118ce <create_chain>
 80137d2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80137d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f000 80f2 	beq.w	80139c0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80137dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137de:	2b01      	cmp	r3, #1
 80137e0:	d104      	bne.n	80137ec <f_write+0xfc>
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2202      	movs	r2, #2
 80137e6:	755a      	strb	r2, [r3, #21]
 80137e8:	2302      	movs	r3, #2
 80137ea:	e0f2      	b.n	80139d2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80137ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137f2:	d104      	bne.n	80137fe <f_write+0x10e>
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2201      	movs	r2, #1
 80137f8:	755a      	strb	r2, [r3, #21]
 80137fa:	2301      	movs	r3, #1
 80137fc:	e0e9      	b.n	80139d2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013802:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	689b      	ldr	r3, [r3, #8]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d102      	bne.n	8013812 <f_write+0x122>
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013810:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	7d1b      	ldrb	r3, [r3, #20]
 8013816:	b25b      	sxtb	r3, r3
 8013818:	2b00      	cmp	r3, #0
 801381a:	da18      	bge.n	801384e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	7858      	ldrb	r0, [r3, #1]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6a1a      	ldr	r2, [r3, #32]
 801382a:	2301      	movs	r3, #1
 801382c:	f7fd faae 	bl	8010d8c <disk_write>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d004      	beq.n	8013840 <f_write+0x150>
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2201      	movs	r2, #1
 801383a:	755a      	strb	r2, [r3, #21]
 801383c:	2301      	movs	r3, #1
 801383e:	e0c8      	b.n	80139d2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	7d1b      	ldrb	r3, [r3, #20]
 8013844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013848:	b2da      	uxtb	r2, r3
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801384e:	693a      	ldr	r2, [r7, #16]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	69db      	ldr	r3, [r3, #28]
 8013854:	4619      	mov	r1, r3
 8013856:	4610      	mov	r0, r2
 8013858:	f7fd fe24 	bl	80114a4 <clust2sect>
 801385c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d104      	bne.n	801386e <f_write+0x17e>
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	2202      	movs	r2, #2
 8013868:	755a      	strb	r2, [r3, #21]
 801386a:	2302      	movs	r3, #2
 801386c:	e0b1      	b.n	80139d2 <f_write+0x2e2>
			sect += csect;
 801386e:	697a      	ldr	r2, [r7, #20]
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	4413      	add	r3, r2
 8013874:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	0a5b      	lsrs	r3, r3, #9
 801387a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801387c:	6a3b      	ldr	r3, [r7, #32]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d03c      	beq.n	80138fc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013882:	69ba      	ldr	r2, [r7, #24]
 8013884:	6a3b      	ldr	r3, [r7, #32]
 8013886:	4413      	add	r3, r2
 8013888:	693a      	ldr	r2, [r7, #16]
 801388a:	8952      	ldrh	r2, [r2, #10]
 801388c:	4293      	cmp	r3, r2
 801388e:	d905      	bls.n	801389c <f_write+0x1ac>
					cc = fs->csize - csect;
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	895b      	ldrh	r3, [r3, #10]
 8013894:	461a      	mov	r2, r3
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	7858      	ldrb	r0, [r3, #1]
 80138a0:	6a3b      	ldr	r3, [r7, #32]
 80138a2:	697a      	ldr	r2, [r7, #20]
 80138a4:	69f9      	ldr	r1, [r7, #28]
 80138a6:	f7fd fa71 	bl	8010d8c <disk_write>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d004      	beq.n	80138ba <f_write+0x1ca>
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2201      	movs	r2, #1
 80138b4:	755a      	strb	r2, [r3, #21]
 80138b6:	2301      	movs	r3, #1
 80138b8:	e08b      	b.n	80139d2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6a1a      	ldr	r2, [r3, #32]
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	1ad3      	subs	r3, r2, r3
 80138c2:	6a3a      	ldr	r2, [r7, #32]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d915      	bls.n	80138f4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6a1a      	ldr	r2, [r3, #32]
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	1ad3      	subs	r3, r2, r3
 80138d6:	025b      	lsls	r3, r3, #9
 80138d8:	69fa      	ldr	r2, [r7, #28]
 80138da:	4413      	add	r3, r2
 80138dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138e0:	4619      	mov	r1, r3
 80138e2:	f7fd fb14 	bl	8010f0e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	7d1b      	ldrb	r3, [r3, #20]
 80138ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80138ee:	b2da      	uxtb	r2, r3
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80138f4:	6a3b      	ldr	r3, [r7, #32]
 80138f6:	025b      	lsls	r3, r3, #9
 80138f8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80138fa:	e03f      	b.n	801397c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	6a1b      	ldr	r3, [r3, #32]
 8013900:	697a      	ldr	r2, [r7, #20]
 8013902:	429a      	cmp	r2, r3
 8013904:	d016      	beq.n	8013934 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	699a      	ldr	r2, [r3, #24]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801390e:	429a      	cmp	r2, r3
 8013910:	d210      	bcs.n	8013934 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	7858      	ldrb	r0, [r3, #1]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801391c:	2301      	movs	r3, #1
 801391e:	697a      	ldr	r2, [r7, #20]
 8013920:	f7fd fa14 	bl	8010d4c <disk_read>
 8013924:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013926:	2b00      	cmp	r3, #0
 8013928:	d004      	beq.n	8013934 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2201      	movs	r2, #1
 801392e:	755a      	strb	r2, [r3, #21]
 8013930:	2301      	movs	r3, #1
 8013932:	e04e      	b.n	80139d2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	697a      	ldr	r2, [r7, #20]
 8013938:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	699b      	ldr	r3, [r3, #24]
 801393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013942:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013946:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	429a      	cmp	r2, r3
 801394e:	d901      	bls.n	8013954 <f_write+0x264>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	699b      	ldr	r3, [r3, #24]
 801395e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013962:	4413      	add	r3, r2
 8013964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013966:	69f9      	ldr	r1, [r7, #28]
 8013968:	4618      	mov	r0, r3
 801396a:	f7fd fad0 	bl	8010f0e <mem_cpy>
		fp->flag |= FA_DIRTY;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	7d1b      	ldrb	r3, [r3, #20]
 8013972:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013976:	b2da      	uxtb	r2, r3
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801397c:	69fa      	ldr	r2, [r7, #28]
 801397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013980:	4413      	add	r3, r2
 8013982:	61fb      	str	r3, [r7, #28]
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	699a      	ldr	r2, [r3, #24]
 8013988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398a:	441a      	add	r2, r3
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	619a      	str	r2, [r3, #24]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	68da      	ldr	r2, [r3, #12]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	699b      	ldr	r3, [r3, #24]
 8013998:	429a      	cmp	r2, r3
 801399a:	bf38      	it	cc
 801399c:	461a      	movcc	r2, r3
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	60da      	str	r2, [r3, #12]
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a8:	441a      	add	r2, r3
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	601a      	str	r2, [r3, #0]
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139b2:	1ad3      	subs	r3, r2, r3
 80139b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f47f aed4 	bne.w	8013766 <f_write+0x76>
 80139be:	e000      	b.n	80139c2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80139c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	7d1b      	ldrb	r3, [r3, #20]
 80139c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139ca:	b2da      	uxtb	r2, r3
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3730      	adds	r7, #48	@ 0x30
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80139da:	b580      	push	{r7, lr}
 80139dc:	b086      	sub	sp, #24
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f107 0208 	add.w	r2, r7, #8
 80139e8:	4611      	mov	r1, r2
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7ff fc3a 	bl	8013264 <validate>
 80139f0:	4603      	mov	r3, r0
 80139f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80139f4:	7dfb      	ldrb	r3, [r7, #23]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d168      	bne.n	8013acc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	7d1b      	ldrb	r3, [r3, #20]
 80139fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d062      	beq.n	8013acc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	7d1b      	ldrb	r3, [r3, #20]
 8013a0a:	b25b      	sxtb	r3, r3
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	da15      	bge.n	8013a3c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	7858      	ldrb	r0, [r3, #1]
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6a1a      	ldr	r2, [r3, #32]
 8013a1e:	2301      	movs	r3, #1
 8013a20:	f7fd f9b4 	bl	8010d8c <disk_write>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <f_sync+0x54>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e04f      	b.n	8013ace <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	7d1b      	ldrb	r3, [r3, #20]
 8013a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a36:	b2da      	uxtb	r2, r3
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013a3c:	f7fc feae 	bl	801079c <get_fattime>
 8013a40:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013a42:	68ba      	ldr	r2, [r7, #8]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	f7fd fc8e 	bl	801136c <move_window>
 8013a50:	4603      	mov	r3, r0
 8013a52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013a54:	7dfb      	ldrb	r3, [r7, #23]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d138      	bne.n	8013acc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	330b      	adds	r3, #11
 8013a64:	781a      	ldrb	r2, [r3, #0]
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	330b      	adds	r3, #11
 8013a6a:	f042 0220 	orr.w	r2, r2, #32
 8013a6e:	b2d2      	uxtb	r2, r2
 8013a70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6818      	ldr	r0, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	68f9      	ldr	r1, [r7, #12]
 8013a7e:	f7fe f998 	bl	8011db2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	f103 021c 	add.w	r2, r3, #28
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	4610      	mov	r0, r2
 8013a90:	f7fd fa11 	bl	8010eb6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	3316      	adds	r3, #22
 8013a98:	6939      	ldr	r1, [r7, #16]
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fd fa0b 	bl	8010eb6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	3312      	adds	r3, #18
 8013aa4:	2100      	movs	r1, #0
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fd f9ea 	bl	8010e80 <st_word>
					fs->wflag = 1;
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	2201      	movs	r2, #1
 8013ab0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7fd fc87 	bl	80113c8 <sync_fs>
 8013aba:	4603      	mov	r3, r0
 8013abc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	7d1b      	ldrb	r3, [r3, #20]
 8013ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013ac6:	b2da      	uxtb	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3718      	adds	r7, #24
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}

08013ad6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013ad6:	b580      	push	{r7, lr}
 8013ad8:	b084      	sub	sp, #16
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f7ff ff7b 	bl	80139da <f_sync>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013ae8:	7bfb      	ldrb	r3, [r7, #15]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d118      	bne.n	8013b20 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f107 0208 	add.w	r2, r7, #8
 8013af4:	4611      	mov	r1, r2
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff fbb4 	bl	8013264 <validate>
 8013afc:	4603      	mov	r3, r0
 8013afe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013b00:	7bfb      	ldrb	r3, [r7, #15]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10c      	bne.n	8013b20 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	691b      	ldr	r3, [r3, #16]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fd fb8a 	bl	8011224 <dec_lock>
 8013b10:	4603      	mov	r3, r0
 8013b12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013b14:	7bfb      	ldrb	r3, [r7, #15]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d102      	bne.n	8013b20 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3710      	adds	r7, #16
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}

08013b2a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b090      	sub	sp, #64	@ 0x40
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f107 0208 	add.w	r2, r7, #8
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7ff fb91 	bl	8013264 <validate>
 8013b42:	4603      	mov	r3, r0
 8013b44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013b48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d103      	bne.n	8013b58 <f_lseek+0x2e>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	7d5b      	ldrb	r3, [r3, #21]
 8013b54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013b58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d002      	beq.n	8013b66 <f_lseek+0x3c>
 8013b60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013b64:	e1e6      	b.n	8013f34 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	f000 80d1 	beq.w	8013d12 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b76:	d15a      	bne.n	8013c2e <f_lseek+0x104>
			tbl = fp->cltbl;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b7c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b80:	1d1a      	adds	r2, r3, #4
 8013b82:	627a      	str	r2, [r7, #36]	@ 0x24
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	617b      	str	r3, [r7, #20]
 8013b88:	2302      	movs	r3, #2
 8013b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	689b      	ldr	r3, [r3, #8]
 8013b90:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8013b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d03a      	beq.n	8013c0e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b9a:	613b      	str	r3, [r7, #16]
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ba2:	3302      	adds	r3, #2
 8013ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8013ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ba8:	60fb      	str	r3, [r7, #12]
 8013baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bac:	3301      	adds	r3, #1
 8013bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fd fc94 	bl	80114e2 <get_fat>
 8013bba:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d804      	bhi.n	8013bcc <f_lseek+0xa2>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2202      	movs	r2, #2
 8013bc6:	755a      	strb	r2, [r3, #21]
 8013bc8:	2302      	movs	r3, #2
 8013bca:	e1b3      	b.n	8013f34 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bd2:	d104      	bne.n	8013bde <f_lseek+0xb4>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2201      	movs	r2, #1
 8013bd8:	755a      	strb	r2, [r3, #21]
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e1aa      	b.n	8013f34 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	3301      	adds	r3, #1
 8013be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d0de      	beq.n	8013ba6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d809      	bhi.n	8013c04 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf2:	1d1a      	adds	r2, r3, #4
 8013bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8013bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013bf8:	601a      	str	r2, [r3, #0]
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bfc:	1d1a      	adds	r2, r3, #4
 8013bfe:	627a      	str	r2, [r7, #36]	@ 0x24
 8013c00:	693a      	ldr	r2, [r7, #16]
 8013c02:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	699b      	ldr	r3, [r3, #24]
 8013c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d3c4      	bcc.n	8013b98 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c14:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d803      	bhi.n	8013c26 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c20:	2200      	movs	r2, #0
 8013c22:	601a      	str	r2, [r3, #0]
 8013c24:	e184      	b.n	8013f30 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013c26:	2311      	movs	r3, #17
 8013c28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013c2c:	e180      	b.n	8013f30 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	683a      	ldr	r2, [r7, #0]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d902      	bls.n	8013c3e <f_lseek+0x114>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	683a      	ldr	r2, [r7, #0]
 8013c42:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	f000 8172 	beq.w	8013f30 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	4619      	mov	r1, r3
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7fd fed3 	bl	80119fe <clmt_clust>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013c5e:	68ba      	ldr	r2, [r7, #8]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	69db      	ldr	r3, [r3, #28]
 8013c64:	4619      	mov	r1, r3
 8013c66:	4610      	mov	r0, r2
 8013c68:	f7fd fc1c 	bl	80114a4 <clust2sect>
 8013c6c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d104      	bne.n	8013c7e <f_lseek+0x154>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2202      	movs	r2, #2
 8013c78:	755a      	strb	r2, [r3, #21]
 8013c7a:	2302      	movs	r3, #2
 8013c7c:	e15a      	b.n	8013f34 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	3b01      	subs	r3, #1
 8013c82:	0a5b      	lsrs	r3, r3, #9
 8013c84:	68ba      	ldr	r2, [r7, #8]
 8013c86:	8952      	ldrh	r2, [r2, #10]
 8013c88:	3a01      	subs	r2, #1
 8013c8a:	4013      	ands	r3, r2
 8013c8c:	69ba      	ldr	r2, [r7, #24]
 8013c8e:	4413      	add	r3, r2
 8013c90:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	699b      	ldr	r3, [r3, #24]
 8013c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f000 8148 	beq.w	8013f30 <f_lseek+0x406>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6a1b      	ldr	r3, [r3, #32]
 8013ca4:	69ba      	ldr	r2, [r7, #24]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	f000 8142 	beq.w	8013f30 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	7d1b      	ldrb	r3, [r3, #20]
 8013cb0:	b25b      	sxtb	r3, r3
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	da18      	bge.n	8013ce8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	7858      	ldrb	r0, [r3, #1]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6a1a      	ldr	r2, [r3, #32]
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	f7fd f861 	bl	8010d8c <disk_write>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d004      	beq.n	8013cda <f_lseek+0x1b0>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	755a      	strb	r2, [r3, #21]
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e12c      	b.n	8013f34 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	7d1b      	ldrb	r3, [r3, #20]
 8013cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ce2:	b2da      	uxtb	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	7858      	ldrb	r0, [r3, #1]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	69ba      	ldr	r2, [r7, #24]
 8013cf6:	f7fd f829 	bl	8010d4c <disk_read>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d004      	beq.n	8013d0a <f_lseek+0x1e0>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2201      	movs	r2, #1
 8013d04:	755a      	strb	r2, [r3, #21]
 8013d06:	2301      	movs	r3, #1
 8013d08:	e114      	b.n	8013f34 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	69ba      	ldr	r2, [r7, #24]
 8013d0e:	621a      	str	r2, [r3, #32]
 8013d10:	e10e      	b.n	8013f30 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	68db      	ldr	r3, [r3, #12]
 8013d16:	683a      	ldr	r2, [r7, #0]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d908      	bls.n	8013d2e <f_lseek+0x204>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	7d1b      	ldrb	r3, [r3, #20]
 8013d20:	f003 0302 	and.w	r3, r3, #2
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d102      	bne.n	8013d2e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	699b      	ldr	r3, [r3, #24]
 8013d32:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013d34:	2300      	movs	r3, #0
 8013d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d3c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	f000 80a7 	beq.w	8013e94 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	895b      	ldrh	r3, [r3, #10]
 8013d4a:	025b      	lsls	r3, r3, #9
 8013d4c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013d4e:	6a3b      	ldr	r3, [r7, #32]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d01b      	beq.n	8013d8c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	1e5a      	subs	r2, r3, #1
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8013d5e:	6a3b      	ldr	r3, [r7, #32]
 8013d60:	1e59      	subs	r1, r3, #1
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d30f      	bcc.n	8013d8c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013d6c:	6a3b      	ldr	r3, [r7, #32]
 8013d6e:	1e5a      	subs	r2, r3, #1
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	425b      	negs	r3, r3
 8013d74:	401a      	ands	r2, r3
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	699b      	ldr	r3, [r3, #24]
 8013d7e:	683a      	ldr	r2, [r7, #0]
 8013d80:	1ad3      	subs	r3, r2, r3
 8013d82:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	69db      	ldr	r3, [r3, #28]
 8013d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013d8a:	e022      	b.n	8013dd2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	689b      	ldr	r3, [r3, #8]
 8013d90:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d119      	bne.n	8013dcc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fd fd96 	bl	80118ce <create_chain>
 8013da2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d104      	bne.n	8013db4 <f_lseek+0x28a>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2202      	movs	r2, #2
 8013dae:	755a      	strb	r2, [r3, #21]
 8013db0:	2302      	movs	r3, #2
 8013db2:	e0bf      	b.n	8013f34 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dba:	d104      	bne.n	8013dc6 <f_lseek+0x29c>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	755a      	strb	r2, [r3, #21]
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	e0b6      	b.n	8013f34 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013dca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013dd0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d05d      	beq.n	8013e94 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8013dd8:	e03a      	b.n	8013e50 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	69fb      	ldr	r3, [r7, #28]
 8013dde:	1ad3      	subs	r3, r2, r3
 8013de0:	603b      	str	r3, [r7, #0]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	699a      	ldr	r2, [r3, #24]
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	441a      	add	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	7d1b      	ldrb	r3, [r3, #20]
 8013df2:	f003 0302 	and.w	r3, r3, #2
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00b      	beq.n	8013e12 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fd fd65 	bl	80118ce <create_chain>
 8013e04:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d108      	bne.n	8013e1e <f_lseek+0x2f4>
							ofs = 0; break;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	603b      	str	r3, [r7, #0]
 8013e10:	e022      	b.n	8013e58 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fd fb63 	bl	80114e2 <get_fat>
 8013e1c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e24:	d104      	bne.n	8013e30 <f_lseek+0x306>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2201      	movs	r2, #1
 8013e2a:	755a      	strb	r2, [r3, #21]
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e081      	b.n	8013f34 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d904      	bls.n	8013e40 <f_lseek+0x316>
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	699b      	ldr	r3, [r3, #24]
 8013e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d304      	bcc.n	8013e4a <f_lseek+0x320>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2202      	movs	r2, #2
 8013e44:	755a      	strb	r2, [r3, #21]
 8013e46:	2302      	movs	r3, #2
 8013e48:	e074      	b.n	8013f34 <f_lseek+0x40a>
					fp->clust = clst;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013e4e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013e50:	683a      	ldr	r2, [r7, #0]
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d8c0      	bhi.n	8013dda <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	699a      	ldr	r2, [r3, #24]
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	441a      	add	r2, r3
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d012      	beq.n	8013e94 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fd fb16 	bl	80114a4 <clust2sect>
 8013e78:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d104      	bne.n	8013e8a <f_lseek+0x360>
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2202      	movs	r2, #2
 8013e84:	755a      	strb	r2, [r3, #21]
 8013e86:	2302      	movs	r3, #2
 8013e88:	e054      	b.n	8013f34 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	0a5b      	lsrs	r3, r3, #9
 8013e8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e90:	4413      	add	r3, r2
 8013e92:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	699a      	ldr	r2, [r3, #24]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	68db      	ldr	r3, [r3, #12]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d90a      	bls.n	8013eb6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	699a      	ldr	r2, [r3, #24]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	7d1b      	ldrb	r3, [r3, #20]
 8013eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eb0:	b2da      	uxtb	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	699b      	ldr	r3, [r3, #24]
 8013eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d036      	beq.n	8013f30 <f_lseek+0x406>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	6a1b      	ldr	r3, [r3, #32]
 8013ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d031      	beq.n	8013f30 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	7d1b      	ldrb	r3, [r3, #20]
 8013ed0:	b25b      	sxtb	r3, r3
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	da18      	bge.n	8013f08 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	7858      	ldrb	r0, [r3, #1]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6a1a      	ldr	r2, [r3, #32]
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	f7fc ff51 	bl	8010d8c <disk_write>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <f_lseek+0x3d0>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	755a      	strb	r2, [r3, #21]
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	e01c      	b.n	8013f34 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	7d1b      	ldrb	r3, [r3, #20]
 8013efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f02:	b2da      	uxtb	r2, r3
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	7858      	ldrb	r0, [r3, #1]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013f12:	2301      	movs	r3, #1
 8013f14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f16:	f7fc ff19 	bl	8010d4c <disk_read>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d004      	beq.n	8013f2a <f_lseek+0x400>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2201      	movs	r2, #1
 8013f24:	755a      	strb	r2, [r3, #21]
 8013f26:	2301      	movs	r3, #1
 8013f28:	e004      	b.n	8013f34 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f2e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013f30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3740      	adds	r7, #64	@ 0x40
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b086      	sub	sp, #24
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d101      	bne.n	8013f50 <f_opendir+0x14>
 8013f4c:	2309      	movs	r3, #9
 8013f4e:	e074      	b.n	801403a <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013f54:	f107 0108 	add.w	r1, r7, #8
 8013f58:	463b      	mov	r3, r7
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe ff35 	bl	8012dcc <find_volume>
 8013f62:	4603      	mov	r3, r0
 8013f64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f66:	7dfb      	ldrb	r3, [r7, #23]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d15f      	bne.n	801402c <f_opendir+0xf0>
		obj->fs = fs;
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8013f72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013f76:	f000 faaf 	bl	80144d8 <ff_memalloc>
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d101      	bne.n	8013f86 <f_opendir+0x4a>
 8013f82:	2311      	movs	r3, #17
 8013f84:	e059      	b.n	801403a <f_opendir+0xfe>
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	68fa      	ldr	r2, [r7, #12]
 8013f8a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	4619      	mov	r1, r3
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7fe fe0f 	bl	8012bb4 <follow_path>
 8013f96:	4603      	mov	r3, r0
 8013f98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013f9a:	7dfb      	ldrb	r3, [r7, #23]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d13d      	bne.n	801401c <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013fa6:	b25b      	sxtb	r3, r3
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	db12      	blt.n	8013fd2 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	799b      	ldrb	r3, [r3, #6]
 8013fb0:	f003 0310 	and.w	r3, r3, #16
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d00a      	beq.n	8013fce <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013fb8:	68ba      	ldr	r2, [r7, #8]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6a1b      	ldr	r3, [r3, #32]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	4610      	mov	r0, r2
 8013fc2:	f7fd fed7 	bl	8011d74 <ld_clust>
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	609a      	str	r2, [r3, #8]
 8013fcc:	e001      	b.n	8013fd2 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013fce:	2305      	movs	r3, #5
 8013fd0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013fd2:	7dfb      	ldrb	r3, [r7, #23]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d121      	bne.n	801401c <f_opendir+0xe0>
				obj->id = fs->id;
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	88da      	ldrh	r2, [r3, #6]
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f7fd fd3f 	bl	8011a66 <dir_sdi>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d114      	bne.n	801401c <f_opendir+0xe0>
					if (obj->sclust) {
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	689b      	ldr	r3, [r3, #8]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d00d      	beq.n	8014016 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013ffa:	2100      	movs	r1, #0
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7fd f883 	bl	8011108 <inc_lock>
 8014002:	4602      	mov	r2, r0
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014008:	693b      	ldr	r3, [r7, #16]
 801400a:	691b      	ldr	r3, [r3, #16]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d105      	bne.n	801401c <f_opendir+0xe0>
 8014010:	2312      	movs	r3, #18
 8014012:	75fb      	strb	r3, [r7, #23]
 8014014:	e002      	b.n	801401c <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	2200      	movs	r2, #0
 801401a:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 801401c:	68f8      	ldr	r0, [r7, #12]
 801401e:	f000 fa67 	bl	80144f0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014022:	7dfb      	ldrb	r3, [r7, #23]
 8014024:	2b04      	cmp	r3, #4
 8014026:	d101      	bne.n	801402c <f_opendir+0xf0>
 8014028:	2305      	movs	r3, #5
 801402a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801402c:	7dfb      	ldrb	r3, [r7, #23]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d002      	beq.n	8014038 <f_opendir+0xfc>
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	2200      	movs	r2, #0
 8014036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014038:	7dfb      	ldrb	r3, [r7, #23]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3718      	adds	r7, #24
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b084      	sub	sp, #16
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f107 0208 	add.w	r2, r7, #8
 8014050:	4611      	mov	r1, r2
 8014052:	4618      	mov	r0, r3
 8014054:	f7ff f906 	bl	8013264 <validate>
 8014058:	4603      	mov	r3, r0
 801405a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801405c:	7bfb      	ldrb	r3, [r7, #15]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d110      	bne.n	8014084 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	691b      	ldr	r3, [r3, #16]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d006      	beq.n	8014078 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	691b      	ldr	r3, [r3, #16]
 801406e:	4618      	mov	r0, r3
 8014070:	f7fd f8d8 	bl	8011224 <dec_lock>
 8014074:	4603      	mov	r3, r0
 8014076:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014078:	7bfb      	ldrb	r3, [r7, #15]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d102      	bne.n	8014084 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2200      	movs	r2, #0
 8014082:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014084:	7bfb      	ldrb	r3, [r7, #15]
}
 8014086:	4618      	mov	r0, r3
 8014088:	3710      	adds	r7, #16
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}

0801408e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801408e:	b580      	push	{r7, lr}
 8014090:	b086      	sub	sp, #24
 8014092:	af00      	add	r7, sp, #0
 8014094:	6078      	str	r0, [r7, #4]
 8014096:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f107 020c 	add.w	r2, r7, #12
 801409e:	4611      	mov	r1, r2
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7ff f8df 	bl	8013264 <validate>
 80140a6:	4603      	mov	r3, r0
 80140a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80140aa:	7dfb      	ldrb	r3, [r7, #23]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d136      	bne.n	801411e <f_readdir+0x90>
		if (!fno) {
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d106      	bne.n	80140c4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80140b6:	2100      	movs	r1, #0
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7fd fcd4 	bl	8011a66 <dir_sdi>
 80140be:	4603      	mov	r3, r0
 80140c0:	75fb      	strb	r3, [r7, #23]
 80140c2:	e02c      	b.n	801411e <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 80140c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80140c8:	f000 fa06 	bl	80144d8 <ff_memalloc>
 80140cc:	6138      	str	r0, [r7, #16]
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d101      	bne.n	80140d8 <f_readdir+0x4a>
 80140d4:	2311      	movs	r3, #17
 80140d6:	e023      	b.n	8014120 <f_readdir+0x92>
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	693a      	ldr	r2, [r7, #16]
 80140dc:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 80140de:	2100      	movs	r1, #0
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7fe f872 	bl	80121ca <dir_read>
 80140e6:	4603      	mov	r3, r0
 80140e8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80140ea:	7dfb      	ldrb	r3, [r7, #23]
 80140ec:	2b04      	cmp	r3, #4
 80140ee:	d101      	bne.n	80140f4 <f_readdir+0x66>
 80140f0:	2300      	movs	r3, #0
 80140f2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80140f4:	7dfb      	ldrb	r3, [r7, #23]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d10e      	bne.n	8014118 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 80140fa:	6839      	ldr	r1, [r7, #0]
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7fe fac3 	bl	8012688 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014102:	2100      	movs	r1, #0
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7fd fd29 	bl	8011b5c <dir_next>
 801410a:	4603      	mov	r3, r0
 801410c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801410e:	7dfb      	ldrb	r3, [r7, #23]
 8014110:	2b04      	cmp	r3, #4
 8014112:	d101      	bne.n	8014118 <f_readdir+0x8a>
 8014114:	2300      	movs	r3, #0
 8014116:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8014118:	6938      	ldr	r0, [r7, #16]
 801411a:	f000 f9e9 	bl	80144f0 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 801411e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014120:	4618      	mov	r0, r3
 8014122:	3718      	adds	r7, #24
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b092      	sub	sp, #72	@ 0x48
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014134:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8014138:	f107 030c 	add.w	r3, r7, #12
 801413c:	2200      	movs	r2, #0
 801413e:	4618      	mov	r0, r3
 8014140:	f7fe fe44 	bl	8012dcc <find_volume>
 8014144:	4603      	mov	r3, r0
 8014146:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 801414a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801414e:	2b00      	cmp	r3, #0
 8014150:	f040 8099 	bne.w	8014286 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8014154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801415c:	695a      	ldr	r2, [r3, #20]
 801415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014160:	699b      	ldr	r3, [r3, #24]
 8014162:	3b02      	subs	r3, #2
 8014164:	429a      	cmp	r2, r3
 8014166:	d804      	bhi.n	8014172 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8014168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801416a:	695a      	ldr	r2, [r3, #20]
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	601a      	str	r2, [r3, #0]
 8014170:	e089      	b.n	8014286 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8014172:	2300      	movs	r3, #0
 8014174:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8014176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014178:	781b      	ldrb	r3, [r3, #0]
 801417a:	2b01      	cmp	r3, #1
 801417c:	d128      	bne.n	80141d0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801417e:	2302      	movs	r3, #2
 8014180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014184:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8014186:	f107 0314 	add.w	r3, r7, #20
 801418a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801418c:	4618      	mov	r0, r3
 801418e:	f7fd f9a8 	bl	80114e2 <get_fat>
 8014192:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8014194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801419a:	d103      	bne.n	80141a4 <f_getfree+0x7c>
 801419c:	2301      	movs	r3, #1
 801419e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80141a2:	e063      	b.n	801426c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80141a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d103      	bne.n	80141b2 <f_getfree+0x8a>
 80141aa:	2302      	movs	r3, #2
 80141ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80141b0:	e05c      	b.n	801426c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80141b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d102      	bne.n	80141be <f_getfree+0x96>
 80141b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80141ba:	3301      	adds	r3, #1
 80141bc:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80141be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141c0:	3301      	adds	r3, #1
 80141c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80141c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141c6:	699b      	ldr	r3, [r3, #24]
 80141c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d3db      	bcc.n	8014186 <f_getfree+0x5e>
 80141ce:	e04d      	b.n	801426c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80141d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141d2:	699b      	ldr	r3, [r3, #24]
 80141d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80141d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141da:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80141dc:	2300      	movs	r3, #0
 80141de:	637b      	str	r3, [r7, #52]	@ 0x34
 80141e0:	2300      	movs	r3, #0
 80141e2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80141e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d113      	bne.n	8014212 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80141ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80141ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ee:	1c5a      	adds	r2, r3, #1
 80141f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80141f2:	4619      	mov	r1, r3
 80141f4:	f7fd f8ba 	bl	801136c <move_window>
 80141f8:	4603      	mov	r3, r0
 80141fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 80141fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014202:	2b00      	cmp	r3, #0
 8014204:	d131      	bne.n	801426a <f_getfree+0x142>
							p = fs->win;
 8014206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014208:	3334      	adds	r3, #52	@ 0x34
 801420a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 801420c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014210:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8014212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	2b02      	cmp	r3, #2
 8014218:	d10f      	bne.n	801423a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801421a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801421c:	f7fc fdf4 	bl	8010e08 <ld_word>
 8014220:	4603      	mov	r3, r0
 8014222:	2b00      	cmp	r3, #0
 8014224:	d102      	bne.n	801422c <f_getfree+0x104>
 8014226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014228:	3301      	adds	r3, #1
 801422a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 801422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422e:	3302      	adds	r3, #2
 8014230:	633b      	str	r3, [r7, #48]	@ 0x30
 8014232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014234:	3b02      	subs	r3, #2
 8014236:	637b      	str	r3, [r7, #52]	@ 0x34
 8014238:	e010      	b.n	801425c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801423a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801423c:	f7fc fdfd 	bl	8010e3a <ld_dword>
 8014240:	4603      	mov	r3, r0
 8014242:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8014246:	2b00      	cmp	r3, #0
 8014248:	d102      	bne.n	8014250 <f_getfree+0x128>
 801424a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801424c:	3301      	adds	r3, #1
 801424e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8014250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014252:	3304      	adds	r3, #4
 8014254:	633b      	str	r3, [r7, #48]	@ 0x30
 8014256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014258:	3b04      	subs	r3, #4
 801425a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 801425c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801425e:	3b01      	subs	r3, #1
 8014260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1bd      	bne.n	80141e4 <f_getfree+0xbc>
 8014268:	e000      	b.n	801426c <f_getfree+0x144>
							if (res != FR_OK) break;
 801426a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014270:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8014272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014274:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014276:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8014278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801427a:	791a      	ldrb	r2, [r3, #4]
 801427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801427e:	f042 0201 	orr.w	r2, r2, #1
 8014282:	b2d2      	uxtb	r2, r2
 8014284:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8014286:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801428a:	4618      	mov	r0, r3
 801428c:	3748      	adds	r7, #72	@ 0x48
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
	...

08014294 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014294:	b480      	push	{r7}
 8014296:	b087      	sub	sp, #28
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	4613      	mov	r3, r2
 80142a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80142a2:	2301      	movs	r3, #1
 80142a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80142a6:	2300      	movs	r3, #0
 80142a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80142aa:	4b1f      	ldr	r3, [pc, #124]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142ac:	7a5b      	ldrb	r3, [r3, #9]
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d131      	bne.n	8014318 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80142b4:	4b1c      	ldr	r3, [pc, #112]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142b6:	7a5b      	ldrb	r3, [r3, #9]
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	461a      	mov	r2, r3
 80142bc:	4b1a      	ldr	r3, [pc, #104]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142be:	2100      	movs	r1, #0
 80142c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80142c2:	4b19      	ldr	r3, [pc, #100]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142c4:	7a5b      	ldrb	r3, [r3, #9]
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	4a17      	ldr	r2, [pc, #92]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	4413      	add	r3, r2
 80142ce:	68fa      	ldr	r2, [r7, #12]
 80142d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80142d2:	4b15      	ldr	r3, [pc, #84]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142d4:	7a5b      	ldrb	r3, [r3, #9]
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	461a      	mov	r2, r3
 80142da:	4b13      	ldr	r3, [pc, #76]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142dc:	4413      	add	r3, r2
 80142de:	79fa      	ldrb	r2, [r7, #7]
 80142e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80142e2:	4b11      	ldr	r3, [pc, #68]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142e4:	7a5b      	ldrb	r3, [r3, #9]
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	1c5a      	adds	r2, r3, #1
 80142ea:	b2d1      	uxtb	r1, r2
 80142ec:	4a0e      	ldr	r2, [pc, #56]	@ (8014328 <FATFS_LinkDriverEx+0x94>)
 80142ee:	7251      	strb	r1, [r2, #9]
 80142f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80142f2:	7dbb      	ldrb	r3, [r7, #22]
 80142f4:	3330      	adds	r3, #48	@ 0x30
 80142f6:	b2da      	uxtb	r2, r3
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	3301      	adds	r3, #1
 8014300:	223a      	movs	r2, #58	@ 0x3a
 8014302:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	3302      	adds	r3, #2
 8014308:	222f      	movs	r2, #47	@ 0x2f
 801430a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	3303      	adds	r3, #3
 8014310:	2200      	movs	r2, #0
 8014312:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014314:	2300      	movs	r3, #0
 8014316:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014318:	7dfb      	ldrb	r3, [r7, #23]
}
 801431a:	4618      	mov	r0, r3
 801431c:	371c      	adds	r7, #28
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop
 8014328:	200142ec 	.word	0x200142ec

0801432c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014336:	2200      	movs	r2, #0
 8014338:	6839      	ldr	r1, [r7, #0]
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f7ff ffaa 	bl	8014294 <FATFS_LinkDriverEx>
 8014340:	4603      	mov	r3, r0
}
 8014342:	4618      	mov	r0, r3
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
	...

0801434c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801434c:	b480      	push	{r7}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
 8014352:	4603      	mov	r3, r0
 8014354:	6039      	str	r1, [r7, #0]
 8014356:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014358:	88fb      	ldrh	r3, [r7, #6]
 801435a:	2b7f      	cmp	r3, #127	@ 0x7f
 801435c:	d802      	bhi.n	8014364 <ff_convert+0x18>
		c = chr;
 801435e:	88fb      	ldrh	r3, [r7, #6]
 8014360:	81fb      	strh	r3, [r7, #14]
 8014362:	e025      	b.n	80143b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d00b      	beq.n	8014382 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801436a:	88fb      	ldrh	r3, [r7, #6]
 801436c:	2bff      	cmp	r3, #255	@ 0xff
 801436e:	d805      	bhi.n	801437c <ff_convert+0x30>
 8014370:	88fb      	ldrh	r3, [r7, #6]
 8014372:	3b80      	subs	r3, #128	@ 0x80
 8014374:	4a12      	ldr	r2, [pc, #72]	@ (80143c0 <ff_convert+0x74>)
 8014376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801437a:	e000      	b.n	801437e <ff_convert+0x32>
 801437c:	2300      	movs	r3, #0
 801437e:	81fb      	strh	r3, [r7, #14]
 8014380:	e016      	b.n	80143b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014382:	2300      	movs	r3, #0
 8014384:	81fb      	strh	r3, [r7, #14]
 8014386:	e009      	b.n	801439c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014388:	89fb      	ldrh	r3, [r7, #14]
 801438a:	4a0d      	ldr	r2, [pc, #52]	@ (80143c0 <ff_convert+0x74>)
 801438c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014390:	88fa      	ldrh	r2, [r7, #6]
 8014392:	429a      	cmp	r2, r3
 8014394:	d006      	beq.n	80143a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014396:	89fb      	ldrh	r3, [r7, #14]
 8014398:	3301      	adds	r3, #1
 801439a:	81fb      	strh	r3, [r7, #14]
 801439c:	89fb      	ldrh	r3, [r7, #14]
 801439e:	2b7f      	cmp	r3, #127	@ 0x7f
 80143a0:	d9f2      	bls.n	8014388 <ff_convert+0x3c>
 80143a2:	e000      	b.n	80143a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80143a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80143a6:	89fb      	ldrh	r3, [r7, #14]
 80143a8:	3380      	adds	r3, #128	@ 0x80
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	b2db      	uxtb	r3, r3
 80143ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80143b0:	89fb      	ldrh	r3, [r7, #14]
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	3714      	adds	r7, #20
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop
 80143c0:	080171a8 	.word	0x080171a8

080143c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b087      	sub	sp, #28
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	4603      	mov	r3, r0
 80143cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80143ce:	88fb      	ldrh	r3, [r7, #6]
 80143d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80143d4:	d201      	bcs.n	80143da <ff_wtoupper+0x16>
 80143d6:	4b3e      	ldr	r3, [pc, #248]	@ (80144d0 <ff_wtoupper+0x10c>)
 80143d8:	e000      	b.n	80143dc <ff_wtoupper+0x18>
 80143da:	4b3e      	ldr	r3, [pc, #248]	@ (80144d4 <ff_wtoupper+0x110>)
 80143dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	1c9a      	adds	r2, r3, #2
 80143e2:	617a      	str	r2, [r7, #20]
 80143e4:	881b      	ldrh	r3, [r3, #0]
 80143e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80143e8:	8a7b      	ldrh	r3, [r7, #18]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d068      	beq.n	80144c0 <ff_wtoupper+0xfc>
 80143ee:	88fa      	ldrh	r2, [r7, #6]
 80143f0:	8a7b      	ldrh	r3, [r7, #18]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d364      	bcc.n	80144c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	1c9a      	adds	r2, r3, #2
 80143fa:	617a      	str	r2, [r7, #20]
 80143fc:	881b      	ldrh	r3, [r3, #0]
 80143fe:	823b      	strh	r3, [r7, #16]
 8014400:	8a3b      	ldrh	r3, [r7, #16]
 8014402:	0a1b      	lsrs	r3, r3, #8
 8014404:	81fb      	strh	r3, [r7, #14]
 8014406:	8a3b      	ldrh	r3, [r7, #16]
 8014408:	b2db      	uxtb	r3, r3
 801440a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801440c:	88fa      	ldrh	r2, [r7, #6]
 801440e:	8a79      	ldrh	r1, [r7, #18]
 8014410:	8a3b      	ldrh	r3, [r7, #16]
 8014412:	440b      	add	r3, r1
 8014414:	429a      	cmp	r2, r3
 8014416:	da49      	bge.n	80144ac <ff_wtoupper+0xe8>
			switch (cmd) {
 8014418:	89fb      	ldrh	r3, [r7, #14]
 801441a:	2b08      	cmp	r3, #8
 801441c:	d84f      	bhi.n	80144be <ff_wtoupper+0xfa>
 801441e:	a201      	add	r2, pc, #4	@ (adr r2, 8014424 <ff_wtoupper+0x60>)
 8014420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014424:	08014449 	.word	0x08014449
 8014428:	0801445b 	.word	0x0801445b
 801442c:	08014471 	.word	0x08014471
 8014430:	08014479 	.word	0x08014479
 8014434:	08014481 	.word	0x08014481
 8014438:	08014489 	.word	0x08014489
 801443c:	08014491 	.word	0x08014491
 8014440:	08014499 	.word	0x08014499
 8014444:	080144a1 	.word	0x080144a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014448:	88fa      	ldrh	r2, [r7, #6]
 801444a:	8a7b      	ldrh	r3, [r7, #18]
 801444c:	1ad3      	subs	r3, r2, r3
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	697a      	ldr	r2, [r7, #20]
 8014452:	4413      	add	r3, r2
 8014454:	881b      	ldrh	r3, [r3, #0]
 8014456:	80fb      	strh	r3, [r7, #6]
 8014458:	e027      	b.n	80144aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801445a:	88fa      	ldrh	r2, [r7, #6]
 801445c:	8a7b      	ldrh	r3, [r7, #18]
 801445e:	1ad3      	subs	r3, r2, r3
 8014460:	b29b      	uxth	r3, r3
 8014462:	f003 0301 	and.w	r3, r3, #1
 8014466:	b29b      	uxth	r3, r3
 8014468:	88fa      	ldrh	r2, [r7, #6]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	80fb      	strh	r3, [r7, #6]
 801446e:	e01c      	b.n	80144aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014470:	88fb      	ldrh	r3, [r7, #6]
 8014472:	3b10      	subs	r3, #16
 8014474:	80fb      	strh	r3, [r7, #6]
 8014476:	e018      	b.n	80144aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014478:	88fb      	ldrh	r3, [r7, #6]
 801447a:	3b20      	subs	r3, #32
 801447c:	80fb      	strh	r3, [r7, #6]
 801447e:	e014      	b.n	80144aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014480:	88fb      	ldrh	r3, [r7, #6]
 8014482:	3b30      	subs	r3, #48	@ 0x30
 8014484:	80fb      	strh	r3, [r7, #6]
 8014486:	e010      	b.n	80144aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014488:	88fb      	ldrh	r3, [r7, #6]
 801448a:	3b1a      	subs	r3, #26
 801448c:	80fb      	strh	r3, [r7, #6]
 801448e:	e00c      	b.n	80144aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014490:	88fb      	ldrh	r3, [r7, #6]
 8014492:	3308      	adds	r3, #8
 8014494:	80fb      	strh	r3, [r7, #6]
 8014496:	e008      	b.n	80144aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014498:	88fb      	ldrh	r3, [r7, #6]
 801449a:	3b50      	subs	r3, #80	@ 0x50
 801449c:	80fb      	strh	r3, [r7, #6]
 801449e:	e004      	b.n	80144aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80144a0:	88fb      	ldrh	r3, [r7, #6]
 80144a2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80144a6:	80fb      	strh	r3, [r7, #6]
 80144a8:	bf00      	nop
			}
			break;
 80144aa:	e008      	b.n	80144be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80144ac:	89fb      	ldrh	r3, [r7, #14]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d195      	bne.n	80143de <ff_wtoupper+0x1a>
 80144b2:	8a3b      	ldrh	r3, [r7, #16]
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	697a      	ldr	r2, [r7, #20]
 80144b8:	4413      	add	r3, r2
 80144ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80144bc:	e78f      	b.n	80143de <ff_wtoupper+0x1a>
			break;
 80144be:	bf00      	nop
	}

	return chr;
 80144c0:	88fb      	ldrh	r3, [r7, #6]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	371c      	adds	r7, #28
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop
 80144d0:	080172a8 	.word	0x080172a8
 80144d4:	0801749c 	.word	0x0801749c

080144d8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 f811 	bl	8014508 <malloc>
 80144e6:	4603      	mov	r3, r0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f000 f80d 	bl	8014518 <free>
}
 80144fe:	bf00      	nop
 8014500:	3708      	adds	r7, #8
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
	...

08014508 <malloc>:
 8014508:	4b02      	ldr	r3, [pc, #8]	@ (8014514 <malloc+0xc>)
 801450a:	4601      	mov	r1, r0
 801450c:	6818      	ldr	r0, [r3, #0]
 801450e:	f000 b82d 	b.w	801456c <_malloc_r>
 8014512:	bf00      	nop
 8014514:	20000234 	.word	0x20000234

08014518 <free>:
 8014518:	4b02      	ldr	r3, [pc, #8]	@ (8014524 <free+0xc>)
 801451a:	4601      	mov	r1, r0
 801451c:	6818      	ldr	r0, [r3, #0]
 801451e:	f000 bb8b 	b.w	8014c38 <_free_r>
 8014522:	bf00      	nop
 8014524:	20000234 	.word	0x20000234

08014528 <sbrk_aligned>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	4e0f      	ldr	r6, [pc, #60]	@ (8014568 <sbrk_aligned+0x40>)
 801452c:	460c      	mov	r4, r1
 801452e:	6831      	ldr	r1, [r6, #0]
 8014530:	4605      	mov	r5, r0
 8014532:	b911      	cbnz	r1, 801453a <sbrk_aligned+0x12>
 8014534:	f000 fb22 	bl	8014b7c <_sbrk_r>
 8014538:	6030      	str	r0, [r6, #0]
 801453a:	4621      	mov	r1, r4
 801453c:	4628      	mov	r0, r5
 801453e:	f000 fb1d 	bl	8014b7c <_sbrk_r>
 8014542:	1c43      	adds	r3, r0, #1
 8014544:	d103      	bne.n	801454e <sbrk_aligned+0x26>
 8014546:	f04f 34ff 	mov.w	r4, #4294967295
 801454a:	4620      	mov	r0, r4
 801454c:	bd70      	pop	{r4, r5, r6, pc}
 801454e:	1cc4      	adds	r4, r0, #3
 8014550:	f024 0403 	bic.w	r4, r4, #3
 8014554:	42a0      	cmp	r0, r4
 8014556:	d0f8      	beq.n	801454a <sbrk_aligned+0x22>
 8014558:	1a21      	subs	r1, r4, r0
 801455a:	4628      	mov	r0, r5
 801455c:	f000 fb0e 	bl	8014b7c <_sbrk_r>
 8014560:	3001      	adds	r0, #1
 8014562:	d1f2      	bne.n	801454a <sbrk_aligned+0x22>
 8014564:	e7ef      	b.n	8014546 <sbrk_aligned+0x1e>
 8014566:	bf00      	nop
 8014568:	200142f8 	.word	0x200142f8

0801456c <_malloc_r>:
 801456c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014570:	1ccd      	adds	r5, r1, #3
 8014572:	f025 0503 	bic.w	r5, r5, #3
 8014576:	3508      	adds	r5, #8
 8014578:	2d0c      	cmp	r5, #12
 801457a:	bf38      	it	cc
 801457c:	250c      	movcc	r5, #12
 801457e:	2d00      	cmp	r5, #0
 8014580:	4606      	mov	r6, r0
 8014582:	db01      	blt.n	8014588 <_malloc_r+0x1c>
 8014584:	42a9      	cmp	r1, r5
 8014586:	d904      	bls.n	8014592 <_malloc_r+0x26>
 8014588:	230c      	movs	r3, #12
 801458a:	6033      	str	r3, [r6, #0]
 801458c:	2000      	movs	r0, #0
 801458e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014668 <_malloc_r+0xfc>
 8014596:	f000 f869 	bl	801466c <__malloc_lock>
 801459a:	f8d8 3000 	ldr.w	r3, [r8]
 801459e:	461c      	mov	r4, r3
 80145a0:	bb44      	cbnz	r4, 80145f4 <_malloc_r+0x88>
 80145a2:	4629      	mov	r1, r5
 80145a4:	4630      	mov	r0, r6
 80145a6:	f7ff ffbf 	bl	8014528 <sbrk_aligned>
 80145aa:	1c43      	adds	r3, r0, #1
 80145ac:	4604      	mov	r4, r0
 80145ae:	d158      	bne.n	8014662 <_malloc_r+0xf6>
 80145b0:	f8d8 4000 	ldr.w	r4, [r8]
 80145b4:	4627      	mov	r7, r4
 80145b6:	2f00      	cmp	r7, #0
 80145b8:	d143      	bne.n	8014642 <_malloc_r+0xd6>
 80145ba:	2c00      	cmp	r4, #0
 80145bc:	d04b      	beq.n	8014656 <_malloc_r+0xea>
 80145be:	6823      	ldr	r3, [r4, #0]
 80145c0:	4639      	mov	r1, r7
 80145c2:	4630      	mov	r0, r6
 80145c4:	eb04 0903 	add.w	r9, r4, r3
 80145c8:	f000 fad8 	bl	8014b7c <_sbrk_r>
 80145cc:	4581      	cmp	r9, r0
 80145ce:	d142      	bne.n	8014656 <_malloc_r+0xea>
 80145d0:	6821      	ldr	r1, [r4, #0]
 80145d2:	1a6d      	subs	r5, r5, r1
 80145d4:	4629      	mov	r1, r5
 80145d6:	4630      	mov	r0, r6
 80145d8:	f7ff ffa6 	bl	8014528 <sbrk_aligned>
 80145dc:	3001      	adds	r0, #1
 80145de:	d03a      	beq.n	8014656 <_malloc_r+0xea>
 80145e0:	6823      	ldr	r3, [r4, #0]
 80145e2:	442b      	add	r3, r5
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	f8d8 3000 	ldr.w	r3, [r8]
 80145ea:	685a      	ldr	r2, [r3, #4]
 80145ec:	bb62      	cbnz	r2, 8014648 <_malloc_r+0xdc>
 80145ee:	f8c8 7000 	str.w	r7, [r8]
 80145f2:	e00f      	b.n	8014614 <_malloc_r+0xa8>
 80145f4:	6822      	ldr	r2, [r4, #0]
 80145f6:	1b52      	subs	r2, r2, r5
 80145f8:	d420      	bmi.n	801463c <_malloc_r+0xd0>
 80145fa:	2a0b      	cmp	r2, #11
 80145fc:	d917      	bls.n	801462e <_malloc_r+0xc2>
 80145fe:	1961      	adds	r1, r4, r5
 8014600:	42a3      	cmp	r3, r4
 8014602:	6025      	str	r5, [r4, #0]
 8014604:	bf18      	it	ne
 8014606:	6059      	strne	r1, [r3, #4]
 8014608:	6863      	ldr	r3, [r4, #4]
 801460a:	bf08      	it	eq
 801460c:	f8c8 1000 	streq.w	r1, [r8]
 8014610:	5162      	str	r2, [r4, r5]
 8014612:	604b      	str	r3, [r1, #4]
 8014614:	4630      	mov	r0, r6
 8014616:	f000 f82f 	bl	8014678 <__malloc_unlock>
 801461a:	f104 000b 	add.w	r0, r4, #11
 801461e:	1d23      	adds	r3, r4, #4
 8014620:	f020 0007 	bic.w	r0, r0, #7
 8014624:	1ac2      	subs	r2, r0, r3
 8014626:	bf1c      	itt	ne
 8014628:	1a1b      	subne	r3, r3, r0
 801462a:	50a3      	strne	r3, [r4, r2]
 801462c:	e7af      	b.n	801458e <_malloc_r+0x22>
 801462e:	6862      	ldr	r2, [r4, #4]
 8014630:	42a3      	cmp	r3, r4
 8014632:	bf0c      	ite	eq
 8014634:	f8c8 2000 	streq.w	r2, [r8]
 8014638:	605a      	strne	r2, [r3, #4]
 801463a:	e7eb      	b.n	8014614 <_malloc_r+0xa8>
 801463c:	4623      	mov	r3, r4
 801463e:	6864      	ldr	r4, [r4, #4]
 8014640:	e7ae      	b.n	80145a0 <_malloc_r+0x34>
 8014642:	463c      	mov	r4, r7
 8014644:	687f      	ldr	r7, [r7, #4]
 8014646:	e7b6      	b.n	80145b6 <_malloc_r+0x4a>
 8014648:	461a      	mov	r2, r3
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	42a3      	cmp	r3, r4
 801464e:	d1fb      	bne.n	8014648 <_malloc_r+0xdc>
 8014650:	2300      	movs	r3, #0
 8014652:	6053      	str	r3, [r2, #4]
 8014654:	e7de      	b.n	8014614 <_malloc_r+0xa8>
 8014656:	230c      	movs	r3, #12
 8014658:	6033      	str	r3, [r6, #0]
 801465a:	4630      	mov	r0, r6
 801465c:	f000 f80c 	bl	8014678 <__malloc_unlock>
 8014660:	e794      	b.n	801458c <_malloc_r+0x20>
 8014662:	6005      	str	r5, [r0, #0]
 8014664:	e7d6      	b.n	8014614 <_malloc_r+0xa8>
 8014666:	bf00      	nop
 8014668:	200142fc 	.word	0x200142fc

0801466c <__malloc_lock>:
 801466c:	4801      	ldr	r0, [pc, #4]	@ (8014674 <__malloc_lock+0x8>)
 801466e:	f000 bad2 	b.w	8014c16 <__retarget_lock_acquire_recursive>
 8014672:	bf00      	nop
 8014674:	20014440 	.word	0x20014440

08014678 <__malloc_unlock>:
 8014678:	4801      	ldr	r0, [pc, #4]	@ (8014680 <__malloc_unlock+0x8>)
 801467a:	f000 bacd 	b.w	8014c18 <__retarget_lock_release_recursive>
 801467e:	bf00      	nop
 8014680:	20014440 	.word	0x20014440

08014684 <std>:
 8014684:	2300      	movs	r3, #0
 8014686:	b510      	push	{r4, lr}
 8014688:	4604      	mov	r4, r0
 801468a:	e9c0 3300 	strd	r3, r3, [r0]
 801468e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014692:	6083      	str	r3, [r0, #8]
 8014694:	8181      	strh	r1, [r0, #12]
 8014696:	6643      	str	r3, [r0, #100]	@ 0x64
 8014698:	81c2      	strh	r2, [r0, #14]
 801469a:	6183      	str	r3, [r0, #24]
 801469c:	4619      	mov	r1, r3
 801469e:	2208      	movs	r2, #8
 80146a0:	305c      	adds	r0, #92	@ 0x5c
 80146a2:	f000 fa2f 	bl	8014b04 <memset>
 80146a6:	4b0d      	ldr	r3, [pc, #52]	@ (80146dc <std+0x58>)
 80146a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80146aa:	4b0d      	ldr	r3, [pc, #52]	@ (80146e0 <std+0x5c>)
 80146ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80146ae:	4b0d      	ldr	r3, [pc, #52]	@ (80146e4 <std+0x60>)
 80146b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80146b2:	4b0d      	ldr	r3, [pc, #52]	@ (80146e8 <std+0x64>)
 80146b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80146b6:	4b0d      	ldr	r3, [pc, #52]	@ (80146ec <std+0x68>)
 80146b8:	6224      	str	r4, [r4, #32]
 80146ba:	429c      	cmp	r4, r3
 80146bc:	d006      	beq.n	80146cc <std+0x48>
 80146be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80146c2:	4294      	cmp	r4, r2
 80146c4:	d002      	beq.n	80146cc <std+0x48>
 80146c6:	33d0      	adds	r3, #208	@ 0xd0
 80146c8:	429c      	cmp	r4, r3
 80146ca:	d105      	bne.n	80146d8 <std+0x54>
 80146cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80146d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146d4:	f000 ba9e 	b.w	8014c14 <__retarget_lock_init_recursive>
 80146d8:	bd10      	pop	{r4, pc}
 80146da:	bf00      	nop
 80146dc:	08014955 	.word	0x08014955
 80146e0:	08014977 	.word	0x08014977
 80146e4:	080149af 	.word	0x080149af
 80146e8:	080149d3 	.word	0x080149d3
 80146ec:	20014300 	.word	0x20014300

080146f0 <stdio_exit_handler>:
 80146f0:	4a02      	ldr	r2, [pc, #8]	@ (80146fc <stdio_exit_handler+0xc>)
 80146f2:	4903      	ldr	r1, [pc, #12]	@ (8014700 <stdio_exit_handler+0x10>)
 80146f4:	4803      	ldr	r0, [pc, #12]	@ (8014704 <stdio_exit_handler+0x14>)
 80146f6:	f000 b869 	b.w	80147cc <_fwalk_sglue>
 80146fa:	bf00      	nop
 80146fc:	20000228 	.word	0x20000228
 8014700:	08015621 	.word	0x08015621
 8014704:	20000238 	.word	0x20000238

08014708 <cleanup_stdio>:
 8014708:	6841      	ldr	r1, [r0, #4]
 801470a:	4b0c      	ldr	r3, [pc, #48]	@ (801473c <cleanup_stdio+0x34>)
 801470c:	4299      	cmp	r1, r3
 801470e:	b510      	push	{r4, lr}
 8014710:	4604      	mov	r4, r0
 8014712:	d001      	beq.n	8014718 <cleanup_stdio+0x10>
 8014714:	f000 ff84 	bl	8015620 <_fflush_r>
 8014718:	68a1      	ldr	r1, [r4, #8]
 801471a:	4b09      	ldr	r3, [pc, #36]	@ (8014740 <cleanup_stdio+0x38>)
 801471c:	4299      	cmp	r1, r3
 801471e:	d002      	beq.n	8014726 <cleanup_stdio+0x1e>
 8014720:	4620      	mov	r0, r4
 8014722:	f000 ff7d 	bl	8015620 <_fflush_r>
 8014726:	68e1      	ldr	r1, [r4, #12]
 8014728:	4b06      	ldr	r3, [pc, #24]	@ (8014744 <cleanup_stdio+0x3c>)
 801472a:	4299      	cmp	r1, r3
 801472c:	d004      	beq.n	8014738 <cleanup_stdio+0x30>
 801472e:	4620      	mov	r0, r4
 8014730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014734:	f000 bf74 	b.w	8015620 <_fflush_r>
 8014738:	bd10      	pop	{r4, pc}
 801473a:	bf00      	nop
 801473c:	20014300 	.word	0x20014300
 8014740:	20014368 	.word	0x20014368
 8014744:	200143d0 	.word	0x200143d0

08014748 <global_stdio_init.part.0>:
 8014748:	b510      	push	{r4, lr}
 801474a:	4b0b      	ldr	r3, [pc, #44]	@ (8014778 <global_stdio_init.part.0+0x30>)
 801474c:	4c0b      	ldr	r4, [pc, #44]	@ (801477c <global_stdio_init.part.0+0x34>)
 801474e:	4a0c      	ldr	r2, [pc, #48]	@ (8014780 <global_stdio_init.part.0+0x38>)
 8014750:	601a      	str	r2, [r3, #0]
 8014752:	4620      	mov	r0, r4
 8014754:	2200      	movs	r2, #0
 8014756:	2104      	movs	r1, #4
 8014758:	f7ff ff94 	bl	8014684 <std>
 801475c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014760:	2201      	movs	r2, #1
 8014762:	2109      	movs	r1, #9
 8014764:	f7ff ff8e 	bl	8014684 <std>
 8014768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801476c:	2202      	movs	r2, #2
 801476e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014772:	2112      	movs	r1, #18
 8014774:	f7ff bf86 	b.w	8014684 <std>
 8014778:	20014438 	.word	0x20014438
 801477c:	20014300 	.word	0x20014300
 8014780:	080146f1 	.word	0x080146f1

08014784 <__sfp_lock_acquire>:
 8014784:	4801      	ldr	r0, [pc, #4]	@ (801478c <__sfp_lock_acquire+0x8>)
 8014786:	f000 ba46 	b.w	8014c16 <__retarget_lock_acquire_recursive>
 801478a:	bf00      	nop
 801478c:	20014441 	.word	0x20014441

08014790 <__sfp_lock_release>:
 8014790:	4801      	ldr	r0, [pc, #4]	@ (8014798 <__sfp_lock_release+0x8>)
 8014792:	f000 ba41 	b.w	8014c18 <__retarget_lock_release_recursive>
 8014796:	bf00      	nop
 8014798:	20014441 	.word	0x20014441

0801479c <__sinit>:
 801479c:	b510      	push	{r4, lr}
 801479e:	4604      	mov	r4, r0
 80147a0:	f7ff fff0 	bl	8014784 <__sfp_lock_acquire>
 80147a4:	6a23      	ldr	r3, [r4, #32]
 80147a6:	b11b      	cbz	r3, 80147b0 <__sinit+0x14>
 80147a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ac:	f7ff bff0 	b.w	8014790 <__sfp_lock_release>
 80147b0:	4b04      	ldr	r3, [pc, #16]	@ (80147c4 <__sinit+0x28>)
 80147b2:	6223      	str	r3, [r4, #32]
 80147b4:	4b04      	ldr	r3, [pc, #16]	@ (80147c8 <__sinit+0x2c>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d1f5      	bne.n	80147a8 <__sinit+0xc>
 80147bc:	f7ff ffc4 	bl	8014748 <global_stdio_init.part.0>
 80147c0:	e7f2      	b.n	80147a8 <__sinit+0xc>
 80147c2:	bf00      	nop
 80147c4:	08014709 	.word	0x08014709
 80147c8:	20014438 	.word	0x20014438

080147cc <_fwalk_sglue>:
 80147cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147d0:	4607      	mov	r7, r0
 80147d2:	4688      	mov	r8, r1
 80147d4:	4614      	mov	r4, r2
 80147d6:	2600      	movs	r6, #0
 80147d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147dc:	f1b9 0901 	subs.w	r9, r9, #1
 80147e0:	d505      	bpl.n	80147ee <_fwalk_sglue+0x22>
 80147e2:	6824      	ldr	r4, [r4, #0]
 80147e4:	2c00      	cmp	r4, #0
 80147e6:	d1f7      	bne.n	80147d8 <_fwalk_sglue+0xc>
 80147e8:	4630      	mov	r0, r6
 80147ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147ee:	89ab      	ldrh	r3, [r5, #12]
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d907      	bls.n	8014804 <_fwalk_sglue+0x38>
 80147f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147f8:	3301      	adds	r3, #1
 80147fa:	d003      	beq.n	8014804 <_fwalk_sglue+0x38>
 80147fc:	4629      	mov	r1, r5
 80147fe:	4638      	mov	r0, r7
 8014800:	47c0      	blx	r8
 8014802:	4306      	orrs	r6, r0
 8014804:	3568      	adds	r5, #104	@ 0x68
 8014806:	e7e9      	b.n	80147dc <_fwalk_sglue+0x10>

08014808 <iprintf>:
 8014808:	b40f      	push	{r0, r1, r2, r3}
 801480a:	b507      	push	{r0, r1, r2, lr}
 801480c:	4906      	ldr	r1, [pc, #24]	@ (8014828 <iprintf+0x20>)
 801480e:	ab04      	add	r3, sp, #16
 8014810:	6808      	ldr	r0, [r1, #0]
 8014812:	f853 2b04 	ldr.w	r2, [r3], #4
 8014816:	6881      	ldr	r1, [r0, #8]
 8014818:	9301      	str	r3, [sp, #4]
 801481a:	f000 fbd9 	bl	8014fd0 <_vfiprintf_r>
 801481e:	b003      	add	sp, #12
 8014820:	f85d eb04 	ldr.w	lr, [sp], #4
 8014824:	b004      	add	sp, #16
 8014826:	4770      	bx	lr
 8014828:	20000234 	.word	0x20000234

0801482c <_puts_r>:
 801482c:	6a03      	ldr	r3, [r0, #32]
 801482e:	b570      	push	{r4, r5, r6, lr}
 8014830:	6884      	ldr	r4, [r0, #8]
 8014832:	4605      	mov	r5, r0
 8014834:	460e      	mov	r6, r1
 8014836:	b90b      	cbnz	r3, 801483c <_puts_r+0x10>
 8014838:	f7ff ffb0 	bl	801479c <__sinit>
 801483c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801483e:	07db      	lsls	r3, r3, #31
 8014840:	d405      	bmi.n	801484e <_puts_r+0x22>
 8014842:	89a3      	ldrh	r3, [r4, #12]
 8014844:	0598      	lsls	r0, r3, #22
 8014846:	d402      	bmi.n	801484e <_puts_r+0x22>
 8014848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801484a:	f000 f9e4 	bl	8014c16 <__retarget_lock_acquire_recursive>
 801484e:	89a3      	ldrh	r3, [r4, #12]
 8014850:	0719      	lsls	r1, r3, #28
 8014852:	d502      	bpl.n	801485a <_puts_r+0x2e>
 8014854:	6923      	ldr	r3, [r4, #16]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d135      	bne.n	80148c6 <_puts_r+0x9a>
 801485a:	4621      	mov	r1, r4
 801485c:	4628      	mov	r0, r5
 801485e:	f000 f8fb 	bl	8014a58 <__swsetup_r>
 8014862:	b380      	cbz	r0, 80148c6 <_puts_r+0x9a>
 8014864:	f04f 35ff 	mov.w	r5, #4294967295
 8014868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801486a:	07da      	lsls	r2, r3, #31
 801486c:	d405      	bmi.n	801487a <_puts_r+0x4e>
 801486e:	89a3      	ldrh	r3, [r4, #12]
 8014870:	059b      	lsls	r3, r3, #22
 8014872:	d402      	bmi.n	801487a <_puts_r+0x4e>
 8014874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014876:	f000 f9cf 	bl	8014c18 <__retarget_lock_release_recursive>
 801487a:	4628      	mov	r0, r5
 801487c:	bd70      	pop	{r4, r5, r6, pc}
 801487e:	2b00      	cmp	r3, #0
 8014880:	da04      	bge.n	801488c <_puts_r+0x60>
 8014882:	69a2      	ldr	r2, [r4, #24]
 8014884:	429a      	cmp	r2, r3
 8014886:	dc17      	bgt.n	80148b8 <_puts_r+0x8c>
 8014888:	290a      	cmp	r1, #10
 801488a:	d015      	beq.n	80148b8 <_puts_r+0x8c>
 801488c:	6823      	ldr	r3, [r4, #0]
 801488e:	1c5a      	adds	r2, r3, #1
 8014890:	6022      	str	r2, [r4, #0]
 8014892:	7019      	strb	r1, [r3, #0]
 8014894:	68a3      	ldr	r3, [r4, #8]
 8014896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801489a:	3b01      	subs	r3, #1
 801489c:	60a3      	str	r3, [r4, #8]
 801489e:	2900      	cmp	r1, #0
 80148a0:	d1ed      	bne.n	801487e <_puts_r+0x52>
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	da11      	bge.n	80148ca <_puts_r+0x9e>
 80148a6:	4622      	mov	r2, r4
 80148a8:	210a      	movs	r1, #10
 80148aa:	4628      	mov	r0, r5
 80148ac:	f000 f895 	bl	80149da <__swbuf_r>
 80148b0:	3001      	adds	r0, #1
 80148b2:	d0d7      	beq.n	8014864 <_puts_r+0x38>
 80148b4:	250a      	movs	r5, #10
 80148b6:	e7d7      	b.n	8014868 <_puts_r+0x3c>
 80148b8:	4622      	mov	r2, r4
 80148ba:	4628      	mov	r0, r5
 80148bc:	f000 f88d 	bl	80149da <__swbuf_r>
 80148c0:	3001      	adds	r0, #1
 80148c2:	d1e7      	bne.n	8014894 <_puts_r+0x68>
 80148c4:	e7ce      	b.n	8014864 <_puts_r+0x38>
 80148c6:	3e01      	subs	r6, #1
 80148c8:	e7e4      	b.n	8014894 <_puts_r+0x68>
 80148ca:	6823      	ldr	r3, [r4, #0]
 80148cc:	1c5a      	adds	r2, r3, #1
 80148ce:	6022      	str	r2, [r4, #0]
 80148d0:	220a      	movs	r2, #10
 80148d2:	701a      	strb	r2, [r3, #0]
 80148d4:	e7ee      	b.n	80148b4 <_puts_r+0x88>
	...

080148d8 <puts>:
 80148d8:	4b02      	ldr	r3, [pc, #8]	@ (80148e4 <puts+0xc>)
 80148da:	4601      	mov	r1, r0
 80148dc:	6818      	ldr	r0, [r3, #0]
 80148de:	f7ff bfa5 	b.w	801482c <_puts_r>
 80148e2:	bf00      	nop
 80148e4:	20000234 	.word	0x20000234

080148e8 <sniprintf>:
 80148e8:	b40c      	push	{r2, r3}
 80148ea:	b530      	push	{r4, r5, lr}
 80148ec:	4b18      	ldr	r3, [pc, #96]	@ (8014950 <sniprintf+0x68>)
 80148ee:	1e0c      	subs	r4, r1, #0
 80148f0:	681d      	ldr	r5, [r3, #0]
 80148f2:	b09d      	sub	sp, #116	@ 0x74
 80148f4:	da08      	bge.n	8014908 <sniprintf+0x20>
 80148f6:	238b      	movs	r3, #139	@ 0x8b
 80148f8:	602b      	str	r3, [r5, #0]
 80148fa:	f04f 30ff 	mov.w	r0, #4294967295
 80148fe:	b01d      	add	sp, #116	@ 0x74
 8014900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014904:	b002      	add	sp, #8
 8014906:	4770      	bx	lr
 8014908:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801490c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014910:	f04f 0300 	mov.w	r3, #0
 8014914:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014916:	bf14      	ite	ne
 8014918:	f104 33ff 	addne.w	r3, r4, #4294967295
 801491c:	4623      	moveq	r3, r4
 801491e:	9304      	str	r3, [sp, #16]
 8014920:	9307      	str	r3, [sp, #28]
 8014922:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014926:	9002      	str	r0, [sp, #8]
 8014928:	9006      	str	r0, [sp, #24]
 801492a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801492e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014930:	ab21      	add	r3, sp, #132	@ 0x84
 8014932:	a902      	add	r1, sp, #8
 8014934:	4628      	mov	r0, r5
 8014936:	9301      	str	r3, [sp, #4]
 8014938:	f000 fa24 	bl	8014d84 <_svfiprintf_r>
 801493c:	1c43      	adds	r3, r0, #1
 801493e:	bfbc      	itt	lt
 8014940:	238b      	movlt	r3, #139	@ 0x8b
 8014942:	602b      	strlt	r3, [r5, #0]
 8014944:	2c00      	cmp	r4, #0
 8014946:	d0da      	beq.n	80148fe <sniprintf+0x16>
 8014948:	9b02      	ldr	r3, [sp, #8]
 801494a:	2200      	movs	r2, #0
 801494c:	701a      	strb	r2, [r3, #0]
 801494e:	e7d6      	b.n	80148fe <sniprintf+0x16>
 8014950:	20000234 	.word	0x20000234

08014954 <__sread>:
 8014954:	b510      	push	{r4, lr}
 8014956:	460c      	mov	r4, r1
 8014958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801495c:	f000 f8fc 	bl	8014b58 <_read_r>
 8014960:	2800      	cmp	r0, #0
 8014962:	bfab      	itete	ge
 8014964:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014966:	89a3      	ldrhlt	r3, [r4, #12]
 8014968:	181b      	addge	r3, r3, r0
 801496a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801496e:	bfac      	ite	ge
 8014970:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014972:	81a3      	strhlt	r3, [r4, #12]
 8014974:	bd10      	pop	{r4, pc}

08014976 <__swrite>:
 8014976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801497a:	461f      	mov	r7, r3
 801497c:	898b      	ldrh	r3, [r1, #12]
 801497e:	05db      	lsls	r3, r3, #23
 8014980:	4605      	mov	r5, r0
 8014982:	460c      	mov	r4, r1
 8014984:	4616      	mov	r6, r2
 8014986:	d505      	bpl.n	8014994 <__swrite+0x1e>
 8014988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801498c:	2302      	movs	r3, #2
 801498e:	2200      	movs	r2, #0
 8014990:	f000 f8d0 	bl	8014b34 <_lseek_r>
 8014994:	89a3      	ldrh	r3, [r4, #12]
 8014996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801499a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801499e:	81a3      	strh	r3, [r4, #12]
 80149a0:	4632      	mov	r2, r6
 80149a2:	463b      	mov	r3, r7
 80149a4:	4628      	mov	r0, r5
 80149a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149aa:	f000 b8f7 	b.w	8014b9c <_write_r>

080149ae <__sseek>:
 80149ae:	b510      	push	{r4, lr}
 80149b0:	460c      	mov	r4, r1
 80149b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149b6:	f000 f8bd 	bl	8014b34 <_lseek_r>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	89a3      	ldrh	r3, [r4, #12]
 80149be:	bf15      	itete	ne
 80149c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80149c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80149c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80149ca:	81a3      	strheq	r3, [r4, #12]
 80149cc:	bf18      	it	ne
 80149ce:	81a3      	strhne	r3, [r4, #12]
 80149d0:	bd10      	pop	{r4, pc}

080149d2 <__sclose>:
 80149d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d6:	f000 b89d 	b.w	8014b14 <_close_r>

080149da <__swbuf_r>:
 80149da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149dc:	460e      	mov	r6, r1
 80149de:	4614      	mov	r4, r2
 80149e0:	4605      	mov	r5, r0
 80149e2:	b118      	cbz	r0, 80149ec <__swbuf_r+0x12>
 80149e4:	6a03      	ldr	r3, [r0, #32]
 80149e6:	b90b      	cbnz	r3, 80149ec <__swbuf_r+0x12>
 80149e8:	f7ff fed8 	bl	801479c <__sinit>
 80149ec:	69a3      	ldr	r3, [r4, #24]
 80149ee:	60a3      	str	r3, [r4, #8]
 80149f0:	89a3      	ldrh	r3, [r4, #12]
 80149f2:	071a      	lsls	r2, r3, #28
 80149f4:	d501      	bpl.n	80149fa <__swbuf_r+0x20>
 80149f6:	6923      	ldr	r3, [r4, #16]
 80149f8:	b943      	cbnz	r3, 8014a0c <__swbuf_r+0x32>
 80149fa:	4621      	mov	r1, r4
 80149fc:	4628      	mov	r0, r5
 80149fe:	f000 f82b 	bl	8014a58 <__swsetup_r>
 8014a02:	b118      	cbz	r0, 8014a0c <__swbuf_r+0x32>
 8014a04:	f04f 37ff 	mov.w	r7, #4294967295
 8014a08:	4638      	mov	r0, r7
 8014a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a0c:	6823      	ldr	r3, [r4, #0]
 8014a0e:	6922      	ldr	r2, [r4, #16]
 8014a10:	1a98      	subs	r0, r3, r2
 8014a12:	6963      	ldr	r3, [r4, #20]
 8014a14:	b2f6      	uxtb	r6, r6
 8014a16:	4283      	cmp	r3, r0
 8014a18:	4637      	mov	r7, r6
 8014a1a:	dc05      	bgt.n	8014a28 <__swbuf_r+0x4e>
 8014a1c:	4621      	mov	r1, r4
 8014a1e:	4628      	mov	r0, r5
 8014a20:	f000 fdfe 	bl	8015620 <_fflush_r>
 8014a24:	2800      	cmp	r0, #0
 8014a26:	d1ed      	bne.n	8014a04 <__swbuf_r+0x2a>
 8014a28:	68a3      	ldr	r3, [r4, #8]
 8014a2a:	3b01      	subs	r3, #1
 8014a2c:	60a3      	str	r3, [r4, #8]
 8014a2e:	6823      	ldr	r3, [r4, #0]
 8014a30:	1c5a      	adds	r2, r3, #1
 8014a32:	6022      	str	r2, [r4, #0]
 8014a34:	701e      	strb	r6, [r3, #0]
 8014a36:	6962      	ldr	r2, [r4, #20]
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d004      	beq.n	8014a48 <__swbuf_r+0x6e>
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	07db      	lsls	r3, r3, #31
 8014a42:	d5e1      	bpl.n	8014a08 <__swbuf_r+0x2e>
 8014a44:	2e0a      	cmp	r6, #10
 8014a46:	d1df      	bne.n	8014a08 <__swbuf_r+0x2e>
 8014a48:	4621      	mov	r1, r4
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	f000 fde8 	bl	8015620 <_fflush_r>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d0d9      	beq.n	8014a08 <__swbuf_r+0x2e>
 8014a54:	e7d6      	b.n	8014a04 <__swbuf_r+0x2a>
	...

08014a58 <__swsetup_r>:
 8014a58:	b538      	push	{r3, r4, r5, lr}
 8014a5a:	4b29      	ldr	r3, [pc, #164]	@ (8014b00 <__swsetup_r+0xa8>)
 8014a5c:	4605      	mov	r5, r0
 8014a5e:	6818      	ldr	r0, [r3, #0]
 8014a60:	460c      	mov	r4, r1
 8014a62:	b118      	cbz	r0, 8014a6c <__swsetup_r+0x14>
 8014a64:	6a03      	ldr	r3, [r0, #32]
 8014a66:	b90b      	cbnz	r3, 8014a6c <__swsetup_r+0x14>
 8014a68:	f7ff fe98 	bl	801479c <__sinit>
 8014a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a70:	0719      	lsls	r1, r3, #28
 8014a72:	d422      	bmi.n	8014aba <__swsetup_r+0x62>
 8014a74:	06da      	lsls	r2, r3, #27
 8014a76:	d407      	bmi.n	8014a88 <__swsetup_r+0x30>
 8014a78:	2209      	movs	r2, #9
 8014a7a:	602a      	str	r2, [r5, #0]
 8014a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a80:	81a3      	strh	r3, [r4, #12]
 8014a82:	f04f 30ff 	mov.w	r0, #4294967295
 8014a86:	e033      	b.n	8014af0 <__swsetup_r+0x98>
 8014a88:	0758      	lsls	r0, r3, #29
 8014a8a:	d512      	bpl.n	8014ab2 <__swsetup_r+0x5a>
 8014a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a8e:	b141      	cbz	r1, 8014aa2 <__swsetup_r+0x4a>
 8014a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a94:	4299      	cmp	r1, r3
 8014a96:	d002      	beq.n	8014a9e <__swsetup_r+0x46>
 8014a98:	4628      	mov	r0, r5
 8014a9a:	f000 f8cd 	bl	8014c38 <_free_r>
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	2300      	movs	r3, #0
 8014aac:	6063      	str	r3, [r4, #4]
 8014aae:	6923      	ldr	r3, [r4, #16]
 8014ab0:	6023      	str	r3, [r4, #0]
 8014ab2:	89a3      	ldrh	r3, [r4, #12]
 8014ab4:	f043 0308 	orr.w	r3, r3, #8
 8014ab8:	81a3      	strh	r3, [r4, #12]
 8014aba:	6923      	ldr	r3, [r4, #16]
 8014abc:	b94b      	cbnz	r3, 8014ad2 <__swsetup_r+0x7a>
 8014abe:	89a3      	ldrh	r3, [r4, #12]
 8014ac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ac8:	d003      	beq.n	8014ad2 <__swsetup_r+0x7a>
 8014aca:	4621      	mov	r1, r4
 8014acc:	4628      	mov	r0, r5
 8014ace:	f000 fdf5 	bl	80156bc <__smakebuf_r>
 8014ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ad6:	f013 0201 	ands.w	r2, r3, #1
 8014ada:	d00a      	beq.n	8014af2 <__swsetup_r+0x9a>
 8014adc:	2200      	movs	r2, #0
 8014ade:	60a2      	str	r2, [r4, #8]
 8014ae0:	6962      	ldr	r2, [r4, #20]
 8014ae2:	4252      	negs	r2, r2
 8014ae4:	61a2      	str	r2, [r4, #24]
 8014ae6:	6922      	ldr	r2, [r4, #16]
 8014ae8:	b942      	cbnz	r2, 8014afc <__swsetup_r+0xa4>
 8014aea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014aee:	d1c5      	bne.n	8014a7c <__swsetup_r+0x24>
 8014af0:	bd38      	pop	{r3, r4, r5, pc}
 8014af2:	0799      	lsls	r1, r3, #30
 8014af4:	bf58      	it	pl
 8014af6:	6962      	ldrpl	r2, [r4, #20]
 8014af8:	60a2      	str	r2, [r4, #8]
 8014afa:	e7f4      	b.n	8014ae6 <__swsetup_r+0x8e>
 8014afc:	2000      	movs	r0, #0
 8014afe:	e7f7      	b.n	8014af0 <__swsetup_r+0x98>
 8014b00:	20000234 	.word	0x20000234

08014b04 <memset>:
 8014b04:	4402      	add	r2, r0
 8014b06:	4603      	mov	r3, r0
 8014b08:	4293      	cmp	r3, r2
 8014b0a:	d100      	bne.n	8014b0e <memset+0xa>
 8014b0c:	4770      	bx	lr
 8014b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8014b12:	e7f9      	b.n	8014b08 <memset+0x4>

08014b14 <_close_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	4d06      	ldr	r5, [pc, #24]	@ (8014b30 <_close_r+0x1c>)
 8014b18:	2300      	movs	r3, #0
 8014b1a:	4604      	mov	r4, r0
 8014b1c:	4608      	mov	r0, r1
 8014b1e:	602b      	str	r3, [r5, #0]
 8014b20:	f7ee f8bf 	bl	8002ca2 <_close>
 8014b24:	1c43      	adds	r3, r0, #1
 8014b26:	d102      	bne.n	8014b2e <_close_r+0x1a>
 8014b28:	682b      	ldr	r3, [r5, #0]
 8014b2a:	b103      	cbz	r3, 8014b2e <_close_r+0x1a>
 8014b2c:	6023      	str	r3, [r4, #0]
 8014b2e:	bd38      	pop	{r3, r4, r5, pc}
 8014b30:	2001443c 	.word	0x2001443c

08014b34 <_lseek_r>:
 8014b34:	b538      	push	{r3, r4, r5, lr}
 8014b36:	4d07      	ldr	r5, [pc, #28]	@ (8014b54 <_lseek_r+0x20>)
 8014b38:	4604      	mov	r4, r0
 8014b3a:	4608      	mov	r0, r1
 8014b3c:	4611      	mov	r1, r2
 8014b3e:	2200      	movs	r2, #0
 8014b40:	602a      	str	r2, [r5, #0]
 8014b42:	461a      	mov	r2, r3
 8014b44:	f7ee f8d4 	bl	8002cf0 <_lseek>
 8014b48:	1c43      	adds	r3, r0, #1
 8014b4a:	d102      	bne.n	8014b52 <_lseek_r+0x1e>
 8014b4c:	682b      	ldr	r3, [r5, #0]
 8014b4e:	b103      	cbz	r3, 8014b52 <_lseek_r+0x1e>
 8014b50:	6023      	str	r3, [r4, #0]
 8014b52:	bd38      	pop	{r3, r4, r5, pc}
 8014b54:	2001443c 	.word	0x2001443c

08014b58 <_read_r>:
 8014b58:	b538      	push	{r3, r4, r5, lr}
 8014b5a:	4d07      	ldr	r5, [pc, #28]	@ (8014b78 <_read_r+0x20>)
 8014b5c:	4604      	mov	r4, r0
 8014b5e:	4608      	mov	r0, r1
 8014b60:	4611      	mov	r1, r2
 8014b62:	2200      	movs	r2, #0
 8014b64:	602a      	str	r2, [r5, #0]
 8014b66:	461a      	mov	r2, r3
 8014b68:	f7ee f87e 	bl	8002c68 <_read>
 8014b6c:	1c43      	adds	r3, r0, #1
 8014b6e:	d102      	bne.n	8014b76 <_read_r+0x1e>
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	b103      	cbz	r3, 8014b76 <_read_r+0x1e>
 8014b74:	6023      	str	r3, [r4, #0]
 8014b76:	bd38      	pop	{r3, r4, r5, pc}
 8014b78:	2001443c 	.word	0x2001443c

08014b7c <_sbrk_r>:
 8014b7c:	b538      	push	{r3, r4, r5, lr}
 8014b7e:	4d06      	ldr	r5, [pc, #24]	@ (8014b98 <_sbrk_r+0x1c>)
 8014b80:	2300      	movs	r3, #0
 8014b82:	4604      	mov	r4, r0
 8014b84:	4608      	mov	r0, r1
 8014b86:	602b      	str	r3, [r5, #0]
 8014b88:	f7ee f8c0 	bl	8002d0c <_sbrk>
 8014b8c:	1c43      	adds	r3, r0, #1
 8014b8e:	d102      	bne.n	8014b96 <_sbrk_r+0x1a>
 8014b90:	682b      	ldr	r3, [r5, #0]
 8014b92:	b103      	cbz	r3, 8014b96 <_sbrk_r+0x1a>
 8014b94:	6023      	str	r3, [r4, #0]
 8014b96:	bd38      	pop	{r3, r4, r5, pc}
 8014b98:	2001443c 	.word	0x2001443c

08014b9c <_write_r>:
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4d07      	ldr	r5, [pc, #28]	@ (8014bbc <_write_r+0x20>)
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	4608      	mov	r0, r1
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	602a      	str	r2, [r5, #0]
 8014baa:	461a      	mov	r2, r3
 8014bac:	f7ec fa21 	bl	8000ff2 <_write>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d102      	bne.n	8014bba <_write_r+0x1e>
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	b103      	cbz	r3, 8014bba <_write_r+0x1e>
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	bd38      	pop	{r3, r4, r5, pc}
 8014bbc:	2001443c 	.word	0x2001443c

08014bc0 <__errno>:
 8014bc0:	4b01      	ldr	r3, [pc, #4]	@ (8014bc8 <__errno+0x8>)
 8014bc2:	6818      	ldr	r0, [r3, #0]
 8014bc4:	4770      	bx	lr
 8014bc6:	bf00      	nop
 8014bc8:	20000234 	.word	0x20000234

08014bcc <__libc_init_array>:
 8014bcc:	b570      	push	{r4, r5, r6, lr}
 8014bce:	4d0d      	ldr	r5, [pc, #52]	@ (8014c04 <__libc_init_array+0x38>)
 8014bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8014c08 <__libc_init_array+0x3c>)
 8014bd2:	1b64      	subs	r4, r4, r5
 8014bd4:	10a4      	asrs	r4, r4, #2
 8014bd6:	2600      	movs	r6, #0
 8014bd8:	42a6      	cmp	r6, r4
 8014bda:	d109      	bne.n	8014bf0 <__libc_init_array+0x24>
 8014bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8014c0c <__libc_init_array+0x40>)
 8014bde:	4c0c      	ldr	r4, [pc, #48]	@ (8014c10 <__libc_init_array+0x44>)
 8014be0:	f001 fdb4 	bl	801674c <_init>
 8014be4:	1b64      	subs	r4, r4, r5
 8014be6:	10a4      	asrs	r4, r4, #2
 8014be8:	2600      	movs	r6, #0
 8014bea:	42a6      	cmp	r6, r4
 8014bec:	d105      	bne.n	8014bfa <__libc_init_array+0x2e>
 8014bee:	bd70      	pop	{r4, r5, r6, pc}
 8014bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bf4:	4798      	blx	r3
 8014bf6:	3601      	adds	r6, #1
 8014bf8:	e7ee      	b.n	8014bd8 <__libc_init_array+0xc>
 8014bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bfe:	4798      	blx	r3
 8014c00:	3601      	adds	r6, #1
 8014c02:	e7f2      	b.n	8014bea <__libc_init_array+0x1e>
 8014c04:	080175d8 	.word	0x080175d8
 8014c08:	080175d8 	.word	0x080175d8
 8014c0c:	080175d8 	.word	0x080175d8
 8014c10:	080175dc 	.word	0x080175dc

08014c14 <__retarget_lock_init_recursive>:
 8014c14:	4770      	bx	lr

08014c16 <__retarget_lock_acquire_recursive>:
 8014c16:	4770      	bx	lr

08014c18 <__retarget_lock_release_recursive>:
 8014c18:	4770      	bx	lr

08014c1a <memcpy>:
 8014c1a:	440a      	add	r2, r1
 8014c1c:	4291      	cmp	r1, r2
 8014c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c22:	d100      	bne.n	8014c26 <memcpy+0xc>
 8014c24:	4770      	bx	lr
 8014c26:	b510      	push	{r4, lr}
 8014c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c30:	4291      	cmp	r1, r2
 8014c32:	d1f9      	bne.n	8014c28 <memcpy+0xe>
 8014c34:	bd10      	pop	{r4, pc}
	...

08014c38 <_free_r>:
 8014c38:	b538      	push	{r3, r4, r5, lr}
 8014c3a:	4605      	mov	r5, r0
 8014c3c:	2900      	cmp	r1, #0
 8014c3e:	d041      	beq.n	8014cc4 <_free_r+0x8c>
 8014c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c44:	1f0c      	subs	r4, r1, #4
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	bfb8      	it	lt
 8014c4a:	18e4      	addlt	r4, r4, r3
 8014c4c:	f7ff fd0e 	bl	801466c <__malloc_lock>
 8014c50:	4a1d      	ldr	r2, [pc, #116]	@ (8014cc8 <_free_r+0x90>)
 8014c52:	6813      	ldr	r3, [r2, #0]
 8014c54:	b933      	cbnz	r3, 8014c64 <_free_r+0x2c>
 8014c56:	6063      	str	r3, [r4, #4]
 8014c58:	6014      	str	r4, [r2, #0]
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c60:	f7ff bd0a 	b.w	8014678 <__malloc_unlock>
 8014c64:	42a3      	cmp	r3, r4
 8014c66:	d908      	bls.n	8014c7a <_free_r+0x42>
 8014c68:	6820      	ldr	r0, [r4, #0]
 8014c6a:	1821      	adds	r1, r4, r0
 8014c6c:	428b      	cmp	r3, r1
 8014c6e:	bf01      	itttt	eq
 8014c70:	6819      	ldreq	r1, [r3, #0]
 8014c72:	685b      	ldreq	r3, [r3, #4]
 8014c74:	1809      	addeq	r1, r1, r0
 8014c76:	6021      	streq	r1, [r4, #0]
 8014c78:	e7ed      	b.n	8014c56 <_free_r+0x1e>
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	b10b      	cbz	r3, 8014c84 <_free_r+0x4c>
 8014c80:	42a3      	cmp	r3, r4
 8014c82:	d9fa      	bls.n	8014c7a <_free_r+0x42>
 8014c84:	6811      	ldr	r1, [r2, #0]
 8014c86:	1850      	adds	r0, r2, r1
 8014c88:	42a0      	cmp	r0, r4
 8014c8a:	d10b      	bne.n	8014ca4 <_free_r+0x6c>
 8014c8c:	6820      	ldr	r0, [r4, #0]
 8014c8e:	4401      	add	r1, r0
 8014c90:	1850      	adds	r0, r2, r1
 8014c92:	4283      	cmp	r3, r0
 8014c94:	6011      	str	r1, [r2, #0]
 8014c96:	d1e0      	bne.n	8014c5a <_free_r+0x22>
 8014c98:	6818      	ldr	r0, [r3, #0]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	6053      	str	r3, [r2, #4]
 8014c9e:	4408      	add	r0, r1
 8014ca0:	6010      	str	r0, [r2, #0]
 8014ca2:	e7da      	b.n	8014c5a <_free_r+0x22>
 8014ca4:	d902      	bls.n	8014cac <_free_r+0x74>
 8014ca6:	230c      	movs	r3, #12
 8014ca8:	602b      	str	r3, [r5, #0]
 8014caa:	e7d6      	b.n	8014c5a <_free_r+0x22>
 8014cac:	6820      	ldr	r0, [r4, #0]
 8014cae:	1821      	adds	r1, r4, r0
 8014cb0:	428b      	cmp	r3, r1
 8014cb2:	bf04      	itt	eq
 8014cb4:	6819      	ldreq	r1, [r3, #0]
 8014cb6:	685b      	ldreq	r3, [r3, #4]
 8014cb8:	6063      	str	r3, [r4, #4]
 8014cba:	bf04      	itt	eq
 8014cbc:	1809      	addeq	r1, r1, r0
 8014cbe:	6021      	streq	r1, [r4, #0]
 8014cc0:	6054      	str	r4, [r2, #4]
 8014cc2:	e7ca      	b.n	8014c5a <_free_r+0x22>
 8014cc4:	bd38      	pop	{r3, r4, r5, pc}
 8014cc6:	bf00      	nop
 8014cc8:	200142fc 	.word	0x200142fc

08014ccc <__ssputs_r>:
 8014ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd0:	688e      	ldr	r6, [r1, #8]
 8014cd2:	461f      	mov	r7, r3
 8014cd4:	42be      	cmp	r6, r7
 8014cd6:	680b      	ldr	r3, [r1, #0]
 8014cd8:	4682      	mov	sl, r0
 8014cda:	460c      	mov	r4, r1
 8014cdc:	4690      	mov	r8, r2
 8014cde:	d82d      	bhi.n	8014d3c <__ssputs_r+0x70>
 8014ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014ce8:	d026      	beq.n	8014d38 <__ssputs_r+0x6c>
 8014cea:	6965      	ldr	r5, [r4, #20]
 8014cec:	6909      	ldr	r1, [r1, #16]
 8014cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014cf2:	eba3 0901 	sub.w	r9, r3, r1
 8014cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014cfa:	1c7b      	adds	r3, r7, #1
 8014cfc:	444b      	add	r3, r9
 8014cfe:	106d      	asrs	r5, r5, #1
 8014d00:	429d      	cmp	r5, r3
 8014d02:	bf38      	it	cc
 8014d04:	461d      	movcc	r5, r3
 8014d06:	0553      	lsls	r3, r2, #21
 8014d08:	d527      	bpl.n	8014d5a <__ssputs_r+0x8e>
 8014d0a:	4629      	mov	r1, r5
 8014d0c:	f7ff fc2e 	bl	801456c <_malloc_r>
 8014d10:	4606      	mov	r6, r0
 8014d12:	b360      	cbz	r0, 8014d6e <__ssputs_r+0xa2>
 8014d14:	6921      	ldr	r1, [r4, #16]
 8014d16:	464a      	mov	r2, r9
 8014d18:	f7ff ff7f 	bl	8014c1a <memcpy>
 8014d1c:	89a3      	ldrh	r3, [r4, #12]
 8014d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d26:	81a3      	strh	r3, [r4, #12]
 8014d28:	6126      	str	r6, [r4, #16]
 8014d2a:	6165      	str	r5, [r4, #20]
 8014d2c:	444e      	add	r6, r9
 8014d2e:	eba5 0509 	sub.w	r5, r5, r9
 8014d32:	6026      	str	r6, [r4, #0]
 8014d34:	60a5      	str	r5, [r4, #8]
 8014d36:	463e      	mov	r6, r7
 8014d38:	42be      	cmp	r6, r7
 8014d3a:	d900      	bls.n	8014d3e <__ssputs_r+0x72>
 8014d3c:	463e      	mov	r6, r7
 8014d3e:	6820      	ldr	r0, [r4, #0]
 8014d40:	4632      	mov	r2, r6
 8014d42:	4641      	mov	r1, r8
 8014d44:	f000 fcf6 	bl	8015734 <memmove>
 8014d48:	68a3      	ldr	r3, [r4, #8]
 8014d4a:	1b9b      	subs	r3, r3, r6
 8014d4c:	60a3      	str	r3, [r4, #8]
 8014d4e:	6823      	ldr	r3, [r4, #0]
 8014d50:	4433      	add	r3, r6
 8014d52:	6023      	str	r3, [r4, #0]
 8014d54:	2000      	movs	r0, #0
 8014d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d5a:	462a      	mov	r2, r5
 8014d5c:	f000 fd26 	bl	80157ac <_realloc_r>
 8014d60:	4606      	mov	r6, r0
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d1e0      	bne.n	8014d28 <__ssputs_r+0x5c>
 8014d66:	6921      	ldr	r1, [r4, #16]
 8014d68:	4650      	mov	r0, sl
 8014d6a:	f7ff ff65 	bl	8014c38 <_free_r>
 8014d6e:	230c      	movs	r3, #12
 8014d70:	f8ca 3000 	str.w	r3, [sl]
 8014d74:	89a3      	ldrh	r3, [r4, #12]
 8014d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d7a:	81a3      	strh	r3, [r4, #12]
 8014d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d80:	e7e9      	b.n	8014d56 <__ssputs_r+0x8a>
	...

08014d84 <_svfiprintf_r>:
 8014d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d88:	4698      	mov	r8, r3
 8014d8a:	898b      	ldrh	r3, [r1, #12]
 8014d8c:	061b      	lsls	r3, r3, #24
 8014d8e:	b09d      	sub	sp, #116	@ 0x74
 8014d90:	4607      	mov	r7, r0
 8014d92:	460d      	mov	r5, r1
 8014d94:	4614      	mov	r4, r2
 8014d96:	d510      	bpl.n	8014dba <_svfiprintf_r+0x36>
 8014d98:	690b      	ldr	r3, [r1, #16]
 8014d9a:	b973      	cbnz	r3, 8014dba <_svfiprintf_r+0x36>
 8014d9c:	2140      	movs	r1, #64	@ 0x40
 8014d9e:	f7ff fbe5 	bl	801456c <_malloc_r>
 8014da2:	6028      	str	r0, [r5, #0]
 8014da4:	6128      	str	r0, [r5, #16]
 8014da6:	b930      	cbnz	r0, 8014db6 <_svfiprintf_r+0x32>
 8014da8:	230c      	movs	r3, #12
 8014daa:	603b      	str	r3, [r7, #0]
 8014dac:	f04f 30ff 	mov.w	r0, #4294967295
 8014db0:	b01d      	add	sp, #116	@ 0x74
 8014db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db6:	2340      	movs	r3, #64	@ 0x40
 8014db8:	616b      	str	r3, [r5, #20]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dbe:	2320      	movs	r3, #32
 8014dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dc8:	2330      	movs	r3, #48	@ 0x30
 8014dca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014f68 <_svfiprintf_r+0x1e4>
 8014dce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014dd2:	f04f 0901 	mov.w	r9, #1
 8014dd6:	4623      	mov	r3, r4
 8014dd8:	469a      	mov	sl, r3
 8014dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dde:	b10a      	cbz	r2, 8014de4 <_svfiprintf_r+0x60>
 8014de0:	2a25      	cmp	r2, #37	@ 0x25
 8014de2:	d1f9      	bne.n	8014dd8 <_svfiprintf_r+0x54>
 8014de4:	ebba 0b04 	subs.w	fp, sl, r4
 8014de8:	d00b      	beq.n	8014e02 <_svfiprintf_r+0x7e>
 8014dea:	465b      	mov	r3, fp
 8014dec:	4622      	mov	r2, r4
 8014dee:	4629      	mov	r1, r5
 8014df0:	4638      	mov	r0, r7
 8014df2:	f7ff ff6b 	bl	8014ccc <__ssputs_r>
 8014df6:	3001      	adds	r0, #1
 8014df8:	f000 80a7 	beq.w	8014f4a <_svfiprintf_r+0x1c6>
 8014dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014dfe:	445a      	add	r2, fp
 8014e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e02:	f89a 3000 	ldrb.w	r3, [sl]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f000 809f 	beq.w	8014f4a <_svfiprintf_r+0x1c6>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e16:	f10a 0a01 	add.w	sl, sl, #1
 8014e1a:	9304      	str	r3, [sp, #16]
 8014e1c:	9307      	str	r3, [sp, #28]
 8014e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e24:	4654      	mov	r4, sl
 8014e26:	2205      	movs	r2, #5
 8014e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e2c:	484e      	ldr	r0, [pc, #312]	@ (8014f68 <_svfiprintf_r+0x1e4>)
 8014e2e:	f7eb f9ef 	bl	8000210 <memchr>
 8014e32:	9a04      	ldr	r2, [sp, #16]
 8014e34:	b9d8      	cbnz	r0, 8014e6e <_svfiprintf_r+0xea>
 8014e36:	06d0      	lsls	r0, r2, #27
 8014e38:	bf44      	itt	mi
 8014e3a:	2320      	movmi	r3, #32
 8014e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e40:	0711      	lsls	r1, r2, #28
 8014e42:	bf44      	itt	mi
 8014e44:	232b      	movmi	r3, #43	@ 0x2b
 8014e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8014e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e50:	d015      	beq.n	8014e7e <_svfiprintf_r+0xfa>
 8014e52:	9a07      	ldr	r2, [sp, #28]
 8014e54:	4654      	mov	r4, sl
 8014e56:	2000      	movs	r0, #0
 8014e58:	f04f 0c0a 	mov.w	ip, #10
 8014e5c:	4621      	mov	r1, r4
 8014e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e62:	3b30      	subs	r3, #48	@ 0x30
 8014e64:	2b09      	cmp	r3, #9
 8014e66:	d94b      	bls.n	8014f00 <_svfiprintf_r+0x17c>
 8014e68:	b1b0      	cbz	r0, 8014e98 <_svfiprintf_r+0x114>
 8014e6a:	9207      	str	r2, [sp, #28]
 8014e6c:	e014      	b.n	8014e98 <_svfiprintf_r+0x114>
 8014e6e:	eba0 0308 	sub.w	r3, r0, r8
 8014e72:	fa09 f303 	lsl.w	r3, r9, r3
 8014e76:	4313      	orrs	r3, r2
 8014e78:	9304      	str	r3, [sp, #16]
 8014e7a:	46a2      	mov	sl, r4
 8014e7c:	e7d2      	b.n	8014e24 <_svfiprintf_r+0xa0>
 8014e7e:	9b03      	ldr	r3, [sp, #12]
 8014e80:	1d19      	adds	r1, r3, #4
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	9103      	str	r1, [sp, #12]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	bfbb      	ittet	lt
 8014e8a:	425b      	neglt	r3, r3
 8014e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8014e90:	9307      	strge	r3, [sp, #28]
 8014e92:	9307      	strlt	r3, [sp, #28]
 8014e94:	bfb8      	it	lt
 8014e96:	9204      	strlt	r2, [sp, #16]
 8014e98:	7823      	ldrb	r3, [r4, #0]
 8014e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e9c:	d10a      	bne.n	8014eb4 <_svfiprintf_r+0x130>
 8014e9e:	7863      	ldrb	r3, [r4, #1]
 8014ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ea2:	d132      	bne.n	8014f0a <_svfiprintf_r+0x186>
 8014ea4:	9b03      	ldr	r3, [sp, #12]
 8014ea6:	1d1a      	adds	r2, r3, #4
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	9203      	str	r2, [sp, #12]
 8014eac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014eb0:	3402      	adds	r4, #2
 8014eb2:	9305      	str	r3, [sp, #20]
 8014eb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014f78 <_svfiprintf_r+0x1f4>
 8014eb8:	7821      	ldrb	r1, [r4, #0]
 8014eba:	2203      	movs	r2, #3
 8014ebc:	4650      	mov	r0, sl
 8014ebe:	f7eb f9a7 	bl	8000210 <memchr>
 8014ec2:	b138      	cbz	r0, 8014ed4 <_svfiprintf_r+0x150>
 8014ec4:	9b04      	ldr	r3, [sp, #16]
 8014ec6:	eba0 000a 	sub.w	r0, r0, sl
 8014eca:	2240      	movs	r2, #64	@ 0x40
 8014ecc:	4082      	lsls	r2, r0
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	3401      	adds	r4, #1
 8014ed2:	9304      	str	r3, [sp, #16]
 8014ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed8:	4824      	ldr	r0, [pc, #144]	@ (8014f6c <_svfiprintf_r+0x1e8>)
 8014eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ede:	2206      	movs	r2, #6
 8014ee0:	f7eb f996 	bl	8000210 <memchr>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d036      	beq.n	8014f56 <_svfiprintf_r+0x1d2>
 8014ee8:	4b21      	ldr	r3, [pc, #132]	@ (8014f70 <_svfiprintf_r+0x1ec>)
 8014eea:	bb1b      	cbnz	r3, 8014f34 <_svfiprintf_r+0x1b0>
 8014eec:	9b03      	ldr	r3, [sp, #12]
 8014eee:	3307      	adds	r3, #7
 8014ef0:	f023 0307 	bic.w	r3, r3, #7
 8014ef4:	3308      	adds	r3, #8
 8014ef6:	9303      	str	r3, [sp, #12]
 8014ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014efa:	4433      	add	r3, r6
 8014efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014efe:	e76a      	b.n	8014dd6 <_svfiprintf_r+0x52>
 8014f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f04:	460c      	mov	r4, r1
 8014f06:	2001      	movs	r0, #1
 8014f08:	e7a8      	b.n	8014e5c <_svfiprintf_r+0xd8>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	3401      	adds	r4, #1
 8014f0e:	9305      	str	r3, [sp, #20]
 8014f10:	4619      	mov	r1, r3
 8014f12:	f04f 0c0a 	mov.w	ip, #10
 8014f16:	4620      	mov	r0, r4
 8014f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f1c:	3a30      	subs	r2, #48	@ 0x30
 8014f1e:	2a09      	cmp	r2, #9
 8014f20:	d903      	bls.n	8014f2a <_svfiprintf_r+0x1a6>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d0c6      	beq.n	8014eb4 <_svfiprintf_r+0x130>
 8014f26:	9105      	str	r1, [sp, #20]
 8014f28:	e7c4      	b.n	8014eb4 <_svfiprintf_r+0x130>
 8014f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f2e:	4604      	mov	r4, r0
 8014f30:	2301      	movs	r3, #1
 8014f32:	e7f0      	b.n	8014f16 <_svfiprintf_r+0x192>
 8014f34:	ab03      	add	r3, sp, #12
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	462a      	mov	r2, r5
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f74 <_svfiprintf_r+0x1f0>)
 8014f3c:	a904      	add	r1, sp, #16
 8014f3e:	4638      	mov	r0, r7
 8014f40:	f3af 8000 	nop.w
 8014f44:	1c42      	adds	r2, r0, #1
 8014f46:	4606      	mov	r6, r0
 8014f48:	d1d6      	bne.n	8014ef8 <_svfiprintf_r+0x174>
 8014f4a:	89ab      	ldrh	r3, [r5, #12]
 8014f4c:	065b      	lsls	r3, r3, #25
 8014f4e:	f53f af2d 	bmi.w	8014dac <_svfiprintf_r+0x28>
 8014f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f54:	e72c      	b.n	8014db0 <_svfiprintf_r+0x2c>
 8014f56:	ab03      	add	r3, sp, #12
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	462a      	mov	r2, r5
 8014f5c:	4b05      	ldr	r3, [pc, #20]	@ (8014f74 <_svfiprintf_r+0x1f0>)
 8014f5e:	a904      	add	r1, sp, #16
 8014f60:	4638      	mov	r0, r7
 8014f62:	f000 f9bb 	bl	80152dc <_printf_i>
 8014f66:	e7ed      	b.n	8014f44 <_svfiprintf_r+0x1c0>
 8014f68:	08017558 	.word	0x08017558
 8014f6c:	08017562 	.word	0x08017562
 8014f70:	00000000 	.word	0x00000000
 8014f74:	08014ccd 	.word	0x08014ccd
 8014f78:	0801755e 	.word	0x0801755e

08014f7c <__sfputc_r>:
 8014f7c:	6893      	ldr	r3, [r2, #8]
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	b410      	push	{r4}
 8014f84:	6093      	str	r3, [r2, #8]
 8014f86:	da08      	bge.n	8014f9a <__sfputc_r+0x1e>
 8014f88:	6994      	ldr	r4, [r2, #24]
 8014f8a:	42a3      	cmp	r3, r4
 8014f8c:	db01      	blt.n	8014f92 <__sfputc_r+0x16>
 8014f8e:	290a      	cmp	r1, #10
 8014f90:	d103      	bne.n	8014f9a <__sfputc_r+0x1e>
 8014f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f96:	f7ff bd20 	b.w	80149da <__swbuf_r>
 8014f9a:	6813      	ldr	r3, [r2, #0]
 8014f9c:	1c58      	adds	r0, r3, #1
 8014f9e:	6010      	str	r0, [r2, #0]
 8014fa0:	7019      	strb	r1, [r3, #0]
 8014fa2:	4608      	mov	r0, r1
 8014fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fa8:	4770      	bx	lr

08014faa <__sfputs_r>:
 8014faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fac:	4606      	mov	r6, r0
 8014fae:	460f      	mov	r7, r1
 8014fb0:	4614      	mov	r4, r2
 8014fb2:	18d5      	adds	r5, r2, r3
 8014fb4:	42ac      	cmp	r4, r5
 8014fb6:	d101      	bne.n	8014fbc <__sfputs_r+0x12>
 8014fb8:	2000      	movs	r0, #0
 8014fba:	e007      	b.n	8014fcc <__sfputs_r+0x22>
 8014fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fc0:	463a      	mov	r2, r7
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f7ff ffda 	bl	8014f7c <__sfputc_r>
 8014fc8:	1c43      	adds	r3, r0, #1
 8014fca:	d1f3      	bne.n	8014fb4 <__sfputs_r+0xa>
 8014fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014fd0 <_vfiprintf_r>:
 8014fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd4:	460d      	mov	r5, r1
 8014fd6:	b09d      	sub	sp, #116	@ 0x74
 8014fd8:	4614      	mov	r4, r2
 8014fda:	4698      	mov	r8, r3
 8014fdc:	4606      	mov	r6, r0
 8014fde:	b118      	cbz	r0, 8014fe8 <_vfiprintf_r+0x18>
 8014fe0:	6a03      	ldr	r3, [r0, #32]
 8014fe2:	b90b      	cbnz	r3, 8014fe8 <_vfiprintf_r+0x18>
 8014fe4:	f7ff fbda 	bl	801479c <__sinit>
 8014fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014fea:	07d9      	lsls	r1, r3, #31
 8014fec:	d405      	bmi.n	8014ffa <_vfiprintf_r+0x2a>
 8014fee:	89ab      	ldrh	r3, [r5, #12]
 8014ff0:	059a      	lsls	r2, r3, #22
 8014ff2:	d402      	bmi.n	8014ffa <_vfiprintf_r+0x2a>
 8014ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ff6:	f7ff fe0e 	bl	8014c16 <__retarget_lock_acquire_recursive>
 8014ffa:	89ab      	ldrh	r3, [r5, #12]
 8014ffc:	071b      	lsls	r3, r3, #28
 8014ffe:	d501      	bpl.n	8015004 <_vfiprintf_r+0x34>
 8015000:	692b      	ldr	r3, [r5, #16]
 8015002:	b99b      	cbnz	r3, 801502c <_vfiprintf_r+0x5c>
 8015004:	4629      	mov	r1, r5
 8015006:	4630      	mov	r0, r6
 8015008:	f7ff fd26 	bl	8014a58 <__swsetup_r>
 801500c:	b170      	cbz	r0, 801502c <_vfiprintf_r+0x5c>
 801500e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015010:	07dc      	lsls	r4, r3, #31
 8015012:	d504      	bpl.n	801501e <_vfiprintf_r+0x4e>
 8015014:	f04f 30ff 	mov.w	r0, #4294967295
 8015018:	b01d      	add	sp, #116	@ 0x74
 801501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801501e:	89ab      	ldrh	r3, [r5, #12]
 8015020:	0598      	lsls	r0, r3, #22
 8015022:	d4f7      	bmi.n	8015014 <_vfiprintf_r+0x44>
 8015024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015026:	f7ff fdf7 	bl	8014c18 <__retarget_lock_release_recursive>
 801502a:	e7f3      	b.n	8015014 <_vfiprintf_r+0x44>
 801502c:	2300      	movs	r3, #0
 801502e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015030:	2320      	movs	r3, #32
 8015032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015036:	f8cd 800c 	str.w	r8, [sp, #12]
 801503a:	2330      	movs	r3, #48	@ 0x30
 801503c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80151ec <_vfiprintf_r+0x21c>
 8015040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015044:	f04f 0901 	mov.w	r9, #1
 8015048:	4623      	mov	r3, r4
 801504a:	469a      	mov	sl, r3
 801504c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015050:	b10a      	cbz	r2, 8015056 <_vfiprintf_r+0x86>
 8015052:	2a25      	cmp	r2, #37	@ 0x25
 8015054:	d1f9      	bne.n	801504a <_vfiprintf_r+0x7a>
 8015056:	ebba 0b04 	subs.w	fp, sl, r4
 801505a:	d00b      	beq.n	8015074 <_vfiprintf_r+0xa4>
 801505c:	465b      	mov	r3, fp
 801505e:	4622      	mov	r2, r4
 8015060:	4629      	mov	r1, r5
 8015062:	4630      	mov	r0, r6
 8015064:	f7ff ffa1 	bl	8014faa <__sfputs_r>
 8015068:	3001      	adds	r0, #1
 801506a:	f000 80a7 	beq.w	80151bc <_vfiprintf_r+0x1ec>
 801506e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015070:	445a      	add	r2, fp
 8015072:	9209      	str	r2, [sp, #36]	@ 0x24
 8015074:	f89a 3000 	ldrb.w	r3, [sl]
 8015078:	2b00      	cmp	r3, #0
 801507a:	f000 809f 	beq.w	80151bc <_vfiprintf_r+0x1ec>
 801507e:	2300      	movs	r3, #0
 8015080:	f04f 32ff 	mov.w	r2, #4294967295
 8015084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015088:	f10a 0a01 	add.w	sl, sl, #1
 801508c:	9304      	str	r3, [sp, #16]
 801508e:	9307      	str	r3, [sp, #28]
 8015090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015094:	931a      	str	r3, [sp, #104]	@ 0x68
 8015096:	4654      	mov	r4, sl
 8015098:	2205      	movs	r2, #5
 801509a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801509e:	4853      	ldr	r0, [pc, #332]	@ (80151ec <_vfiprintf_r+0x21c>)
 80150a0:	f7eb f8b6 	bl	8000210 <memchr>
 80150a4:	9a04      	ldr	r2, [sp, #16]
 80150a6:	b9d8      	cbnz	r0, 80150e0 <_vfiprintf_r+0x110>
 80150a8:	06d1      	lsls	r1, r2, #27
 80150aa:	bf44      	itt	mi
 80150ac:	2320      	movmi	r3, #32
 80150ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150b2:	0713      	lsls	r3, r2, #28
 80150b4:	bf44      	itt	mi
 80150b6:	232b      	movmi	r3, #43	@ 0x2b
 80150b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150bc:	f89a 3000 	ldrb.w	r3, [sl]
 80150c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80150c2:	d015      	beq.n	80150f0 <_vfiprintf_r+0x120>
 80150c4:	9a07      	ldr	r2, [sp, #28]
 80150c6:	4654      	mov	r4, sl
 80150c8:	2000      	movs	r0, #0
 80150ca:	f04f 0c0a 	mov.w	ip, #10
 80150ce:	4621      	mov	r1, r4
 80150d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150d4:	3b30      	subs	r3, #48	@ 0x30
 80150d6:	2b09      	cmp	r3, #9
 80150d8:	d94b      	bls.n	8015172 <_vfiprintf_r+0x1a2>
 80150da:	b1b0      	cbz	r0, 801510a <_vfiprintf_r+0x13a>
 80150dc:	9207      	str	r2, [sp, #28]
 80150de:	e014      	b.n	801510a <_vfiprintf_r+0x13a>
 80150e0:	eba0 0308 	sub.w	r3, r0, r8
 80150e4:	fa09 f303 	lsl.w	r3, r9, r3
 80150e8:	4313      	orrs	r3, r2
 80150ea:	9304      	str	r3, [sp, #16]
 80150ec:	46a2      	mov	sl, r4
 80150ee:	e7d2      	b.n	8015096 <_vfiprintf_r+0xc6>
 80150f0:	9b03      	ldr	r3, [sp, #12]
 80150f2:	1d19      	adds	r1, r3, #4
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	9103      	str	r1, [sp, #12]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	bfbb      	ittet	lt
 80150fc:	425b      	neglt	r3, r3
 80150fe:	f042 0202 	orrlt.w	r2, r2, #2
 8015102:	9307      	strge	r3, [sp, #28]
 8015104:	9307      	strlt	r3, [sp, #28]
 8015106:	bfb8      	it	lt
 8015108:	9204      	strlt	r2, [sp, #16]
 801510a:	7823      	ldrb	r3, [r4, #0]
 801510c:	2b2e      	cmp	r3, #46	@ 0x2e
 801510e:	d10a      	bne.n	8015126 <_vfiprintf_r+0x156>
 8015110:	7863      	ldrb	r3, [r4, #1]
 8015112:	2b2a      	cmp	r3, #42	@ 0x2a
 8015114:	d132      	bne.n	801517c <_vfiprintf_r+0x1ac>
 8015116:	9b03      	ldr	r3, [sp, #12]
 8015118:	1d1a      	adds	r2, r3, #4
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	9203      	str	r2, [sp, #12]
 801511e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015122:	3402      	adds	r4, #2
 8015124:	9305      	str	r3, [sp, #20]
 8015126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80151fc <_vfiprintf_r+0x22c>
 801512a:	7821      	ldrb	r1, [r4, #0]
 801512c:	2203      	movs	r2, #3
 801512e:	4650      	mov	r0, sl
 8015130:	f7eb f86e 	bl	8000210 <memchr>
 8015134:	b138      	cbz	r0, 8015146 <_vfiprintf_r+0x176>
 8015136:	9b04      	ldr	r3, [sp, #16]
 8015138:	eba0 000a 	sub.w	r0, r0, sl
 801513c:	2240      	movs	r2, #64	@ 0x40
 801513e:	4082      	lsls	r2, r0
 8015140:	4313      	orrs	r3, r2
 8015142:	3401      	adds	r4, #1
 8015144:	9304      	str	r3, [sp, #16]
 8015146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801514a:	4829      	ldr	r0, [pc, #164]	@ (80151f0 <_vfiprintf_r+0x220>)
 801514c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015150:	2206      	movs	r2, #6
 8015152:	f7eb f85d 	bl	8000210 <memchr>
 8015156:	2800      	cmp	r0, #0
 8015158:	d03f      	beq.n	80151da <_vfiprintf_r+0x20a>
 801515a:	4b26      	ldr	r3, [pc, #152]	@ (80151f4 <_vfiprintf_r+0x224>)
 801515c:	bb1b      	cbnz	r3, 80151a6 <_vfiprintf_r+0x1d6>
 801515e:	9b03      	ldr	r3, [sp, #12]
 8015160:	3307      	adds	r3, #7
 8015162:	f023 0307 	bic.w	r3, r3, #7
 8015166:	3308      	adds	r3, #8
 8015168:	9303      	str	r3, [sp, #12]
 801516a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801516c:	443b      	add	r3, r7
 801516e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015170:	e76a      	b.n	8015048 <_vfiprintf_r+0x78>
 8015172:	fb0c 3202 	mla	r2, ip, r2, r3
 8015176:	460c      	mov	r4, r1
 8015178:	2001      	movs	r0, #1
 801517a:	e7a8      	b.n	80150ce <_vfiprintf_r+0xfe>
 801517c:	2300      	movs	r3, #0
 801517e:	3401      	adds	r4, #1
 8015180:	9305      	str	r3, [sp, #20]
 8015182:	4619      	mov	r1, r3
 8015184:	f04f 0c0a 	mov.w	ip, #10
 8015188:	4620      	mov	r0, r4
 801518a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801518e:	3a30      	subs	r2, #48	@ 0x30
 8015190:	2a09      	cmp	r2, #9
 8015192:	d903      	bls.n	801519c <_vfiprintf_r+0x1cc>
 8015194:	2b00      	cmp	r3, #0
 8015196:	d0c6      	beq.n	8015126 <_vfiprintf_r+0x156>
 8015198:	9105      	str	r1, [sp, #20]
 801519a:	e7c4      	b.n	8015126 <_vfiprintf_r+0x156>
 801519c:	fb0c 2101 	mla	r1, ip, r1, r2
 80151a0:	4604      	mov	r4, r0
 80151a2:	2301      	movs	r3, #1
 80151a4:	e7f0      	b.n	8015188 <_vfiprintf_r+0x1b8>
 80151a6:	ab03      	add	r3, sp, #12
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	462a      	mov	r2, r5
 80151ac:	4b12      	ldr	r3, [pc, #72]	@ (80151f8 <_vfiprintf_r+0x228>)
 80151ae:	a904      	add	r1, sp, #16
 80151b0:	4630      	mov	r0, r6
 80151b2:	f3af 8000 	nop.w
 80151b6:	4607      	mov	r7, r0
 80151b8:	1c78      	adds	r0, r7, #1
 80151ba:	d1d6      	bne.n	801516a <_vfiprintf_r+0x19a>
 80151bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151be:	07d9      	lsls	r1, r3, #31
 80151c0:	d405      	bmi.n	80151ce <_vfiprintf_r+0x1fe>
 80151c2:	89ab      	ldrh	r3, [r5, #12]
 80151c4:	059a      	lsls	r2, r3, #22
 80151c6:	d402      	bmi.n	80151ce <_vfiprintf_r+0x1fe>
 80151c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151ca:	f7ff fd25 	bl	8014c18 <__retarget_lock_release_recursive>
 80151ce:	89ab      	ldrh	r3, [r5, #12]
 80151d0:	065b      	lsls	r3, r3, #25
 80151d2:	f53f af1f 	bmi.w	8015014 <_vfiprintf_r+0x44>
 80151d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151d8:	e71e      	b.n	8015018 <_vfiprintf_r+0x48>
 80151da:	ab03      	add	r3, sp, #12
 80151dc:	9300      	str	r3, [sp, #0]
 80151de:	462a      	mov	r2, r5
 80151e0:	4b05      	ldr	r3, [pc, #20]	@ (80151f8 <_vfiprintf_r+0x228>)
 80151e2:	a904      	add	r1, sp, #16
 80151e4:	4630      	mov	r0, r6
 80151e6:	f000 f879 	bl	80152dc <_printf_i>
 80151ea:	e7e4      	b.n	80151b6 <_vfiprintf_r+0x1e6>
 80151ec:	08017558 	.word	0x08017558
 80151f0:	08017562 	.word	0x08017562
 80151f4:	00000000 	.word	0x00000000
 80151f8:	08014fab 	.word	0x08014fab
 80151fc:	0801755e 	.word	0x0801755e

08015200 <_printf_common>:
 8015200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015204:	4616      	mov	r6, r2
 8015206:	4698      	mov	r8, r3
 8015208:	688a      	ldr	r2, [r1, #8]
 801520a:	690b      	ldr	r3, [r1, #16]
 801520c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015210:	4293      	cmp	r3, r2
 8015212:	bfb8      	it	lt
 8015214:	4613      	movlt	r3, r2
 8015216:	6033      	str	r3, [r6, #0]
 8015218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801521c:	4607      	mov	r7, r0
 801521e:	460c      	mov	r4, r1
 8015220:	b10a      	cbz	r2, 8015226 <_printf_common+0x26>
 8015222:	3301      	adds	r3, #1
 8015224:	6033      	str	r3, [r6, #0]
 8015226:	6823      	ldr	r3, [r4, #0]
 8015228:	0699      	lsls	r1, r3, #26
 801522a:	bf42      	ittt	mi
 801522c:	6833      	ldrmi	r3, [r6, #0]
 801522e:	3302      	addmi	r3, #2
 8015230:	6033      	strmi	r3, [r6, #0]
 8015232:	6825      	ldr	r5, [r4, #0]
 8015234:	f015 0506 	ands.w	r5, r5, #6
 8015238:	d106      	bne.n	8015248 <_printf_common+0x48>
 801523a:	f104 0a19 	add.w	sl, r4, #25
 801523e:	68e3      	ldr	r3, [r4, #12]
 8015240:	6832      	ldr	r2, [r6, #0]
 8015242:	1a9b      	subs	r3, r3, r2
 8015244:	42ab      	cmp	r3, r5
 8015246:	dc26      	bgt.n	8015296 <_printf_common+0x96>
 8015248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801524c:	6822      	ldr	r2, [r4, #0]
 801524e:	3b00      	subs	r3, #0
 8015250:	bf18      	it	ne
 8015252:	2301      	movne	r3, #1
 8015254:	0692      	lsls	r2, r2, #26
 8015256:	d42b      	bmi.n	80152b0 <_printf_common+0xb0>
 8015258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801525c:	4641      	mov	r1, r8
 801525e:	4638      	mov	r0, r7
 8015260:	47c8      	blx	r9
 8015262:	3001      	adds	r0, #1
 8015264:	d01e      	beq.n	80152a4 <_printf_common+0xa4>
 8015266:	6823      	ldr	r3, [r4, #0]
 8015268:	6922      	ldr	r2, [r4, #16]
 801526a:	f003 0306 	and.w	r3, r3, #6
 801526e:	2b04      	cmp	r3, #4
 8015270:	bf02      	ittt	eq
 8015272:	68e5      	ldreq	r5, [r4, #12]
 8015274:	6833      	ldreq	r3, [r6, #0]
 8015276:	1aed      	subeq	r5, r5, r3
 8015278:	68a3      	ldr	r3, [r4, #8]
 801527a:	bf0c      	ite	eq
 801527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015280:	2500      	movne	r5, #0
 8015282:	4293      	cmp	r3, r2
 8015284:	bfc4      	itt	gt
 8015286:	1a9b      	subgt	r3, r3, r2
 8015288:	18ed      	addgt	r5, r5, r3
 801528a:	2600      	movs	r6, #0
 801528c:	341a      	adds	r4, #26
 801528e:	42b5      	cmp	r5, r6
 8015290:	d11a      	bne.n	80152c8 <_printf_common+0xc8>
 8015292:	2000      	movs	r0, #0
 8015294:	e008      	b.n	80152a8 <_printf_common+0xa8>
 8015296:	2301      	movs	r3, #1
 8015298:	4652      	mov	r2, sl
 801529a:	4641      	mov	r1, r8
 801529c:	4638      	mov	r0, r7
 801529e:	47c8      	blx	r9
 80152a0:	3001      	adds	r0, #1
 80152a2:	d103      	bne.n	80152ac <_printf_common+0xac>
 80152a4:	f04f 30ff 	mov.w	r0, #4294967295
 80152a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ac:	3501      	adds	r5, #1
 80152ae:	e7c6      	b.n	801523e <_printf_common+0x3e>
 80152b0:	18e1      	adds	r1, r4, r3
 80152b2:	1c5a      	adds	r2, r3, #1
 80152b4:	2030      	movs	r0, #48	@ 0x30
 80152b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80152ba:	4422      	add	r2, r4
 80152bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80152c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80152c4:	3302      	adds	r3, #2
 80152c6:	e7c7      	b.n	8015258 <_printf_common+0x58>
 80152c8:	2301      	movs	r3, #1
 80152ca:	4622      	mov	r2, r4
 80152cc:	4641      	mov	r1, r8
 80152ce:	4638      	mov	r0, r7
 80152d0:	47c8      	blx	r9
 80152d2:	3001      	adds	r0, #1
 80152d4:	d0e6      	beq.n	80152a4 <_printf_common+0xa4>
 80152d6:	3601      	adds	r6, #1
 80152d8:	e7d9      	b.n	801528e <_printf_common+0x8e>
	...

080152dc <_printf_i>:
 80152dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152e0:	7e0f      	ldrb	r7, [r1, #24]
 80152e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80152e4:	2f78      	cmp	r7, #120	@ 0x78
 80152e6:	4691      	mov	r9, r2
 80152e8:	4680      	mov	r8, r0
 80152ea:	460c      	mov	r4, r1
 80152ec:	469a      	mov	sl, r3
 80152ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80152f2:	d807      	bhi.n	8015304 <_printf_i+0x28>
 80152f4:	2f62      	cmp	r7, #98	@ 0x62
 80152f6:	d80a      	bhi.n	801530e <_printf_i+0x32>
 80152f8:	2f00      	cmp	r7, #0
 80152fa:	f000 80d1 	beq.w	80154a0 <_printf_i+0x1c4>
 80152fe:	2f58      	cmp	r7, #88	@ 0x58
 8015300:	f000 80b8 	beq.w	8015474 <_printf_i+0x198>
 8015304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801530c:	e03a      	b.n	8015384 <_printf_i+0xa8>
 801530e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015312:	2b15      	cmp	r3, #21
 8015314:	d8f6      	bhi.n	8015304 <_printf_i+0x28>
 8015316:	a101      	add	r1, pc, #4	@ (adr r1, 801531c <_printf_i+0x40>)
 8015318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801531c:	08015375 	.word	0x08015375
 8015320:	08015389 	.word	0x08015389
 8015324:	08015305 	.word	0x08015305
 8015328:	08015305 	.word	0x08015305
 801532c:	08015305 	.word	0x08015305
 8015330:	08015305 	.word	0x08015305
 8015334:	08015389 	.word	0x08015389
 8015338:	08015305 	.word	0x08015305
 801533c:	08015305 	.word	0x08015305
 8015340:	08015305 	.word	0x08015305
 8015344:	08015305 	.word	0x08015305
 8015348:	08015487 	.word	0x08015487
 801534c:	080153b3 	.word	0x080153b3
 8015350:	08015441 	.word	0x08015441
 8015354:	08015305 	.word	0x08015305
 8015358:	08015305 	.word	0x08015305
 801535c:	080154a9 	.word	0x080154a9
 8015360:	08015305 	.word	0x08015305
 8015364:	080153b3 	.word	0x080153b3
 8015368:	08015305 	.word	0x08015305
 801536c:	08015305 	.word	0x08015305
 8015370:	08015449 	.word	0x08015449
 8015374:	6833      	ldr	r3, [r6, #0]
 8015376:	1d1a      	adds	r2, r3, #4
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	6032      	str	r2, [r6, #0]
 801537c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015384:	2301      	movs	r3, #1
 8015386:	e09c      	b.n	80154c2 <_printf_i+0x1e6>
 8015388:	6833      	ldr	r3, [r6, #0]
 801538a:	6820      	ldr	r0, [r4, #0]
 801538c:	1d19      	adds	r1, r3, #4
 801538e:	6031      	str	r1, [r6, #0]
 8015390:	0606      	lsls	r6, r0, #24
 8015392:	d501      	bpl.n	8015398 <_printf_i+0xbc>
 8015394:	681d      	ldr	r5, [r3, #0]
 8015396:	e003      	b.n	80153a0 <_printf_i+0xc4>
 8015398:	0645      	lsls	r5, r0, #25
 801539a:	d5fb      	bpl.n	8015394 <_printf_i+0xb8>
 801539c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80153a0:	2d00      	cmp	r5, #0
 80153a2:	da03      	bge.n	80153ac <_printf_i+0xd0>
 80153a4:	232d      	movs	r3, #45	@ 0x2d
 80153a6:	426d      	negs	r5, r5
 80153a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80153ac:	4858      	ldr	r0, [pc, #352]	@ (8015510 <_printf_i+0x234>)
 80153ae:	230a      	movs	r3, #10
 80153b0:	e011      	b.n	80153d6 <_printf_i+0xfa>
 80153b2:	6821      	ldr	r1, [r4, #0]
 80153b4:	6833      	ldr	r3, [r6, #0]
 80153b6:	0608      	lsls	r0, r1, #24
 80153b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80153bc:	d402      	bmi.n	80153c4 <_printf_i+0xe8>
 80153be:	0649      	lsls	r1, r1, #25
 80153c0:	bf48      	it	mi
 80153c2:	b2ad      	uxthmi	r5, r5
 80153c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80153c6:	4852      	ldr	r0, [pc, #328]	@ (8015510 <_printf_i+0x234>)
 80153c8:	6033      	str	r3, [r6, #0]
 80153ca:	bf14      	ite	ne
 80153cc:	230a      	movne	r3, #10
 80153ce:	2308      	moveq	r3, #8
 80153d0:	2100      	movs	r1, #0
 80153d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80153d6:	6866      	ldr	r6, [r4, #4]
 80153d8:	60a6      	str	r6, [r4, #8]
 80153da:	2e00      	cmp	r6, #0
 80153dc:	db05      	blt.n	80153ea <_printf_i+0x10e>
 80153de:	6821      	ldr	r1, [r4, #0]
 80153e0:	432e      	orrs	r6, r5
 80153e2:	f021 0104 	bic.w	r1, r1, #4
 80153e6:	6021      	str	r1, [r4, #0]
 80153e8:	d04b      	beq.n	8015482 <_printf_i+0x1a6>
 80153ea:	4616      	mov	r6, r2
 80153ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80153f0:	fb03 5711 	mls	r7, r3, r1, r5
 80153f4:	5dc7      	ldrb	r7, [r0, r7]
 80153f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80153fa:	462f      	mov	r7, r5
 80153fc:	42bb      	cmp	r3, r7
 80153fe:	460d      	mov	r5, r1
 8015400:	d9f4      	bls.n	80153ec <_printf_i+0x110>
 8015402:	2b08      	cmp	r3, #8
 8015404:	d10b      	bne.n	801541e <_printf_i+0x142>
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	07df      	lsls	r7, r3, #31
 801540a:	d508      	bpl.n	801541e <_printf_i+0x142>
 801540c:	6923      	ldr	r3, [r4, #16]
 801540e:	6861      	ldr	r1, [r4, #4]
 8015410:	4299      	cmp	r1, r3
 8015412:	bfde      	ittt	le
 8015414:	2330      	movle	r3, #48	@ 0x30
 8015416:	f806 3c01 	strble.w	r3, [r6, #-1]
 801541a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801541e:	1b92      	subs	r2, r2, r6
 8015420:	6122      	str	r2, [r4, #16]
 8015422:	f8cd a000 	str.w	sl, [sp]
 8015426:	464b      	mov	r3, r9
 8015428:	aa03      	add	r2, sp, #12
 801542a:	4621      	mov	r1, r4
 801542c:	4640      	mov	r0, r8
 801542e:	f7ff fee7 	bl	8015200 <_printf_common>
 8015432:	3001      	adds	r0, #1
 8015434:	d14a      	bne.n	80154cc <_printf_i+0x1f0>
 8015436:	f04f 30ff 	mov.w	r0, #4294967295
 801543a:	b004      	add	sp, #16
 801543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015440:	6823      	ldr	r3, [r4, #0]
 8015442:	f043 0320 	orr.w	r3, r3, #32
 8015446:	6023      	str	r3, [r4, #0]
 8015448:	4832      	ldr	r0, [pc, #200]	@ (8015514 <_printf_i+0x238>)
 801544a:	2778      	movs	r7, #120	@ 0x78
 801544c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015450:	6823      	ldr	r3, [r4, #0]
 8015452:	6831      	ldr	r1, [r6, #0]
 8015454:	061f      	lsls	r7, r3, #24
 8015456:	f851 5b04 	ldr.w	r5, [r1], #4
 801545a:	d402      	bmi.n	8015462 <_printf_i+0x186>
 801545c:	065f      	lsls	r7, r3, #25
 801545e:	bf48      	it	mi
 8015460:	b2ad      	uxthmi	r5, r5
 8015462:	6031      	str	r1, [r6, #0]
 8015464:	07d9      	lsls	r1, r3, #31
 8015466:	bf44      	itt	mi
 8015468:	f043 0320 	orrmi.w	r3, r3, #32
 801546c:	6023      	strmi	r3, [r4, #0]
 801546e:	b11d      	cbz	r5, 8015478 <_printf_i+0x19c>
 8015470:	2310      	movs	r3, #16
 8015472:	e7ad      	b.n	80153d0 <_printf_i+0xf4>
 8015474:	4826      	ldr	r0, [pc, #152]	@ (8015510 <_printf_i+0x234>)
 8015476:	e7e9      	b.n	801544c <_printf_i+0x170>
 8015478:	6823      	ldr	r3, [r4, #0]
 801547a:	f023 0320 	bic.w	r3, r3, #32
 801547e:	6023      	str	r3, [r4, #0]
 8015480:	e7f6      	b.n	8015470 <_printf_i+0x194>
 8015482:	4616      	mov	r6, r2
 8015484:	e7bd      	b.n	8015402 <_printf_i+0x126>
 8015486:	6833      	ldr	r3, [r6, #0]
 8015488:	6825      	ldr	r5, [r4, #0]
 801548a:	6961      	ldr	r1, [r4, #20]
 801548c:	1d18      	adds	r0, r3, #4
 801548e:	6030      	str	r0, [r6, #0]
 8015490:	062e      	lsls	r6, r5, #24
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	d501      	bpl.n	801549a <_printf_i+0x1be>
 8015496:	6019      	str	r1, [r3, #0]
 8015498:	e002      	b.n	80154a0 <_printf_i+0x1c4>
 801549a:	0668      	lsls	r0, r5, #25
 801549c:	d5fb      	bpl.n	8015496 <_printf_i+0x1ba>
 801549e:	8019      	strh	r1, [r3, #0]
 80154a0:	2300      	movs	r3, #0
 80154a2:	6123      	str	r3, [r4, #16]
 80154a4:	4616      	mov	r6, r2
 80154a6:	e7bc      	b.n	8015422 <_printf_i+0x146>
 80154a8:	6833      	ldr	r3, [r6, #0]
 80154aa:	1d1a      	adds	r2, r3, #4
 80154ac:	6032      	str	r2, [r6, #0]
 80154ae:	681e      	ldr	r6, [r3, #0]
 80154b0:	6862      	ldr	r2, [r4, #4]
 80154b2:	2100      	movs	r1, #0
 80154b4:	4630      	mov	r0, r6
 80154b6:	f7ea feab 	bl	8000210 <memchr>
 80154ba:	b108      	cbz	r0, 80154c0 <_printf_i+0x1e4>
 80154bc:	1b80      	subs	r0, r0, r6
 80154be:	6060      	str	r0, [r4, #4]
 80154c0:	6863      	ldr	r3, [r4, #4]
 80154c2:	6123      	str	r3, [r4, #16]
 80154c4:	2300      	movs	r3, #0
 80154c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80154ca:	e7aa      	b.n	8015422 <_printf_i+0x146>
 80154cc:	6923      	ldr	r3, [r4, #16]
 80154ce:	4632      	mov	r2, r6
 80154d0:	4649      	mov	r1, r9
 80154d2:	4640      	mov	r0, r8
 80154d4:	47d0      	blx	sl
 80154d6:	3001      	adds	r0, #1
 80154d8:	d0ad      	beq.n	8015436 <_printf_i+0x15a>
 80154da:	6823      	ldr	r3, [r4, #0]
 80154dc:	079b      	lsls	r3, r3, #30
 80154de:	d413      	bmi.n	8015508 <_printf_i+0x22c>
 80154e0:	68e0      	ldr	r0, [r4, #12]
 80154e2:	9b03      	ldr	r3, [sp, #12]
 80154e4:	4298      	cmp	r0, r3
 80154e6:	bfb8      	it	lt
 80154e8:	4618      	movlt	r0, r3
 80154ea:	e7a6      	b.n	801543a <_printf_i+0x15e>
 80154ec:	2301      	movs	r3, #1
 80154ee:	4632      	mov	r2, r6
 80154f0:	4649      	mov	r1, r9
 80154f2:	4640      	mov	r0, r8
 80154f4:	47d0      	blx	sl
 80154f6:	3001      	adds	r0, #1
 80154f8:	d09d      	beq.n	8015436 <_printf_i+0x15a>
 80154fa:	3501      	adds	r5, #1
 80154fc:	68e3      	ldr	r3, [r4, #12]
 80154fe:	9903      	ldr	r1, [sp, #12]
 8015500:	1a5b      	subs	r3, r3, r1
 8015502:	42ab      	cmp	r3, r5
 8015504:	dcf2      	bgt.n	80154ec <_printf_i+0x210>
 8015506:	e7eb      	b.n	80154e0 <_printf_i+0x204>
 8015508:	2500      	movs	r5, #0
 801550a:	f104 0619 	add.w	r6, r4, #25
 801550e:	e7f5      	b.n	80154fc <_printf_i+0x220>
 8015510:	08017569 	.word	0x08017569
 8015514:	0801757a 	.word	0x0801757a

08015518 <__sflush_r>:
 8015518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015520:	0716      	lsls	r6, r2, #28
 8015522:	4605      	mov	r5, r0
 8015524:	460c      	mov	r4, r1
 8015526:	d454      	bmi.n	80155d2 <__sflush_r+0xba>
 8015528:	684b      	ldr	r3, [r1, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	dc02      	bgt.n	8015534 <__sflush_r+0x1c>
 801552e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015530:	2b00      	cmp	r3, #0
 8015532:	dd48      	ble.n	80155c6 <__sflush_r+0xae>
 8015534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015536:	2e00      	cmp	r6, #0
 8015538:	d045      	beq.n	80155c6 <__sflush_r+0xae>
 801553a:	2300      	movs	r3, #0
 801553c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015540:	682f      	ldr	r7, [r5, #0]
 8015542:	6a21      	ldr	r1, [r4, #32]
 8015544:	602b      	str	r3, [r5, #0]
 8015546:	d030      	beq.n	80155aa <__sflush_r+0x92>
 8015548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801554a:	89a3      	ldrh	r3, [r4, #12]
 801554c:	0759      	lsls	r1, r3, #29
 801554e:	d505      	bpl.n	801555c <__sflush_r+0x44>
 8015550:	6863      	ldr	r3, [r4, #4]
 8015552:	1ad2      	subs	r2, r2, r3
 8015554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015556:	b10b      	cbz	r3, 801555c <__sflush_r+0x44>
 8015558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801555a:	1ad2      	subs	r2, r2, r3
 801555c:	2300      	movs	r3, #0
 801555e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015560:	6a21      	ldr	r1, [r4, #32]
 8015562:	4628      	mov	r0, r5
 8015564:	47b0      	blx	r6
 8015566:	1c43      	adds	r3, r0, #1
 8015568:	89a3      	ldrh	r3, [r4, #12]
 801556a:	d106      	bne.n	801557a <__sflush_r+0x62>
 801556c:	6829      	ldr	r1, [r5, #0]
 801556e:	291d      	cmp	r1, #29
 8015570:	d82b      	bhi.n	80155ca <__sflush_r+0xb2>
 8015572:	4a2a      	ldr	r2, [pc, #168]	@ (801561c <__sflush_r+0x104>)
 8015574:	40ca      	lsrs	r2, r1
 8015576:	07d6      	lsls	r6, r2, #31
 8015578:	d527      	bpl.n	80155ca <__sflush_r+0xb2>
 801557a:	2200      	movs	r2, #0
 801557c:	6062      	str	r2, [r4, #4]
 801557e:	04d9      	lsls	r1, r3, #19
 8015580:	6922      	ldr	r2, [r4, #16]
 8015582:	6022      	str	r2, [r4, #0]
 8015584:	d504      	bpl.n	8015590 <__sflush_r+0x78>
 8015586:	1c42      	adds	r2, r0, #1
 8015588:	d101      	bne.n	801558e <__sflush_r+0x76>
 801558a:	682b      	ldr	r3, [r5, #0]
 801558c:	b903      	cbnz	r3, 8015590 <__sflush_r+0x78>
 801558e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015592:	602f      	str	r7, [r5, #0]
 8015594:	b1b9      	cbz	r1, 80155c6 <__sflush_r+0xae>
 8015596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801559a:	4299      	cmp	r1, r3
 801559c:	d002      	beq.n	80155a4 <__sflush_r+0x8c>
 801559e:	4628      	mov	r0, r5
 80155a0:	f7ff fb4a 	bl	8014c38 <_free_r>
 80155a4:	2300      	movs	r3, #0
 80155a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80155a8:	e00d      	b.n	80155c6 <__sflush_r+0xae>
 80155aa:	2301      	movs	r3, #1
 80155ac:	4628      	mov	r0, r5
 80155ae:	47b0      	blx	r6
 80155b0:	4602      	mov	r2, r0
 80155b2:	1c50      	adds	r0, r2, #1
 80155b4:	d1c9      	bne.n	801554a <__sflush_r+0x32>
 80155b6:	682b      	ldr	r3, [r5, #0]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d0c6      	beq.n	801554a <__sflush_r+0x32>
 80155bc:	2b1d      	cmp	r3, #29
 80155be:	d001      	beq.n	80155c4 <__sflush_r+0xac>
 80155c0:	2b16      	cmp	r3, #22
 80155c2:	d11e      	bne.n	8015602 <__sflush_r+0xea>
 80155c4:	602f      	str	r7, [r5, #0]
 80155c6:	2000      	movs	r0, #0
 80155c8:	e022      	b.n	8015610 <__sflush_r+0xf8>
 80155ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155ce:	b21b      	sxth	r3, r3
 80155d0:	e01b      	b.n	801560a <__sflush_r+0xf2>
 80155d2:	690f      	ldr	r7, [r1, #16]
 80155d4:	2f00      	cmp	r7, #0
 80155d6:	d0f6      	beq.n	80155c6 <__sflush_r+0xae>
 80155d8:	0793      	lsls	r3, r2, #30
 80155da:	680e      	ldr	r6, [r1, #0]
 80155dc:	bf08      	it	eq
 80155de:	694b      	ldreq	r3, [r1, #20]
 80155e0:	600f      	str	r7, [r1, #0]
 80155e2:	bf18      	it	ne
 80155e4:	2300      	movne	r3, #0
 80155e6:	eba6 0807 	sub.w	r8, r6, r7
 80155ea:	608b      	str	r3, [r1, #8]
 80155ec:	f1b8 0f00 	cmp.w	r8, #0
 80155f0:	dde9      	ble.n	80155c6 <__sflush_r+0xae>
 80155f2:	6a21      	ldr	r1, [r4, #32]
 80155f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80155f6:	4643      	mov	r3, r8
 80155f8:	463a      	mov	r2, r7
 80155fa:	4628      	mov	r0, r5
 80155fc:	47b0      	blx	r6
 80155fe:	2800      	cmp	r0, #0
 8015600:	dc08      	bgt.n	8015614 <__sflush_r+0xfc>
 8015602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801560a:	81a3      	strh	r3, [r4, #12]
 801560c:	f04f 30ff 	mov.w	r0, #4294967295
 8015610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015614:	4407      	add	r7, r0
 8015616:	eba8 0800 	sub.w	r8, r8, r0
 801561a:	e7e7      	b.n	80155ec <__sflush_r+0xd4>
 801561c:	20400001 	.word	0x20400001

08015620 <_fflush_r>:
 8015620:	b538      	push	{r3, r4, r5, lr}
 8015622:	690b      	ldr	r3, [r1, #16]
 8015624:	4605      	mov	r5, r0
 8015626:	460c      	mov	r4, r1
 8015628:	b913      	cbnz	r3, 8015630 <_fflush_r+0x10>
 801562a:	2500      	movs	r5, #0
 801562c:	4628      	mov	r0, r5
 801562e:	bd38      	pop	{r3, r4, r5, pc}
 8015630:	b118      	cbz	r0, 801563a <_fflush_r+0x1a>
 8015632:	6a03      	ldr	r3, [r0, #32]
 8015634:	b90b      	cbnz	r3, 801563a <_fflush_r+0x1a>
 8015636:	f7ff f8b1 	bl	801479c <__sinit>
 801563a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d0f3      	beq.n	801562a <_fflush_r+0xa>
 8015642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015644:	07d0      	lsls	r0, r2, #31
 8015646:	d404      	bmi.n	8015652 <_fflush_r+0x32>
 8015648:	0599      	lsls	r1, r3, #22
 801564a:	d402      	bmi.n	8015652 <_fflush_r+0x32>
 801564c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801564e:	f7ff fae2 	bl	8014c16 <__retarget_lock_acquire_recursive>
 8015652:	4628      	mov	r0, r5
 8015654:	4621      	mov	r1, r4
 8015656:	f7ff ff5f 	bl	8015518 <__sflush_r>
 801565a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801565c:	07da      	lsls	r2, r3, #31
 801565e:	4605      	mov	r5, r0
 8015660:	d4e4      	bmi.n	801562c <_fflush_r+0xc>
 8015662:	89a3      	ldrh	r3, [r4, #12]
 8015664:	059b      	lsls	r3, r3, #22
 8015666:	d4e1      	bmi.n	801562c <_fflush_r+0xc>
 8015668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801566a:	f7ff fad5 	bl	8014c18 <__retarget_lock_release_recursive>
 801566e:	e7dd      	b.n	801562c <_fflush_r+0xc>

08015670 <__swhatbuf_r>:
 8015670:	b570      	push	{r4, r5, r6, lr}
 8015672:	460c      	mov	r4, r1
 8015674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015678:	2900      	cmp	r1, #0
 801567a:	b096      	sub	sp, #88	@ 0x58
 801567c:	4615      	mov	r5, r2
 801567e:	461e      	mov	r6, r3
 8015680:	da0d      	bge.n	801569e <__swhatbuf_r+0x2e>
 8015682:	89a3      	ldrh	r3, [r4, #12]
 8015684:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015688:	f04f 0100 	mov.w	r1, #0
 801568c:	bf14      	ite	ne
 801568e:	2340      	movne	r3, #64	@ 0x40
 8015690:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015694:	2000      	movs	r0, #0
 8015696:	6031      	str	r1, [r6, #0]
 8015698:	602b      	str	r3, [r5, #0]
 801569a:	b016      	add	sp, #88	@ 0x58
 801569c:	bd70      	pop	{r4, r5, r6, pc}
 801569e:	466a      	mov	r2, sp
 80156a0:	f000 f862 	bl	8015768 <_fstat_r>
 80156a4:	2800      	cmp	r0, #0
 80156a6:	dbec      	blt.n	8015682 <__swhatbuf_r+0x12>
 80156a8:	9901      	ldr	r1, [sp, #4]
 80156aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80156ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80156b2:	4259      	negs	r1, r3
 80156b4:	4159      	adcs	r1, r3
 80156b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80156ba:	e7eb      	b.n	8015694 <__swhatbuf_r+0x24>

080156bc <__smakebuf_r>:
 80156bc:	898b      	ldrh	r3, [r1, #12]
 80156be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156c0:	079d      	lsls	r5, r3, #30
 80156c2:	4606      	mov	r6, r0
 80156c4:	460c      	mov	r4, r1
 80156c6:	d507      	bpl.n	80156d8 <__smakebuf_r+0x1c>
 80156c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80156cc:	6023      	str	r3, [r4, #0]
 80156ce:	6123      	str	r3, [r4, #16]
 80156d0:	2301      	movs	r3, #1
 80156d2:	6163      	str	r3, [r4, #20]
 80156d4:	b003      	add	sp, #12
 80156d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156d8:	ab01      	add	r3, sp, #4
 80156da:	466a      	mov	r2, sp
 80156dc:	f7ff ffc8 	bl	8015670 <__swhatbuf_r>
 80156e0:	9f00      	ldr	r7, [sp, #0]
 80156e2:	4605      	mov	r5, r0
 80156e4:	4639      	mov	r1, r7
 80156e6:	4630      	mov	r0, r6
 80156e8:	f7fe ff40 	bl	801456c <_malloc_r>
 80156ec:	b948      	cbnz	r0, 8015702 <__smakebuf_r+0x46>
 80156ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156f2:	059a      	lsls	r2, r3, #22
 80156f4:	d4ee      	bmi.n	80156d4 <__smakebuf_r+0x18>
 80156f6:	f023 0303 	bic.w	r3, r3, #3
 80156fa:	f043 0302 	orr.w	r3, r3, #2
 80156fe:	81a3      	strh	r3, [r4, #12]
 8015700:	e7e2      	b.n	80156c8 <__smakebuf_r+0xc>
 8015702:	89a3      	ldrh	r3, [r4, #12]
 8015704:	6020      	str	r0, [r4, #0]
 8015706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801570a:	81a3      	strh	r3, [r4, #12]
 801570c:	9b01      	ldr	r3, [sp, #4]
 801570e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015712:	b15b      	cbz	r3, 801572c <__smakebuf_r+0x70>
 8015714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015718:	4630      	mov	r0, r6
 801571a:	f000 f837 	bl	801578c <_isatty_r>
 801571e:	b128      	cbz	r0, 801572c <__smakebuf_r+0x70>
 8015720:	89a3      	ldrh	r3, [r4, #12]
 8015722:	f023 0303 	bic.w	r3, r3, #3
 8015726:	f043 0301 	orr.w	r3, r3, #1
 801572a:	81a3      	strh	r3, [r4, #12]
 801572c:	89a3      	ldrh	r3, [r4, #12]
 801572e:	431d      	orrs	r5, r3
 8015730:	81a5      	strh	r5, [r4, #12]
 8015732:	e7cf      	b.n	80156d4 <__smakebuf_r+0x18>

08015734 <memmove>:
 8015734:	4288      	cmp	r0, r1
 8015736:	b510      	push	{r4, lr}
 8015738:	eb01 0402 	add.w	r4, r1, r2
 801573c:	d902      	bls.n	8015744 <memmove+0x10>
 801573e:	4284      	cmp	r4, r0
 8015740:	4623      	mov	r3, r4
 8015742:	d807      	bhi.n	8015754 <memmove+0x20>
 8015744:	1e43      	subs	r3, r0, #1
 8015746:	42a1      	cmp	r1, r4
 8015748:	d008      	beq.n	801575c <memmove+0x28>
 801574a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801574e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015752:	e7f8      	b.n	8015746 <memmove+0x12>
 8015754:	4402      	add	r2, r0
 8015756:	4601      	mov	r1, r0
 8015758:	428a      	cmp	r2, r1
 801575a:	d100      	bne.n	801575e <memmove+0x2a>
 801575c:	bd10      	pop	{r4, pc}
 801575e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015766:	e7f7      	b.n	8015758 <memmove+0x24>

08015768 <_fstat_r>:
 8015768:	b538      	push	{r3, r4, r5, lr}
 801576a:	4d07      	ldr	r5, [pc, #28]	@ (8015788 <_fstat_r+0x20>)
 801576c:	2300      	movs	r3, #0
 801576e:	4604      	mov	r4, r0
 8015770:	4608      	mov	r0, r1
 8015772:	4611      	mov	r1, r2
 8015774:	602b      	str	r3, [r5, #0]
 8015776:	f7ed faa0 	bl	8002cba <_fstat>
 801577a:	1c43      	adds	r3, r0, #1
 801577c:	d102      	bne.n	8015784 <_fstat_r+0x1c>
 801577e:	682b      	ldr	r3, [r5, #0]
 8015780:	b103      	cbz	r3, 8015784 <_fstat_r+0x1c>
 8015782:	6023      	str	r3, [r4, #0]
 8015784:	bd38      	pop	{r3, r4, r5, pc}
 8015786:	bf00      	nop
 8015788:	2001443c 	.word	0x2001443c

0801578c <_isatty_r>:
 801578c:	b538      	push	{r3, r4, r5, lr}
 801578e:	4d06      	ldr	r5, [pc, #24]	@ (80157a8 <_isatty_r+0x1c>)
 8015790:	2300      	movs	r3, #0
 8015792:	4604      	mov	r4, r0
 8015794:	4608      	mov	r0, r1
 8015796:	602b      	str	r3, [r5, #0]
 8015798:	f7ed fa9f 	bl	8002cda <_isatty>
 801579c:	1c43      	adds	r3, r0, #1
 801579e:	d102      	bne.n	80157a6 <_isatty_r+0x1a>
 80157a0:	682b      	ldr	r3, [r5, #0]
 80157a2:	b103      	cbz	r3, 80157a6 <_isatty_r+0x1a>
 80157a4:	6023      	str	r3, [r4, #0]
 80157a6:	bd38      	pop	{r3, r4, r5, pc}
 80157a8:	2001443c 	.word	0x2001443c

080157ac <_realloc_r>:
 80157ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157b0:	4607      	mov	r7, r0
 80157b2:	4614      	mov	r4, r2
 80157b4:	460d      	mov	r5, r1
 80157b6:	b921      	cbnz	r1, 80157c2 <_realloc_r+0x16>
 80157b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157bc:	4611      	mov	r1, r2
 80157be:	f7fe bed5 	b.w	801456c <_malloc_r>
 80157c2:	b92a      	cbnz	r2, 80157d0 <_realloc_r+0x24>
 80157c4:	f7ff fa38 	bl	8014c38 <_free_r>
 80157c8:	4625      	mov	r5, r4
 80157ca:	4628      	mov	r0, r5
 80157cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d0:	f000 f81a 	bl	8015808 <_malloc_usable_size_r>
 80157d4:	4284      	cmp	r4, r0
 80157d6:	4606      	mov	r6, r0
 80157d8:	d802      	bhi.n	80157e0 <_realloc_r+0x34>
 80157da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80157de:	d8f4      	bhi.n	80157ca <_realloc_r+0x1e>
 80157e0:	4621      	mov	r1, r4
 80157e2:	4638      	mov	r0, r7
 80157e4:	f7fe fec2 	bl	801456c <_malloc_r>
 80157e8:	4680      	mov	r8, r0
 80157ea:	b908      	cbnz	r0, 80157f0 <_realloc_r+0x44>
 80157ec:	4645      	mov	r5, r8
 80157ee:	e7ec      	b.n	80157ca <_realloc_r+0x1e>
 80157f0:	42b4      	cmp	r4, r6
 80157f2:	4622      	mov	r2, r4
 80157f4:	4629      	mov	r1, r5
 80157f6:	bf28      	it	cs
 80157f8:	4632      	movcs	r2, r6
 80157fa:	f7ff fa0e 	bl	8014c1a <memcpy>
 80157fe:	4629      	mov	r1, r5
 8015800:	4638      	mov	r0, r7
 8015802:	f7ff fa19 	bl	8014c38 <_free_r>
 8015806:	e7f1      	b.n	80157ec <_realloc_r+0x40>

08015808 <_malloc_usable_size_r>:
 8015808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801580c:	1f18      	subs	r0, r3, #4
 801580e:	2b00      	cmp	r3, #0
 8015810:	bfbc      	itt	lt
 8015812:	580b      	ldrlt	r3, [r1, r0]
 8015814:	18c0      	addlt	r0, r0, r3
 8015816:	4770      	bx	lr

08015818 <pow>:
 8015818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581a:	ed2d 8b02 	vpush	{d8}
 801581e:	eeb0 8a40 	vmov.f32	s16, s0
 8015822:	eef0 8a60 	vmov.f32	s17, s1
 8015826:	ec55 4b11 	vmov	r4, r5, d1
 801582a:	f000 f8ad 	bl	8015988 <__ieee754_pow>
 801582e:	4622      	mov	r2, r4
 8015830:	462b      	mov	r3, r5
 8015832:	4620      	mov	r0, r4
 8015834:	4629      	mov	r1, r5
 8015836:	ec57 6b10 	vmov	r6, r7, d0
 801583a:	f7eb f98f 	bl	8000b5c <__aeabi_dcmpun>
 801583e:	2800      	cmp	r0, #0
 8015840:	d13b      	bne.n	80158ba <pow+0xa2>
 8015842:	ec51 0b18 	vmov	r0, r1, d8
 8015846:	2200      	movs	r2, #0
 8015848:	2300      	movs	r3, #0
 801584a:	f7eb f955 	bl	8000af8 <__aeabi_dcmpeq>
 801584e:	b1b8      	cbz	r0, 8015880 <pow+0x68>
 8015850:	2200      	movs	r2, #0
 8015852:	2300      	movs	r3, #0
 8015854:	4620      	mov	r0, r4
 8015856:	4629      	mov	r1, r5
 8015858:	f7eb f94e 	bl	8000af8 <__aeabi_dcmpeq>
 801585c:	2800      	cmp	r0, #0
 801585e:	d146      	bne.n	80158ee <pow+0xd6>
 8015860:	ec45 4b10 	vmov	d0, r4, r5
 8015864:	f000 f848 	bl	80158f8 <finite>
 8015868:	b338      	cbz	r0, 80158ba <pow+0xa2>
 801586a:	2200      	movs	r2, #0
 801586c:	2300      	movs	r3, #0
 801586e:	4620      	mov	r0, r4
 8015870:	4629      	mov	r1, r5
 8015872:	f7eb f94b 	bl	8000b0c <__aeabi_dcmplt>
 8015876:	b300      	cbz	r0, 80158ba <pow+0xa2>
 8015878:	f7ff f9a2 	bl	8014bc0 <__errno>
 801587c:	2322      	movs	r3, #34	@ 0x22
 801587e:	e01b      	b.n	80158b8 <pow+0xa0>
 8015880:	ec47 6b10 	vmov	d0, r6, r7
 8015884:	f000 f838 	bl	80158f8 <finite>
 8015888:	b9e0      	cbnz	r0, 80158c4 <pow+0xac>
 801588a:	eeb0 0a48 	vmov.f32	s0, s16
 801588e:	eef0 0a68 	vmov.f32	s1, s17
 8015892:	f000 f831 	bl	80158f8 <finite>
 8015896:	b1a8      	cbz	r0, 80158c4 <pow+0xac>
 8015898:	ec45 4b10 	vmov	d0, r4, r5
 801589c:	f000 f82c 	bl	80158f8 <finite>
 80158a0:	b180      	cbz	r0, 80158c4 <pow+0xac>
 80158a2:	4632      	mov	r2, r6
 80158a4:	463b      	mov	r3, r7
 80158a6:	4630      	mov	r0, r6
 80158a8:	4639      	mov	r1, r7
 80158aa:	f7eb f957 	bl	8000b5c <__aeabi_dcmpun>
 80158ae:	2800      	cmp	r0, #0
 80158b0:	d0e2      	beq.n	8015878 <pow+0x60>
 80158b2:	f7ff f985 	bl	8014bc0 <__errno>
 80158b6:	2321      	movs	r3, #33	@ 0x21
 80158b8:	6003      	str	r3, [r0, #0]
 80158ba:	ecbd 8b02 	vpop	{d8}
 80158be:	ec47 6b10 	vmov	d0, r6, r7
 80158c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158c4:	2200      	movs	r2, #0
 80158c6:	2300      	movs	r3, #0
 80158c8:	4630      	mov	r0, r6
 80158ca:	4639      	mov	r1, r7
 80158cc:	f7eb f914 	bl	8000af8 <__aeabi_dcmpeq>
 80158d0:	2800      	cmp	r0, #0
 80158d2:	d0f2      	beq.n	80158ba <pow+0xa2>
 80158d4:	eeb0 0a48 	vmov.f32	s0, s16
 80158d8:	eef0 0a68 	vmov.f32	s1, s17
 80158dc:	f000 f80c 	bl	80158f8 <finite>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d0ea      	beq.n	80158ba <pow+0xa2>
 80158e4:	ec45 4b10 	vmov	d0, r4, r5
 80158e8:	f000 f806 	bl	80158f8 <finite>
 80158ec:	e7c3      	b.n	8015876 <pow+0x5e>
 80158ee:	4f01      	ldr	r7, [pc, #4]	@ (80158f4 <pow+0xdc>)
 80158f0:	2600      	movs	r6, #0
 80158f2:	e7e2      	b.n	80158ba <pow+0xa2>
 80158f4:	3ff00000 	.word	0x3ff00000

080158f8 <finite>:
 80158f8:	b082      	sub	sp, #8
 80158fa:	ed8d 0b00 	vstr	d0, [sp]
 80158fe:	9801      	ldr	r0, [sp, #4]
 8015900:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015904:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015908:	0fc0      	lsrs	r0, r0, #31
 801590a:	b002      	add	sp, #8
 801590c:	4770      	bx	lr
	...

08015910 <trunc>:
 8015910:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8015914:	ec5c bb10 	vmov	fp, ip, d0
 8015918:	f3cc 500a 	ubfx	r0, ip, #20, #11
 801591c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8015920:	2913      	cmp	r1, #19
 8015922:	4664      	mov	r4, ip
 8015924:	dc14      	bgt.n	8015950 <trunc+0x40>
 8015926:	2900      	cmp	r1, #0
 8015928:	bfa4      	itt	ge
 801592a:	4b15      	ldrge	r3, [pc, #84]	@ (8015980 <trunc+0x70>)
 801592c:	fa43 f101 	asrge.w	r1, r3, r1
 8015930:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8015934:	bfad      	iteet	ge
 8015936:	4021      	andge	r1, r4
 8015938:	2200      	movlt	r2, #0
 801593a:	4603      	movlt	r3, r0
 801593c:	2200      	movge	r2, #0
 801593e:	bfa8      	it	ge
 8015940:	ea41 0300 	orrge.w	r3, r1, r0
 8015944:	4693      	mov	fp, r2
 8015946:	469c      	mov	ip, r3
 8015948:	ec4c bb10 	vmov	d0, fp, ip
 801594c:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8015950:	2933      	cmp	r1, #51	@ 0x33
 8015952:	dd0b      	ble.n	801596c <trunc+0x5c>
 8015954:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015958:	d1f6      	bne.n	8015948 <trunc+0x38>
 801595a:	465a      	mov	r2, fp
 801595c:	4663      	mov	r3, ip
 801595e:	4658      	mov	r0, fp
 8015960:	4621      	mov	r1, r4
 8015962:	f7ea fcab 	bl	80002bc <__adddf3>
 8015966:	4683      	mov	fp, r0
 8015968:	468c      	mov	ip, r1
 801596a:	e7ed      	b.n	8015948 <trunc+0x38>
 801596c:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8015970:	f04f 33ff 	mov.w	r3, #4294967295
 8015974:	40c3      	lsrs	r3, r0
 8015976:	ea2b 0603 	bic.w	r6, fp, r3
 801597a:	46b3      	mov	fp, r6
 801597c:	46a4      	mov	ip, r4
 801597e:	e7e3      	b.n	8015948 <trunc+0x38>
 8015980:	fff00000 	.word	0xfff00000
 8015984:	00000000 	.word	0x00000000

08015988 <__ieee754_pow>:
 8015988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801598c:	b091      	sub	sp, #68	@ 0x44
 801598e:	ed8d 1b00 	vstr	d1, [sp]
 8015992:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015996:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801599a:	ea5a 0001 	orrs.w	r0, sl, r1
 801599e:	ec57 6b10 	vmov	r6, r7, d0
 80159a2:	d113      	bne.n	80159cc <__ieee754_pow+0x44>
 80159a4:	19b3      	adds	r3, r6, r6
 80159a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80159aa:	4152      	adcs	r2, r2
 80159ac:	4298      	cmp	r0, r3
 80159ae:	4b9a      	ldr	r3, [pc, #616]	@ (8015c18 <__ieee754_pow+0x290>)
 80159b0:	4193      	sbcs	r3, r2
 80159b2:	f080 84ee 	bcs.w	8016392 <__ieee754_pow+0xa0a>
 80159b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159ba:	4630      	mov	r0, r6
 80159bc:	4639      	mov	r1, r7
 80159be:	f7ea fc7d 	bl	80002bc <__adddf3>
 80159c2:	ec41 0b10 	vmov	d0, r0, r1
 80159c6:	b011      	add	sp, #68	@ 0x44
 80159c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159cc:	4a93      	ldr	r2, [pc, #588]	@ (8015c1c <__ieee754_pow+0x294>)
 80159ce:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80159d2:	4295      	cmp	r5, r2
 80159d4:	46b8      	mov	r8, r7
 80159d6:	4633      	mov	r3, r6
 80159d8:	d80a      	bhi.n	80159f0 <__ieee754_pow+0x68>
 80159da:	d104      	bne.n	80159e6 <__ieee754_pow+0x5e>
 80159dc:	2e00      	cmp	r6, #0
 80159de:	d1ea      	bne.n	80159b6 <__ieee754_pow+0x2e>
 80159e0:	45aa      	cmp	sl, r5
 80159e2:	d8e8      	bhi.n	80159b6 <__ieee754_pow+0x2e>
 80159e4:	e001      	b.n	80159ea <__ieee754_pow+0x62>
 80159e6:	4592      	cmp	sl, r2
 80159e8:	d802      	bhi.n	80159f0 <__ieee754_pow+0x68>
 80159ea:	4592      	cmp	sl, r2
 80159ec:	d10f      	bne.n	8015a0e <__ieee754_pow+0x86>
 80159ee:	b171      	cbz	r1, 8015a0e <__ieee754_pow+0x86>
 80159f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80159f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80159f8:	ea58 0803 	orrs.w	r8, r8, r3
 80159fc:	d1db      	bne.n	80159b6 <__ieee754_pow+0x2e>
 80159fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a02:	18db      	adds	r3, r3, r3
 8015a04:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015a08:	4152      	adcs	r2, r2
 8015a0a:	4598      	cmp	r8, r3
 8015a0c:	e7cf      	b.n	80159ae <__ieee754_pow+0x26>
 8015a0e:	f1b8 0f00 	cmp.w	r8, #0
 8015a12:	46ab      	mov	fp, r5
 8015a14:	da43      	bge.n	8015a9e <__ieee754_pow+0x116>
 8015a16:	4a82      	ldr	r2, [pc, #520]	@ (8015c20 <__ieee754_pow+0x298>)
 8015a18:	4592      	cmp	sl, r2
 8015a1a:	d856      	bhi.n	8015aca <__ieee754_pow+0x142>
 8015a1c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015a20:	4592      	cmp	sl, r2
 8015a22:	f240 84c5 	bls.w	80163b0 <__ieee754_pow+0xa28>
 8015a26:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015a2a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015a2e:	2a14      	cmp	r2, #20
 8015a30:	dd18      	ble.n	8015a64 <__ieee754_pow+0xdc>
 8015a32:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015a36:	fa21 f402 	lsr.w	r4, r1, r2
 8015a3a:	fa04 f202 	lsl.w	r2, r4, r2
 8015a3e:	428a      	cmp	r2, r1
 8015a40:	f040 84b6 	bne.w	80163b0 <__ieee754_pow+0xa28>
 8015a44:	f004 0401 	and.w	r4, r4, #1
 8015a48:	f1c4 0402 	rsb	r4, r4, #2
 8015a4c:	2900      	cmp	r1, #0
 8015a4e:	d159      	bne.n	8015b04 <__ieee754_pow+0x17c>
 8015a50:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015a54:	d148      	bne.n	8015ae8 <__ieee754_pow+0x160>
 8015a56:	4632      	mov	r2, r6
 8015a58:	463b      	mov	r3, r7
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	4639      	mov	r1, r7
 8015a5e:	f7ea fde3 	bl	8000628 <__aeabi_dmul>
 8015a62:	e7ae      	b.n	80159c2 <__ieee754_pow+0x3a>
 8015a64:	2900      	cmp	r1, #0
 8015a66:	d14c      	bne.n	8015b02 <__ieee754_pow+0x17a>
 8015a68:	f1c2 0214 	rsb	r2, r2, #20
 8015a6c:	fa4a f402 	asr.w	r4, sl, r2
 8015a70:	fa04 f202 	lsl.w	r2, r4, r2
 8015a74:	4552      	cmp	r2, sl
 8015a76:	f040 8498 	bne.w	80163aa <__ieee754_pow+0xa22>
 8015a7a:	f004 0401 	and.w	r4, r4, #1
 8015a7e:	f1c4 0402 	rsb	r4, r4, #2
 8015a82:	4a68      	ldr	r2, [pc, #416]	@ (8015c24 <__ieee754_pow+0x29c>)
 8015a84:	4592      	cmp	sl, r2
 8015a86:	d1e3      	bne.n	8015a50 <__ieee754_pow+0xc8>
 8015a88:	f1b9 0f00 	cmp.w	r9, #0
 8015a8c:	f280 8489 	bge.w	80163a2 <__ieee754_pow+0xa1a>
 8015a90:	4964      	ldr	r1, [pc, #400]	@ (8015c24 <__ieee754_pow+0x29c>)
 8015a92:	4632      	mov	r2, r6
 8015a94:	463b      	mov	r3, r7
 8015a96:	2000      	movs	r0, #0
 8015a98:	f7ea fef0 	bl	800087c <__aeabi_ddiv>
 8015a9c:	e791      	b.n	80159c2 <__ieee754_pow+0x3a>
 8015a9e:	2400      	movs	r4, #0
 8015aa0:	bb81      	cbnz	r1, 8015b04 <__ieee754_pow+0x17c>
 8015aa2:	4a5e      	ldr	r2, [pc, #376]	@ (8015c1c <__ieee754_pow+0x294>)
 8015aa4:	4592      	cmp	sl, r2
 8015aa6:	d1ec      	bne.n	8015a82 <__ieee754_pow+0xfa>
 8015aa8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8015aac:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015ab0:	431a      	orrs	r2, r3
 8015ab2:	f000 846e 	beq.w	8016392 <__ieee754_pow+0xa0a>
 8015ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8015c28 <__ieee754_pow+0x2a0>)
 8015ab8:	429d      	cmp	r5, r3
 8015aba:	d908      	bls.n	8015ace <__ieee754_pow+0x146>
 8015abc:	f1b9 0f00 	cmp.w	r9, #0
 8015ac0:	f280 846b 	bge.w	801639a <__ieee754_pow+0xa12>
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	2100      	movs	r1, #0
 8015ac8:	e77b      	b.n	80159c2 <__ieee754_pow+0x3a>
 8015aca:	2402      	movs	r4, #2
 8015acc:	e7e8      	b.n	8015aa0 <__ieee754_pow+0x118>
 8015ace:	f1b9 0f00 	cmp.w	r9, #0
 8015ad2:	f04f 0000 	mov.w	r0, #0
 8015ad6:	f04f 0100 	mov.w	r1, #0
 8015ada:	f6bf af72 	bge.w	80159c2 <__ieee754_pow+0x3a>
 8015ade:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015ae2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015ae6:	e76c      	b.n	80159c2 <__ieee754_pow+0x3a>
 8015ae8:	4a50      	ldr	r2, [pc, #320]	@ (8015c2c <__ieee754_pow+0x2a4>)
 8015aea:	4591      	cmp	r9, r2
 8015aec:	d10a      	bne.n	8015b04 <__ieee754_pow+0x17c>
 8015aee:	f1b8 0f00 	cmp.w	r8, #0
 8015af2:	db07      	blt.n	8015b04 <__ieee754_pow+0x17c>
 8015af4:	ec47 6b10 	vmov	d0, r6, r7
 8015af8:	b011      	add	sp, #68	@ 0x44
 8015afa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afe:	f000 bd4f 	b.w	80165a0 <__ieee754_sqrt>
 8015b02:	2400      	movs	r4, #0
 8015b04:	ec47 6b10 	vmov	d0, r6, r7
 8015b08:	9302      	str	r3, [sp, #8]
 8015b0a:	f000 fc87 	bl	801641c <fabs>
 8015b0e:	9b02      	ldr	r3, [sp, #8]
 8015b10:	ec51 0b10 	vmov	r0, r1, d0
 8015b14:	bb43      	cbnz	r3, 8015b68 <__ieee754_pow+0x1e0>
 8015b16:	4b43      	ldr	r3, [pc, #268]	@ (8015c24 <__ieee754_pow+0x29c>)
 8015b18:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d000      	beq.n	8015b22 <__ieee754_pow+0x19a>
 8015b20:	bb15      	cbnz	r5, 8015b68 <__ieee754_pow+0x1e0>
 8015b22:	f1b9 0f00 	cmp.w	r9, #0
 8015b26:	da05      	bge.n	8015b34 <__ieee754_pow+0x1ac>
 8015b28:	4602      	mov	r2, r0
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	493d      	ldr	r1, [pc, #244]	@ (8015c24 <__ieee754_pow+0x29c>)
 8015b30:	f7ea fea4 	bl	800087c <__aeabi_ddiv>
 8015b34:	f1b8 0f00 	cmp.w	r8, #0
 8015b38:	f6bf af43 	bge.w	80159c2 <__ieee754_pow+0x3a>
 8015b3c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015b40:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015b44:	4325      	orrs	r5, r4
 8015b46:	d108      	bne.n	8015b5a <__ieee754_pow+0x1d2>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	4610      	mov	r0, r2
 8015b4e:	4619      	mov	r1, r3
 8015b50:	f7ea fbb2 	bl	80002b8 <__aeabi_dsub>
 8015b54:	4602      	mov	r2, r0
 8015b56:	460b      	mov	r3, r1
 8015b58:	e79e      	b.n	8015a98 <__ieee754_pow+0x110>
 8015b5a:	2c01      	cmp	r4, #1
 8015b5c:	f47f af31 	bne.w	80159c2 <__ieee754_pow+0x3a>
 8015b60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015b64:	4619      	mov	r1, r3
 8015b66:	e72c      	b.n	80159c2 <__ieee754_pow+0x3a>
 8015b68:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8015b6c:	3b01      	subs	r3, #1
 8015b6e:	ea53 0204 	orrs.w	r2, r3, r4
 8015b72:	d102      	bne.n	8015b7a <__ieee754_pow+0x1f2>
 8015b74:	4632      	mov	r2, r6
 8015b76:	463b      	mov	r3, r7
 8015b78:	e7e8      	b.n	8015b4c <__ieee754_pow+0x1c4>
 8015b7a:	3c01      	subs	r4, #1
 8015b7c:	431c      	orrs	r4, r3
 8015b7e:	d016      	beq.n	8015bae <__ieee754_pow+0x226>
 8015b80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015c08 <__ieee754_pow+0x280>
 8015b84:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015b88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015b8c:	f240 8110 	bls.w	8015db0 <__ieee754_pow+0x428>
 8015b90:	4b27      	ldr	r3, [pc, #156]	@ (8015c30 <__ieee754_pow+0x2a8>)
 8015b92:	459a      	cmp	sl, r3
 8015b94:	4b24      	ldr	r3, [pc, #144]	@ (8015c28 <__ieee754_pow+0x2a0>)
 8015b96:	d916      	bls.n	8015bc6 <__ieee754_pow+0x23e>
 8015b98:	429d      	cmp	r5, r3
 8015b9a:	d80b      	bhi.n	8015bb4 <__ieee754_pow+0x22c>
 8015b9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ba0:	da0b      	bge.n	8015bba <__ieee754_pow+0x232>
 8015ba2:	2000      	movs	r0, #0
 8015ba4:	b011      	add	sp, #68	@ 0x44
 8015ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015baa:	f000 bcf1 	b.w	8016590 <__math_oflow>
 8015bae:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8015c10 <__ieee754_pow+0x288>
 8015bb2:	e7e7      	b.n	8015b84 <__ieee754_pow+0x1fc>
 8015bb4:	f1b9 0f00 	cmp.w	r9, #0
 8015bb8:	dcf3      	bgt.n	8015ba2 <__ieee754_pow+0x21a>
 8015bba:	2000      	movs	r0, #0
 8015bbc:	b011      	add	sp, #68	@ 0x44
 8015bbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc2:	f000 bcdd 	b.w	8016580 <__math_uflow>
 8015bc6:	429d      	cmp	r5, r3
 8015bc8:	d20c      	bcs.n	8015be4 <__ieee754_pow+0x25c>
 8015bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f7ea ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8015bd6:	3800      	subs	r0, #0
 8015bd8:	bf18      	it	ne
 8015bda:	2001      	movne	r0, #1
 8015bdc:	f1b9 0f00 	cmp.w	r9, #0
 8015be0:	daec      	bge.n	8015bbc <__ieee754_pow+0x234>
 8015be2:	e7df      	b.n	8015ba4 <__ieee754_pow+0x21c>
 8015be4:	4b0f      	ldr	r3, [pc, #60]	@ (8015c24 <__ieee754_pow+0x29c>)
 8015be6:	429d      	cmp	r5, r3
 8015be8:	f04f 0200 	mov.w	r2, #0
 8015bec:	d922      	bls.n	8015c34 <__ieee754_pow+0x2ac>
 8015bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	f7ea ff8a 	bl	8000b0c <__aeabi_dcmplt>
 8015bf8:	3800      	subs	r0, #0
 8015bfa:	bf18      	it	ne
 8015bfc:	2001      	movne	r0, #1
 8015bfe:	f1b9 0f00 	cmp.w	r9, #0
 8015c02:	dccf      	bgt.n	8015ba4 <__ieee754_pow+0x21c>
 8015c04:	e7da      	b.n	8015bbc <__ieee754_pow+0x234>
 8015c06:	bf00      	nop
 8015c08:	00000000 	.word	0x00000000
 8015c0c:	3ff00000 	.word	0x3ff00000
 8015c10:	00000000 	.word	0x00000000
 8015c14:	bff00000 	.word	0xbff00000
 8015c18:	fff00000 	.word	0xfff00000
 8015c1c:	7ff00000 	.word	0x7ff00000
 8015c20:	433fffff 	.word	0x433fffff
 8015c24:	3ff00000 	.word	0x3ff00000
 8015c28:	3fefffff 	.word	0x3fefffff
 8015c2c:	3fe00000 	.word	0x3fe00000
 8015c30:	43f00000 	.word	0x43f00000
 8015c34:	4b5a      	ldr	r3, [pc, #360]	@ (8015da0 <__ieee754_pow+0x418>)
 8015c36:	f7ea fb3f 	bl	80002b8 <__aeabi_dsub>
 8015c3a:	a351      	add	r3, pc, #324	@ (adr r3, 8015d80 <__ieee754_pow+0x3f8>)
 8015c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c40:	4604      	mov	r4, r0
 8015c42:	460d      	mov	r5, r1
 8015c44:	f7ea fcf0 	bl	8000628 <__aeabi_dmul>
 8015c48:	a34f      	add	r3, pc, #316	@ (adr r3, 8015d88 <__ieee754_pow+0x400>)
 8015c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c4e:	4606      	mov	r6, r0
 8015c50:	460f      	mov	r7, r1
 8015c52:	4620      	mov	r0, r4
 8015c54:	4629      	mov	r1, r5
 8015c56:	f7ea fce7 	bl	8000628 <__aeabi_dmul>
 8015c5a:	4b52      	ldr	r3, [pc, #328]	@ (8015da4 <__ieee754_pow+0x41c>)
 8015c5c:	4682      	mov	sl, r0
 8015c5e:	468b      	mov	fp, r1
 8015c60:	2200      	movs	r2, #0
 8015c62:	4620      	mov	r0, r4
 8015c64:	4629      	mov	r1, r5
 8015c66:	f7ea fcdf 	bl	8000628 <__aeabi_dmul>
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	a148      	add	r1, pc, #288	@ (adr r1, 8015d90 <__ieee754_pow+0x408>)
 8015c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c74:	f7ea fb20 	bl	80002b8 <__aeabi_dsub>
 8015c78:	4622      	mov	r2, r4
 8015c7a:	462b      	mov	r3, r5
 8015c7c:	f7ea fcd4 	bl	8000628 <__aeabi_dmul>
 8015c80:	4602      	mov	r2, r0
 8015c82:	460b      	mov	r3, r1
 8015c84:	2000      	movs	r0, #0
 8015c86:	4948      	ldr	r1, [pc, #288]	@ (8015da8 <__ieee754_pow+0x420>)
 8015c88:	f7ea fb16 	bl	80002b8 <__aeabi_dsub>
 8015c8c:	4622      	mov	r2, r4
 8015c8e:	4680      	mov	r8, r0
 8015c90:	4689      	mov	r9, r1
 8015c92:	462b      	mov	r3, r5
 8015c94:	4620      	mov	r0, r4
 8015c96:	4629      	mov	r1, r5
 8015c98:	f7ea fcc6 	bl	8000628 <__aeabi_dmul>
 8015c9c:	4602      	mov	r2, r0
 8015c9e:	460b      	mov	r3, r1
 8015ca0:	4640      	mov	r0, r8
 8015ca2:	4649      	mov	r1, r9
 8015ca4:	f7ea fcc0 	bl	8000628 <__aeabi_dmul>
 8015ca8:	a33b      	add	r3, pc, #236	@ (adr r3, 8015d98 <__ieee754_pow+0x410>)
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	f7ea fcbb 	bl	8000628 <__aeabi_dmul>
 8015cb2:	4602      	mov	r2, r0
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	4650      	mov	r0, sl
 8015cb8:	4659      	mov	r1, fp
 8015cba:	f7ea fafd 	bl	80002b8 <__aeabi_dsub>
 8015cbe:	4602      	mov	r2, r0
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	4680      	mov	r8, r0
 8015cc4:	4689      	mov	r9, r1
 8015cc6:	4630      	mov	r0, r6
 8015cc8:	4639      	mov	r1, r7
 8015cca:	f7ea faf7 	bl	80002bc <__adddf3>
 8015cce:	2400      	movs	r4, #0
 8015cd0:	4632      	mov	r2, r6
 8015cd2:	463b      	mov	r3, r7
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	460d      	mov	r5, r1
 8015cd8:	f7ea faee 	bl	80002b8 <__aeabi_dsub>
 8015cdc:	4602      	mov	r2, r0
 8015cde:	460b      	mov	r3, r1
 8015ce0:	4640      	mov	r0, r8
 8015ce2:	4649      	mov	r1, r9
 8015ce4:	f7ea fae8 	bl	80002b8 <__aeabi_dsub>
 8015ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	9304      	str	r3, [sp, #16]
 8015cf4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015cf8:	4606      	mov	r6, r0
 8015cfa:	460f      	mov	r7, r1
 8015cfc:	465b      	mov	r3, fp
 8015cfe:	4652      	mov	r2, sl
 8015d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d04:	f7ea fad8 	bl	80002b8 <__aeabi_dsub>
 8015d08:	4622      	mov	r2, r4
 8015d0a:	462b      	mov	r3, r5
 8015d0c:	f7ea fc8c 	bl	8000628 <__aeabi_dmul>
 8015d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d14:	4680      	mov	r8, r0
 8015d16:	4689      	mov	r9, r1
 8015d18:	4630      	mov	r0, r6
 8015d1a:	4639      	mov	r1, r7
 8015d1c:	f7ea fc84 	bl	8000628 <__aeabi_dmul>
 8015d20:	4602      	mov	r2, r0
 8015d22:	460b      	mov	r3, r1
 8015d24:	4640      	mov	r0, r8
 8015d26:	4649      	mov	r1, r9
 8015d28:	f7ea fac8 	bl	80002bc <__adddf3>
 8015d2c:	465b      	mov	r3, fp
 8015d2e:	4606      	mov	r6, r0
 8015d30:	460f      	mov	r7, r1
 8015d32:	4652      	mov	r2, sl
 8015d34:	4620      	mov	r0, r4
 8015d36:	4629      	mov	r1, r5
 8015d38:	f7ea fc76 	bl	8000628 <__aeabi_dmul>
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	4602      	mov	r2, r0
 8015d40:	4680      	mov	r8, r0
 8015d42:	4689      	mov	r9, r1
 8015d44:	4630      	mov	r0, r6
 8015d46:	4639      	mov	r1, r7
 8015d48:	f7ea fab8 	bl	80002bc <__adddf3>
 8015d4c:	4b17      	ldr	r3, [pc, #92]	@ (8015dac <__ieee754_pow+0x424>)
 8015d4e:	4299      	cmp	r1, r3
 8015d50:	4604      	mov	r4, r0
 8015d52:	460d      	mov	r5, r1
 8015d54:	468b      	mov	fp, r1
 8015d56:	f340 820b 	ble.w	8016170 <__ieee754_pow+0x7e8>
 8015d5a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8015d5e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8015d62:	4303      	orrs	r3, r0
 8015d64:	f000 81ea 	beq.w	801613c <__ieee754_pow+0x7b4>
 8015d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	2300      	movs	r3, #0
 8015d70:	f7ea fecc 	bl	8000b0c <__aeabi_dcmplt>
 8015d74:	3800      	subs	r0, #0
 8015d76:	bf18      	it	ne
 8015d78:	2001      	movne	r0, #1
 8015d7a:	e713      	b.n	8015ba4 <__ieee754_pow+0x21c>
 8015d7c:	f3af 8000 	nop.w
 8015d80:	60000000 	.word	0x60000000
 8015d84:	3ff71547 	.word	0x3ff71547
 8015d88:	f85ddf44 	.word	0xf85ddf44
 8015d8c:	3e54ae0b 	.word	0x3e54ae0b
 8015d90:	55555555 	.word	0x55555555
 8015d94:	3fd55555 	.word	0x3fd55555
 8015d98:	652b82fe 	.word	0x652b82fe
 8015d9c:	3ff71547 	.word	0x3ff71547
 8015da0:	3ff00000 	.word	0x3ff00000
 8015da4:	3fd00000 	.word	0x3fd00000
 8015da8:	3fe00000 	.word	0x3fe00000
 8015dac:	408fffff 	.word	0x408fffff
 8015db0:	4bd5      	ldr	r3, [pc, #852]	@ (8016108 <__ieee754_pow+0x780>)
 8015db2:	ea08 0303 	and.w	r3, r8, r3
 8015db6:	2200      	movs	r2, #0
 8015db8:	b92b      	cbnz	r3, 8015dc6 <__ieee754_pow+0x43e>
 8015dba:	4bd4      	ldr	r3, [pc, #848]	@ (801610c <__ieee754_pow+0x784>)
 8015dbc:	f7ea fc34 	bl	8000628 <__aeabi_dmul>
 8015dc0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8015dc4:	468b      	mov	fp, r1
 8015dc6:	ea4f 532b 	mov.w	r3, fp, asr #20
 8015dca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015dce:	4413      	add	r3, r2
 8015dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8015dd2:	4bcf      	ldr	r3, [pc, #828]	@ (8016110 <__ieee754_pow+0x788>)
 8015dd4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8015dd8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8015ddc:	459b      	cmp	fp, r3
 8015dde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015de2:	dd08      	ble.n	8015df6 <__ieee754_pow+0x46e>
 8015de4:	4bcb      	ldr	r3, [pc, #812]	@ (8016114 <__ieee754_pow+0x78c>)
 8015de6:	459b      	cmp	fp, r3
 8015de8:	f340 81a5 	ble.w	8016136 <__ieee754_pow+0x7ae>
 8015dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015dee:	3301      	adds	r3, #1
 8015df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8015df2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8015df6:	f04f 0a00 	mov.w	sl, #0
 8015dfa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015dfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e00:	4bc5      	ldr	r3, [pc, #788]	@ (8016118 <__ieee754_pow+0x790>)
 8015e02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015e06:	ed93 7b00 	vldr	d7, [r3]
 8015e0a:	4629      	mov	r1, r5
 8015e0c:	ec53 2b17 	vmov	r2, r3, d7
 8015e10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e18:	f7ea fa4e 	bl	80002b8 <__aeabi_dsub>
 8015e1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e20:	4606      	mov	r6, r0
 8015e22:	460f      	mov	r7, r1
 8015e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e28:	f7ea fa48 	bl	80002bc <__adddf3>
 8015e2c:	4602      	mov	r2, r0
 8015e2e:	460b      	mov	r3, r1
 8015e30:	2000      	movs	r0, #0
 8015e32:	49ba      	ldr	r1, [pc, #744]	@ (801611c <__ieee754_pow+0x794>)
 8015e34:	f7ea fd22 	bl	800087c <__aeabi_ddiv>
 8015e38:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	460b      	mov	r3, r1
 8015e40:	4630      	mov	r0, r6
 8015e42:	4639      	mov	r1, r7
 8015e44:	f7ea fbf0 	bl	8000628 <__aeabi_dmul>
 8015e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e4c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8015e50:	106d      	asrs	r5, r5, #1
 8015e52:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8015e56:	f04f 0b00 	mov.w	fp, #0
 8015e5a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8015e5e:	4661      	mov	r1, ip
 8015e60:	2200      	movs	r2, #0
 8015e62:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015e66:	4658      	mov	r0, fp
 8015e68:	46e1      	mov	r9, ip
 8015e6a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8015e6e:	4614      	mov	r4, r2
 8015e70:	461d      	mov	r5, r3
 8015e72:	f7ea fbd9 	bl	8000628 <__aeabi_dmul>
 8015e76:	4602      	mov	r2, r0
 8015e78:	460b      	mov	r3, r1
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	4639      	mov	r1, r7
 8015e7e:	f7ea fa1b 	bl	80002b8 <__aeabi_dsub>
 8015e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015e86:	4606      	mov	r6, r0
 8015e88:	460f      	mov	r7, r1
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	f7ea fa13 	bl	80002b8 <__aeabi_dsub>
 8015e92:	4602      	mov	r2, r0
 8015e94:	460b      	mov	r3, r1
 8015e96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015e9a:	f7ea fa0d 	bl	80002b8 <__aeabi_dsub>
 8015e9e:	465a      	mov	r2, fp
 8015ea0:	464b      	mov	r3, r9
 8015ea2:	f7ea fbc1 	bl	8000628 <__aeabi_dmul>
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	4630      	mov	r0, r6
 8015eac:	4639      	mov	r1, r7
 8015eae:	f7ea fa03 	bl	80002b8 <__aeabi_dsub>
 8015eb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015eb6:	f7ea fbb7 	bl	8000628 <__aeabi_dmul>
 8015eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015ec2:	4610      	mov	r0, r2
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	f7ea fbaf 	bl	8000628 <__aeabi_dmul>
 8015eca:	a37d      	add	r3, pc, #500	@ (adr r3, 80160c0 <__ieee754_pow+0x738>)
 8015ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	460d      	mov	r5, r1
 8015ed4:	f7ea fba8 	bl	8000628 <__aeabi_dmul>
 8015ed8:	a37b      	add	r3, pc, #492	@ (adr r3, 80160c8 <__ieee754_pow+0x740>)
 8015eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ede:	f7ea f9ed 	bl	80002bc <__adddf3>
 8015ee2:	4622      	mov	r2, r4
 8015ee4:	462b      	mov	r3, r5
 8015ee6:	f7ea fb9f 	bl	8000628 <__aeabi_dmul>
 8015eea:	a379      	add	r3, pc, #484	@ (adr r3, 80160d0 <__ieee754_pow+0x748>)
 8015eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ef0:	f7ea f9e4 	bl	80002bc <__adddf3>
 8015ef4:	4622      	mov	r2, r4
 8015ef6:	462b      	mov	r3, r5
 8015ef8:	f7ea fb96 	bl	8000628 <__aeabi_dmul>
 8015efc:	a376      	add	r3, pc, #472	@ (adr r3, 80160d8 <__ieee754_pow+0x750>)
 8015efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f02:	f7ea f9db 	bl	80002bc <__adddf3>
 8015f06:	4622      	mov	r2, r4
 8015f08:	462b      	mov	r3, r5
 8015f0a:	f7ea fb8d 	bl	8000628 <__aeabi_dmul>
 8015f0e:	a374      	add	r3, pc, #464	@ (adr r3, 80160e0 <__ieee754_pow+0x758>)
 8015f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f14:	f7ea f9d2 	bl	80002bc <__adddf3>
 8015f18:	4622      	mov	r2, r4
 8015f1a:	462b      	mov	r3, r5
 8015f1c:	f7ea fb84 	bl	8000628 <__aeabi_dmul>
 8015f20:	a371      	add	r3, pc, #452	@ (adr r3, 80160e8 <__ieee754_pow+0x760>)
 8015f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f26:	f7ea f9c9 	bl	80002bc <__adddf3>
 8015f2a:	4622      	mov	r2, r4
 8015f2c:	4606      	mov	r6, r0
 8015f2e:	460f      	mov	r7, r1
 8015f30:	462b      	mov	r3, r5
 8015f32:	4620      	mov	r0, r4
 8015f34:	4629      	mov	r1, r5
 8015f36:	f7ea fb77 	bl	8000628 <__aeabi_dmul>
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	460b      	mov	r3, r1
 8015f3e:	4630      	mov	r0, r6
 8015f40:	4639      	mov	r1, r7
 8015f42:	f7ea fb71 	bl	8000628 <__aeabi_dmul>
 8015f46:	465a      	mov	r2, fp
 8015f48:	4604      	mov	r4, r0
 8015f4a:	460d      	mov	r5, r1
 8015f4c:	464b      	mov	r3, r9
 8015f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f52:	f7ea f9b3 	bl	80002bc <__adddf3>
 8015f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015f5a:	f7ea fb65 	bl	8000628 <__aeabi_dmul>
 8015f5e:	4622      	mov	r2, r4
 8015f60:	462b      	mov	r3, r5
 8015f62:	f7ea f9ab 	bl	80002bc <__adddf3>
 8015f66:	465a      	mov	r2, fp
 8015f68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015f6c:	464b      	mov	r3, r9
 8015f6e:	4658      	mov	r0, fp
 8015f70:	4649      	mov	r1, r9
 8015f72:	f7ea fb59 	bl	8000628 <__aeabi_dmul>
 8015f76:	4b6a      	ldr	r3, [pc, #424]	@ (8016120 <__ieee754_pow+0x798>)
 8015f78:	2200      	movs	r2, #0
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	f7ea f99d 	bl	80002bc <__adddf3>
 8015f82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f86:	f7ea f999 	bl	80002bc <__adddf3>
 8015f8a:	46d8      	mov	r8, fp
 8015f8c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8015f90:	460d      	mov	r5, r1
 8015f92:	465a      	mov	r2, fp
 8015f94:	460b      	mov	r3, r1
 8015f96:	4640      	mov	r0, r8
 8015f98:	4649      	mov	r1, r9
 8015f9a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8015f9e:	f7ea fb43 	bl	8000628 <__aeabi_dmul>
 8015fa2:	465c      	mov	r4, fp
 8015fa4:	4680      	mov	r8, r0
 8015fa6:	4689      	mov	r9, r1
 8015fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8016120 <__ieee754_pow+0x798>)
 8015faa:	2200      	movs	r2, #0
 8015fac:	4620      	mov	r0, r4
 8015fae:	4629      	mov	r1, r5
 8015fb0:	f7ea f982 	bl	80002b8 <__aeabi_dsub>
 8015fb4:	4632      	mov	r2, r6
 8015fb6:	463b      	mov	r3, r7
 8015fb8:	f7ea f97e 	bl	80002b8 <__aeabi_dsub>
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	460b      	mov	r3, r1
 8015fc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015fc4:	f7ea f978 	bl	80002b8 <__aeabi_dsub>
 8015fc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fcc:	f7ea fb2c 	bl	8000628 <__aeabi_dmul>
 8015fd0:	4622      	mov	r2, r4
 8015fd2:	4606      	mov	r6, r0
 8015fd4:	460f      	mov	r7, r1
 8015fd6:	462b      	mov	r3, r5
 8015fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015fdc:	f7ea fb24 	bl	8000628 <__aeabi_dmul>
 8015fe0:	4602      	mov	r2, r0
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	4630      	mov	r0, r6
 8015fe6:	4639      	mov	r1, r7
 8015fe8:	f7ea f968 	bl	80002bc <__adddf3>
 8015fec:	4606      	mov	r6, r0
 8015fee:	460f      	mov	r7, r1
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	460b      	mov	r3, r1
 8015ff4:	4640      	mov	r0, r8
 8015ff6:	4649      	mov	r1, r9
 8015ff8:	f7ea f960 	bl	80002bc <__adddf3>
 8015ffc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016000:	a33b      	add	r3, pc, #236	@ (adr r3, 80160f0 <__ieee754_pow+0x768>)
 8016002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016006:	4658      	mov	r0, fp
 8016008:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801600c:	460d      	mov	r5, r1
 801600e:	f7ea fb0b 	bl	8000628 <__aeabi_dmul>
 8016012:	465c      	mov	r4, fp
 8016014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016018:	4642      	mov	r2, r8
 801601a:	464b      	mov	r3, r9
 801601c:	4620      	mov	r0, r4
 801601e:	4629      	mov	r1, r5
 8016020:	f7ea f94a 	bl	80002b8 <__aeabi_dsub>
 8016024:	4602      	mov	r2, r0
 8016026:	460b      	mov	r3, r1
 8016028:	4630      	mov	r0, r6
 801602a:	4639      	mov	r1, r7
 801602c:	f7ea f944 	bl	80002b8 <__aeabi_dsub>
 8016030:	a331      	add	r3, pc, #196	@ (adr r3, 80160f8 <__ieee754_pow+0x770>)
 8016032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016036:	f7ea faf7 	bl	8000628 <__aeabi_dmul>
 801603a:	a331      	add	r3, pc, #196	@ (adr r3, 8016100 <__ieee754_pow+0x778>)
 801603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016040:	4606      	mov	r6, r0
 8016042:	460f      	mov	r7, r1
 8016044:	4620      	mov	r0, r4
 8016046:	4629      	mov	r1, r5
 8016048:	f7ea faee 	bl	8000628 <__aeabi_dmul>
 801604c:	4602      	mov	r2, r0
 801604e:	460b      	mov	r3, r1
 8016050:	4630      	mov	r0, r6
 8016052:	4639      	mov	r1, r7
 8016054:	f7ea f932 	bl	80002bc <__adddf3>
 8016058:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801605a:	4b32      	ldr	r3, [pc, #200]	@ (8016124 <__ieee754_pow+0x79c>)
 801605c:	4413      	add	r3, r2
 801605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016062:	f7ea f92b 	bl	80002bc <__adddf3>
 8016066:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801606a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801606c:	f7ea fa72 	bl	8000554 <__aeabi_i2d>
 8016070:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016072:	4b2d      	ldr	r3, [pc, #180]	@ (8016128 <__ieee754_pow+0x7a0>)
 8016074:	4413      	add	r3, r2
 8016076:	e9d3 8900 	ldrd	r8, r9, [r3]
 801607a:	4606      	mov	r6, r0
 801607c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016080:	460f      	mov	r7, r1
 8016082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016086:	f7ea f919 	bl	80002bc <__adddf3>
 801608a:	4642      	mov	r2, r8
 801608c:	464b      	mov	r3, r9
 801608e:	f7ea f915 	bl	80002bc <__adddf3>
 8016092:	4632      	mov	r2, r6
 8016094:	463b      	mov	r3, r7
 8016096:	f7ea f911 	bl	80002bc <__adddf3>
 801609a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801609e:	4632      	mov	r2, r6
 80160a0:	463b      	mov	r3, r7
 80160a2:	4658      	mov	r0, fp
 80160a4:	460d      	mov	r5, r1
 80160a6:	f7ea f907 	bl	80002b8 <__aeabi_dsub>
 80160aa:	4642      	mov	r2, r8
 80160ac:	464b      	mov	r3, r9
 80160ae:	f7ea f903 	bl	80002b8 <__aeabi_dsub>
 80160b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160b6:	f7ea f8ff 	bl	80002b8 <__aeabi_dsub>
 80160ba:	465c      	mov	r4, fp
 80160bc:	e036      	b.n	801612c <__ieee754_pow+0x7a4>
 80160be:	bf00      	nop
 80160c0:	4a454eef 	.word	0x4a454eef
 80160c4:	3fca7e28 	.word	0x3fca7e28
 80160c8:	93c9db65 	.word	0x93c9db65
 80160cc:	3fcd864a 	.word	0x3fcd864a
 80160d0:	a91d4101 	.word	0xa91d4101
 80160d4:	3fd17460 	.word	0x3fd17460
 80160d8:	518f264d 	.word	0x518f264d
 80160dc:	3fd55555 	.word	0x3fd55555
 80160e0:	db6fabff 	.word	0xdb6fabff
 80160e4:	3fdb6db6 	.word	0x3fdb6db6
 80160e8:	33333303 	.word	0x33333303
 80160ec:	3fe33333 	.word	0x3fe33333
 80160f0:	e0000000 	.word	0xe0000000
 80160f4:	3feec709 	.word	0x3feec709
 80160f8:	dc3a03fd 	.word	0xdc3a03fd
 80160fc:	3feec709 	.word	0x3feec709
 8016100:	145b01f5 	.word	0x145b01f5
 8016104:	be3e2fe0 	.word	0xbe3e2fe0
 8016108:	7ff00000 	.word	0x7ff00000
 801610c:	43400000 	.word	0x43400000
 8016110:	0003988e 	.word	0x0003988e
 8016114:	000bb679 	.word	0x000bb679
 8016118:	080175b0 	.word	0x080175b0
 801611c:	3ff00000 	.word	0x3ff00000
 8016120:	40080000 	.word	0x40080000
 8016124:	08017590 	.word	0x08017590
 8016128:	080175a0 	.word	0x080175a0
 801612c:	4602      	mov	r2, r0
 801612e:	460b      	mov	r3, r1
 8016130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016134:	e5d6      	b.n	8015ce4 <__ieee754_pow+0x35c>
 8016136:	f04f 0a01 	mov.w	sl, #1
 801613a:	e65e      	b.n	8015dfa <__ieee754_pow+0x472>
 801613c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8016414 <__ieee754_pow+0xa8c>)
 801613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016142:	4630      	mov	r0, r6
 8016144:	4639      	mov	r1, r7
 8016146:	f7ea f8b9 	bl	80002bc <__adddf3>
 801614a:	4642      	mov	r2, r8
 801614c:	e9cd 0100 	strd	r0, r1, [sp]
 8016150:	464b      	mov	r3, r9
 8016152:	4620      	mov	r0, r4
 8016154:	4629      	mov	r1, r5
 8016156:	f7ea f8af 	bl	80002b8 <__aeabi_dsub>
 801615a:	4602      	mov	r2, r0
 801615c:	460b      	mov	r3, r1
 801615e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016162:	f7ea fcf1 	bl	8000b48 <__aeabi_dcmpgt>
 8016166:	2800      	cmp	r0, #0
 8016168:	f47f adfe 	bne.w	8015d68 <__ieee754_pow+0x3e0>
 801616c:	4ba2      	ldr	r3, [pc, #648]	@ (80163f8 <__ieee754_pow+0xa70>)
 801616e:	e022      	b.n	80161b6 <__ieee754_pow+0x82e>
 8016170:	4ca2      	ldr	r4, [pc, #648]	@ (80163fc <__ieee754_pow+0xa74>)
 8016172:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016176:	42a3      	cmp	r3, r4
 8016178:	d919      	bls.n	80161ae <__ieee754_pow+0x826>
 801617a:	4ba1      	ldr	r3, [pc, #644]	@ (8016400 <__ieee754_pow+0xa78>)
 801617c:	440b      	add	r3, r1
 801617e:	4303      	orrs	r3, r0
 8016180:	d009      	beq.n	8016196 <__ieee754_pow+0x80e>
 8016182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016186:	2200      	movs	r2, #0
 8016188:	2300      	movs	r3, #0
 801618a:	f7ea fcbf 	bl	8000b0c <__aeabi_dcmplt>
 801618e:	3800      	subs	r0, #0
 8016190:	bf18      	it	ne
 8016192:	2001      	movne	r0, #1
 8016194:	e512      	b.n	8015bbc <__ieee754_pow+0x234>
 8016196:	4642      	mov	r2, r8
 8016198:	464b      	mov	r3, r9
 801619a:	f7ea f88d 	bl	80002b8 <__aeabi_dsub>
 801619e:	4632      	mov	r2, r6
 80161a0:	463b      	mov	r3, r7
 80161a2:	f7ea fcc7 	bl	8000b34 <__aeabi_dcmpge>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d1eb      	bne.n	8016182 <__ieee754_pow+0x7fa>
 80161aa:	4b96      	ldr	r3, [pc, #600]	@ (8016404 <__ieee754_pow+0xa7c>)
 80161ac:	e003      	b.n	80161b6 <__ieee754_pow+0x82e>
 80161ae:	4a96      	ldr	r2, [pc, #600]	@ (8016408 <__ieee754_pow+0xa80>)
 80161b0:	4293      	cmp	r3, r2
 80161b2:	f240 80e7 	bls.w	8016384 <__ieee754_pow+0x9fc>
 80161b6:	151b      	asrs	r3, r3, #20
 80161b8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80161bc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80161c0:	fa4a fa03 	asr.w	sl, sl, r3
 80161c4:	44da      	add	sl, fp
 80161c6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80161ca:	4890      	ldr	r0, [pc, #576]	@ (801640c <__ieee754_pow+0xa84>)
 80161cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80161d0:	4108      	asrs	r0, r1
 80161d2:	ea00 030a 	and.w	r3, r0, sl
 80161d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80161da:	f1c1 0114 	rsb	r1, r1, #20
 80161de:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80161e2:	fa4a fa01 	asr.w	sl, sl, r1
 80161e6:	f1bb 0f00 	cmp.w	fp, #0
 80161ea:	4640      	mov	r0, r8
 80161ec:	4649      	mov	r1, r9
 80161ee:	f04f 0200 	mov.w	r2, #0
 80161f2:	bfb8      	it	lt
 80161f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80161f8:	f7ea f85e 	bl	80002b8 <__aeabi_dsub>
 80161fc:	4680      	mov	r8, r0
 80161fe:	4689      	mov	r9, r1
 8016200:	4632      	mov	r2, r6
 8016202:	463b      	mov	r3, r7
 8016204:	4640      	mov	r0, r8
 8016206:	4649      	mov	r1, r9
 8016208:	f7ea f858 	bl	80002bc <__adddf3>
 801620c:	2400      	movs	r4, #0
 801620e:	a36a      	add	r3, pc, #424	@ (adr r3, 80163b8 <__ieee754_pow+0xa30>)
 8016210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016214:	4620      	mov	r0, r4
 8016216:	460d      	mov	r5, r1
 8016218:	f7ea fa06 	bl	8000628 <__aeabi_dmul>
 801621c:	4642      	mov	r2, r8
 801621e:	e9cd 0100 	strd	r0, r1, [sp]
 8016222:	464b      	mov	r3, r9
 8016224:	4620      	mov	r0, r4
 8016226:	4629      	mov	r1, r5
 8016228:	f7ea f846 	bl	80002b8 <__aeabi_dsub>
 801622c:	4602      	mov	r2, r0
 801622e:	460b      	mov	r3, r1
 8016230:	4630      	mov	r0, r6
 8016232:	4639      	mov	r1, r7
 8016234:	f7ea f840 	bl	80002b8 <__aeabi_dsub>
 8016238:	a361      	add	r3, pc, #388	@ (adr r3, 80163c0 <__ieee754_pow+0xa38>)
 801623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623e:	f7ea f9f3 	bl	8000628 <__aeabi_dmul>
 8016242:	a361      	add	r3, pc, #388	@ (adr r3, 80163c8 <__ieee754_pow+0xa40>)
 8016244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016248:	4680      	mov	r8, r0
 801624a:	4689      	mov	r9, r1
 801624c:	4620      	mov	r0, r4
 801624e:	4629      	mov	r1, r5
 8016250:	f7ea f9ea 	bl	8000628 <__aeabi_dmul>
 8016254:	4602      	mov	r2, r0
 8016256:	460b      	mov	r3, r1
 8016258:	4640      	mov	r0, r8
 801625a:	4649      	mov	r1, r9
 801625c:	f7ea f82e 	bl	80002bc <__adddf3>
 8016260:	4604      	mov	r4, r0
 8016262:	460d      	mov	r5, r1
 8016264:	4602      	mov	r2, r0
 8016266:	460b      	mov	r3, r1
 8016268:	e9dd 0100 	ldrd	r0, r1, [sp]
 801626c:	f7ea f826 	bl	80002bc <__adddf3>
 8016270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016274:	4680      	mov	r8, r0
 8016276:	4689      	mov	r9, r1
 8016278:	f7ea f81e 	bl	80002b8 <__aeabi_dsub>
 801627c:	4602      	mov	r2, r0
 801627e:	460b      	mov	r3, r1
 8016280:	4620      	mov	r0, r4
 8016282:	4629      	mov	r1, r5
 8016284:	f7ea f818 	bl	80002b8 <__aeabi_dsub>
 8016288:	4642      	mov	r2, r8
 801628a:	4606      	mov	r6, r0
 801628c:	460f      	mov	r7, r1
 801628e:	464b      	mov	r3, r9
 8016290:	4640      	mov	r0, r8
 8016292:	4649      	mov	r1, r9
 8016294:	f7ea f9c8 	bl	8000628 <__aeabi_dmul>
 8016298:	a34d      	add	r3, pc, #308	@ (adr r3, 80163d0 <__ieee754_pow+0xa48>)
 801629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629e:	4604      	mov	r4, r0
 80162a0:	460d      	mov	r5, r1
 80162a2:	f7ea f9c1 	bl	8000628 <__aeabi_dmul>
 80162a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80163d8 <__ieee754_pow+0xa50>)
 80162a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ac:	f7ea f804 	bl	80002b8 <__aeabi_dsub>
 80162b0:	4622      	mov	r2, r4
 80162b2:	462b      	mov	r3, r5
 80162b4:	f7ea f9b8 	bl	8000628 <__aeabi_dmul>
 80162b8:	a349      	add	r3, pc, #292	@ (adr r3, 80163e0 <__ieee754_pow+0xa58>)
 80162ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162be:	f7e9 fffd 	bl	80002bc <__adddf3>
 80162c2:	4622      	mov	r2, r4
 80162c4:	462b      	mov	r3, r5
 80162c6:	f7ea f9af 	bl	8000628 <__aeabi_dmul>
 80162ca:	a347      	add	r3, pc, #284	@ (adr r3, 80163e8 <__ieee754_pow+0xa60>)
 80162cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d0:	f7e9 fff2 	bl	80002b8 <__aeabi_dsub>
 80162d4:	4622      	mov	r2, r4
 80162d6:	462b      	mov	r3, r5
 80162d8:	f7ea f9a6 	bl	8000628 <__aeabi_dmul>
 80162dc:	a344      	add	r3, pc, #272	@ (adr r3, 80163f0 <__ieee754_pow+0xa68>)
 80162de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e2:	f7e9 ffeb 	bl	80002bc <__adddf3>
 80162e6:	4622      	mov	r2, r4
 80162e8:	462b      	mov	r3, r5
 80162ea:	f7ea f99d 	bl	8000628 <__aeabi_dmul>
 80162ee:	4602      	mov	r2, r0
 80162f0:	460b      	mov	r3, r1
 80162f2:	4640      	mov	r0, r8
 80162f4:	4649      	mov	r1, r9
 80162f6:	f7e9 ffdf 	bl	80002b8 <__aeabi_dsub>
 80162fa:	4604      	mov	r4, r0
 80162fc:	460d      	mov	r5, r1
 80162fe:	4602      	mov	r2, r0
 8016300:	460b      	mov	r3, r1
 8016302:	4640      	mov	r0, r8
 8016304:	4649      	mov	r1, r9
 8016306:	f7ea f98f 	bl	8000628 <__aeabi_dmul>
 801630a:	2200      	movs	r2, #0
 801630c:	e9cd 0100 	strd	r0, r1, [sp]
 8016310:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016314:	4620      	mov	r0, r4
 8016316:	4629      	mov	r1, r5
 8016318:	f7e9 ffce 	bl	80002b8 <__aeabi_dsub>
 801631c:	4602      	mov	r2, r0
 801631e:	460b      	mov	r3, r1
 8016320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016324:	f7ea faaa 	bl	800087c <__aeabi_ddiv>
 8016328:	4632      	mov	r2, r6
 801632a:	4604      	mov	r4, r0
 801632c:	460d      	mov	r5, r1
 801632e:	463b      	mov	r3, r7
 8016330:	4640      	mov	r0, r8
 8016332:	4649      	mov	r1, r9
 8016334:	f7ea f978 	bl	8000628 <__aeabi_dmul>
 8016338:	4632      	mov	r2, r6
 801633a:	463b      	mov	r3, r7
 801633c:	f7e9 ffbe 	bl	80002bc <__adddf3>
 8016340:	4602      	mov	r2, r0
 8016342:	460b      	mov	r3, r1
 8016344:	4620      	mov	r0, r4
 8016346:	4629      	mov	r1, r5
 8016348:	f7e9 ffb6 	bl	80002b8 <__aeabi_dsub>
 801634c:	4642      	mov	r2, r8
 801634e:	464b      	mov	r3, r9
 8016350:	f7e9 ffb2 	bl	80002b8 <__aeabi_dsub>
 8016354:	460b      	mov	r3, r1
 8016356:	4602      	mov	r2, r0
 8016358:	492d      	ldr	r1, [pc, #180]	@ (8016410 <__ieee754_pow+0xa88>)
 801635a:	2000      	movs	r0, #0
 801635c:	f7e9 ffac 	bl	80002b8 <__aeabi_dsub>
 8016360:	ec41 0b10 	vmov	d0, r0, r1
 8016364:	ee10 3a90 	vmov	r3, s1
 8016368:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801636c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016370:	da0b      	bge.n	801638a <__ieee754_pow+0xa02>
 8016372:	4650      	mov	r0, sl
 8016374:	f000 f85c 	bl	8016430 <scalbn>
 8016378:	ec51 0b10 	vmov	r0, r1, d0
 801637c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016380:	f7ff bb6d 	b.w	8015a5e <__ieee754_pow+0xd6>
 8016384:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016388:	e73a      	b.n	8016200 <__ieee754_pow+0x878>
 801638a:	ec51 0b10 	vmov	r0, r1, d0
 801638e:	4619      	mov	r1, r3
 8016390:	e7f4      	b.n	801637c <__ieee754_pow+0x9f4>
 8016392:	491f      	ldr	r1, [pc, #124]	@ (8016410 <__ieee754_pow+0xa88>)
 8016394:	2000      	movs	r0, #0
 8016396:	f7ff bb14 	b.w	80159c2 <__ieee754_pow+0x3a>
 801639a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801639e:	f7ff bb10 	b.w	80159c2 <__ieee754_pow+0x3a>
 80163a2:	4630      	mov	r0, r6
 80163a4:	4639      	mov	r1, r7
 80163a6:	f7ff bb0c 	b.w	80159c2 <__ieee754_pow+0x3a>
 80163aa:	460c      	mov	r4, r1
 80163ac:	f7ff bb69 	b.w	8015a82 <__ieee754_pow+0xfa>
 80163b0:	2400      	movs	r4, #0
 80163b2:	f7ff bb4b 	b.w	8015a4c <__ieee754_pow+0xc4>
 80163b6:	bf00      	nop
 80163b8:	00000000 	.word	0x00000000
 80163bc:	3fe62e43 	.word	0x3fe62e43
 80163c0:	fefa39ef 	.word	0xfefa39ef
 80163c4:	3fe62e42 	.word	0x3fe62e42
 80163c8:	0ca86c39 	.word	0x0ca86c39
 80163cc:	be205c61 	.word	0xbe205c61
 80163d0:	72bea4d0 	.word	0x72bea4d0
 80163d4:	3e663769 	.word	0x3e663769
 80163d8:	c5d26bf1 	.word	0xc5d26bf1
 80163dc:	3ebbbd41 	.word	0x3ebbbd41
 80163e0:	af25de2c 	.word	0xaf25de2c
 80163e4:	3f11566a 	.word	0x3f11566a
 80163e8:	16bebd93 	.word	0x16bebd93
 80163ec:	3f66c16c 	.word	0x3f66c16c
 80163f0:	5555553e 	.word	0x5555553e
 80163f4:	3fc55555 	.word	0x3fc55555
 80163f8:	40900000 	.word	0x40900000
 80163fc:	4090cbff 	.word	0x4090cbff
 8016400:	3f6f3400 	.word	0x3f6f3400
 8016404:	4090cc00 	.word	0x4090cc00
 8016408:	3fe00000 	.word	0x3fe00000
 801640c:	fff00000 	.word	0xfff00000
 8016410:	3ff00000 	.word	0x3ff00000
 8016414:	652b82fe 	.word	0x652b82fe
 8016418:	3c971547 	.word	0x3c971547

0801641c <fabs>:
 801641c:	ec51 0b10 	vmov	r0, r1, d0
 8016420:	4602      	mov	r2, r0
 8016422:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016426:	ec43 2b10 	vmov	d0, r2, r3
 801642a:	4770      	bx	lr
 801642c:	0000      	movs	r0, r0
	...

08016430 <scalbn>:
 8016430:	b570      	push	{r4, r5, r6, lr}
 8016432:	ec55 4b10 	vmov	r4, r5, d0
 8016436:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801643a:	4606      	mov	r6, r0
 801643c:	462b      	mov	r3, r5
 801643e:	b991      	cbnz	r1, 8016466 <scalbn+0x36>
 8016440:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016444:	4323      	orrs	r3, r4
 8016446:	d03b      	beq.n	80164c0 <scalbn+0x90>
 8016448:	4b33      	ldr	r3, [pc, #204]	@ (8016518 <scalbn+0xe8>)
 801644a:	4620      	mov	r0, r4
 801644c:	4629      	mov	r1, r5
 801644e:	2200      	movs	r2, #0
 8016450:	f7ea f8ea 	bl	8000628 <__aeabi_dmul>
 8016454:	4b31      	ldr	r3, [pc, #196]	@ (801651c <scalbn+0xec>)
 8016456:	429e      	cmp	r6, r3
 8016458:	4604      	mov	r4, r0
 801645a:	460d      	mov	r5, r1
 801645c:	da0f      	bge.n	801647e <scalbn+0x4e>
 801645e:	a326      	add	r3, pc, #152	@ (adr r3, 80164f8 <scalbn+0xc8>)
 8016460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016464:	e01e      	b.n	80164a4 <scalbn+0x74>
 8016466:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801646a:	4291      	cmp	r1, r2
 801646c:	d10b      	bne.n	8016486 <scalbn+0x56>
 801646e:	4622      	mov	r2, r4
 8016470:	4620      	mov	r0, r4
 8016472:	4629      	mov	r1, r5
 8016474:	f7e9 ff22 	bl	80002bc <__adddf3>
 8016478:	4604      	mov	r4, r0
 801647a:	460d      	mov	r5, r1
 801647c:	e020      	b.n	80164c0 <scalbn+0x90>
 801647e:	460b      	mov	r3, r1
 8016480:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016484:	3936      	subs	r1, #54	@ 0x36
 8016486:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801648a:	4296      	cmp	r6, r2
 801648c:	dd0d      	ble.n	80164aa <scalbn+0x7a>
 801648e:	2d00      	cmp	r5, #0
 8016490:	a11b      	add	r1, pc, #108	@ (adr r1, 8016500 <scalbn+0xd0>)
 8016492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016496:	da02      	bge.n	801649e <scalbn+0x6e>
 8016498:	a11b      	add	r1, pc, #108	@ (adr r1, 8016508 <scalbn+0xd8>)
 801649a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801649e:	a318      	add	r3, pc, #96	@ (adr r3, 8016500 <scalbn+0xd0>)
 80164a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a4:	f7ea f8c0 	bl	8000628 <__aeabi_dmul>
 80164a8:	e7e6      	b.n	8016478 <scalbn+0x48>
 80164aa:	1872      	adds	r2, r6, r1
 80164ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80164b0:	428a      	cmp	r2, r1
 80164b2:	dcec      	bgt.n	801648e <scalbn+0x5e>
 80164b4:	2a00      	cmp	r2, #0
 80164b6:	dd06      	ble.n	80164c6 <scalbn+0x96>
 80164b8:	f36f 531e 	bfc	r3, #20, #11
 80164bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80164c0:	ec45 4b10 	vmov	d0, r4, r5
 80164c4:	bd70      	pop	{r4, r5, r6, pc}
 80164c6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80164ca:	da08      	bge.n	80164de <scalbn+0xae>
 80164cc:	2d00      	cmp	r5, #0
 80164ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80164f8 <scalbn+0xc8>)
 80164d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164d4:	dac3      	bge.n	801645e <scalbn+0x2e>
 80164d6:	a10e      	add	r1, pc, #56	@ (adr r1, 8016510 <scalbn+0xe0>)
 80164d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164dc:	e7bf      	b.n	801645e <scalbn+0x2e>
 80164de:	3236      	adds	r2, #54	@ 0x36
 80164e0:	f36f 531e 	bfc	r3, #20, #11
 80164e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80164e8:	4620      	mov	r0, r4
 80164ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016520 <scalbn+0xf0>)
 80164ec:	4629      	mov	r1, r5
 80164ee:	2200      	movs	r2, #0
 80164f0:	e7d8      	b.n	80164a4 <scalbn+0x74>
 80164f2:	bf00      	nop
 80164f4:	f3af 8000 	nop.w
 80164f8:	c2f8f359 	.word	0xc2f8f359
 80164fc:	01a56e1f 	.word	0x01a56e1f
 8016500:	8800759c 	.word	0x8800759c
 8016504:	7e37e43c 	.word	0x7e37e43c
 8016508:	8800759c 	.word	0x8800759c
 801650c:	fe37e43c 	.word	0xfe37e43c
 8016510:	c2f8f359 	.word	0xc2f8f359
 8016514:	81a56e1f 	.word	0x81a56e1f
 8016518:	43500000 	.word	0x43500000
 801651c:	ffff3cb0 	.word	0xffff3cb0
 8016520:	3c900000 	.word	0x3c900000

08016524 <with_errno>:
 8016524:	b510      	push	{r4, lr}
 8016526:	ed2d 8b02 	vpush	{d8}
 801652a:	eeb0 8a40 	vmov.f32	s16, s0
 801652e:	eef0 8a60 	vmov.f32	s17, s1
 8016532:	4604      	mov	r4, r0
 8016534:	f7fe fb44 	bl	8014bc0 <__errno>
 8016538:	eeb0 0a48 	vmov.f32	s0, s16
 801653c:	eef0 0a68 	vmov.f32	s1, s17
 8016540:	ecbd 8b02 	vpop	{d8}
 8016544:	6004      	str	r4, [r0, #0]
 8016546:	bd10      	pop	{r4, pc}

08016548 <xflow>:
 8016548:	4603      	mov	r3, r0
 801654a:	b507      	push	{r0, r1, r2, lr}
 801654c:	ec51 0b10 	vmov	r0, r1, d0
 8016550:	b183      	cbz	r3, 8016574 <xflow+0x2c>
 8016552:	4602      	mov	r2, r0
 8016554:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016558:	e9cd 2300 	strd	r2, r3, [sp]
 801655c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016560:	f7ea f862 	bl	8000628 <__aeabi_dmul>
 8016564:	ec41 0b10 	vmov	d0, r0, r1
 8016568:	2022      	movs	r0, #34	@ 0x22
 801656a:	b003      	add	sp, #12
 801656c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016570:	f7ff bfd8 	b.w	8016524 <with_errno>
 8016574:	4602      	mov	r2, r0
 8016576:	460b      	mov	r3, r1
 8016578:	e7ee      	b.n	8016558 <xflow+0x10>
 801657a:	0000      	movs	r0, r0
 801657c:	0000      	movs	r0, r0
	...

08016580 <__math_uflow>:
 8016580:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016588 <__math_uflow+0x8>
 8016584:	f7ff bfe0 	b.w	8016548 <xflow>
 8016588:	00000000 	.word	0x00000000
 801658c:	10000000 	.word	0x10000000

08016590 <__math_oflow>:
 8016590:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016598 <__math_oflow+0x8>
 8016594:	f7ff bfd8 	b.w	8016548 <xflow>
 8016598:	00000000 	.word	0x00000000
 801659c:	70000000 	.word	0x70000000

080165a0 <__ieee754_sqrt>:
 80165a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a4:	4a66      	ldr	r2, [pc, #408]	@ (8016740 <__ieee754_sqrt+0x1a0>)
 80165a6:	ec55 4b10 	vmov	r4, r5, d0
 80165aa:	43aa      	bics	r2, r5
 80165ac:	462b      	mov	r3, r5
 80165ae:	4621      	mov	r1, r4
 80165b0:	d110      	bne.n	80165d4 <__ieee754_sqrt+0x34>
 80165b2:	4622      	mov	r2, r4
 80165b4:	4620      	mov	r0, r4
 80165b6:	4629      	mov	r1, r5
 80165b8:	f7ea f836 	bl	8000628 <__aeabi_dmul>
 80165bc:	4602      	mov	r2, r0
 80165be:	460b      	mov	r3, r1
 80165c0:	4620      	mov	r0, r4
 80165c2:	4629      	mov	r1, r5
 80165c4:	f7e9 fe7a 	bl	80002bc <__adddf3>
 80165c8:	4604      	mov	r4, r0
 80165ca:	460d      	mov	r5, r1
 80165cc:	ec45 4b10 	vmov	d0, r4, r5
 80165d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d4:	2d00      	cmp	r5, #0
 80165d6:	dc0e      	bgt.n	80165f6 <__ieee754_sqrt+0x56>
 80165d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80165dc:	4322      	orrs	r2, r4
 80165de:	d0f5      	beq.n	80165cc <__ieee754_sqrt+0x2c>
 80165e0:	b19d      	cbz	r5, 801660a <__ieee754_sqrt+0x6a>
 80165e2:	4622      	mov	r2, r4
 80165e4:	4620      	mov	r0, r4
 80165e6:	4629      	mov	r1, r5
 80165e8:	f7e9 fe66 	bl	80002b8 <__aeabi_dsub>
 80165ec:	4602      	mov	r2, r0
 80165ee:	460b      	mov	r3, r1
 80165f0:	f7ea f944 	bl	800087c <__aeabi_ddiv>
 80165f4:	e7e8      	b.n	80165c8 <__ieee754_sqrt+0x28>
 80165f6:	152a      	asrs	r2, r5, #20
 80165f8:	d115      	bne.n	8016626 <__ieee754_sqrt+0x86>
 80165fa:	2000      	movs	r0, #0
 80165fc:	e009      	b.n	8016612 <__ieee754_sqrt+0x72>
 80165fe:	0acb      	lsrs	r3, r1, #11
 8016600:	3a15      	subs	r2, #21
 8016602:	0549      	lsls	r1, r1, #21
 8016604:	2b00      	cmp	r3, #0
 8016606:	d0fa      	beq.n	80165fe <__ieee754_sqrt+0x5e>
 8016608:	e7f7      	b.n	80165fa <__ieee754_sqrt+0x5a>
 801660a:	462a      	mov	r2, r5
 801660c:	e7fa      	b.n	8016604 <__ieee754_sqrt+0x64>
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	3001      	adds	r0, #1
 8016612:	02dc      	lsls	r4, r3, #11
 8016614:	d5fb      	bpl.n	801660e <__ieee754_sqrt+0x6e>
 8016616:	1e44      	subs	r4, r0, #1
 8016618:	1b12      	subs	r2, r2, r4
 801661a:	f1c0 0420 	rsb	r4, r0, #32
 801661e:	fa21 f404 	lsr.w	r4, r1, r4
 8016622:	4323      	orrs	r3, r4
 8016624:	4081      	lsls	r1, r0
 8016626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801662a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801662e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016632:	07d2      	lsls	r2, r2, #31
 8016634:	bf5c      	itt	pl
 8016636:	005b      	lslpl	r3, r3, #1
 8016638:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801663c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016640:	bf58      	it	pl
 8016642:	0049      	lslpl	r1, r1, #1
 8016644:	2600      	movs	r6, #0
 8016646:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801664a:	107f      	asrs	r7, r7, #1
 801664c:	0049      	lsls	r1, r1, #1
 801664e:	2016      	movs	r0, #22
 8016650:	4632      	mov	r2, r6
 8016652:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016656:	1915      	adds	r5, r2, r4
 8016658:	429d      	cmp	r5, r3
 801665a:	bfde      	ittt	le
 801665c:	192a      	addle	r2, r5, r4
 801665e:	1b5b      	suble	r3, r3, r5
 8016660:	1936      	addle	r6, r6, r4
 8016662:	0fcd      	lsrs	r5, r1, #31
 8016664:	3801      	subs	r0, #1
 8016666:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801666a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801666e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016672:	d1f0      	bne.n	8016656 <__ieee754_sqrt+0xb6>
 8016674:	4605      	mov	r5, r0
 8016676:	2420      	movs	r4, #32
 8016678:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801667c:	4293      	cmp	r3, r2
 801667e:	eb0c 0e00 	add.w	lr, ip, r0
 8016682:	dc02      	bgt.n	801668a <__ieee754_sqrt+0xea>
 8016684:	d113      	bne.n	80166ae <__ieee754_sqrt+0x10e>
 8016686:	458e      	cmp	lr, r1
 8016688:	d811      	bhi.n	80166ae <__ieee754_sqrt+0x10e>
 801668a:	f1be 0f00 	cmp.w	lr, #0
 801668e:	eb0e 000c 	add.w	r0, lr, ip
 8016692:	da3f      	bge.n	8016714 <__ieee754_sqrt+0x174>
 8016694:	2800      	cmp	r0, #0
 8016696:	db3d      	blt.n	8016714 <__ieee754_sqrt+0x174>
 8016698:	f102 0801 	add.w	r8, r2, #1
 801669c:	1a9b      	subs	r3, r3, r2
 801669e:	458e      	cmp	lr, r1
 80166a0:	bf88      	it	hi
 80166a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80166a6:	eba1 010e 	sub.w	r1, r1, lr
 80166aa:	4465      	add	r5, ip
 80166ac:	4642      	mov	r2, r8
 80166ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80166b2:	3c01      	subs	r4, #1
 80166b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80166b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80166bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80166c0:	d1dc      	bne.n	801667c <__ieee754_sqrt+0xdc>
 80166c2:	4319      	orrs	r1, r3
 80166c4:	d01b      	beq.n	80166fe <__ieee754_sqrt+0x15e>
 80166c6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8016744 <__ieee754_sqrt+0x1a4>
 80166ca:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8016748 <__ieee754_sqrt+0x1a8>
 80166ce:	e9da 0100 	ldrd	r0, r1, [sl]
 80166d2:	e9db 2300 	ldrd	r2, r3, [fp]
 80166d6:	f7e9 fdef 	bl	80002b8 <__aeabi_dsub>
 80166da:	e9da 8900 	ldrd	r8, r9, [sl]
 80166de:	4602      	mov	r2, r0
 80166e0:	460b      	mov	r3, r1
 80166e2:	4640      	mov	r0, r8
 80166e4:	4649      	mov	r1, r9
 80166e6:	f7ea fa1b 	bl	8000b20 <__aeabi_dcmple>
 80166ea:	b140      	cbz	r0, 80166fe <__ieee754_sqrt+0x15e>
 80166ec:	f1b5 3fff 	cmp.w	r5, #4294967295
 80166f0:	e9da 0100 	ldrd	r0, r1, [sl]
 80166f4:	e9db 2300 	ldrd	r2, r3, [fp]
 80166f8:	d10e      	bne.n	8016718 <__ieee754_sqrt+0x178>
 80166fa:	3601      	adds	r6, #1
 80166fc:	4625      	mov	r5, r4
 80166fe:	1073      	asrs	r3, r6, #1
 8016700:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8016704:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8016708:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801670c:	086b      	lsrs	r3, r5, #1
 801670e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8016712:	e759      	b.n	80165c8 <__ieee754_sqrt+0x28>
 8016714:	4690      	mov	r8, r2
 8016716:	e7c1      	b.n	801669c <__ieee754_sqrt+0xfc>
 8016718:	f7e9 fdd0 	bl	80002bc <__adddf3>
 801671c:	e9da 8900 	ldrd	r8, r9, [sl]
 8016720:	4602      	mov	r2, r0
 8016722:	460b      	mov	r3, r1
 8016724:	4640      	mov	r0, r8
 8016726:	4649      	mov	r1, r9
 8016728:	f7ea f9f0 	bl	8000b0c <__aeabi_dcmplt>
 801672c:	b120      	cbz	r0, 8016738 <__ieee754_sqrt+0x198>
 801672e:	1cab      	adds	r3, r5, #2
 8016730:	bf08      	it	eq
 8016732:	3601      	addeq	r6, #1
 8016734:	3502      	adds	r5, #2
 8016736:	e7e2      	b.n	80166fe <__ieee754_sqrt+0x15e>
 8016738:	1c6b      	adds	r3, r5, #1
 801673a:	f023 0501 	bic.w	r5, r3, #1
 801673e:	e7de      	b.n	80166fe <__ieee754_sqrt+0x15e>
 8016740:	7ff00000 	.word	0x7ff00000
 8016744:	080175c8 	.word	0x080175c8
 8016748:	080175c0 	.word	0x080175c0

0801674c <_init>:
 801674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801674e:	bf00      	nop
 8016750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016752:	bc08      	pop	{r3}
 8016754:	469e      	mov	lr, r3
 8016756:	4770      	bx	lr

08016758 <_fini>:
 8016758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801675a:	bf00      	nop
 801675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801675e:	bc08      	pop	{r3}
 8016760:	469e      	mov	lr, r3
 8016762:	4770      	bx	lr
